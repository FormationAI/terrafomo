arguments:
- required: false
  help: A list of AZs to launch resources in. Required only if you do not specify
    any  vpc_zone_identifier
  name: availability_zones
  type: Text
- required: false
  help: The amount of time, in seconds, after a scaling activity completes before
    another scaling activity can start.
  name: default_cooldown
  type: Text
- required: false
  help: ! 'The number of Amazon EC2 instances that should be running in the group.
    (See also  #waiting-for-capacity  below.)'
  name: desired_capacity
  type: Text
- required: false
  help: A list of metrics to collect. The allowed values are  GroupMinSize ,  GroupMaxSize
    ,  GroupDesiredCapacity ,  GroupInServiceInstances ,  GroupPendingInstances ,  GroupStandbyInstances
    ,  GroupTerminatingInstances ,  GroupTotalInstances .
  name: enabled_metrics
  type: Text
- required: false
  help: Allows deleting the autoscaling group without waiting for all instances in
    the pool to terminate.  You can force an autoscaling group to delete even if it's
    in the process of scaling a resource. Normally, Terraform drains all the instances
    before deleting the group.  This bypasses that behavior and potentially leaves
    resources dangling.
  name: force_delete
  type: Text
- required: true
  help: ! ' - (Optional, Default: 300) Time (in seconds) after instance comes into
    service before checking health.'
  name: health_check_grace_period
  type: Text
- required: false
  help: ! '"EC2" or "ELB". Controls how health checking is done.'
  name: health_check_type
  type: Text
- required: false
  help: One or more http://docs.aws.amazon.com/autoscaling/latest/userguide/lifecycle-hooks.html
    to attach to the autoscaling group   instances are launched. The syntax is exactly
    the same as the separate /docs/providers/aws/r/autoscaling_lifecycle_hooks.html
    resource, without the  autoscaling_group_name  attribute. Please note that this
    will only work when creating a new autoscaling group. For all other use-cases,
    please use  aws_autoscaling_lifecycle_hook  resource.
  name: initial_lifecycle_hook
  type: Text
- required: true
  help: The name of the launch configuration to use.
  name: launch_configuration
  type: Text
- required: true
  help: ! ' (Optional) A list of elastic load balancer names to add to the autoscaling
    group names.'
  name: load_balancers
  type: Text
- required: true
  help: The maximum size of the auto scale group.
  name: max_size
  type: Text
- required: false
  help: The granularity to associate with the metrics to collect. The only valid value
    is  1Minute . Default is  1Minute .
  name: metrics_granularity
  type: Text
- required: false
  help: ! 'Setting this causes Terraform to wait for this number of instances to show
    up healthy in the ELB only on creation. Updates will not wait on ELB instance
    number changes. (See also  #waiting-for-capacity  below.)'
  name: min_elb_capacity
  type: Text
- required: true
  help: ! 'The minimum size of the auto scale group. (See also  #waiting-for-capacity  below.)'
  name: min_size
  type: Text
- required: false
  help: The name of the auto scaling group. By default generated by Terraform.
  name: name
  type: Text
- required: false
  help: Creates a unique name beginning with the specified prefix. Conflicts with  name
    .
  name: name_prefix
  type: Text
- required: true
  help: ! ' (Optional) The name of the placement group into which you''ll launch your
    instances, if any.'
  name: placement_group
  type: Text
- required: true
  help: ! ' (Optional) Allows setting instance protection. The autoscaling group will
    not select instances with this setting for terminination during scale in events.'
  name: protect_from_scale_in
  type: Text
- required: false
  help: A list of processes to suspend for the AutoScaling Group. The allowed values
    are  Launch ,  Terminate ,  HealthCheck ,  ReplaceUnhealthy ,  AZRebalance ,  AlarmNotification
    ,  ScheduledActions ,  AddToLoadBalancer . Note that if you suspend either the  Launch  or  Terminate  process
    types, it can prevent your autoscaling group from functioning properly.
  name: suspended_processes
  type: Text
- required: true
  help: ! ' (Optional) A list of tag blocks. Tags documented below.'
  name: tag
  type: Text
- required: true
  help: ! ' (Optional) A list of tag blocks (maps). Tags documented below.'
  name: tags
  type: Text
- required: true
  help: ! ' (Optional) A list of  aws_alb_target_group  ARNs, for use with Application
    Load Balancing'
  name: target_group_arns
  type: Text
- required: true
  help: ! ' (Optional) A list of policies to decide how the instances in the auto
    scale group should be terminated. The allowed values are  OldestInstance ,  NewestInstance
    ,  OldestLaunchConfiguration ,  ClosestToNextInstanceHour ,  Default .'
  name: termination_policies
  type: Text
- required: true
  help: ! ' (Optional) A list of subnet IDs to launch resources in.'
  name: vpc_zone_identifier
  type: Text
- required: true
  help: ! ' (Default: "10m") A maximum https://golang.org/pkg/time/#ParseDuration  that
    Terraform should wait for ASG instances to be healthy before timing out.  (See
    also  #waiting-for-capacity  below.) Setting this to "0" causes Terraform to skip
    all Capacity Waiting behavior.'
  name: wait_for_capacity_timeout
  type: Text
- required: false
  help: ! 'Setting this will cause Terraform to wait for exactly this number of healthy
    instances in all attached load balancers on both create and update operations.
    (Takes precedence over min_elb_capacity  behavior.) (See also  #waiting-for-capacity  below.)'
  name: wait_for_elb_capacity
  type: Text
name: aws_autoscaling_group
attributes:
- help: The ARN for this AutoScaling Group
  name: arn
  type: Text
- help: The availability zones of the autoscale group.
  name: availability_zones
  type: Text
- help: Time between a scaling activity and the succeeding scaling activity.
  name: default_cooldown
  type: Text
- help: ! ' -The number of Amazon EC2 instances that should be running in the group.'
  name: desired_capacity
  type: Text
- help: Time after instance comes into service before checking health.
  name: health_check_grace_period
  type: Text
- help: ! '"EC2" or "ELB". Controls how health checking is done.'
  name: health_check_type
  type: Text
- help: The autoscaling group id.
  name: id
  type: Text
- help: The launch configuration of the autoscale group
  name: launch_configuration
  type: Text
- help: ! ' (Optional) The load balancer names associated with the autoscaling group.'
  name: load_balancers
  type: Text
- help: The maximum size of the autoscale group
  name: max_size
  type: Text
- help: The minimum size of the autoscale group
  name: min_size
  type: Text
- help: The name of the autoscale group
  name: name
  type: Text
- help: ! ' (Optional) list of Target Group ARNs that apply to this AutoScaling Group'
  name: target_group_arns
  type: Text
- help: ! ' (Optional) - The VPC zone identifier'
  name: vpc_zone_identifier
  type: Text
