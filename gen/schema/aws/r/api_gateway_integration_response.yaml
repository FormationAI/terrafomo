_name: aws_api_gateway_integration_response
arguments:
  response_templates:
    required: false
    help: (Optional) A map specifying the templates used to transform the integration
      response body
    type: Text
  response_parameters:
    required: false
    help: ! '(Optional) A map of response parameters that can be read from the backend
      response. For example: @response_parameters = { "method.response.header.X-Some-Header"
      = "integration.response.header.X-Some-Other-Header" }@ ,'
    type: Text
  response_parameters_in_json:
    required: true
    help: ! '- , use @response_parameters@ instead.'
    type: Text
  selection_pattern:
    required: false
    help: (Optional) Specifies the regular expression pattern used to choose an integration
      response based on the response from the backend. Setting this to @-@ makes the
      integration the default one. If the backend is an @AWS@ Lambda function, the
      AWS Lambda function error header is matched. For all other @HTTP@ and @AWS@
      backends, the HTTP status code is matched.
    type: Text
  rest_api_id:
    required: true
    help: (Required) The ID of the associated REST API
    type: Text
  http_method:
    required: true
    help: (Required) The HTTP method ( @GET@ , @POST@ , @PUT@ , @DELETE@ , @HEAD@
      , @OPTION@ , @ANY@ )
    type: Text
  resource_id:
    required: true
    help: (Required) The API resource ID
    type: Text
  status_code:
    required: true
    help: (Required) The HTTP status code
    type: Text
  content_handling:
    required: false
    help: (Optional) Specifies how to handle request payload content type conversions.
      Supported values are @CONVERT_TO_BINARY@ and @CONVERT_TO_TEXT@ . If this property
      is not defined, the response payload will be passed through from the integration
      response to the method response without modification.
    type: Text
attributes: {}
about: Provides an HTTP Method Integration Response for an API Gateway Resource. ->
  Depends on having @aws_api_gateway_integration@ inside your rest api. To ensure
  this you might need to add an explicit @depends_on@ for clean runs.
examples: []
