-- This module is auto-generated.

{-# LANGUAGE DataKinds              #-}
{-# LANGUAGE DeriveGeneric          #-}
{-# LANGUAGE DuplicateRecordFields  #-}
{-# LANGUAGE FlexibleContexts       #-}
{-# LANGUAGE FlexibleInstances      #-}
{-# LANGUAGE FunctionalDependencies #-}
{-# LANGUAGE MultiParamTypeClasses  #-}
{-# LANGUAGE OverloadedStrings      #-}
{-# LANGUAGE TemplateHaskell        #-}
{-# LANGUAGE TypeFamilies           #-}

module {{ namespace }} where

import Data.Text (Text)

import GHC.Generics (Generic)

import Terraform.{{ provider }}.Provider ({{ provider }}, newDataSource)
import Terraform.{{ provider }}.Types
import Terraform.Syntax.Attribute (Attr, Computed)

import qualified Terraform.Syntax.TH as TH
{% for schema in schemas %}

{% let original = schema.value._name %}
-- | The @{{ original }}@ {{ provider }} datasource.
{% if schema.value.about %}
--
-- {{ schema.value.about }}
{% endif %}
{% for example in schema.value.examples %}
{% if example.first %}
--
-- Example Usage:
--
-- @
-- import Terraform.{{ provider }}
-- import Terraform.{{ provider }}.DataSource
-- @
{% endif %}
--
{% if example.value.title %}
-- {{ example.value.title }}
--
{% endif %}
-- @
{% for line in example.value.code %}
-- {{ line.value }}
{% endfor %}
-- @
{% endfor %}
data {{ schema.key }} = {{ schema.key }}
  {% for arg in schema.value.arguments %}
    {% if arg.first %}{ {% else %}, {% endif %}{{ arg.key }} :: !(Attr {{ arg.value.type }})
      {- ^ {{ arg.value.help }} -}
    {% if arg.last %}
    } deriving (Show, Eq, Generic)
    {% endif %}
  {% endfor %}

type instance Computed {{ schema.key }}
  {% for attr in schema.value.attributes %}
    {% if attr.first %}= '[{% else %}  ,{% endif %} '("{{ attr.key }}", Attr {{ attr.value.type }})
         {- {{ attr.value.help }} -}
    {% if attr.last %}
       ]
    {% endif %}
  {% else %}
    = '[]
  {% endfor %}

$(TH.makeDataSource
    "{{ original }}"
    ''{{ provider }}
    'newDataSource
    ''{{ schema.key }})
{% endlet %}
{% endfor %}
