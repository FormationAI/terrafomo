-- This module is auto-generated.

module {{ namespace }} where

import Data.Text (Text)

import GHC.Generics (Generic)

import Terraform.{{ provider }}.Provider ({{ provider }}, newDataSource)
import Terraform.{{ provider }}.Types
import Terraform.Syntax.Attribute (Attr, Computed)

import qualified Terraform.Syntax.TH as TH
{% for schema in schemas %}

{% let original = schema.value._name %}
-- | The @{{ original }}@ {{ provider }} datasource.
data {{ schema.key }} = {{ schema.key }}
  {% for arg in schema.value.arguments %}
    {% if arg.first %}{ {% else %}, {% endif %}{{ arg.key }} :: !(Attr {{ arg.value.type }})
      {- ^ {{ arg.value.help }} -}
    {% if arg.last %}
    } deriving (Show, Eq, Generic)
    {% endif %}
  {% endfor %}

type instance Computed {{ schema.key }}
  {% for attr in schema.value.attributes %}
    {% if attr.first %}= '[{% else %}  ,{% endif %} '("{{ attr.key }}", Attr {{ attr.value.type }})
         {- {{ attr.value.help }} -}
    {% if attr.last %}
       ]
    {% endif %}
  {% else %}
    = '[]
  {% endfor %}

$(TH.makeDataSource
    "{{ original }}"
    ''{{ provider }}
    'newDataSource
    ''{{ schema.key }})
{% endlet %}
{% endfor %}
