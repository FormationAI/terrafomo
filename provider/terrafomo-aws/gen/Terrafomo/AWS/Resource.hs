-- This module is auto-generated.

{-# LANGUAGE DuplicateRecordFields  #-}
{-# LANGUAGE FlexibleInstances      #-}
{-# LANGUAGE FunctionalDependencies #-}
{-# LANGUAGE MultiParamTypeClasses  #-}
{-# LANGUAGE NoImplicitPrelude      #-}
{-# LANGUAGE OverloadedStrings      #-}
{-# LANGUAGE PolyKinds              #-}
{-# LANGUAGE RankNTypes             #-}
{-# LANGUAGE RecordWildCards        #-}
{-# LANGUAGE ScopedTypeVariables    #-}
{-# LANGUAGE TypeFamilies           #-}
{-# LANGUAGE UndecidableInstances   #-}

{-# OPTIONS_GHC -fno-warn-unused-imports #-}

-- |
-- Module      : Terrafomo.AWS.Resource
-- Copyright   : (c) 2017 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+terrafomo@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
module Terrafomo.AWS.Resource
    (
    -- * Types
      ActivityResource (..)
    , activityResource

    , AmiCopyResource (..)
    , amiCopyResource

    , AmiFromInstanceResource (..)
    , amiFromInstanceResource

    , AmiLaunchPermissionResource (..)
    , amiLaunchPermissionResource

    , AmiResource (..)
    , amiResource

    , ApiGatewayAccountResource (..)
    , apiGatewayAccountResource

    , ApiGatewayApiKeyResource (..)
    , apiGatewayApiKeyResource

    , ApiGatewayAuthorizerResource (..)
    , apiGatewayAuthorizerResource

    , ApiGatewayBasePathMappingResource (..)
    , apiGatewayBasePathMappingResource

    , ApiGatewayClientCertificateResource (..)
    , apiGatewayClientCertificateResource

    , ApiGatewayDeploymentResource (..)
    , apiGatewayDeploymentResource

    , ApiGatewayDocumentationPartResource (..)
    , apiGatewayDocumentationPartResource

    , ApiGatewayDomainNameResource (..)
    , apiGatewayDomainNameResource

    , ApiGatewayGatewayResponseResource (..)
    , apiGatewayGatewayResponseResource

    , ApiGatewayIntegrationResource (..)
    , apiGatewayIntegrationResource

    , ApiGatewayIntegrationResponseResource (..)
    , apiGatewayIntegrationResponseResource

    , ApiGatewayMethodResource (..)
    , apiGatewayMethodResource

    , ApiGatewayMethodResponseResource (..)
    , apiGatewayMethodResponseResource

    , ApiGatewayMethodSettingsResource (..)
    , apiGatewayMethodSettingsResource

    , ApiGatewayModelResource (..)
    , apiGatewayModelResource

    , ApiGatewayResourceResource (..)
    , apiGatewayResourceResource

    , ApiGatewayRestApiResource (..)
    , apiGatewayRestApiResource

    , ApiGatewayStageResource (..)
    , apiGatewayStageResource

    , ApiGatewayUsagePlanKeyResource (..)
    , apiGatewayUsagePlanKeyResource

    , ApiGatewayUsagePlanResource (..)
    , apiGatewayUsagePlanResource

    , AppCookieStickinessPolicyResource (..)
    , appCookieStickinessPolicyResource

    , AppautoscalingPolicyResource (..)
    , appautoscalingPolicyResource

    , AppautoscalingScheduledActionResource (..)
    , appautoscalingScheduledActionResource

    , AppautoscalingTargetResource (..)
    , appautoscalingTargetResource

    , AthenaDatabaseResource (..)
    , athenaDatabaseResource

    , AthenaNamedQueryResource (..)
    , athenaNamedQueryResource

    , AutoscalingAttachmentResource (..)
    , autoscalingAttachmentResource

    , AutoscalingGroupResource (..)
    , autoscalingGroupResource

    , AutoscalingLifecycleHookResource (..)
    , autoscalingLifecycleHookResource

    , AutoscalingNotificationResource (..)
    , autoscalingNotificationResource

    , AutoscalingPolicyResource (..)
    , autoscalingPolicyResource

    , AutoscalingScheduleResource (..)
    , autoscalingScheduleResource

    , BatchComputeEnvironmentResource (..)
    , batchComputeEnvironmentResource

    , BatchJobDefinitionResource (..)
    , batchJobDefinitionResource

    , BatchJobQueueResource (..)
    , batchJobQueueResource

    , CloudformationStackResource (..)
    , cloudformationStackResource

    , CloudfrontDistributionResource (..)
    , cloudfrontDistributionResource

    , CloudfrontOriginAccessIdentityResource (..)
    , cloudfrontOriginAccessIdentityResource

    , CloudtrailResource (..)
    , cloudtrailResource

    , CloudwatchDashboardResource (..)
    , cloudwatchDashboardResource

    , CloudwatchEventPermissionResource (..)
    , cloudwatchEventPermissionResource

    , CloudwatchEventRuleResource (..)
    , cloudwatchEventRuleResource

    , CloudwatchEventTargetResource (..)
    , cloudwatchEventTargetResource

    , CloudwatchLogDestinationPolicyResource (..)
    , cloudwatchLogDestinationPolicyResource

    , CloudwatchLogDestinationResource (..)
    , cloudwatchLogDestinationResource

    , CloudwatchLogGroupResource (..)
    , cloudwatchLogGroupResource

    , CloudwatchLogMetricFilterResource (..)
    , cloudwatchLogMetricFilterResource

    , CloudwatchLogResourcePolicyResource (..)
    , cloudwatchLogResourcePolicyResource

    , CloudwatchLogStreamResource (..)
    , cloudwatchLogStreamResource

    , CloudwatchLogSubscriptionFilterResource (..)
    , cloudwatchLogSubscriptionFilterResource

    , CloudwatchMetricAlarmResource (..)
    , cloudwatchMetricAlarmResource

    , CodebuildProjectResource (..)
    , codebuildProjectResource

    , CodecommitRepositoryResource (..)
    , codecommitRepositoryResource

    , CodecommitTriggerResource (..)
    , codecommitTriggerResource

    , CodedeployAppResource (..)
    , codedeployAppResource

    , CodedeployDeploymentConfigResource (..)
    , codedeployDeploymentConfigResource

    , CodedeployDeploymentGroupResource (..)
    , codedeployDeploymentGroupResource

    , CodepipelineResource (..)
    , codepipelineResource

    , CognitoIdentityPoolResource (..)
    , cognitoIdentityPoolResource

    , CognitoIdentityPoolRolesAttachmentResource (..)
    , cognitoIdentityPoolRolesAttachmentResource

    , CognitoUserPoolClientResource (..)
    , cognitoUserPoolClientResource

    , CognitoUserPoolDomainResource (..)
    , cognitoUserPoolDomainResource

    , CognitoUserPoolResource (..)
    , cognitoUserPoolResource

    , ConfigConfigRuleResource (..)
    , configConfigRuleResource

    , ConfigConfigurationRecorderResource (..)
    , configConfigurationRecorderResource

    , ConfigConfigurationRecorderStatusResource (..)
    , configConfigurationRecorderStatusResource

    , ConfigDeliveryChannelResource (..)
    , configDeliveryChannelResource

    , CustomerGatewayResource (..)
    , customerGatewayResource

    , DbEventSubscriptionResource (..)
    , dbEventSubscriptionResource

    , DbInstanceResource (..)
    , dbInstanceResource

    , DbOptionGroupResource (..)
    , dbOptionGroupResource

    , DbParameterGroupResource (..)
    , dbParameterGroupResource

    , DbSecurityGroupResource (..)
    , dbSecurityGroupResource

    , DbSnapshotResource (..)
    , dbSnapshotResource

    , DbSubnetGroupResource (..)
    , dbSubnetGroupResource

    , DefaultNetworkAclResource (..)
    , defaultNetworkAclResource

    , DefaultRouteTableResource (..)
    , defaultRouteTableResource

    , DefaultSecurityGroupResource (..)
    , defaultSecurityGroupResource

    , DefaultSubnetResource (..)
    , defaultSubnetResource

    , DefaultVpcDhcpOptionsResource (..)
    , defaultVpcDhcpOptionsResource

    , DefaultVpcResource (..)
    , defaultVpcResource

    , DevicefarmProjectResource (..)
    , devicefarmProjectResource

    , DirectoryServiceDirectoryResource (..)
    , directoryServiceDirectoryResource

    , DmsCertificateResource (..)
    , dmsCertificateResource

    , DmsEndpointResource (..)
    , dmsEndpointResource

    , DmsReplicationInstanceResource (..)
    , dmsReplicationInstanceResource

    , DmsReplicationSubnetGroupResource (..)
    , dmsReplicationSubnetGroupResource

    , DmsReplicationTaskResource (..)
    , dmsReplicationTaskResource

    , DxConnectionAssociationResource (..)
    , dxConnectionAssociationResource

    , DxConnectionResource (..)
    , dxConnectionResource

    , DxLagResource (..)
    , dxLagResource

    , DynamodbTableResource (..)
    , dynamodbTableResource

    , EbsSnapshotResource (..)
    , ebsSnapshotResource

    , EbsVolumeResource (..)
    , ebsVolumeResource

    , EcrLifecyclePolicyResource (..)
    , ecrLifecyclePolicyResource

    , EcrRepositoryPolicyResource (..)
    , ecrRepositoryPolicyResource

    , EcrRepositoryResource (..)
    , ecrRepositoryResource

    , EcsClusterResource (..)
    , ecsClusterResource

    , EcsServiceResource (..)
    , ecsServiceResource

    , EcsTaskDefinitionResource (..)
    , ecsTaskDefinitionResource

    , EfsFileSystemResource (..)
    , efsFileSystemResource

    , EfsMountTargetResource (..)
    , efsMountTargetResource

    , EgressOnlyInternetGatewayResource (..)
    , egressOnlyInternetGatewayResource

    , EipAssociationResource (..)
    , eipAssociationResource

    , EipResource (..)
    , eipResource

    , ElasticBeanstalkApplicationResource (..)
    , elasticBeanstalkApplicationResource

    , ElasticBeanstalkApplicationVersionResource (..)
    , elasticBeanstalkApplicationVersionResource

    , ElasticBeanstalkConfigurationTemplateResource (..)
    , elasticBeanstalkConfigurationTemplateResource

    , ElasticBeanstalkEnvironmentResource (..)
    , elasticBeanstalkEnvironmentResource

    , ElasticacheClusterResource (..)
    , elasticacheClusterResource

    , ElasticacheParameterGroupResource (..)
    , elasticacheParameterGroupResource

    , ElasticacheReplicationGroupResource (..)
    , elasticacheReplicationGroupResource

    , ElasticacheSecurityGroupResource (..)
    , elasticacheSecurityGroupResource

    , ElasticacheSubnetGroupResource (..)
    , elasticacheSubnetGroupResource

    , ElasticsearchDomainPolicyResource (..)
    , elasticsearchDomainPolicyResource

    , ElasticsearchDomainResource (..)
    , elasticsearchDomainResource

    , ElastictranscoderPipelineResource (..)
    , elastictranscoderPipelineResource

    , ElastictranscoderPresetResource (..)
    , elastictranscoderPresetResource

    , ElbAttachmentResource (..)
    , elbAttachmentResource

    , ElbLoadBalancerBackendServerPolicyResource (..)
    , elbLoadBalancerBackendServerPolicyResource

    , ElbLoadBalancerListenerPolicyResource (..)
    , elbLoadBalancerListenerPolicyResource

    , ElbLoadBalancerPolicyResource (..)
    , elbLoadBalancerPolicyResource

    , ElbResource (..)
    , elbResource

    , EmrClusterResource (..)
    , emrClusterResource

    , EmrInstanceGroupResource (..)
    , emrInstanceGroupResource

    , EmrSecurityConfigurationResource (..)
    , emrSecurityConfigurationResource

    , FlowLogResource (..)
    , flowLogResource

    , GlacierVaultResource (..)
    , glacierVaultResource

    , GlueCatalogDatabaseResource (..)
    , glueCatalogDatabaseResource

    , GuarddutyDetectorResource (..)
    , guarddutyDetectorResource

    , GuarddutyMemberResource (..)
    , guarddutyMemberResource

    , IamAccessKeyResource (..)
    , iamAccessKeyResource

    , IamAccountAliasResource (..)
    , iamAccountAliasResource

    , IamAccountPasswordPolicyResource (..)
    , iamAccountPasswordPolicyResource

    , IamGroupMembershipResource (..)
    , iamGroupMembershipResource

    , IamGroupPolicyAttachmentResource (..)
    , iamGroupPolicyAttachmentResource

    , IamGroupPolicyResource (..)
    , iamGroupPolicyResource

    , IamGroupResource (..)
    , iamGroupResource

    , IamInstanceProfileResource (..)
    , iamInstanceProfileResource

    , IamOpenidConnectProviderResource (..)
    , iamOpenidConnectProviderResource

    , IamPolicyAttachmentResource (..)
    , iamPolicyAttachmentResource

    , IamPolicyResource (..)
    , iamPolicyResource

    , IamRolePolicyAttachmentResource (..)
    , iamRolePolicyAttachmentResource

    , IamRolePolicyResource (..)
    , iamRolePolicyResource

    , IamRoleResource (..)
    , iamRoleResource

    , IamSamlProviderResource (..)
    , iamSamlProviderResource

    , IamServerCertificateResource (..)
    , iamServerCertificateResource

    , IamUserLoginProfileResource (..)
    , iamUserLoginProfileResource

    , IamUserPolicyAttachmentResource (..)
    , iamUserPolicyAttachmentResource

    , IamUserPolicyResource (..)
    , iamUserPolicyResource

    , IamUserResource (..)
    , iamUserResource

    , IamUserSshKeyResource (..)
    , iamUserSshKeyResource

    , InspectorAssessmentTargetResource (..)
    , inspectorAssessmentTargetResource

    , InspectorAssessmentTemplateResource (..)
    , inspectorAssessmentTemplateResource

    , InspectorResourceGroupResource (..)
    , inspectorResourceGroupResource

    , InstanceResource (..)
    , instanceResource

    , InternetGatewayResource (..)
    , internetGatewayResource

    , IotCertificateResource (..)
    , iotCertificateResource

    , IotPolicyResource (..)
    , iotPolicyResource

    , KeyPairResource (..)
    , keyPairResource

    , KinesisFirehoseDeliveryStreamResource (..)
    , kinesisFirehoseDeliveryStreamResource

    , KinesisStreamResource (..)
    , kinesisStreamResource

    , KmsAliasResource (..)
    , kmsAliasResource

    , KmsKeyResource (..)
    , kmsKeyResource

    , LambdaAliasResource (..)
    , lambdaAliasResource

    , LambdaEventSourceMappingResource (..)
    , lambdaEventSourceMappingResource

    , LambdaFunctionResource (..)
    , lambdaFunctionResource

    , LambdaPermissionResource (..)
    , lambdaPermissionResource

    , LaunchConfigurationResource (..)
    , launchConfigurationResource

    , LbCookieStickinessPolicyResource (..)
    , lbCookieStickinessPolicyResource

    , LbListenerResource (..)
    , lbListenerResource

    , LbListenerRuleResource (..)
    , lbListenerRuleResource

    , LbResource (..)
    , lbResource

    , LbSslNegotiationPolicyResource (..)
    , lbSslNegotiationPolicyResource

    , LbTargetGroupAttachmentResource (..)
    , lbTargetGroupAttachmentResource

    , LbTargetGroupResource (..)
    , lbTargetGroupResource

    , LightsailDomainResource (..)
    , lightsailDomainResource

    , LightsailInstanceResource (..)
    , lightsailInstanceResource

    , LightsailKeyPairResource (..)
    , lightsailKeyPairResource

    , LightsailStaticIpAttachmentResource (..)
    , lightsailStaticIpAttachmentResource

    , LightsailStaticIpResource (..)
    , lightsailStaticIpResource

    , MainRouteTableAssociationResource (..)
    , mainRouteTableAssociationResource

    , MediaStoreContainerResource (..)
    , mediaStoreContainerResource

    , MqBrokerResource (..)
    , mqBrokerResource

    , MqConfigurationResource (..)
    , mqConfigurationResource

    , NatGatewayResource (..)
    , natGatewayResource

    , NetworkAclResource (..)
    , networkAclResource

    , NetworkAclRuleResource (..)
    , networkAclRuleResource

    , NetworkInterfaceAttachmentResource (..)
    , networkInterfaceAttachmentResource

    , NetworkInterfaceResource (..)
    , networkInterfaceResource

    , NetworkInterfaceSgAttachmentResource (..)
    , networkInterfaceSgAttachmentResource

    , OpsworksApplicationResource (..)
    , opsworksApplicationResource

    , OpsworksCustomLayerResource (..)
    , opsworksCustomLayerResource

    , OpsworksGangliaLayerResource (..)
    , opsworksGangliaLayerResource

    , OpsworksHaproxyLayerResource (..)
    , opsworksHaproxyLayerResource

    , OpsworksInstanceResource (..)
    , opsworksInstanceResource

    , OpsworksJavaAppLayerResource (..)
    , opsworksJavaAppLayerResource

    , OpsworksMemcachedLayerResource (..)
    , opsworksMemcachedLayerResource

    , OpsworksMysqlLayerResource (..)
    , opsworksMysqlLayerResource

    , OpsworksNodejsAppLayerResource (..)
    , opsworksNodejsAppLayerResource

    , OpsworksPermissionResource (..)
    , opsworksPermissionResource

    , OpsworksPhpAppLayerResource (..)
    , opsworksPhpAppLayerResource

    , OpsworksRailsAppLayerResource (..)
    , opsworksRailsAppLayerResource

    , OpsworksRdsDbInstanceResource (..)
    , opsworksRdsDbInstanceResource

    , OpsworksStackResource (..)
    , opsworksStackResource

    , OpsworksStaticWebLayerResource (..)
    , opsworksStaticWebLayerResource

    , OpsworksUserProfileResource (..)
    , opsworksUserProfileResource

    , PlacementGroupResource (..)
    , placementGroupResource

    , ProxyProtocolPolicyResource (..)
    , proxyProtocolPolicyResource

    , RdsClusterInstanceResource (..)
    , rdsClusterInstanceResource

    , RdsClusterParameterGroupResource (..)
    , rdsClusterParameterGroupResource

    , RdsClusterResource (..)
    , rdsClusterResource

    , RedshiftClusterResource (..)
    , redshiftClusterResource

    , RedshiftParameterGroupResource (..)
    , redshiftParameterGroupResource

    , RedshiftSecurityGroupResource (..)
    , redshiftSecurityGroupResource

    , RedshiftSubnetGroupResource (..)
    , redshiftSubnetGroupResource

    , Route53DelegationSetResource (..)
    , route53DelegationSetResource

    , Route53HealthCheckResource (..)
    , route53HealthCheckResource

    , Route53QueryLogResource (..)
    , route53QueryLogResource

    , Route53RecordResource (..)
    , route53RecordResource

    , Route53ZoneAssociationResource (..)
    , route53ZoneAssociationResource

    , Route53ZoneResource (..)
    , route53ZoneResource

    , RouteResource (..)
    , routeResource

    , RouteTableAssociationResource (..)
    , routeTableAssociationResource

    , RouteTableResource (..)
    , routeTableResource

    , S3BucketNotificationResource (..)
    , s3BucketNotificationResource

    , S3BucketObjectResource (..)
    , s3BucketObjectResource

    , S3BucketPolicyResource (..)
    , s3BucketPolicyResource

    , S3BucketResource (..)
    , s3BucketResource

    , SecurityGroupResource (..)
    , securityGroupResource

    , SecurityGroupRuleResource (..)
    , securityGroupRuleResource

    , ServiceDiscoveryPrivateDnsNamespaceResource (..)
    , serviceDiscoveryPrivateDnsNamespaceResource

    , ServiceDiscoveryPublicDnsNamespaceResource (..)
    , serviceDiscoveryPublicDnsNamespaceResource

    , ServiceDiscoveryServiceResource (..)
    , serviceDiscoveryServiceResource

    , ServicecatalogPortfolioResource (..)
    , servicecatalogPortfolioResource

    , SesActiveReceiptRuleSetResource (..)
    , sesActiveReceiptRuleSetResource

    , SesConfigurationSetResource (..)
    , sesConfigurationSetResource

    , SesDomainDkimResource (..)
    , sesDomainDkimResource

    , SesDomainIdentityResource (..)
    , sesDomainIdentityResource

    , SesEventDestinationResource (..)
    , sesEventDestinationResource

    , SesReceiptFilterResource (..)
    , sesReceiptFilterResource

    , SesReceiptRuleResource (..)
    , sesReceiptRuleResource

    , SesReceiptRuleSetResource (..)
    , sesReceiptRuleSetResource

    , SesTemplateResource (..)
    , sesTemplateResource

    , SimpledbDomainResource (..)
    , simpledbDomainResource

    , SnapshotCreateVolumePermissionResource (..)
    , snapshotCreateVolumePermissionResource

    , SnsTopicPolicyResource (..)
    , snsTopicPolicyResource

    , SnsTopicResource (..)
    , snsTopicResource

    , SnsTopicSubscriptionResource (..)
    , snsTopicSubscriptionResource

    , SpotDatafeedSubscriptionResource (..)
    , spotDatafeedSubscriptionResource

    , SpotFleetRequestResource (..)
    , spotFleetRequestResource

    , SpotInstanceRequestResource (..)
    , spotInstanceRequestResource

    , SqsQueuePolicyResource (..)
    , sqsQueuePolicyResource

    , SqsQueueResource (..)
    , sqsQueueResource

    , SsmActivationResource (..)
    , ssmActivationResource

    , SsmAssociationResource (..)
    , ssmAssociationResource

    , SsmDocumentResource (..)
    , ssmDocumentResource

    , SsmMaintenanceWindowResource (..)
    , ssmMaintenanceWindowResource

    , SsmMaintenanceWindowTargetResource (..)
    , ssmMaintenanceWindowTargetResource

    , SsmMaintenanceWindowTaskResource (..)
    , ssmMaintenanceWindowTaskResource

    , SsmParameterResource (..)
    , ssmParameterResource

    , SsmPatchBaselineResource (..)
    , ssmPatchBaselineResource

    , SsmPatchGroupResource (..)
    , ssmPatchGroupResource

    , StateMachineResource (..)
    , stateMachineResource

    , SubnetResource (..)
    , subnetResource

    , VolumeAttachmentResource (..)
    , volumeAttachmentResource

    , VpcDhcpOptionsAssociationResource (..)
    , vpcDhcpOptionsAssociationResource

    , VpcDhcpOptionsResource (..)
    , vpcDhcpOptionsResource

    , VpcEndpointResource (..)
    , vpcEndpointResource

    , VpcEndpointRouteTableAssociationResource (..)
    , vpcEndpointRouteTableAssociationResource

    , VpcPeeringConnectionAccepterResource (..)
    , vpcPeeringConnectionAccepterResource

    , VpcPeeringConnectionResource (..)
    , vpcPeeringConnectionResource

    , VpcResource (..)
    , vpcResource

    , VpnConnectionResource (..)
    , vpnConnectionResource

    , VpnConnectionRouteResource (..)
    , vpnConnectionRouteResource

    , VpnGatewayAttachmentResource (..)
    , vpnGatewayAttachmentResource

    , VpnGatewayResource (..)
    , vpnGatewayResource

    , VpnGatewayRoutePropagationResource (..)
    , vpnGatewayRoutePropagationResource

    , WafByteMatchSetResource (..)
    , wafByteMatchSetResource

    , WafIpsetResource (..)
    , wafIpsetResource

    , WafRateBasedRuleResource (..)
    , wafRateBasedRuleResource

    , WafRuleResource (..)
    , wafRuleResource

    , WafSizeConstraintSetResource (..)
    , wafSizeConstraintSetResource

    , WafSqlInjectionMatchSetResource (..)
    , wafSqlInjectionMatchSetResource

    , WafWebAclResource (..)
    , wafWebAclResource

    , WafXssMatchSetResource (..)
    , wafXssMatchSetResource

    , WafregionalByteMatchSetResource (..)
    , wafregionalByteMatchSetResource

    , WafregionalIpsetResource (..)
    , wafregionalIpsetResource

    -- * Overloaded Fields
    -- ** Arguments
    , HasAccelerationStatus (..)
    , HasAccepter (..)
    , HasAccessLogs (..)
    , HasAccessPolicies (..)
    , HasAccessPolicy (..)
    , HasAccountAlias (..)
    , HasAccountId (..)
    , HasAcl (..)
    , HasAction (..)
    , HasActionsEnabled (..)
    , HasActive (..)
    , HasAddHeaderAction (..)
    , HasAdjustmentType (..)
    , HasAdminCreateUserConfig (..)
    , HasAdvancedOptions (..)
    , HasAfter (..)
    , HasAgentVersion (..)
    , HasAlarmActions (..)
    , HasAlarmConfiguration (..)
    , HasAlarmDescription (..)
    , HasAlarmName (..)
    , HasAlbTargetGroupArn (..)
    , HasAlias (..)
    , HasAliasAttributes (..)
    , HasAliases (..)
    , HasAllocatedMemory (..)
    , HasAllocatedStorage (..)
    , HasAllocationId (..)
    , HasAllocationStrategy (..)
    , HasAllowMajorVersionUpgrade (..)
    , HasAllowReassociation (..)
    , HasAllowSelfManagement (..)
    , HasAllowSsh (..)
    , HasAllowSudo (..)
    , HasAllowUnassociatedTargets (..)
    , HasAllowUnauthenticatedIdentities (..)
    , HasAllowUsersToChangePassword (..)
    , HasAllowVersionUpgrade (..)
    , HasAllowedOauthFlows (..)
    , HasAllowedOauthFlowsUserPoolClient (..)
    , HasAllowedOauthScopes (..)
    , HasAmi (..)
    , HasAmiId (..)
    , HasApiId (..)
    , HasApiKeyRequired (..)
    , HasApiStages (..)
    , HasAppName (..)
    , HasAppServer (..)
    , HasAppServerVersion (..)
    , HasAppSource (..)
    , HasApplication (..)
    , HasApplications (..)
    , HasApplyImmediately (..)
    , HasApprovalRule (..)
    , HasApprovedPatches (..)
    , HasApprovedPatchesComplianceLevel (..)
    , HasArchitecture (..)
    , HasArn (..)
    , HasArtifactStore (..)
    , HasArtifacts (..)
    , HasAssignGeneratedIpv6CidrBlock (..)
    , HasAssignIpv6AddressOnCreation (..)
    , HasAssociatePublicIpAddress (..)
    , HasAssociateWithPrivateIp (..)
    , HasAssociationName (..)
    , HasAssumeRolePolicy (..)
    , HasAtRestEncryptionEnabled (..)
    , HasAttachment (..)
    , HasAttribute (..)
    , HasAudio (..)
    , HasAudioCodecOptions (..)
    , HasAuthToken (..)
    , HasAuthorization (..)
    , HasAuthorizerCredentials (..)
    , HasAuthorizerId (..)
    , HasAuthorizerResultTtlInSeconds (..)
    , HasAuthorizerUri (..)
    , HasAutoAccept (..)
    , HasAutoAssignElasticIps (..)
    , HasAutoAssignPublicIps (..)
    , HasAutoBundleOnDeploy (..)
    , HasAutoHealing (..)
    , HasAutoMinorVersionUpgrade (..)
    , HasAutoRollbackConfiguration (..)
    , HasAutoScalingType (..)
    , HasAutoVerifiedAttributes (..)
    , HasAutomatedSnapshotRetentionPeriod (..)
    , HasAutomaticFailoverEnabled (..)
    , HasAutoscalingGroupName (..)
    , HasAutoscalingGroups (..)
    , HasAutoscalingRole (..)
    , HasAvailabilityZone (..)
    , HasAvailabilityZones (..)
    , HasAwsFlowRubySettings (..)
    , HasAwsKmsKeyArn (..)
    , HasAzMode (..)
    , HasBackupRetentionPeriod (..)
    , HasBackupWindow (..)
    , HasBandwidth (..)
    , HasBasePath (..)
    , HasBaselineId (..)
    , HasBatchSize (..)
    , HasBerkshelfVersion (..)
    , HasBgpAsn (..)
    , HasBinaryMediaTypes (..)
    , HasBlockDurationMinutes (..)
    , HasBlueGreenDeploymentConfig (..)
    , HasBlueprintId (..)
    , HasBody (..)
    , HasBootstrapAction (..)
    , HasBounceAction (..)
    , HasBranches (..)
    , HasBrokerName (..)
    , HasBucket (..)
    , HasBucketPrefix (..)
    , HasBuildTimeout (..)
    , HasBundleId (..)
    , HasBundlerVersion (..)
    , HasByteMatchTuple (..)
    , HasByteMatchTuples (..)
    , HasCacheBehavior (..)
    , HasCacheClusterEnabled (..)
    , HasCacheClusterSize (..)
    , HasCacheControl (..)
    , HasCacheKeyNamespace (..)
    , HasCacheKeyParameters (..)
    , HasCallbackUrls (..)
    , HasCapabilities (..)
    , HasCatalogId (..)
    , HasCdcStartTime (..)
    , HasCertificateArn (..)
    , HasCertificateBody (..)
    , HasCertificateChain (..)
    , HasCertificateId (..)
    , HasCertificateName (..)
    , HasCertificatePem (..)
    , HasCertificatePrivateKey (..)
    , HasCertificateWallet (..)
    , HasCharacterSetName (..)
    , HasChildHealthThreshold (..)
    , HasChildHealthchecks (..)
    , HasCidr (..)
    , HasCidrBlock (..)
    , HasCidrBlocks (..)
    , HasClientCertificateId (..)
    , HasClientIdList (..)
    , HasCloudWatchLogsGroupArn (..)
    , HasCloudWatchLogsRoleArn (..)
    , HasCloudwatchAlarmName (..)
    , HasCloudwatchAlarmRegion (..)
    , HasCloudwatchDestination (..)
    , HasCloudwatchLogGroupArn (..)
    , HasCloudwatchRoleArn (..)
    , HasCluster (..)
    , HasClusterConfig (..)
    , HasClusterId (..)
    , HasClusterIdentifier (..)
    , HasClusterIdentifierPrefix (..)
    , HasClusterMode (..)
    , HasClusterParameterGroupName (..)
    , HasClusterSecurityGroups (..)
    , HasClusterSubnetGroupName (..)
    , HasClusterType (..)
    , HasClusterVersion (..)
    , HasCnamePrefix (..)
    , HasCognitoIdentityProviders (..)
    , HasColor (..)
    , HasComment (..)
    , HasComparisonOperator (..)
    , HasComputeEnvironmentName (..)
    , HasComputeEnvironments (..)
    , HasComputeResources (..)
    , HasCondition (..)
    , HasConfiguration (..)
    , HasConfigurationManagerName (..)
    , HasConfigurationManagerVersion (..)
    , HasConfigurationSetName (..)
    , HasConfigurations (..)
    , HasConfirmationTimeoutInMinutes (..)
    , HasConnectSettings (..)
    , HasConnectionDraining (..)
    , HasConnectionDrainingTimeout (..)
    , HasConnectionId (..)
    , HasConnectionsBandwidth (..)
    , HasContainer (..)
    , HasContainerDefinitions (..)
    , HasContainerProperties (..)
    , HasContent (..)
    , HasContentBasedDeduplication (..)
    , HasContentConfig (..)
    , HasContentConfigPermissions (..)
    , HasContentDisposition (..)
    , HasContentEncoding (..)
    , HasContentHandling (..)
    , HasContentLanguage (..)
    , HasContentType (..)
    , HasCookieExpirationPeriod (..)
    , HasCookieName (..)
    , HasCopyTagsToSnapshot (..)
    , HasCoreInstanceCount (..)
    , HasCoreInstanceType (..)
    , HasCorsRule (..)
    , HasCreationToken (..)
    , HasCredentials (..)
    , HasCrossZoneLoadBalancing (..)
    , HasCsr (..)
    , HasCustomCookbooksSource (..)
    , HasCustomData (..)
    , HasCustomErrorResponse (..)
    , HasCustomInstanceProfileArn (..)
    , HasCustomJson (..)
    , HasCustomSecurityGroupIds (..)
    , HasCustomerGatewayId (..)
    , HasCutoff (..)
    , HasDashboardBody (..)
    , HasDashboardName (..)
    , HasData' (..)
    , HasDataSourceArn (..)
    , HasDataSourceDatabaseName (..)
    , HasDataSourceType (..)
    , HasDatabase (..)
    , HasDatabaseName (..)
    , HasDatapointsToAlarm (..)
    , HasDbClusterParameterGroupName (..)
    , HasDbInstanceIdentifier (..)
    , HasDbParameterGroupName (..)
    , HasDbPassword (..)
    , HasDbSnapshotIdentifier (..)
    , HasDbSubnetGroupName (..)
    , HasDbUser (..)
    , HasDeadLetterConfig (..)
    , HasDefaultAction (..)
    , HasDefaultAvailabilityZone (..)
    , HasDefaultBranch (..)
    , HasDefaultCacheBehavior (..)
    , HasDefaultCooldown (..)
    , HasDefaultInstanceProfileArn (..)
    , HasDefaultNetworkAclId (..)
    , HasDefaultOs (..)
    , HasDefaultRedirectUri (..)
    , HasDefaultResult (..)
    , HasDefaultRootDeviceType (..)
    , HasDefaultRootObject (..)
    , HasDefaultRouteTableId (..)
    , HasDefaultSshKeyName (..)
    , HasDefaultSubnetId (..)
    , HasDefinition (..)
    , HasDelaySeconds (..)
    , HasDelegationSetId (..)
    , HasDeletionWindowInDays (..)
    , HasDeliveryPolicy (..)
    , HasDeploymentConfigName (..)
    , HasDeploymentGroupName (..)
    , HasDeploymentId (..)
    , HasDeploymentMaximumPercent (..)
    , HasDeploymentMinimumHealthyPercent (..)
    , HasDeploymentMode (..)
    , HasDeploymentStyle (..)
    , HasDeregistrationDelay (..)
    , HasDescription (..)
    , HasDesiredCapacity (..)
    , HasDesiredCount (..)
    , HasDestination (..)
    , HasDestinationArn (..)
    , HasDestinationCidrBlock (..)
    , HasDestinationIpv6CidrBlock (..)
    , HasDestinationName (..)
    , HasDetectorId (..)
    , HasDeveloperProviderName (..)
    , HasDeviceConfiguration (..)
    , HasDeviceIndex (..)
    , HasDeviceName (..)
    , HasDhcpOptionsId (..)
    , HasDimensions (..)
    , HasDisableApiTermination (..)
    , HasDisableRollback (..)
    , HasDisplayName (..)
    , HasDnsConfig (..)
    , HasDocumentRoot (..)
    , HasDocumentType (..)
    , HasDocumentVersion (..)
    , HasDocumentationVersion (..)
    , HasDomain (..)
    , HasDomainName (..)
    , HasDomainNameServers (..)
    , HasDomains (..)
    , HasDrainElbOnShutdown (..)
    , HasDuration (..)
    , HasEbsBlockDevice (..)
    , HasEbsConfig (..)
    , HasEbsOptimized (..)
    , HasEbsOptions (..)
    , HasEbsRootVolumeSize (..)
    , HasEbsVolume (..)
    , HasEc2Attributes (..)
    , HasEc2TagFilter (..)
    , HasEcsTarget (..)
    , HasEgress (..)
    , HasEgressOnlyGatewayId (..)
    , HasElasticIp (..)
    , HasElasticLoadBalancer (..)
    , HasElasticsearchVersion (..)
    , HasElb (..)
    , HasEmail (..)
    , HasEmailConfiguration (..)
    , HasEmailVerificationMessage (..)
    , HasEmailVerificationSubject (..)
    , HasEnable (..)
    , HasEnableClassiclink (..)
    , HasEnableClassiclinkDnsSupport (..)
    , HasEnableDeletionProtection (..)
    , HasEnableDnsHostnames (..)
    , HasEnableDnsSupport (..)
    , HasEnableKeyRotation (..)
    , HasEnableLogFileValidation (..)
    , HasEnableLogging (..)
    , HasEnableMonitoring (..)
    , HasEnableSni (..)
    , HasEnableSsl (..)
    , HasEnableSso (..)
    , HasEnabled (..)
    , HasEnabledMetrics (..)
    , HasEncoding (..)
    , HasEncryptAtRest (..)
    , HasEncrypted (..)
    , HasEncryptionKey (..)
    , HasEncryptionType (..)
    , HasEndTime (..)
    , HasEndpoint (..)
    , HasEndpointAutoConfirms (..)
    , HasEndpointId (..)
    , HasEndpointType (..)
    , HasEngine (..)
    , HasEngineName (..)
    , HasEngineType (..)
    , HasEngineVersion (..)
    , HasEnhancedVpcRouting (..)
    , HasEniId (..)
    , HasEnvironment (..)
    , HasEnvironmentId (..)
    , HasEphemeralBlockDevice (..)
    , HasEtag (..)
    , HasEvaluateLowSampleCountPercentiles (..)
    , HasEvaluationPeriods (..)
    , HasEventCategories (..)
    , HasEventPattern (..)
    , HasEventSourceArn (..)
    , HasEvents (..)
    , HasExcessCapacityTerminationPolicy (..)
    , HasExpirationDate (..)
    , HasExplicitAuthFlows (..)
    , HasExtendedS3Configuration (..)
    , HasExtendedStatistic (..)
    , HasExtraConnectionAttributes (..)
    , HasFailoverRoutingPolicy (..)
    , HasFailureThreshold (..)
    , HasFamily' (..)
    , HasFifoQueue (..)
    , HasFileSystemId (..)
    , HasFilename (..)
    , HasFilterPattern (..)
    , HasFinalSnapshotIdentifier (..)
    , HasForceDelete (..)
    , HasForceDestroy (..)
    , HasForceDetach (..)
    , HasFqdn (..)
    , HasFromPort (..)
    , HasFunctionName (..)
    , HasFunctionVersion (..)
    , HasGatewayId (..)
    , HasGenerateSecret (..)
    , HasGeolocationRoutingPolicy (..)
    , HasGlobalFilter (..)
    , HasGlobalSecondaryIndex (..)
    , HasGroup (..)
    , HasGroupNames (..)
    , HasGroups (..)
    , HasHandler (..)
    , HasHardExpiry (..)
    , HasHashKey (..)
    , HasHealthCheck (..)
    , HasHealthCheckConfig (..)
    , HasHealthCheckGracePeriod (..)
    , HasHealthCheckGracePeriodSeconds (..)
    , HasHealthCheckId (..)
    , HasHealthCheckType (..)
    , HasHealthcheckMethod (..)
    , HasHealthcheckUrl (..)
    , HasHeartbeatTimeout (..)
    , HasHostInstanceType (..)
    , HasHostname (..)
    , HasHostnameTheme (..)
    , HasHtml (..)
    , HasHttpMethod (..)
    , HasHttpVersion (..)
    , HasIamDatabaseAuthenticationEnabled (..)
    , HasIamFleetRole (..)
    , HasIamInstanceProfile (..)
    , HasIamRole (..)
    , HasIamRoleArn (..)
    , HasIamRoles (..)
    , HasIcmpCode (..)
    , HasIcmpType (..)
    , HasIdentifier (..)
    , HasIdentifierPrefix (..)
    , HasIdentityPoolId (..)
    , HasIdentityPoolName (..)
    , HasIdentitySource (..)
    , HasIdentityValidationExpression (..)
    , HasIdleTimeout (..)
    , HasImageId (..)
    , HasIncludeGlobalServiceEvents (..)
    , HasIngress (..)
    , HasInitialLifecycleHook (..)
    , HasInput (..)
    , HasInputBucket (..)
    , HasInputParameters (..)
    , HasInputPath (..)
    , HasInputTransformer (..)
    , HasInstallUpdatesOnBoot (..)
    , HasInstance' (..)
    , HasInstanceClass (..)
    , HasInstanceCount (..)
    , HasInstanceGroup (..)
    , HasInstanceId (..)
    , HasInstanceInitiatedShutdownBehavior (..)
    , HasInstanceInterruptionBehavior (..)
    , HasInstanceName (..)
    , HasInstancePort (..)
    , HasInstancePorts (..)
    , HasInstanceShutdownTimeout (..)
    , HasInstanceTenancy (..)
    , HasInstanceType (..)
    , HasInstances (..)
    , HasInsufficientDataActions (..)
    , HasInsufficientDataHealthStatus (..)
    , HasIntegrationHttpMethod (..)
    , HasInternal (..)
    , HasInvertHealthcheck (..)
    , HasIops (..)
    , HasIpAddress (..)
    , HasIpAddressType (..)
    , HasIpSetDescriptor (..)
    , HasIpSetDescriptors (..)
    , HasIpv6AddressCount (..)
    , HasIpv6Addresses (..)
    , HasIpv6CidrBlock (..)
    , HasIpv6CidrBlocks (..)
    , HasIsEnabled (..)
    , HasIsIpv6Enabled (..)
    , HasIsMultiRegionTrail (..)
    , HasJvmOptions (..)
    , HasJvmType (..)
    , HasJvmVersion (..)
    , HasKeepJobFlowAliveWhenNoSteps (..)
    , HasKey (..)
    , HasKeyId (..)
    , HasKeyName (..)
    , HasKeyNamePrefix (..)
    , HasKeyPairName (..)
    , HasKeyType (..)
    , HasKeyUsage (..)
    , HasKinesisDestination (..)
    , HasKinesisSourceConfiguration (..)
    , HasKmsDataKeyReusePeriodSeconds (..)
    , HasKmsKeyArn (..)
    , HasKmsKeyId (..)
    , HasKmsMasterKeyId (..)
    , HasLagId (..)
    , HasLambdaAction (..)
    , HasLambdaConfig (..)
    , HasLambdaFunction (..)
    , HasLatencyRoutingPolicy (..)
    , HasLaunchConfiguration (..)
    , HasLaunchGroup (..)
    , HasLaunchSpecification (..)
    , HasLaunchType (..)
    , HasLayerIds (..)
    , HasLbPort (..)
    , HasLevel (..)
    , HasLicenseModel (..)
    , HasLifecycleRule (..)
    , HasLifecycleTransition (..)
    , HasListener (..)
    , HasListenerArn (..)
    , HasLoadBalancer (..)
    , HasLoadBalancerArn (..)
    , HasLoadBalancerInfo (..)
    , HasLoadBalancerName (..)
    , HasLoadBalancerPort (..)
    , HasLoadBalancerType (..)
    , HasLoadBalancers (..)
    , HasLocalSecondaryIndex (..)
    , HasLocation (..)
    , HasLocationUri (..)
    , HasLogGroupName (..)
    , HasLogPublishingOptions (..)
    , HasLogUri (..)
    , HasLogging (..)
    , HasLoggingConfig (..)
    , HasLoggingInfo (..)
    , HasLogoutUrls (..)
    , HasMaintenanceWindow (..)
    , HasMaintenanceWindowStartTime (..)
    , HasMajorEngineVersion (..)
    , HasManageBerkshelf (..)
    , HasManageBundler (..)
    , HasMapPublicIpOnLaunch (..)
    , HasMasterInstanceType (..)
    , HasMasterPassword (..)
    , HasMasterUsername (..)
    , HasMatchingTypes (..)
    , HasMaxCapacity (..)
    , HasMaxConcurrency (..)
    , HasMaxErrors (..)
    , HasMaxMessageSize (..)
    , HasMaxPasswordAge (..)
    , HasMaxSize (..)
    , HasMaximumExecutionFrequency (..)
    , HasMeasureLatency (..)
    , HasMemorySize (..)
    , HasMessageRetentionSeconds (..)
    , HasMethodPath (..)
    , HasMetricName (..)
    , HasMetricTransformation (..)
    , HasMetricsGranularity (..)
    , HasMfaConfiguration (..)
    , HasMigrationType (..)
    , HasMinCapacity (..)
    , HasMinElbCapacity (..)
    , HasMinSize (..)
    , HasMinimumHealthyHosts (..)
    , HasMinimumPasswordLength (..)
    , HasMonitoring (..)
    , HasMonitoringInterval (..)
    , HasMonitoringRoleArn (..)
    , HasMultiAz (..)
    , HasMultivalueAnswerRoutingPolicy (..)
    , HasName (..)
    , HasNamePrefix (..)
    , HasNamespace (..)
    , HasNatGatewayId (..)
    , HasNetbiosNameServers (..)
    , HasNetbiosNodeType (..)
    , HasNetworkAclId (..)
    , HasNetworkConfiguration (..)
    , HasNetworkInterface (..)
    , HasNetworkInterfaceId (..)
    , HasNodeType (..)
    , HasNodejsVersion (..)
    , HasNotification (..)
    , HasNotificationArns (..)
    , HasNotificationMetadata (..)
    , HasNotificationTargetArn (..)
    , HasNotificationTopicArn (..)
    , HasNotifications (..)
    , HasNtpServers (..)
    , HasNumCacheNodes (..)
    , HasNumberCacheClusters (..)
    , HasNumberOfConnections (..)
    , HasNumberOfNodes (..)
    , HasOkActions (..)
    , HasOnFailure (..)
    , HasOnPremisesInstanceTagFilter (..)
    , HasOpenidConnectProviderArns (..)
    , HasOperatingSystem (..)
    , HasOption (..)
    , HasOptionGroupDescription (..)
    , HasOptionGroupName (..)
    , HasOrigin (..)
    , HasOs (..)
    , HasOutputBucket (..)
    , HasOutputLocation (..)
    , HasOverwrite (..)
    , HasOwnerAccount (..)
    , HasOwnerInformation (..)
    , HasParameter (..)
    , HasParameterGroupName (..)
    , HasParameters (..)
    , HasParentId (..)
    , HasPassengerVersion (..)
    , HasPassthroughBehavior (..)
    , HasPassword (..)
    , HasPasswordLength (..)
    , HasPasswordPolicy (..)
    , HasPasswordResetRequired (..)
    , HasPasswordReusePrevention (..)
    , HasPatchGroup (..)
    , HasPath (..)
    , HasPathPart (..)
    , HasPattern (..)
    , HasPeerOwnerId (..)
    , HasPeerRegion (..)
    , HasPeerVpcId (..)
    , HasPerformanceInsightsEnabled (..)
    , HasPerformanceInsightsKmsKeyId (..)
    , HasPerformanceMode (..)
    , HasPeriod (..)
    , HasPermissions (..)
    , HasPgpKey (..)
    , HasPlacementConstraints (..)
    , HasPlacementGroup (..)
    , HasPlacementStrategy (..)
    , HasPlacementTenancy (..)
    , HasPolicy (..)
    , HasPolicyArn (..)
    , HasPolicyAttribute (..)
    , HasPolicyBody (..)
    , HasPolicyDocument (..)
    , HasPolicyName (..)
    , HasPolicyNames (..)
    , HasPolicyType (..)
    , HasPolicyTypeName (..)
    , HasPolicyUrl (..)
    , HasPollInterval (..)
    , HasPort (..)
    , HasPredicates (..)
    , HasPreferredBackupWindow (..)
    , HasPreferredMaintenanceWindow (..)
    , HasPrefix (..)
    , HasPrefixListIds (..)
    , HasPriceClass (..)
    , HasPrincipal (..)
    , HasPriority (..)
    , HasPrivateIp (..)
    , HasPrivateIpAddress (..)
    , HasPrivateIps (..)
    , HasPrivateIpsCount (..)
    , HasPrivateKey (..)
    , HasProductCode (..)
    , HasPromotionTier (..)
    , HasPropagatingVgws (..)
    , HasProperties (..)
    , HasProtectFromScaleIn (..)
    , HasProtocol (..)
    , HasProviderName (..)
    , HasPublicIp (..)
    , HasPublicKey (..)
    , HasPubliclyAccessible (..)
    , HasPublish (..)
    , HasQualifier (..)
    , HasQuery (..)
    , HasQueue (..)
    , HasQueueUrl (..)
    , HasQuotaSettings (..)
    , HasRailsEnv (..)
    , HasRangeKey (..)
    , HasRateKey (..)
    , HasRateLimit (..)
    , HasRawMessageDelivery (..)
    , HasRdsDbInstanceArn (..)
    , HasReadAttributes (..)
    , HasReadCapacity (..)
    , HasReceiveWaitTimeSeconds (..)
    , HasRecipients (..)
    , HasRecordingGroup (..)
    , HasRecords (..)
    , HasRecurrence (..)
    , HasRedrivePolicy (..)
    , HasRedshiftConfiguration (..)
    , HasReferenceName (..)
    , HasRefreshTokenValidity (..)
    , HasRegion (..)
    , HasRegions (..)
    , HasRegistrationLimit (..)
    , HasRejectedPatches (..)
    , HasReleaseLabel (..)
    , HasReplaceUnhealthyInstances (..)
    , HasReplicateSourceDb (..)
    , HasReplicationConfiguration (..)
    , HasReplicationGroupDescription (..)
    , HasReplicationGroupId (..)
    , HasReplicationInstanceArn (..)
    , HasReplicationInstanceClass (..)
    , HasReplicationInstanceId (..)
    , HasReplicationSubnetGroupDescription (..)
    , HasReplicationSubnetGroupId (..)
    , HasReplicationTaskId (..)
    , HasReplicationTaskSettings (..)
    , HasRepository (..)
    , HasRepositoryName (..)
    , HasRequestInterval (..)
    , HasRequestModels (..)
    , HasRequestParameters (..)
    , HasRequestParametersInJson (..)
    , HasRequestPayer (..)
    , HasRequestTemplates (..)
    , HasRequestValidatorId (..)
    , HasRequester (..)
    , HasRequireLowercaseCharacters (..)
    , HasRequireNumbers (..)
    , HasRequireSymbols (..)
    , HasRequireUppercaseCharacters (..)
    , HasReservedConcurrentExecutions (..)
    , HasResourceGroupArn (..)
    , HasResourceId (..)
    , HasResourcePath (..)
    , HasResourceType (..)
    , HasResponseModels (..)
    , HasResponseParameters (..)
    , HasResponseParametersInJson (..)
    , HasResponseTemplates (..)
    , HasResponseType (..)
    , HasRestApiId (..)
    , HasRestrictions (..)
    , HasRetainOnDelete (..)
    , HasRetentionInDays (..)
    , HasRetentionPeriod (..)
    , HasRetryStrategy (..)
    , HasRevokeRulesOnDelete (..)
    , HasRole (..)
    , HasRoleArn (..)
    , HasRoleMapping (..)
    , HasRoles (..)
    , HasRootBlockDevice (..)
    , HasRootDeviceName (..)
    , HasRootDeviceType (..)
    , HasRootPassword (..)
    , HasRootPasswordOnAllInstances (..)
    , HasRoute (..)
    , HasRouteTableId (..)
    , HasRouteTableIds (..)
    , HasRubyVersion (..)
    , HasRubygemsVersion (..)
    , HasRule (..)
    , HasRuleAction (..)
    , HasRuleNumber (..)
    , HasRuleSetName (..)
    , HasRules (..)
    , HasRulesPackageArns (..)
    , HasRunCommandTargets (..)
    , HasRuntime (..)
    , HasS3Action (..)
    , HasS3Bucket (..)
    , HasS3BucketName (..)
    , HasS3Configuration (..)
    , HasS3Destination (..)
    , HasS3Key (..)
    , HasS3KeyPrefix (..)
    , HasS3ObjectVersion (..)
    , HasSamlMetadataDocument (..)
    , HasSamlProviderArns (..)
    , HasScalableDimension (..)
    , HasScalableTargetAction (..)
    , HasScanEnabled (..)
    , HasSchedule (..)
    , HasScheduleExpression (..)
    , HasScheduledActionName (..)
    , HasSchema (..)
    , HasScope (..)
    , HasSearchString (..)
    , HasSecurityConfiguration (..)
    , HasSecurityGroupId (..)
    , HasSecurityGroupIds (..)
    , HasSecurityGroupNames (..)
    , HasSecurityGroups (..)
    , HasSelectionPattern (..)
    , HasSelf (..)
    , HasServerName (..)
    , HasServerSideEncryption (..)
    , HasServerSideEncryptionConfiguration (..)
    , HasServiceAccessRole (..)
    , HasServiceName (..)
    , HasServiceNamespace (..)
    , HasServiceRole (..)
    , HasServiceRoleArn (..)
    , HasSetIdentifier (..)
    , HasSetting (..)
    , HasSettings (..)
    , HasShardCount (..)
    , HasShardLevelMetrics (..)
    , HasShortName (..)
    , HasSize (..)
    , HasSizeConstraints (..)
    , HasSkipDestroy (..)
    , HasSkipFinalSnapshot (..)
    , HasSmsAuthenticationMessage (..)
    , HasSmsConfiguration (..)
    , HasSmsVerificationMessage (..)
    , HasSnapshotArns (..)
    , HasSnapshotClusterIdentifier (..)
    , HasSnapshotCopy (..)
    , HasSnapshotDeliveryProperties (..)
    , HasSnapshotId (..)
    , HasSnapshotIdentifier (..)
    , HasSnapshotName (..)
    , HasSnapshotOptions (..)
    , HasSnapshotRetentionLimit (..)
    , HasSnapshotWindow (..)
    , HasSnapshotWithoutReboot (..)
    , HasSnsAction (..)
    , HasSnsDestination (..)
    , HasSnsTopic (..)
    , HasSnsTopicArn (..)
    , HasSnsTopicName (..)
    , HasSolutionStackName (..)
    , HasSource (..)
    , HasSourceAccount (..)
    , HasSourceAmiId (..)
    , HasSourceAmiRegion (..)
    , HasSourceArn (..)
    , HasSourceCodeHash (..)
    , HasSourceDestCheck (..)
    , HasSourceEndpointArn (..)
    , HasSourceIds (..)
    , HasSourceInstanceId (..)
    , HasSourceSecurityGroupId (..)
    , HasSourceType (..)
    , HasSpotPrice (..)
    , HasSpotType (..)
    , HasSqlInjectionMatchTuples (..)
    , HasSshKeyName (..)
    , HasSshPublicKey (..)
    , HasSshUsername (..)
    , HasSslConfiguration (..)
    , HasSslMode (..)
    , HasSslPolicy (..)
    , HasStackId (..)
    , HasStage (..)
    , HasStageDescription (..)
    , HasStageKey (..)
    , HasStageName (..)
    , HasStartTime (..)
    , HasStartingPosition (..)
    , HasState (..)
    , HasStatementId (..)
    , HasStaticIpName (..)
    , HasStaticRoutesOnly (..)
    , HasStatistic (..)
    , HasStatsEnabled (..)
    , HasStatsPassword (..)
    , HasStatsUrl (..)
    , HasStatsUser (..)
    , HasStatus (..)
    , HasStatusCode (..)
    , HasStepScalingPolicyConfiguration (..)
    , HasStickiness (..)
    , HasStopAction (..)
    , HasStorageClass (..)
    , HasStorageEncrypted (..)
    , HasStorageType (..)
    , HasStrategy (..)
    , HasStreamEnabled (..)
    , HasStreamViewType (..)
    , HasSubject (..)
    , HasSubnetGroupName (..)
    , HasSubnetId (..)
    , HasSubnetIds (..)
    , HasSubnetMapping (..)
    , HasSubnets (..)
    , HasSupportedIdentityProviders (..)
    , HasSupportedLoginProviders (..)
    , HasSuspendedProcesses (..)
    , HasSystemPackages (..)
    , HasTableMappings (..)
    , HasTag (..)
    , HasTags (..)
    , HasTargetArn (..)
    , HasTargetCapacity (..)
    , HasTargetEndpointArn (..)
    , HasTargetGroupArn (..)
    , HasTargetGroupArns (..)
    , HasTargetId (..)
    , HasTargetKeyId (..)
    , HasTargetTrackingScalingPolicyConfiguration (..)
    , HasTargetType (..)
    , HasTargets (..)
    , HasTaskArn (..)
    , HasTaskDefinition (..)
    , HasTaskParameters (..)
    , HasTaskType (..)
    , HasTemplateBody (..)
    , HasTemplateName (..)
    , HasTemplateUrl (..)
    , HasTenancy (..)
    , HasTerminateInstancesWithExpiration (..)
    , HasTerminationPolicies (..)
    , HasTerminationProtection (..)
    , HasText (..)
    , HasThreshold (..)
    , HasThrottleSettings (..)
    , HasThumbnailConfig (..)
    , HasThumbnailConfigPermissions (..)
    , HasThumbnails (..)
    , HasThumbprintList (..)
    , HasTier (..)
    , HasTimeout (..)
    , HasTimeoutInMinutes (..)
    , HasTimezone (..)
    , HasTlsPolicy (..)
    , HasToPort (..)
    , HasTopic (..)
    , HasTopicArn (..)
    , HasTrafficType (..)
    , HasTransitEncryptionEnabled (..)
    , HasTreatMissingData (..)
    , HasTriggerConfiguration (..)
    , HasTtl (..)
    , HasType' (..)
    , HasUnit (..)
    , HasUri (..)
    , HasUrl (..)
    , HasUsagePlanId (..)
    , HasUseCustomCookbooks (..)
    , HasUseEbsOptimizedInstances (..)
    , HasUseOpsworksSecurityGroups (..)
    , HasUser (..)
    , HasUserArn (..)
    , HasUserData (..)
    , HasUserDataBase64 (..)
    , HasUserPoolId (..)
    , HasUsername (..)
    , HasUsernameAttributes (..)
    , HasUsers (..)
    , HasValidUntil (..)
    , HasValue (..)
    , HasVariables (..)
    , HasVerificationMessageTemplate (..)
    , HasVersionLabel (..)
    , HasVersioning (..)
    , HasVideo (..)
    , HasVideoCodecOptions (..)
    , HasVideoWatermarks (..)
    , HasViewerCertificate (..)
    , HasVirtualizationType (..)
    , HasVisibilityTimeoutSeconds (..)
    , HasVisibleToAllUsers (..)
    , HasVolumeId (..)
    , HasVolumeTags (..)
    , HasVpc (..)
    , HasVpcClassicLinkId (..)
    , HasVpcClassicLinkSecurityGroups (..)
    , HasVpcConfig (..)
    , HasVpcEndpointId (..)
    , HasVpcId (..)
    , HasVpcOptions (..)
    , HasVpcPeeringConnectionId (..)
    , HasVpcRegion (..)
    , HasVpcSecurityGroupIds (..)
    , HasVpcSettings (..)
    , HasVpcZoneIdentifier (..)
    , HasVpnConnectionId (..)
    , HasVpnGatewayId (..)
    , HasWaitForCapacityTimeout (..)
    , HasWaitForElbCapacity (..)
    , HasWaitForFulfillment (..)
    , HasWaitForReadyTimeout (..)
    , HasWebAclId (..)
    , HasWebsite (..)
    , HasWebsiteRedirect (..)
    , HasWeightedRoutingPolicy (..)
    , HasWindowId (..)
    , HasWorkmailAction (..)
    , HasWriteAttributes (..)
    , HasWriteCapacity (..)
    , HasXssMatchTuples (..)
    , HasZoneId (..)

    -- ** Computed Attributes
    , HasComputedAccessUrl (..)
    , HasComputedAccountId (..)
    , HasComputedActivationCode (..)
    , HasComputedAdjustmentType (..)
    , HasComputedAllocatedStorage (..)
    , HasComputedAllocationId (..)
    , HasComputedArn (..)
    , HasComputedArnSuffix (..)
    , HasComputedAssociateWithPrivateIp (..)
    , HasComputedAssociationId (..)
    , HasComputedAttachment (..)
    , HasComputedAttachmentId (..)
    , HasComputedAttribute (..)
    , HasComputedAutoscalingGroupName (..)
    , HasComputedAvailabilityZone (..)
    , HasComputedAvailabilityZones (..)
    , HasComputedAwsAccountId (..)
    , HasComputedBackupRetentionPeriod (..)
    , HasComputedBgpAsn (..)
    , HasComputedBucketDomainName (..)
    , HasComputedCacheNodes (..)
    , HasComputedCallerReference (..)
    , HasComputedCanonicalHostedZoneId (..)
    , HasComputedCertificateArn (..)
    , HasComputedCertificateUploadDate (..)
    , HasComputedCidrBlock (..)
    , HasComputedCidrBlocks (..)
    , HasComputedClientSecret (..)
    , HasComputedCloneUrlHttp (..)
    , HasComputedCloneUrlSsh (..)
    , HasComputedCloudfrontAccessIdentityPath (..)
    , HasComputedCloudfrontDistributionArn (..)
    , HasComputedCloudfrontDomainName (..)
    , HasComputedCloudfrontZoneId (..)
    , HasComputedClusterAddress (..)
    , HasComputedClusterIdentifier (..)
    , HasComputedClusterMembers (..)
    , HasComputedClusterResourceId (..)
    , HasComputedConfiguration (..)
    , HasComputedConfigurationEndpoint (..)
    , HasComputedConfigurationEndpointAddress (..)
    , HasComputedContent (..)
    , HasComputedCookieExpirationPeriod (..)
    , HasComputedCookieName (..)
    , HasComputedCreateDate (..)
    , HasComputedCreatedDate (..)
    , HasComputedCreationDate (..)
    , HasComputedCustomerGatewayConfiguration (..)
    , HasComputedCustomerGatewayId (..)
    , HasComputedDashboardArn (..)
    , HasComputedDataEncryptionKeyId (..)
    , HasComputedDatabaseName (..)
    , HasComputedDbSnapshotArn (..)
    , HasComputedDbiResourceId (..)
    , HasComputedDefaultCooldown (..)
    , HasComputedDefaultNetworkAclId (..)
    , HasComputedDefaultRouteTableId (..)
    , HasComputedDefaultSecurityGroupId (..)
    , HasComputedDefaultVersion (..)
    , HasComputedDefaultVersionId (..)
    , HasComputedDeploymentConfigId (..)
    , HasComputedDescription (..)
    , HasComputedDesiredCapacity (..)
    , HasComputedDestinationCidrBlock (..)
    , HasComputedDestinationIpv6CidrBlock (..)
    , HasComputedDeviceName (..)
    , HasComputedDkimTokens (..)
    , HasComputedDnsIpAddresses (..)
    , HasComputedDnsName (..)
    , HasComputedDocumentType (..)
    , HasComputedDomainId (..)
    , HasComputedEcsClusterArn (..)
    , HasComputedEgressOnlyGatewayId (..)
    , HasComputedEnableClassiclink (..)
    , HasComputedEnableDnsHostnames (..)
    , HasComputedEnableDnsSupport (..)
    , HasComputedEncrypted (..)
    , HasComputedEncryptedFingerprint (..)
    , HasComputedEncryptedPassword (..)
    , HasComputedEncryptedPrivateKey (..)
    , HasComputedEncryptedSecret (..)
    , HasComputedEncryptionKey (..)
    , HasComputedEndpoint (..)
    , HasComputedEndpointArn (..)
    , HasComputedEngine (..)
    , HasComputedEngineVersion (..)
    , HasComputedEtag (..)
    , HasComputedExecutionArn (..)
    , HasComputedExpirationDate (..)
    , HasComputedExpirePasswords (..)
    , HasComputedExpired (..)
    , HasComputedFingerprint (..)
    , HasComputedFqdn (..)
    , HasComputedFunctionArn (..)
    , HasComputedGatewayId (..)
    , HasComputedGroup (..)
    , HasComputedHash (..)
    , HasComputedHashType (..)
    , HasComputedHealthCheckGracePeriod (..)
    , HasComputedHealthCheckType (..)
    , HasComputedHomeRegion (..)
    , HasComputedHostedZone (..)
    , HasComputedHostedZoneId (..)
    , HasComputedIamArn (..)
    , HasComputedIamRole (..)
    , HasComputedId (..)
    , HasComputedIdentifier (..)
    , HasComputedInstance' (..)
    , HasComputedInstanceId (..)
    , HasComputedInstanceIds (..)
    , HasComputedInstancePort (..)
    , HasComputedInstanceTenancy (..)
    , HasComputedInvokeArn (..)
    , HasComputedInvokeUrl (..)
    , HasComputedIops (..)
    , HasComputedIpAddress (..)
    , HasComputedIpv6AssociationId (..)
    , HasComputedIpv6CidrBlock (..)
    , HasComputedKeyFingerprint (..)
    , HasComputedKeyId (..)
    , HasComputedKeyName (..)
    , HasComputedKeyType (..)
    , HasComputedKibanaEndpoint (..)
    , HasComputedKmsKeyArn (..)
    , HasComputedKmsKeyId (..)
    , HasComputedLastModified (..)
    , HasComputedLastProcessingResult (..)
    , HasComputedLastUpdatedDate (..)
    , HasComputedLatestRevision (..)
    , HasComputedLatestVersion (..)
    , HasComputedLaunchConfiguration (..)
    , HasComputedLbPort (..)
    , HasComputedLicenseModel (..)
    , HasComputedLoadBalancer (..)
    , HasComputedLoadBalancerName (..)
    , HasComputedLoadBalancerPort (..)
    , HasComputedLoadBalancers (..)
    , HasComputedLocation (..)
    , HasComputedMainRouteTableId (..)
    , HasComputedMaintenanceWindow (..)
    , HasComputedMasterUsername (..)
    , HasComputedMaxSize (..)
    , HasComputedMinSize (..)
    , HasComputedName (..)
    , HasComputedNameServers (..)
    , HasComputedNatGatewayId (..)
    , HasComputedNetworkInterface (..)
    , HasComputedNetworkInterfaceId (..)
    , HasComputedOptionGroupName (..)
    , HasComputedOriginalRouteTableId (..)
    , HasComputedOutputs (..)
    , HasComputedOwner (..)
    , HasComputedOwnerAlias (..)
    , HasComputedOwnerId (..)
    , HasComputedParameter (..)
    , HasComputedParameters (..)
    , HasComputedPath (..)
    , HasComputedPemEncodedCertificate (..)
    , HasComputedPerformanceInsightsEnabled (..)
    , HasComputedPerformanceInsightsKmsKeyId (..)
    , HasComputedPermissions (..)
    , HasComputedPlatformTypes (..)
    , HasComputedPolicy (..)
    , HasComputedPolicyName (..)
    , HasComputedPolicyType (..)
    , HasComputedPolicyTypeName (..)
    , HasComputedPort (..)
    , HasComputedPreferredBackupWindow (..)
    , HasComputedPreferredMaintenanceWindow (..)
    , HasComputedPrefixListId (..)
    , HasComputedPrimaryEndpointAddress (..)
    , HasComputedPrivateIp (..)
    , HasComputedPrivateIpAddress (..)
    , HasComputedPrivateIps (..)
    , HasComputedPrivateKey (..)
    , HasComputedPublicIp (..)
    , HasComputedPublicKey (..)
    , HasComputedQualifiedArn (..)
    , HasComputedReaderEndpoint (..)
    , HasComputedRegion (..)
    , HasComputedRegistrationCount (..)
    , HasComputedRegistrationLimit (..)
    , HasComputedRegistryId (..)
    , HasComputedReplicationInstanceArn (..)
    , HasComputedReplicationInstancePrivateIps (..)
    , HasComputedReplicationInstancePublicIps (..)
    , HasComputedReplicationSourceIdentifier (..)
    , HasComputedReplicationTaskArn (..)
    , HasComputedRepository (..)
    , HasComputedRepositoryId (..)
    , HasComputedRepositoryUrl (..)
    , HasComputedRole (..)
    , HasComputedRoles (..)
    , HasComputedRootResourceId (..)
    , HasComputedRouteTableId (..)
    , HasComputedRunningInstanceCount (..)
    , HasComputedS3Bucket (..)
    , HasComputedS3CanonicalUserId (..)
    , HasComputedSchemaVersion (..)
    , HasComputedSecret (..)
    , HasComputedSecurityGroupId (..)
    , HasComputedSecurityGroups (..)
    , HasComputedServiceRole (..)
    , HasComputedSesSmtpPassword (..)
    , HasComputedShardCount (..)
    , HasComputedSourceCodeHash (..)
    , HasComputedSourceDbSnapshotIdentifier (..)
    , HasComputedSourceDestCheck (..)
    , HasComputedSourceRegion (..)
    , HasComputedSshPublicKeyId (..)
    , HasComputedState (..)
    , HasComputedStateTransitionReason (..)
    , HasComputedStaticRoutesOnly (..)
    , HasComputedStatus (..)
    , HasComputedStatusReason (..)
    , HasComputedStorageEncrypted (..)
    , HasComputedStorageType (..)
    , HasComputedSubnetId (..)
    , HasComputedSupportCode (..)
    , HasComputedTags (..)
    , HasComputedTargetGroupArns (..)
    , HasComputedThrottleSettings (..)
    , HasComputedTunnel1Address (..)
    , HasComputedTunnel1BgpAsn (..)
    , HasComputedTunnel1BgpHoldtime (..)
    , HasComputedTunnel1CgwInsideAddress (..)
    , HasComputedTunnel1PresharedKey (..)
    , HasComputedTunnel1VgwInsideAddress (..)
    , HasComputedTunnel2Address (..)
    , HasComputedTunnel2BgpAsn (..)
    , HasComputedTunnel2BgpHoldtime (..)
    , HasComputedTunnel2CgwInsideAddress (..)
    , HasComputedTunnel2PresharedKey (..)
    , HasComputedTunnel2VgwInsideAddress (..)
    , HasComputedType' (..)
    , HasComputedUniqueId (..)
    , HasComputedUsagePlanId (..)
    , HasComputedUser (..)
    , HasComputedUsers (..)
    , HasComputedUuid (..)
    , HasComputedValidUntil (..)
    , HasComputedValue (..)
    , HasComputedVerificationToken (..)
    , HasComputedVersion (..)
    , HasComputedVersionId (..)
    , HasComputedVolumeId (..)
    , HasComputedVolumeSize (..)
    , HasComputedVpcId (..)
    , HasComputedVpcOptions0AvailabilityZones (..)
    , HasComputedVpcOptions0VpcId (..)
    , HasComputedVpcPeeringConnectionId (..)
    , HasComputedVpcRegion (..)
    , HasComputedVpcZoneIdentifier (..)
    , HasComputedVpnConnectionId (..)
    , HasComputedVpnGatewayId (..)
    , HasComputedWebsiteDomain (..)
    , HasComputedWebsiteEndpoint (..)
    , HasComputedWriter (..)
    , HasComputedZoneId (..)
    ) where

import Data.Functor ((<$>))
import Data.Maybe   (catMaybes)
import Data.Text    (Text)

import GHC.Base (Eq, ($), (.))
import GHC.Show (Show)

import Lens.Micro (Getting, Lens', lens, to)

import qualified Terrafomo.AWS.Types as TF
import qualified Terrafomo.AWS.Provider as TF
import qualified Terrafomo.Resource as TF
import qualified Terrafomo.HCL as TF
import qualified Terrafomo.IP as TF
import qualified Terrafomo.Meta as TF
import qualified Terrafomo.Name as TF
import qualified Terrafomo.Resource as TF
import qualified Terrafomo.Attribute as TF

{- | The @sfn_activity@ AWS resource.

Provides a Step Function Activity resource
-}
data ActivityResource s = ActivityResource {
      _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the activity to create. -}
    } deriving (Show, Eq)

instance TF.ToHCL (ActivityResource s) where
    toHCL ActivityResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.attribute _name
        ]

instance HasName (ActivityResource s) Text where
    type HasNameThread (ActivityResource s) Text = s

    name =
        lens (_name :: ActivityResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: ActivityResource s)

instance HasComputedCreationDate (ActivityResource s) Text

instance HasComputedId (ActivityResource s) Text

instance HasComputedName (ActivityResource s) Text

activityResource :: TF.Resource TF.AWS (ActivityResource s)
activityResource =
    TF.newResource "sfn_activity" $
        ActivityResource {
              _name = TF.Nil
            }

{- | The @aws_ami_copy@ AWS resource.

The "AMI copy" resource allows duplication of an Amazon Machine Image (AMI),
including cross-region copies. If the source AMI has associated EBS
snapshots, those will also be duplicated along with the AMI. This is useful
for taking a single AMI provisioned in one region and making it available in
another for a multi-region deployment. Copying an AMI can take several
minutes. The creation of this resource will block until the new AMI is
available for use on new instances.
-}
data AmiCopyResource s = AmiCopyResource {
      _encrypted :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies whether the destination snapshots of the copied image should be encrypted. Defaults to @false@ -}
    , _kms_key_id :: !(TF.Attribute s Text)
    {- ^ (Optional) The full ARN of the KMS Key to use when encrypting the snapshots of an image during a copy operation. If not specified, then the default AWS KMS Key will be used -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) A region-unique name for the AMI. -}
    , _source_ami_id :: !(TF.Attribute s Text)
    {- ^ (Required) The id of the AMI to copy. This id must be valid in the region given by @source_ami_region@ . -}
    , _source_ami_region :: !(TF.Attribute s TF.Region)
    {- ^ (Required) The region from which the AMI will be copied. This may be the same as the AWS provider region in order to create a copy within the same region. -}
    } deriving (Show, Eq)

instance TF.ToHCL (AmiCopyResource s) where
    toHCL AmiCopyResource{..} = TF.block $ catMaybes
        [ TF.assign "encrypted" <$> TF.attribute _encrypted
        , TF.assign "kms_key_id" <$> TF.attribute _kms_key_id
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "source_ami_id" <$> TF.attribute _source_ami_id
        , TF.assign "source_ami_region" <$> TF.attribute _source_ami_region
        ]

instance HasEncrypted (AmiCopyResource s) Text where
    type HasEncryptedThread (AmiCopyResource s) Text = s

    encrypted =
        lens (_encrypted :: AmiCopyResource s -> TF.Attribute s Text)
            (\s a -> s { _encrypted = a } :: AmiCopyResource s)

instance HasKmsKeyId (AmiCopyResource s) Text where
    type HasKmsKeyIdThread (AmiCopyResource s) Text = s

    kmsKeyId =
        lens (_kms_key_id :: AmiCopyResource s -> TF.Attribute s Text)
            (\s a -> s { _kms_key_id = a } :: AmiCopyResource s)

instance HasName (AmiCopyResource s) Text where
    type HasNameThread (AmiCopyResource s) Text = s

    name =
        lens (_name :: AmiCopyResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: AmiCopyResource s)

instance HasSourceAmiId (AmiCopyResource s) Text where
    type HasSourceAmiIdThread (AmiCopyResource s) Text = s

    sourceAmiId =
        lens (_source_ami_id :: AmiCopyResource s -> TF.Attribute s Text)
            (\s a -> s { _source_ami_id = a } :: AmiCopyResource s)

instance HasSourceAmiRegion (AmiCopyResource s) TF.Region where
    type HasSourceAmiRegionThread (AmiCopyResource s) TF.Region = s

    sourceAmiRegion =
        lens (_source_ami_region :: AmiCopyResource s -> TF.Attribute s TF.Region)
            (\s a -> s { _source_ami_region = a } :: AmiCopyResource s)

amiCopyResource :: TF.Resource TF.AWS (AmiCopyResource s)
amiCopyResource =
    TF.newResource "aws_ami_copy" $
        AmiCopyResource {
              _encrypted = TF.Nil
            , _kms_key_id = TF.Nil
            , _name = TF.Nil
            , _source_ami_id = TF.Nil
            , _source_ami_region = TF.Nil
            }

{- | The @aws_ami_from_instance@ AWS resource.

The "AMI from instance" resource allows the creation of an Amazon Machine
Image (AMI) modelled after an existing EBS-backed EC2 instance. The created
AMI will refer to implicitly-created snapshots of the instance's EBS volumes
and mimick its assigned block device configuration at the time the resource
is created. This resource is best applied to an instance that is stopped
when this instance is created, so that the contents of the created image are
predictable. When applied to an instance that is running, the instance will
be stopped before taking the snapshots and then started back up again ,
resulting in a period of downtime. Note that the source instance is
inspected only at the initial creation of this resource. Ongoing updates to
the referenced instance will not be propagated into the generated AMI. Users
may taint or otherwise recreate the resource in order to produce a fresh
snapshot.
-}
data AmiFromInstanceResource s = AmiFromInstanceResource {
      _name :: !(TF.Attribute s Text)
    {- ^ (Required) A region-unique name for the AMI. -}
    , _snapshot_without_reboot :: !(TF.Attribute s Text)
    {- ^ (Optional) Boolean that overrides the behavior of stopping the instance before snapshotting. This is risky since it may cause a snapshot of an inconsistent filesystem state, but can be used to avoid downtime if the user otherwise guarantees that no filesystem writes will be underway at the time of snapshot. -}
    , _source_instance_id :: !(TF.Attribute s Text)
    {- ^ (Required) The id of the instance to use as the basis of the AMI. -}
    } deriving (Show, Eq)

instance TF.ToHCL (AmiFromInstanceResource s) where
    toHCL AmiFromInstanceResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.attribute _name
        , TF.assign "snapshot_without_reboot" <$> TF.attribute _snapshot_without_reboot
        , TF.assign "source_instance_id" <$> TF.attribute _source_instance_id
        ]

instance HasName (AmiFromInstanceResource s) Text where
    type HasNameThread (AmiFromInstanceResource s) Text = s

    name =
        lens (_name :: AmiFromInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: AmiFromInstanceResource s)

instance HasSnapshotWithoutReboot (AmiFromInstanceResource s) Text where
    type HasSnapshotWithoutRebootThread (AmiFromInstanceResource s) Text = s

    snapshotWithoutReboot =
        lens (_snapshot_without_reboot :: AmiFromInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _snapshot_without_reboot = a } :: AmiFromInstanceResource s)

instance HasSourceInstanceId (AmiFromInstanceResource s) Text where
    type HasSourceInstanceIdThread (AmiFromInstanceResource s) Text = s

    sourceInstanceId =
        lens (_source_instance_id :: AmiFromInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _source_instance_id = a } :: AmiFromInstanceResource s)

amiFromInstanceResource :: TF.Resource TF.AWS (AmiFromInstanceResource s)
amiFromInstanceResource =
    TF.newResource "aws_ami_from_instance" $
        AmiFromInstanceResource {
              _name = TF.Nil
            , _snapshot_without_reboot = TF.Nil
            , _source_instance_id = TF.Nil
            }

{- | The @aws_ami_launch_permission@ AWS resource.

Adds launch permission to Amazon Machine Image (AMI) from another AWS
account.
-}
data AmiLaunchPermissionResource s = AmiLaunchPermissionResource {
      _account_id :: !(TF.Attribute s Text)
    {- ^ - (required) An AWS Account ID to add launch permissions. -}
    , _image_id :: !(TF.Attribute s Text)
    {- ^ - (required) A region-unique name for the AMI. -}
    } deriving (Show, Eq)

instance TF.ToHCL (AmiLaunchPermissionResource s) where
    toHCL AmiLaunchPermissionResource{..} = TF.block $ catMaybes
        [ TF.assign "account_id" <$> TF.attribute _account_id
        , TF.assign "image_id" <$> TF.attribute _image_id
        ]

instance HasAccountId (AmiLaunchPermissionResource s) Text where
    type HasAccountIdThread (AmiLaunchPermissionResource s) Text = s

    accountId =
        lens (_account_id :: AmiLaunchPermissionResource s -> TF.Attribute s Text)
            (\s a -> s { _account_id = a } :: AmiLaunchPermissionResource s)

instance HasImageId (AmiLaunchPermissionResource s) Text where
    type HasImageIdThread (AmiLaunchPermissionResource s) Text = s

    imageId =
        lens (_image_id :: AmiLaunchPermissionResource s -> TF.Attribute s Text)
            (\s a -> s { _image_id = a } :: AmiLaunchPermissionResource s)

instance HasComputedId (AmiLaunchPermissionResource s) Text

amiLaunchPermissionResource :: TF.Resource TF.AWS (AmiLaunchPermissionResource s)
amiLaunchPermissionResource =
    TF.newResource "aws_ami_launch_permission" $
        AmiLaunchPermissionResource {
              _account_id = TF.Nil
            , _image_id = TF.Nil
            }

{- | The @aws_ami@ AWS resource.

The AMI resource allows the creation and management of a completely-custom
Amazon Machine Image (AMI). If you just want to duplicate an existing AMI,
possibly copying it to another region, it's better to use @aws_ami_copy@
instead. If you just want to share an existing AMI with another AWS account,
it's better to use @aws_ami_launch_permission@ instead.
-}
data AmiResource s = AmiResource {
      _architecture :: !(TF.Attribute s Text)
    {- ^ (Optional) Machine architecture for created instances. Defaults to "x86_64". -}
    , _description :: !(TF.Attribute s Text)
    {- ^ (Optional) A longer, human-readable description for the AMI. -}
    , _ebs_block_device :: !(TF.Attribute s Text)
    {- ^ (Optional) Nested block describing an EBS block device that should be attached to created instances. The structure of this block is described below. -}
    , _ephemeral_block_device :: !(TF.Attribute s Text)
    {- ^ (Optional) Nested block describing an ephemeral block device that should be attached to created instances. The structure of this block is described below. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) A region-unique name for the AMI. -}
    , _root_device_name :: !(TF.Attribute s Text)
    {- ^ (Optional) The name of the root device (for example, @/dev/sda1@ , or @/dev/xvda@ ). -}
    , _virtualization_type :: !(TF.Attribute s Text)
    {- ^ (Optional) Keyword to choose what virtualization mode created instances will use. Can be either "paravirtual" (the default) or "hvm". The choice of virtualization type changes the set of further arguments that are required, as described below. -}
    } deriving (Show, Eq)

instance TF.ToHCL (AmiResource s) where
    toHCL AmiResource{..} = TF.block $ catMaybes
        [ TF.assign "architecture" <$> TF.attribute _architecture
        , TF.assign "description" <$> TF.attribute _description
        , TF.assign "ebs_block_device" <$> TF.attribute _ebs_block_device
        , TF.assign "ephemeral_block_device" <$> TF.attribute _ephemeral_block_device
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "root_device_name" <$> TF.attribute _root_device_name
        , TF.assign "virtualization_type" <$> TF.attribute _virtualization_type
        ]

instance HasArchitecture (AmiResource s) Text where
    type HasArchitectureThread (AmiResource s) Text = s

    architecture =
        lens (_architecture :: AmiResource s -> TF.Attribute s Text)
            (\s a -> s { _architecture = a } :: AmiResource s)

instance HasDescription (AmiResource s) Text where
    type HasDescriptionThread (AmiResource s) Text = s

    description =
        lens (_description :: AmiResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: AmiResource s)

instance HasEbsBlockDevice (AmiResource s) Text where
    type HasEbsBlockDeviceThread (AmiResource s) Text = s

    ebsBlockDevice =
        lens (_ebs_block_device :: AmiResource s -> TF.Attribute s Text)
            (\s a -> s { _ebs_block_device = a } :: AmiResource s)

instance HasEphemeralBlockDevice (AmiResource s) Text where
    type HasEphemeralBlockDeviceThread (AmiResource s) Text = s

    ephemeralBlockDevice =
        lens (_ephemeral_block_device :: AmiResource s -> TF.Attribute s Text)
            (\s a -> s { _ephemeral_block_device = a } :: AmiResource s)

instance HasName (AmiResource s) Text where
    type HasNameThread (AmiResource s) Text = s

    name =
        lens (_name :: AmiResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: AmiResource s)

instance HasRootDeviceName (AmiResource s) Text where
    type HasRootDeviceNameThread (AmiResource s) Text = s

    rootDeviceName =
        lens (_root_device_name :: AmiResource s -> TF.Attribute s Text)
            (\s a -> s { _root_device_name = a } :: AmiResource s)

instance HasVirtualizationType (AmiResource s) Text where
    type HasVirtualizationTypeThread (AmiResource s) Text = s

    virtualizationType =
        lens (_virtualization_type :: AmiResource s -> TF.Attribute s Text)
            (\s a -> s { _virtualization_type = a } :: AmiResource s)

amiResource :: TF.Resource TF.AWS (AmiResource s)
amiResource =
    TF.newResource "aws_ami" $
        AmiResource {
              _architecture = TF.Nil
            , _description = TF.Nil
            , _ebs_block_device = TF.Nil
            , _ephemeral_block_device = TF.Nil
            , _name = TF.Nil
            , _root_device_name = TF.Nil
            , _virtualization_type = TF.Nil
            }

{- | The @aws_api_gateway_account@ AWS resource.

Provides a settings of an API Gateway Account. Settings is applied
region-wide per @provider@ block. -> Note: As there is no API method for
deleting account settings or resetting it to defaults, destroying this
resource will keep your account settings intact
-}
data ApiGatewayAccountResource s = ApiGatewayAccountResource {
      _cloudwatch_role_arn :: !(TF.Attribute s Text)
    {- ^ (Optional) The ARN of an IAM role for CloudWatch (to allow logging & monitoring). See more <https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-stage-settings.html#how-to-stage-settings-console> . Logging & monitoring can be enabled/disabled and otherwise tuned on the API Gateway Stage level. -}
    } deriving (Show, Eq)

instance TF.ToHCL (ApiGatewayAccountResource s) where
    toHCL ApiGatewayAccountResource{..} = TF.block $ catMaybes
        [ TF.assign "cloudwatch_role_arn" <$> TF.attribute _cloudwatch_role_arn
        ]

instance HasCloudwatchRoleArn (ApiGatewayAccountResource s) Text where
    type HasCloudwatchRoleArnThread (ApiGatewayAccountResource s) Text = s

    cloudwatchRoleArn =
        lens (_cloudwatch_role_arn :: ApiGatewayAccountResource s -> TF.Attribute s Text)
            (\s a -> s { _cloudwatch_role_arn = a } :: ApiGatewayAccountResource s)

instance HasComputedThrottleSettings (ApiGatewayAccountResource s) Text

apiGatewayAccountResource :: TF.Resource TF.AWS (ApiGatewayAccountResource s)
apiGatewayAccountResource =
    TF.newResource "aws_api_gateway_account" $
        ApiGatewayAccountResource {
              _cloudwatch_role_arn = TF.Nil
            }

{- | The @aws_api_gateway_api_key@ AWS resource.

Provides an API Gateway API Key. ~> Warning: Since the API Gateway usage
plans feature was launched on August 11, 2016, usage plans are now required
to associate an API key with an API stage.
-}
data ApiGatewayApiKeyResource s = ApiGatewayApiKeyResource {
      _description :: !(TF.Attribute s Text)
    {- ^ (Optional) The API key description. Defaults to "Managed by Terraform". -}
    , _enabled :: !(TF.Attribute s TF.Bool)
    {- ^ (Optional) Specifies whether the API key can be used by callers. Defaults to @true@ . -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the API key -}
    , _stage_key :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of stage keys associated with the API key - see below -}
    , _value :: !(TF.Attribute s Text)
    {- ^ (Optional) The value of the API key. If not specified, it will be automatically generated by AWS on creation. -}
    } deriving (Show, Eq)

instance TF.ToHCL (ApiGatewayApiKeyResource s) where
    toHCL ApiGatewayApiKeyResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.attribute _description
        , TF.assign "enabled" <$> TF.attribute _enabled
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "stage_key" <$> TF.attribute _stage_key
        , TF.assign "value" <$> TF.attribute _value
        ]

instance HasDescription (ApiGatewayApiKeyResource s) Text where
    type HasDescriptionThread (ApiGatewayApiKeyResource s) Text = s

    description =
        lens (_description :: ApiGatewayApiKeyResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: ApiGatewayApiKeyResource s)

instance HasEnabled (ApiGatewayApiKeyResource s) TF.Bool where
    type HasEnabledThread (ApiGatewayApiKeyResource s) TF.Bool = s

    enabled =
        lens (_enabled :: ApiGatewayApiKeyResource s -> TF.Attribute s TF.Bool)
            (\s a -> s { _enabled = a } :: ApiGatewayApiKeyResource s)

instance HasName (ApiGatewayApiKeyResource s) Text where
    type HasNameThread (ApiGatewayApiKeyResource s) Text = s

    name =
        lens (_name :: ApiGatewayApiKeyResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: ApiGatewayApiKeyResource s)

instance HasStageKey (ApiGatewayApiKeyResource s) Text where
    type HasStageKeyThread (ApiGatewayApiKeyResource s) Text = s

    stageKey =
        lens (_stage_key :: ApiGatewayApiKeyResource s -> TF.Attribute s Text)
            (\s a -> s { _stage_key = a } :: ApiGatewayApiKeyResource s)

instance HasValue (ApiGatewayApiKeyResource s) Text where
    type HasValueThread (ApiGatewayApiKeyResource s) Text = s

    value =
        lens (_value :: ApiGatewayApiKeyResource s -> TF.Attribute s Text)
            (\s a -> s { _value = a } :: ApiGatewayApiKeyResource s)

instance HasComputedCreatedDate (ApiGatewayApiKeyResource s) Text

instance HasComputedId (ApiGatewayApiKeyResource s) Text

instance HasComputedLastUpdatedDate (ApiGatewayApiKeyResource s) Text

instance HasComputedValue (ApiGatewayApiKeyResource s) Text

apiGatewayApiKeyResource :: TF.Resource TF.AWS (ApiGatewayApiKeyResource s)
apiGatewayApiKeyResource =
    TF.newResource "aws_api_gateway_api_key" $
        ApiGatewayApiKeyResource {
              _description = TF.Nil
            , _enabled = TF.Nil
            , _name = TF.Nil
            , _stage_key = TF.Nil
            , _value = TF.Nil
            }

{- | The @aws_api_gateway_authorizer@ AWS resource.

Provides an API Gateway Authorizer.
-}
data ApiGatewayAuthorizerResource s = ApiGatewayAuthorizerResource {
      _authorizer_credentials :: !(TF.Attribute s Text)
    {- ^ (Optional) The credentials required for the authorizer. To specify an IAM Role for API Gateway to assume, use the IAM Role ARN. -}
    , _authorizer_result_ttl_in_seconds :: !(TF.Attribute s Text)
    {- ^ (Optional) The TTL of cached authorizer results in seconds. Defaults to @300@ . -}
    , _authorizer_uri :: !(TF.Attribute s Text)
    {- ^ (Required) The authorizer's Uniform Resource Identifier (URI). For @TOKEN@ type, this must be a well-formed Lambda function URI in the form of @arn:aws:apigateway:{region}:lambda:path/{service_api}@ . e.g. @arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:012345678912:function:my-function/invocations@ -}
    , _identity_source :: !(TF.Attribute s Text)
    {- ^ (Optional) The source of the identity in an incoming request. Defaults to @method.request.header.Authorization@ . For @REQUEST@ type, this may be a comma-separated list of values, including headers, query string parameters and stage variables - e.g. @"method.request.header.SomeHeaderName,method.request.querystring.SomeQueryStringName,stageVariables.SomeStageVariableName"@ -}
    , _identity_validation_expression :: !(TF.Attribute s Text)
    {- ^ (Optional) A validation expression for the incoming identity. For @TOKEN@ type, this value should be a regular expression. The incoming token from the client is matched against this expression, and will proceed if the token matches. If the token doesn't match, the client receives a 401 Unauthorized response. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the authorizer -}
    , _rest_api_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the associated REST API -}
    , _type' :: !(TF.Attribute s Text)
    {- ^ (Optional) The type of the authorizer. Possible values are @TOKEN@ and @REQUEST@ . Defaults to @TOKEN@ . -}
    } deriving (Show, Eq)

instance TF.ToHCL (ApiGatewayAuthorizerResource s) where
    toHCL ApiGatewayAuthorizerResource{..} = TF.block $ catMaybes
        [ TF.assign "authorizer_credentials" <$> TF.attribute _authorizer_credentials
        , TF.assign "authorizer_result_ttl_in_seconds" <$> TF.attribute _authorizer_result_ttl_in_seconds
        , TF.assign "authorizer_uri" <$> TF.attribute _authorizer_uri
        , TF.assign "identity_source" <$> TF.attribute _identity_source
        , TF.assign "identity_validation_expression" <$> TF.attribute _identity_validation_expression
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "rest_api_id" <$> TF.attribute _rest_api_id
        , TF.assign "type" <$> TF.attribute _type'
        ]

instance HasAuthorizerCredentials (ApiGatewayAuthorizerResource s) Text where
    type HasAuthorizerCredentialsThread (ApiGatewayAuthorizerResource s) Text = s

    authorizerCredentials =
        lens (_authorizer_credentials :: ApiGatewayAuthorizerResource s -> TF.Attribute s Text)
            (\s a -> s { _authorizer_credentials = a } :: ApiGatewayAuthorizerResource s)

instance HasAuthorizerResultTtlInSeconds (ApiGatewayAuthorizerResource s) Text where
    type HasAuthorizerResultTtlInSecondsThread (ApiGatewayAuthorizerResource s) Text = s

    authorizerResultTtlInSeconds =
        lens (_authorizer_result_ttl_in_seconds :: ApiGatewayAuthorizerResource s -> TF.Attribute s Text)
            (\s a -> s { _authorizer_result_ttl_in_seconds = a } :: ApiGatewayAuthorizerResource s)

instance HasAuthorizerUri (ApiGatewayAuthorizerResource s) Text where
    type HasAuthorizerUriThread (ApiGatewayAuthorizerResource s) Text = s

    authorizerUri =
        lens (_authorizer_uri :: ApiGatewayAuthorizerResource s -> TF.Attribute s Text)
            (\s a -> s { _authorizer_uri = a } :: ApiGatewayAuthorizerResource s)

instance HasIdentitySource (ApiGatewayAuthorizerResource s) Text where
    type HasIdentitySourceThread (ApiGatewayAuthorizerResource s) Text = s

    identitySource =
        lens (_identity_source :: ApiGatewayAuthorizerResource s -> TF.Attribute s Text)
            (\s a -> s { _identity_source = a } :: ApiGatewayAuthorizerResource s)

instance HasIdentityValidationExpression (ApiGatewayAuthorizerResource s) Text where
    type HasIdentityValidationExpressionThread (ApiGatewayAuthorizerResource s) Text = s

    identityValidationExpression =
        lens (_identity_validation_expression :: ApiGatewayAuthorizerResource s -> TF.Attribute s Text)
            (\s a -> s { _identity_validation_expression = a } :: ApiGatewayAuthorizerResource s)

instance HasName (ApiGatewayAuthorizerResource s) Text where
    type HasNameThread (ApiGatewayAuthorizerResource s) Text = s

    name =
        lens (_name :: ApiGatewayAuthorizerResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: ApiGatewayAuthorizerResource s)

instance HasRestApiId (ApiGatewayAuthorizerResource s) Text where
    type HasRestApiIdThread (ApiGatewayAuthorizerResource s) Text = s

    restApiId =
        lens (_rest_api_id :: ApiGatewayAuthorizerResource s -> TF.Attribute s Text)
            (\s a -> s { _rest_api_id = a } :: ApiGatewayAuthorizerResource s)

instance HasType' (ApiGatewayAuthorizerResource s) Text where
    type HasType'Thread (ApiGatewayAuthorizerResource s) Text = s

    type' =
        lens (_type' :: ApiGatewayAuthorizerResource s -> TF.Attribute s Text)
            (\s a -> s { _type' = a } :: ApiGatewayAuthorizerResource s)

apiGatewayAuthorizerResource :: TF.Resource TF.AWS (ApiGatewayAuthorizerResource s)
apiGatewayAuthorizerResource =
    TF.newResource "aws_api_gateway_authorizer" $
        ApiGatewayAuthorizerResource {
              _authorizer_credentials = TF.Nil
            , _authorizer_result_ttl_in_seconds = TF.Nil
            , _authorizer_uri = TF.Nil
            , _identity_source = TF.Nil
            , _identity_validation_expression = TF.Nil
            , _name = TF.Nil
            , _rest_api_id = TF.Nil
            , _type' = TF.Nil
            }

{- | The @aws_api_gateway_base_path_mapping@ AWS resource.

Connects a custom domain name registered via @aws_api_gateway_domain_name@
with a deployed API so that its methods can be called via the custom domain
name.
-}
data ApiGatewayBasePathMappingResource s = ApiGatewayBasePathMappingResource {
      _api_id :: !(TF.Attribute s Text)
    {- ^ (Required) The id of the API to connect. -}
    , _base_path :: !(TF.Attribute s Text)
    {- ^ (Optional) Path segment that must be prepended to the path when accessing the API via this mapping. If omitted, the API is exposed at the root of the given domain. -}
    , _domain_name :: !(TF.Attribute s Text)
    {- ^ (Required) The already-registered domain name to connect the API to. -}
    , _stage_name :: !(TF.Attribute s Text)
    {- ^ (Optional) The name of a specific deployment stage to expose at the given path. If omitted, callers may select any stage by including its name as a path element after the base path. -}
    } deriving (Show, Eq)

instance TF.ToHCL (ApiGatewayBasePathMappingResource s) where
    toHCL ApiGatewayBasePathMappingResource{..} = TF.block $ catMaybes
        [ TF.assign "api_id" <$> TF.attribute _api_id
        , TF.assign "base_path" <$> TF.attribute _base_path
        , TF.assign "domain_name" <$> TF.attribute _domain_name
        , TF.assign "stage_name" <$> TF.attribute _stage_name
        ]

instance HasApiId (ApiGatewayBasePathMappingResource s) Text where
    type HasApiIdThread (ApiGatewayBasePathMappingResource s) Text = s

    apiId =
        lens (_api_id :: ApiGatewayBasePathMappingResource s -> TF.Attribute s Text)
            (\s a -> s { _api_id = a } :: ApiGatewayBasePathMappingResource s)

instance HasBasePath (ApiGatewayBasePathMappingResource s) Text where
    type HasBasePathThread (ApiGatewayBasePathMappingResource s) Text = s

    basePath =
        lens (_base_path :: ApiGatewayBasePathMappingResource s -> TF.Attribute s Text)
            (\s a -> s { _base_path = a } :: ApiGatewayBasePathMappingResource s)

instance HasDomainName (ApiGatewayBasePathMappingResource s) Text where
    type HasDomainNameThread (ApiGatewayBasePathMappingResource s) Text = s

    domainName =
        lens (_domain_name :: ApiGatewayBasePathMappingResource s -> TF.Attribute s Text)
            (\s a -> s { _domain_name = a } :: ApiGatewayBasePathMappingResource s)

instance HasStageName (ApiGatewayBasePathMappingResource s) Text where
    type HasStageNameThread (ApiGatewayBasePathMappingResource s) Text = s

    stageName =
        lens (_stage_name :: ApiGatewayBasePathMappingResource s -> TF.Attribute s Text)
            (\s a -> s { _stage_name = a } :: ApiGatewayBasePathMappingResource s)

apiGatewayBasePathMappingResource :: TF.Resource TF.AWS (ApiGatewayBasePathMappingResource s)
apiGatewayBasePathMappingResource =
    TF.newResource "aws_api_gateway_base_path_mapping" $
        ApiGatewayBasePathMappingResource {
              _api_id = TF.Nil
            , _base_path = TF.Nil
            , _domain_name = TF.Nil
            , _stage_name = TF.Nil
            }

{- | The @aws_api_gateway_client_certificate@ AWS resource.

Provides an API Gateway Client Certificate.
-}
data ApiGatewayClientCertificateResource s = ApiGatewayClientCertificateResource {
      _description :: !(TF.Attribute s Text)
    {- ^ (Optional) The description of the client certificate. -}
    } deriving (Show, Eq)

instance TF.ToHCL (ApiGatewayClientCertificateResource s) where
    toHCL ApiGatewayClientCertificateResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.attribute _description
        ]

instance HasDescription (ApiGatewayClientCertificateResource s) Text where
    type HasDescriptionThread (ApiGatewayClientCertificateResource s) Text = s

    description =
        lens (_description :: ApiGatewayClientCertificateResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: ApiGatewayClientCertificateResource s)

instance HasComputedCreatedDate (ApiGatewayClientCertificateResource s) Text

instance HasComputedExpirationDate (ApiGatewayClientCertificateResource s) Text

instance HasComputedId (ApiGatewayClientCertificateResource s) Text

instance HasComputedPemEncodedCertificate (ApiGatewayClientCertificateResource s) Text

apiGatewayClientCertificateResource :: TF.Resource TF.AWS (ApiGatewayClientCertificateResource s)
apiGatewayClientCertificateResource =
    TF.newResource "aws_api_gateway_client_certificate" $
        ApiGatewayClientCertificateResource {
              _description = TF.Nil
            }

{- | The @aws_api_gateway_deployment@ AWS resource.

Provides an API Gateway Deployment. -> Note: Depends on having
@aws_api_gateway_integration@ inside your rest api (which in turn depends on
@aws_api_gateway_method@ ). To avoid race conditions you might need to add
an explicit @depends_on = ["aws_api_gateway_integration.name"]@ .
-}
data ApiGatewayDeploymentResource s = ApiGatewayDeploymentResource {
      _description :: !(TF.Attribute s Text)
    {- ^ (Optional) The description of the deployment -}
    , _rest_api_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the associated REST API -}
    , _stage_description :: !(TF.Attribute s Text)
    {- ^ (Optional) The description of the stage -}
    , _stage_name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the stage -}
    , _variables :: !(TF.Attribute s Text)
    {- ^ (Optional) A map that defines variables for the stage -}
    } deriving (Show, Eq)

instance TF.ToHCL (ApiGatewayDeploymentResource s) where
    toHCL ApiGatewayDeploymentResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.attribute _description
        , TF.assign "rest_api_id" <$> TF.attribute _rest_api_id
        , TF.assign "stage_description" <$> TF.attribute _stage_description
        , TF.assign "stage_name" <$> TF.attribute _stage_name
        , TF.assign "variables" <$> TF.attribute _variables
        ]

instance HasDescription (ApiGatewayDeploymentResource s) Text where
    type HasDescriptionThread (ApiGatewayDeploymentResource s) Text = s

    description =
        lens (_description :: ApiGatewayDeploymentResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: ApiGatewayDeploymentResource s)

instance HasRestApiId (ApiGatewayDeploymentResource s) Text where
    type HasRestApiIdThread (ApiGatewayDeploymentResource s) Text = s

    restApiId =
        lens (_rest_api_id :: ApiGatewayDeploymentResource s -> TF.Attribute s Text)
            (\s a -> s { _rest_api_id = a } :: ApiGatewayDeploymentResource s)

instance HasStageDescription (ApiGatewayDeploymentResource s) Text where
    type HasStageDescriptionThread (ApiGatewayDeploymentResource s) Text = s

    stageDescription =
        lens (_stage_description :: ApiGatewayDeploymentResource s -> TF.Attribute s Text)
            (\s a -> s { _stage_description = a } :: ApiGatewayDeploymentResource s)

instance HasStageName (ApiGatewayDeploymentResource s) Text where
    type HasStageNameThread (ApiGatewayDeploymentResource s) Text = s

    stageName =
        lens (_stage_name :: ApiGatewayDeploymentResource s -> TF.Attribute s Text)
            (\s a -> s { _stage_name = a } :: ApiGatewayDeploymentResource s)

instance HasVariables (ApiGatewayDeploymentResource s) Text where
    type HasVariablesThread (ApiGatewayDeploymentResource s) Text = s

    variables =
        lens (_variables :: ApiGatewayDeploymentResource s -> TF.Attribute s Text)
            (\s a -> s { _variables = a } :: ApiGatewayDeploymentResource s)

instance HasComputedCreatedDate (ApiGatewayDeploymentResource s) Text

instance HasComputedExecutionArn (ApiGatewayDeploymentResource s) Text

instance HasComputedId (ApiGatewayDeploymentResource s) Text

instance HasComputedInvokeUrl (ApiGatewayDeploymentResource s) Text

apiGatewayDeploymentResource :: TF.Resource TF.AWS (ApiGatewayDeploymentResource s)
apiGatewayDeploymentResource =
    TF.newResource "aws_api_gateway_deployment" $
        ApiGatewayDeploymentResource {
              _description = TF.Nil
            , _rest_api_id = TF.Nil
            , _stage_description = TF.Nil
            , _stage_name = TF.Nil
            , _variables = TF.Nil
            }

{- | The @aws_api_gateway_documentation_part@ AWS resource.

Provides a settings of an API Gateway Documentation Part.
-}
data ApiGatewayDocumentationPartResource s = ApiGatewayDocumentationPartResource {
      _location :: !(TF.Attribute s Text)
    {- ^ (Required) The location of the targeted API entity of the to-be-created documentation part. See below. -}
    , _properties :: !(TF.Attribute s Text)
    {- ^ (Required) A content map of API-specific key-value pairs describing the targeted API entity. The map must be encoded as a JSON string, e.g., "{ "description": "The API does ..." }". Only Swagger-compliant key-value pairs can be exported and, hence, published. -}
    , _rest_api_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the associated Rest API -}
    } deriving (Show, Eq)

instance TF.ToHCL (ApiGatewayDocumentationPartResource s) where
    toHCL ApiGatewayDocumentationPartResource{..} = TF.block $ catMaybes
        [ TF.assign "location" <$> TF.attribute _location
        , TF.assign "properties" <$> TF.attribute _properties
        , TF.assign "rest_api_id" <$> TF.attribute _rest_api_id
        ]

instance HasLocation (ApiGatewayDocumentationPartResource s) Text where
    type HasLocationThread (ApiGatewayDocumentationPartResource s) Text = s

    location =
        lens (_location :: ApiGatewayDocumentationPartResource s -> TF.Attribute s Text)
            (\s a -> s { _location = a } :: ApiGatewayDocumentationPartResource s)

instance HasProperties (ApiGatewayDocumentationPartResource s) Text where
    type HasPropertiesThread (ApiGatewayDocumentationPartResource s) Text = s

    properties =
        lens (_properties :: ApiGatewayDocumentationPartResource s -> TF.Attribute s Text)
            (\s a -> s { _properties = a } :: ApiGatewayDocumentationPartResource s)

instance HasRestApiId (ApiGatewayDocumentationPartResource s) Text where
    type HasRestApiIdThread (ApiGatewayDocumentationPartResource s) Text = s

    restApiId =
        lens (_rest_api_id :: ApiGatewayDocumentationPartResource s -> TF.Attribute s Text)
            (\s a -> s { _rest_api_id = a } :: ApiGatewayDocumentationPartResource s)

apiGatewayDocumentationPartResource :: TF.Resource TF.AWS (ApiGatewayDocumentationPartResource s)
apiGatewayDocumentationPartResource =
    TF.newResource "aws_api_gateway_documentation_part" $
        ApiGatewayDocumentationPartResource {
              _location = TF.Nil
            , _properties = TF.Nil
            , _rest_api_id = TF.Nil
            }

{- | The @aws_api_gateway_domain_name@ AWS resource.

Registers a custom domain name for use with AWS API Gateway. This resource
just establishes ownership of and the TLS settings for a particular domain
name. An API can be attached to a particular path under the registered
domain name using <api_gateway_base_path_mapping.html> . Internally API
Gateway creates a CloudFront distribution to route requests on the given
hostname. In addition to this resource it's necessary to create a DNS record
corresponding to the given domain name which is an alias (either Route53
alias or traditional CNAME) to the Cloudfront domain name exported in the
@cloudfront_domain_name@ attribute. ~> Note: All arguments including the
private key will be stored in the raw state as plain-text.
</docs/state/sensitive-data.html> .
-}
data ApiGatewayDomainNameResource s = ApiGatewayDomainNameResource {
      _certificate_arn :: !(TF.Attribute s Text)
    {- ^ (Optional) The ARN for an AWS-managed certificate. Conflicts with @certificate_name@ , @certificate_body@ , @certificate_chain@ and @certificate_private_key@ . -}
    , _certificate_body :: !(TF.Attribute s Text)
    {- ^ (Optional) The certificate issued for the domain name being registered, in PEM format. Conflicts with @certificate_arn@ . -}
    , _certificate_chain :: !(TF.Attribute s Text)
    {- ^ (Optional) The certificate for the CA that issued the certificate, along with any intermediate CA certificates required to create an unbroken chain to a certificate trusted by the intended API clients. Conflicts with @certificate_arn@ . -}
    , _certificate_name :: !(TF.Attribute s Text)
    {- ^ (Optional) The unique name to use when registering this cert as an IAM server certificate. Conflicts with @certificate_arn@ . Required if @certificate_arn@ is not set. -}
    , _certificate_private_key :: !(TF.Attribute s Text)
    {- ^ (Optional) The private key associated with the domain certificate given in @certificate_body@ . Conflicts with @certificate_arn@ . -}
    , _domain_name :: !(TF.Attribute s Text)
    {- ^ (Required) The fully-qualified domain name to register -}
    } deriving (Show, Eq)

instance TF.ToHCL (ApiGatewayDomainNameResource s) where
    toHCL ApiGatewayDomainNameResource{..} = TF.block $ catMaybes
        [ TF.assign "certificate_arn" <$> TF.attribute _certificate_arn
        , TF.assign "certificate_body" <$> TF.attribute _certificate_body
        , TF.assign "certificate_chain" <$> TF.attribute _certificate_chain
        , TF.assign "certificate_name" <$> TF.attribute _certificate_name
        , TF.assign "certificate_private_key" <$> TF.attribute _certificate_private_key
        , TF.assign "domain_name" <$> TF.attribute _domain_name
        ]

instance HasCertificateArn (ApiGatewayDomainNameResource s) Text where
    type HasCertificateArnThread (ApiGatewayDomainNameResource s) Text = s

    certificateArn =
        lens (_certificate_arn :: ApiGatewayDomainNameResource s -> TF.Attribute s Text)
            (\s a -> s { _certificate_arn = a } :: ApiGatewayDomainNameResource s)

instance HasCertificateBody (ApiGatewayDomainNameResource s) Text where
    type HasCertificateBodyThread (ApiGatewayDomainNameResource s) Text = s

    certificateBody =
        lens (_certificate_body :: ApiGatewayDomainNameResource s -> TF.Attribute s Text)
            (\s a -> s { _certificate_body = a } :: ApiGatewayDomainNameResource s)

instance HasCertificateChain (ApiGatewayDomainNameResource s) Text where
    type HasCertificateChainThread (ApiGatewayDomainNameResource s) Text = s

    certificateChain =
        lens (_certificate_chain :: ApiGatewayDomainNameResource s -> TF.Attribute s Text)
            (\s a -> s { _certificate_chain = a } :: ApiGatewayDomainNameResource s)

instance HasCertificateName (ApiGatewayDomainNameResource s) Text where
    type HasCertificateNameThread (ApiGatewayDomainNameResource s) Text = s

    certificateName =
        lens (_certificate_name :: ApiGatewayDomainNameResource s -> TF.Attribute s Text)
            (\s a -> s { _certificate_name = a } :: ApiGatewayDomainNameResource s)

instance HasCertificatePrivateKey (ApiGatewayDomainNameResource s) Text where
    type HasCertificatePrivateKeyThread (ApiGatewayDomainNameResource s) Text = s

    certificatePrivateKey =
        lens (_certificate_private_key :: ApiGatewayDomainNameResource s -> TF.Attribute s Text)
            (\s a -> s { _certificate_private_key = a } :: ApiGatewayDomainNameResource s)

instance HasDomainName (ApiGatewayDomainNameResource s) Text where
    type HasDomainNameThread (ApiGatewayDomainNameResource s) Text = s

    domainName =
        lens (_domain_name :: ApiGatewayDomainNameResource s -> TF.Attribute s Text)
            (\s a -> s { _domain_name = a } :: ApiGatewayDomainNameResource s)

instance HasComputedCertificateUploadDate (ApiGatewayDomainNameResource s) Text

instance HasComputedCloudfrontDomainName (ApiGatewayDomainNameResource s) Text

instance HasComputedCloudfrontZoneId (ApiGatewayDomainNameResource s) Text

instance HasComputedId (ApiGatewayDomainNameResource s) Text

apiGatewayDomainNameResource :: TF.Resource TF.AWS (ApiGatewayDomainNameResource s)
apiGatewayDomainNameResource =
    TF.newResource "aws_api_gateway_domain_name" $
        ApiGatewayDomainNameResource {
              _certificate_arn = TF.Nil
            , _certificate_body = TF.Nil
            , _certificate_chain = TF.Nil
            , _certificate_name = TF.Nil
            , _certificate_private_key = TF.Nil
            , _domain_name = TF.Nil
            }

{- | The @aws_api_gateway_gateway_response@ AWS resource.

Provides an API Gateway Gateway Response for a REST API Gateway.
-}
data ApiGatewayGatewayResponseResource s = ApiGatewayGatewayResponseResource {
      _response_parameters :: !(TF.Attribute s Text)
    {- ^ (Optional) A map specifying the templates used to transform the response body. -}
    , _response_templates :: !(TF.Attribute s Text)
    {- ^ (Optional) A map specifying the parameters (paths, query strings and headers) of the Gateway Response. -}
    , _response_type :: !(TF.Attribute s Text)
    {- ^ (Required) The response type of the associated GatewayResponse. -}
    , _rest_api_id :: !(TF.Attribute s Text)
    {- ^ (Required) The string identifier of the associated REST API. -}
    , _status_code :: !(TF.Attribute s Text)
    {- ^ (Optional) The HTTP status code of the Gateway Response. -}
    } deriving (Show, Eq)

instance TF.ToHCL (ApiGatewayGatewayResponseResource s) where
    toHCL ApiGatewayGatewayResponseResource{..} = TF.block $ catMaybes
        [ TF.assign "response_parameters" <$> TF.attribute _response_parameters
        , TF.assign "response_templates" <$> TF.attribute _response_templates
        , TF.assign "response_type" <$> TF.attribute _response_type
        , TF.assign "rest_api_id" <$> TF.attribute _rest_api_id
        , TF.assign "status_code" <$> TF.attribute _status_code
        ]

instance HasResponseParameters (ApiGatewayGatewayResponseResource s) Text where
    type HasResponseParametersThread (ApiGatewayGatewayResponseResource s) Text = s

    responseParameters =
        lens (_response_parameters :: ApiGatewayGatewayResponseResource s -> TF.Attribute s Text)
            (\s a -> s { _response_parameters = a } :: ApiGatewayGatewayResponseResource s)

instance HasResponseTemplates (ApiGatewayGatewayResponseResource s) Text where
    type HasResponseTemplatesThread (ApiGatewayGatewayResponseResource s) Text = s

    responseTemplates =
        lens (_response_templates :: ApiGatewayGatewayResponseResource s -> TF.Attribute s Text)
            (\s a -> s { _response_templates = a } :: ApiGatewayGatewayResponseResource s)

instance HasResponseType (ApiGatewayGatewayResponseResource s) Text where
    type HasResponseTypeThread (ApiGatewayGatewayResponseResource s) Text = s

    responseType =
        lens (_response_type :: ApiGatewayGatewayResponseResource s -> TF.Attribute s Text)
            (\s a -> s { _response_type = a } :: ApiGatewayGatewayResponseResource s)

instance HasRestApiId (ApiGatewayGatewayResponseResource s) Text where
    type HasRestApiIdThread (ApiGatewayGatewayResponseResource s) Text = s

    restApiId =
        lens (_rest_api_id :: ApiGatewayGatewayResponseResource s -> TF.Attribute s Text)
            (\s a -> s { _rest_api_id = a } :: ApiGatewayGatewayResponseResource s)

instance HasStatusCode (ApiGatewayGatewayResponseResource s) Text where
    type HasStatusCodeThread (ApiGatewayGatewayResponseResource s) Text = s

    statusCode =
        lens (_status_code :: ApiGatewayGatewayResponseResource s -> TF.Attribute s Text)
            (\s a -> s { _status_code = a } :: ApiGatewayGatewayResponseResource s)

apiGatewayGatewayResponseResource :: TF.Resource TF.AWS (ApiGatewayGatewayResponseResource s)
apiGatewayGatewayResponseResource =
    TF.newResource "aws_api_gateway_gateway_response" $
        ApiGatewayGatewayResponseResource {
              _response_parameters = TF.Nil
            , _response_templates = TF.Nil
            , _response_type = TF.Nil
            , _rest_api_id = TF.Nil
            , _status_code = TF.Nil
            }

{- | The @aws_api_gateway_integration@ AWS resource.

Provides an HTTP Method Integration for an API Gateway Integration.
-}
data ApiGatewayIntegrationResource s = ApiGatewayIntegrationResource {
      _cache_key_namespace :: !(TF.Attribute s Text)
    {- ^ (Optional) The integration's cache namespace. -}
    , _cache_key_parameters :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of cache key parameters for the integration. -}
    , _content_handling :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies how to handle request payload content type conversions. Supported values are @CONVERT_TO_BINARY@ and @CONVERT_TO_TEXT@ . If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the passthroughBehaviors is configured to support payload pass-through. -}
    , _credentials :: !(TF.Attribute s Text)
    {- ^ (Optional) The credentials required for the integration. For @AWS@ integrations, 2 options are available. To specify an IAM Role for Amazon API Gateway to assume, use the role's ARN. To require that the caller's identity be passed through from the request, specify the string @arn:aws:iam::\*:user/\*@ . -}
    , _http_method :: !(TF.Attribute s Text)
    {- ^ (Required) The HTTP method ( @GET@ , @POST@ , @PUT@ , @DELETE@ , @HEAD@ , @OPTION@ , @ANY@ ) when calling the associated resource. -}
    , _integration_http_method :: !(TF.Attribute s Text)
    {- ^ (Optional) The integration HTTP method ( @GET@ , @POST@ , @PUT@ , @DELETE@ , @HEAD@ , @OPTION@ ) specifying how API Gateway will interact with the back end. Required if @type@ is @AWS@ , @AWS_PROXY@ , @HTTP@ or @HTTP_PROXY@ . Not all methods are compatible with all @AWS@ integrations. e.g. Lambda function <https://github.com/awslabs/aws-apigateway-importer/issues/9#issuecomment-129651005> via @POST@ . -}
    , _passthrough_behavior :: !(TF.Attribute s Text)
    {- ^ (Optional) The integration passthrough behavior ( @WHEN_NO_MATCH@ , @WHEN_NO_TEMPLATES@ , @NEVER@ ). Required if @request_templates@ is used. -}
    , _request_parameters :: !(TF.Attribute s Text)
    {- ^ (Optional) A map of request query string parameters and headers that should be passed to the backend responder. For example: @request_parameters = { "integration.request.header.X-Some-Other-Header" = "method.request.header.X-Some-Header" }@ -}
    , _request_parameters_in_json :: !(TF.Attribute s Text)
    {- ^ - Deprecated , use @request_parameters@ instead. -}
    , _request_templates :: !(TF.Attribute s Text)
    {- ^ (Optional) A map of the integration's request templates. -}
    , _resource_id :: !(TF.Attribute s Text)
    {- ^ (Required) The API resource ID. -}
    , _rest_api_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the associated REST API. -}
    , _type' :: !(TF.Attribute s Text)
    {- ^ (Required) The integration input's <https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/> . Valid values are @HTTP@ (for HTTP backends), @MOCK@ (not calling any real backend), @AWS@ (for AWS services), @AWS_PROXY@ (for Lambda proxy integration) and @HTTP_PROXY@ (for HTTP proxy integration). -}
    , _uri :: !(TF.Attribute s Text)
    {- ^ (Optional) The input's URI (HTTP, AWS). Required if @type@ is @HTTP@ or @AWS@ . For HTTP integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification . For AWS integrations, the URI should be of the form @arn:aws:apigateway:{region}:{subdomain.service|service}:{path|action}/{service_api}@ . @region@ , @subdomain@ and @service@ are used to determine the right endpoint. e.g. @arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:012345678901:function:my-func/invocations@ -}
    } deriving (Show, Eq)

instance TF.ToHCL (ApiGatewayIntegrationResource s) where
    toHCL ApiGatewayIntegrationResource{..} = TF.block $ catMaybes
        [ TF.assign "cache_key_namespace" <$> TF.attribute _cache_key_namespace
        , TF.assign "cache_key_parameters" <$> TF.attribute _cache_key_parameters
        , TF.assign "content_handling" <$> TF.attribute _content_handling
        , TF.assign "credentials" <$> TF.attribute _credentials
        , TF.assign "http_method" <$> TF.attribute _http_method
        , TF.assign "integration_http_method" <$> TF.attribute _integration_http_method
        , TF.assign "passthrough_behavior" <$> TF.attribute _passthrough_behavior
        , TF.assign "request_parameters" <$> TF.attribute _request_parameters
        , TF.assign "request_parameters_in_json" <$> TF.attribute _request_parameters_in_json
        , TF.assign "request_templates" <$> TF.attribute _request_templates
        , TF.assign "resource_id" <$> TF.attribute _resource_id
        , TF.assign "rest_api_id" <$> TF.attribute _rest_api_id
        , TF.assign "type" <$> TF.attribute _type'
        , TF.assign "uri" <$> TF.attribute _uri
        ]

instance HasCacheKeyNamespace (ApiGatewayIntegrationResource s) Text where
    type HasCacheKeyNamespaceThread (ApiGatewayIntegrationResource s) Text = s

    cacheKeyNamespace =
        lens (_cache_key_namespace :: ApiGatewayIntegrationResource s -> TF.Attribute s Text)
            (\s a -> s { _cache_key_namespace = a } :: ApiGatewayIntegrationResource s)

instance HasCacheKeyParameters (ApiGatewayIntegrationResource s) Text where
    type HasCacheKeyParametersThread (ApiGatewayIntegrationResource s) Text = s

    cacheKeyParameters =
        lens (_cache_key_parameters :: ApiGatewayIntegrationResource s -> TF.Attribute s Text)
            (\s a -> s { _cache_key_parameters = a } :: ApiGatewayIntegrationResource s)

instance HasContentHandling (ApiGatewayIntegrationResource s) Text where
    type HasContentHandlingThread (ApiGatewayIntegrationResource s) Text = s

    contentHandling =
        lens (_content_handling :: ApiGatewayIntegrationResource s -> TF.Attribute s Text)
            (\s a -> s { _content_handling = a } :: ApiGatewayIntegrationResource s)

instance HasCredentials (ApiGatewayIntegrationResource s) Text where
    type HasCredentialsThread (ApiGatewayIntegrationResource s) Text = s

    credentials =
        lens (_credentials :: ApiGatewayIntegrationResource s -> TF.Attribute s Text)
            (\s a -> s { _credentials = a } :: ApiGatewayIntegrationResource s)

instance HasHttpMethod (ApiGatewayIntegrationResource s) Text where
    type HasHttpMethodThread (ApiGatewayIntegrationResource s) Text = s

    httpMethod =
        lens (_http_method :: ApiGatewayIntegrationResource s -> TF.Attribute s Text)
            (\s a -> s { _http_method = a } :: ApiGatewayIntegrationResource s)

instance HasIntegrationHttpMethod (ApiGatewayIntegrationResource s) Text where
    type HasIntegrationHttpMethodThread (ApiGatewayIntegrationResource s) Text = s

    integrationHttpMethod =
        lens (_integration_http_method :: ApiGatewayIntegrationResource s -> TF.Attribute s Text)
            (\s a -> s { _integration_http_method = a } :: ApiGatewayIntegrationResource s)

instance HasPassthroughBehavior (ApiGatewayIntegrationResource s) Text where
    type HasPassthroughBehaviorThread (ApiGatewayIntegrationResource s) Text = s

    passthroughBehavior =
        lens (_passthrough_behavior :: ApiGatewayIntegrationResource s -> TF.Attribute s Text)
            (\s a -> s { _passthrough_behavior = a } :: ApiGatewayIntegrationResource s)

instance HasRequestParameters (ApiGatewayIntegrationResource s) Text where
    type HasRequestParametersThread (ApiGatewayIntegrationResource s) Text = s

    requestParameters =
        lens (_request_parameters :: ApiGatewayIntegrationResource s -> TF.Attribute s Text)
            (\s a -> s { _request_parameters = a } :: ApiGatewayIntegrationResource s)

instance HasRequestParametersInJson (ApiGatewayIntegrationResource s) Text where
    type HasRequestParametersInJsonThread (ApiGatewayIntegrationResource s) Text = s

    requestParametersInJson =
        lens (_request_parameters_in_json :: ApiGatewayIntegrationResource s -> TF.Attribute s Text)
            (\s a -> s { _request_parameters_in_json = a } :: ApiGatewayIntegrationResource s)

instance HasRequestTemplates (ApiGatewayIntegrationResource s) Text where
    type HasRequestTemplatesThread (ApiGatewayIntegrationResource s) Text = s

    requestTemplates =
        lens (_request_templates :: ApiGatewayIntegrationResource s -> TF.Attribute s Text)
            (\s a -> s { _request_templates = a } :: ApiGatewayIntegrationResource s)

instance HasResourceId (ApiGatewayIntegrationResource s) Text where
    type HasResourceIdThread (ApiGatewayIntegrationResource s) Text = s

    resourceId =
        lens (_resource_id :: ApiGatewayIntegrationResource s -> TF.Attribute s Text)
            (\s a -> s { _resource_id = a } :: ApiGatewayIntegrationResource s)

instance HasRestApiId (ApiGatewayIntegrationResource s) Text where
    type HasRestApiIdThread (ApiGatewayIntegrationResource s) Text = s

    restApiId =
        lens (_rest_api_id :: ApiGatewayIntegrationResource s -> TF.Attribute s Text)
            (\s a -> s { _rest_api_id = a } :: ApiGatewayIntegrationResource s)

instance HasType' (ApiGatewayIntegrationResource s) Text where
    type HasType'Thread (ApiGatewayIntegrationResource s) Text = s

    type' =
        lens (_type' :: ApiGatewayIntegrationResource s -> TF.Attribute s Text)
            (\s a -> s { _type' = a } :: ApiGatewayIntegrationResource s)

instance HasUri (ApiGatewayIntegrationResource s) Text where
    type HasUriThread (ApiGatewayIntegrationResource s) Text = s

    uri =
        lens (_uri :: ApiGatewayIntegrationResource s -> TF.Attribute s Text)
            (\s a -> s { _uri = a } :: ApiGatewayIntegrationResource s)

apiGatewayIntegrationResource :: TF.Resource TF.AWS (ApiGatewayIntegrationResource s)
apiGatewayIntegrationResource =
    TF.newResource "aws_api_gateway_integration" $
        ApiGatewayIntegrationResource {
              _cache_key_namespace = TF.Nil
            , _cache_key_parameters = TF.Nil
            , _content_handling = TF.Nil
            , _credentials = TF.Nil
            , _http_method = TF.Nil
            , _integration_http_method = TF.Nil
            , _passthrough_behavior = TF.Nil
            , _request_parameters = TF.Nil
            , _request_parameters_in_json = TF.Nil
            , _request_templates = TF.Nil
            , _resource_id = TF.Nil
            , _rest_api_id = TF.Nil
            , _type' = TF.Nil
            , _uri = TF.Nil
            }

{- | The @aws_api_gateway_integration_response@ AWS resource.

Provides an HTTP Method Integration Response for an API Gateway Resource. ->
Note: Depends on having @aws_api_gateway_integration@ inside your rest api.
To ensure this you might need to add an explicit @depends_on@ for clean
runs.
-}
data ApiGatewayIntegrationResponseResource s = ApiGatewayIntegrationResponseResource {
      _content_handling :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies how to handle request payload content type conversions. Supported values are @CONVERT_TO_BINARY@ and @CONVERT_TO_TEXT@ . If this property is not defined, the response payload will be passed through from the integration response to the method response without modification. -}
    , _http_method :: !(TF.Attribute s Text)
    {- ^ (Required) The HTTP method ( @GET@ , @POST@ , @PUT@ , @DELETE@ , @HEAD@ , @OPTIONS@ , @ANY@ ) -}
    , _resource_id :: !(TF.Attribute s Text)
    {- ^ (Required) The API resource ID -}
    , _response_parameters :: !(TF.Attribute s Text)
    {- ^ (Optional) A map of response parameters that can be read from the backend response. For example: @response_parameters = { "method.response.header.X-Some-Header" = "integration.response.header.X-Some-Other-Header" }@ , -}
    , _response_parameters_in_json :: !(TF.Attribute s Text)
    {- ^ - Deprecated , use @response_parameters@ instead. -}
    , _response_templates :: !(TF.Attribute s Text)
    {- ^ (Optional) A map specifying the templates used to transform the integration response body -}
    , _rest_api_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the associated REST API -}
    , _selection_pattern :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies the regular expression pattern used to choose an integration response based on the response from the backend. Setting this to @-@ makes the integration the default one. If the backend is an @AWS@ Lambda function, the AWS Lambda function error header is matched. For all other @HTTP@ and @AWS@ backends, the HTTP status code is matched. -}
    , _status_code :: !(TF.Attribute s Text)
    {- ^ (Required) The HTTP status code -}
    } deriving (Show, Eq)

instance TF.ToHCL (ApiGatewayIntegrationResponseResource s) where
    toHCL ApiGatewayIntegrationResponseResource{..} = TF.block $ catMaybes
        [ TF.assign "content_handling" <$> TF.attribute _content_handling
        , TF.assign "http_method" <$> TF.attribute _http_method
        , TF.assign "resource_id" <$> TF.attribute _resource_id
        , TF.assign "response_parameters" <$> TF.attribute _response_parameters
        , TF.assign "response_parameters_in_json" <$> TF.attribute _response_parameters_in_json
        , TF.assign "response_templates" <$> TF.attribute _response_templates
        , TF.assign "rest_api_id" <$> TF.attribute _rest_api_id
        , TF.assign "selection_pattern" <$> TF.attribute _selection_pattern
        , TF.assign "status_code" <$> TF.attribute _status_code
        ]

instance HasContentHandling (ApiGatewayIntegrationResponseResource s) Text where
    type HasContentHandlingThread (ApiGatewayIntegrationResponseResource s) Text = s

    contentHandling =
        lens (_content_handling :: ApiGatewayIntegrationResponseResource s -> TF.Attribute s Text)
            (\s a -> s { _content_handling = a } :: ApiGatewayIntegrationResponseResource s)

instance HasHttpMethod (ApiGatewayIntegrationResponseResource s) Text where
    type HasHttpMethodThread (ApiGatewayIntegrationResponseResource s) Text = s

    httpMethod =
        lens (_http_method :: ApiGatewayIntegrationResponseResource s -> TF.Attribute s Text)
            (\s a -> s { _http_method = a } :: ApiGatewayIntegrationResponseResource s)

instance HasResourceId (ApiGatewayIntegrationResponseResource s) Text where
    type HasResourceIdThread (ApiGatewayIntegrationResponseResource s) Text = s

    resourceId =
        lens (_resource_id :: ApiGatewayIntegrationResponseResource s -> TF.Attribute s Text)
            (\s a -> s { _resource_id = a } :: ApiGatewayIntegrationResponseResource s)

instance HasResponseParameters (ApiGatewayIntegrationResponseResource s) Text where
    type HasResponseParametersThread (ApiGatewayIntegrationResponseResource s) Text = s

    responseParameters =
        lens (_response_parameters :: ApiGatewayIntegrationResponseResource s -> TF.Attribute s Text)
            (\s a -> s { _response_parameters = a } :: ApiGatewayIntegrationResponseResource s)

instance HasResponseParametersInJson (ApiGatewayIntegrationResponseResource s) Text where
    type HasResponseParametersInJsonThread (ApiGatewayIntegrationResponseResource s) Text = s

    responseParametersInJson =
        lens (_response_parameters_in_json :: ApiGatewayIntegrationResponseResource s -> TF.Attribute s Text)
            (\s a -> s { _response_parameters_in_json = a } :: ApiGatewayIntegrationResponseResource s)

instance HasResponseTemplates (ApiGatewayIntegrationResponseResource s) Text where
    type HasResponseTemplatesThread (ApiGatewayIntegrationResponseResource s) Text = s

    responseTemplates =
        lens (_response_templates :: ApiGatewayIntegrationResponseResource s -> TF.Attribute s Text)
            (\s a -> s { _response_templates = a } :: ApiGatewayIntegrationResponseResource s)

instance HasRestApiId (ApiGatewayIntegrationResponseResource s) Text where
    type HasRestApiIdThread (ApiGatewayIntegrationResponseResource s) Text = s

    restApiId =
        lens (_rest_api_id :: ApiGatewayIntegrationResponseResource s -> TF.Attribute s Text)
            (\s a -> s { _rest_api_id = a } :: ApiGatewayIntegrationResponseResource s)

instance HasSelectionPattern (ApiGatewayIntegrationResponseResource s) Text where
    type HasSelectionPatternThread (ApiGatewayIntegrationResponseResource s) Text = s

    selectionPattern =
        lens (_selection_pattern :: ApiGatewayIntegrationResponseResource s -> TF.Attribute s Text)
            (\s a -> s { _selection_pattern = a } :: ApiGatewayIntegrationResponseResource s)

instance HasStatusCode (ApiGatewayIntegrationResponseResource s) Text where
    type HasStatusCodeThread (ApiGatewayIntegrationResponseResource s) Text = s

    statusCode =
        lens (_status_code :: ApiGatewayIntegrationResponseResource s -> TF.Attribute s Text)
            (\s a -> s { _status_code = a } :: ApiGatewayIntegrationResponseResource s)

apiGatewayIntegrationResponseResource :: TF.Resource TF.AWS (ApiGatewayIntegrationResponseResource s)
apiGatewayIntegrationResponseResource =
    TF.newResource "aws_api_gateway_integration_response" $
        ApiGatewayIntegrationResponseResource {
              _content_handling = TF.Nil
            , _http_method = TF.Nil
            , _resource_id = TF.Nil
            , _response_parameters = TF.Nil
            , _response_parameters_in_json = TF.Nil
            , _response_templates = TF.Nil
            , _rest_api_id = TF.Nil
            , _selection_pattern = TF.Nil
            , _status_code = TF.Nil
            }

{- | The @aws_api_gateway_method@ AWS resource.

Provides a HTTP Method for an API Gateway Resource.
-}
data ApiGatewayMethodResource s = ApiGatewayMethodResource {
      _api_key_required :: !(TF.Attribute s Text)
    {- ^ (Optional) Specify if the method requires an API key -}
    , _authorization :: !(TF.Attribute s Text)
    {- ^ (Required) The type of authorization used for the method ( @NONE@ , @CUSTOM@ , @AWS_IAM@ ) -}
    , _authorizer_id :: !(TF.Attribute s Text)
    {- ^ (Optional) The authorizer id to be used when the authorization is @CUSTOM@ -}
    , _http_method :: !(TF.Attribute s Text)
    {- ^ (Required) The HTTP Method ( @GET@ , @POST@ , @PUT@ , @DELETE@ , @HEAD@ , @OPTIONS@ , @ANY@ ) -}
    , _request_models :: !(TF.Attribute s Text)
    {- ^ (Optional) A map of the API models used for the request's content type where key is the content type (e.g. @application/json@ ) and value is either @Error@ , @Empty@ (built-in models) or @aws_api_gateway_model@ 's @name@ . -}
    , _request_parameters :: !(TF.Attribute s Text)
    {- ^ (Optional) A map of request query string parameters and headers that should be passed to the integration. For example: -}
    , _request_validator_id :: !(TF.Attribute s Text)
    {- ^ (Optional) The ID of a @aws_api_gateway_request_validator@ -}
    , _resource_id :: !(TF.Attribute s Text)
    {- ^ (Required) The API resource ID -}
    , _rest_api_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the associated REST API -}
    } deriving (Show, Eq)

instance TF.ToHCL (ApiGatewayMethodResource s) where
    toHCL ApiGatewayMethodResource{..} = TF.block $ catMaybes
        [ TF.assign "api_key_required" <$> TF.attribute _api_key_required
        , TF.assign "authorization" <$> TF.attribute _authorization
        , TF.assign "authorizer_id" <$> TF.attribute _authorizer_id
        , TF.assign "http_method" <$> TF.attribute _http_method
        , TF.assign "request_models" <$> TF.attribute _request_models
        , TF.assign "request_parameters" <$> TF.attribute _request_parameters
        , TF.assign "request_validator_id" <$> TF.attribute _request_validator_id
        , TF.assign "resource_id" <$> TF.attribute _resource_id
        , TF.assign "rest_api_id" <$> TF.attribute _rest_api_id
        ]

instance HasApiKeyRequired (ApiGatewayMethodResource s) Text where
    type HasApiKeyRequiredThread (ApiGatewayMethodResource s) Text = s

    apiKeyRequired =
        lens (_api_key_required :: ApiGatewayMethodResource s -> TF.Attribute s Text)
            (\s a -> s { _api_key_required = a } :: ApiGatewayMethodResource s)

instance HasAuthorization (ApiGatewayMethodResource s) Text where
    type HasAuthorizationThread (ApiGatewayMethodResource s) Text = s

    authorization =
        lens (_authorization :: ApiGatewayMethodResource s -> TF.Attribute s Text)
            (\s a -> s { _authorization = a } :: ApiGatewayMethodResource s)

instance HasAuthorizerId (ApiGatewayMethodResource s) Text where
    type HasAuthorizerIdThread (ApiGatewayMethodResource s) Text = s

    authorizerId =
        lens (_authorizer_id :: ApiGatewayMethodResource s -> TF.Attribute s Text)
            (\s a -> s { _authorizer_id = a } :: ApiGatewayMethodResource s)

instance HasHttpMethod (ApiGatewayMethodResource s) Text where
    type HasHttpMethodThread (ApiGatewayMethodResource s) Text = s

    httpMethod =
        lens (_http_method :: ApiGatewayMethodResource s -> TF.Attribute s Text)
            (\s a -> s { _http_method = a } :: ApiGatewayMethodResource s)

instance HasRequestModels (ApiGatewayMethodResource s) Text where
    type HasRequestModelsThread (ApiGatewayMethodResource s) Text = s

    requestModels =
        lens (_request_models :: ApiGatewayMethodResource s -> TF.Attribute s Text)
            (\s a -> s { _request_models = a } :: ApiGatewayMethodResource s)

instance HasRequestParameters (ApiGatewayMethodResource s) Text where
    type HasRequestParametersThread (ApiGatewayMethodResource s) Text = s

    requestParameters =
        lens (_request_parameters :: ApiGatewayMethodResource s -> TF.Attribute s Text)
            (\s a -> s { _request_parameters = a } :: ApiGatewayMethodResource s)

instance HasRequestValidatorId (ApiGatewayMethodResource s) Text where
    type HasRequestValidatorIdThread (ApiGatewayMethodResource s) Text = s

    requestValidatorId =
        lens (_request_validator_id :: ApiGatewayMethodResource s -> TF.Attribute s Text)
            (\s a -> s { _request_validator_id = a } :: ApiGatewayMethodResource s)

instance HasResourceId (ApiGatewayMethodResource s) Text where
    type HasResourceIdThread (ApiGatewayMethodResource s) Text = s

    resourceId =
        lens (_resource_id :: ApiGatewayMethodResource s -> TF.Attribute s Text)
            (\s a -> s { _resource_id = a } :: ApiGatewayMethodResource s)

instance HasRestApiId (ApiGatewayMethodResource s) Text where
    type HasRestApiIdThread (ApiGatewayMethodResource s) Text = s

    restApiId =
        lens (_rest_api_id :: ApiGatewayMethodResource s -> TF.Attribute s Text)
            (\s a -> s { _rest_api_id = a } :: ApiGatewayMethodResource s)

apiGatewayMethodResource :: TF.Resource TF.AWS (ApiGatewayMethodResource s)
apiGatewayMethodResource =
    TF.newResource "aws_api_gateway_method" $
        ApiGatewayMethodResource {
              _api_key_required = TF.Nil
            , _authorization = TF.Nil
            , _authorizer_id = TF.Nil
            , _http_method = TF.Nil
            , _request_models = TF.Nil
            , _request_parameters = TF.Nil
            , _request_validator_id = TF.Nil
            , _resource_id = TF.Nil
            , _rest_api_id = TF.Nil
            }

{- | The @aws_api_gateway_method_response@ AWS resource.

Provides an HTTP Method Response for an API Gateway Resource.
-}
data ApiGatewayMethodResponseResource s = ApiGatewayMethodResponseResource {
      _http_method :: !(TF.Attribute s Text)
    {- ^ (Required) The HTTP Method ( @GET@ , @POST@ , @PUT@ , @DELETE@ , @HEAD@ , @OPTIONS@ , @ANY@ ) -}
    , _resource_id :: !(TF.Attribute s Text)
    {- ^ (Required) The API resource ID -}
    , _response_models :: !(TF.Attribute s Text)
    {- ^ (Optional) A map of the API models used for the response's content type -}
    , _response_parameters :: !(TF.Attribute s Text)
    {- ^ (Optional) A map of response parameters that can be sent to the caller. For example: @response_parameters = { "method.response.header.X-Some-Header" = true }@ would define that the header @X-Some-Header@ can be provided on the response. -}
    , _response_parameters_in_json :: !(TF.Attribute s Text)
    {- ^ - Deprecated , use @response_parameters@ instead. -}
    , _rest_api_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the associated REST API -}
    , _status_code :: !(TF.Attribute s Text)
    {- ^ (Required) The HTTP status code -}
    } deriving (Show, Eq)

instance TF.ToHCL (ApiGatewayMethodResponseResource s) where
    toHCL ApiGatewayMethodResponseResource{..} = TF.block $ catMaybes
        [ TF.assign "http_method" <$> TF.attribute _http_method
        , TF.assign "resource_id" <$> TF.attribute _resource_id
        , TF.assign "response_models" <$> TF.attribute _response_models
        , TF.assign "response_parameters" <$> TF.attribute _response_parameters
        , TF.assign "response_parameters_in_json" <$> TF.attribute _response_parameters_in_json
        , TF.assign "rest_api_id" <$> TF.attribute _rest_api_id
        , TF.assign "status_code" <$> TF.attribute _status_code
        ]

instance HasHttpMethod (ApiGatewayMethodResponseResource s) Text where
    type HasHttpMethodThread (ApiGatewayMethodResponseResource s) Text = s

    httpMethod =
        lens (_http_method :: ApiGatewayMethodResponseResource s -> TF.Attribute s Text)
            (\s a -> s { _http_method = a } :: ApiGatewayMethodResponseResource s)

instance HasResourceId (ApiGatewayMethodResponseResource s) Text where
    type HasResourceIdThread (ApiGatewayMethodResponseResource s) Text = s

    resourceId =
        lens (_resource_id :: ApiGatewayMethodResponseResource s -> TF.Attribute s Text)
            (\s a -> s { _resource_id = a } :: ApiGatewayMethodResponseResource s)

instance HasResponseModels (ApiGatewayMethodResponseResource s) Text where
    type HasResponseModelsThread (ApiGatewayMethodResponseResource s) Text = s

    responseModels =
        lens (_response_models :: ApiGatewayMethodResponseResource s -> TF.Attribute s Text)
            (\s a -> s { _response_models = a } :: ApiGatewayMethodResponseResource s)

instance HasResponseParameters (ApiGatewayMethodResponseResource s) Text where
    type HasResponseParametersThread (ApiGatewayMethodResponseResource s) Text = s

    responseParameters =
        lens (_response_parameters :: ApiGatewayMethodResponseResource s -> TF.Attribute s Text)
            (\s a -> s { _response_parameters = a } :: ApiGatewayMethodResponseResource s)

instance HasResponseParametersInJson (ApiGatewayMethodResponseResource s) Text where
    type HasResponseParametersInJsonThread (ApiGatewayMethodResponseResource s) Text = s

    responseParametersInJson =
        lens (_response_parameters_in_json :: ApiGatewayMethodResponseResource s -> TF.Attribute s Text)
            (\s a -> s { _response_parameters_in_json = a } :: ApiGatewayMethodResponseResource s)

instance HasRestApiId (ApiGatewayMethodResponseResource s) Text where
    type HasRestApiIdThread (ApiGatewayMethodResponseResource s) Text = s

    restApiId =
        lens (_rest_api_id :: ApiGatewayMethodResponseResource s -> TF.Attribute s Text)
            (\s a -> s { _rest_api_id = a } :: ApiGatewayMethodResponseResource s)

instance HasStatusCode (ApiGatewayMethodResponseResource s) Text where
    type HasStatusCodeThread (ApiGatewayMethodResponseResource s) Text = s

    statusCode =
        lens (_status_code :: ApiGatewayMethodResponseResource s -> TF.Attribute s Text)
            (\s a -> s { _status_code = a } :: ApiGatewayMethodResponseResource s)

apiGatewayMethodResponseResource :: TF.Resource TF.AWS (ApiGatewayMethodResponseResource s)
apiGatewayMethodResponseResource =
    TF.newResource "aws_api_gateway_method_response" $
        ApiGatewayMethodResponseResource {
              _http_method = TF.Nil
            , _resource_id = TF.Nil
            , _response_models = TF.Nil
            , _response_parameters = TF.Nil
            , _response_parameters_in_json = TF.Nil
            , _rest_api_id = TF.Nil
            , _status_code = TF.Nil
            }

{- | The @aws_api_gateway_method_settings@ AWS resource.

Provides an API Gateway Method Settings, e.g. logging or monitoring.
-}
data ApiGatewayMethodSettingsResource s = ApiGatewayMethodSettingsResource {
      _method_path :: !(TF.Attribute s Text)
    {- ^ (Required) Method path defined as @{resource_path}/{http_method}@ for an individual method override, or @*/*@ for overriding all methods in the stage. -}
    , _rest_api_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the REST API -}
    , _settings :: !(TF.Attribute s Text)
    {- ^ (Required) The settings block, see below. -}
    , _stage_name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the stage -}
    } deriving (Show, Eq)

instance TF.ToHCL (ApiGatewayMethodSettingsResource s) where
    toHCL ApiGatewayMethodSettingsResource{..} = TF.block $ catMaybes
        [ TF.assign "method_path" <$> TF.attribute _method_path
        , TF.assign "rest_api_id" <$> TF.attribute _rest_api_id
        , TF.assign "settings" <$> TF.attribute _settings
        , TF.assign "stage_name" <$> TF.attribute _stage_name
        ]

instance HasMethodPath (ApiGatewayMethodSettingsResource s) Text where
    type HasMethodPathThread (ApiGatewayMethodSettingsResource s) Text = s

    methodPath =
        lens (_method_path :: ApiGatewayMethodSettingsResource s -> TF.Attribute s Text)
            (\s a -> s { _method_path = a } :: ApiGatewayMethodSettingsResource s)

instance HasRestApiId (ApiGatewayMethodSettingsResource s) Text where
    type HasRestApiIdThread (ApiGatewayMethodSettingsResource s) Text = s

    restApiId =
        lens (_rest_api_id :: ApiGatewayMethodSettingsResource s -> TF.Attribute s Text)
            (\s a -> s { _rest_api_id = a } :: ApiGatewayMethodSettingsResource s)

instance HasSettings (ApiGatewayMethodSettingsResource s) Text where
    type HasSettingsThread (ApiGatewayMethodSettingsResource s) Text = s

    settings =
        lens (_settings :: ApiGatewayMethodSettingsResource s -> TF.Attribute s Text)
            (\s a -> s { _settings = a } :: ApiGatewayMethodSettingsResource s)

instance HasStageName (ApiGatewayMethodSettingsResource s) Text where
    type HasStageNameThread (ApiGatewayMethodSettingsResource s) Text = s

    stageName =
        lens (_stage_name :: ApiGatewayMethodSettingsResource s -> TF.Attribute s Text)
            (\s a -> s { _stage_name = a } :: ApiGatewayMethodSettingsResource s)

apiGatewayMethodSettingsResource :: TF.Resource TF.AWS (ApiGatewayMethodSettingsResource s)
apiGatewayMethodSettingsResource =
    TF.newResource "aws_api_gateway_method_settings" $
        ApiGatewayMethodSettingsResource {
              _method_path = TF.Nil
            , _rest_api_id = TF.Nil
            , _settings = TF.Nil
            , _stage_name = TF.Nil
            }

{- | The @aws_api_gateway_model@ AWS resource.

Provides a Model for a API Gateway.
-}
data ApiGatewayModelResource s = ApiGatewayModelResource {
      _content_type :: !(TF.Attribute s Text)
    {- ^ (Required) The content type of the model -}
    , _description :: !(TF.Attribute s Text)
    {- ^ (Optional) The description of the model -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the model -}
    , _rest_api_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the associated REST API -}
    , _schema :: !(TF.Attribute s Text)
    {- ^ (Required) The schema of the model in a JSON form -}
    } deriving (Show, Eq)

instance TF.ToHCL (ApiGatewayModelResource s) where
    toHCL ApiGatewayModelResource{..} = TF.block $ catMaybes
        [ TF.assign "content_type" <$> TF.attribute _content_type
        , TF.assign "description" <$> TF.attribute _description
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "rest_api_id" <$> TF.attribute _rest_api_id
        , TF.assign "schema" <$> TF.attribute _schema
        ]

instance HasContentType (ApiGatewayModelResource s) Text where
    type HasContentTypeThread (ApiGatewayModelResource s) Text = s

    contentType =
        lens (_content_type :: ApiGatewayModelResource s -> TF.Attribute s Text)
            (\s a -> s { _content_type = a } :: ApiGatewayModelResource s)

instance HasDescription (ApiGatewayModelResource s) Text where
    type HasDescriptionThread (ApiGatewayModelResource s) Text = s

    description =
        lens (_description :: ApiGatewayModelResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: ApiGatewayModelResource s)

instance HasName (ApiGatewayModelResource s) Text where
    type HasNameThread (ApiGatewayModelResource s) Text = s

    name =
        lens (_name :: ApiGatewayModelResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: ApiGatewayModelResource s)

instance HasRestApiId (ApiGatewayModelResource s) Text where
    type HasRestApiIdThread (ApiGatewayModelResource s) Text = s

    restApiId =
        lens (_rest_api_id :: ApiGatewayModelResource s -> TF.Attribute s Text)
            (\s a -> s { _rest_api_id = a } :: ApiGatewayModelResource s)

instance HasSchema (ApiGatewayModelResource s) Text where
    type HasSchemaThread (ApiGatewayModelResource s) Text = s

    schema =
        lens (_schema :: ApiGatewayModelResource s -> TF.Attribute s Text)
            (\s a -> s { _schema = a } :: ApiGatewayModelResource s)

instance HasComputedId (ApiGatewayModelResource s) Text

apiGatewayModelResource :: TF.Resource TF.AWS (ApiGatewayModelResource s)
apiGatewayModelResource =
    TF.newResource "aws_api_gateway_model" $
        ApiGatewayModelResource {
              _content_type = TF.Nil
            , _description = TF.Nil
            , _name = TF.Nil
            , _rest_api_id = TF.Nil
            , _schema = TF.Nil
            }

{- | The @aws_api_gateway_resource@ AWS resource.

Provides an API Gateway Resource.
-}
data ApiGatewayResourceResource s = ApiGatewayResourceResource {
      _parent_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the parent API resource -}
    , _path_part :: !(TF.Attribute s Text)
    {- ^ (Required) The last path segment of this API resource. -}
    , _rest_api_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the associated REST API -}
    } deriving (Show, Eq)

instance TF.ToHCL (ApiGatewayResourceResource s) where
    toHCL ApiGatewayResourceResource{..} = TF.block $ catMaybes
        [ TF.assign "parent_id" <$> TF.attribute _parent_id
        , TF.assign "path_part" <$> TF.attribute _path_part
        , TF.assign "rest_api_id" <$> TF.attribute _rest_api_id
        ]

instance HasParentId (ApiGatewayResourceResource s) Text where
    type HasParentIdThread (ApiGatewayResourceResource s) Text = s

    parentId =
        lens (_parent_id :: ApiGatewayResourceResource s -> TF.Attribute s Text)
            (\s a -> s { _parent_id = a } :: ApiGatewayResourceResource s)

instance HasPathPart (ApiGatewayResourceResource s) Text where
    type HasPathPartThread (ApiGatewayResourceResource s) Text = s

    pathPart =
        lens (_path_part :: ApiGatewayResourceResource s -> TF.Attribute s Text)
            (\s a -> s { _path_part = a } :: ApiGatewayResourceResource s)

instance HasRestApiId (ApiGatewayResourceResource s) Text where
    type HasRestApiIdThread (ApiGatewayResourceResource s) Text = s

    restApiId =
        lens (_rest_api_id :: ApiGatewayResourceResource s -> TF.Attribute s Text)
            (\s a -> s { _rest_api_id = a } :: ApiGatewayResourceResource s)

instance HasComputedId (ApiGatewayResourceResource s) Text

instance HasComputedPath (ApiGatewayResourceResource s) Text

apiGatewayResourceResource :: TF.Resource TF.AWS (ApiGatewayResourceResource s)
apiGatewayResourceResource =
    TF.newResource "aws_api_gateway_resource" $
        ApiGatewayResourceResource {
              _parent_id = TF.Nil
            , _path_part = TF.Nil
            , _rest_api_id = TF.Nil
            }

{- | The @aws_api_gateway_rest_api@ AWS resource.

Provides an API Gateway REST API.
-}
data ApiGatewayRestApiResource s = ApiGatewayRestApiResource {
      _binary_media_types :: !(TF.Attribute s Text)
    {- ^ (Optional) The list of binary media types supported by the RestApi. By default, the RestApi supports only UTF-8-encoded text payloads. -}
    , _body :: !(TF.Attribute s Text)
    {- ^ (Optional) An OpenAPI specification that defines the set of routes and integrations to create as part of the REST API. -}
    , _description :: !(TF.Attribute s Text)
    {- ^ (Optional) The description of the REST API -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the REST API -}
    } deriving (Show, Eq)

instance TF.ToHCL (ApiGatewayRestApiResource s) where
    toHCL ApiGatewayRestApiResource{..} = TF.block $ catMaybes
        [ TF.assign "binary_media_types" <$> TF.attribute _binary_media_types
        , TF.assign "body" <$> TF.attribute _body
        , TF.assign "description" <$> TF.attribute _description
        , TF.assign "name" <$> TF.attribute _name
        ]

instance HasBinaryMediaTypes (ApiGatewayRestApiResource s) Text where
    type HasBinaryMediaTypesThread (ApiGatewayRestApiResource s) Text = s

    binaryMediaTypes =
        lens (_binary_media_types :: ApiGatewayRestApiResource s -> TF.Attribute s Text)
            (\s a -> s { _binary_media_types = a } :: ApiGatewayRestApiResource s)

instance HasBody (ApiGatewayRestApiResource s) Text where
    type HasBodyThread (ApiGatewayRestApiResource s) Text = s

    body =
        lens (_body :: ApiGatewayRestApiResource s -> TF.Attribute s Text)
            (\s a -> s { _body = a } :: ApiGatewayRestApiResource s)

instance HasDescription (ApiGatewayRestApiResource s) Text where
    type HasDescriptionThread (ApiGatewayRestApiResource s) Text = s

    description =
        lens (_description :: ApiGatewayRestApiResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: ApiGatewayRestApiResource s)

instance HasName (ApiGatewayRestApiResource s) Text where
    type HasNameThread (ApiGatewayRestApiResource s) Text = s

    name =
        lens (_name :: ApiGatewayRestApiResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: ApiGatewayRestApiResource s)

instance HasComputedCreatedDate (ApiGatewayRestApiResource s) Text

instance HasComputedId (ApiGatewayRestApiResource s) Text

instance HasComputedRootResourceId (ApiGatewayRestApiResource s) Text

apiGatewayRestApiResource :: TF.Resource TF.AWS (ApiGatewayRestApiResource s)
apiGatewayRestApiResource =
    TF.newResource "aws_api_gateway_rest_api" $
        ApiGatewayRestApiResource {
              _binary_media_types = TF.Nil
            , _body = TF.Nil
            , _description = TF.Nil
            , _name = TF.Nil
            }

{- | The @aws_api_gateway_stage@ AWS resource.

Provides an API Gateway Stage.
-}
data ApiGatewayStageResource s = ApiGatewayStageResource {
      _cache_cluster_enabled :: !(TF.Attribute s TF.Bool)
    {- ^ (Optional) Specifies whether a cache cluster is enabled for the stage -}
    , _cache_cluster_size :: !(TF.Attribute s Text)
    {- ^ (Optional) The size of the cache cluster for the stage, if enabled. Allowed values include @0.5@ , @1.6@ , @6.1@ , @13.5@ , @28.4@ , @58.2@ , @118@ and @237@ . -}
    , _client_certificate_id :: !(TF.Attribute s Text)
    {- ^ (Optional) The identifier of a client certificate for the stage. -}
    , _deployment_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the deployment that the stage points to -}
    , _description :: !(TF.Attribute s Text)
    {- ^ (Optional) The description of the stage -}
    , _documentation_version :: !(TF.Attribute s Text)
    {- ^ (Optional) The version of the associated API documentation -}
    , _rest_api_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the associated REST API -}
    , _stage_name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the stage -}
    , _variables :: !(TF.Attribute s Text)
    {- ^ (Optional) A map that defines the stage variables -}
    } deriving (Show, Eq)

instance TF.ToHCL (ApiGatewayStageResource s) where
    toHCL ApiGatewayStageResource{..} = TF.block $ catMaybes
        [ TF.assign "cache_cluster_enabled" <$> TF.attribute _cache_cluster_enabled
        , TF.assign "cache_cluster_size" <$> TF.attribute _cache_cluster_size
        , TF.assign "client_certificate_id" <$> TF.attribute _client_certificate_id
        , TF.assign "deployment_id" <$> TF.attribute _deployment_id
        , TF.assign "description" <$> TF.attribute _description
        , TF.assign "documentation_version" <$> TF.attribute _documentation_version
        , TF.assign "rest_api_id" <$> TF.attribute _rest_api_id
        , TF.assign "stage_name" <$> TF.attribute _stage_name
        , TF.assign "variables" <$> TF.attribute _variables
        ]

instance HasCacheClusterEnabled (ApiGatewayStageResource s) TF.Bool where
    type HasCacheClusterEnabledThread (ApiGatewayStageResource s) TF.Bool = s

    cacheClusterEnabled =
        lens (_cache_cluster_enabled :: ApiGatewayStageResource s -> TF.Attribute s TF.Bool)
            (\s a -> s { _cache_cluster_enabled = a } :: ApiGatewayStageResource s)

instance HasCacheClusterSize (ApiGatewayStageResource s) Text where
    type HasCacheClusterSizeThread (ApiGatewayStageResource s) Text = s

    cacheClusterSize =
        lens (_cache_cluster_size :: ApiGatewayStageResource s -> TF.Attribute s Text)
            (\s a -> s { _cache_cluster_size = a } :: ApiGatewayStageResource s)

instance HasClientCertificateId (ApiGatewayStageResource s) Text where
    type HasClientCertificateIdThread (ApiGatewayStageResource s) Text = s

    clientCertificateId =
        lens (_client_certificate_id :: ApiGatewayStageResource s -> TF.Attribute s Text)
            (\s a -> s { _client_certificate_id = a } :: ApiGatewayStageResource s)

instance HasDeploymentId (ApiGatewayStageResource s) Text where
    type HasDeploymentIdThread (ApiGatewayStageResource s) Text = s

    deploymentId =
        lens (_deployment_id :: ApiGatewayStageResource s -> TF.Attribute s Text)
            (\s a -> s { _deployment_id = a } :: ApiGatewayStageResource s)

instance HasDescription (ApiGatewayStageResource s) Text where
    type HasDescriptionThread (ApiGatewayStageResource s) Text = s

    description =
        lens (_description :: ApiGatewayStageResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: ApiGatewayStageResource s)

instance HasDocumentationVersion (ApiGatewayStageResource s) Text where
    type HasDocumentationVersionThread (ApiGatewayStageResource s) Text = s

    documentationVersion =
        lens (_documentation_version :: ApiGatewayStageResource s -> TF.Attribute s Text)
            (\s a -> s { _documentation_version = a } :: ApiGatewayStageResource s)

instance HasRestApiId (ApiGatewayStageResource s) Text where
    type HasRestApiIdThread (ApiGatewayStageResource s) Text = s

    restApiId =
        lens (_rest_api_id :: ApiGatewayStageResource s -> TF.Attribute s Text)
            (\s a -> s { _rest_api_id = a } :: ApiGatewayStageResource s)

instance HasStageName (ApiGatewayStageResource s) Text where
    type HasStageNameThread (ApiGatewayStageResource s) Text = s

    stageName =
        lens (_stage_name :: ApiGatewayStageResource s -> TF.Attribute s Text)
            (\s a -> s { _stage_name = a } :: ApiGatewayStageResource s)

instance HasVariables (ApiGatewayStageResource s) Text where
    type HasVariablesThread (ApiGatewayStageResource s) Text = s

    variables =
        lens (_variables :: ApiGatewayStageResource s -> TF.Attribute s Text)
            (\s a -> s { _variables = a } :: ApiGatewayStageResource s)

apiGatewayStageResource :: TF.Resource TF.AWS (ApiGatewayStageResource s)
apiGatewayStageResource =
    TF.newResource "aws_api_gateway_stage" $
        ApiGatewayStageResource {
              _cache_cluster_enabled = TF.Nil
            , _cache_cluster_size = TF.Nil
            , _client_certificate_id = TF.Nil
            , _deployment_id = TF.Nil
            , _description = TF.Nil
            , _documentation_version = TF.Nil
            , _rest_api_id = TF.Nil
            , _stage_name = TF.Nil
            , _variables = TF.Nil
            }

{- | The @aws_api_gateway_usage_plan_key@ AWS resource.

Provides an API Gateway Usage Plan Key.
-}
data ApiGatewayUsagePlanKeyResource s = ApiGatewayUsagePlanKeyResource {
      _key_id :: !(TF.Attribute s Text)
    {- ^ (Required) The identifier of the API key resource. -}
    , _key_type :: !(TF.Attribute s Text)
    {- ^ (Required) The type of the API key resource. Currently, the valid key type is API_KEY. -}
    , _usage_plan_id :: !(TF.Attribute s Text)
    {- ^ (Required) The Id of the usage plan resource representing to associate the key to. -}
    } deriving (Show, Eq)

instance TF.ToHCL (ApiGatewayUsagePlanKeyResource s) where
    toHCL ApiGatewayUsagePlanKeyResource{..} = TF.block $ catMaybes
        [ TF.assign "key_id" <$> TF.attribute _key_id
        , TF.assign "key_type" <$> TF.attribute _key_type
        , TF.assign "usage_plan_id" <$> TF.attribute _usage_plan_id
        ]

instance HasKeyId (ApiGatewayUsagePlanKeyResource s) Text where
    type HasKeyIdThread (ApiGatewayUsagePlanKeyResource s) Text = s

    keyId =
        lens (_key_id :: ApiGatewayUsagePlanKeyResource s -> TF.Attribute s Text)
            (\s a -> s { _key_id = a } :: ApiGatewayUsagePlanKeyResource s)

instance HasKeyType (ApiGatewayUsagePlanKeyResource s) Text where
    type HasKeyTypeThread (ApiGatewayUsagePlanKeyResource s) Text = s

    keyType =
        lens (_key_type :: ApiGatewayUsagePlanKeyResource s -> TF.Attribute s Text)
            (\s a -> s { _key_type = a } :: ApiGatewayUsagePlanKeyResource s)

instance HasUsagePlanId (ApiGatewayUsagePlanKeyResource s) Text where
    type HasUsagePlanIdThread (ApiGatewayUsagePlanKeyResource s) Text = s

    usagePlanId =
        lens (_usage_plan_id :: ApiGatewayUsagePlanKeyResource s -> TF.Attribute s Text)
            (\s a -> s { _usage_plan_id = a } :: ApiGatewayUsagePlanKeyResource s)

instance HasComputedId (ApiGatewayUsagePlanKeyResource s) Text

instance HasComputedKeyId (ApiGatewayUsagePlanKeyResource s) Text

instance HasComputedKeyType (ApiGatewayUsagePlanKeyResource s) Text

instance HasComputedName (ApiGatewayUsagePlanKeyResource s) Text

instance HasComputedUsagePlanId (ApiGatewayUsagePlanKeyResource s) Text

instance HasComputedValue (ApiGatewayUsagePlanKeyResource s) Text

apiGatewayUsagePlanKeyResource :: TF.Resource TF.AWS (ApiGatewayUsagePlanKeyResource s)
apiGatewayUsagePlanKeyResource =
    TF.newResource "aws_api_gateway_usage_plan_key" $
        ApiGatewayUsagePlanKeyResource {
              _key_id = TF.Nil
            , _key_type = TF.Nil
            , _usage_plan_id = TF.Nil
            }

{- | The @aws_api_gateway_usage_plan@ AWS resource.

Provides an API Gateway Usage Plan.
-}
data ApiGatewayUsagePlanResource s = ApiGatewayUsagePlanResource {
      _api_stages :: !(TF.Attribute s Text)
    {- ^ (Optional) The associated <#api-stages-arguments> of the usage plan. -}
    , _description :: !(TF.Attribute s Text)
    {- ^ (Required) The description of a usage plan. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the usage plan. -}
    , _product_code :: !(TF.Attribute s Text)
    {- ^ (Optional) The AWS Markeplace product identifier to associate with the usage plan as a SaaS product on AWS Marketplace. -}
    , _quota_settings :: !(TF.Attribute s Text)
    {- ^ (Optional) The <#quota-settings-arguments> of the usage plan. -}
    , _throttle_settings :: !(TF.Attribute s Text)
    {- ^ (Optional) The <#throttling-settings-arguments> of the usage plan. -}
    } deriving (Show, Eq)

instance TF.ToHCL (ApiGatewayUsagePlanResource s) where
    toHCL ApiGatewayUsagePlanResource{..} = TF.block $ catMaybes
        [ TF.assign "api_stages" <$> TF.attribute _api_stages
        , TF.assign "description" <$> TF.attribute _description
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "product_code" <$> TF.attribute _product_code
        , TF.assign "quota_settings" <$> TF.attribute _quota_settings
        , TF.assign "throttle_settings" <$> TF.attribute _throttle_settings
        ]

instance HasApiStages (ApiGatewayUsagePlanResource s) Text where
    type HasApiStagesThread (ApiGatewayUsagePlanResource s) Text = s

    apiStages =
        lens (_api_stages :: ApiGatewayUsagePlanResource s -> TF.Attribute s Text)
            (\s a -> s { _api_stages = a } :: ApiGatewayUsagePlanResource s)

instance HasDescription (ApiGatewayUsagePlanResource s) Text where
    type HasDescriptionThread (ApiGatewayUsagePlanResource s) Text = s

    description =
        lens (_description :: ApiGatewayUsagePlanResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: ApiGatewayUsagePlanResource s)

instance HasName (ApiGatewayUsagePlanResource s) Text where
    type HasNameThread (ApiGatewayUsagePlanResource s) Text = s

    name =
        lens (_name :: ApiGatewayUsagePlanResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: ApiGatewayUsagePlanResource s)

instance HasProductCode (ApiGatewayUsagePlanResource s) Text where
    type HasProductCodeThread (ApiGatewayUsagePlanResource s) Text = s

    productCode =
        lens (_product_code :: ApiGatewayUsagePlanResource s -> TF.Attribute s Text)
            (\s a -> s { _product_code = a } :: ApiGatewayUsagePlanResource s)

instance HasQuotaSettings (ApiGatewayUsagePlanResource s) Text where
    type HasQuotaSettingsThread (ApiGatewayUsagePlanResource s) Text = s

    quotaSettings =
        lens (_quota_settings :: ApiGatewayUsagePlanResource s -> TF.Attribute s Text)
            (\s a -> s { _quota_settings = a } :: ApiGatewayUsagePlanResource s)

instance HasThrottleSettings (ApiGatewayUsagePlanResource s) Text where
    type HasThrottleSettingsThread (ApiGatewayUsagePlanResource s) Text = s

    throttleSettings =
        lens (_throttle_settings :: ApiGatewayUsagePlanResource s -> TF.Attribute s Text)
            (\s a -> s { _throttle_settings = a } :: ApiGatewayUsagePlanResource s)

apiGatewayUsagePlanResource :: TF.Resource TF.AWS (ApiGatewayUsagePlanResource s)
apiGatewayUsagePlanResource =
    TF.newResource "aws_api_gateway_usage_plan" $
        ApiGatewayUsagePlanResource {
              _api_stages = TF.Nil
            , _description = TF.Nil
            , _name = TF.Nil
            , _product_code = TF.Nil
            , _quota_settings = TF.Nil
            , _throttle_settings = TF.Nil
            }

{- | The @aws_app_cookie_stickiness_policy@ AWS resource.

Provides an application cookie stickiness policy, which allows an ELB to wed
its sticky cookie's expiration to a cookie generated by your application.
-}
data AppCookieStickinessPolicyResource s = AppCookieStickinessPolicyResource {
      _cookie_name :: !(TF.Attribute s Text)
    {- ^ (Required) The application cookie whose lifetime the ELB's cookie should follow. -}
    , _lb_port :: !(TF.Attribute s TF.Word16)
    {- ^ (Required) The load balancer port to which the policy should be applied. This must be an active listener on the load balancer. -}
    , _load_balancer :: !(TF.Attribute s Text)
    {- ^ (Required) The name of load balancer to which the policy should be attached. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the stickiness policy. -}
    } deriving (Show, Eq)

instance TF.ToHCL (AppCookieStickinessPolicyResource s) where
    toHCL AppCookieStickinessPolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "cookie_name" <$> TF.attribute _cookie_name
        , TF.assign "lb_port" <$> TF.attribute _lb_port
        , TF.assign "load_balancer" <$> TF.attribute _load_balancer
        , TF.assign "name" <$> TF.attribute _name
        ]

instance HasCookieName (AppCookieStickinessPolicyResource s) Text where
    type HasCookieNameThread (AppCookieStickinessPolicyResource s) Text = s

    cookieName =
        lens (_cookie_name :: AppCookieStickinessPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _cookie_name = a } :: AppCookieStickinessPolicyResource s)

instance HasLbPort (AppCookieStickinessPolicyResource s) TF.Word16 where
    type HasLbPortThread (AppCookieStickinessPolicyResource s) TF.Word16 = s

    lbPort =
        lens (_lb_port :: AppCookieStickinessPolicyResource s -> TF.Attribute s TF.Word16)
            (\s a -> s { _lb_port = a } :: AppCookieStickinessPolicyResource s)

instance HasLoadBalancer (AppCookieStickinessPolicyResource s) Text where
    type HasLoadBalancerThread (AppCookieStickinessPolicyResource s) Text = s

    loadBalancer =
        lens (_load_balancer :: AppCookieStickinessPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _load_balancer = a } :: AppCookieStickinessPolicyResource s)

instance HasName (AppCookieStickinessPolicyResource s) Text where
    type HasNameThread (AppCookieStickinessPolicyResource s) Text = s

    name =
        lens (_name :: AppCookieStickinessPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: AppCookieStickinessPolicyResource s)

instance HasComputedCookieName (AppCookieStickinessPolicyResource s) Text

instance HasComputedId (AppCookieStickinessPolicyResource s) Text

instance HasComputedLbPort (AppCookieStickinessPolicyResource s) TF.Word16

instance HasComputedLoadBalancer (AppCookieStickinessPolicyResource s) Text

instance HasComputedName (AppCookieStickinessPolicyResource s) Text

appCookieStickinessPolicyResource :: TF.Resource TF.AWS (AppCookieStickinessPolicyResource s)
appCookieStickinessPolicyResource =
    TF.newResource "aws_app_cookie_stickiness_policy" $
        AppCookieStickinessPolicyResource {
              _cookie_name = TF.Nil
            , _lb_port = TF.Nil
            , _load_balancer = TF.Nil
            , _name = TF.Nil
            }

{- | The @aws_appautoscaling_policy@ AWS resource.

Provides an Application AutoScaling Policy resource.
-}
data AppautoscalingPolicyResource s = AppautoscalingPolicyResource {
      _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the policy. -}
    , _policy_type :: !(TF.Attribute s Text)
    {- ^ (Optional) For DynamoDB, only @TargetTrackingScaling@ is supported. For any other service, only @StepScaling@ is supported. Defaults to @StepScaling@ . -}
    , _resource_id :: !(TF.Attribute s Text)
    {- ^ (Required) The resource type and unique identifier string for the resource associated with the scaling policy. Documentation can be found in the @ResourceId@ parameter at: <http://docs.aws.amazon.com/ApplicationAutoScaling/latest/APIReference/API_RegisterScalableTarget.html#API_RegisterScalableTarget_RequestParameters> -}
    , _scalable_dimension :: !(TF.Attribute s Text)
    {- ^ (Required) The scalable dimension of the scalable target. Documentation can be found in the @ScalableDimension@ parameter at: <http://docs.aws.amazon.com/ApplicationAutoScaling/latest/APIReference/API_RegisterScalableTarget.html#API_RegisterScalableTarget_RequestParameters> -}
    , _service_namespace :: !(TF.Attribute s Text)
    {- ^ (Required) The AWS service namespace of the scalable target. Documentation can be found in the @ServiceNamespace@ parameter at: <http://docs.aws.amazon.com/ApplicationAutoScaling/latest/APIReference/API_RegisterScalableTarget.html#API_RegisterScalableTarget_RequestParameters> -}
    , _step_scaling_policy_configuration :: !(TF.Attribute s Text)
    {- ^ (Optional) Step scaling policy configuration, requires @policy_type = "StepScaling"@ (default). See supported fields below. -}
    , _target_tracking_scaling_policy_configuration :: !(TF.Attribute s Text)
    {- ^ (Optional) A target tracking policy, requires @policy_type = "TargetTrackingScaling"@ . See supported fields below. -}
    } deriving (Show, Eq)

instance TF.ToHCL (AppautoscalingPolicyResource s) where
    toHCL AppautoscalingPolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.attribute _name
        , TF.assign "policy_type" <$> TF.attribute _policy_type
        , TF.assign "resource_id" <$> TF.attribute _resource_id
        , TF.assign "scalable_dimension" <$> TF.attribute _scalable_dimension
        , TF.assign "service_namespace" <$> TF.attribute _service_namespace
        , TF.assign "step_scaling_policy_configuration" <$> TF.attribute _step_scaling_policy_configuration
        , TF.assign "target_tracking_scaling_policy_configuration" <$> TF.attribute _target_tracking_scaling_policy_configuration
        ]

instance HasName (AppautoscalingPolicyResource s) Text where
    type HasNameThread (AppautoscalingPolicyResource s) Text = s

    name =
        lens (_name :: AppautoscalingPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: AppautoscalingPolicyResource s)

instance HasPolicyType (AppautoscalingPolicyResource s) Text where
    type HasPolicyTypeThread (AppautoscalingPolicyResource s) Text = s

    policyType =
        lens (_policy_type :: AppautoscalingPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _policy_type = a } :: AppautoscalingPolicyResource s)

instance HasResourceId (AppautoscalingPolicyResource s) Text where
    type HasResourceIdThread (AppautoscalingPolicyResource s) Text = s

    resourceId =
        lens (_resource_id :: AppautoscalingPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _resource_id = a } :: AppautoscalingPolicyResource s)

instance HasScalableDimension (AppautoscalingPolicyResource s) Text where
    type HasScalableDimensionThread (AppautoscalingPolicyResource s) Text = s

    scalableDimension =
        lens (_scalable_dimension :: AppautoscalingPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _scalable_dimension = a } :: AppautoscalingPolicyResource s)

instance HasServiceNamespace (AppautoscalingPolicyResource s) Text where
    type HasServiceNamespaceThread (AppautoscalingPolicyResource s) Text = s

    serviceNamespace =
        lens (_service_namespace :: AppautoscalingPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _service_namespace = a } :: AppautoscalingPolicyResource s)

instance HasStepScalingPolicyConfiguration (AppautoscalingPolicyResource s) Text where
    type HasStepScalingPolicyConfigurationThread (AppautoscalingPolicyResource s) Text = s

    stepScalingPolicyConfiguration =
        lens (_step_scaling_policy_configuration :: AppautoscalingPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _step_scaling_policy_configuration = a } :: AppautoscalingPolicyResource s)

instance HasTargetTrackingScalingPolicyConfiguration (AppautoscalingPolicyResource s) Text where
    type HasTargetTrackingScalingPolicyConfigurationThread (AppautoscalingPolicyResource s) Text = s

    targetTrackingScalingPolicyConfiguration =
        lens (_target_tracking_scaling_policy_configuration :: AppautoscalingPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _target_tracking_scaling_policy_configuration = a } :: AppautoscalingPolicyResource s)

appautoscalingPolicyResource :: TF.Resource TF.AWS (AppautoscalingPolicyResource s)
appautoscalingPolicyResource =
    TF.newResource "aws_appautoscaling_policy" $
        AppautoscalingPolicyResource {
              _name = TF.Nil
            , _policy_type = TF.Nil
            , _resource_id = TF.Nil
            , _scalable_dimension = TF.Nil
            , _service_namespace = TF.Nil
            , _step_scaling_policy_configuration = TF.Nil
            , _target_tracking_scaling_policy_configuration = TF.Nil
            }

{- | The @aws_appautoscaling_scheduled_action@ AWS resource.

Provides an Application AutoScaling ScheduledAction resource.
-}
data AppautoscalingScheduledActionResource s = AppautoscalingScheduledActionResource {
      _end_time :: !(TF.Attribute s Text)
    {- ^ (Optional) The date and time for the scheduled action to end. Specify the following format: 2006-01-02T15:04:05Z -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the scheduled action. -}
    , _resource_id :: !(TF.Attribute s Text)
    {- ^ (Required) The identifier of the resource associated with the scheduled action. Documentation can be found in the parameter at: <https://docs.aws.amazon.com/ApplicationAutoScaling/latest/APIReference/API_PutScheduledAction.html#ApplicationAutoScaling-PutScheduledAction-request-ResourceId> -}
    , _scalable_dimension :: !(TF.Attribute s Text)
    {- ^ (Optional) The scalable dimension. Documentation can be found in the parameter at: <https://docs.aws.amazon.com/ApplicationAutoScaling/latest/APIReference/API_PutScheduledAction.html#ApplicationAutoScaling-PutScheduledAction-request-ScalableDimension> Example: ecs:service:DesiredCount -}
    , _scalable_target_action :: !(TF.Attribute s Text)
    {- ^ (Optional) The new minimum and maximum capacity. You can set both values or just one. See <#scalable-target-action-arguments> -}
    , _schedule :: !(TF.Attribute s Text)
    {- ^ (Optional) The schedule for this action. The following formats are supported: At expressions - at(yyyy-mm-ddThh:mm:ss), Rate expressions - rate(valueunit), Cron expressions - cron(fields). In UTC. Documentation can be found in the parameter at: <https://docs.aws.amazon.com/ApplicationAutoScaling/latest/APIReference/API_PutScheduledAction.html#ApplicationAutoScaling-PutScheduledAction-request-Schedule> -}
    , _service_namespace :: !(TF.Attribute s Text)
    {- ^ (Required) The namespace of the AWS service. Documentation can be found in the parameter at: <https://docs.aws.amazon.com/ApplicationAutoScaling/latest/APIReference/API_PutScheduledAction.html#ApplicationAutoScaling-PutScheduledAction-request-ServiceNamespace> Example: ecs -}
    , _start_time :: !(TF.Attribute s Text)
    {- ^ (Optional) The date and time for the scheduled action to start. Specify the following format: 2006-01-02T15:04:05Z -}
    } deriving (Show, Eq)

instance TF.ToHCL (AppautoscalingScheduledActionResource s) where
    toHCL AppautoscalingScheduledActionResource{..} = TF.block $ catMaybes
        [ TF.assign "end_time" <$> TF.attribute _end_time
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "resource_id" <$> TF.attribute _resource_id
        , TF.assign "scalable_dimension" <$> TF.attribute _scalable_dimension
        , TF.assign "scalable_target_action" <$> TF.attribute _scalable_target_action
        , TF.assign "schedule" <$> TF.attribute _schedule
        , TF.assign "service_namespace" <$> TF.attribute _service_namespace
        , TF.assign "start_time" <$> TF.attribute _start_time
        ]

instance HasEndTime (AppautoscalingScheduledActionResource s) Text where
    type HasEndTimeThread (AppautoscalingScheduledActionResource s) Text = s

    endTime =
        lens (_end_time :: AppautoscalingScheduledActionResource s -> TF.Attribute s Text)
            (\s a -> s { _end_time = a } :: AppautoscalingScheduledActionResource s)

instance HasName (AppautoscalingScheduledActionResource s) Text where
    type HasNameThread (AppautoscalingScheduledActionResource s) Text = s

    name =
        lens (_name :: AppautoscalingScheduledActionResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: AppautoscalingScheduledActionResource s)

instance HasResourceId (AppautoscalingScheduledActionResource s) Text where
    type HasResourceIdThread (AppautoscalingScheduledActionResource s) Text = s

    resourceId =
        lens (_resource_id :: AppautoscalingScheduledActionResource s -> TF.Attribute s Text)
            (\s a -> s { _resource_id = a } :: AppautoscalingScheduledActionResource s)

instance HasScalableDimension (AppautoscalingScheduledActionResource s) Text where
    type HasScalableDimensionThread (AppautoscalingScheduledActionResource s) Text = s

    scalableDimension =
        lens (_scalable_dimension :: AppautoscalingScheduledActionResource s -> TF.Attribute s Text)
            (\s a -> s { _scalable_dimension = a } :: AppautoscalingScheduledActionResource s)

instance HasScalableTargetAction (AppautoscalingScheduledActionResource s) Text where
    type HasScalableTargetActionThread (AppautoscalingScheduledActionResource s) Text = s

    scalableTargetAction =
        lens (_scalable_target_action :: AppautoscalingScheduledActionResource s -> TF.Attribute s Text)
            (\s a -> s { _scalable_target_action = a } :: AppautoscalingScheduledActionResource s)

instance HasSchedule (AppautoscalingScheduledActionResource s) Text where
    type HasScheduleThread (AppautoscalingScheduledActionResource s) Text = s

    schedule =
        lens (_schedule :: AppautoscalingScheduledActionResource s -> TF.Attribute s Text)
            (\s a -> s { _schedule = a } :: AppautoscalingScheduledActionResource s)

instance HasServiceNamespace (AppautoscalingScheduledActionResource s) Text where
    type HasServiceNamespaceThread (AppautoscalingScheduledActionResource s) Text = s

    serviceNamespace =
        lens (_service_namespace :: AppautoscalingScheduledActionResource s -> TF.Attribute s Text)
            (\s a -> s { _service_namespace = a } :: AppautoscalingScheduledActionResource s)

instance HasStartTime (AppautoscalingScheduledActionResource s) Text where
    type HasStartTimeThread (AppautoscalingScheduledActionResource s) Text = s

    startTime =
        lens (_start_time :: AppautoscalingScheduledActionResource s -> TF.Attribute s Text)
            (\s a -> s { _start_time = a } :: AppautoscalingScheduledActionResource s)

appautoscalingScheduledActionResource :: TF.Resource TF.AWS (AppautoscalingScheduledActionResource s)
appautoscalingScheduledActionResource =
    TF.newResource "aws_appautoscaling_scheduled_action" $
        AppautoscalingScheduledActionResource {
              _end_time = TF.Nil
            , _name = TF.Nil
            , _resource_id = TF.Nil
            , _scalable_dimension = TF.Nil
            , _scalable_target_action = TF.Nil
            , _schedule = TF.Nil
            , _service_namespace = TF.Nil
            , _start_time = TF.Nil
            }

{- | The @aws_appautoscaling_target@ AWS resource.

Provides an Application AutoScaling ScalableTarget resource.
-}
data AppautoscalingTargetResource s = AppautoscalingTargetResource {
      _max_capacity :: !(TF.Attribute s Text)
    {- ^ (Required) The max capacity of the scalable target. -}
    , _min_capacity :: !(TF.Attribute s Text)
    {- ^ (Required) The min capacity of the scalable target. -}
    , _resource_id :: !(TF.Attribute s Text)
    {- ^ (Required) The resource type and unique identifier string for the resource associated with the scaling policy. Documentation can be found in the @ResourceId@ parameter at: <http://docs.aws.amazon.com/ApplicationAutoScaling/latest/APIReference/API_RegisterScalableTarget.html#API_RegisterScalableTarget_RequestParameters> -}
    , _role_arn :: !(TF.Attribute s Text)
    {- ^ (Optional) The ARN of the IAM role that allows Application AutoScaling to modify your scalable target on your behalf. -}
    , _scalable_dimension :: !(TF.Attribute s Text)
    {- ^ (Required) The scalable dimension of the scalable target. Documentation can be found in the @ScalableDimension@ parameter at: <http://docs.aws.amazon.com/ApplicationAutoScaling/latest/APIReference/API_RegisterScalableTarget.html#API_RegisterScalableTarget_RequestParameters> -}
    , _service_namespace :: !(TF.Attribute s Text)
    {- ^ (Required) The AWS service namespace of the scalable target. Documentation can be found in the @ServiceNamespace@ parameter at: <http://docs.aws.amazon.com/ApplicationAutoScaling/latest/APIReference/API_RegisterScalableTarget.html#API_RegisterScalableTarget_RequestParameters> -}
    } deriving (Show, Eq)

instance TF.ToHCL (AppautoscalingTargetResource s) where
    toHCL AppautoscalingTargetResource{..} = TF.block $ catMaybes
        [ TF.assign "max_capacity" <$> TF.attribute _max_capacity
        , TF.assign "min_capacity" <$> TF.attribute _min_capacity
        , TF.assign "resource_id" <$> TF.attribute _resource_id
        , TF.assign "role_arn" <$> TF.attribute _role_arn
        , TF.assign "scalable_dimension" <$> TF.attribute _scalable_dimension
        , TF.assign "service_namespace" <$> TF.attribute _service_namespace
        ]

instance HasMaxCapacity (AppautoscalingTargetResource s) Text where
    type HasMaxCapacityThread (AppautoscalingTargetResource s) Text = s

    maxCapacity =
        lens (_max_capacity :: AppautoscalingTargetResource s -> TF.Attribute s Text)
            (\s a -> s { _max_capacity = a } :: AppautoscalingTargetResource s)

instance HasMinCapacity (AppautoscalingTargetResource s) Text where
    type HasMinCapacityThread (AppautoscalingTargetResource s) Text = s

    minCapacity =
        lens (_min_capacity :: AppautoscalingTargetResource s -> TF.Attribute s Text)
            (\s a -> s { _min_capacity = a } :: AppautoscalingTargetResource s)

instance HasResourceId (AppautoscalingTargetResource s) Text where
    type HasResourceIdThread (AppautoscalingTargetResource s) Text = s

    resourceId =
        lens (_resource_id :: AppautoscalingTargetResource s -> TF.Attribute s Text)
            (\s a -> s { _resource_id = a } :: AppautoscalingTargetResource s)

instance HasRoleArn (AppautoscalingTargetResource s) Text where
    type HasRoleArnThread (AppautoscalingTargetResource s) Text = s

    roleArn =
        lens (_role_arn :: AppautoscalingTargetResource s -> TF.Attribute s Text)
            (\s a -> s { _role_arn = a } :: AppautoscalingTargetResource s)

instance HasScalableDimension (AppautoscalingTargetResource s) Text where
    type HasScalableDimensionThread (AppautoscalingTargetResource s) Text = s

    scalableDimension =
        lens (_scalable_dimension :: AppautoscalingTargetResource s -> TF.Attribute s Text)
            (\s a -> s { _scalable_dimension = a } :: AppautoscalingTargetResource s)

instance HasServiceNamespace (AppautoscalingTargetResource s) Text where
    type HasServiceNamespaceThread (AppautoscalingTargetResource s) Text = s

    serviceNamespace =
        lens (_service_namespace :: AppautoscalingTargetResource s -> TF.Attribute s Text)
            (\s a -> s { _service_namespace = a } :: AppautoscalingTargetResource s)

appautoscalingTargetResource :: TF.Resource TF.AWS (AppautoscalingTargetResource s)
appautoscalingTargetResource =
    TF.newResource "aws_appautoscaling_target" $
        AppautoscalingTargetResource {
              _max_capacity = TF.Nil
            , _min_capacity = TF.Nil
            , _resource_id = TF.Nil
            , _role_arn = TF.Nil
            , _scalable_dimension = TF.Nil
            , _service_namespace = TF.Nil
            }

{- | The @aws_athena_database@ AWS resource.

Provides a SSM resource data sync.
-}
data AthenaDatabaseResource s = AthenaDatabaseResource {
      _name :: !(TF.Attribute s Text)
    {- ^ (Required) Name for the configuration. -}
    , _s3_destination :: !(TF.Attribute s Text)
    {- ^ (Required) Amazon S3 configuration details for the sync. -}
    } deriving (Show, Eq)

instance TF.ToHCL (AthenaDatabaseResource s) where
    toHCL AthenaDatabaseResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.attribute _name
        , TF.assign "s3_destination" <$> TF.attribute _s3_destination
        ]

instance HasName (AthenaDatabaseResource s) Text where
    type HasNameThread (AthenaDatabaseResource s) Text = s

    name =
        lens (_name :: AthenaDatabaseResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: AthenaDatabaseResource s)

instance HasS3Destination (AthenaDatabaseResource s) Text where
    type HasS3DestinationThread (AthenaDatabaseResource s) Text = s

    s3Destination =
        lens (_s3_destination :: AthenaDatabaseResource s -> TF.Attribute s Text)
            (\s a -> s { _s3_destination = a } :: AthenaDatabaseResource s)

athenaDatabaseResource :: TF.Resource TF.AWS (AthenaDatabaseResource s)
athenaDatabaseResource =
    TF.newResource "aws_athena_database" $
        AthenaDatabaseResource {
              _name = TF.Nil
            , _s3_destination = TF.Nil
            }

{- | The @aws_athena_named_query@ AWS resource.

Provides an Athena Named Query resource.
-}
data AthenaNamedQueryResource s = AthenaNamedQueryResource {
      _database :: !(TF.Attribute s Text)
    {- ^ (Required) The database to which the query belongs. -}
    , _description :: !(TF.Attribute s Text)
    {- ^ (Optional) A brief explanation of the query. Maximum length of 1024. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The plain language name for the query. Maximum length of 128. -}
    , _query :: !(TF.Attribute s Text)
    {- ^ (Required) The text of the query itself. In other words, all query statements. Maximum length of 262144. -}
    } deriving (Show, Eq)

instance TF.ToHCL (AthenaNamedQueryResource s) where
    toHCL AthenaNamedQueryResource{..} = TF.block $ catMaybes
        [ TF.assign "database" <$> TF.attribute _database
        , TF.assign "description" <$> TF.attribute _description
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "query" <$> TF.attribute _query
        ]

instance HasDatabase (AthenaNamedQueryResource s) Text where
    type HasDatabaseThread (AthenaNamedQueryResource s) Text = s

    database =
        lens (_database :: AthenaNamedQueryResource s -> TF.Attribute s Text)
            (\s a -> s { _database = a } :: AthenaNamedQueryResource s)

instance HasDescription (AthenaNamedQueryResource s) Text where
    type HasDescriptionThread (AthenaNamedQueryResource s) Text = s

    description =
        lens (_description :: AthenaNamedQueryResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: AthenaNamedQueryResource s)

instance HasName (AthenaNamedQueryResource s) Text where
    type HasNameThread (AthenaNamedQueryResource s) Text = s

    name =
        lens (_name :: AthenaNamedQueryResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: AthenaNamedQueryResource s)

instance HasQuery (AthenaNamedQueryResource s) Text where
    type HasQueryThread (AthenaNamedQueryResource s) Text = s

    query =
        lens (_query :: AthenaNamedQueryResource s -> TF.Attribute s Text)
            (\s a -> s { _query = a } :: AthenaNamedQueryResource s)

instance HasComputedId (AthenaNamedQueryResource s) Text

athenaNamedQueryResource :: TF.Resource TF.AWS (AthenaNamedQueryResource s)
athenaNamedQueryResource =
    TF.newResource "aws_athena_named_query" $
        AthenaNamedQueryResource {
              _database = TF.Nil
            , _description = TF.Nil
            , _name = TF.Nil
            , _query = TF.Nil
            }

{- | The @aws_autoscaling_attachment@ AWS resource.

Provides an AutoScaling Attachment resource. ~> NOTE on AutoScaling Groups
and ASG Attachments: Terraform currently provides both a standalone ASG
Attachment resource (describing an ASG attached to an ELB), and an
<autoscaling_group.html> with @load_balancers@ defined in-line. At this time
you cannot use an ASG with in-line load balancers in conjunction with an ASG
Attachment resource. Doing so will cause a conflict and will overwrite
attachments.
-}
data AutoscalingAttachmentResource s = AutoscalingAttachmentResource {
      _alb_target_group_arn :: !(TF.Attribute s Text)
    {- ^ (Optional) The ARN of an ALB Target Group. -}
    , _autoscaling_group_name :: !(TF.Attribute s Text)
    {- ^ (Required) Name of ASG to associate with the ELB. -}
    , _elb :: !(TF.Attribute s Text)
    {- ^ (Optional) The name of the ELB. -}
    } deriving (Show, Eq)

instance TF.ToHCL (AutoscalingAttachmentResource s) where
    toHCL AutoscalingAttachmentResource{..} = TF.block $ catMaybes
        [ TF.assign "alb_target_group_arn" <$> TF.attribute _alb_target_group_arn
        , TF.assign "autoscaling_group_name" <$> TF.attribute _autoscaling_group_name
        , TF.assign "elb" <$> TF.attribute _elb
        ]

instance HasAlbTargetGroupArn (AutoscalingAttachmentResource s) Text where
    type HasAlbTargetGroupArnThread (AutoscalingAttachmentResource s) Text = s

    albTargetGroupArn =
        lens (_alb_target_group_arn :: AutoscalingAttachmentResource s -> TF.Attribute s Text)
            (\s a -> s { _alb_target_group_arn = a } :: AutoscalingAttachmentResource s)

instance HasAutoscalingGroupName (AutoscalingAttachmentResource s) Text where
    type HasAutoscalingGroupNameThread (AutoscalingAttachmentResource s) Text = s

    autoscalingGroupName =
        lens (_autoscaling_group_name :: AutoscalingAttachmentResource s -> TF.Attribute s Text)
            (\s a -> s { _autoscaling_group_name = a } :: AutoscalingAttachmentResource s)

instance HasElb (AutoscalingAttachmentResource s) Text where
    type HasElbThread (AutoscalingAttachmentResource s) Text = s

    elb =
        lens (_elb :: AutoscalingAttachmentResource s -> TF.Attribute s Text)
            (\s a -> s { _elb = a } :: AutoscalingAttachmentResource s)

autoscalingAttachmentResource :: TF.Resource TF.AWS (AutoscalingAttachmentResource s)
autoscalingAttachmentResource =
    TF.newResource "aws_autoscaling_attachment" $
        AutoscalingAttachmentResource {
              _alb_target_group_arn = TF.Nil
            , _autoscaling_group_name = TF.Nil
            , _elb = TF.Nil
            }

{- | The @aws_autoscaling_group@ AWS resource.

Provides an AutoScaling Group resource.
-}
data AutoscalingGroupResource s = AutoscalingGroupResource {
      _availability_zones :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of AZs to launch resources in. Required only if you do not specify any @vpc_zone_identifier@ -}
    , _default_cooldown :: !(TF.Attribute s Text)
    {- ^ (Optional) The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. -}
    , _desired_capacity :: !(TF.Attribute s Text)
    {- ^ (Optional) The number of Amazon EC2 instances that should be running in the group. (See also <#waiting-for-capacity> below.) -}
    , _enabled_metrics :: !(TF.Attribute s TF.Bool)
    {- ^ (Optional) A list of metrics to collect. The allowed values are @GroupMinSize@ , @GroupMaxSize@ , @GroupDesiredCapacity@ , @GroupInServiceInstances@ , @GroupPendingInstances@ , @GroupStandbyInstances@ , @GroupTerminatingInstances@ , @GroupTotalInstances@ . -}
    , _force_delete :: !(TF.Attribute s Text)
    {- ^ (Optional) Allows deleting the autoscaling group without waiting for all instances in the pool to terminate.  You can force an autoscaling group to delete even if it's in the process of scaling a resource. Normally, Terraform drains all the instances before deleting the group.  This bypasses that behavior and potentially leaves resources dangling. -}
    , _health_check_grace_period :: !(TF.Attribute s Text)
    {- ^ (Optional, Default: 300) Time (in seconds) after instance comes into service before checking health. -}
    , _health_check_type :: !(TF.Attribute s Text)
    {- ^ (Optional) "EC2" or "ELB". Controls how health checking is done. -}
    , _initial_lifecycle_hook :: !(TF.Attribute s Text)
    {- ^ (Optional) One or more <http://docs.aws.amazon.com/autoscaling/latest/userguide/lifecycle-hooks.html> to attach to the autoscaling group before instances are launched. The syntax is exactly the same as the separate </docs/providers/aws/r/autoscaling_lifecycle_hooks.html> resource, without the @autoscaling_group_name@ attribute. Please note that this will only work when creating a new autoscaling group. For all other use-cases, please use @aws_autoscaling_lifecycle_hook@ resource. -}
    , _launch_configuration :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the launch configuration to use. -}
    , _load_balancers :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of elastic load balancer names to add to the autoscaling group names. -}
    , _max_size :: !(TF.Attribute s Text)
    {- ^ (Required) The maximum size of the auto scale group. -}
    , _metrics_granularity :: !(TF.Attribute s Text)
    {- ^ (Optional) The granularity to associate with the metrics to collect. The only valid value is @1Minute@ . Default is @1Minute@ . -}
    , _min_elb_capacity :: !(TF.Attribute s Text)
    {- ^ (Optional) Setting this causes Terraform to wait for this number of instances to show up healthy in the ELB only on creation. Updates will not wait on ELB instance number changes. (See also <#waiting-for-capacity> below.) -}
    , _min_size :: !(TF.Attribute s Text)
    {- ^ (Required) The minimum size of the auto scale group. (See also <#waiting-for-capacity> below.) -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Optional) The name of the auto scaling group. By default generated by Terraform. -}
    , _name_prefix :: !(TF.Attribute s Text)
    {- ^ (Optional) Creates a unique name beginning with the specified prefix. Conflicts with @name@ . -}
    , _placement_group :: !(TF.Attribute s Text)
    {- ^ (Optional) The name of the placement group into which you'll launch your instances, if any. -}
    , _protect_from_scale_in :: !(TF.Attribute s Text)
    {- ^ (Optional) Allows setting instance protection. The autoscaling group will not select instances with this setting for terminination during scale in events. -}
    , _suspended_processes :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of processes to suspend for the AutoScaling Group. The allowed values are @Launch@ , @Terminate@ , @HealthCheck@ , @ReplaceUnhealthy@ , @AZRebalance@ , @AlarmNotification@ , @ScheduledActions@ , @AddToLoadBalancer@ . Note that if you suspend either the @Launch@ or @Terminate@ process types, it can prevent your autoscaling group from functioning properly. -}
    , _tag :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of tag blocks. Tags documented below. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A list of tag blocks (maps). Tags documented below. -}
    , _target_group_arns :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of @aws_alb_target_group@ ARNs, for use with Application Load Balancing -}
    , _termination_policies :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of policies to decide how the instances in the auto scale group should be terminated. The allowed values are @OldestInstance@ , @NewestInstance@ , @OldestLaunchConfiguration@ , @ClosestToNextInstanceHour@ , @Default@ . -}
    , _vpc_zone_identifier :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of subnet IDs to launch resources in. -}
    , _wait_for_capacity_timeout :: !(TF.Attribute s Text)
    {- ^ (Default: "10m") A maximum <https://golang.org/pkg/time/#ParseDuration> that Terraform should wait for ASG instances to be healthy before timing out.  (See also <#waiting-for-capacity> below.) Setting this to "0" causes Terraform to skip all Capacity Waiting behavior. -}
    , _wait_for_elb_capacity :: !(TF.Attribute s Text)
    {- ^ (Optional) Setting this will cause Terraform to wait for exactly this number of healthy instances in all attached load balancers on both create and update operations. (Takes precedence over @min_elb_capacity@ behavior.) (See also <#waiting-for-capacity> below.) -}
    } deriving (Show, Eq)

instance TF.ToHCL (AutoscalingGroupResource s) where
    toHCL AutoscalingGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "availability_zones" <$> TF.attribute _availability_zones
        , TF.assign "default_cooldown" <$> TF.attribute _default_cooldown
        , TF.assign "desired_capacity" <$> TF.attribute _desired_capacity
        , TF.assign "enabled_metrics" <$> TF.attribute _enabled_metrics
        , TF.assign "force_delete" <$> TF.attribute _force_delete
        , TF.assign "health_check_grace_period" <$> TF.attribute _health_check_grace_period
        , TF.assign "health_check_type" <$> TF.attribute _health_check_type
        , TF.assign "initial_lifecycle_hook" <$> TF.attribute _initial_lifecycle_hook
        , TF.assign "launch_configuration" <$> TF.attribute _launch_configuration
        , TF.assign "load_balancers" <$> TF.attribute _load_balancers
        , TF.assign "max_size" <$> TF.attribute _max_size
        , TF.assign "metrics_granularity" <$> TF.attribute _metrics_granularity
        , TF.assign "min_elb_capacity" <$> TF.attribute _min_elb_capacity
        , TF.assign "min_size" <$> TF.attribute _min_size
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "name_prefix" <$> TF.attribute _name_prefix
        , TF.assign "placement_group" <$> TF.attribute _placement_group
        , TF.assign "protect_from_scale_in" <$> TF.attribute _protect_from_scale_in
        , TF.assign "suspended_processes" <$> TF.attribute _suspended_processes
        , TF.assign "tag" <$> TF.attribute _tag
        , TF.assign "tags" <$> TF.attribute _tags
        , TF.assign "target_group_arns" <$> TF.attribute _target_group_arns
        , TF.assign "termination_policies" <$> TF.attribute _termination_policies
        , TF.assign "vpc_zone_identifier" <$> TF.attribute _vpc_zone_identifier
        , TF.assign "wait_for_capacity_timeout" <$> TF.attribute _wait_for_capacity_timeout
        , TF.assign "wait_for_elb_capacity" <$> TF.attribute _wait_for_elb_capacity
        ]

instance HasAvailabilityZones (AutoscalingGroupResource s) Text where
    type HasAvailabilityZonesThread (AutoscalingGroupResource s) Text = s

    availabilityZones =
        lens (_availability_zones :: AutoscalingGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _availability_zones = a } :: AutoscalingGroupResource s)

instance HasDefaultCooldown (AutoscalingGroupResource s) Text where
    type HasDefaultCooldownThread (AutoscalingGroupResource s) Text = s

    defaultCooldown =
        lens (_default_cooldown :: AutoscalingGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _default_cooldown = a } :: AutoscalingGroupResource s)

instance HasDesiredCapacity (AutoscalingGroupResource s) Text where
    type HasDesiredCapacityThread (AutoscalingGroupResource s) Text = s

    desiredCapacity =
        lens (_desired_capacity :: AutoscalingGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _desired_capacity = a } :: AutoscalingGroupResource s)

instance HasEnabledMetrics (AutoscalingGroupResource s) TF.Bool where
    type HasEnabledMetricsThread (AutoscalingGroupResource s) TF.Bool = s

    enabledMetrics =
        lens (_enabled_metrics :: AutoscalingGroupResource s -> TF.Attribute s TF.Bool)
            (\s a -> s { _enabled_metrics = a } :: AutoscalingGroupResource s)

instance HasForceDelete (AutoscalingGroupResource s) Text where
    type HasForceDeleteThread (AutoscalingGroupResource s) Text = s

    forceDelete =
        lens (_force_delete :: AutoscalingGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _force_delete = a } :: AutoscalingGroupResource s)

instance HasHealthCheckGracePeriod (AutoscalingGroupResource s) Text where
    type HasHealthCheckGracePeriodThread (AutoscalingGroupResource s) Text = s

    healthCheckGracePeriod =
        lens (_health_check_grace_period :: AutoscalingGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _health_check_grace_period = a } :: AutoscalingGroupResource s)

instance HasHealthCheckType (AutoscalingGroupResource s) Text where
    type HasHealthCheckTypeThread (AutoscalingGroupResource s) Text = s

    healthCheckType =
        lens (_health_check_type :: AutoscalingGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _health_check_type = a } :: AutoscalingGroupResource s)

instance HasInitialLifecycleHook (AutoscalingGroupResource s) Text where
    type HasInitialLifecycleHookThread (AutoscalingGroupResource s) Text = s

    initialLifecycleHook =
        lens (_initial_lifecycle_hook :: AutoscalingGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _initial_lifecycle_hook = a } :: AutoscalingGroupResource s)

instance HasLaunchConfiguration (AutoscalingGroupResource s) Text where
    type HasLaunchConfigurationThread (AutoscalingGroupResource s) Text = s

    launchConfiguration =
        lens (_launch_configuration :: AutoscalingGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _launch_configuration = a } :: AutoscalingGroupResource s)

instance HasLoadBalancers (AutoscalingGroupResource s) Text where
    type HasLoadBalancersThread (AutoscalingGroupResource s) Text = s

    loadBalancers =
        lens (_load_balancers :: AutoscalingGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _load_balancers = a } :: AutoscalingGroupResource s)

instance HasMaxSize (AutoscalingGroupResource s) Text where
    type HasMaxSizeThread (AutoscalingGroupResource s) Text = s

    maxSize =
        lens (_max_size :: AutoscalingGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _max_size = a } :: AutoscalingGroupResource s)

instance HasMetricsGranularity (AutoscalingGroupResource s) Text where
    type HasMetricsGranularityThread (AutoscalingGroupResource s) Text = s

    metricsGranularity =
        lens (_metrics_granularity :: AutoscalingGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _metrics_granularity = a } :: AutoscalingGroupResource s)

instance HasMinElbCapacity (AutoscalingGroupResource s) Text where
    type HasMinElbCapacityThread (AutoscalingGroupResource s) Text = s

    minElbCapacity =
        lens (_min_elb_capacity :: AutoscalingGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _min_elb_capacity = a } :: AutoscalingGroupResource s)

instance HasMinSize (AutoscalingGroupResource s) Text where
    type HasMinSizeThread (AutoscalingGroupResource s) Text = s

    minSize =
        lens (_min_size :: AutoscalingGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _min_size = a } :: AutoscalingGroupResource s)

instance HasName (AutoscalingGroupResource s) Text where
    type HasNameThread (AutoscalingGroupResource s) Text = s

    name =
        lens (_name :: AutoscalingGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: AutoscalingGroupResource s)

instance HasNamePrefix (AutoscalingGroupResource s) Text where
    type HasNamePrefixThread (AutoscalingGroupResource s) Text = s

    namePrefix =
        lens (_name_prefix :: AutoscalingGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _name_prefix = a } :: AutoscalingGroupResource s)

instance HasPlacementGroup (AutoscalingGroupResource s) Text where
    type HasPlacementGroupThread (AutoscalingGroupResource s) Text = s

    placementGroup =
        lens (_placement_group :: AutoscalingGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _placement_group = a } :: AutoscalingGroupResource s)

instance HasProtectFromScaleIn (AutoscalingGroupResource s) Text where
    type HasProtectFromScaleInThread (AutoscalingGroupResource s) Text = s

    protectFromScaleIn =
        lens (_protect_from_scale_in :: AutoscalingGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _protect_from_scale_in = a } :: AutoscalingGroupResource s)

instance HasSuspendedProcesses (AutoscalingGroupResource s) Text where
    type HasSuspendedProcessesThread (AutoscalingGroupResource s) Text = s

    suspendedProcesses =
        lens (_suspended_processes :: AutoscalingGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _suspended_processes = a } :: AutoscalingGroupResource s)

instance HasTag (AutoscalingGroupResource s) Text where
    type HasTagThread (AutoscalingGroupResource s) Text = s

    tag =
        lens (_tag :: AutoscalingGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _tag = a } :: AutoscalingGroupResource s)

instance HasTags (AutoscalingGroupResource s) TF.Tags where
    type HasTagsThread (AutoscalingGroupResource s) TF.Tags = s

    tags =
        lens (_tags :: AutoscalingGroupResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: AutoscalingGroupResource s)

instance HasTargetGroupArns (AutoscalingGroupResource s) Text where
    type HasTargetGroupArnsThread (AutoscalingGroupResource s) Text = s

    targetGroupArns =
        lens (_target_group_arns :: AutoscalingGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _target_group_arns = a } :: AutoscalingGroupResource s)

instance HasTerminationPolicies (AutoscalingGroupResource s) Text where
    type HasTerminationPoliciesThread (AutoscalingGroupResource s) Text = s

    terminationPolicies =
        lens (_termination_policies :: AutoscalingGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _termination_policies = a } :: AutoscalingGroupResource s)

instance HasVpcZoneIdentifier (AutoscalingGroupResource s) Text where
    type HasVpcZoneIdentifierThread (AutoscalingGroupResource s) Text = s

    vpcZoneIdentifier =
        lens (_vpc_zone_identifier :: AutoscalingGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _vpc_zone_identifier = a } :: AutoscalingGroupResource s)

instance HasWaitForCapacityTimeout (AutoscalingGroupResource s) Text where
    type HasWaitForCapacityTimeoutThread (AutoscalingGroupResource s) Text = s

    waitForCapacityTimeout =
        lens (_wait_for_capacity_timeout :: AutoscalingGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _wait_for_capacity_timeout = a } :: AutoscalingGroupResource s)

instance HasWaitForElbCapacity (AutoscalingGroupResource s) Text where
    type HasWaitForElbCapacityThread (AutoscalingGroupResource s) Text = s

    waitForElbCapacity =
        lens (_wait_for_elb_capacity :: AutoscalingGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _wait_for_elb_capacity = a } :: AutoscalingGroupResource s)

instance HasComputedArn (AutoscalingGroupResource s) Text

instance HasComputedAvailabilityZones (AutoscalingGroupResource s) Text

instance HasComputedDefaultCooldown (AutoscalingGroupResource s) Text

instance HasComputedDesiredCapacity (AutoscalingGroupResource s) Text

instance HasComputedHealthCheckGracePeriod (AutoscalingGroupResource s) Text

instance HasComputedHealthCheckType (AutoscalingGroupResource s) Text

instance HasComputedId (AutoscalingGroupResource s) Text

instance HasComputedLaunchConfiguration (AutoscalingGroupResource s) Text

instance HasComputedLoadBalancers (AutoscalingGroupResource s) Text

instance HasComputedMaxSize (AutoscalingGroupResource s) Text

instance HasComputedMinSize (AutoscalingGroupResource s) Text

instance HasComputedName (AutoscalingGroupResource s) Text

instance HasComputedTargetGroupArns (AutoscalingGroupResource s) Text

instance HasComputedVpcZoneIdentifier (AutoscalingGroupResource s) Text

autoscalingGroupResource :: TF.Resource TF.AWS (AutoscalingGroupResource s)
autoscalingGroupResource =
    TF.newResource "aws_autoscaling_group" $
        AutoscalingGroupResource {
              _availability_zones = TF.Nil
            , _default_cooldown = TF.Nil
            , _desired_capacity = TF.Nil
            , _enabled_metrics = TF.Nil
            , _force_delete = TF.Nil
            , _health_check_grace_period = TF.Nil
            , _health_check_type = TF.Nil
            , _initial_lifecycle_hook = TF.Nil
            , _launch_configuration = TF.Nil
            , _load_balancers = TF.Nil
            , _max_size = TF.Nil
            , _metrics_granularity = TF.Nil
            , _min_elb_capacity = TF.Nil
            , _min_size = TF.Nil
            , _name = TF.Nil
            , _name_prefix = TF.Nil
            , _placement_group = TF.Nil
            , _protect_from_scale_in = TF.Nil
            , _suspended_processes = TF.Nil
            , _tag = TF.Nil
            , _tags = TF.Nil
            , _target_group_arns = TF.Nil
            , _termination_policies = TF.Nil
            , _vpc_zone_identifier = TF.Nil
            , _wait_for_capacity_timeout = TF.Nil
            , _wait_for_elb_capacity = TF.Nil
            }

{- | The @aws_autoscaling_lifecycle_hook@ AWS resource.

Provides an AutoScaling Lifecycle Hook resource. ~> NOTE: Terraform has two
types of ways you can add lifecycle hooks - via the @initial_lifecycle_hook@
attribute from the </docs/providers/aws/r/autoscaling_group.html> resource,
or via this one. Hooks added via this resource will not be added until the
autoscaling group has been created, and depending on your
</docs/providers/aws/r/autoscaling_group.html#waiting-for-capacity>
settings, after the initial instances have been launched, creating
unintended behavior. If you need hooks to run on all instances, add them
with @initial_lifecycle_hook@ in
</docs/providers/aws/r/autoscaling_group.html> , but take care to not
duplicate those hooks with this resource.
-}
data AutoscalingLifecycleHookResource s = AutoscalingLifecycleHookResource {
      _autoscaling_group_name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the Auto Scaling group to which you want to assign the lifecycle hook -}
    , _default_result :: !(TF.Attribute s Text)
    {- ^ (Optional) Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. The value for this parameter can be either CONTINUE or ABANDON. The default value for this parameter is ABANDON. -}
    , _heartbeat_timeout :: !(TF.Attribute s Text)
    {- ^ (Optional) Defines the amount of time, in seconds, that can elapse before the lifecycle hook times out. When the lifecycle hook times out, Auto Scaling performs the action defined in the DefaultResult parameter -}
    , _lifecycle_transition :: !(TF.Attribute s Text)
    {- ^ (Required) The instance state to which you want to attach the lifecycle hook. For a list of lifecycle hook types, see <https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-lifecycle-hook-types.html#examples> -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the lifecycle hook. -}
    , _notification_metadata :: !(TF.Attribute s Text)
    {- ^ (Optional) Contains additional information that you want to include any time Auto Scaling sends a message to the notification target. -}
    , _notification_target_arn :: !(TF.Attribute s Text)
    {- ^ (Optional) The ARN of the notification target that Auto Scaling will use to notify you when an instance is in the transition state for the lifecycle hook. This ARN target can be either an SQS queue or an SNS topic. -}
    , _role_arn :: !(TF.Attribute s Text)
    {- ^ (Optional) The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target. -}
    } deriving (Show, Eq)

instance TF.ToHCL (AutoscalingLifecycleHookResource s) where
    toHCL AutoscalingLifecycleHookResource{..} = TF.block $ catMaybes
        [ TF.assign "autoscaling_group_name" <$> TF.attribute _autoscaling_group_name
        , TF.assign "default_result" <$> TF.attribute _default_result
        , TF.assign "heartbeat_timeout" <$> TF.attribute _heartbeat_timeout
        , TF.assign "lifecycle_transition" <$> TF.attribute _lifecycle_transition
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "notification_metadata" <$> TF.attribute _notification_metadata
        , TF.assign "notification_target_arn" <$> TF.attribute _notification_target_arn
        , TF.assign "role_arn" <$> TF.attribute _role_arn
        ]

instance HasAutoscalingGroupName (AutoscalingLifecycleHookResource s) Text where
    type HasAutoscalingGroupNameThread (AutoscalingLifecycleHookResource s) Text = s

    autoscalingGroupName =
        lens (_autoscaling_group_name :: AutoscalingLifecycleHookResource s -> TF.Attribute s Text)
            (\s a -> s { _autoscaling_group_name = a } :: AutoscalingLifecycleHookResource s)

instance HasDefaultResult (AutoscalingLifecycleHookResource s) Text where
    type HasDefaultResultThread (AutoscalingLifecycleHookResource s) Text = s

    defaultResult =
        lens (_default_result :: AutoscalingLifecycleHookResource s -> TF.Attribute s Text)
            (\s a -> s { _default_result = a } :: AutoscalingLifecycleHookResource s)

instance HasHeartbeatTimeout (AutoscalingLifecycleHookResource s) Text where
    type HasHeartbeatTimeoutThread (AutoscalingLifecycleHookResource s) Text = s

    heartbeatTimeout =
        lens (_heartbeat_timeout :: AutoscalingLifecycleHookResource s -> TF.Attribute s Text)
            (\s a -> s { _heartbeat_timeout = a } :: AutoscalingLifecycleHookResource s)

instance HasLifecycleTransition (AutoscalingLifecycleHookResource s) Text where
    type HasLifecycleTransitionThread (AutoscalingLifecycleHookResource s) Text = s

    lifecycleTransition =
        lens (_lifecycle_transition :: AutoscalingLifecycleHookResource s -> TF.Attribute s Text)
            (\s a -> s { _lifecycle_transition = a } :: AutoscalingLifecycleHookResource s)

instance HasName (AutoscalingLifecycleHookResource s) Text where
    type HasNameThread (AutoscalingLifecycleHookResource s) Text = s

    name =
        lens (_name :: AutoscalingLifecycleHookResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: AutoscalingLifecycleHookResource s)

instance HasNotificationMetadata (AutoscalingLifecycleHookResource s) Text where
    type HasNotificationMetadataThread (AutoscalingLifecycleHookResource s) Text = s

    notificationMetadata =
        lens (_notification_metadata :: AutoscalingLifecycleHookResource s -> TF.Attribute s Text)
            (\s a -> s { _notification_metadata = a } :: AutoscalingLifecycleHookResource s)

instance HasNotificationTargetArn (AutoscalingLifecycleHookResource s) Text where
    type HasNotificationTargetArnThread (AutoscalingLifecycleHookResource s) Text = s

    notificationTargetArn =
        lens (_notification_target_arn :: AutoscalingLifecycleHookResource s -> TF.Attribute s Text)
            (\s a -> s { _notification_target_arn = a } :: AutoscalingLifecycleHookResource s)

instance HasRoleArn (AutoscalingLifecycleHookResource s) Text where
    type HasRoleArnThread (AutoscalingLifecycleHookResource s) Text = s

    roleArn =
        lens (_role_arn :: AutoscalingLifecycleHookResource s -> TF.Attribute s Text)
            (\s a -> s { _role_arn = a } :: AutoscalingLifecycleHookResource s)

autoscalingLifecycleHookResource :: TF.Resource TF.AWS (AutoscalingLifecycleHookResource s)
autoscalingLifecycleHookResource =
    TF.newResource "aws_autoscaling_lifecycle_hook" $
        AutoscalingLifecycleHookResource {
              _autoscaling_group_name = TF.Nil
            , _default_result = TF.Nil
            , _heartbeat_timeout = TF.Nil
            , _lifecycle_transition = TF.Nil
            , _name = TF.Nil
            , _notification_metadata = TF.Nil
            , _notification_target_arn = TF.Nil
            , _role_arn = TF.Nil
            }

{- | The @aws_autoscaling_notification@ AWS resource.

Provides an AutoScaling Group with Notification support, via SNS Topics.
Each of the @notifications@ map to a
<https://docs.aws.amazon.com/AutoScaling/latest/APIReference/API_DescribeNotificationConfigurations.html>
inside Amazon Web Services, and are applied to each AutoScaling Group you
supply.
-}
data AutoscalingNotificationResource s = AutoscalingNotificationResource {
      _group_names :: !(TF.Attribute s Text)
    {- ^ (Required) A list of AutoScaling Group Names -}
    , _notifications :: !(TF.Attribute s Text)
    {- ^ (Required) A list of Notification Types that trigger notifications. Acceptable values are documented <https://docs.aws.amazon.com/AutoScaling/latest/APIReference/API_NotificationConfiguration.html> -}
    , _topic_arn :: !(TF.Attribute s Text)
    {- ^ (Required) The Topic ARN for notifications to be sent through -}
    } deriving (Show, Eq)

instance TF.ToHCL (AutoscalingNotificationResource s) where
    toHCL AutoscalingNotificationResource{..} = TF.block $ catMaybes
        [ TF.assign "group_names" <$> TF.attribute _group_names
        , TF.assign "notifications" <$> TF.attribute _notifications
        , TF.assign "topic_arn" <$> TF.attribute _topic_arn
        ]

instance HasGroupNames (AutoscalingNotificationResource s) Text where
    type HasGroupNamesThread (AutoscalingNotificationResource s) Text = s

    groupNames =
        lens (_group_names :: AutoscalingNotificationResource s -> TF.Attribute s Text)
            (\s a -> s { _group_names = a } :: AutoscalingNotificationResource s)

instance HasNotifications (AutoscalingNotificationResource s) Text where
    type HasNotificationsThread (AutoscalingNotificationResource s) Text = s

    notifications =
        lens (_notifications :: AutoscalingNotificationResource s -> TF.Attribute s Text)
            (\s a -> s { _notifications = a } :: AutoscalingNotificationResource s)

instance HasTopicArn (AutoscalingNotificationResource s) Text where
    type HasTopicArnThread (AutoscalingNotificationResource s) Text = s

    topicArn =
        lens (_topic_arn :: AutoscalingNotificationResource s -> TF.Attribute s Text)
            (\s a -> s { _topic_arn = a } :: AutoscalingNotificationResource s)

autoscalingNotificationResource :: TF.Resource TF.AWS (AutoscalingNotificationResource s)
autoscalingNotificationResource =
    TF.newResource "aws_autoscaling_notification" $
        AutoscalingNotificationResource {
              _group_names = TF.Nil
            , _notifications = TF.Nil
            , _topic_arn = TF.Nil
            }

{- | The @aws_autoscaling_policy@ AWS resource.

Provides an AutoScaling Scaling Policy resource. ~> NOTE: You may want to
omit @desired_capacity@ attribute from attached @aws_autoscaling_group@ when
using autoscaling policies. It's good practice to pick either
<https://docs.aws.amazon.com/AutoScaling/latest/DeveloperGuide/as-manual-scaling.html>
or
<https://docs.aws.amazon.com/AutoScaling/latest/DeveloperGuide/as-scale-based-on-demand.html>
(policy-based) scaling.
-}
data AutoscalingPolicyResource s = AutoscalingPolicyResource {
      _adjustment_type :: !(TF.Attribute s Text)
    {- ^ (Required) Specifies whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are @ChangeInCapacity@ , @ExactCapacity@ , and @PercentChangeInCapacity@ . -}
    , _autoscaling_group_name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the autoscaling group. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the policy. -}
    , _policy_type :: !(TF.Attribute s Text)
    {- ^ (Optional) The policy type, either "SimpleScaling" or "StepScaling". If this value isn't provided, AWS will default to "SimpleScaling." -}
    } deriving (Show, Eq)

instance TF.ToHCL (AutoscalingPolicyResource s) where
    toHCL AutoscalingPolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "adjustment_type" <$> TF.attribute _adjustment_type
        , TF.assign "autoscaling_group_name" <$> TF.attribute _autoscaling_group_name
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "policy_type" <$> TF.attribute _policy_type
        ]

instance HasAdjustmentType (AutoscalingPolicyResource s) Text where
    type HasAdjustmentTypeThread (AutoscalingPolicyResource s) Text = s

    adjustmentType =
        lens (_adjustment_type :: AutoscalingPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _adjustment_type = a } :: AutoscalingPolicyResource s)

instance HasAutoscalingGroupName (AutoscalingPolicyResource s) Text where
    type HasAutoscalingGroupNameThread (AutoscalingPolicyResource s) Text = s

    autoscalingGroupName =
        lens (_autoscaling_group_name :: AutoscalingPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _autoscaling_group_name = a } :: AutoscalingPolicyResource s)

instance HasName (AutoscalingPolicyResource s) Text where
    type HasNameThread (AutoscalingPolicyResource s) Text = s

    name =
        lens (_name :: AutoscalingPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: AutoscalingPolicyResource s)

instance HasPolicyType (AutoscalingPolicyResource s) Text where
    type HasPolicyTypeThread (AutoscalingPolicyResource s) Text = s

    policyType =
        lens (_policy_type :: AutoscalingPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _policy_type = a } :: AutoscalingPolicyResource s)

instance HasComputedAdjustmentType (AutoscalingPolicyResource s) Text

instance HasComputedArn (AutoscalingPolicyResource s) Text

instance HasComputedAutoscalingGroupName (AutoscalingPolicyResource s) Text

instance HasComputedName (AutoscalingPolicyResource s) Text

instance HasComputedPolicyType (AutoscalingPolicyResource s) Text

autoscalingPolicyResource :: TF.Resource TF.AWS (AutoscalingPolicyResource s)
autoscalingPolicyResource =
    TF.newResource "aws_autoscaling_policy" $
        AutoscalingPolicyResource {
              _adjustment_type = TF.Nil
            , _autoscaling_group_name = TF.Nil
            , _name = TF.Nil
            , _policy_type = TF.Nil
            }

{- | The @aws_autoscaling_schedule@ AWS resource.

Provides an AutoScaling Schedule resource.
-}
data AutoscalingScheduleResource s = AutoscalingScheduleResource {
      _autoscaling_group_name :: !(TF.Attribute s Text)
    {- ^ (Required) The name or Amazon Resource Name (ARN) of the Auto Scaling group. -}
    , _desired_capacity :: !(TF.Attribute s Text)
    {- ^ (Optional) The number of EC2 instances that should be running in the group. Default 0.  Set to -1 if you don't want to change the desired capacity at the scheduled time. -}
    , _end_time :: !(TF.Attribute s Text)
    {- ^ (Optional) The time for this action to end, in "YYYY-MM-DDThh:mm:ssZ" format in UTC/GMT only (for example, 2014-06-01T00:00:00Z ). If you try to schedule your action in the past, Auto Scaling returns an error message. -}
    , _max_size :: !(TF.Attribute s Text)
    {- ^ (Optional) The maximum size for the Auto Scaling group. Default 0. Set to -1 if you don't want to change the maximum size at the scheduled time. -}
    , _min_size :: !(TF.Attribute s Text)
    {- ^ (Optional) The minimum size for the Auto Scaling group. Default 0. Set to -1 if you don't want to change the minimum size at the scheduled time. -}
    , _recurrence :: !(TF.Attribute s Text)
    {- ^ (Optional) The time when recurring future actions will start. Start time is specified by the user following the Unix cron syntax format. -}
    , _scheduled_action_name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of this scaling action. -}
    , _start_time :: !(TF.Attribute s Text)
    {- ^ (Optional) The time for this action to start, in "YYYY-MM-DDThh:mm:ssZ" format in UTC/GMT only (for example, 2014-06-01T00:00:00Z ). If you try to schedule your action in the past, Auto Scaling returns an error message. -}
    } deriving (Show, Eq)

instance TF.ToHCL (AutoscalingScheduleResource s) where
    toHCL AutoscalingScheduleResource{..} = TF.block $ catMaybes
        [ TF.assign "autoscaling_group_name" <$> TF.attribute _autoscaling_group_name
        , TF.assign "desired_capacity" <$> TF.attribute _desired_capacity
        , TF.assign "end_time" <$> TF.attribute _end_time
        , TF.assign "max_size" <$> TF.attribute _max_size
        , TF.assign "min_size" <$> TF.attribute _min_size
        , TF.assign "recurrence" <$> TF.attribute _recurrence
        , TF.assign "scheduled_action_name" <$> TF.attribute _scheduled_action_name
        , TF.assign "start_time" <$> TF.attribute _start_time
        ]

instance HasAutoscalingGroupName (AutoscalingScheduleResource s) Text where
    type HasAutoscalingGroupNameThread (AutoscalingScheduleResource s) Text = s

    autoscalingGroupName =
        lens (_autoscaling_group_name :: AutoscalingScheduleResource s -> TF.Attribute s Text)
            (\s a -> s { _autoscaling_group_name = a } :: AutoscalingScheduleResource s)

instance HasDesiredCapacity (AutoscalingScheduleResource s) Text where
    type HasDesiredCapacityThread (AutoscalingScheduleResource s) Text = s

    desiredCapacity =
        lens (_desired_capacity :: AutoscalingScheduleResource s -> TF.Attribute s Text)
            (\s a -> s { _desired_capacity = a } :: AutoscalingScheduleResource s)

instance HasEndTime (AutoscalingScheduleResource s) Text where
    type HasEndTimeThread (AutoscalingScheduleResource s) Text = s

    endTime =
        lens (_end_time :: AutoscalingScheduleResource s -> TF.Attribute s Text)
            (\s a -> s { _end_time = a } :: AutoscalingScheduleResource s)

instance HasMaxSize (AutoscalingScheduleResource s) Text where
    type HasMaxSizeThread (AutoscalingScheduleResource s) Text = s

    maxSize =
        lens (_max_size :: AutoscalingScheduleResource s -> TF.Attribute s Text)
            (\s a -> s { _max_size = a } :: AutoscalingScheduleResource s)

instance HasMinSize (AutoscalingScheduleResource s) Text where
    type HasMinSizeThread (AutoscalingScheduleResource s) Text = s

    minSize =
        lens (_min_size :: AutoscalingScheduleResource s -> TF.Attribute s Text)
            (\s a -> s { _min_size = a } :: AutoscalingScheduleResource s)

instance HasRecurrence (AutoscalingScheduleResource s) Text where
    type HasRecurrenceThread (AutoscalingScheduleResource s) Text = s

    recurrence =
        lens (_recurrence :: AutoscalingScheduleResource s -> TF.Attribute s Text)
            (\s a -> s { _recurrence = a } :: AutoscalingScheduleResource s)

instance HasScheduledActionName (AutoscalingScheduleResource s) Text where
    type HasScheduledActionNameThread (AutoscalingScheduleResource s) Text = s

    scheduledActionName =
        lens (_scheduled_action_name :: AutoscalingScheduleResource s -> TF.Attribute s Text)
            (\s a -> s { _scheduled_action_name = a } :: AutoscalingScheduleResource s)

instance HasStartTime (AutoscalingScheduleResource s) Text where
    type HasStartTimeThread (AutoscalingScheduleResource s) Text = s

    startTime =
        lens (_start_time :: AutoscalingScheduleResource s -> TF.Attribute s Text)
            (\s a -> s { _start_time = a } :: AutoscalingScheduleResource s)

instance HasComputedArn (AutoscalingScheduleResource s) Text

autoscalingScheduleResource :: TF.Resource TF.AWS (AutoscalingScheduleResource s)
autoscalingScheduleResource =
    TF.newResource "aws_autoscaling_schedule" $
        AutoscalingScheduleResource {
              _autoscaling_group_name = TF.Nil
            , _desired_capacity = TF.Nil
            , _end_time = TF.Nil
            , _max_size = TF.Nil
            , _min_size = TF.Nil
            , _recurrence = TF.Nil
            , _scheduled_action_name = TF.Nil
            , _start_time = TF.Nil
            }

{- | The @aws_batch_compute_environment@ AWS resource.

Creates a AWS Batch compute environment. Compute environments contain the
Amazon ECS container instances that are used to run containerized batch
jobs. For information about AWS Batch, see
<http://docs.aws.amazon.com/batch/latest/userguide/what-is-batch.html> . For
information about compute environment, see
<http://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html>
. ~> Note: To prevent a race condition during environment deletion, make
sure to set @depends_on@ to the related @aws_iam_role_policy_attachment@ ;
otherwise, the policy may be destroyed too soon and the compute environment
will then get stuck in the @DELETING@ state, see
<http://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html> .
-}
data BatchComputeEnvironmentResource s = BatchComputeEnvironmentResource {
      _compute_environment_name :: !(TF.Attribute s Text)
    {- ^ (Required) The name for your compute environment. Up to 128 letters (uppercase and lowercase), numbers, and underscores are allowed. -}
    , _compute_resources :: !(TF.Attribute s Text)
    {- ^ (Optional) Details of the compute resources managed by the compute environment. This parameter is required for managed compute environments. See details below. -}
    , _service_role :: !(TF.Attribute s Text)
    {- ^ (Required) The full Amazon Resource Name (ARN) of the IAM role that allows AWS Batch to make calls to other AWS services on your behalf. -}
    , _state :: !(TF.Attribute s Text)
    {- ^ (Optional) The state of the compute environment. If the state is @ENABLED@ , then the compute environment accepts jobs from a queue and can scale out automatically based on queues. Valid items are @ENABLED@ or @DISABLED@ . Defaults to @ENABLED@ . -}
    , _type' :: !(TF.Attribute s Text)
    {- ^ (Required) The type of the compute environment. Valid items are @MANAGED@ or @UNMANAGED@ . -}
    } deriving (Show, Eq)

instance TF.ToHCL (BatchComputeEnvironmentResource s) where
    toHCL BatchComputeEnvironmentResource{..} = TF.block $ catMaybes
        [ TF.assign "compute_environment_name" <$> TF.attribute _compute_environment_name
        , TF.assign "compute_resources" <$> TF.attribute _compute_resources
        , TF.assign "service_role" <$> TF.attribute _service_role
        , TF.assign "state" <$> TF.attribute _state
        , TF.assign "type" <$> TF.attribute _type'
        ]

instance HasComputeEnvironmentName (BatchComputeEnvironmentResource s) Text where
    type HasComputeEnvironmentNameThread (BatchComputeEnvironmentResource s) Text = s

    computeEnvironmentName =
        lens (_compute_environment_name :: BatchComputeEnvironmentResource s -> TF.Attribute s Text)
            (\s a -> s { _compute_environment_name = a } :: BatchComputeEnvironmentResource s)

instance HasComputeResources (BatchComputeEnvironmentResource s) Text where
    type HasComputeResourcesThread (BatchComputeEnvironmentResource s) Text = s

    computeResources =
        lens (_compute_resources :: BatchComputeEnvironmentResource s -> TF.Attribute s Text)
            (\s a -> s { _compute_resources = a } :: BatchComputeEnvironmentResource s)

instance HasServiceRole (BatchComputeEnvironmentResource s) Text where
    type HasServiceRoleThread (BatchComputeEnvironmentResource s) Text = s

    serviceRole =
        lens (_service_role :: BatchComputeEnvironmentResource s -> TF.Attribute s Text)
            (\s a -> s { _service_role = a } :: BatchComputeEnvironmentResource s)

instance HasState (BatchComputeEnvironmentResource s) Text where
    type HasStateThread (BatchComputeEnvironmentResource s) Text = s

    state =
        lens (_state :: BatchComputeEnvironmentResource s -> TF.Attribute s Text)
            (\s a -> s { _state = a } :: BatchComputeEnvironmentResource s)

instance HasType' (BatchComputeEnvironmentResource s) Text where
    type HasType'Thread (BatchComputeEnvironmentResource s) Text = s

    type' =
        lens (_type' :: BatchComputeEnvironmentResource s -> TF.Attribute s Text)
            (\s a -> s { _type' = a } :: BatchComputeEnvironmentResource s)

instance HasComputedArn (BatchComputeEnvironmentResource s) Text

instance HasComputedEcsClusterArn (BatchComputeEnvironmentResource s) Text

instance HasComputedStatus (BatchComputeEnvironmentResource s) Text

instance HasComputedStatusReason (BatchComputeEnvironmentResource s) Text

batchComputeEnvironmentResource :: TF.Resource TF.AWS (BatchComputeEnvironmentResource s)
batchComputeEnvironmentResource =
    TF.newResource "aws_batch_compute_environment" $
        BatchComputeEnvironmentResource {
              _compute_environment_name = TF.Nil
            , _compute_resources = TF.Nil
            , _service_role = TF.Nil
            , _state = TF.Nil
            , _type' = TF.Nil
            }

{- | The @aws_batch_job_definition@ AWS resource.

Provides a Batch Job Definition resource.
-}
data BatchJobDefinitionResource s = BatchJobDefinitionResource {
      _container_properties :: !(TF.Attribute s Text)
    {- ^ (Optional) A valid <http://docs.aws.amazon.com/batch/latest/APIReference/API_RegisterJobDefinition.html> provided as a single valid JSON document. This parameter is required if the @type@ parameter is @container@ . -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) Specifies the name of the job definition. -}
    , _parameters :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies the parameter substitution placeholders to set in the job definition. -}
    , _retry_strategy :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies the retry strategy to use for failed jobs that are submitted with this job definition. Maximum number of @retry_strategy@ is @1@ .  Defined below. -}
    , _type' :: !(TF.Attribute s Text)
    {- ^ (Required) The type of job definition.  Must be @container@ -}
    } deriving (Show, Eq)

instance TF.ToHCL (BatchJobDefinitionResource s) where
    toHCL BatchJobDefinitionResource{..} = TF.block $ catMaybes
        [ TF.assign "container_properties" <$> TF.attribute _container_properties
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "parameters" <$> TF.attribute _parameters
        , TF.assign "retry_strategy" <$> TF.attribute _retry_strategy
        , TF.assign "type" <$> TF.attribute _type'
        ]

instance HasContainerProperties (BatchJobDefinitionResource s) Text where
    type HasContainerPropertiesThread (BatchJobDefinitionResource s) Text = s

    containerProperties =
        lens (_container_properties :: BatchJobDefinitionResource s -> TF.Attribute s Text)
            (\s a -> s { _container_properties = a } :: BatchJobDefinitionResource s)

instance HasName (BatchJobDefinitionResource s) Text where
    type HasNameThread (BatchJobDefinitionResource s) Text = s

    name =
        lens (_name :: BatchJobDefinitionResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: BatchJobDefinitionResource s)

instance HasParameters (BatchJobDefinitionResource s) Text where
    type HasParametersThread (BatchJobDefinitionResource s) Text = s

    parameters =
        lens (_parameters :: BatchJobDefinitionResource s -> TF.Attribute s Text)
            (\s a -> s { _parameters = a } :: BatchJobDefinitionResource s)

instance HasRetryStrategy (BatchJobDefinitionResource s) Text where
    type HasRetryStrategyThread (BatchJobDefinitionResource s) Text = s

    retryStrategy =
        lens (_retry_strategy :: BatchJobDefinitionResource s -> TF.Attribute s Text)
            (\s a -> s { _retry_strategy = a } :: BatchJobDefinitionResource s)

instance HasType' (BatchJobDefinitionResource s) Text where
    type HasType'Thread (BatchJobDefinitionResource s) Text = s

    type' =
        lens (_type' :: BatchJobDefinitionResource s -> TF.Attribute s Text)
            (\s a -> s { _type' = a } :: BatchJobDefinitionResource s)

batchJobDefinitionResource :: TF.Resource TF.AWS (BatchJobDefinitionResource s)
batchJobDefinitionResource =
    TF.newResource "aws_batch_job_definition" $
        BatchJobDefinitionResource {
              _container_properties = TF.Nil
            , _name = TF.Nil
            , _parameters = TF.Nil
            , _retry_strategy = TF.Nil
            , _type' = TF.Nil
            }

{- | The @aws_batch_job_queue@ AWS resource.

Provides a Batch Job Queue resource.
-}
data BatchJobQueueResource s = BatchJobQueueResource {
      _compute_environments :: !(TF.Attribute s Text)
    {- ^ (Required) Specifies the set of compute environments mapped to a job queue and their order.  The position of the compute environments in the list will dictate the order. You can associate up to 3 compute environments with a job queue. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) Specifies the name of the job queue. -}
    , _priority :: !(TF.Attribute s Text)
    {- ^ (Required) The priority of the job queue. Job queues with a higher priority are evaluated first when associated with same compute environment. -}
    , _state :: !(TF.Attribute s Text)
    {- ^ (Required) The state of the job queue. Must be one of: @ENABLED@ or @DISABLED@ -}
    } deriving (Show, Eq)

instance TF.ToHCL (BatchJobQueueResource s) where
    toHCL BatchJobQueueResource{..} = TF.block $ catMaybes
        [ TF.assign "compute_environments" <$> TF.attribute _compute_environments
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "priority" <$> TF.attribute _priority
        , TF.assign "state" <$> TF.attribute _state
        ]

instance HasComputeEnvironments (BatchJobQueueResource s) Text where
    type HasComputeEnvironmentsThread (BatchJobQueueResource s) Text = s

    computeEnvironments =
        lens (_compute_environments :: BatchJobQueueResource s -> TF.Attribute s Text)
            (\s a -> s { _compute_environments = a } :: BatchJobQueueResource s)

instance HasName (BatchJobQueueResource s) Text where
    type HasNameThread (BatchJobQueueResource s) Text = s

    name =
        lens (_name :: BatchJobQueueResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: BatchJobQueueResource s)

instance HasPriority (BatchJobQueueResource s) Text where
    type HasPriorityThread (BatchJobQueueResource s) Text = s

    priority =
        lens (_priority :: BatchJobQueueResource s -> TF.Attribute s Text)
            (\s a -> s { _priority = a } :: BatchJobQueueResource s)

instance HasState (BatchJobQueueResource s) Text where
    type HasStateThread (BatchJobQueueResource s) Text = s

    state =
        lens (_state :: BatchJobQueueResource s -> TF.Attribute s Text)
            (\s a -> s { _state = a } :: BatchJobQueueResource s)

instance HasComputedArn (BatchJobQueueResource s) Text

batchJobQueueResource :: TF.Resource TF.AWS (BatchJobQueueResource s)
batchJobQueueResource =
    TF.newResource "aws_batch_job_queue" $
        BatchJobQueueResource {
              _compute_environments = TF.Nil
            , _name = TF.Nil
            , _priority = TF.Nil
            , _state = TF.Nil
            }

{- | The @aws_cloudformation_stack@ AWS resource.

Provides a CloudFormation Stack resource.
-}
data CloudformationStackResource s = CloudformationStackResource {
      _capabilities :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of capabilities. Valid values: @CAPABILITY_IAM@ or @CAPABILITY_NAMED_IAM@ -}
    , _disable_rollback :: !(TF.Attribute s Text)
    {- ^ (Optional) Set to true to disable rollback of the stack if stack creation failed. Conflicts with @on_failure@ . -}
    , _iam_role_arn :: !(TF.Attribute s Text)
    {- ^ (Optional) The ARN of an IAM role that AWS CloudFormation assumes to create the stack. If you don't specify a value, AWS CloudFormation uses the role that was previously associated with the stack. If no role is available, AWS CloudFormation uses a temporary session that is generated from your user credentials. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) Stack name. -}
    , _notification_arns :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of SNS topic ARNs to publish stack related events. -}
    , _on_failure :: !(TF.Attribute s Text)
    {- ^ (Optional) Action to be taken if stack creation fails. This must be one of: @DO_NOTHING@ , @ROLLBACK@ , or @DELETE@ . Conflicts with @disable_rollback@ . -}
    , _parameters :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of Parameter structures that specify input parameters for the stack. -}
    , _policy_body :: !(TF.Attribute s Text)
    {- ^ (Optional) Structure containing the stack policy body. Conflicts w/ @policy_url@ . -}
    , _policy_url :: !(TF.Attribute s Text)
    {- ^ (Optional) Location of a file containing the stack policy. Conflicts w/ @policy_body@ . -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A list of tags to associate with this stack. -}
    , _template_body :: !(TF.Attribute s Text)
    {- ^ (Optional) Structure containing the template body (max size: 51,200 bytes). -}
    , _template_url :: !(TF.Attribute s Text)
    {- ^ (Optional) Location of a file containing the template body (max size: 460,800 bytes). -}
    , _timeout_in_minutes :: !(TF.Attribute s Text)
    {- ^ (Optional) The amount of time that can pass before the stack status becomes @CREATE_FAILED@ . -}
    } deriving (Show, Eq)

instance TF.ToHCL (CloudformationStackResource s) where
    toHCL CloudformationStackResource{..} = TF.block $ catMaybes
        [ TF.assign "capabilities" <$> TF.attribute _capabilities
        , TF.assign "disable_rollback" <$> TF.attribute _disable_rollback
        , TF.assign "iam_role_arn" <$> TF.attribute _iam_role_arn
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "notification_arns" <$> TF.attribute _notification_arns
        , TF.assign "on_failure" <$> TF.attribute _on_failure
        , TF.assign "parameters" <$> TF.attribute _parameters
        , TF.assign "policy_body" <$> TF.attribute _policy_body
        , TF.assign "policy_url" <$> TF.attribute _policy_url
        , TF.assign "tags" <$> TF.attribute _tags
        , TF.assign "template_body" <$> TF.attribute _template_body
        , TF.assign "template_url" <$> TF.attribute _template_url
        , TF.assign "timeout_in_minutes" <$> TF.attribute _timeout_in_minutes
        ]

instance HasCapabilities (CloudformationStackResource s) Text where
    type HasCapabilitiesThread (CloudformationStackResource s) Text = s

    capabilities =
        lens (_capabilities :: CloudformationStackResource s -> TF.Attribute s Text)
            (\s a -> s { _capabilities = a } :: CloudformationStackResource s)

instance HasDisableRollback (CloudformationStackResource s) Text where
    type HasDisableRollbackThread (CloudformationStackResource s) Text = s

    disableRollback =
        lens (_disable_rollback :: CloudformationStackResource s -> TF.Attribute s Text)
            (\s a -> s { _disable_rollback = a } :: CloudformationStackResource s)

instance HasIamRoleArn (CloudformationStackResource s) Text where
    type HasIamRoleArnThread (CloudformationStackResource s) Text = s

    iamRoleArn =
        lens (_iam_role_arn :: CloudformationStackResource s -> TF.Attribute s Text)
            (\s a -> s { _iam_role_arn = a } :: CloudformationStackResource s)

instance HasName (CloudformationStackResource s) Text where
    type HasNameThread (CloudformationStackResource s) Text = s

    name =
        lens (_name :: CloudformationStackResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: CloudformationStackResource s)

instance HasNotificationArns (CloudformationStackResource s) Text where
    type HasNotificationArnsThread (CloudformationStackResource s) Text = s

    notificationArns =
        lens (_notification_arns :: CloudformationStackResource s -> TF.Attribute s Text)
            (\s a -> s { _notification_arns = a } :: CloudformationStackResource s)

instance HasOnFailure (CloudformationStackResource s) Text where
    type HasOnFailureThread (CloudformationStackResource s) Text = s

    onFailure =
        lens (_on_failure :: CloudformationStackResource s -> TF.Attribute s Text)
            (\s a -> s { _on_failure = a } :: CloudformationStackResource s)

instance HasParameters (CloudformationStackResource s) Text where
    type HasParametersThread (CloudformationStackResource s) Text = s

    parameters =
        lens (_parameters :: CloudformationStackResource s -> TF.Attribute s Text)
            (\s a -> s { _parameters = a } :: CloudformationStackResource s)

instance HasPolicyBody (CloudformationStackResource s) Text where
    type HasPolicyBodyThread (CloudformationStackResource s) Text = s

    policyBody =
        lens (_policy_body :: CloudformationStackResource s -> TF.Attribute s Text)
            (\s a -> s { _policy_body = a } :: CloudformationStackResource s)

instance HasPolicyUrl (CloudformationStackResource s) Text where
    type HasPolicyUrlThread (CloudformationStackResource s) Text = s

    policyUrl =
        lens (_policy_url :: CloudformationStackResource s -> TF.Attribute s Text)
            (\s a -> s { _policy_url = a } :: CloudformationStackResource s)

instance HasTags (CloudformationStackResource s) TF.Tags where
    type HasTagsThread (CloudformationStackResource s) TF.Tags = s

    tags =
        lens (_tags :: CloudformationStackResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: CloudformationStackResource s)

instance HasTemplateBody (CloudformationStackResource s) Text where
    type HasTemplateBodyThread (CloudformationStackResource s) Text = s

    templateBody =
        lens (_template_body :: CloudformationStackResource s -> TF.Attribute s Text)
            (\s a -> s { _template_body = a } :: CloudformationStackResource s)

instance HasTemplateUrl (CloudformationStackResource s) Text where
    type HasTemplateUrlThread (CloudformationStackResource s) Text = s

    templateUrl =
        lens (_template_url :: CloudformationStackResource s -> TF.Attribute s Text)
            (\s a -> s { _template_url = a } :: CloudformationStackResource s)

instance HasTimeoutInMinutes (CloudformationStackResource s) Text where
    type HasTimeoutInMinutesThread (CloudformationStackResource s) Text = s

    timeoutInMinutes =
        lens (_timeout_in_minutes :: CloudformationStackResource s -> TF.Attribute s Text)
            (\s a -> s { _timeout_in_minutes = a } :: CloudformationStackResource s)

instance HasComputedId (CloudformationStackResource s) Text

instance HasComputedOutputs (CloudformationStackResource s) Text

cloudformationStackResource :: TF.Resource TF.AWS (CloudformationStackResource s)
cloudformationStackResource =
    TF.newResource "aws_cloudformation_stack" $
        CloudformationStackResource {
              _capabilities = TF.Nil
            , _disable_rollback = TF.Nil
            , _iam_role_arn = TF.Nil
            , _name = TF.Nil
            , _notification_arns = TF.Nil
            , _on_failure = TF.Nil
            , _parameters = TF.Nil
            , _policy_body = TF.Nil
            , _policy_url = TF.Nil
            , _tags = TF.Nil
            , _template_body = TF.Nil
            , _template_url = TF.Nil
            , _timeout_in_minutes = TF.Nil
            }

{- | The @aws_cloudfront_distribution@ AWS resource.

Creates an Amazon CloudFront web distribution. For information about
CloudFront distributions, see the
<http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Introduction.html>
. For specific information about creating CloudFront web distributions, see
the
<http://docs.aws.amazon.com/AmazonCloudFront/latest/APIReference/CreateDistribution.html>
page in the Amazon CloudFront API Reference. ~> NOTE: CloudFront
distributions take about 15 minutes to a deployed state after creation or
modification. During this time, deletes to resources will be blocked. If you
need to delete a distribution that is enabled and you do not want to wait,
you need to use the @retain_on_delete@ flag.
-}
data CloudfrontDistributionResource s = CloudfrontDistributionResource {
      _aliases :: !(TF.Attribute s Text)
    {- ^ (Optional) - Extra CNAMEs (alternate domain names), if any, for this distribution. -}
    , _cache_behavior :: !(TF.Attribute s Text)
    {- ^ (Optional) - A <#cache-behavior-arguments> resource for this distribution (multiples allowed). -}
    , _comment :: !(TF.Attribute s Text)
    {- ^ (Optional) - Any comments you want to include about the distribution. -}
    , _custom_error_response :: !(TF.Attribute s Text)
    {- ^ (Optional) - One or more <#custom-error-response-arguments> elements (multiples allowed). -}
    , _default_cache_behavior :: !(TF.Attribute s Text)
    {- ^ (Required) - The <#default-cache-behavior-arguments> for this distribution (maximum one). -}
    , _default_root_object :: !(TF.Attribute s Text)
    {- ^ (Optional) - The object that you want CloudFront to return (for example, index.html) when an end user requests the root URL. -}
    , _enabled :: !(TF.Attribute s TF.Bool)
    {- ^ (Required) - Whether the distribution is enabled to accept end user requests for content. -}
    , _http_version :: !(TF.Attribute s Text)
    {- ^ (Optional) - The maximum HTTP version to support on the distribution. Allowed values are @http1.1@ and @http2@ . The default is @http2@ . -}
    , _is_ipv6_enabled :: !(TF.Attribute s TF.Bool)
    {- ^ (Optional) - Whether the IPv6 is enabled for the distribution. -}
    , _logging_config :: !(TF.Attribute s Text)
    {- ^ (Optional) - The <#logging-config-arguments> that controls how logs are written to your distribution (maximum one). -}
    , _origin :: !(TF.Attribute s Text)
    {- ^ (Required) - One or more <#origin-arguments> for this distribution (multiples allowed). -}
    , _price_class :: !(TF.Attribute s Text)
    {- ^ (Optional) - The price class for this distribution. One of @PriceClass_All@ , @PriceClass_200@ , @PriceClass_100@ -}
    , _restrictions :: !(TF.Attribute s Text)
    {- ^ (Required) - The <#restrictions-arguments> for this distribution (maximum one). -}
    , _retain_on_delete :: !(TF.Attribute s Text)
    {- ^ (Optional) - Disables the distribution instead of deleting it when destroying the resource through Terraform. If this is set, the distribution needs to be deleted manually afterwards. Default: @false@ . -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _viewer_certificate :: !(TF.Attribute s Text)
    {- ^ (Required) - The <#viewer-certificate-arguments> for this distribution (maximum one). -}
    , _web_acl_id :: !(TF.Attribute s Text)
    {- ^ (Optional) - If you're using AWS WAF to filter CloudFront requests, the Id of the AWS WAF web ACL that is associated with the distribution. -}
    } deriving (Show, Eq)

instance TF.ToHCL (CloudfrontDistributionResource s) where
    toHCL CloudfrontDistributionResource{..} = TF.block $ catMaybes
        [ TF.assign "aliases" <$> TF.attribute _aliases
        , TF.assign "cache_behavior" <$> TF.attribute _cache_behavior
        , TF.assign "comment" <$> TF.attribute _comment
        , TF.assign "custom_error_response" <$> TF.attribute _custom_error_response
        , TF.assign "default_cache_behavior" <$> TF.attribute _default_cache_behavior
        , TF.assign "default_root_object" <$> TF.attribute _default_root_object
        , TF.assign "enabled" <$> TF.attribute _enabled
        , TF.assign "http_version" <$> TF.attribute _http_version
        , TF.assign "is_ipv6_enabled" <$> TF.attribute _is_ipv6_enabled
        , TF.assign "logging_config" <$> TF.attribute _logging_config
        , TF.assign "origin" <$> TF.attribute _origin
        , TF.assign "price_class" <$> TF.attribute _price_class
        , TF.assign "restrictions" <$> TF.attribute _restrictions
        , TF.assign "retain_on_delete" <$> TF.attribute _retain_on_delete
        , TF.assign "tags" <$> TF.attribute _tags
        , TF.assign "viewer_certificate" <$> TF.attribute _viewer_certificate
        , TF.assign "web_acl_id" <$> TF.attribute _web_acl_id
        ]

instance HasAliases (CloudfrontDistributionResource s) Text where
    type HasAliasesThread (CloudfrontDistributionResource s) Text = s

    aliases =
        lens (_aliases :: CloudfrontDistributionResource s -> TF.Attribute s Text)
            (\s a -> s { _aliases = a } :: CloudfrontDistributionResource s)

instance HasCacheBehavior (CloudfrontDistributionResource s) Text where
    type HasCacheBehaviorThread (CloudfrontDistributionResource s) Text = s

    cacheBehavior =
        lens (_cache_behavior :: CloudfrontDistributionResource s -> TF.Attribute s Text)
            (\s a -> s { _cache_behavior = a } :: CloudfrontDistributionResource s)

instance HasComment (CloudfrontDistributionResource s) Text where
    type HasCommentThread (CloudfrontDistributionResource s) Text = s

    comment =
        lens (_comment :: CloudfrontDistributionResource s -> TF.Attribute s Text)
            (\s a -> s { _comment = a } :: CloudfrontDistributionResource s)

instance HasCustomErrorResponse (CloudfrontDistributionResource s) Text where
    type HasCustomErrorResponseThread (CloudfrontDistributionResource s) Text = s

    customErrorResponse =
        lens (_custom_error_response :: CloudfrontDistributionResource s -> TF.Attribute s Text)
            (\s a -> s { _custom_error_response = a } :: CloudfrontDistributionResource s)

instance HasDefaultCacheBehavior (CloudfrontDistributionResource s) Text where
    type HasDefaultCacheBehaviorThread (CloudfrontDistributionResource s) Text = s

    defaultCacheBehavior =
        lens (_default_cache_behavior :: CloudfrontDistributionResource s -> TF.Attribute s Text)
            (\s a -> s { _default_cache_behavior = a } :: CloudfrontDistributionResource s)

instance HasDefaultRootObject (CloudfrontDistributionResource s) Text where
    type HasDefaultRootObjectThread (CloudfrontDistributionResource s) Text = s

    defaultRootObject =
        lens (_default_root_object :: CloudfrontDistributionResource s -> TF.Attribute s Text)
            (\s a -> s { _default_root_object = a } :: CloudfrontDistributionResource s)

instance HasEnabled (CloudfrontDistributionResource s) TF.Bool where
    type HasEnabledThread (CloudfrontDistributionResource s) TF.Bool = s

    enabled =
        lens (_enabled :: CloudfrontDistributionResource s -> TF.Attribute s TF.Bool)
            (\s a -> s { _enabled = a } :: CloudfrontDistributionResource s)

instance HasHttpVersion (CloudfrontDistributionResource s) Text where
    type HasHttpVersionThread (CloudfrontDistributionResource s) Text = s

    httpVersion =
        lens (_http_version :: CloudfrontDistributionResource s -> TF.Attribute s Text)
            (\s a -> s { _http_version = a } :: CloudfrontDistributionResource s)

instance HasIsIpv6Enabled (CloudfrontDistributionResource s) TF.Bool where
    type HasIsIpv6EnabledThread (CloudfrontDistributionResource s) TF.Bool = s

    isIpv6Enabled =
        lens (_is_ipv6_enabled :: CloudfrontDistributionResource s -> TF.Attribute s TF.Bool)
            (\s a -> s { _is_ipv6_enabled = a } :: CloudfrontDistributionResource s)

instance HasLoggingConfig (CloudfrontDistributionResource s) Text where
    type HasLoggingConfigThread (CloudfrontDistributionResource s) Text = s

    loggingConfig =
        lens (_logging_config :: CloudfrontDistributionResource s -> TF.Attribute s Text)
            (\s a -> s { _logging_config = a } :: CloudfrontDistributionResource s)

instance HasOrigin (CloudfrontDistributionResource s) Text where
    type HasOriginThread (CloudfrontDistributionResource s) Text = s

    origin =
        lens (_origin :: CloudfrontDistributionResource s -> TF.Attribute s Text)
            (\s a -> s { _origin = a } :: CloudfrontDistributionResource s)

instance HasPriceClass (CloudfrontDistributionResource s) Text where
    type HasPriceClassThread (CloudfrontDistributionResource s) Text = s

    priceClass =
        lens (_price_class :: CloudfrontDistributionResource s -> TF.Attribute s Text)
            (\s a -> s { _price_class = a } :: CloudfrontDistributionResource s)

instance HasRestrictions (CloudfrontDistributionResource s) Text where
    type HasRestrictionsThread (CloudfrontDistributionResource s) Text = s

    restrictions =
        lens (_restrictions :: CloudfrontDistributionResource s -> TF.Attribute s Text)
            (\s a -> s { _restrictions = a } :: CloudfrontDistributionResource s)

instance HasRetainOnDelete (CloudfrontDistributionResource s) Text where
    type HasRetainOnDeleteThread (CloudfrontDistributionResource s) Text = s

    retainOnDelete =
        lens (_retain_on_delete :: CloudfrontDistributionResource s -> TF.Attribute s Text)
            (\s a -> s { _retain_on_delete = a } :: CloudfrontDistributionResource s)

instance HasTags (CloudfrontDistributionResource s) TF.Tags where
    type HasTagsThread (CloudfrontDistributionResource s) TF.Tags = s

    tags =
        lens (_tags :: CloudfrontDistributionResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: CloudfrontDistributionResource s)

instance HasViewerCertificate (CloudfrontDistributionResource s) Text where
    type HasViewerCertificateThread (CloudfrontDistributionResource s) Text = s

    viewerCertificate =
        lens (_viewer_certificate :: CloudfrontDistributionResource s -> TF.Attribute s Text)
            (\s a -> s { _viewer_certificate = a } :: CloudfrontDistributionResource s)

instance HasWebAclId (CloudfrontDistributionResource s) Text where
    type HasWebAclIdThread (CloudfrontDistributionResource s) Text = s

    webAclId =
        lens (_web_acl_id :: CloudfrontDistributionResource s -> TF.Attribute s Text)
            (\s a -> s { _web_acl_id = a } :: CloudfrontDistributionResource s)

cloudfrontDistributionResource :: TF.Resource TF.AWS (CloudfrontDistributionResource s)
cloudfrontDistributionResource =
    TF.newResource "aws_cloudfront_distribution" $
        CloudfrontDistributionResource {
              _aliases = TF.Nil
            , _cache_behavior = TF.Nil
            , _comment = TF.Nil
            , _custom_error_response = TF.Nil
            , _default_cache_behavior = TF.Nil
            , _default_root_object = TF.Nil
            , _enabled = TF.Nil
            , _http_version = TF.Nil
            , _is_ipv6_enabled = TF.Nil
            , _logging_config = TF.Nil
            , _origin = TF.Nil
            , _price_class = TF.Nil
            , _restrictions = TF.Nil
            , _retain_on_delete = TF.Nil
            , _tags = TF.Nil
            , _viewer_certificate = TF.Nil
            , _web_acl_id = TF.Nil
            }

{- | The @aws_cloudfront_origin_access_identity@ AWS resource.

Creates an Amazon CloudFront origin access identity. For information about
CloudFront distributions, see the
<http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Introduction.html>
. For more information on generating origin access identities, see
<http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html>
.
-}
data CloudfrontOriginAccessIdentityResource s = CloudfrontOriginAccessIdentityResource {
      _comment :: !(TF.Attribute s Text)
    {- ^ (Optional) - An optional comment for the origin access identity. -}
    } deriving (Show, Eq)

instance TF.ToHCL (CloudfrontOriginAccessIdentityResource s) where
    toHCL CloudfrontOriginAccessIdentityResource{..} = TF.block $ catMaybes
        [ TF.assign "comment" <$> TF.attribute _comment
        ]

instance HasComment (CloudfrontOriginAccessIdentityResource s) Text where
    type HasCommentThread (CloudfrontOriginAccessIdentityResource s) Text = s

    comment =
        lens (_comment :: CloudfrontOriginAccessIdentityResource s -> TF.Attribute s Text)
            (\s a -> s { _comment = a } :: CloudfrontOriginAccessIdentityResource s)

instance HasComputedCallerReference (CloudfrontOriginAccessIdentityResource s) Text

instance HasComputedCloudfrontAccessIdentityPath (CloudfrontOriginAccessIdentityResource s) Text

instance HasComputedEtag (CloudfrontOriginAccessIdentityResource s) Text

instance HasComputedIamArn (CloudfrontOriginAccessIdentityResource s) Text

instance HasComputedId (CloudfrontOriginAccessIdentityResource s) Text

instance HasComputedS3CanonicalUserId (CloudfrontOriginAccessIdentityResource s) Text

cloudfrontOriginAccessIdentityResource :: TF.Resource TF.AWS (CloudfrontOriginAccessIdentityResource s)
cloudfrontOriginAccessIdentityResource =
    TF.newResource "aws_cloudfront_origin_access_identity" $
        CloudfrontOriginAccessIdentityResource {
              _comment = TF.Nil
            }

{- | The @aws_cloudtrail@ AWS resource.

Provides a CloudTrail resource.
-}
data CloudtrailResource s = CloudtrailResource {
      _cloud_watch_logs_group_arn :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies a log group name using an Amazon Resource Name (ARN), that represents the log group to which CloudTrail logs will be delivered. -}
    , _cloud_watch_logs_role_arn :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies the role for the CloudWatch Logs endpoint to assume to write to a user’s log group. -}
    , _enable_log_file_validation :: !(TF.Attribute s TF.Bool)
    {- ^ (Optional) Specifies whether log file integrity validation is enabled. Defaults to @false@ . -}
    , _enable_logging :: !(TF.Attribute s TF.Bool)
    {- ^ (Optional) Enables logging for the trail. Defaults to @true@ . Setting this to @false@ will pause logging. -}
    , _include_global_service_events :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies whether the trail is publishing events from global services such as IAM to the log files. Defaults to @true@ . -}
    , _is_multi_region_trail :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies whether the trail is created in the current region or in all regions. Defaults to @false@ . -}
    , _kms_key_id :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies the KMS key ARN to use to encrypt the logs delivered by CloudTrail. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) Specifies the name of the trail. -}
    , _s3_bucket_name :: !(TF.Attribute s Text)
    {- ^ (Required) Specifies the name of the S3 bucket designated for publishing log files. -}
    , _s3_key_prefix :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies the S3 key prefix that precedes the name of the bucket you have designated for log file delivery. -}
    , _sns_topic_name :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies the name of the Amazon SNS topic defined for notification of log file delivery. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the trail -}
    } deriving (Show, Eq)

instance TF.ToHCL (CloudtrailResource s) where
    toHCL CloudtrailResource{..} = TF.block $ catMaybes
        [ TF.assign "cloud_watch_logs_group_arn" <$> TF.attribute _cloud_watch_logs_group_arn
        , TF.assign "cloud_watch_logs_role_arn" <$> TF.attribute _cloud_watch_logs_role_arn
        , TF.assign "enable_log_file_validation" <$> TF.attribute _enable_log_file_validation
        , TF.assign "enable_logging" <$> TF.attribute _enable_logging
        , TF.assign "include_global_service_events" <$> TF.attribute _include_global_service_events
        , TF.assign "is_multi_region_trail" <$> TF.attribute _is_multi_region_trail
        , TF.assign "kms_key_id" <$> TF.attribute _kms_key_id
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "s3_bucket_name" <$> TF.attribute _s3_bucket_name
        , TF.assign "s3_key_prefix" <$> TF.attribute _s3_key_prefix
        , TF.assign "sns_topic_name" <$> TF.attribute _sns_topic_name
        , TF.assign "tags" <$> TF.attribute _tags
        ]

instance HasCloudWatchLogsGroupArn (CloudtrailResource s) Text where
    type HasCloudWatchLogsGroupArnThread (CloudtrailResource s) Text = s

    cloudWatchLogsGroupArn =
        lens (_cloud_watch_logs_group_arn :: CloudtrailResource s -> TF.Attribute s Text)
            (\s a -> s { _cloud_watch_logs_group_arn = a } :: CloudtrailResource s)

instance HasCloudWatchLogsRoleArn (CloudtrailResource s) Text where
    type HasCloudWatchLogsRoleArnThread (CloudtrailResource s) Text = s

    cloudWatchLogsRoleArn =
        lens (_cloud_watch_logs_role_arn :: CloudtrailResource s -> TF.Attribute s Text)
            (\s a -> s { _cloud_watch_logs_role_arn = a } :: CloudtrailResource s)

instance HasEnableLogFileValidation (CloudtrailResource s) TF.Bool where
    type HasEnableLogFileValidationThread (CloudtrailResource s) TF.Bool = s

    enableLogFileValidation =
        lens (_enable_log_file_validation :: CloudtrailResource s -> TF.Attribute s TF.Bool)
            (\s a -> s { _enable_log_file_validation = a } :: CloudtrailResource s)

instance HasEnableLogging (CloudtrailResource s) TF.Bool where
    type HasEnableLoggingThread (CloudtrailResource s) TF.Bool = s

    enableLogging =
        lens (_enable_logging :: CloudtrailResource s -> TF.Attribute s TF.Bool)
            (\s a -> s { _enable_logging = a } :: CloudtrailResource s)

instance HasIncludeGlobalServiceEvents (CloudtrailResource s) Text where
    type HasIncludeGlobalServiceEventsThread (CloudtrailResource s) Text = s

    includeGlobalServiceEvents =
        lens (_include_global_service_events :: CloudtrailResource s -> TF.Attribute s Text)
            (\s a -> s { _include_global_service_events = a } :: CloudtrailResource s)

instance HasIsMultiRegionTrail (CloudtrailResource s) Text where
    type HasIsMultiRegionTrailThread (CloudtrailResource s) Text = s

    isMultiRegionTrail =
        lens (_is_multi_region_trail :: CloudtrailResource s -> TF.Attribute s Text)
            (\s a -> s { _is_multi_region_trail = a } :: CloudtrailResource s)

instance HasKmsKeyId (CloudtrailResource s) Text where
    type HasKmsKeyIdThread (CloudtrailResource s) Text = s

    kmsKeyId =
        lens (_kms_key_id :: CloudtrailResource s -> TF.Attribute s Text)
            (\s a -> s { _kms_key_id = a } :: CloudtrailResource s)

instance HasName (CloudtrailResource s) Text where
    type HasNameThread (CloudtrailResource s) Text = s

    name =
        lens (_name :: CloudtrailResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: CloudtrailResource s)

instance HasS3BucketName (CloudtrailResource s) Text where
    type HasS3BucketNameThread (CloudtrailResource s) Text = s

    s3BucketName =
        lens (_s3_bucket_name :: CloudtrailResource s -> TF.Attribute s Text)
            (\s a -> s { _s3_bucket_name = a } :: CloudtrailResource s)

instance HasS3KeyPrefix (CloudtrailResource s) Text where
    type HasS3KeyPrefixThread (CloudtrailResource s) Text = s

    s3KeyPrefix =
        lens (_s3_key_prefix :: CloudtrailResource s -> TF.Attribute s Text)
            (\s a -> s { _s3_key_prefix = a } :: CloudtrailResource s)

instance HasSnsTopicName (CloudtrailResource s) Text where
    type HasSnsTopicNameThread (CloudtrailResource s) Text = s

    snsTopicName =
        lens (_sns_topic_name :: CloudtrailResource s -> TF.Attribute s Text)
            (\s a -> s { _sns_topic_name = a } :: CloudtrailResource s)

instance HasTags (CloudtrailResource s) TF.Tags where
    type HasTagsThread (CloudtrailResource s) TF.Tags = s

    tags =
        lens (_tags :: CloudtrailResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: CloudtrailResource s)

instance HasComputedArn (CloudtrailResource s) Text

instance HasComputedHomeRegion (CloudtrailResource s) TF.Region

instance HasComputedId (CloudtrailResource s) Text

cloudtrailResource :: TF.Resource TF.AWS (CloudtrailResource s)
cloudtrailResource =
    TF.newResource "aws_cloudtrail" $
        CloudtrailResource {
              _cloud_watch_logs_group_arn = TF.Nil
            , _cloud_watch_logs_role_arn = TF.Nil
            , _enable_log_file_validation = TF.Nil
            , _enable_logging = TF.Nil
            , _include_global_service_events = TF.Nil
            , _is_multi_region_trail = TF.Nil
            , _kms_key_id = TF.Nil
            , _name = TF.Nil
            , _s3_bucket_name = TF.Nil
            , _s3_key_prefix = TF.Nil
            , _sns_topic_name = TF.Nil
            , _tags = TF.Nil
            }

{- | The @aws_cloudwatch_dashboard@ AWS resource.

Provides a CloudWatch Dashboard resource.
-}
data CloudwatchDashboardResource s = CloudwatchDashboardResource {
      _dashboard_body :: !(TF.Attribute s Text)
    {- ^ (Required) The detailed information about the dashboard, including what widgets are included and their location on the dashboard. You can read more about the body structure in the <https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html> . -}
    , _dashboard_name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the dashboard. -}
    } deriving (Show, Eq)

instance TF.ToHCL (CloudwatchDashboardResource s) where
    toHCL CloudwatchDashboardResource{..} = TF.block $ catMaybes
        [ TF.assign "dashboard_body" <$> TF.attribute _dashboard_body
        , TF.assign "dashboard_name" <$> TF.attribute _dashboard_name
        ]

instance HasDashboardBody (CloudwatchDashboardResource s) Text where
    type HasDashboardBodyThread (CloudwatchDashboardResource s) Text = s

    dashboardBody =
        lens (_dashboard_body :: CloudwatchDashboardResource s -> TF.Attribute s Text)
            (\s a -> s { _dashboard_body = a } :: CloudwatchDashboardResource s)

instance HasDashboardName (CloudwatchDashboardResource s) Text where
    type HasDashboardNameThread (CloudwatchDashboardResource s) Text = s

    dashboardName =
        lens (_dashboard_name :: CloudwatchDashboardResource s -> TF.Attribute s Text)
            (\s a -> s { _dashboard_name = a } :: CloudwatchDashboardResource s)

instance HasComputedDashboardArn (CloudwatchDashboardResource s) Text

cloudwatchDashboardResource :: TF.Resource TF.AWS (CloudwatchDashboardResource s)
cloudwatchDashboardResource =
    TF.newResource "aws_cloudwatch_dashboard" $
        CloudwatchDashboardResource {
              _dashboard_body = TF.Nil
            , _dashboard_name = TF.Nil
            }

{- | The @aws_cloudwatch_event_permission@ AWS resource.

Provides a resource to create a CloudWatch Events permission to support
cross-account events in the current account default event bus.
-}
data CloudwatchEventPermissionResource s = CloudwatchEventPermissionResource {
      _action :: !(TF.Attribute s Text)
    {- ^ (Optional) The action that you are enabling the other account to perform. Defaults to @events:PutEvents@ . -}
    , _principal :: !(TF.Attribute s Text)
    {- ^ (Required) The 12-digit AWS account ID that you are permitting to put events to your default event bus. Specify @*@ to permit any account to put events to your default event bus. -}
    , _statement_id :: !(TF.Attribute s Text)
    {- ^ (Required) An identifier string for the external account that you are granting permissions to. -}
    } deriving (Show, Eq)

instance TF.ToHCL (CloudwatchEventPermissionResource s) where
    toHCL CloudwatchEventPermissionResource{..} = TF.block $ catMaybes
        [ TF.assign "action" <$> TF.attribute _action
        , TF.assign "principal" <$> TF.attribute _principal
        , TF.assign "statement_id" <$> TF.attribute _statement_id
        ]

instance HasAction (CloudwatchEventPermissionResource s) Text where
    type HasActionThread (CloudwatchEventPermissionResource s) Text = s

    action =
        lens (_action :: CloudwatchEventPermissionResource s -> TF.Attribute s Text)
            (\s a -> s { _action = a } :: CloudwatchEventPermissionResource s)

instance HasPrincipal (CloudwatchEventPermissionResource s) Text where
    type HasPrincipalThread (CloudwatchEventPermissionResource s) Text = s

    principal =
        lens (_principal :: CloudwatchEventPermissionResource s -> TF.Attribute s Text)
            (\s a -> s { _principal = a } :: CloudwatchEventPermissionResource s)

instance HasStatementId (CloudwatchEventPermissionResource s) Text where
    type HasStatementIdThread (CloudwatchEventPermissionResource s) Text = s

    statementId =
        lens (_statement_id :: CloudwatchEventPermissionResource s -> TF.Attribute s Text)
            (\s a -> s { _statement_id = a } :: CloudwatchEventPermissionResource s)

instance HasComputedId (CloudwatchEventPermissionResource s) Text

cloudwatchEventPermissionResource :: TF.Resource TF.AWS (CloudwatchEventPermissionResource s)
cloudwatchEventPermissionResource =
    TF.newResource "aws_cloudwatch_event_permission" $
        CloudwatchEventPermissionResource {
              _action = TF.Nil
            , _principal = TF.Nil
            , _statement_id = TF.Nil
            }

{- | The @aws_cloudwatch_event_rule@ AWS resource.

Provides a CloudWatch Event Rule resource.
-}
data CloudwatchEventRuleResource s = CloudwatchEventRuleResource {
      _description :: !(TF.Attribute s Text)
    {- ^ (Optional) The description of the rule. -}
    , _event_pattern :: !(TF.Attribute s Text)
    {- ^ (Required, if @schedule_expression@ isn't specified) Event pattern described a JSON object. See full documentation of <http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CloudWatchEventsandEventPatterns.html> for details. -}
    , _is_enabled :: !(TF.Attribute s TF.Bool)
    {- ^ (Optional) Whether the rule should be enabled (defaults to @true@ ). -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The rule's name. -}
    , _role_arn :: !(TF.Attribute s Text)
    {- ^ (Optional) The Amazon Resource Name (ARN) associated with the role that is used for target invocation. -}
    , _schedule_expression :: !(TF.Attribute s Text)
    {- ^ (Required, if @event_pattern@ isn't specified) The scheduling expression. For example, @cron(0 20 * * ? *)@ or @rate(5 minutes)@ . -}
    } deriving (Show, Eq)

instance TF.ToHCL (CloudwatchEventRuleResource s) where
    toHCL CloudwatchEventRuleResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.attribute _description
        , TF.assign "event_pattern" <$> TF.attribute _event_pattern
        , TF.assign "is_enabled" <$> TF.attribute _is_enabled
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "role_arn" <$> TF.attribute _role_arn
        , TF.assign "schedule_expression" <$> TF.attribute _schedule_expression
        ]

instance HasDescription (CloudwatchEventRuleResource s) Text where
    type HasDescriptionThread (CloudwatchEventRuleResource s) Text = s

    description =
        lens (_description :: CloudwatchEventRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: CloudwatchEventRuleResource s)

instance HasEventPattern (CloudwatchEventRuleResource s) Text where
    type HasEventPatternThread (CloudwatchEventRuleResource s) Text = s

    eventPattern =
        lens (_event_pattern :: CloudwatchEventRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _event_pattern = a } :: CloudwatchEventRuleResource s)

instance HasIsEnabled (CloudwatchEventRuleResource s) TF.Bool where
    type HasIsEnabledThread (CloudwatchEventRuleResource s) TF.Bool = s

    isEnabled =
        lens (_is_enabled :: CloudwatchEventRuleResource s -> TF.Attribute s TF.Bool)
            (\s a -> s { _is_enabled = a } :: CloudwatchEventRuleResource s)

instance HasName (CloudwatchEventRuleResource s) Text where
    type HasNameThread (CloudwatchEventRuleResource s) Text = s

    name =
        lens (_name :: CloudwatchEventRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: CloudwatchEventRuleResource s)

instance HasRoleArn (CloudwatchEventRuleResource s) Text where
    type HasRoleArnThread (CloudwatchEventRuleResource s) Text = s

    roleArn =
        lens (_role_arn :: CloudwatchEventRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _role_arn = a } :: CloudwatchEventRuleResource s)

instance HasScheduleExpression (CloudwatchEventRuleResource s) Text where
    type HasScheduleExpressionThread (CloudwatchEventRuleResource s) Text = s

    scheduleExpression =
        lens (_schedule_expression :: CloudwatchEventRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _schedule_expression = a } :: CloudwatchEventRuleResource s)

instance HasComputedArn (CloudwatchEventRuleResource s) Text

cloudwatchEventRuleResource :: TF.Resource TF.AWS (CloudwatchEventRuleResource s)
cloudwatchEventRuleResource =
    TF.newResource "aws_cloudwatch_event_rule" $
        CloudwatchEventRuleResource {
              _description = TF.Nil
            , _event_pattern = TF.Nil
            , _is_enabled = TF.Nil
            , _name = TF.Nil
            , _role_arn = TF.Nil
            , _schedule_expression = TF.Nil
            }

{- | The @aws_cloudwatch_event_target@ AWS resource.

Provides a CloudWatch Event Target resource.
-}
data CloudwatchEventTargetResource s = CloudwatchEventTargetResource {
      _arn :: !(TF.Attribute s Text)
    {- ^ (Required) The Amazon Resource Name (ARN) associated of the target. -}
    , _ecs_target :: !(TF.Attribute s Text)
    {- ^ (Optional) Parameters used when you are using the rule to invoke Amazon ECS Task. Documented below. A maximum of 1 are allowed. -}
    , _input :: !(TF.Attribute s Text)
    {- ^ (Optional) Valid JSON text passed to the target. -}
    , _input_path :: !(TF.Attribute s Text)
    {- ^ (Optional) The value of the <http://goessner.net/articles/JsonPath/> that is used for extracting part of the matched event when passing it to the target. -}
    , _input_transformer :: !(TF.Attribute s Text)
    {- ^ (Optional) Parameters used when you are providing a custom input to a target based on certain event data. -}
    , _role_arn :: !(TF.Attribute s Text)
    {- ^ (Optional) The Amazon Resource Name (ARN) of the IAM role to be used for this target when the rule is triggered. Required if @ecs_target@ is used. -}
    , _rule :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the rule you want to add targets to. -}
    , _run_command_targets :: !(TF.Attribute s Text)
    {- ^ (Optional) Parameters used when you are using the rule to invoke Amazon EC2 Run Command. Documented below. A maximum of 5 are allowed. -}
    , _target_id :: !(TF.Attribute s Text)
    {- ^ (Optional) The unique target assignment ID.  If missing, will generate a random, unique id. -}
    } deriving (Show, Eq)

instance TF.ToHCL (CloudwatchEventTargetResource s) where
    toHCL CloudwatchEventTargetResource{..} = TF.block $ catMaybes
        [ TF.assign "arn" <$> TF.attribute _arn
        , TF.assign "ecs_target" <$> TF.attribute _ecs_target
        , TF.assign "input" <$> TF.attribute _input
        , TF.assign "input_path" <$> TF.attribute _input_path
        , TF.assign "input_transformer" <$> TF.attribute _input_transformer
        , TF.assign "role_arn" <$> TF.attribute _role_arn
        , TF.assign "rule" <$> TF.attribute _rule
        , TF.assign "run_command_targets" <$> TF.attribute _run_command_targets
        , TF.assign "target_id" <$> TF.attribute _target_id
        ]

instance HasArn (CloudwatchEventTargetResource s) Text where
    type HasArnThread (CloudwatchEventTargetResource s) Text = s

    arn =
        lens (_arn :: CloudwatchEventTargetResource s -> TF.Attribute s Text)
            (\s a -> s { _arn = a } :: CloudwatchEventTargetResource s)

instance HasEcsTarget (CloudwatchEventTargetResource s) Text where
    type HasEcsTargetThread (CloudwatchEventTargetResource s) Text = s

    ecsTarget =
        lens (_ecs_target :: CloudwatchEventTargetResource s -> TF.Attribute s Text)
            (\s a -> s { _ecs_target = a } :: CloudwatchEventTargetResource s)

instance HasInput (CloudwatchEventTargetResource s) Text where
    type HasInputThread (CloudwatchEventTargetResource s) Text = s

    input =
        lens (_input :: CloudwatchEventTargetResource s -> TF.Attribute s Text)
            (\s a -> s { _input = a } :: CloudwatchEventTargetResource s)

instance HasInputPath (CloudwatchEventTargetResource s) Text where
    type HasInputPathThread (CloudwatchEventTargetResource s) Text = s

    inputPath =
        lens (_input_path :: CloudwatchEventTargetResource s -> TF.Attribute s Text)
            (\s a -> s { _input_path = a } :: CloudwatchEventTargetResource s)

instance HasInputTransformer (CloudwatchEventTargetResource s) Text where
    type HasInputTransformerThread (CloudwatchEventTargetResource s) Text = s

    inputTransformer =
        lens (_input_transformer :: CloudwatchEventTargetResource s -> TF.Attribute s Text)
            (\s a -> s { _input_transformer = a } :: CloudwatchEventTargetResource s)

instance HasRoleArn (CloudwatchEventTargetResource s) Text where
    type HasRoleArnThread (CloudwatchEventTargetResource s) Text = s

    roleArn =
        lens (_role_arn :: CloudwatchEventTargetResource s -> TF.Attribute s Text)
            (\s a -> s { _role_arn = a } :: CloudwatchEventTargetResource s)

instance HasRule (CloudwatchEventTargetResource s) Text where
    type HasRuleThread (CloudwatchEventTargetResource s) Text = s

    rule =
        lens (_rule :: CloudwatchEventTargetResource s -> TF.Attribute s Text)
            (\s a -> s { _rule = a } :: CloudwatchEventTargetResource s)

instance HasRunCommandTargets (CloudwatchEventTargetResource s) Text where
    type HasRunCommandTargetsThread (CloudwatchEventTargetResource s) Text = s

    runCommandTargets =
        lens (_run_command_targets :: CloudwatchEventTargetResource s -> TF.Attribute s Text)
            (\s a -> s { _run_command_targets = a } :: CloudwatchEventTargetResource s)

instance HasTargetId (CloudwatchEventTargetResource s) Text where
    type HasTargetIdThread (CloudwatchEventTargetResource s) Text = s

    targetId =
        lens (_target_id :: CloudwatchEventTargetResource s -> TF.Attribute s Text)
            (\s a -> s { _target_id = a } :: CloudwatchEventTargetResource s)

cloudwatchEventTargetResource :: TF.Resource TF.AWS (CloudwatchEventTargetResource s)
cloudwatchEventTargetResource =
    TF.newResource "aws_cloudwatch_event_target" $
        CloudwatchEventTargetResource {
              _arn = TF.Nil
            , _ecs_target = TF.Nil
            , _input = TF.Nil
            , _input_path = TF.Nil
            , _input_transformer = TF.Nil
            , _role_arn = TF.Nil
            , _rule = TF.Nil
            , _run_command_targets = TF.Nil
            , _target_id = TF.Nil
            }

{- | The @aws_cloudwatch_log_destination_policy@ AWS resource.

Provides a CloudWatch Logs destination policy resource.
-}
data CloudwatchLogDestinationPolicyResource s = CloudwatchLogDestinationPolicyResource {
      _access_policy :: !(TF.Attribute s Text)
    {- ^ (Required) The policy document. This is a JSON formatted string. -}
    , _destination_name :: !(TF.Attribute s Text)
    {- ^ (Required) A name for the subscription filter -}
    } deriving (Show, Eq)

instance TF.ToHCL (CloudwatchLogDestinationPolicyResource s) where
    toHCL CloudwatchLogDestinationPolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "access_policy" <$> TF.attribute _access_policy
        , TF.assign "destination_name" <$> TF.attribute _destination_name
        ]

instance HasAccessPolicy (CloudwatchLogDestinationPolicyResource s) Text where
    type HasAccessPolicyThread (CloudwatchLogDestinationPolicyResource s) Text = s

    accessPolicy =
        lens (_access_policy :: CloudwatchLogDestinationPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _access_policy = a } :: CloudwatchLogDestinationPolicyResource s)

instance HasDestinationName (CloudwatchLogDestinationPolicyResource s) Text where
    type HasDestinationNameThread (CloudwatchLogDestinationPolicyResource s) Text = s

    destinationName =
        lens (_destination_name :: CloudwatchLogDestinationPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _destination_name = a } :: CloudwatchLogDestinationPolicyResource s)

cloudwatchLogDestinationPolicyResource :: TF.Resource TF.AWS (CloudwatchLogDestinationPolicyResource s)
cloudwatchLogDestinationPolicyResource =
    TF.newResource "aws_cloudwatch_log_destination_policy" $
        CloudwatchLogDestinationPolicyResource {
              _access_policy = TF.Nil
            , _destination_name = TF.Nil
            }

{- | The @aws_cloudwatch_log_destination@ AWS resource.

Provides a CloudWatch Logs destination resource.
-}
data CloudwatchLogDestinationResource s = CloudwatchLogDestinationResource {
      _name :: !(TF.Attribute s Text)
    {- ^ (Required) A name for the log destination -}
    , _role_arn :: !(TF.Attribute s Text)
    {- ^ (Required) The ARN of an IAM role that grants Amazon CloudWatch Logs permissions to put data into the target -}
    , _target_arn :: !(TF.Attribute s Text)
    {- ^ (Required) The ARN of the target Amazon Kinesis stream or Amazon Lambda resource for the destination -}
    } deriving (Show, Eq)

instance TF.ToHCL (CloudwatchLogDestinationResource s) where
    toHCL CloudwatchLogDestinationResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.attribute _name
        , TF.assign "role_arn" <$> TF.attribute _role_arn
        , TF.assign "target_arn" <$> TF.attribute _target_arn
        ]

instance HasName (CloudwatchLogDestinationResource s) Text where
    type HasNameThread (CloudwatchLogDestinationResource s) Text = s

    name =
        lens (_name :: CloudwatchLogDestinationResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: CloudwatchLogDestinationResource s)

instance HasRoleArn (CloudwatchLogDestinationResource s) Text where
    type HasRoleArnThread (CloudwatchLogDestinationResource s) Text = s

    roleArn =
        lens (_role_arn :: CloudwatchLogDestinationResource s -> TF.Attribute s Text)
            (\s a -> s { _role_arn = a } :: CloudwatchLogDestinationResource s)

instance HasTargetArn (CloudwatchLogDestinationResource s) Text where
    type HasTargetArnThread (CloudwatchLogDestinationResource s) Text = s

    targetArn =
        lens (_target_arn :: CloudwatchLogDestinationResource s -> TF.Attribute s Text)
            (\s a -> s { _target_arn = a } :: CloudwatchLogDestinationResource s)

instance HasComputedArn (CloudwatchLogDestinationResource s) Text

cloudwatchLogDestinationResource :: TF.Resource TF.AWS (CloudwatchLogDestinationResource s)
cloudwatchLogDestinationResource =
    TF.newResource "aws_cloudwatch_log_destination" $
        CloudwatchLogDestinationResource {
              _name = TF.Nil
            , _role_arn = TF.Nil
            , _target_arn = TF.Nil
            }

{- | The @aws_cloudwatch_log_group@ AWS resource.

Provides a CloudWatch Log Group resource.
-}
data CloudwatchLogGroupResource s = CloudwatchLogGroupResource {
      _kms_key_id :: !(TF.Attribute s Text)
    {- ^ (Optional) The ARN of the KMS Key to use when encrypting log data. Please note, after the AWS KMS CMK is disassociated from the log group, AWS CloudWatch Logs stops encrypting newly ingested data for the log group. All previously ingested data remains encrypted, and AWS CloudWatch Logs requires permissions for the CMK whenever the encrypted data is requested. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) The name of the log group. If omitted, Terraform will assign a random, unique name. -}
    , _name_prefix :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) Creates a unique name beginning with the specified prefix. Conflicts with @name@ . -}
    , _retention_in_days :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies the number of days you want to retain log events in the specified log group. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    } deriving (Show, Eq)

instance TF.ToHCL (CloudwatchLogGroupResource s) where
    toHCL CloudwatchLogGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "kms_key_id" <$> TF.attribute _kms_key_id
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "name_prefix" <$> TF.attribute _name_prefix
        , TF.assign "retention_in_days" <$> TF.attribute _retention_in_days
        , TF.assign "tags" <$> TF.attribute _tags
        ]

instance HasKmsKeyId (CloudwatchLogGroupResource s) Text where
    type HasKmsKeyIdThread (CloudwatchLogGroupResource s) Text = s

    kmsKeyId =
        lens (_kms_key_id :: CloudwatchLogGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _kms_key_id = a } :: CloudwatchLogGroupResource s)

instance HasName (CloudwatchLogGroupResource s) Text where
    type HasNameThread (CloudwatchLogGroupResource s) Text = s

    name =
        lens (_name :: CloudwatchLogGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: CloudwatchLogGroupResource s)

instance HasNamePrefix (CloudwatchLogGroupResource s) Text where
    type HasNamePrefixThread (CloudwatchLogGroupResource s) Text = s

    namePrefix =
        lens (_name_prefix :: CloudwatchLogGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _name_prefix = a } :: CloudwatchLogGroupResource s)

instance HasRetentionInDays (CloudwatchLogGroupResource s) Text where
    type HasRetentionInDaysThread (CloudwatchLogGroupResource s) Text = s

    retentionInDays =
        lens (_retention_in_days :: CloudwatchLogGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _retention_in_days = a } :: CloudwatchLogGroupResource s)

instance HasTags (CloudwatchLogGroupResource s) TF.Tags where
    type HasTagsThread (CloudwatchLogGroupResource s) TF.Tags = s

    tags =
        lens (_tags :: CloudwatchLogGroupResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: CloudwatchLogGroupResource s)

instance HasComputedArn (CloudwatchLogGroupResource s) Text

cloudwatchLogGroupResource :: TF.Resource TF.AWS (CloudwatchLogGroupResource s)
cloudwatchLogGroupResource =
    TF.newResource "aws_cloudwatch_log_group" $
        CloudwatchLogGroupResource {
              _kms_key_id = TF.Nil
            , _name = TF.Nil
            , _name_prefix = TF.Nil
            , _retention_in_days = TF.Nil
            , _tags = TF.Nil
            }

{- | The @aws_cloudwatch_log_metric_filter@ AWS resource.

Provides a CloudWatch Log Metric Filter resource.
-}
data CloudwatchLogMetricFilterResource s = CloudwatchLogMetricFilterResource {
      _log_group_name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the log group to associate the metric filter with. -}
    , _metric_transformation :: !(TF.Attribute s Text)
    {- ^ (Required) A block defining collection of information needed to define how metric data gets emitted. See below. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) A name for the metric filter. -}
    , _pattern :: !(TF.Attribute s Text)
    {- ^ (Required) A valid <https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/FilterAndPatternSyntax.html> for extracting metric data out of ingested log events. -}
    } deriving (Show, Eq)

instance TF.ToHCL (CloudwatchLogMetricFilterResource s) where
    toHCL CloudwatchLogMetricFilterResource{..} = TF.block $ catMaybes
        [ TF.assign "log_group_name" <$> TF.attribute _log_group_name
        , TF.assign "metric_transformation" <$> TF.attribute _metric_transformation
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "pattern" <$> TF.attribute _pattern
        ]

instance HasLogGroupName (CloudwatchLogMetricFilterResource s) Text where
    type HasLogGroupNameThread (CloudwatchLogMetricFilterResource s) Text = s

    logGroupName =
        lens (_log_group_name :: CloudwatchLogMetricFilterResource s -> TF.Attribute s Text)
            (\s a -> s { _log_group_name = a } :: CloudwatchLogMetricFilterResource s)

instance HasMetricTransformation (CloudwatchLogMetricFilterResource s) Text where
    type HasMetricTransformationThread (CloudwatchLogMetricFilterResource s) Text = s

    metricTransformation =
        lens (_metric_transformation :: CloudwatchLogMetricFilterResource s -> TF.Attribute s Text)
            (\s a -> s { _metric_transformation = a } :: CloudwatchLogMetricFilterResource s)

instance HasName (CloudwatchLogMetricFilterResource s) Text where
    type HasNameThread (CloudwatchLogMetricFilterResource s) Text = s

    name =
        lens (_name :: CloudwatchLogMetricFilterResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: CloudwatchLogMetricFilterResource s)

instance HasPattern (CloudwatchLogMetricFilterResource s) Text where
    type HasPatternThread (CloudwatchLogMetricFilterResource s) Text = s

    pattern =
        lens (_pattern :: CloudwatchLogMetricFilterResource s -> TF.Attribute s Text)
            (\s a -> s { _pattern = a } :: CloudwatchLogMetricFilterResource s)

instance HasComputedId (CloudwatchLogMetricFilterResource s) Text

cloudwatchLogMetricFilterResource :: TF.Resource TF.AWS (CloudwatchLogMetricFilterResource s)
cloudwatchLogMetricFilterResource =
    TF.newResource "aws_cloudwatch_log_metric_filter" $
        CloudwatchLogMetricFilterResource {
              _log_group_name = TF.Nil
            , _metric_transformation = TF.Nil
            , _name = TF.Nil
            , _pattern = TF.Nil
            }

{- | The @aws_cloudwatch_log_resource_policy@ AWS resource.

Provides a resource to manage a CloudWatch log resource policy.
-}
data CloudwatchLogResourcePolicyResource s = CloudwatchLogResourcePolicyResource {
      _policy_document :: !(TF.Attribute s Text)
    {- ^ (Required) Details of the resource policy, including the identity of the principal that is enabled to put logs to this account. This is formatted as a JSON string. Maximum length of 5120 characters. -}
    , _policy_name :: !(TF.Attribute s Text)
    {- ^ (Required) Name of the resource policy. -}
    } deriving (Show, Eq)

instance TF.ToHCL (CloudwatchLogResourcePolicyResource s) where
    toHCL CloudwatchLogResourcePolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "policy_document" <$> TF.attribute _policy_document
        , TF.assign "policy_name" <$> TF.attribute _policy_name
        ]

instance HasPolicyDocument (CloudwatchLogResourcePolicyResource s) Text where
    type HasPolicyDocumentThread (CloudwatchLogResourcePolicyResource s) Text = s

    policyDocument =
        lens (_policy_document :: CloudwatchLogResourcePolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _policy_document = a } :: CloudwatchLogResourcePolicyResource s)

instance HasPolicyName (CloudwatchLogResourcePolicyResource s) Text where
    type HasPolicyNameThread (CloudwatchLogResourcePolicyResource s) Text = s

    policyName =
        lens (_policy_name :: CloudwatchLogResourcePolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _policy_name = a } :: CloudwatchLogResourcePolicyResource s)

instance HasComputedId (CloudwatchLogResourcePolicyResource s) Text

cloudwatchLogResourcePolicyResource :: TF.Resource TF.AWS (CloudwatchLogResourcePolicyResource s)
cloudwatchLogResourcePolicyResource =
    TF.newResource "aws_cloudwatch_log_resource_policy" $
        CloudwatchLogResourcePolicyResource {
              _policy_document = TF.Nil
            , _policy_name = TF.Nil
            }

{- | The @aws_cloudwatch_log_stream@ AWS resource.

Provides a CloudWatch Log Stream resource.
-}
data CloudwatchLogStreamResource s = CloudwatchLogStreamResource {
      _log_group_name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the log group under which the log stream is to be created. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the log stream. Must not be longer than 512 characters and must not contain @:@ -}
    } deriving (Show, Eq)

instance TF.ToHCL (CloudwatchLogStreamResource s) where
    toHCL CloudwatchLogStreamResource{..} = TF.block $ catMaybes
        [ TF.assign "log_group_name" <$> TF.attribute _log_group_name
        , TF.assign "name" <$> TF.attribute _name
        ]

instance HasLogGroupName (CloudwatchLogStreamResource s) Text where
    type HasLogGroupNameThread (CloudwatchLogStreamResource s) Text = s

    logGroupName =
        lens (_log_group_name :: CloudwatchLogStreamResource s -> TF.Attribute s Text)
            (\s a -> s { _log_group_name = a } :: CloudwatchLogStreamResource s)

instance HasName (CloudwatchLogStreamResource s) Text where
    type HasNameThread (CloudwatchLogStreamResource s) Text = s

    name =
        lens (_name :: CloudwatchLogStreamResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: CloudwatchLogStreamResource s)

instance HasComputedArn (CloudwatchLogStreamResource s) Text

cloudwatchLogStreamResource :: TF.Resource TF.AWS (CloudwatchLogStreamResource s)
cloudwatchLogStreamResource =
    TF.newResource "aws_cloudwatch_log_stream" $
        CloudwatchLogStreamResource {
              _log_group_name = TF.Nil
            , _name = TF.Nil
            }

{- | The @aws_cloudwatch_log_subscription_filter@ AWS resource.

Provides a CloudWatch Logs subscription filter resource.
-}
data CloudwatchLogSubscriptionFilterResource s = CloudwatchLogSubscriptionFilterResource {
      _destination_arn :: !(TF.Attribute s Text)
    {- ^ (Required) The ARN of the destination to deliver matching log events to. Kinesis stream or Lambda function ARN. -}
    , _filter_pattern :: !(TF.Attribute s Text)
    {- ^ (Required) A valid CloudWatch Logs filter pattern for subscribing to a filtered stream of log events. -}
    , _log_group_name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the log group to associate the subscription filter with -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) A name for the subscription filter -}
    , _role_arn :: !(TF.Attribute s Text)
    {- ^ (Optional) The ARN of an IAM role that grants Amazon CloudWatch Logs permissions to deliver ingested log events to the destination. If you use Lambda as a destination, you should skip this argument and use @aws_lambda_permission@ resource for granting access from CloudWatch logs to the destination Lambda function. -}
    } deriving (Show, Eq)

instance TF.ToHCL (CloudwatchLogSubscriptionFilterResource s) where
    toHCL CloudwatchLogSubscriptionFilterResource{..} = TF.block $ catMaybes
        [ TF.assign "destination_arn" <$> TF.attribute _destination_arn
        , TF.assign "filter_pattern" <$> TF.attribute _filter_pattern
        , TF.assign "log_group_name" <$> TF.attribute _log_group_name
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "role_arn" <$> TF.attribute _role_arn
        ]

instance HasDestinationArn (CloudwatchLogSubscriptionFilterResource s) Text where
    type HasDestinationArnThread (CloudwatchLogSubscriptionFilterResource s) Text = s

    destinationArn =
        lens (_destination_arn :: CloudwatchLogSubscriptionFilterResource s -> TF.Attribute s Text)
            (\s a -> s { _destination_arn = a } :: CloudwatchLogSubscriptionFilterResource s)

instance HasFilterPattern (CloudwatchLogSubscriptionFilterResource s) Text where
    type HasFilterPatternThread (CloudwatchLogSubscriptionFilterResource s) Text = s

    filterPattern =
        lens (_filter_pattern :: CloudwatchLogSubscriptionFilterResource s -> TF.Attribute s Text)
            (\s a -> s { _filter_pattern = a } :: CloudwatchLogSubscriptionFilterResource s)

instance HasLogGroupName (CloudwatchLogSubscriptionFilterResource s) Text where
    type HasLogGroupNameThread (CloudwatchLogSubscriptionFilterResource s) Text = s

    logGroupName =
        lens (_log_group_name :: CloudwatchLogSubscriptionFilterResource s -> TF.Attribute s Text)
            (\s a -> s { _log_group_name = a } :: CloudwatchLogSubscriptionFilterResource s)

instance HasName (CloudwatchLogSubscriptionFilterResource s) Text where
    type HasNameThread (CloudwatchLogSubscriptionFilterResource s) Text = s

    name =
        lens (_name :: CloudwatchLogSubscriptionFilterResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: CloudwatchLogSubscriptionFilterResource s)

instance HasRoleArn (CloudwatchLogSubscriptionFilterResource s) Text where
    type HasRoleArnThread (CloudwatchLogSubscriptionFilterResource s) Text = s

    roleArn =
        lens (_role_arn :: CloudwatchLogSubscriptionFilterResource s -> TF.Attribute s Text)
            (\s a -> s { _role_arn = a } :: CloudwatchLogSubscriptionFilterResource s)

instance HasComputedArn (CloudwatchLogSubscriptionFilterResource s) Text

cloudwatchLogSubscriptionFilterResource :: TF.Resource TF.AWS (CloudwatchLogSubscriptionFilterResource s)
cloudwatchLogSubscriptionFilterResource =
    TF.newResource "aws_cloudwatch_log_subscription_filter" $
        CloudwatchLogSubscriptionFilterResource {
              _destination_arn = TF.Nil
            , _filter_pattern = TF.Nil
            , _log_group_name = TF.Nil
            , _name = TF.Nil
            , _role_arn = TF.Nil
            }

{- | The @aws_cloudwatch_metric_alarm@ AWS resource.

Provides a CloudWatch Metric Alarm resource.
-}
data CloudwatchMetricAlarmResource s = CloudwatchMetricAlarmResource {
      _actions_enabled :: !(TF.Attribute s TF.Bool)
    {- ^ (Optional) Indicates whether or not actions should be executed during any changes to the alarm's state. Defaults to @true@ . -}
    , _alarm_actions :: !(TF.Attribute s Text)
    {- ^ (Optional) The list of actions to execute when this alarm transitions into an ALARM state from any other state. Each action is specified as an Amazon Resource Number (ARN). -}
    , _alarm_description :: !(TF.Attribute s Text)
    {- ^ (Optional) The description for the alarm. -}
    , _alarm_name :: !(TF.Attribute s Text)
    {- ^ (Required) The descriptive name for the alarm. This name must be unique within the user's AWS account -}
    , _comparison_operator :: !(TF.Attribute s Text)
    {- ^ (Required) The arithmetic operation to use when comparing the specified Statistic and Threshold. The specified Statistic value is used as the first operand. Either of the following is supported: @GreaterThanOrEqualToThreshold@ , @GreaterThanThreshold@ , @LessThanThreshold@ , @LessThanOrEqualToThreshold@ . -}
    , _datapoints_to_alarm :: !(TF.Attribute s Text)
    {- ^ (Optional) The number of datapoints that must be breaching to trigger the alarm. -}
    , _dimensions :: !(TF.Attribute s Text)
    {- ^ (Optional) The dimensions for the alarm's associated metric.  For the list of available dimensions see the AWS documentation <http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html> . -}
    , _evaluate_low_sample_count_percentiles :: !(TF.Attribute s Text)
    {- ^ (Optional) Used only for alarms based on percentiles. If you specify @ignore@ , the alarm state will not change during periods with too few data points to be statistically significant. If you specify @evaluate@ or omit this parameter, the alarm will always be evaluated and possibly change state no matter how many data points are available. The following values are supported: @ignore@ , and @evaluate@ . -}
    , _evaluation_periods :: !(TF.Attribute s Text)
    {- ^ (Required) The number of periods over which data is compared to the specified threshold. -}
    , _extended_statistic :: !(TF.Attribute s Text)
    {- ^ (Optional) The percentile statistic for the metric associated with the alarm. Specify a value between p0.0 and p100. -}
    , _insufficient_data_actions :: !(TF.Attribute s Text)
    {- ^ (Optional) The list of actions to execute when this alarm transitions into an INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Number (ARN). -}
    , _metric_name :: !(TF.Attribute s Text)
    {- ^ (Required) The name for the alarm's associated metric. See docs for <https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html> . -}
    , _namespace :: !(TF.Attribute s Text)
    {- ^ (Required) The namespace for the alarm's associated metric. See docs for the <https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/aws-namespaces.html> . See docs for <https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html> . -}
    , _ok_actions :: !(TF.Attribute s Text)
    {- ^ (Optional) The list of actions to execute when this alarm transitions into an OK state from any other state. Each action is specified as an Amazon Resource Number (ARN). -}
    , _period :: !(TF.Attribute s Text)
    {- ^ (Required) The period in seconds over which the specified @statistic@ is applied. -}
    , _statistic :: !(TF.Attribute s Text)
    {- ^ (Optional) The statistic to apply to the alarm's associated metric. Either of the following is supported: @SampleCount@ , @Average@ , @Sum@ , @Minimum@ , @Maximum@ -}
    , _threshold :: !(TF.Attribute s Text)
    {- ^ (Required) The value against which the specified statistic is compared. -}
    , _treat_missing_data :: !(TF.Attribute s Text)
    {- ^ (Optional) Sets how this alarm is to handle missing data points. The following values are supported: @missing@ , @ignore@ , @breaching@ and @notBreaching@ . Defaults to @missing@ . -}
    , _unit :: !(TF.Attribute s Text)
    {- ^ (Optional) The unit for the alarm's associated metric. -}
    } deriving (Show, Eq)

instance TF.ToHCL (CloudwatchMetricAlarmResource s) where
    toHCL CloudwatchMetricAlarmResource{..} = TF.block $ catMaybes
        [ TF.assign "actions_enabled" <$> TF.attribute _actions_enabled
        , TF.assign "alarm_actions" <$> TF.attribute _alarm_actions
        , TF.assign "alarm_description" <$> TF.attribute _alarm_description
        , TF.assign "alarm_name" <$> TF.attribute _alarm_name
        , TF.assign "comparison_operator" <$> TF.attribute _comparison_operator
        , TF.assign "datapoints_to_alarm" <$> TF.attribute _datapoints_to_alarm
        , TF.assign "dimensions" <$> TF.attribute _dimensions
        , TF.assign "evaluate_low_sample_count_percentiles" <$> TF.attribute _evaluate_low_sample_count_percentiles
        , TF.assign "evaluation_periods" <$> TF.attribute _evaluation_periods
        , TF.assign "extended_statistic" <$> TF.attribute _extended_statistic
        , TF.assign "insufficient_data_actions" <$> TF.attribute _insufficient_data_actions
        , TF.assign "metric_name" <$> TF.attribute _metric_name
        , TF.assign "namespace" <$> TF.attribute _namespace
        , TF.assign "ok_actions" <$> TF.attribute _ok_actions
        , TF.assign "period" <$> TF.attribute _period
        , TF.assign "statistic" <$> TF.attribute _statistic
        , TF.assign "threshold" <$> TF.attribute _threshold
        , TF.assign "treat_missing_data" <$> TF.attribute _treat_missing_data
        , TF.assign "unit" <$> TF.attribute _unit
        ]

instance HasActionsEnabled (CloudwatchMetricAlarmResource s) TF.Bool where
    type HasActionsEnabledThread (CloudwatchMetricAlarmResource s) TF.Bool = s

    actionsEnabled =
        lens (_actions_enabled :: CloudwatchMetricAlarmResource s -> TF.Attribute s TF.Bool)
            (\s a -> s { _actions_enabled = a } :: CloudwatchMetricAlarmResource s)

instance HasAlarmActions (CloudwatchMetricAlarmResource s) Text where
    type HasAlarmActionsThread (CloudwatchMetricAlarmResource s) Text = s

    alarmActions =
        lens (_alarm_actions :: CloudwatchMetricAlarmResource s -> TF.Attribute s Text)
            (\s a -> s { _alarm_actions = a } :: CloudwatchMetricAlarmResource s)

instance HasAlarmDescription (CloudwatchMetricAlarmResource s) Text where
    type HasAlarmDescriptionThread (CloudwatchMetricAlarmResource s) Text = s

    alarmDescription =
        lens (_alarm_description :: CloudwatchMetricAlarmResource s -> TF.Attribute s Text)
            (\s a -> s { _alarm_description = a } :: CloudwatchMetricAlarmResource s)

instance HasAlarmName (CloudwatchMetricAlarmResource s) Text where
    type HasAlarmNameThread (CloudwatchMetricAlarmResource s) Text = s

    alarmName =
        lens (_alarm_name :: CloudwatchMetricAlarmResource s -> TF.Attribute s Text)
            (\s a -> s { _alarm_name = a } :: CloudwatchMetricAlarmResource s)

instance HasComparisonOperator (CloudwatchMetricAlarmResource s) Text where
    type HasComparisonOperatorThread (CloudwatchMetricAlarmResource s) Text = s

    comparisonOperator =
        lens (_comparison_operator :: CloudwatchMetricAlarmResource s -> TF.Attribute s Text)
            (\s a -> s { _comparison_operator = a } :: CloudwatchMetricAlarmResource s)

instance HasDatapointsToAlarm (CloudwatchMetricAlarmResource s) Text where
    type HasDatapointsToAlarmThread (CloudwatchMetricAlarmResource s) Text = s

    datapointsToAlarm =
        lens (_datapoints_to_alarm :: CloudwatchMetricAlarmResource s -> TF.Attribute s Text)
            (\s a -> s { _datapoints_to_alarm = a } :: CloudwatchMetricAlarmResource s)

instance HasDimensions (CloudwatchMetricAlarmResource s) Text where
    type HasDimensionsThread (CloudwatchMetricAlarmResource s) Text = s

    dimensions =
        lens (_dimensions :: CloudwatchMetricAlarmResource s -> TF.Attribute s Text)
            (\s a -> s { _dimensions = a } :: CloudwatchMetricAlarmResource s)

instance HasEvaluateLowSampleCountPercentiles (CloudwatchMetricAlarmResource s) Text where
    type HasEvaluateLowSampleCountPercentilesThread (CloudwatchMetricAlarmResource s) Text = s

    evaluateLowSampleCountPercentiles =
        lens (_evaluate_low_sample_count_percentiles :: CloudwatchMetricAlarmResource s -> TF.Attribute s Text)
            (\s a -> s { _evaluate_low_sample_count_percentiles = a } :: CloudwatchMetricAlarmResource s)

instance HasEvaluationPeriods (CloudwatchMetricAlarmResource s) Text where
    type HasEvaluationPeriodsThread (CloudwatchMetricAlarmResource s) Text = s

    evaluationPeriods =
        lens (_evaluation_periods :: CloudwatchMetricAlarmResource s -> TF.Attribute s Text)
            (\s a -> s { _evaluation_periods = a } :: CloudwatchMetricAlarmResource s)

instance HasExtendedStatistic (CloudwatchMetricAlarmResource s) Text where
    type HasExtendedStatisticThread (CloudwatchMetricAlarmResource s) Text = s

    extendedStatistic =
        lens (_extended_statistic :: CloudwatchMetricAlarmResource s -> TF.Attribute s Text)
            (\s a -> s { _extended_statistic = a } :: CloudwatchMetricAlarmResource s)

instance HasInsufficientDataActions (CloudwatchMetricAlarmResource s) Text where
    type HasInsufficientDataActionsThread (CloudwatchMetricAlarmResource s) Text = s

    insufficientDataActions =
        lens (_insufficient_data_actions :: CloudwatchMetricAlarmResource s -> TF.Attribute s Text)
            (\s a -> s { _insufficient_data_actions = a } :: CloudwatchMetricAlarmResource s)

instance HasMetricName (CloudwatchMetricAlarmResource s) Text where
    type HasMetricNameThread (CloudwatchMetricAlarmResource s) Text = s

    metricName =
        lens (_metric_name :: CloudwatchMetricAlarmResource s -> TF.Attribute s Text)
            (\s a -> s { _metric_name = a } :: CloudwatchMetricAlarmResource s)

instance HasNamespace (CloudwatchMetricAlarmResource s) Text where
    type HasNamespaceThread (CloudwatchMetricAlarmResource s) Text = s

    namespace =
        lens (_namespace :: CloudwatchMetricAlarmResource s -> TF.Attribute s Text)
            (\s a -> s { _namespace = a } :: CloudwatchMetricAlarmResource s)

instance HasOkActions (CloudwatchMetricAlarmResource s) Text where
    type HasOkActionsThread (CloudwatchMetricAlarmResource s) Text = s

    okActions =
        lens (_ok_actions :: CloudwatchMetricAlarmResource s -> TF.Attribute s Text)
            (\s a -> s { _ok_actions = a } :: CloudwatchMetricAlarmResource s)

instance HasPeriod (CloudwatchMetricAlarmResource s) Text where
    type HasPeriodThread (CloudwatchMetricAlarmResource s) Text = s

    period =
        lens (_period :: CloudwatchMetricAlarmResource s -> TF.Attribute s Text)
            (\s a -> s { _period = a } :: CloudwatchMetricAlarmResource s)

instance HasStatistic (CloudwatchMetricAlarmResource s) Text where
    type HasStatisticThread (CloudwatchMetricAlarmResource s) Text = s

    statistic =
        lens (_statistic :: CloudwatchMetricAlarmResource s -> TF.Attribute s Text)
            (\s a -> s { _statistic = a } :: CloudwatchMetricAlarmResource s)

instance HasThreshold (CloudwatchMetricAlarmResource s) Text where
    type HasThresholdThread (CloudwatchMetricAlarmResource s) Text = s

    threshold =
        lens (_threshold :: CloudwatchMetricAlarmResource s -> TF.Attribute s Text)
            (\s a -> s { _threshold = a } :: CloudwatchMetricAlarmResource s)

instance HasTreatMissingData (CloudwatchMetricAlarmResource s) Text where
    type HasTreatMissingDataThread (CloudwatchMetricAlarmResource s) Text = s

    treatMissingData =
        lens (_treat_missing_data :: CloudwatchMetricAlarmResource s -> TF.Attribute s Text)
            (\s a -> s { _treat_missing_data = a } :: CloudwatchMetricAlarmResource s)

instance HasUnit (CloudwatchMetricAlarmResource s) Text where
    type HasUnitThread (CloudwatchMetricAlarmResource s) Text = s

    unit =
        lens (_unit :: CloudwatchMetricAlarmResource s -> TF.Attribute s Text)
            (\s a -> s { _unit = a } :: CloudwatchMetricAlarmResource s)

instance HasComputedId (CloudwatchMetricAlarmResource s) Text

cloudwatchMetricAlarmResource :: TF.Resource TF.AWS (CloudwatchMetricAlarmResource s)
cloudwatchMetricAlarmResource =
    TF.newResource "aws_cloudwatch_metric_alarm" $
        CloudwatchMetricAlarmResource {
              _actions_enabled = TF.Nil
            , _alarm_actions = TF.Nil
            , _alarm_description = TF.Nil
            , _alarm_name = TF.Nil
            , _comparison_operator = TF.Nil
            , _datapoints_to_alarm = TF.Nil
            , _dimensions = TF.Nil
            , _evaluate_low_sample_count_percentiles = TF.Nil
            , _evaluation_periods = TF.Nil
            , _extended_statistic = TF.Nil
            , _insufficient_data_actions = TF.Nil
            , _metric_name = TF.Nil
            , _namespace = TF.Nil
            , _ok_actions = TF.Nil
            , _period = TF.Nil
            , _statistic = TF.Nil
            , _threshold = TF.Nil
            , _treat_missing_data = TF.Nil
            , _unit = TF.Nil
            }

{- | The @aws_codebuild_project@ AWS resource.

Provides a CodeBuild Project resource.
-}
data CodebuildProjectResource s = CodebuildProjectResource {
      _artifacts :: !(TF.Attribute s Text)
    {- ^ (Required) Information about the project's build output artifacts. Artifact blocks are documented below. -}
    , _build_timeout :: !(TF.Attribute s Text)
    {- ^ (Optional) How long in minutes, from 5 to 480 (8 hours), for AWS CodeBuild to wait until timing out any related build that does not get marked as completed. The default is 60 minutes. -}
    , _description :: !(TF.Attribute s Text)
    {- ^ (Optional) A short description of the project. -}
    , _encryption_key :: !(TF.Attribute s Text)
    {- ^ (Optional) The AWS Key Management Service (AWS KMS) customer master key (CMK) to be used for encrypting the build project's build output artifacts. -}
    , _environment :: !(TF.Attribute s Text)
    {- ^ (Required) Information about the project's build environment. Environment blocks are documented below. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The projects name. -}
    , _service_role :: !(TF.Attribute s Text)
    {- ^ (Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that enables AWS CodeBuild to interact with dependent AWS services on behalf of the AWS account. -}
    , _source :: !(TF.Attribute s Text)
    {- ^ (Required) Information about the project's input source code. Source blocks are documented below. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    } deriving (Show, Eq)

instance TF.ToHCL (CodebuildProjectResource s) where
    toHCL CodebuildProjectResource{..} = TF.block $ catMaybes
        [ TF.assign "artifacts" <$> TF.attribute _artifacts
        , TF.assign "build_timeout" <$> TF.attribute _build_timeout
        , TF.assign "description" <$> TF.attribute _description
        , TF.assign "encryption_key" <$> TF.attribute _encryption_key
        , TF.assign "environment" <$> TF.attribute _environment
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "service_role" <$> TF.attribute _service_role
        , TF.assign "source" <$> TF.attribute _source
        , TF.assign "tags" <$> TF.attribute _tags
        ]

instance HasArtifacts (CodebuildProjectResource s) Text where
    type HasArtifactsThread (CodebuildProjectResource s) Text = s

    artifacts =
        lens (_artifacts :: CodebuildProjectResource s -> TF.Attribute s Text)
            (\s a -> s { _artifacts = a } :: CodebuildProjectResource s)

instance HasBuildTimeout (CodebuildProjectResource s) Text where
    type HasBuildTimeoutThread (CodebuildProjectResource s) Text = s

    buildTimeout =
        lens (_build_timeout :: CodebuildProjectResource s -> TF.Attribute s Text)
            (\s a -> s { _build_timeout = a } :: CodebuildProjectResource s)

instance HasDescription (CodebuildProjectResource s) Text where
    type HasDescriptionThread (CodebuildProjectResource s) Text = s

    description =
        lens (_description :: CodebuildProjectResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: CodebuildProjectResource s)

instance HasEncryptionKey (CodebuildProjectResource s) Text where
    type HasEncryptionKeyThread (CodebuildProjectResource s) Text = s

    encryptionKey =
        lens (_encryption_key :: CodebuildProjectResource s -> TF.Attribute s Text)
            (\s a -> s { _encryption_key = a } :: CodebuildProjectResource s)

instance HasEnvironment (CodebuildProjectResource s) Text where
    type HasEnvironmentThread (CodebuildProjectResource s) Text = s

    environment =
        lens (_environment :: CodebuildProjectResource s -> TF.Attribute s Text)
            (\s a -> s { _environment = a } :: CodebuildProjectResource s)

instance HasName (CodebuildProjectResource s) Text where
    type HasNameThread (CodebuildProjectResource s) Text = s

    name =
        lens (_name :: CodebuildProjectResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: CodebuildProjectResource s)

instance HasServiceRole (CodebuildProjectResource s) Text where
    type HasServiceRoleThread (CodebuildProjectResource s) Text = s

    serviceRole =
        lens (_service_role :: CodebuildProjectResource s -> TF.Attribute s Text)
            (\s a -> s { _service_role = a } :: CodebuildProjectResource s)

instance HasSource (CodebuildProjectResource s) Text where
    type HasSourceThread (CodebuildProjectResource s) Text = s

    source =
        lens (_source :: CodebuildProjectResource s -> TF.Attribute s Text)
            (\s a -> s { _source = a } :: CodebuildProjectResource s)

instance HasTags (CodebuildProjectResource s) TF.Tags where
    type HasTagsThread (CodebuildProjectResource s) TF.Tags = s

    tags =
        lens (_tags :: CodebuildProjectResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: CodebuildProjectResource s)

instance HasComputedDescription (CodebuildProjectResource s) Text

instance HasComputedEncryptionKey (CodebuildProjectResource s) Text

instance HasComputedId (CodebuildProjectResource s) Text

instance HasComputedName (CodebuildProjectResource s) Text

instance HasComputedServiceRole (CodebuildProjectResource s) Text

codebuildProjectResource :: TF.Resource TF.AWS (CodebuildProjectResource s)
codebuildProjectResource =
    TF.newResource "aws_codebuild_project" $
        CodebuildProjectResource {
              _artifacts = TF.Nil
            , _build_timeout = TF.Nil
            , _description = TF.Nil
            , _encryption_key = TF.Nil
            , _environment = TF.Nil
            , _name = TF.Nil
            , _service_role = TF.Nil
            , _source = TF.Nil
            , _tags = TF.Nil
            }

{- | The @aws_codecommit_repository@ AWS resource.

Provides a CodeCommit Repository Resource. ~> NOTE on CodeCommit
Availability : The CodeCommit is not yet rolled out in all regions -
available regions are listed
<https://docs.aws.amazon.com/general/latest/gr/rande.html#codecommit_region>
.
-}
data CodecommitRepositoryResource s = CodecommitRepositoryResource {
      _default_branch :: !(TF.Attribute s Text)
    {- ^ (Optional) The default branch of the repository. The branch specified here needs to exist. -}
    , _description :: !(TF.Attribute s Text)
    {- ^ (Optional) The description of the repository. This needs to be less than 1000 characters -}
    , _repository_name :: !(TF.Attribute s Text)
    {- ^ (Required) The name for the repository. This needs to be less than 100 characters. -}
    } deriving (Show, Eq)

instance TF.ToHCL (CodecommitRepositoryResource s) where
    toHCL CodecommitRepositoryResource{..} = TF.block $ catMaybes
        [ TF.assign "default_branch" <$> TF.attribute _default_branch
        , TF.assign "description" <$> TF.attribute _description
        , TF.assign "repository_name" <$> TF.attribute _repository_name
        ]

instance HasDefaultBranch (CodecommitRepositoryResource s) Text where
    type HasDefaultBranchThread (CodecommitRepositoryResource s) Text = s

    defaultBranch =
        lens (_default_branch :: CodecommitRepositoryResource s -> TF.Attribute s Text)
            (\s a -> s { _default_branch = a } :: CodecommitRepositoryResource s)

instance HasDescription (CodecommitRepositoryResource s) Text where
    type HasDescriptionThread (CodecommitRepositoryResource s) Text = s

    description =
        lens (_description :: CodecommitRepositoryResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: CodecommitRepositoryResource s)

instance HasRepositoryName (CodecommitRepositoryResource s) Text where
    type HasRepositoryNameThread (CodecommitRepositoryResource s) Text = s

    repositoryName =
        lens (_repository_name :: CodecommitRepositoryResource s -> TF.Attribute s Text)
            (\s a -> s { _repository_name = a } :: CodecommitRepositoryResource s)

instance HasComputedArn (CodecommitRepositoryResource s) Text

instance HasComputedCloneUrlHttp (CodecommitRepositoryResource s) Text

instance HasComputedCloneUrlSsh (CodecommitRepositoryResource s) Text

instance HasComputedRepositoryId (CodecommitRepositoryResource s) Text

codecommitRepositoryResource :: TF.Resource TF.AWS (CodecommitRepositoryResource s)
codecommitRepositoryResource =
    TF.newResource "aws_codecommit_repository" $
        CodecommitRepositoryResource {
              _default_branch = TF.Nil
            , _description = TF.Nil
            , _repository_name = TF.Nil
            }

{- | The @aws_codecommit_trigger@ AWS resource.

Provides a CodeCommit Trigger Resource. ~> NOTE on CodeCommit : The
CodeCommit is not yet rolled out in all regions - available regions are
listed
<https://docs.aws.amazon.com/general/latest/gr/rande.html#codecommit_region>
.
-}
data CodecommitTriggerResource s = CodecommitTriggerResource {
      _branches :: !(TF.Attribute s Text)
    {- ^ (Optional) The branches that will be included in the trigger configuration. If no branches are specified, the trigger will apply to all branches. -}
    , _custom_data :: !(TF.Attribute s Text)
    {- ^ (Optional) Any custom data associated with the trigger that will be included in the information sent to the target of the trigger. -}
    , _destination_arn :: !(TF.Attribute s Text)
    {- ^ (Required) The ARN of the resource that is the target for a trigger. For example, the ARN of a topic in Amazon Simple Notification Service (SNS). -}
    , _events :: !(TF.Attribute s Text)
    {- ^ (Required) The repository events that will cause the trigger to run actions in another service, such as sending a notification through Amazon Simple Notification Service (SNS). If no events are specified, the trigger will run for all repository events. Event types include: @all@ , @updateReference@ , @createReference@ , @deleteReference@ . -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the trigger. -}
    , _repository_name :: !(TF.Attribute s Text)
    {- ^ (Required) The name for the repository. This needs to be less than 100 characters. -}
    } deriving (Show, Eq)

instance TF.ToHCL (CodecommitTriggerResource s) where
    toHCL CodecommitTriggerResource{..} = TF.block $ catMaybes
        [ TF.assign "branches" <$> TF.attribute _branches
        , TF.assign "custom_data" <$> TF.attribute _custom_data
        , TF.assign "destination_arn" <$> TF.attribute _destination_arn
        , TF.assign "events" <$> TF.attribute _events
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "repository_name" <$> TF.attribute _repository_name
        ]

instance HasBranches (CodecommitTriggerResource s) Text where
    type HasBranchesThread (CodecommitTriggerResource s) Text = s

    branches =
        lens (_branches :: CodecommitTriggerResource s -> TF.Attribute s Text)
            (\s a -> s { _branches = a } :: CodecommitTriggerResource s)

instance HasCustomData (CodecommitTriggerResource s) Text where
    type HasCustomDataThread (CodecommitTriggerResource s) Text = s

    customData =
        lens (_custom_data :: CodecommitTriggerResource s -> TF.Attribute s Text)
            (\s a -> s { _custom_data = a } :: CodecommitTriggerResource s)

instance HasDestinationArn (CodecommitTriggerResource s) Text where
    type HasDestinationArnThread (CodecommitTriggerResource s) Text = s

    destinationArn =
        lens (_destination_arn :: CodecommitTriggerResource s -> TF.Attribute s Text)
            (\s a -> s { _destination_arn = a } :: CodecommitTriggerResource s)

instance HasEvents (CodecommitTriggerResource s) Text where
    type HasEventsThread (CodecommitTriggerResource s) Text = s

    events =
        lens (_events :: CodecommitTriggerResource s -> TF.Attribute s Text)
            (\s a -> s { _events = a } :: CodecommitTriggerResource s)

instance HasName (CodecommitTriggerResource s) Text where
    type HasNameThread (CodecommitTriggerResource s) Text = s

    name =
        lens (_name :: CodecommitTriggerResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: CodecommitTriggerResource s)

instance HasRepositoryName (CodecommitTriggerResource s) Text where
    type HasRepositoryNameThread (CodecommitTriggerResource s) Text = s

    repositoryName =
        lens (_repository_name :: CodecommitTriggerResource s -> TF.Attribute s Text)
            (\s a -> s { _repository_name = a } :: CodecommitTriggerResource s)

codecommitTriggerResource :: TF.Resource TF.AWS (CodecommitTriggerResource s)
codecommitTriggerResource =
    TF.newResource "aws_codecommit_trigger" $
        CodecommitTriggerResource {
              _branches = TF.Nil
            , _custom_data = TF.Nil
            , _destination_arn = TF.Nil
            , _events = TF.Nil
            , _name = TF.Nil
            , _repository_name = TF.Nil
            }

{- | The @aws_codedeploy_app@ AWS resource.

Provides a CodeDeploy application to be used as a basis for deployments
-}
data CodedeployAppResource s = CodedeployAppResource {
      _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the application. -}
    } deriving (Show, Eq)

instance TF.ToHCL (CodedeployAppResource s) where
    toHCL CodedeployAppResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.attribute _name
        ]

instance HasName (CodedeployAppResource s) Text where
    type HasNameThread (CodedeployAppResource s) Text = s

    name =
        lens (_name :: CodedeployAppResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: CodedeployAppResource s)

instance HasComputedId (CodedeployAppResource s) Text

instance HasComputedName (CodedeployAppResource s) Text

codedeployAppResource :: TF.Resource TF.AWS (CodedeployAppResource s)
codedeployAppResource =
    TF.newResource "aws_codedeploy_app" $
        CodedeployAppResource {
              _name = TF.Nil
            }

{- | The @aws_codedeploy_deployment_config@ AWS resource.

Provides a CodeDeploy deployment config for an application
-}
data CodedeployDeploymentConfigResource s = CodedeployDeploymentConfigResource {
      _deployment_config_name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the deployment config. -}
    , _minimum_healthy_hosts :: !(TF.Attribute s Text)
    {- ^ (Optional) A minimum_healthy_hosts block. Minimum Healthy Hosts are documented below. -}
    } deriving (Show, Eq)

instance TF.ToHCL (CodedeployDeploymentConfigResource s) where
    toHCL CodedeployDeploymentConfigResource{..} = TF.block $ catMaybes
        [ TF.assign "deployment_config_name" <$> TF.attribute _deployment_config_name
        , TF.assign "minimum_healthy_hosts" <$> TF.attribute _minimum_healthy_hosts
        ]

instance HasDeploymentConfigName (CodedeployDeploymentConfigResource s) Text where
    type HasDeploymentConfigNameThread (CodedeployDeploymentConfigResource s) Text = s

    deploymentConfigName =
        lens (_deployment_config_name :: CodedeployDeploymentConfigResource s -> TF.Attribute s Text)
            (\s a -> s { _deployment_config_name = a } :: CodedeployDeploymentConfigResource s)

instance HasMinimumHealthyHosts (CodedeployDeploymentConfigResource s) Text where
    type HasMinimumHealthyHostsThread (CodedeployDeploymentConfigResource s) Text = s

    minimumHealthyHosts =
        lens (_minimum_healthy_hosts :: CodedeployDeploymentConfigResource s -> TF.Attribute s Text)
            (\s a -> s { _minimum_healthy_hosts = a } :: CodedeployDeploymentConfigResource s)

instance HasComputedDeploymentConfigId (CodedeployDeploymentConfigResource s) Text

instance HasComputedId (CodedeployDeploymentConfigResource s) Text

codedeployDeploymentConfigResource :: TF.Resource TF.AWS (CodedeployDeploymentConfigResource s)
codedeployDeploymentConfigResource =
    TF.newResource "aws_codedeploy_deployment_config" $
        CodedeployDeploymentConfigResource {
              _deployment_config_name = TF.Nil
            , _minimum_healthy_hosts = TF.Nil
            }

{- | The @aws_codedeploy_deployment_group@ AWS resource.

Provides a CodeDeploy Deployment Group for a CodeDeploy Application
-}
data CodedeployDeploymentGroupResource s = CodedeployDeploymentGroupResource {
      _alarm_configuration :: !(TF.Attribute s Text)
    {- ^ (Optional) Information about alarms associated with the deployment group (documented below). -}
    , _app_name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the application. -}
    , _auto_rollback_configuration :: !(TF.Attribute s Text)
    {- ^ (Optional) The automatic rollback configuration associated with the deployment group (documented below). -}
    , _autoscaling_groups :: !(TF.Attribute s Text)
    {- ^ (Optional) Autoscaling groups associated with the deployment group. -}
    , _blue_green_deployment_config :: !(TF.Attribute s Text)
    {- ^ (Optional) Information about blue/green deployment options for a deployment group (documented below). -}
    , _deployment_config_name :: !(TF.Attribute s Text)
    {- ^ (Optional) The name of the group's deployment config. The default is "CodeDeployDefault.OneAtATime". -}
    , _deployment_group_name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the deployment group. -}
    , _deployment_style :: !(TF.Attribute s Text)
    {- ^ (Optional) Information about the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer (documented below). -}
    , _ec2_tag_filter :: !(TF.Attribute s Text)
    {- ^ (Optional) Tag filters associated with the group. See the AWS docs for details. -}
    , _load_balancer_info :: !(TF.Attribute s Text)
    {- ^ (Optional) Information about the load balancer to use in a blue/green deployment (documented below). -}
    , _on_premises_instance_tag_filter :: !(TF.Attribute s Text)
    {- ^ (Optional) On premise tag filters associated with the group. See the AWS docs for details. -}
    , _service_role_arn :: !(TF.Attribute s Text)
    {- ^ (Required) The service role ARN that allows deployments. -}
    , _trigger_configuration :: !(TF.Attribute s Text)
    {- ^ (Optional) Trigger Configurations for the deployment group (documented below). -}
    } deriving (Show, Eq)

instance TF.ToHCL (CodedeployDeploymentGroupResource s) where
    toHCL CodedeployDeploymentGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "alarm_configuration" <$> TF.attribute _alarm_configuration
        , TF.assign "app_name" <$> TF.attribute _app_name
        , TF.assign "auto_rollback_configuration" <$> TF.attribute _auto_rollback_configuration
        , TF.assign "autoscaling_groups" <$> TF.attribute _autoscaling_groups
        , TF.assign "blue_green_deployment_config" <$> TF.attribute _blue_green_deployment_config
        , TF.assign "deployment_config_name" <$> TF.attribute _deployment_config_name
        , TF.assign "deployment_group_name" <$> TF.attribute _deployment_group_name
        , TF.assign "deployment_style" <$> TF.attribute _deployment_style
        , TF.assign "ec2_tag_filter" <$> TF.attribute _ec2_tag_filter
        , TF.assign "load_balancer_info" <$> TF.attribute _load_balancer_info
        , TF.assign "on_premises_instance_tag_filter" <$> TF.attribute _on_premises_instance_tag_filter
        , TF.assign "service_role_arn" <$> TF.attribute _service_role_arn
        , TF.assign "trigger_configuration" <$> TF.attribute _trigger_configuration
        ]

instance HasAlarmConfiguration (CodedeployDeploymentGroupResource s) Text where
    type HasAlarmConfigurationThread (CodedeployDeploymentGroupResource s) Text = s

    alarmConfiguration =
        lens (_alarm_configuration :: CodedeployDeploymentGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _alarm_configuration = a } :: CodedeployDeploymentGroupResource s)

instance HasAppName (CodedeployDeploymentGroupResource s) Text where
    type HasAppNameThread (CodedeployDeploymentGroupResource s) Text = s

    appName =
        lens (_app_name :: CodedeployDeploymentGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _app_name = a } :: CodedeployDeploymentGroupResource s)

instance HasAutoRollbackConfiguration (CodedeployDeploymentGroupResource s) Text where
    type HasAutoRollbackConfigurationThread (CodedeployDeploymentGroupResource s) Text = s

    autoRollbackConfiguration =
        lens (_auto_rollback_configuration :: CodedeployDeploymentGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_rollback_configuration = a } :: CodedeployDeploymentGroupResource s)

instance HasAutoscalingGroups (CodedeployDeploymentGroupResource s) Text where
    type HasAutoscalingGroupsThread (CodedeployDeploymentGroupResource s) Text = s

    autoscalingGroups =
        lens (_autoscaling_groups :: CodedeployDeploymentGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _autoscaling_groups = a } :: CodedeployDeploymentGroupResource s)

instance HasBlueGreenDeploymentConfig (CodedeployDeploymentGroupResource s) Text where
    type HasBlueGreenDeploymentConfigThread (CodedeployDeploymentGroupResource s) Text = s

    blueGreenDeploymentConfig =
        lens (_blue_green_deployment_config :: CodedeployDeploymentGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _blue_green_deployment_config = a } :: CodedeployDeploymentGroupResource s)

instance HasDeploymentConfigName (CodedeployDeploymentGroupResource s) Text where
    type HasDeploymentConfigNameThread (CodedeployDeploymentGroupResource s) Text = s

    deploymentConfigName =
        lens (_deployment_config_name :: CodedeployDeploymentGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _deployment_config_name = a } :: CodedeployDeploymentGroupResource s)

instance HasDeploymentGroupName (CodedeployDeploymentGroupResource s) Text where
    type HasDeploymentGroupNameThread (CodedeployDeploymentGroupResource s) Text = s

    deploymentGroupName =
        lens (_deployment_group_name :: CodedeployDeploymentGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _deployment_group_name = a } :: CodedeployDeploymentGroupResource s)

instance HasDeploymentStyle (CodedeployDeploymentGroupResource s) Text where
    type HasDeploymentStyleThread (CodedeployDeploymentGroupResource s) Text = s

    deploymentStyle =
        lens (_deployment_style :: CodedeployDeploymentGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _deployment_style = a } :: CodedeployDeploymentGroupResource s)

instance HasEc2TagFilter (CodedeployDeploymentGroupResource s) Text where
    type HasEc2TagFilterThread (CodedeployDeploymentGroupResource s) Text = s

    ec2TagFilter =
        lens (_ec2_tag_filter :: CodedeployDeploymentGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _ec2_tag_filter = a } :: CodedeployDeploymentGroupResource s)

instance HasLoadBalancerInfo (CodedeployDeploymentGroupResource s) Text where
    type HasLoadBalancerInfoThread (CodedeployDeploymentGroupResource s) Text = s

    loadBalancerInfo =
        lens (_load_balancer_info :: CodedeployDeploymentGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _load_balancer_info = a } :: CodedeployDeploymentGroupResource s)

instance HasOnPremisesInstanceTagFilter (CodedeployDeploymentGroupResource s) Text where
    type HasOnPremisesInstanceTagFilterThread (CodedeployDeploymentGroupResource s) Text = s

    onPremisesInstanceTagFilter =
        lens (_on_premises_instance_tag_filter :: CodedeployDeploymentGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _on_premises_instance_tag_filter = a } :: CodedeployDeploymentGroupResource s)

instance HasServiceRoleArn (CodedeployDeploymentGroupResource s) Text where
    type HasServiceRoleArnThread (CodedeployDeploymentGroupResource s) Text = s

    serviceRoleArn =
        lens (_service_role_arn :: CodedeployDeploymentGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _service_role_arn = a } :: CodedeployDeploymentGroupResource s)

instance HasTriggerConfiguration (CodedeployDeploymentGroupResource s) Text where
    type HasTriggerConfigurationThread (CodedeployDeploymentGroupResource s) Text = s

    triggerConfiguration =
        lens (_trigger_configuration :: CodedeployDeploymentGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _trigger_configuration = a } :: CodedeployDeploymentGroupResource s)

codedeployDeploymentGroupResource :: TF.Resource TF.AWS (CodedeployDeploymentGroupResource s)
codedeployDeploymentGroupResource =
    TF.newResource "aws_codedeploy_deployment_group" $
        CodedeployDeploymentGroupResource {
              _alarm_configuration = TF.Nil
            , _app_name = TF.Nil
            , _auto_rollback_configuration = TF.Nil
            , _autoscaling_groups = TF.Nil
            , _blue_green_deployment_config = TF.Nil
            , _deployment_config_name = TF.Nil
            , _deployment_group_name = TF.Nil
            , _deployment_style = TF.Nil
            , _ec2_tag_filter = TF.Nil
            , _load_balancer_info = TF.Nil
            , _on_premises_instance_tag_filter = TF.Nil
            , _service_role_arn = TF.Nil
            , _trigger_configuration = TF.Nil
            }

{- | The @aws_codepipeline@ AWS resource.

Provides a CodePipeline. ~> NOTE on @aws_codepipeline@ : - the
@GITHUB_TOKEN@ environment variable must be set if the GitHub provider is
specified.
-}
data CodepipelineResource s = CodepipelineResource {
      _artifact_store :: !(TF.Attribute s Text)
    {- ^ (Required) An artifact_store block. Artifact stores are documented below. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the pipeline. -}
    , _role_arn :: !(TF.Attribute s Text)
    {- ^ (Required) A service role Amazon Resource Name (ARN) that grants AWS CodePipeline permission to make calls to AWS services on your behalf. -}
    , _stage :: !(TF.Attribute s Text)
    {- ^ (Required) A stage block. Stages are documented below. -}
    } deriving (Show, Eq)

instance TF.ToHCL (CodepipelineResource s) where
    toHCL CodepipelineResource{..} = TF.block $ catMaybes
        [ TF.assign "artifact_store" <$> TF.attribute _artifact_store
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "role_arn" <$> TF.attribute _role_arn
        , TF.assign "stage" <$> TF.attribute _stage
        ]

instance HasArtifactStore (CodepipelineResource s) Text where
    type HasArtifactStoreThread (CodepipelineResource s) Text = s

    artifactStore =
        lens (_artifact_store :: CodepipelineResource s -> TF.Attribute s Text)
            (\s a -> s { _artifact_store = a } :: CodepipelineResource s)

instance HasName (CodepipelineResource s) Text where
    type HasNameThread (CodepipelineResource s) Text = s

    name =
        lens (_name :: CodepipelineResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: CodepipelineResource s)

instance HasRoleArn (CodepipelineResource s) Text where
    type HasRoleArnThread (CodepipelineResource s) Text = s

    roleArn =
        lens (_role_arn :: CodepipelineResource s -> TF.Attribute s Text)
            (\s a -> s { _role_arn = a } :: CodepipelineResource s)

instance HasStage (CodepipelineResource s) Text where
    type HasStageThread (CodepipelineResource s) Text = s

    stage =
        lens (_stage :: CodepipelineResource s -> TF.Attribute s Text)
            (\s a -> s { _stage = a } :: CodepipelineResource s)

instance HasComputedArn (CodepipelineResource s) Text

instance HasComputedId (CodepipelineResource s) Text

codepipelineResource :: TF.Resource TF.AWS (CodepipelineResource s)
codepipelineResource =
    TF.newResource "aws_codepipeline" $
        CodepipelineResource {
              _artifact_store = TF.Nil
            , _name = TF.Nil
            , _role_arn = TF.Nil
            , _stage = TF.Nil
            }

{- | The @aws_cognito_identity_pool@ AWS resource.

Provides an AWS Cognito Identity Pool.
-}
data CognitoIdentityPoolResource s = CognitoIdentityPoolResource {
      _allow_unauthenticated_identities :: !(TF.Attribute s Text)
    {- ^ (Required) - Whether the identity pool supports unauthenticated logins or not. -}
    , _cognito_identity_providers :: !(TF.Attribute s Text)
    {- ^ (Optional) - An array of <#cognito-identity-providers> and their client IDs. -}
    , _developer_provider_name :: !(TF.Attribute s Text)
    {- ^ (Optional) - The "domain" by which Cognito will refer to your users. This name acts as a placeholder that allows your backend and the Cognito service to communicate about the developer provider. -}
    , _identity_pool_name :: !(TF.Attribute s Text)
    {- ^ (Required) - The Cognito Identity Pool name. -}
    , _openid_connect_provider_arns :: !(TF.Attribute s Text)
    {- ^ (Optional) - A list of OpendID Connect provider ARNs. -}
    , _saml_provider_arns :: !(TF.Attribute s Text)
    {- ^ (Optional) - An array of Amazon Resource Names (ARNs) of the SAML provider for your identity. -}
    , _supported_login_providers :: !(TF.Attribute s Text)
    {- ^ (Optional) - Key-Value pairs mapping provider names to provider app IDs. -}
    } deriving (Show, Eq)

instance TF.ToHCL (CognitoIdentityPoolResource s) where
    toHCL CognitoIdentityPoolResource{..} = TF.block $ catMaybes
        [ TF.assign "allow_unauthenticated_identities" <$> TF.attribute _allow_unauthenticated_identities
        , TF.assign "cognito_identity_providers" <$> TF.attribute _cognito_identity_providers
        , TF.assign "developer_provider_name" <$> TF.attribute _developer_provider_name
        , TF.assign "identity_pool_name" <$> TF.attribute _identity_pool_name
        , TF.assign "openid_connect_provider_arns" <$> TF.attribute _openid_connect_provider_arns
        , TF.assign "saml_provider_arns" <$> TF.attribute _saml_provider_arns
        , TF.assign "supported_login_providers" <$> TF.attribute _supported_login_providers
        ]

instance HasAllowUnauthenticatedIdentities (CognitoIdentityPoolResource s) Text where
    type HasAllowUnauthenticatedIdentitiesThread (CognitoIdentityPoolResource s) Text = s

    allowUnauthenticatedIdentities =
        lens (_allow_unauthenticated_identities :: CognitoIdentityPoolResource s -> TF.Attribute s Text)
            (\s a -> s { _allow_unauthenticated_identities = a } :: CognitoIdentityPoolResource s)

instance HasCognitoIdentityProviders (CognitoIdentityPoolResource s) Text where
    type HasCognitoIdentityProvidersThread (CognitoIdentityPoolResource s) Text = s

    cognitoIdentityProviders =
        lens (_cognito_identity_providers :: CognitoIdentityPoolResource s -> TF.Attribute s Text)
            (\s a -> s { _cognito_identity_providers = a } :: CognitoIdentityPoolResource s)

instance HasDeveloperProviderName (CognitoIdentityPoolResource s) Text where
    type HasDeveloperProviderNameThread (CognitoIdentityPoolResource s) Text = s

    developerProviderName =
        lens (_developer_provider_name :: CognitoIdentityPoolResource s -> TF.Attribute s Text)
            (\s a -> s { _developer_provider_name = a } :: CognitoIdentityPoolResource s)

instance HasIdentityPoolName (CognitoIdentityPoolResource s) Text where
    type HasIdentityPoolNameThread (CognitoIdentityPoolResource s) Text = s

    identityPoolName =
        lens (_identity_pool_name :: CognitoIdentityPoolResource s -> TF.Attribute s Text)
            (\s a -> s { _identity_pool_name = a } :: CognitoIdentityPoolResource s)

instance HasOpenidConnectProviderArns (CognitoIdentityPoolResource s) Text where
    type HasOpenidConnectProviderArnsThread (CognitoIdentityPoolResource s) Text = s

    openidConnectProviderArns =
        lens (_openid_connect_provider_arns :: CognitoIdentityPoolResource s -> TF.Attribute s Text)
            (\s a -> s { _openid_connect_provider_arns = a } :: CognitoIdentityPoolResource s)

instance HasSamlProviderArns (CognitoIdentityPoolResource s) Text where
    type HasSamlProviderArnsThread (CognitoIdentityPoolResource s) Text = s

    samlProviderArns =
        lens (_saml_provider_arns :: CognitoIdentityPoolResource s -> TF.Attribute s Text)
            (\s a -> s { _saml_provider_arns = a } :: CognitoIdentityPoolResource s)

instance HasSupportedLoginProviders (CognitoIdentityPoolResource s) Text where
    type HasSupportedLoginProvidersThread (CognitoIdentityPoolResource s) Text = s

    supportedLoginProviders =
        lens (_supported_login_providers :: CognitoIdentityPoolResource s -> TF.Attribute s Text)
            (\s a -> s { _supported_login_providers = a } :: CognitoIdentityPoolResource s)

cognitoIdentityPoolResource :: TF.Resource TF.AWS (CognitoIdentityPoolResource s)
cognitoIdentityPoolResource =
    TF.newResource "aws_cognito_identity_pool" $
        CognitoIdentityPoolResource {
              _allow_unauthenticated_identities = TF.Nil
            , _cognito_identity_providers = TF.Nil
            , _developer_provider_name = TF.Nil
            , _identity_pool_name = TF.Nil
            , _openid_connect_provider_arns = TF.Nil
            , _saml_provider_arns = TF.Nil
            , _supported_login_providers = TF.Nil
            }

{- | The @aws_cognito_identity_pool_roles_attachment@ AWS resource.

Provides an AWS Cognito Identity Pool Roles Attachment.
-}
data CognitoIdentityPoolRolesAttachmentResource s = CognitoIdentityPoolRolesAttachmentResource {
      _identity_pool_id :: !(TF.Attribute s Text)
    {- ^ (Required) - An identity pool ID in the format REGION:GUID. -}
    , _role_mapping :: !(TF.Attribute s Text)
    {- ^ (Optional) - A List of <#role-mappings> . -}
    , _roles :: !(TF.Attribute s Text)
    {- ^ (Required) - The map of roles associated with this pool. For a given role, the key will be either "authenticated" or "unauthenticated" and the value will be the Role ARN. -}
    } deriving (Show, Eq)

instance TF.ToHCL (CognitoIdentityPoolRolesAttachmentResource s) where
    toHCL CognitoIdentityPoolRolesAttachmentResource{..} = TF.block $ catMaybes
        [ TF.assign "identity_pool_id" <$> TF.attribute _identity_pool_id
        , TF.assign "role_mapping" <$> TF.attribute _role_mapping
        , TF.assign "roles" <$> TF.attribute _roles
        ]

instance HasIdentityPoolId (CognitoIdentityPoolRolesAttachmentResource s) Text where
    type HasIdentityPoolIdThread (CognitoIdentityPoolRolesAttachmentResource s) Text = s

    identityPoolId =
        lens (_identity_pool_id :: CognitoIdentityPoolRolesAttachmentResource s -> TF.Attribute s Text)
            (\s a -> s { _identity_pool_id = a } :: CognitoIdentityPoolRolesAttachmentResource s)

instance HasRoleMapping (CognitoIdentityPoolRolesAttachmentResource s) Text where
    type HasRoleMappingThread (CognitoIdentityPoolRolesAttachmentResource s) Text = s

    roleMapping =
        lens (_role_mapping :: CognitoIdentityPoolRolesAttachmentResource s -> TF.Attribute s Text)
            (\s a -> s { _role_mapping = a } :: CognitoIdentityPoolRolesAttachmentResource s)

instance HasRoles (CognitoIdentityPoolRolesAttachmentResource s) Text where
    type HasRolesThread (CognitoIdentityPoolRolesAttachmentResource s) Text = s

    roles =
        lens (_roles :: CognitoIdentityPoolRolesAttachmentResource s -> TF.Attribute s Text)
            (\s a -> s { _roles = a } :: CognitoIdentityPoolRolesAttachmentResource s)

cognitoIdentityPoolRolesAttachmentResource :: TF.Resource TF.AWS (CognitoIdentityPoolRolesAttachmentResource s)
cognitoIdentityPoolRolesAttachmentResource =
    TF.newResource "aws_cognito_identity_pool_roles_attachment" $
        CognitoIdentityPoolRolesAttachmentResource {
              _identity_pool_id = TF.Nil
            , _role_mapping = TF.Nil
            , _roles = TF.Nil
            }

{- | The @aws_cognito_user_pool_client@ AWS resource.

Provides a Cognito User Pool Client resource.
-}
data CognitoUserPoolClientResource s = CognitoUserPoolClientResource {
      _allowed_oauth_flows :: !(TF.Attribute s Text)
    {- ^ (Optional) List of allowed OAuth flows (code, implicit, client_credentials). -}
    , _allowed_oauth_flows_user_pool_client :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether the client is allowed to follow the OAuth protocol when interacting with Cognito user pools. -}
    , _allowed_oauth_scopes :: !(TF.Attribute s Text)
    {- ^ (Optional) List of allowed OAuth scopes (phone, email, openid, Cognito). -}
    , _callback_urls :: !(TF.Attribute s Text)
    {- ^ (Optional) List of allowed callback URLs for the identity providers. -}
    , _default_redirect_uri :: !(TF.Attribute s Text)
    {- ^ (Optional) The default redirect URI. Must be in the list of callback URLs. -}
    , _explicit_auth_flows :: !(TF.Attribute s Text)
    {- ^ (Optional) List of authentication flows (ADMIN_NO_SRP_AUTH, CUSTOM_AUTH_FLOW_ONLY). -}
    , _generate_secret :: !(TF.Attribute s Text)
    {- ^ (Optional) Should an application secret be generated. AWS JavaScript SDK requires this to be false. -}
    , _logout_urls :: !(TF.Attribute s Text)
    {- ^ (Optional) List of allowed logout URLs for the identity providers. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the application client. -}
    , _read_attributes :: !(TF.Attribute s Text)
    {- ^ (Optional) List of user pool attributes the application client can read from. -}
    , _refresh_token_validity :: !(TF.Attribute s Text)
    {- ^ (Optional) The time limit in days refresh tokens are valid for. -}
    , _supported_identity_providers :: !(TF.Attribute s Text)
    {- ^ (Optional) List of provider names for the identity providers that are supported on this client. -}
    , _user_pool_id :: !(TF.Attribute s Text)
    {- ^ (Required) The user pool the client belongs to. -}
    , _write_attributes :: !(TF.Attribute s Text)
    {- ^ (Optional) List of user pool attributes the application client can write to. -}
    } deriving (Show, Eq)

instance TF.ToHCL (CognitoUserPoolClientResource s) where
    toHCL CognitoUserPoolClientResource{..} = TF.block $ catMaybes
        [ TF.assign "allowed_oauth_flows" <$> TF.attribute _allowed_oauth_flows
        , TF.assign "allowed_oauth_flows_user_pool_client" <$> TF.attribute _allowed_oauth_flows_user_pool_client
        , TF.assign "allowed_oauth_scopes" <$> TF.attribute _allowed_oauth_scopes
        , TF.assign "callback_urls" <$> TF.attribute _callback_urls
        , TF.assign "default_redirect_uri" <$> TF.attribute _default_redirect_uri
        , TF.assign "explicit_auth_flows" <$> TF.attribute _explicit_auth_flows
        , TF.assign "generate_secret" <$> TF.attribute _generate_secret
        , TF.assign "logout_urls" <$> TF.attribute _logout_urls
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "read_attributes" <$> TF.attribute _read_attributes
        , TF.assign "refresh_token_validity" <$> TF.attribute _refresh_token_validity
        , TF.assign "supported_identity_providers" <$> TF.attribute _supported_identity_providers
        , TF.assign "user_pool_id" <$> TF.attribute _user_pool_id
        , TF.assign "write_attributes" <$> TF.attribute _write_attributes
        ]

instance HasAllowedOauthFlows (CognitoUserPoolClientResource s) Text where
    type HasAllowedOauthFlowsThread (CognitoUserPoolClientResource s) Text = s

    allowedOauthFlows =
        lens (_allowed_oauth_flows :: CognitoUserPoolClientResource s -> TF.Attribute s Text)
            (\s a -> s { _allowed_oauth_flows = a } :: CognitoUserPoolClientResource s)

instance HasAllowedOauthFlowsUserPoolClient (CognitoUserPoolClientResource s) Text where
    type HasAllowedOauthFlowsUserPoolClientThread (CognitoUserPoolClientResource s) Text = s

    allowedOauthFlowsUserPoolClient =
        lens (_allowed_oauth_flows_user_pool_client :: CognitoUserPoolClientResource s -> TF.Attribute s Text)
            (\s a -> s { _allowed_oauth_flows_user_pool_client = a } :: CognitoUserPoolClientResource s)

instance HasAllowedOauthScopes (CognitoUserPoolClientResource s) Text where
    type HasAllowedOauthScopesThread (CognitoUserPoolClientResource s) Text = s

    allowedOauthScopes =
        lens (_allowed_oauth_scopes :: CognitoUserPoolClientResource s -> TF.Attribute s Text)
            (\s a -> s { _allowed_oauth_scopes = a } :: CognitoUserPoolClientResource s)

instance HasCallbackUrls (CognitoUserPoolClientResource s) Text where
    type HasCallbackUrlsThread (CognitoUserPoolClientResource s) Text = s

    callbackUrls =
        lens (_callback_urls :: CognitoUserPoolClientResource s -> TF.Attribute s Text)
            (\s a -> s { _callback_urls = a } :: CognitoUserPoolClientResource s)

instance HasDefaultRedirectUri (CognitoUserPoolClientResource s) Text where
    type HasDefaultRedirectUriThread (CognitoUserPoolClientResource s) Text = s

    defaultRedirectUri =
        lens (_default_redirect_uri :: CognitoUserPoolClientResource s -> TF.Attribute s Text)
            (\s a -> s { _default_redirect_uri = a } :: CognitoUserPoolClientResource s)

instance HasExplicitAuthFlows (CognitoUserPoolClientResource s) Text where
    type HasExplicitAuthFlowsThread (CognitoUserPoolClientResource s) Text = s

    explicitAuthFlows =
        lens (_explicit_auth_flows :: CognitoUserPoolClientResource s -> TF.Attribute s Text)
            (\s a -> s { _explicit_auth_flows = a } :: CognitoUserPoolClientResource s)

instance HasGenerateSecret (CognitoUserPoolClientResource s) Text where
    type HasGenerateSecretThread (CognitoUserPoolClientResource s) Text = s

    generateSecret =
        lens (_generate_secret :: CognitoUserPoolClientResource s -> TF.Attribute s Text)
            (\s a -> s { _generate_secret = a } :: CognitoUserPoolClientResource s)

instance HasLogoutUrls (CognitoUserPoolClientResource s) Text where
    type HasLogoutUrlsThread (CognitoUserPoolClientResource s) Text = s

    logoutUrls =
        lens (_logout_urls :: CognitoUserPoolClientResource s -> TF.Attribute s Text)
            (\s a -> s { _logout_urls = a } :: CognitoUserPoolClientResource s)

instance HasName (CognitoUserPoolClientResource s) Text where
    type HasNameThread (CognitoUserPoolClientResource s) Text = s

    name =
        lens (_name :: CognitoUserPoolClientResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: CognitoUserPoolClientResource s)

instance HasReadAttributes (CognitoUserPoolClientResource s) Text where
    type HasReadAttributesThread (CognitoUserPoolClientResource s) Text = s

    readAttributes =
        lens (_read_attributes :: CognitoUserPoolClientResource s -> TF.Attribute s Text)
            (\s a -> s { _read_attributes = a } :: CognitoUserPoolClientResource s)

instance HasRefreshTokenValidity (CognitoUserPoolClientResource s) Text where
    type HasRefreshTokenValidityThread (CognitoUserPoolClientResource s) Text = s

    refreshTokenValidity =
        lens (_refresh_token_validity :: CognitoUserPoolClientResource s -> TF.Attribute s Text)
            (\s a -> s { _refresh_token_validity = a } :: CognitoUserPoolClientResource s)

instance HasSupportedIdentityProviders (CognitoUserPoolClientResource s) Text where
    type HasSupportedIdentityProvidersThread (CognitoUserPoolClientResource s) Text = s

    supportedIdentityProviders =
        lens (_supported_identity_providers :: CognitoUserPoolClientResource s -> TF.Attribute s Text)
            (\s a -> s { _supported_identity_providers = a } :: CognitoUserPoolClientResource s)

instance HasUserPoolId (CognitoUserPoolClientResource s) Text where
    type HasUserPoolIdThread (CognitoUserPoolClientResource s) Text = s

    userPoolId =
        lens (_user_pool_id :: CognitoUserPoolClientResource s -> TF.Attribute s Text)
            (\s a -> s { _user_pool_id = a } :: CognitoUserPoolClientResource s)

instance HasWriteAttributes (CognitoUserPoolClientResource s) Text where
    type HasWriteAttributesThread (CognitoUserPoolClientResource s) Text = s

    writeAttributes =
        lens (_write_attributes :: CognitoUserPoolClientResource s -> TF.Attribute s Text)
            (\s a -> s { _write_attributes = a } :: CognitoUserPoolClientResource s)

instance HasComputedClientSecret (CognitoUserPoolClientResource s) Text

instance HasComputedId (CognitoUserPoolClientResource s) Text

cognitoUserPoolClientResource :: TF.Resource TF.AWS (CognitoUserPoolClientResource s)
cognitoUserPoolClientResource =
    TF.newResource "aws_cognito_user_pool_client" $
        CognitoUserPoolClientResource {
              _allowed_oauth_flows = TF.Nil
            , _allowed_oauth_flows_user_pool_client = TF.Nil
            , _allowed_oauth_scopes = TF.Nil
            , _callback_urls = TF.Nil
            , _default_redirect_uri = TF.Nil
            , _explicit_auth_flows = TF.Nil
            , _generate_secret = TF.Nil
            , _logout_urls = TF.Nil
            , _name = TF.Nil
            , _read_attributes = TF.Nil
            , _refresh_token_validity = TF.Nil
            , _supported_identity_providers = TF.Nil
            , _user_pool_id = TF.Nil
            , _write_attributes = TF.Nil
            }

{- | The @aws_cognito_user_pool_domain@ AWS resource.

Provides a Cognito User Pool Domain resource.
-}
data CognitoUserPoolDomainResource s = CognitoUserPoolDomainResource {
      _domain :: !(TF.Attribute s Text)
    {- ^ (Required) The domain string. -}
    , _user_pool_id :: !(TF.Attribute s Text)
    {- ^ (Required) The user pool ID. -}
    } deriving (Show, Eq)

instance TF.ToHCL (CognitoUserPoolDomainResource s) where
    toHCL CognitoUserPoolDomainResource{..} = TF.block $ catMaybes
        [ TF.assign "domain" <$> TF.attribute _domain
        , TF.assign "user_pool_id" <$> TF.attribute _user_pool_id
        ]

instance HasDomain (CognitoUserPoolDomainResource s) Text where
    type HasDomainThread (CognitoUserPoolDomainResource s) Text = s

    domain =
        lens (_domain :: CognitoUserPoolDomainResource s -> TF.Attribute s Text)
            (\s a -> s { _domain = a } :: CognitoUserPoolDomainResource s)

instance HasUserPoolId (CognitoUserPoolDomainResource s) Text where
    type HasUserPoolIdThread (CognitoUserPoolDomainResource s) Text = s

    userPoolId =
        lens (_user_pool_id :: CognitoUserPoolDomainResource s -> TF.Attribute s Text)
            (\s a -> s { _user_pool_id = a } :: CognitoUserPoolDomainResource s)

instance HasComputedAwsAccountId (CognitoUserPoolDomainResource s) Text

instance HasComputedCloudfrontDistributionArn (CognitoUserPoolDomainResource s) Text

instance HasComputedS3Bucket (CognitoUserPoolDomainResource s) Text

instance HasComputedVersion (CognitoUserPoolDomainResource s) Text

cognitoUserPoolDomainResource :: TF.Resource TF.AWS (CognitoUserPoolDomainResource s)
cognitoUserPoolDomainResource =
    TF.newResource "aws_cognito_user_pool_domain" $
        CognitoUserPoolDomainResource {
              _domain = TF.Nil
            , _user_pool_id = TF.Nil
            }

{- | The @aws_cognito_user_pool@ AWS resource.

Provides a Cognito User Pool resource.
-}
data CognitoUserPoolResource s = CognitoUserPoolResource {
      _admin_create_user_config :: !(TF.Attribute s Text)
    {- ^ (Optional) - The configuration for <#admin-create-user-config> requests. -}
    , _alias_attributes :: !(TF.Attribute s Text)
    {- ^ (Optional) Attributes supported as an alias for this user pool. Possible values: phone_number, email, or preferred_username. Conflicts with @username_attributes@ . -}
    , _auto_verified_attributes :: !(TF.Attribute s Text)
    {- ^ (Optional) The attributes to be auto-verified. Possible values: email, phone_number. -}
    , _device_configuration :: !(TF.Attribute s Text)
    {- ^ (Optional) - The configuration for the <#device-configuration> . -}
    , _email_configuration :: !(TF.Attribute s Text)
    {- ^ (Optional) - The <#email-configuration> . -}
    , _email_verification_message :: !(TF.Attribute s Text)
    {- ^ (Optional) A string representing the email verification message. Must contain the @{####}@ placeholder. NOTE: - If @email_verification_message@ and @verification_message_template.email_message@ are specified and the values are different, either one is prioritized and updated. -}
    , _email_verification_subject :: !(TF.Attribute s Text)
    {- ^ (Optional) A string representing the email verification subject. NOTE: - If @email_verification_subject@ and @verification_message_template.email_subject@ are specified and the values are different, either one is prioritized and updated. -}
    , _lambda_config :: !(TF.Attribute s Text)
    {- ^ (Optional) - A container for the AWS <#lambda-configuration> associated with the user pool. -}
    , _mfa_configuration :: !(TF.Attribute s Text)
    {- ^ (Optional, Default: OFF) Set to enable multi-factor authentication. Must be one of the following values (ON, OFF, OPTIONAL) -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the user pool. -}
    , _password_policy :: !(TF.Attribute s Text)
    {- ^ (Optional) - A container for information about the <#password-policy> . -}
    , _schema :: !(TF.Attribute s Text)
    {- ^ (Optional) - A container with the <#schema-attributes> of a user pool. Maximum of 50 attributes. -}
    , _sms_authentication_message :: !(TF.Attribute s Text)
    {- ^ (Optional) A string representing the SMS authentication message. -}
    , _sms_configuration :: !(TF.Attribute s Text)
    {- ^ (Optional) - The <#sms-configuration> . -}
    , _sms_verification_message :: !(TF.Attribute s Text)
    {- ^ (Optional) A string representing the SMS verification message. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the User Pool. -}
    , _username_attributes :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies whether email addresses or phone numbers can be specified as usernames when a user signs up. Conflicts with @alias_attributes@ . -}
    , _verification_message_template :: !(TF.Attribute s Text)
    {- ^ (Optional) - The <#verification-message-template> configuration. -}
    } deriving (Show, Eq)

instance TF.ToHCL (CognitoUserPoolResource s) where
    toHCL CognitoUserPoolResource{..} = TF.block $ catMaybes
        [ TF.assign "admin_create_user_config" <$> TF.attribute _admin_create_user_config
        , TF.assign "alias_attributes" <$> TF.attribute _alias_attributes
        , TF.assign "auto_verified_attributes" <$> TF.attribute _auto_verified_attributes
        , TF.assign "device_configuration" <$> TF.attribute _device_configuration
        , TF.assign "email_configuration" <$> TF.attribute _email_configuration
        , TF.assign "email_verification_message" <$> TF.attribute _email_verification_message
        , TF.assign "email_verification_subject" <$> TF.attribute _email_verification_subject
        , TF.assign "lambda_config" <$> TF.attribute _lambda_config
        , TF.assign "mfa_configuration" <$> TF.attribute _mfa_configuration
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "password_policy" <$> TF.attribute _password_policy
        , TF.assign "schema" <$> TF.attribute _schema
        , TF.assign "sms_authentication_message" <$> TF.attribute _sms_authentication_message
        , TF.assign "sms_configuration" <$> TF.attribute _sms_configuration
        , TF.assign "sms_verification_message" <$> TF.attribute _sms_verification_message
        , TF.assign "tags" <$> TF.attribute _tags
        , TF.assign "username_attributes" <$> TF.attribute _username_attributes
        , TF.assign "verification_message_template" <$> TF.attribute _verification_message_template
        ]

instance HasAdminCreateUserConfig (CognitoUserPoolResource s) Text where
    type HasAdminCreateUserConfigThread (CognitoUserPoolResource s) Text = s

    adminCreateUserConfig =
        lens (_admin_create_user_config :: CognitoUserPoolResource s -> TF.Attribute s Text)
            (\s a -> s { _admin_create_user_config = a } :: CognitoUserPoolResource s)

instance HasAliasAttributes (CognitoUserPoolResource s) Text where
    type HasAliasAttributesThread (CognitoUserPoolResource s) Text = s

    aliasAttributes =
        lens (_alias_attributes :: CognitoUserPoolResource s -> TF.Attribute s Text)
            (\s a -> s { _alias_attributes = a } :: CognitoUserPoolResource s)

instance HasAutoVerifiedAttributes (CognitoUserPoolResource s) Text where
    type HasAutoVerifiedAttributesThread (CognitoUserPoolResource s) Text = s

    autoVerifiedAttributes =
        lens (_auto_verified_attributes :: CognitoUserPoolResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_verified_attributes = a } :: CognitoUserPoolResource s)

instance HasDeviceConfiguration (CognitoUserPoolResource s) Text where
    type HasDeviceConfigurationThread (CognitoUserPoolResource s) Text = s

    deviceConfiguration =
        lens (_device_configuration :: CognitoUserPoolResource s -> TF.Attribute s Text)
            (\s a -> s { _device_configuration = a } :: CognitoUserPoolResource s)

instance HasEmailConfiguration (CognitoUserPoolResource s) Text where
    type HasEmailConfigurationThread (CognitoUserPoolResource s) Text = s

    emailConfiguration =
        lens (_email_configuration :: CognitoUserPoolResource s -> TF.Attribute s Text)
            (\s a -> s { _email_configuration = a } :: CognitoUserPoolResource s)

instance HasEmailVerificationMessage (CognitoUserPoolResource s) Text where
    type HasEmailVerificationMessageThread (CognitoUserPoolResource s) Text = s

    emailVerificationMessage =
        lens (_email_verification_message :: CognitoUserPoolResource s -> TF.Attribute s Text)
            (\s a -> s { _email_verification_message = a } :: CognitoUserPoolResource s)

instance HasEmailVerificationSubject (CognitoUserPoolResource s) Text where
    type HasEmailVerificationSubjectThread (CognitoUserPoolResource s) Text = s

    emailVerificationSubject =
        lens (_email_verification_subject :: CognitoUserPoolResource s -> TF.Attribute s Text)
            (\s a -> s { _email_verification_subject = a } :: CognitoUserPoolResource s)

instance HasLambdaConfig (CognitoUserPoolResource s) Text where
    type HasLambdaConfigThread (CognitoUserPoolResource s) Text = s

    lambdaConfig =
        lens (_lambda_config :: CognitoUserPoolResource s -> TF.Attribute s Text)
            (\s a -> s { _lambda_config = a } :: CognitoUserPoolResource s)

instance HasMfaConfiguration (CognitoUserPoolResource s) Text where
    type HasMfaConfigurationThread (CognitoUserPoolResource s) Text = s

    mfaConfiguration =
        lens (_mfa_configuration :: CognitoUserPoolResource s -> TF.Attribute s Text)
            (\s a -> s { _mfa_configuration = a } :: CognitoUserPoolResource s)

instance HasName (CognitoUserPoolResource s) Text where
    type HasNameThread (CognitoUserPoolResource s) Text = s

    name =
        lens (_name :: CognitoUserPoolResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: CognitoUserPoolResource s)

instance HasPasswordPolicy (CognitoUserPoolResource s) Text where
    type HasPasswordPolicyThread (CognitoUserPoolResource s) Text = s

    passwordPolicy =
        lens (_password_policy :: CognitoUserPoolResource s -> TF.Attribute s Text)
            (\s a -> s { _password_policy = a } :: CognitoUserPoolResource s)

instance HasSchema (CognitoUserPoolResource s) Text where
    type HasSchemaThread (CognitoUserPoolResource s) Text = s

    schema =
        lens (_schema :: CognitoUserPoolResource s -> TF.Attribute s Text)
            (\s a -> s { _schema = a } :: CognitoUserPoolResource s)

instance HasSmsAuthenticationMessage (CognitoUserPoolResource s) Text where
    type HasSmsAuthenticationMessageThread (CognitoUserPoolResource s) Text = s

    smsAuthenticationMessage =
        lens (_sms_authentication_message :: CognitoUserPoolResource s -> TF.Attribute s Text)
            (\s a -> s { _sms_authentication_message = a } :: CognitoUserPoolResource s)

instance HasSmsConfiguration (CognitoUserPoolResource s) Text where
    type HasSmsConfigurationThread (CognitoUserPoolResource s) Text = s

    smsConfiguration =
        lens (_sms_configuration :: CognitoUserPoolResource s -> TF.Attribute s Text)
            (\s a -> s { _sms_configuration = a } :: CognitoUserPoolResource s)

instance HasSmsVerificationMessage (CognitoUserPoolResource s) Text where
    type HasSmsVerificationMessageThread (CognitoUserPoolResource s) Text = s

    smsVerificationMessage =
        lens (_sms_verification_message :: CognitoUserPoolResource s -> TF.Attribute s Text)
            (\s a -> s { _sms_verification_message = a } :: CognitoUserPoolResource s)

instance HasTags (CognitoUserPoolResource s) TF.Tags where
    type HasTagsThread (CognitoUserPoolResource s) TF.Tags = s

    tags =
        lens (_tags :: CognitoUserPoolResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: CognitoUserPoolResource s)

instance HasUsernameAttributes (CognitoUserPoolResource s) Text where
    type HasUsernameAttributesThread (CognitoUserPoolResource s) Text = s

    usernameAttributes =
        lens (_username_attributes :: CognitoUserPoolResource s -> TF.Attribute s Text)
            (\s a -> s { _username_attributes = a } :: CognitoUserPoolResource s)

instance HasVerificationMessageTemplate (CognitoUserPoolResource s) Text where
    type HasVerificationMessageTemplateThread (CognitoUserPoolResource s) Text = s

    verificationMessageTemplate =
        lens (_verification_message_template :: CognitoUserPoolResource s -> TF.Attribute s Text)
            (\s a -> s { _verification_message_template = a } :: CognitoUserPoolResource s)

cognitoUserPoolResource :: TF.Resource TF.AWS (CognitoUserPoolResource s)
cognitoUserPoolResource =
    TF.newResource "aws_cognito_user_pool" $
        CognitoUserPoolResource {
              _admin_create_user_config = TF.Nil
            , _alias_attributes = TF.Nil
            , _auto_verified_attributes = TF.Nil
            , _device_configuration = TF.Nil
            , _email_configuration = TF.Nil
            , _email_verification_message = TF.Nil
            , _email_verification_subject = TF.Nil
            , _lambda_config = TF.Nil
            , _mfa_configuration = TF.Nil
            , _name = TF.Nil
            , _password_policy = TF.Nil
            , _schema = TF.Nil
            , _sms_authentication_message = TF.Nil
            , _sms_configuration = TF.Nil
            , _sms_verification_message = TF.Nil
            , _tags = TF.Nil
            , _username_attributes = TF.Nil
            , _verification_message_template = TF.Nil
            }

{- | The @aws_config_config_rule@ AWS resource.

Provides an AWS Config Rule. ~> Note: Config Rule requires an existing
</docs/providers/aws/r/config_configuration_recorder.html> to be present.
Use of @depends_on@ is recommended (as shown below) to avoid race
conditions.
-}
data ConfigConfigRuleResource s = ConfigConfigRuleResource {
      _description :: !(TF.Attribute s Text)
    {- ^ (Optional) Description of the rule -}
    , _input_parameters :: !(TF.Attribute s Text)
    {- ^ (Optional) A string in JSON format that is passed to the AWS Config rule Lambda function. -}
    , _maximum_execution_frequency :: !(TF.Attribute s Text)
    {- ^ (Optional) The maximum frequency with which AWS Config runs evaluations for a rule. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the rule -}
    , _scope :: !(TF.Attribute s Text)
    {- ^ (Optional) Scope defines which resources can trigger an evaluation for the rule as documented below. -}
    , _source :: !(TF.Attribute s Text)
    {- ^ (Required) Source specifies the rule owner, the rule identifier, and the notifications that cause the function to evaluate your AWS resources as documented below. -}
    } deriving (Show, Eq)

instance TF.ToHCL (ConfigConfigRuleResource s) where
    toHCL ConfigConfigRuleResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.attribute _description
        , TF.assign "input_parameters" <$> TF.attribute _input_parameters
        , TF.assign "maximum_execution_frequency" <$> TF.attribute _maximum_execution_frequency
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "scope" <$> TF.attribute _scope
        , TF.assign "source" <$> TF.attribute _source
        ]

instance HasDescription (ConfigConfigRuleResource s) Text where
    type HasDescriptionThread (ConfigConfigRuleResource s) Text = s

    description =
        lens (_description :: ConfigConfigRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: ConfigConfigRuleResource s)

instance HasInputParameters (ConfigConfigRuleResource s) Text where
    type HasInputParametersThread (ConfigConfigRuleResource s) Text = s

    inputParameters =
        lens (_input_parameters :: ConfigConfigRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _input_parameters = a } :: ConfigConfigRuleResource s)

instance HasMaximumExecutionFrequency (ConfigConfigRuleResource s) Text where
    type HasMaximumExecutionFrequencyThread (ConfigConfigRuleResource s) Text = s

    maximumExecutionFrequency =
        lens (_maximum_execution_frequency :: ConfigConfigRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _maximum_execution_frequency = a } :: ConfigConfigRuleResource s)

instance HasName (ConfigConfigRuleResource s) Text where
    type HasNameThread (ConfigConfigRuleResource s) Text = s

    name =
        lens (_name :: ConfigConfigRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: ConfigConfigRuleResource s)

instance HasScope (ConfigConfigRuleResource s) Text where
    type HasScopeThread (ConfigConfigRuleResource s) Text = s

    scope =
        lens (_scope :: ConfigConfigRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _scope = a } :: ConfigConfigRuleResource s)

instance HasSource (ConfigConfigRuleResource s) Text where
    type HasSourceThread (ConfigConfigRuleResource s) Text = s

    source =
        lens (_source :: ConfigConfigRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _source = a } :: ConfigConfigRuleResource s)

configConfigRuleResource :: TF.Resource TF.AWS (ConfigConfigRuleResource s)
configConfigRuleResource =
    TF.newResource "aws_config_config_rule" $
        ConfigConfigRuleResource {
              _description = TF.Nil
            , _input_parameters = TF.Nil
            , _maximum_execution_frequency = TF.Nil
            , _name = TF.Nil
            , _scope = TF.Nil
            , _source = TF.Nil
            }

{- | The @aws_config_configuration_recorder@ AWS resource.

Provides an AWS Config Configuration Recorder. Please note that this
resource does not start the created recorder automatically. ~> Note:
Starting the Configuration Recorder requires a
</docs/providers/aws/r/config_delivery_channel.html> (while delivery channel
creation requires Configuration Recorder). This is why
</docs/providers/aws/r/config_configuration_recorder_status.html> is a
separate resource.
-}
data ConfigConfigurationRecorderResource s = ConfigConfigurationRecorderResource {
      _name :: !(TF.Attribute s Text)
    {- ^ (Optional) The name of the recorder. Defaults to @default@ . Changing it recreates the resource. -}
    , _recording_group :: !(TF.Attribute s Text)
    {- ^ (Optional) Recording group - see below. -}
    , _role_arn :: !(TF.Attribute s Text)
    {- ^ (Required) Amazon Resource Name (ARN) of the IAM role. used to make read or write requests to the delivery channel and to describe the AWS resources associated with the account. See <http://docs.aws.amazon.com/config/latest/developerguide/iamrole-permissions.html> for more details. -}
    } deriving (Show, Eq)

instance TF.ToHCL (ConfigConfigurationRecorderResource s) where
    toHCL ConfigConfigurationRecorderResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.attribute _name
        , TF.assign "recording_group" <$> TF.attribute _recording_group
        , TF.assign "role_arn" <$> TF.attribute _role_arn
        ]

instance HasName (ConfigConfigurationRecorderResource s) Text where
    type HasNameThread (ConfigConfigurationRecorderResource s) Text = s

    name =
        lens (_name :: ConfigConfigurationRecorderResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: ConfigConfigurationRecorderResource s)

instance HasRecordingGroup (ConfigConfigurationRecorderResource s) Text where
    type HasRecordingGroupThread (ConfigConfigurationRecorderResource s) Text = s

    recordingGroup =
        lens (_recording_group :: ConfigConfigurationRecorderResource s -> TF.Attribute s Text)
            (\s a -> s { _recording_group = a } :: ConfigConfigurationRecorderResource s)

instance HasRoleArn (ConfigConfigurationRecorderResource s) Text where
    type HasRoleArnThread (ConfigConfigurationRecorderResource s) Text = s

    roleArn =
        lens (_role_arn :: ConfigConfigurationRecorderResource s -> TF.Attribute s Text)
            (\s a -> s { _role_arn = a } :: ConfigConfigurationRecorderResource s)

configConfigurationRecorderResource :: TF.Resource TF.AWS (ConfigConfigurationRecorderResource s)
configConfigurationRecorderResource =
    TF.newResource "aws_config_configuration_recorder" $
        ConfigConfigurationRecorderResource {
              _name = TF.Nil
            , _recording_group = TF.Nil
            , _role_arn = TF.Nil
            }

{- | The @aws_config_configuration_recorder_status@ AWS resource.

Manages status (recording / stopped) of an AWS Config Configuration
Recorder. ~> Note: Starting Configuration Recorder requires a
</docs/providers/aws/r/config_delivery_channel.html> to be present. Use of
@depends_on@ (as shown below) is recommended to avoid race conditions.
-}
data ConfigConfigurationRecorderStatusResource s = ConfigConfigurationRecorderStatusResource {
      _is_enabled :: !(TF.Attribute s TF.Bool)
    {- ^ (Required) Whether the configuration recorder should be enabled or disabled. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the recorder -}
    } deriving (Show, Eq)

instance TF.ToHCL (ConfigConfigurationRecorderStatusResource s) where
    toHCL ConfigConfigurationRecorderStatusResource{..} = TF.block $ catMaybes
        [ TF.assign "is_enabled" <$> TF.attribute _is_enabled
        , TF.assign "name" <$> TF.attribute _name
        ]

instance HasIsEnabled (ConfigConfigurationRecorderStatusResource s) TF.Bool where
    type HasIsEnabledThread (ConfigConfigurationRecorderStatusResource s) TF.Bool = s

    isEnabled =
        lens (_is_enabled :: ConfigConfigurationRecorderStatusResource s -> TF.Attribute s TF.Bool)
            (\s a -> s { _is_enabled = a } :: ConfigConfigurationRecorderStatusResource s)

instance HasName (ConfigConfigurationRecorderStatusResource s) Text where
    type HasNameThread (ConfigConfigurationRecorderStatusResource s) Text = s

    name =
        lens (_name :: ConfigConfigurationRecorderStatusResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: ConfigConfigurationRecorderStatusResource s)

configConfigurationRecorderStatusResource :: TF.Resource TF.AWS (ConfigConfigurationRecorderStatusResource s)
configConfigurationRecorderStatusResource =
    TF.newResource "aws_config_configuration_recorder_status" $
        ConfigConfigurationRecorderStatusResource {
              _is_enabled = TF.Nil
            , _name = TF.Nil
            }

{- | The @aws_config_delivery_channel@ AWS resource.

Provides an AWS Config Delivery Channel. ~> Note: Delivery Channel requires
a </docs/providers/aws/r/config_configuration_recorder.html> to be present.
Use of @depends_on@ (as shown below) is recommended to avoid race
conditions.
-}
data ConfigDeliveryChannelResource s = ConfigDeliveryChannelResource {
      _name :: !(TF.Attribute s Text)
    {- ^ (Optional) The name of the delivery channel. Defaults to @default@ . Changing it recreates the resource. -}
    , _s3_bucket_name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the S3 bucket used to store the configuration history. -}
    , _s3_key_prefix :: !(TF.Attribute s Text)
    {- ^ (Optional) The prefix for the specified S3 bucket. -}
    , _snapshot_delivery_properties :: !(TF.Attribute s Text)
    {- ^ (Optional) Options for how AWS Config delivers configuration snapshots. See below -}
    , _sns_topic_arn :: !(TF.Attribute s Text)
    {- ^ (Optional) The ARN of the SNS topic that AWS Config delivers notifications to. -}
    } deriving (Show, Eq)

instance TF.ToHCL (ConfigDeliveryChannelResource s) where
    toHCL ConfigDeliveryChannelResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.attribute _name
        , TF.assign "s3_bucket_name" <$> TF.attribute _s3_bucket_name
        , TF.assign "s3_key_prefix" <$> TF.attribute _s3_key_prefix
        , TF.assign "snapshot_delivery_properties" <$> TF.attribute _snapshot_delivery_properties
        , TF.assign "sns_topic_arn" <$> TF.attribute _sns_topic_arn
        ]

instance HasName (ConfigDeliveryChannelResource s) Text where
    type HasNameThread (ConfigDeliveryChannelResource s) Text = s

    name =
        lens (_name :: ConfigDeliveryChannelResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: ConfigDeliveryChannelResource s)

instance HasS3BucketName (ConfigDeliveryChannelResource s) Text where
    type HasS3BucketNameThread (ConfigDeliveryChannelResource s) Text = s

    s3BucketName =
        lens (_s3_bucket_name :: ConfigDeliveryChannelResource s -> TF.Attribute s Text)
            (\s a -> s { _s3_bucket_name = a } :: ConfigDeliveryChannelResource s)

instance HasS3KeyPrefix (ConfigDeliveryChannelResource s) Text where
    type HasS3KeyPrefixThread (ConfigDeliveryChannelResource s) Text = s

    s3KeyPrefix =
        lens (_s3_key_prefix :: ConfigDeliveryChannelResource s -> TF.Attribute s Text)
            (\s a -> s { _s3_key_prefix = a } :: ConfigDeliveryChannelResource s)

instance HasSnapshotDeliveryProperties (ConfigDeliveryChannelResource s) Text where
    type HasSnapshotDeliveryPropertiesThread (ConfigDeliveryChannelResource s) Text = s

    snapshotDeliveryProperties =
        lens (_snapshot_delivery_properties :: ConfigDeliveryChannelResource s -> TF.Attribute s Text)
            (\s a -> s { _snapshot_delivery_properties = a } :: ConfigDeliveryChannelResource s)

instance HasSnsTopicArn (ConfigDeliveryChannelResource s) Text where
    type HasSnsTopicArnThread (ConfigDeliveryChannelResource s) Text = s

    snsTopicArn =
        lens (_sns_topic_arn :: ConfigDeliveryChannelResource s -> TF.Attribute s Text)
            (\s a -> s { _sns_topic_arn = a } :: ConfigDeliveryChannelResource s)

configDeliveryChannelResource :: TF.Resource TF.AWS (ConfigDeliveryChannelResource s)
configDeliveryChannelResource =
    TF.newResource "aws_config_delivery_channel" $
        ConfigDeliveryChannelResource {
              _name = TF.Nil
            , _s3_bucket_name = TF.Nil
            , _s3_key_prefix = TF.Nil
            , _snapshot_delivery_properties = TF.Nil
            , _sns_topic_arn = TF.Nil
            }

{- | The @aws_customer_gateway@ AWS resource.

Provides a customer gateway inside a VPC. These objects can be connected to
VPN gateways via VPN connections, and allow you to establish tunnels between
your network and the VPC.
-}
data CustomerGatewayResource s = CustomerGatewayResource {
      _bgp_asn :: !(TF.Attribute s Text)
    {- ^ (Required) The gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN). -}
    , _ip_address :: !(TF.Attribute s Text)
    {- ^ (Required) The IP address of the gateway's Internet-routable external interface. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) Tags to apply to the gateway. -}
    , _type' :: !(TF.Attribute s Text)
    {- ^ (Required) The type of customer gateway. The only type AWS supports at this time is "ipsec.1". -}
    } deriving (Show, Eq)

instance TF.ToHCL (CustomerGatewayResource s) where
    toHCL CustomerGatewayResource{..} = TF.block $ catMaybes
        [ TF.assign "bgp_asn" <$> TF.attribute _bgp_asn
        , TF.assign "ip_address" <$> TF.attribute _ip_address
        , TF.assign "tags" <$> TF.attribute _tags
        , TF.assign "type" <$> TF.attribute _type'
        ]

instance HasBgpAsn (CustomerGatewayResource s) Text where
    type HasBgpAsnThread (CustomerGatewayResource s) Text = s

    bgpAsn =
        lens (_bgp_asn :: CustomerGatewayResource s -> TF.Attribute s Text)
            (\s a -> s { _bgp_asn = a } :: CustomerGatewayResource s)

instance HasIpAddress (CustomerGatewayResource s) Text where
    type HasIpAddressThread (CustomerGatewayResource s) Text = s

    ipAddress =
        lens (_ip_address :: CustomerGatewayResource s -> TF.Attribute s Text)
            (\s a -> s { _ip_address = a } :: CustomerGatewayResource s)

instance HasTags (CustomerGatewayResource s) TF.Tags where
    type HasTagsThread (CustomerGatewayResource s) TF.Tags = s

    tags =
        lens (_tags :: CustomerGatewayResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: CustomerGatewayResource s)

instance HasType' (CustomerGatewayResource s) Text where
    type HasType'Thread (CustomerGatewayResource s) Text = s

    type' =
        lens (_type' :: CustomerGatewayResource s -> TF.Attribute s Text)
            (\s a -> s { _type' = a } :: CustomerGatewayResource s)

instance HasComputedBgpAsn (CustomerGatewayResource s) Text

instance HasComputedId (CustomerGatewayResource s) Text

instance HasComputedIpAddress (CustomerGatewayResource s) Text

instance HasComputedTags (CustomerGatewayResource s) TF.Tags

instance HasComputedType' (CustomerGatewayResource s) Text

customerGatewayResource :: TF.Resource TF.AWS (CustomerGatewayResource s)
customerGatewayResource =
    TF.newResource "aws_customer_gateway" $
        CustomerGatewayResource {
              _bgp_asn = TF.Nil
            , _ip_address = TF.Nil
            , _tags = TF.Nil
            , _type' = TF.Nil
            }

{- | The @aws_db_event_subscription@ AWS resource.

Provides a DB event subscription resource.
-}
data DbEventSubscriptionResource s = DbEventSubscriptionResource {
      _enabled :: !(TF.Attribute s TF.Bool)
    {- ^ (Optional) A boolean flag to enable/disable the subscription. Defaults to true. -}
    , _event_categories :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of event categories for a SourceType that you want to subscribe to. See http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide//USER_Events.html -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the DB event subscription. -}
    , _sns_topic :: !(TF.Attribute s Text)
    {- ^ (Required) The SNS topic to send events to. -}
    , _source_ids :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of identifiers of the event sources for which events will be returned. If not specified, then all sources are included in the response. If specified, a source_type must also be specified. -}
    , _source_type :: !(TF.Attribute s Text)
    {- ^ (Optional) The type of source that will be generating the events. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    } deriving (Show, Eq)

instance TF.ToHCL (DbEventSubscriptionResource s) where
    toHCL DbEventSubscriptionResource{..} = TF.block $ catMaybes
        [ TF.assign "enabled" <$> TF.attribute _enabled
        , TF.assign "event_categories" <$> TF.attribute _event_categories
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "sns_topic" <$> TF.attribute _sns_topic
        , TF.assign "source_ids" <$> TF.attribute _source_ids
        , TF.assign "source_type" <$> TF.attribute _source_type
        , TF.assign "tags" <$> TF.attribute _tags
        ]

instance HasEnabled (DbEventSubscriptionResource s) TF.Bool where
    type HasEnabledThread (DbEventSubscriptionResource s) TF.Bool = s

    enabled =
        lens (_enabled :: DbEventSubscriptionResource s -> TF.Attribute s TF.Bool)
            (\s a -> s { _enabled = a } :: DbEventSubscriptionResource s)

instance HasEventCategories (DbEventSubscriptionResource s) Text where
    type HasEventCategoriesThread (DbEventSubscriptionResource s) Text = s

    eventCategories =
        lens (_event_categories :: DbEventSubscriptionResource s -> TF.Attribute s Text)
            (\s a -> s { _event_categories = a } :: DbEventSubscriptionResource s)

instance HasName (DbEventSubscriptionResource s) Text where
    type HasNameThread (DbEventSubscriptionResource s) Text = s

    name =
        lens (_name :: DbEventSubscriptionResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: DbEventSubscriptionResource s)

instance HasSnsTopic (DbEventSubscriptionResource s) Text where
    type HasSnsTopicThread (DbEventSubscriptionResource s) Text = s

    snsTopic =
        lens (_sns_topic :: DbEventSubscriptionResource s -> TF.Attribute s Text)
            (\s a -> s { _sns_topic = a } :: DbEventSubscriptionResource s)

instance HasSourceIds (DbEventSubscriptionResource s) Text where
    type HasSourceIdsThread (DbEventSubscriptionResource s) Text = s

    sourceIds =
        lens (_source_ids :: DbEventSubscriptionResource s -> TF.Attribute s Text)
            (\s a -> s { _source_ids = a } :: DbEventSubscriptionResource s)

instance HasSourceType (DbEventSubscriptionResource s) Text where
    type HasSourceTypeThread (DbEventSubscriptionResource s) Text = s

    sourceType =
        lens (_source_type :: DbEventSubscriptionResource s -> TF.Attribute s Text)
            (\s a -> s { _source_type = a } :: DbEventSubscriptionResource s)

instance HasTags (DbEventSubscriptionResource s) TF.Tags where
    type HasTagsThread (DbEventSubscriptionResource s) TF.Tags = s

    tags =
        lens (_tags :: DbEventSubscriptionResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: DbEventSubscriptionResource s)

dbEventSubscriptionResource :: TF.Resource TF.AWS (DbEventSubscriptionResource s)
dbEventSubscriptionResource =
    TF.newResource "aws_db_event_subscription" $
        DbEventSubscriptionResource {
              _enabled = TF.Nil
            , _event_categories = TF.Nil
            , _name = TF.Nil
            , _sns_topic = TF.Nil
            , _source_ids = TF.Nil
            , _source_type = TF.Nil
            , _tags = TF.Nil
            }

{- | The @aws_db_instance@ AWS resource.

Provides an RDS instance resource.  A DB instance is an isolated database
environment in the cloud.  A DB instance can contain multiple user-created
databases. Changes to a DB instance can occur when you manually change a
parameter, such as @allocated_storage@ , and are reflected in the next
maintenance window. Because of this, Terraform may report a difference in
its planning phase because a modification has not yet taken place. You can
use the @apply_immediately@ flag to instruct the service to apply the change
immediately (see documentation below). When upgrading the major version of
an engine, @allow_major_version_upgrade@ must be set to @true@ . ~> Note:
using @apply_immediately@ can result in a brief downtime as the server
reboots. See the AWS Docs on
<https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html>
for more information. ~> Note: All arguments including the username and
password will be stored in the raw state as plain-text.
</docs/state/sensitive-data.html> .
-}
data DbInstanceResource s = DbInstanceResource {
      _allocated_storage :: !(TF.Attribute s Text)
    {- ^ (Required unless a @snapshot_identifier@ or @replicate_source_db@ is provided) The allocated storage in gigabytes. -}
    , _allow_major_version_upgrade :: !(TF.Attribute s Text)
    {- ^ (Optional) Indicates that major version upgrades are allowed. Changing this parameter does not result in an outage and the change is asynchronously applied as soon as possible. -}
    , _apply_immediately :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies whether any database modifications are applied immediately, or during the next maintenance window. Default is @false@ . See <https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html> for more information. -}
    , _auto_minor_version_upgrade :: !(TF.Attribute s Text)
    {- ^ (Optional) Indicates that minor engine upgrades will be applied automatically to the DB instance during the maintenance window. Defaults to true. -}
    , _availability_zone :: !(TF.Attribute s TF.Zone)
    {- ^ (Optional) The AZ for the RDS instance. -}
    , _backup_retention_period :: !(TF.Attribute s Text)
    {- ^ (Optional) The days to retain backups for. Must be @1@ or greater to be a source for a <https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Replication.html> . -}
    , _backup_window :: !(TF.Attribute s Text)
    {- ^ (Optional) The daily time range (in UTC) during which automated backups are created if they are enabled. Example: "09:46-10:16". Must not overlap with @maintenance_window@ . -}
    , _character_set_name :: !(TF.Attribute s Text)
    {- ^ (Optional) The character set name to use for DB encoding in Oracle instances. This can't be changed. See <https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.OracleCharacterSets.html> for more information. -}
    , _copy_tags_to_snapshot :: !(TF.Attribute s Text)
    {- ^ – (Optional, boolean) On delete, copy all Instance @tags@ to the final snapshot (if @final_snapshot_identifier@ is specified). Default is @false@ . -}
    , _db_subnet_group_name :: !(TF.Attribute s Text)
    {- ^ (Optional) Name of DB subnet group. DB instance will be created in the VPC associated with the DB subnet group. If unspecified, will be created in the @default@ VPC, or in EC2 Classic, if available. -}
    , _engine :: !(TF.Attribute s Text)
    {- ^ (Required unless a @snapshot_identifier@ or @replicate_source_db@ is provided) The database engine to use. -}
    , _engine_version :: !(TF.Attribute s Text)
    {- ^ (Optional) The engine version to use. -}
    , _final_snapshot_identifier :: !(TF.Attribute s Text)
    {- ^ (Optional) The name of your final DB snapshot when this DB instance is deleted. If omitted, no final snapshot will be made. -}
    , _iam_database_authentication_enabled :: !(TF.Attribute s TF.Bool)
    {- ^ (Optional) Specifies whether or mappings of AWS Identity and Access Management (IAM) accounts to database accounts is enabled. -}
    , _identifier :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) The name of the RDS instance, if omitted, Terraform will assign a random, unique identifier. -}
    , _identifier_prefix :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) Creates a unique identifier beginning with the specified prefix. Conflicts with @identifer@ . -}
    , _instance_class :: !(TF.Attribute s Text)
    {- ^ (Required) The instance type of the RDS instance. -}
    , _iops :: !(TF.Attribute s Text)
    {- ^ (Optional) The amount of provisioned IOPS. Setting this implies a storage_type of "io1". -}
    , _kms_key_id :: !(TF.Attribute s Text)
    {- ^ (Optional) The ARN for the KMS encryption key. If creating an encrypted replica, set this to the destination KMS ARN. -}
    , _license_model :: !(TF.Attribute s Text)
    {- ^ (Optional, but required for some DB engines, i.e. Oracle SE1) License model information for this DB instance. -}
    , _maintenance_window :: !(TF.Attribute s Text)
    {- ^ (Optional) The window to perform maintenance in. Syntax: "ddd:hh24:mi-ddd:hh24:mi". Eg: "Mon:00:00-Mon:03:00". See <http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow> for more information. -}
    , _monitoring_interval :: !(TF.Attribute s Text)
    {- ^ (Optional) The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0. Valid Values: 0, 1, 5, 10, 15, 30, 60. -}
    , _monitoring_role_arn :: !(TF.Attribute s Text)
    {- ^ (Optional) The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to CloudWatch Logs. You can find more information on the <https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html> what IAM permissions are needed to allow Enhanced Monitoring for RDS Instances. -}
    , _multi_az :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies if the RDS instance is multi-AZ -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Optional) The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance. Note that this does not apply for Oracle or SQL Server engines. See the <http://docs.aws.amazon.com/cli/latest/reference/rds/create-db-instance.html> for more details on what applies for those engines. -}
    , _option_group_name :: !(TF.Attribute s Text)
    {- ^ (Optional) Name of the DB option group to associate. -}
    , _parameter_group_name :: !(TF.Attribute s Text)
    {- ^ (Optional) Name of the DB parameter group to associate. -}
    , _password :: !(TF.Attribute s Text)
    {- ^ (Required unless a @snapshot_identifier@ or @replicate_source_db@ is provided) Password for the master DB user. Note that this may show up in logs, and it will be stored in the state file. -}
    , _port :: !(TF.Attribute s Text)
    {- ^ (Optional) The port on which the DB accepts connections. -}
    , _publicly_accessible :: !(TF.Attribute s Text)
    {- ^ (Optional) Bool to control if instance is publicly accessible. Default is @false@ . -}
    , _replicate_source_db :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies that this resource is a Replicate database, and to use this value as the source database. This correlates to the @identifier@ of another Amazon RDS Database to replicate. See <https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Replication.html> and <https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html> for more information on using Replication. -}
    , _security_group_names :: !(TF.Attribute s Text)
    {- ^ (Optional/Deprecated) List of DB Security Groups to associate. Only used for <https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.html#USER_VPC.FindDefaultVPC> . -}
    , _skip_final_snapshot :: !(TF.Attribute s Text)
    {- ^ (Optional) Determines whether a final DB snapshot is created before the DB instance is deleted. If true is specified, no DBSnapshot is created. If false is specified, a DB snapshot is created before the DB instance is deleted, using the value from @final_snapshot_identifier@ . Default is @false@ . -}
    , _snapshot_identifier :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies whether or not to create this database from a snapshot. This correlates to the snapshot ID you'd find in the RDS console, e.g: rds:production-2015-06-26-06-05. -}
    , _storage_encrypted :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies whether the DB instance is encrypted. The default is @false@ if not specified. -}
    , _storage_type :: !(TF.Attribute s Text)
    {- ^ (Optional) One of "standard" (magnetic), "gp2" (general purpose SSD), or "io1" (provisioned IOPS SSD). The default is "io1" if @iops@ is specified, "standard" if not. Note that this behaviour is different from the AWS web console, where the default is "gp2". -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _timezone :: !(TF.Attribute s Text)
    {- ^ (Optional) Time zone of the DB instance. @timezone@ is currently only supported by Microsoft SQL Server. The @timezone@ can only be set on creation. See <http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone> for more information. -}
    , _username :: !(TF.Attribute s Text)
    {- ^ (Required unless a @snapshot_identifier@ or @replicate_source_db@ is provided) Username for the master DB user. -}
    , _vpc_security_group_ids :: !(TF.Attribute s Text)
    {- ^ (Optional) List of VPC security groups to associate. -}
    } deriving (Show, Eq)

instance TF.ToHCL (DbInstanceResource s) where
    toHCL DbInstanceResource{..} = TF.block $ catMaybes
        [ TF.assign "allocated_storage" <$> TF.attribute _allocated_storage
        , TF.assign "allow_major_version_upgrade" <$> TF.attribute _allow_major_version_upgrade
        , TF.assign "apply_immediately" <$> TF.attribute _apply_immediately
        , TF.assign "auto_minor_version_upgrade" <$> TF.attribute _auto_minor_version_upgrade
        , TF.assign "availability_zone" <$> TF.attribute _availability_zone
        , TF.assign "backup_retention_period" <$> TF.attribute _backup_retention_period
        , TF.assign "backup_window" <$> TF.attribute _backup_window
        , TF.assign "character_set_name" <$> TF.attribute _character_set_name
        , TF.assign "copy_tags_to_snapshot" <$> TF.attribute _copy_tags_to_snapshot
        , TF.assign "db_subnet_group_name" <$> TF.attribute _db_subnet_group_name
        , TF.assign "engine" <$> TF.attribute _engine
        , TF.assign "engine_version" <$> TF.attribute _engine_version
        , TF.assign "final_snapshot_identifier" <$> TF.attribute _final_snapshot_identifier
        , TF.assign "iam_database_authentication_enabled" <$> TF.attribute _iam_database_authentication_enabled
        , TF.assign "identifier" <$> TF.attribute _identifier
        , TF.assign "identifier_prefix" <$> TF.attribute _identifier_prefix
        , TF.assign "instance_class" <$> TF.attribute _instance_class
        , TF.assign "iops" <$> TF.attribute _iops
        , TF.assign "kms_key_id" <$> TF.attribute _kms_key_id
        , TF.assign "license_model" <$> TF.attribute _license_model
        , TF.assign "maintenance_window" <$> TF.attribute _maintenance_window
        , TF.assign "monitoring_interval" <$> TF.attribute _monitoring_interval
        , TF.assign "monitoring_role_arn" <$> TF.attribute _monitoring_role_arn
        , TF.assign "multi_az" <$> TF.attribute _multi_az
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "option_group_name" <$> TF.attribute _option_group_name
        , TF.assign "parameter_group_name" <$> TF.attribute _parameter_group_name
        , TF.assign "password" <$> TF.attribute _password
        , TF.assign "port" <$> TF.attribute _port
        , TF.assign "publicly_accessible" <$> TF.attribute _publicly_accessible
        , TF.assign "replicate_source_db" <$> TF.attribute _replicate_source_db
        , TF.assign "security_group_names" <$> TF.attribute _security_group_names
        , TF.assign "skip_final_snapshot" <$> TF.attribute _skip_final_snapshot
        , TF.assign "snapshot_identifier" <$> TF.attribute _snapshot_identifier
        , TF.assign "storage_encrypted" <$> TF.attribute _storage_encrypted
        , TF.assign "storage_type" <$> TF.attribute _storage_type
        , TF.assign "tags" <$> TF.attribute _tags
        , TF.assign "timezone" <$> TF.attribute _timezone
        , TF.assign "username" <$> TF.attribute _username
        , TF.assign "vpc_security_group_ids" <$> TF.attribute _vpc_security_group_ids
        ]

instance HasAllocatedStorage (DbInstanceResource s) Text where
    type HasAllocatedStorageThread (DbInstanceResource s) Text = s

    allocatedStorage =
        lens (_allocated_storage :: DbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _allocated_storage = a } :: DbInstanceResource s)

instance HasAllowMajorVersionUpgrade (DbInstanceResource s) Text where
    type HasAllowMajorVersionUpgradeThread (DbInstanceResource s) Text = s

    allowMajorVersionUpgrade =
        lens (_allow_major_version_upgrade :: DbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _allow_major_version_upgrade = a } :: DbInstanceResource s)

instance HasApplyImmediately (DbInstanceResource s) Text where
    type HasApplyImmediatelyThread (DbInstanceResource s) Text = s

    applyImmediately =
        lens (_apply_immediately :: DbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _apply_immediately = a } :: DbInstanceResource s)

instance HasAutoMinorVersionUpgrade (DbInstanceResource s) Text where
    type HasAutoMinorVersionUpgradeThread (DbInstanceResource s) Text = s

    autoMinorVersionUpgrade =
        lens (_auto_minor_version_upgrade :: DbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_minor_version_upgrade = a } :: DbInstanceResource s)

instance HasAvailabilityZone (DbInstanceResource s) TF.Zone where
    type HasAvailabilityZoneThread (DbInstanceResource s) TF.Zone = s

    availabilityZone =
        lens (_availability_zone :: DbInstanceResource s -> TF.Attribute s TF.Zone)
            (\s a -> s { _availability_zone = a } :: DbInstanceResource s)

instance HasBackupRetentionPeriod (DbInstanceResource s) Text where
    type HasBackupRetentionPeriodThread (DbInstanceResource s) Text = s

    backupRetentionPeriod =
        lens (_backup_retention_period :: DbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _backup_retention_period = a } :: DbInstanceResource s)

instance HasBackupWindow (DbInstanceResource s) Text where
    type HasBackupWindowThread (DbInstanceResource s) Text = s

    backupWindow =
        lens (_backup_window :: DbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _backup_window = a } :: DbInstanceResource s)

instance HasCharacterSetName (DbInstanceResource s) Text where
    type HasCharacterSetNameThread (DbInstanceResource s) Text = s

    characterSetName =
        lens (_character_set_name :: DbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _character_set_name = a } :: DbInstanceResource s)

instance HasCopyTagsToSnapshot (DbInstanceResource s) Text where
    type HasCopyTagsToSnapshotThread (DbInstanceResource s) Text = s

    copyTagsToSnapshot =
        lens (_copy_tags_to_snapshot :: DbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _copy_tags_to_snapshot = a } :: DbInstanceResource s)

instance HasDbSubnetGroupName (DbInstanceResource s) Text where
    type HasDbSubnetGroupNameThread (DbInstanceResource s) Text = s

    dbSubnetGroupName =
        lens (_db_subnet_group_name :: DbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _db_subnet_group_name = a } :: DbInstanceResource s)

instance HasEngine (DbInstanceResource s) Text where
    type HasEngineThread (DbInstanceResource s) Text = s

    engine =
        lens (_engine :: DbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _engine = a } :: DbInstanceResource s)

instance HasEngineVersion (DbInstanceResource s) Text where
    type HasEngineVersionThread (DbInstanceResource s) Text = s

    engineVersion =
        lens (_engine_version :: DbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _engine_version = a } :: DbInstanceResource s)

instance HasFinalSnapshotIdentifier (DbInstanceResource s) Text where
    type HasFinalSnapshotIdentifierThread (DbInstanceResource s) Text = s

    finalSnapshotIdentifier =
        lens (_final_snapshot_identifier :: DbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _final_snapshot_identifier = a } :: DbInstanceResource s)

instance HasIamDatabaseAuthenticationEnabled (DbInstanceResource s) TF.Bool where
    type HasIamDatabaseAuthenticationEnabledThread (DbInstanceResource s) TF.Bool = s

    iamDatabaseAuthenticationEnabled =
        lens (_iam_database_authentication_enabled :: DbInstanceResource s -> TF.Attribute s TF.Bool)
            (\s a -> s { _iam_database_authentication_enabled = a } :: DbInstanceResource s)

instance HasIdentifier (DbInstanceResource s) Text where
    type HasIdentifierThread (DbInstanceResource s) Text = s

    identifier =
        lens (_identifier :: DbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _identifier = a } :: DbInstanceResource s)

instance HasIdentifierPrefix (DbInstanceResource s) Text where
    type HasIdentifierPrefixThread (DbInstanceResource s) Text = s

    identifierPrefix =
        lens (_identifier_prefix :: DbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _identifier_prefix = a } :: DbInstanceResource s)

instance HasInstanceClass (DbInstanceResource s) Text where
    type HasInstanceClassThread (DbInstanceResource s) Text = s

    instanceClass =
        lens (_instance_class :: DbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _instance_class = a } :: DbInstanceResource s)

instance HasIops (DbInstanceResource s) Text where
    type HasIopsThread (DbInstanceResource s) Text = s

    iops =
        lens (_iops :: DbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _iops = a } :: DbInstanceResource s)

instance HasKmsKeyId (DbInstanceResource s) Text where
    type HasKmsKeyIdThread (DbInstanceResource s) Text = s

    kmsKeyId =
        lens (_kms_key_id :: DbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _kms_key_id = a } :: DbInstanceResource s)

instance HasLicenseModel (DbInstanceResource s) Text where
    type HasLicenseModelThread (DbInstanceResource s) Text = s

    licenseModel =
        lens (_license_model :: DbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _license_model = a } :: DbInstanceResource s)

instance HasMaintenanceWindow (DbInstanceResource s) Text where
    type HasMaintenanceWindowThread (DbInstanceResource s) Text = s

    maintenanceWindow =
        lens (_maintenance_window :: DbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _maintenance_window = a } :: DbInstanceResource s)

instance HasMonitoringInterval (DbInstanceResource s) Text where
    type HasMonitoringIntervalThread (DbInstanceResource s) Text = s

    monitoringInterval =
        lens (_monitoring_interval :: DbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _monitoring_interval = a } :: DbInstanceResource s)

instance HasMonitoringRoleArn (DbInstanceResource s) Text where
    type HasMonitoringRoleArnThread (DbInstanceResource s) Text = s

    monitoringRoleArn =
        lens (_monitoring_role_arn :: DbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _monitoring_role_arn = a } :: DbInstanceResource s)

instance HasMultiAz (DbInstanceResource s) Text where
    type HasMultiAzThread (DbInstanceResource s) Text = s

    multiAz =
        lens (_multi_az :: DbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _multi_az = a } :: DbInstanceResource s)

instance HasName (DbInstanceResource s) Text where
    type HasNameThread (DbInstanceResource s) Text = s

    name =
        lens (_name :: DbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: DbInstanceResource s)

instance HasOptionGroupName (DbInstanceResource s) Text where
    type HasOptionGroupNameThread (DbInstanceResource s) Text = s

    optionGroupName =
        lens (_option_group_name :: DbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _option_group_name = a } :: DbInstanceResource s)

instance HasParameterGroupName (DbInstanceResource s) Text where
    type HasParameterGroupNameThread (DbInstanceResource s) Text = s

    parameterGroupName =
        lens (_parameter_group_name :: DbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _parameter_group_name = a } :: DbInstanceResource s)

instance HasPassword (DbInstanceResource s) Text where
    type HasPasswordThread (DbInstanceResource s) Text = s

    password =
        lens (_password :: DbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _password = a } :: DbInstanceResource s)

instance HasPort (DbInstanceResource s) Text where
    type HasPortThread (DbInstanceResource s) Text = s

    port =
        lens (_port :: DbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _port = a } :: DbInstanceResource s)

instance HasPubliclyAccessible (DbInstanceResource s) Text where
    type HasPubliclyAccessibleThread (DbInstanceResource s) Text = s

    publiclyAccessible =
        lens (_publicly_accessible :: DbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _publicly_accessible = a } :: DbInstanceResource s)

instance HasReplicateSourceDb (DbInstanceResource s) Text where
    type HasReplicateSourceDbThread (DbInstanceResource s) Text = s

    replicateSourceDb =
        lens (_replicate_source_db :: DbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _replicate_source_db = a } :: DbInstanceResource s)

instance HasSecurityGroupNames (DbInstanceResource s) Text where
    type HasSecurityGroupNamesThread (DbInstanceResource s) Text = s

    securityGroupNames =
        lens (_security_group_names :: DbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _security_group_names = a } :: DbInstanceResource s)

instance HasSkipFinalSnapshot (DbInstanceResource s) Text where
    type HasSkipFinalSnapshotThread (DbInstanceResource s) Text = s

    skipFinalSnapshot =
        lens (_skip_final_snapshot :: DbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _skip_final_snapshot = a } :: DbInstanceResource s)

instance HasSnapshotIdentifier (DbInstanceResource s) Text where
    type HasSnapshotIdentifierThread (DbInstanceResource s) Text = s

    snapshotIdentifier =
        lens (_snapshot_identifier :: DbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _snapshot_identifier = a } :: DbInstanceResource s)

instance HasStorageEncrypted (DbInstanceResource s) Text where
    type HasStorageEncryptedThread (DbInstanceResource s) Text = s

    storageEncrypted =
        lens (_storage_encrypted :: DbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _storage_encrypted = a } :: DbInstanceResource s)

instance HasStorageType (DbInstanceResource s) Text where
    type HasStorageTypeThread (DbInstanceResource s) Text = s

    storageType =
        lens (_storage_type :: DbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _storage_type = a } :: DbInstanceResource s)

instance HasTags (DbInstanceResource s) TF.Tags where
    type HasTagsThread (DbInstanceResource s) TF.Tags = s

    tags =
        lens (_tags :: DbInstanceResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: DbInstanceResource s)

instance HasTimezone (DbInstanceResource s) Text where
    type HasTimezoneThread (DbInstanceResource s) Text = s

    timezone =
        lens (_timezone :: DbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _timezone = a } :: DbInstanceResource s)

instance HasUsername (DbInstanceResource s) Text where
    type HasUsernameThread (DbInstanceResource s) Text = s

    username =
        lens (_username :: DbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _username = a } :: DbInstanceResource s)

instance HasVpcSecurityGroupIds (DbInstanceResource s) Text where
    type HasVpcSecurityGroupIdsThread (DbInstanceResource s) Text = s

    vpcSecurityGroupIds =
        lens (_vpc_security_group_ids :: DbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _vpc_security_group_ids = a } :: DbInstanceResource s)

dbInstanceResource :: TF.Resource TF.AWS (DbInstanceResource s)
dbInstanceResource =
    TF.newResource "aws_db_instance" $
        DbInstanceResource {
              _allocated_storage = TF.Nil
            , _allow_major_version_upgrade = TF.Nil
            , _apply_immediately = TF.Nil
            , _auto_minor_version_upgrade = TF.Nil
            , _availability_zone = TF.Nil
            , _backup_retention_period = TF.Nil
            , _backup_window = TF.Nil
            , _character_set_name = TF.Nil
            , _copy_tags_to_snapshot = TF.Nil
            , _db_subnet_group_name = TF.Nil
            , _engine = TF.Nil
            , _engine_version = TF.Nil
            , _final_snapshot_identifier = TF.Nil
            , _iam_database_authentication_enabled = TF.Nil
            , _identifier = TF.Nil
            , _identifier_prefix = TF.Nil
            , _instance_class = TF.Nil
            , _iops = TF.Nil
            , _kms_key_id = TF.Nil
            , _license_model = TF.Nil
            , _maintenance_window = TF.Nil
            , _monitoring_interval = TF.Nil
            , _monitoring_role_arn = TF.Nil
            , _multi_az = TF.Nil
            , _name = TF.Nil
            , _option_group_name = TF.Nil
            , _parameter_group_name = TF.Nil
            , _password = TF.Nil
            , _port = TF.Nil
            , _publicly_accessible = TF.Nil
            , _replicate_source_db = TF.Nil
            , _security_group_names = TF.Nil
            , _skip_final_snapshot = TF.Nil
            , _snapshot_identifier = TF.Nil
            , _storage_encrypted = TF.Nil
            , _storage_type = TF.Nil
            , _tags = TF.Nil
            , _timezone = TF.Nil
            , _username = TF.Nil
            , _vpc_security_group_ids = TF.Nil
            }

{- | The @aws_db_option_group@ AWS resource.

Provides an RDS DB option group resource.
-}
data DbOptionGroupResource s = DbOptionGroupResource {
      _engine_name :: !(TF.Attribute s Text)
    {- ^ (Required) Specifies the name of the engine that this option group should be associated with. -}
    , _major_engine_version :: !(TF.Attribute s Text)
    {- ^ (Required) Specifies the major version of the engine that this option group should be associated with. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) The name of the option group. If omitted, Terraform will assign a random, unique name. Must be lowercase, to match as it is stored in AWS. -}
    , _name_prefix :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) Creates a unique name beginning with the specified prefix. Conflicts with @name@ . Must be lowercase, to match as it is stored in AWS. -}
    , _option :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of Options to apply. -}
    , _option_group_description :: !(TF.Attribute s Text)
    {- ^ (Optional) The description of the option group. Defaults to "Managed by Terraform". -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    } deriving (Show, Eq)

instance TF.ToHCL (DbOptionGroupResource s) where
    toHCL DbOptionGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "engine_name" <$> TF.attribute _engine_name
        , TF.assign "major_engine_version" <$> TF.attribute _major_engine_version
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "name_prefix" <$> TF.attribute _name_prefix
        , TF.assign "option" <$> TF.attribute _option
        , TF.assign "option_group_description" <$> TF.attribute _option_group_description
        , TF.assign "tags" <$> TF.attribute _tags
        ]

instance HasEngineName (DbOptionGroupResource s) Text where
    type HasEngineNameThread (DbOptionGroupResource s) Text = s

    engineName =
        lens (_engine_name :: DbOptionGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _engine_name = a } :: DbOptionGroupResource s)

instance HasMajorEngineVersion (DbOptionGroupResource s) Text where
    type HasMajorEngineVersionThread (DbOptionGroupResource s) Text = s

    majorEngineVersion =
        lens (_major_engine_version :: DbOptionGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _major_engine_version = a } :: DbOptionGroupResource s)

instance HasName (DbOptionGroupResource s) Text where
    type HasNameThread (DbOptionGroupResource s) Text = s

    name =
        lens (_name :: DbOptionGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: DbOptionGroupResource s)

instance HasNamePrefix (DbOptionGroupResource s) Text where
    type HasNamePrefixThread (DbOptionGroupResource s) Text = s

    namePrefix =
        lens (_name_prefix :: DbOptionGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _name_prefix = a } :: DbOptionGroupResource s)

instance HasOption (DbOptionGroupResource s) Text where
    type HasOptionThread (DbOptionGroupResource s) Text = s

    option =
        lens (_option :: DbOptionGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _option = a } :: DbOptionGroupResource s)

instance HasOptionGroupDescription (DbOptionGroupResource s) Text where
    type HasOptionGroupDescriptionThread (DbOptionGroupResource s) Text = s

    optionGroupDescription =
        lens (_option_group_description :: DbOptionGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _option_group_description = a } :: DbOptionGroupResource s)

instance HasTags (DbOptionGroupResource s) TF.Tags where
    type HasTagsThread (DbOptionGroupResource s) TF.Tags = s

    tags =
        lens (_tags :: DbOptionGroupResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: DbOptionGroupResource s)

instance HasComputedArn (DbOptionGroupResource s) Text

instance HasComputedId (DbOptionGroupResource s) Text

dbOptionGroupResource :: TF.Resource TF.AWS (DbOptionGroupResource s)
dbOptionGroupResource =
    TF.newResource "aws_db_option_group" $
        DbOptionGroupResource {
              _engine_name = TF.Nil
            , _major_engine_version = TF.Nil
            , _name = TF.Nil
            , _name_prefix = TF.Nil
            , _option = TF.Nil
            , _option_group_description = TF.Nil
            , _tags = TF.Nil
            }

{- | The @aws_db_parameter_group@ AWS resource.

Provides an RDS DB parameter group resource.
-}
data DbParameterGroupResource s = DbParameterGroupResource {
      _description :: !(TF.Attribute s Text)
    {- ^ (Optional) The description of the DB parameter group. Defaults to "Managed by Terraform". -}
    , _family' :: !(TF.Attribute s Text)
    {- ^ (Required) The family of the DB parameter group. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) The name of the DB parameter group. If omitted, Terraform will assign a random, unique name. -}
    , _name_prefix :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) Creates a unique name beginning with the specified prefix. Conflicts with @name@ . -}
    , _parameter :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of DB parameters to apply. Note that parameters may differ from a family to an other. Full list of all parameters can be discovered via <https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-parameters.html> after initial creation of the group. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    } deriving (Show, Eq)

instance TF.ToHCL (DbParameterGroupResource s) where
    toHCL DbParameterGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.attribute _description
        , TF.assign "family" <$> TF.attribute _family'
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "name_prefix" <$> TF.attribute _name_prefix
        , TF.assign "parameter" <$> TF.attribute _parameter
        , TF.assign "tags" <$> TF.attribute _tags
        ]

instance HasDescription (DbParameterGroupResource s) Text where
    type HasDescriptionThread (DbParameterGroupResource s) Text = s

    description =
        lens (_description :: DbParameterGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: DbParameterGroupResource s)

instance HasFamily' (DbParameterGroupResource s) Text where
    type HasFamily'Thread (DbParameterGroupResource s) Text = s

    family' =
        lens (_family' :: DbParameterGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _family' = a } :: DbParameterGroupResource s)

instance HasName (DbParameterGroupResource s) Text where
    type HasNameThread (DbParameterGroupResource s) Text = s

    name =
        lens (_name :: DbParameterGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: DbParameterGroupResource s)

instance HasNamePrefix (DbParameterGroupResource s) Text where
    type HasNamePrefixThread (DbParameterGroupResource s) Text = s

    namePrefix =
        lens (_name_prefix :: DbParameterGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _name_prefix = a } :: DbParameterGroupResource s)

instance HasParameter (DbParameterGroupResource s) Text where
    type HasParameterThread (DbParameterGroupResource s) Text = s

    parameter =
        lens (_parameter :: DbParameterGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _parameter = a } :: DbParameterGroupResource s)

instance HasTags (DbParameterGroupResource s) TF.Tags where
    type HasTagsThread (DbParameterGroupResource s) TF.Tags = s

    tags =
        lens (_tags :: DbParameterGroupResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: DbParameterGroupResource s)

instance HasComputedArn (DbParameterGroupResource s) Text

instance HasComputedId (DbParameterGroupResource s) Text

dbParameterGroupResource :: TF.Resource TF.AWS (DbParameterGroupResource s)
dbParameterGroupResource =
    TF.newResource "aws_db_parameter_group" $
        DbParameterGroupResource {
              _description = TF.Nil
            , _family' = TF.Nil
            , _name = TF.Nil
            , _name_prefix = TF.Nil
            , _parameter = TF.Nil
            , _tags = TF.Nil
            }

{- | The @aws_db_security_group@ AWS resource.

Provides an RDS security group resource. This is only for DB instances in
the EC2-Classic Platform. For instances inside a VPC, use the
</docs/providers/aws/r/db_instance.html#vpc_security_group_ids> attribute
instead.
-}
data DbSecurityGroupResource s = DbSecurityGroupResource {
      _description :: !(TF.Attribute s Text)
    {- ^ (Optional) The description of the DB security group. Defaults to "Managed by Terraform". -}
    , _ingress :: !(TF.Attribute s Text)
    {- ^ (Required) A list of ingress rules. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the DB security group. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    } deriving (Show, Eq)

instance TF.ToHCL (DbSecurityGroupResource s) where
    toHCL DbSecurityGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.attribute _description
        , TF.assign "ingress" <$> TF.attribute _ingress
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "tags" <$> TF.attribute _tags
        ]

instance HasDescription (DbSecurityGroupResource s) Text where
    type HasDescriptionThread (DbSecurityGroupResource s) Text = s

    description =
        lens (_description :: DbSecurityGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: DbSecurityGroupResource s)

instance HasIngress (DbSecurityGroupResource s) Text where
    type HasIngressThread (DbSecurityGroupResource s) Text = s

    ingress =
        lens (_ingress :: DbSecurityGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _ingress = a } :: DbSecurityGroupResource s)

instance HasName (DbSecurityGroupResource s) Text where
    type HasNameThread (DbSecurityGroupResource s) Text = s

    name =
        lens (_name :: DbSecurityGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: DbSecurityGroupResource s)

instance HasTags (DbSecurityGroupResource s) TF.Tags where
    type HasTagsThread (DbSecurityGroupResource s) TF.Tags = s

    tags =
        lens (_tags :: DbSecurityGroupResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: DbSecurityGroupResource s)

instance HasComputedArn (DbSecurityGroupResource s) Text

instance HasComputedId (DbSecurityGroupResource s) Text

dbSecurityGroupResource :: TF.Resource TF.AWS (DbSecurityGroupResource s)
dbSecurityGroupResource =
    TF.newResource "aws_db_security_group" $
        DbSecurityGroupResource {
              _description = TF.Nil
            , _ingress = TF.Nil
            , _name = TF.Nil
            , _tags = TF.Nil
            }

{- | The @aws_db_snapshot@ AWS resource.

Creates a Snapshot of an DB Instance.
-}
data DbSnapshotResource s = DbSnapshotResource {
      _db_instance_identifier :: !(TF.Attribute s Text)
    {- ^ (Required) The DB Instance Identifier from which to take the snapshot. -}
    , _db_snapshot_identifier :: !(TF.Attribute s Text)
    {- ^ (Required) The Identifier for the snapshot. -}
    } deriving (Show, Eq)

instance TF.ToHCL (DbSnapshotResource s) where
    toHCL DbSnapshotResource{..} = TF.block $ catMaybes
        [ TF.assign "db_instance_identifier" <$> TF.attribute _db_instance_identifier
        , TF.assign "db_snapshot_identifier" <$> TF.attribute _db_snapshot_identifier
        ]

instance HasDbInstanceIdentifier (DbSnapshotResource s) Text where
    type HasDbInstanceIdentifierThread (DbSnapshotResource s) Text = s

    dbInstanceIdentifier =
        lens (_db_instance_identifier :: DbSnapshotResource s -> TF.Attribute s Text)
            (\s a -> s { _db_instance_identifier = a } :: DbSnapshotResource s)

instance HasDbSnapshotIdentifier (DbSnapshotResource s) Text where
    type HasDbSnapshotIdentifierThread (DbSnapshotResource s) Text = s

    dbSnapshotIdentifier =
        lens (_db_snapshot_identifier :: DbSnapshotResource s -> TF.Attribute s Text)
            (\s a -> s { _db_snapshot_identifier = a } :: DbSnapshotResource s)

instance HasComputedAllocatedStorage (DbSnapshotResource s) Text

instance HasComputedAvailabilityZone (DbSnapshotResource s) TF.Zone

instance HasComputedDbSnapshotArn (DbSnapshotResource s) Text

instance HasComputedEncrypted (DbSnapshotResource s) Text

instance HasComputedEngine (DbSnapshotResource s) Text

instance HasComputedEngineVersion (DbSnapshotResource s) Text

instance HasComputedIops (DbSnapshotResource s) Text

instance HasComputedKmsKeyId (DbSnapshotResource s) Text

instance HasComputedLicenseModel (DbSnapshotResource s) Text

instance HasComputedOptionGroupName (DbSnapshotResource s) Text

instance HasComputedSourceDbSnapshotIdentifier (DbSnapshotResource s) Text

instance HasComputedSourceRegion (DbSnapshotResource s) TF.Region

instance HasComputedStatus (DbSnapshotResource s) Text

instance HasComputedStorageType (DbSnapshotResource s) Text

instance HasComputedVpcId (DbSnapshotResource s) Text

dbSnapshotResource :: TF.Resource TF.AWS (DbSnapshotResource s)
dbSnapshotResource =
    TF.newResource "aws_db_snapshot" $
        DbSnapshotResource {
              _db_instance_identifier = TF.Nil
            , _db_snapshot_identifier = TF.Nil
            }

{- | The @aws_db_subnet_group@ AWS resource.

Provides an RDS DB subnet group resource.
-}
data DbSubnetGroupResource s = DbSubnetGroupResource {
      _description :: !(TF.Attribute s Text)
    {- ^ (Optional) The description of the DB subnet group. Defaults to "Managed by Terraform". -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) The name of the DB subnet group. If omitted, Terraform will assign a random, unique name. -}
    , _name_prefix :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) Creates a unique name beginning with the specified prefix. Conflicts with @name@ . -}
    , _subnet_ids :: !(TF.Attribute s Text)
    {- ^ (Required) A list of VPC subnet IDs. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    } deriving (Show, Eq)

instance TF.ToHCL (DbSubnetGroupResource s) where
    toHCL DbSubnetGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.attribute _description
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "name_prefix" <$> TF.attribute _name_prefix
        , TF.assign "subnet_ids" <$> TF.attribute _subnet_ids
        , TF.assign "tags" <$> TF.attribute _tags
        ]

instance HasDescription (DbSubnetGroupResource s) Text where
    type HasDescriptionThread (DbSubnetGroupResource s) Text = s

    description =
        lens (_description :: DbSubnetGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: DbSubnetGroupResource s)

instance HasName (DbSubnetGroupResource s) Text where
    type HasNameThread (DbSubnetGroupResource s) Text = s

    name =
        lens (_name :: DbSubnetGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: DbSubnetGroupResource s)

instance HasNamePrefix (DbSubnetGroupResource s) Text where
    type HasNamePrefixThread (DbSubnetGroupResource s) Text = s

    namePrefix =
        lens (_name_prefix :: DbSubnetGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _name_prefix = a } :: DbSubnetGroupResource s)

instance HasSubnetIds (DbSubnetGroupResource s) Text where
    type HasSubnetIdsThread (DbSubnetGroupResource s) Text = s

    subnetIds =
        lens (_subnet_ids :: DbSubnetGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _subnet_ids = a } :: DbSubnetGroupResource s)

instance HasTags (DbSubnetGroupResource s) TF.Tags where
    type HasTagsThread (DbSubnetGroupResource s) TF.Tags = s

    tags =
        lens (_tags :: DbSubnetGroupResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: DbSubnetGroupResource s)

instance HasComputedArn (DbSubnetGroupResource s) Text

instance HasComputedId (DbSubnetGroupResource s) Text

dbSubnetGroupResource :: TF.Resource TF.AWS (DbSubnetGroupResource s)
dbSubnetGroupResource =
    TF.newResource "aws_db_subnet_group" $
        DbSubnetGroupResource {
              _description = TF.Nil
            , _name = TF.Nil
            , _name_prefix = TF.Nil
            , _subnet_ids = TF.Nil
            , _tags = TF.Nil
            }

{- | The @aws_default_network_acl@ AWS resource.

Provides a resource to manage the default AWS Network ACL. VPC Only. Each
VPC created in AWS comes with a Default Network ACL that can be managed, but
not destroyed. This is an advanced resource , and has special caveats to be
aware of when using it. Please read this document in its entirety before
using this resource. The @aws_default_network_acl@ behaves differently from
normal resources, in that Terraform does not create this resource, but
instead attempts to "adopt" it into management. We can do this because each
VPC created has a Default Network ACL that cannot be destroyed, and is
created with a known set of default rules. When Terraform first adopts the
Default Network ACL, it immediately removes all rules in the ACL . It then
proceeds to create any rules specified in the configuration. This step is
required so that only the rules specified in the configuration are created.
This resource treats its inline rules as absolute; only the rules defined
inline are created, and any additions/removals external to this resource
will result in diffs being shown. For these reasons, this resource is
incompatible with the @aws_network_acl_rule@ resource. For more information
about Network ACLs, see the AWS Documentation on
<http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_ACLs.html> .
-}
data DefaultNetworkAclResource s = DefaultNetworkAclResource {
      _default_network_acl_id :: !(TF.Attribute s Text)
    {- ^ (Required) The Network ACL ID to manage. This attribute is exported from @aws_vpc@ , or manually found via the AWS Console. -}
    , _egress :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies an egress rule. Parameters defined below. -}
    , _ingress :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies an ingress rule. Parameters defined below. -}
    , _subnet_ids :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of Subnet IDs to apply the ACL to. See the notes below on managing Subnets in the Default Network ACL -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    } deriving (Show, Eq)

instance TF.ToHCL (DefaultNetworkAclResource s) where
    toHCL DefaultNetworkAclResource{..} = TF.block $ catMaybes
        [ TF.assign "default_network_acl_id" <$> TF.attribute _default_network_acl_id
        , TF.assign "egress" <$> TF.attribute _egress
        , TF.assign "ingress" <$> TF.attribute _ingress
        , TF.assign "subnet_ids" <$> TF.attribute _subnet_ids
        , TF.assign "tags" <$> TF.attribute _tags
        ]

instance HasDefaultNetworkAclId (DefaultNetworkAclResource s) Text where
    type HasDefaultNetworkAclIdThread (DefaultNetworkAclResource s) Text = s

    defaultNetworkAclId =
        lens (_default_network_acl_id :: DefaultNetworkAclResource s -> TF.Attribute s Text)
            (\s a -> s { _default_network_acl_id = a } :: DefaultNetworkAclResource s)

instance HasEgress (DefaultNetworkAclResource s) Text where
    type HasEgressThread (DefaultNetworkAclResource s) Text = s

    egress =
        lens (_egress :: DefaultNetworkAclResource s -> TF.Attribute s Text)
            (\s a -> s { _egress = a } :: DefaultNetworkAclResource s)

instance HasIngress (DefaultNetworkAclResource s) Text where
    type HasIngressThread (DefaultNetworkAclResource s) Text = s

    ingress =
        lens (_ingress :: DefaultNetworkAclResource s -> TF.Attribute s Text)
            (\s a -> s { _ingress = a } :: DefaultNetworkAclResource s)

instance HasSubnetIds (DefaultNetworkAclResource s) Text where
    type HasSubnetIdsThread (DefaultNetworkAclResource s) Text = s

    subnetIds =
        lens (_subnet_ids :: DefaultNetworkAclResource s -> TF.Attribute s Text)
            (\s a -> s { _subnet_ids = a } :: DefaultNetworkAclResource s)

instance HasTags (DefaultNetworkAclResource s) TF.Tags where
    type HasTagsThread (DefaultNetworkAclResource s) TF.Tags = s

    tags =
        lens (_tags :: DefaultNetworkAclResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: DefaultNetworkAclResource s)

defaultNetworkAclResource :: TF.Resource TF.AWS (DefaultNetworkAclResource s)
defaultNetworkAclResource =
    TF.newResource "aws_default_network_acl" $
        DefaultNetworkAclResource {
              _default_network_acl_id = TF.Nil
            , _egress = TF.Nil
            , _ingress = TF.Nil
            , _subnet_ids = TF.Nil
            , _tags = TF.Nil
            }

{- | The @aws_default_route_table@ AWS resource.

Provides a resource to manage a Default VPC Routing Table. Each VPC created
in AWS comes with a Default Route Table that can be managed, but not
destroyed. This is an advanced resource , and has special caveats to be
aware of when using it. Please read this document in its entirety before
using this resource. It is recommended you do not use both
@aws_default_route_table@ to manage the default route table and use the
@aws_main_route_table_association@ , due to possible conflict in routes. The
@aws_default_route_table@ behaves differently from normal resources, in that
Terraform does not create this resource, but instead attempts to "adopt" it
into management. We can do this because each VPC created has a Default Route
Table that cannot be destroyed, and is created with a single route. When
Terraform first adopts the Default Route Table, it immediately removes all
defined routes . It then proceeds to create any routes specified in the
configuration. This step is required so that only the routes specified in
the configuration present in the Default Route Table. For more information
about Route Tables, see the AWS Documentation on
<http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html#Route_Replacing_Main_Table>
. For more information about managing normal Route Tables in Terraform, see
our documentation on </docs/providers/aws/r/route_table.html> . ~> NOTE on
Route Tables and Routes: Terraform currently provides both a standalone
<route.html> and a Route Table resource with routes defined in-line. At this
time you cannot use a Route Table with in-line routes in conjunction with
any Route resources. Doing so will cause a conflict of rule settings and
will overwrite routes.
-}
data DefaultRouteTableResource s = DefaultRouteTableResource {
      _default_route_table_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the Default Routing Table. -}
    , _propagating_vgws :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of virtual gateways for propagation. -}
    , _route :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of route objects. Their keys are documented below. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    } deriving (Show, Eq)

instance TF.ToHCL (DefaultRouteTableResource s) where
    toHCL DefaultRouteTableResource{..} = TF.block $ catMaybes
        [ TF.assign "default_route_table_id" <$> TF.attribute _default_route_table_id
        , TF.assign "propagating_vgws" <$> TF.attribute _propagating_vgws
        , TF.assign "route" <$> TF.attribute _route
        , TF.assign "tags" <$> TF.attribute _tags
        ]

instance HasDefaultRouteTableId (DefaultRouteTableResource s) Text where
    type HasDefaultRouteTableIdThread (DefaultRouteTableResource s) Text = s

    defaultRouteTableId =
        lens (_default_route_table_id :: DefaultRouteTableResource s -> TF.Attribute s Text)
            (\s a -> s { _default_route_table_id = a } :: DefaultRouteTableResource s)

instance HasPropagatingVgws (DefaultRouteTableResource s) Text where
    type HasPropagatingVgwsThread (DefaultRouteTableResource s) Text = s

    propagatingVgws =
        lens (_propagating_vgws :: DefaultRouteTableResource s -> TF.Attribute s Text)
            (\s a -> s { _propagating_vgws = a } :: DefaultRouteTableResource s)

instance HasRoute (DefaultRouteTableResource s) Text where
    type HasRouteThread (DefaultRouteTableResource s) Text = s

    route =
        lens (_route :: DefaultRouteTableResource s -> TF.Attribute s Text)
            (\s a -> s { _route = a } :: DefaultRouteTableResource s)

instance HasTags (DefaultRouteTableResource s) TF.Tags where
    type HasTagsThread (DefaultRouteTableResource s) TF.Tags = s

    tags =
        lens (_tags :: DefaultRouteTableResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: DefaultRouteTableResource s)

instance HasComputedId (DefaultRouteTableResource s) Text

defaultRouteTableResource :: TF.Resource TF.AWS (DefaultRouteTableResource s)
defaultRouteTableResource =
    TF.newResource "aws_default_route_table" $
        DefaultRouteTableResource {
              _default_route_table_id = TF.Nil
            , _propagating_vgws = TF.Nil
            , _route = TF.Nil
            , _tags = TF.Nil
            }

{- | The @aws_default_security_group@ AWS resource.

Provides a resource to manage the default AWS Security Group. For EC2
Classic accounts, each region comes with a Default Security Group.
Additionally, each VPC created in AWS comes with a Default Security Group
that can be managed, but not destroyed. This is an advanced resource , and
has special caveats to be aware of when using it. Please read this document
in its entirety before using this resource. The @aws_default_security_group@
behaves differently from normal resources, in that Terraform does not create
this resource, but instead "adopts" it into management. We can do this
because these default security groups cannot be destroyed, and are created
with a known set of default ingress/egress rules. When Terraform first
adopts the Default Security Group, it immediately removes all ingress and
egress rules in the Security Group . It then proceeds to create any rules
specified in the configuration. This step is required so that only the rules
specified in the configuration are created. This resource treats it's inline
rules as absolute; only the rules defined inline are created, and any
additions/removals external to this resource will result in diff shown. For
these reasons, this resource is incompatible with the
@aws_security_group_rule@ resource. For more information about Default
Security Groups, see the AWS Documentation on
<http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html#default-security-group>
.
-}
data DefaultSecurityGroupResource s = DefaultSecurityGroupResource {
      _egress :: !(TF.Attribute s Text)
    {- ^ (Optional, VPC only) Can be specified multiple times for each egress rule. Each egress block supports fields documented below. -}
    , _ingress :: !(TF.Attribute s Text)
    {- ^ (Optional) Can be specified multiple times for each ingress rule. Each ingress block supports fields documented below. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _vpc_id :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) The VPC ID. Note that changing the @vpc_id@ will not restore any default security group rules that were modified, added, or removed. It will be left in it's current state -}
    } deriving (Show, Eq)

instance TF.ToHCL (DefaultSecurityGroupResource s) where
    toHCL DefaultSecurityGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "egress" <$> TF.attribute _egress
        , TF.assign "ingress" <$> TF.attribute _ingress
        , TF.assign "tags" <$> TF.attribute _tags
        , TF.assign "vpc_id" <$> TF.attribute _vpc_id
        ]

instance HasEgress (DefaultSecurityGroupResource s) Text where
    type HasEgressThread (DefaultSecurityGroupResource s) Text = s

    egress =
        lens (_egress :: DefaultSecurityGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _egress = a } :: DefaultSecurityGroupResource s)

instance HasIngress (DefaultSecurityGroupResource s) Text where
    type HasIngressThread (DefaultSecurityGroupResource s) Text = s

    ingress =
        lens (_ingress :: DefaultSecurityGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _ingress = a } :: DefaultSecurityGroupResource s)

instance HasTags (DefaultSecurityGroupResource s) TF.Tags where
    type HasTagsThread (DefaultSecurityGroupResource s) TF.Tags = s

    tags =
        lens (_tags :: DefaultSecurityGroupResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: DefaultSecurityGroupResource s)

instance HasVpcId (DefaultSecurityGroupResource s) Text where
    type HasVpcIdThread (DefaultSecurityGroupResource s) Text = s

    vpcId =
        lens (_vpc_id :: DefaultSecurityGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _vpc_id = a } :: DefaultSecurityGroupResource s)

defaultSecurityGroupResource :: TF.Resource TF.AWS (DefaultSecurityGroupResource s)
defaultSecurityGroupResource =
    TF.newResource "aws_default_security_group" $
        DefaultSecurityGroupResource {
              _egress = TF.Nil
            , _ingress = TF.Nil
            , _tags = TF.Nil
            , _vpc_id = TF.Nil
            }

{- | The @aws_default_subnet@ AWS resource.

Provides a resource to manage a
<http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/default-vpc.html#default-vpc-basics>
in the current region. The @aws_default_subnet@ behaves differently from
normal resources, in that Terraform does not create this resource, but
instead "adopts" it into management.
-}
data DefaultSubnetResource s = DefaultSubnetResource {
      _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    } deriving (Show, Eq)

instance TF.ToHCL (DefaultSubnetResource s) where
    toHCL DefaultSubnetResource{..} = TF.block $ catMaybes
        [ TF.assign "tags" <$> TF.attribute _tags
        ]

instance HasTags (DefaultSubnetResource s) TF.Tags where
    type HasTagsThread (DefaultSubnetResource s) TF.Tags = s

    tags =
        lens (_tags :: DefaultSubnetResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: DefaultSubnetResource s)

defaultSubnetResource :: TF.Resource TF.AWS (DefaultSubnetResource s)
defaultSubnetResource =
    TF.newResource "aws_default_subnet" $
        DefaultSubnetResource {
              _tags = TF.Nil
            }

{- | The @aws_default_vpc_dhcp_options@ AWS resource.

Provides a resource to manage the
<http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_DHCP_Options.html#AmazonDNS>
in the current region. Each AWS region comes with a default set of DHCP
options. This is an advanced resource , and has special caveats to be aware
of when using it. Please read this document in its entirety before using
this resource. The @aws_default_vpc_dhcp_options@ behaves differently from
normal resources, in that Terraform does not create this resource, but
instead "adopts" it into management.
-}
data DefaultVpcDhcpOptionsResource s = DefaultVpcDhcpOptionsResource {
      _netbios_name_servers :: !(TF.Attribute s Text)
    {- ^ (Optional) List of NETBIOS name servers. -}
    , _netbios_node_type :: !(TF.Attribute s Text)
    {- ^ (Optional) The NetBIOS node type (1, 2, 4, or 8). AWS recommends to specify 2 since broadcast and multicast are not supported in their network. For more information about these node types, see <http://www.ietf.org/rfc/rfc2132.txt> . -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    } deriving (Show, Eq)

instance TF.ToHCL (DefaultVpcDhcpOptionsResource s) where
    toHCL DefaultVpcDhcpOptionsResource{..} = TF.block $ catMaybes
        [ TF.assign "netbios_name_servers" <$> TF.attribute _netbios_name_servers
        , TF.assign "netbios_node_type" <$> TF.attribute _netbios_node_type
        , TF.assign "tags" <$> TF.attribute _tags
        ]

instance HasNetbiosNameServers (DefaultVpcDhcpOptionsResource s) Text where
    type HasNetbiosNameServersThread (DefaultVpcDhcpOptionsResource s) Text = s

    netbiosNameServers =
        lens (_netbios_name_servers :: DefaultVpcDhcpOptionsResource s -> TF.Attribute s Text)
            (\s a -> s { _netbios_name_servers = a } :: DefaultVpcDhcpOptionsResource s)

instance HasNetbiosNodeType (DefaultVpcDhcpOptionsResource s) Text where
    type HasNetbiosNodeTypeThread (DefaultVpcDhcpOptionsResource s) Text = s

    netbiosNodeType =
        lens (_netbios_node_type :: DefaultVpcDhcpOptionsResource s -> TF.Attribute s Text)
            (\s a -> s { _netbios_node_type = a } :: DefaultVpcDhcpOptionsResource s)

instance HasTags (DefaultVpcDhcpOptionsResource s) TF.Tags where
    type HasTagsThread (DefaultVpcDhcpOptionsResource s) TF.Tags = s

    tags =
        lens (_tags :: DefaultVpcDhcpOptionsResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: DefaultVpcDhcpOptionsResource s)

defaultVpcDhcpOptionsResource :: TF.Resource TF.AWS (DefaultVpcDhcpOptionsResource s)
defaultVpcDhcpOptionsResource =
    TF.newResource "aws_default_vpc_dhcp_options" $
        DefaultVpcDhcpOptionsResource {
              _netbios_name_servers = TF.Nil
            , _netbios_node_type = TF.Nil
            , _tags = TF.Nil
            }

{- | The @aws_default_vpc@ AWS resource.

Provides a resource to manage the
<http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/default-vpc.html> in
the current region. For AWS accounts created after 2013-12-04, each region
comes with a Default VPC. This is an advanced resource , and has special
caveats to be aware of when using it. Please read this document in its
entirety before using this resource. The @aws_default_vpc@ behaves
differently from normal resources, in that Terraform does not create this
resource, but instead "adopts" it into management.
-}
data DefaultVpcResource s = DefaultVpcResource {
      _enable_classiclink :: !(TF.Attribute s TF.Bool)
    {- ^ (Optional) A boolean flag to enable/disable ClassicLink for the VPC. Only valid in regions and accounts that support EC2 Classic. See the <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html> for more information. Defaults false. -}
    , _enable_dns_hostnames :: !(TF.Attribute s TF.Bool)
    {- ^ (Optional) A boolean flag to enable/disable DNS hostnames in the VPC. Defaults false. -}
    , _enable_dns_support :: !(TF.Attribute s TF.Bool)
    {- ^ (Optional) A boolean flag to enable/disable DNS support in the VPC. Defaults true. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    } deriving (Show, Eq)

instance TF.ToHCL (DefaultVpcResource s) where
    toHCL DefaultVpcResource{..} = TF.block $ catMaybes
        [ TF.assign "enable_classiclink" <$> TF.attribute _enable_classiclink
        , TF.assign "enable_dns_hostnames" <$> TF.attribute _enable_dns_hostnames
        , TF.assign "enable_dns_support" <$> TF.attribute _enable_dns_support
        , TF.assign "tags" <$> TF.attribute _tags
        ]

instance HasEnableClassiclink (DefaultVpcResource s) TF.Bool where
    type HasEnableClassiclinkThread (DefaultVpcResource s) TF.Bool = s

    enableClassiclink =
        lens (_enable_classiclink :: DefaultVpcResource s -> TF.Attribute s TF.Bool)
            (\s a -> s { _enable_classiclink = a } :: DefaultVpcResource s)

instance HasEnableDnsHostnames (DefaultVpcResource s) TF.Bool where
    type HasEnableDnsHostnamesThread (DefaultVpcResource s) TF.Bool = s

    enableDnsHostnames =
        lens (_enable_dns_hostnames :: DefaultVpcResource s -> TF.Attribute s TF.Bool)
            (\s a -> s { _enable_dns_hostnames = a } :: DefaultVpcResource s)

instance HasEnableDnsSupport (DefaultVpcResource s) TF.Bool where
    type HasEnableDnsSupportThread (DefaultVpcResource s) TF.Bool = s

    enableDnsSupport =
        lens (_enable_dns_support :: DefaultVpcResource s -> TF.Attribute s TF.Bool)
            (\s a -> s { _enable_dns_support = a } :: DefaultVpcResource s)

instance HasTags (DefaultVpcResource s) TF.Tags where
    type HasTagsThread (DefaultVpcResource s) TF.Tags = s

    tags =
        lens (_tags :: DefaultVpcResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: DefaultVpcResource s)

defaultVpcResource :: TF.Resource TF.AWS (DefaultVpcResource s)
defaultVpcResource =
    TF.newResource "aws_default_vpc" $
        DefaultVpcResource {
              _enable_classiclink = TF.Nil
            , _enable_dns_hostnames = TF.Nil
            , _enable_dns_support = TF.Nil
            , _tags = TF.Nil
            }

{- | The @aws_devicefarm_project@ AWS resource.

Provides a resource to manage AWS Device Farm Projects. Please keep in mind
that this feature is only supported on the "us-west-2" region. This resource
will error if you try to create a project in another region. For more
information about Device Farm Projects, see the AWS Documentation on
<http://docs.aws.amazon.com/devicefarm/latest/APIReference/API_GetProject.html>
.
-}
data DevicefarmProjectResource s = DevicefarmProjectResource {
      _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the project -}
    } deriving (Show, Eq)

instance TF.ToHCL (DevicefarmProjectResource s) where
    toHCL DevicefarmProjectResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.attribute _name
        ]

instance HasName (DevicefarmProjectResource s) Text where
    type HasNameThread (DevicefarmProjectResource s) Text = s

    name =
        lens (_name :: DevicefarmProjectResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: DevicefarmProjectResource s)

instance HasComputedArn (DevicefarmProjectResource s) Text

devicefarmProjectResource :: TF.Resource TF.AWS (DevicefarmProjectResource s)
devicefarmProjectResource =
    TF.newResource "aws_devicefarm_project" $
        DevicefarmProjectResource {
              _name = TF.Nil
            }

{- | The @aws_directory_service_directory@ AWS resource.

Provides a Simple or Managed Microsoft directory in AWS Directory Service.
~> Note: All arguments including the password and customer username will be
stored in the raw state as plain-text. </docs/state/sensitive-data.html> .
-}
data DirectoryServiceDirectoryResource s = DirectoryServiceDirectoryResource {
      _alias :: !(TF.Attribute s Text)
    {- ^ (Optional) The alias for the directory (must be unique amongst all aliases in AWS). Required for @enable_sso@ . -}
    , _connect_settings :: !(TF.Attribute s Text)
    {- ^ (Required for @ADConnector@ ) Connector related information about the directory. Fields documented below. -}
    , _description :: !(TF.Attribute s Text)
    {- ^ (Optional) A textual description for the directory. -}
    , _enable_sso :: !(TF.Attribute s TF.Bool)
    {- ^ (Optional) Whether to enable single-sign on for the directory. Requires @alias@ . Defaults to @false@ . -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The fully qualified name for the directory, such as @corp.example.com@ -}
    , _password :: !(TF.Attribute s Text)
    {- ^ (Required) The password for the directory administrator or connector user. -}
    , _short_name :: !(TF.Attribute s Text)
    {- ^ (Optional) The short name of the directory, such as @CORP@ . -}
    , _size :: !(TF.Attribute s Text)
    {- ^ (Required for @SimpleAD@ and @ADConnector@ ) The size of the directory ( @Small@ or @Large@ are accepted values). -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _type' :: !(TF.Attribute s Text)
    {- ^ (Optional) - The directory type ( @SimpleAD@ or @MicrosoftAD@ are accepted values). Defaults to @SimpleAD@ . -}
    , _vpc_settings :: !(TF.Attribute s Text)
    {- ^ (Required for @SimpleAD@ and @MicrosoftAD@ ) VPC related information about the directory. Fields documented below. -}
    } deriving (Show, Eq)

instance TF.ToHCL (DirectoryServiceDirectoryResource s) where
    toHCL DirectoryServiceDirectoryResource{..} = TF.block $ catMaybes
        [ TF.assign "alias" <$> TF.attribute _alias
        , TF.assign "connect_settings" <$> TF.attribute _connect_settings
        , TF.assign "description" <$> TF.attribute _description
        , TF.assign "enable_sso" <$> TF.attribute _enable_sso
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "password" <$> TF.attribute _password
        , TF.assign "short_name" <$> TF.attribute _short_name
        , TF.assign "size" <$> TF.attribute _size
        , TF.assign "tags" <$> TF.attribute _tags
        , TF.assign "type" <$> TF.attribute _type'
        , TF.assign "vpc_settings" <$> TF.attribute _vpc_settings
        ]

instance HasAlias (DirectoryServiceDirectoryResource s) Text where
    type HasAliasThread (DirectoryServiceDirectoryResource s) Text = s

    alias =
        lens (_alias :: DirectoryServiceDirectoryResource s -> TF.Attribute s Text)
            (\s a -> s { _alias = a } :: DirectoryServiceDirectoryResource s)

instance HasConnectSettings (DirectoryServiceDirectoryResource s) Text where
    type HasConnectSettingsThread (DirectoryServiceDirectoryResource s) Text = s

    connectSettings =
        lens (_connect_settings :: DirectoryServiceDirectoryResource s -> TF.Attribute s Text)
            (\s a -> s { _connect_settings = a } :: DirectoryServiceDirectoryResource s)

instance HasDescription (DirectoryServiceDirectoryResource s) Text where
    type HasDescriptionThread (DirectoryServiceDirectoryResource s) Text = s

    description =
        lens (_description :: DirectoryServiceDirectoryResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: DirectoryServiceDirectoryResource s)

instance HasEnableSso (DirectoryServiceDirectoryResource s) TF.Bool where
    type HasEnableSsoThread (DirectoryServiceDirectoryResource s) TF.Bool = s

    enableSso =
        lens (_enable_sso :: DirectoryServiceDirectoryResource s -> TF.Attribute s TF.Bool)
            (\s a -> s { _enable_sso = a } :: DirectoryServiceDirectoryResource s)

instance HasName (DirectoryServiceDirectoryResource s) Text where
    type HasNameThread (DirectoryServiceDirectoryResource s) Text = s

    name =
        lens (_name :: DirectoryServiceDirectoryResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: DirectoryServiceDirectoryResource s)

instance HasPassword (DirectoryServiceDirectoryResource s) Text where
    type HasPasswordThread (DirectoryServiceDirectoryResource s) Text = s

    password =
        lens (_password :: DirectoryServiceDirectoryResource s -> TF.Attribute s Text)
            (\s a -> s { _password = a } :: DirectoryServiceDirectoryResource s)

instance HasShortName (DirectoryServiceDirectoryResource s) Text where
    type HasShortNameThread (DirectoryServiceDirectoryResource s) Text = s

    shortName =
        lens (_short_name :: DirectoryServiceDirectoryResource s -> TF.Attribute s Text)
            (\s a -> s { _short_name = a } :: DirectoryServiceDirectoryResource s)

instance HasSize (DirectoryServiceDirectoryResource s) Text where
    type HasSizeThread (DirectoryServiceDirectoryResource s) Text = s

    size =
        lens (_size :: DirectoryServiceDirectoryResource s -> TF.Attribute s Text)
            (\s a -> s { _size = a } :: DirectoryServiceDirectoryResource s)

instance HasTags (DirectoryServiceDirectoryResource s) TF.Tags where
    type HasTagsThread (DirectoryServiceDirectoryResource s) TF.Tags = s

    tags =
        lens (_tags :: DirectoryServiceDirectoryResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: DirectoryServiceDirectoryResource s)

instance HasType' (DirectoryServiceDirectoryResource s) Text where
    type HasType'Thread (DirectoryServiceDirectoryResource s) Text = s

    type' =
        lens (_type' :: DirectoryServiceDirectoryResource s -> TF.Attribute s Text)
            (\s a -> s { _type' = a } :: DirectoryServiceDirectoryResource s)

instance HasVpcSettings (DirectoryServiceDirectoryResource s) Text where
    type HasVpcSettingsThread (DirectoryServiceDirectoryResource s) Text = s

    vpcSettings =
        lens (_vpc_settings :: DirectoryServiceDirectoryResource s -> TF.Attribute s Text)
            (\s a -> s { _vpc_settings = a } :: DirectoryServiceDirectoryResource s)

instance HasComputedAccessUrl (DirectoryServiceDirectoryResource s) Text

instance HasComputedDnsIpAddresses (DirectoryServiceDirectoryResource s) Text

instance HasComputedId (DirectoryServiceDirectoryResource s) Text

instance HasComputedSecurityGroupId (DirectoryServiceDirectoryResource s) Text

directoryServiceDirectoryResource :: TF.Resource TF.AWS (DirectoryServiceDirectoryResource s)
directoryServiceDirectoryResource =
    TF.newResource "aws_directory_service_directory" $
        DirectoryServiceDirectoryResource {
              _alias = TF.Nil
            , _connect_settings = TF.Nil
            , _description = TF.Nil
            , _enable_sso = TF.Nil
            , _name = TF.Nil
            , _password = TF.Nil
            , _short_name = TF.Nil
            , _size = TF.Nil
            , _tags = TF.Nil
            , _type' = TF.Nil
            , _vpc_settings = TF.Nil
            }

{- | The @aws_dms_certificate@ AWS resource.

Provides a DMS (Data Migration Service) certificate resource. DMS
certificates can be created, deleted, and imported. ~> Note: All arguments
including the PEM encoded certificate will be stored in the raw state as
plain-text. </docs/state/sensitive-data.html> .
-}
data DmsCertificateResource s = DmsCertificateResource {
      _certificate_id :: !(TF.Attribute s Text)
    {- ^ (Required) The certificate identifier. -}
    , _certificate_pem :: !(TF.Attribute s Text)
    {- ^ (Optional) The contents of the .pem X.509 certificate file for the certificate. Either @certificate_pem@ or @certificate_wallet@ must be set. -}
    , _certificate_wallet :: !(TF.Attribute s Text)
    {- ^ (Optional) The contents of the Oracle Wallet certificate for use with SSL. Either @certificate_pem@ or @certificate_wallet@ must be set. -}
    } deriving (Show, Eq)

instance TF.ToHCL (DmsCertificateResource s) where
    toHCL DmsCertificateResource{..} = TF.block $ catMaybes
        [ TF.assign "certificate_id" <$> TF.attribute _certificate_id
        , TF.assign "certificate_pem" <$> TF.attribute _certificate_pem
        , TF.assign "certificate_wallet" <$> TF.attribute _certificate_wallet
        ]

instance HasCertificateId (DmsCertificateResource s) Text where
    type HasCertificateIdThread (DmsCertificateResource s) Text = s

    certificateId =
        lens (_certificate_id :: DmsCertificateResource s -> TF.Attribute s Text)
            (\s a -> s { _certificate_id = a } :: DmsCertificateResource s)

instance HasCertificatePem (DmsCertificateResource s) Text where
    type HasCertificatePemThread (DmsCertificateResource s) Text = s

    certificatePem =
        lens (_certificate_pem :: DmsCertificateResource s -> TF.Attribute s Text)
            (\s a -> s { _certificate_pem = a } :: DmsCertificateResource s)

instance HasCertificateWallet (DmsCertificateResource s) Text where
    type HasCertificateWalletThread (DmsCertificateResource s) Text = s

    certificateWallet =
        lens (_certificate_wallet :: DmsCertificateResource s -> TF.Attribute s Text)
            (\s a -> s { _certificate_wallet = a } :: DmsCertificateResource s)

instance HasComputedCertificateArn (DmsCertificateResource s) Text

dmsCertificateResource :: TF.Resource TF.AWS (DmsCertificateResource s)
dmsCertificateResource =
    TF.newResource "aws_dms_certificate" $
        DmsCertificateResource {
              _certificate_id = TF.Nil
            , _certificate_pem = TF.Nil
            , _certificate_wallet = TF.Nil
            }

{- | The @aws_dms_endpoint@ AWS resource.

Provides a DMS (Data Migration Service) endpoint resource. DMS endpoints can
be created, updated, deleted, and imported. ~> Note: All arguments including
the password will be stored in the raw state as plain-text.
</docs/state/sensitive-data.html> .
-}
data DmsEndpointResource s = DmsEndpointResource {
      _certificate_arn :: !(TF.Attribute s Text)
    {- ^ (Optional, Default: empty string) The Amazon Resource Name (ARN) for the certificate. -}
    , _database_name :: !(TF.Attribute s Text)
    {- ^ (Optional) The name of the endpoint database. -}
    , _endpoint_id :: !(TF.Attribute s Text)
    {- ^ (Required) The database endpoint identifier. -}
    , _endpoint_type :: !(TF.Attribute s Text)
    {- ^ (Required) The type of endpoint. Can be one of @source | target@ . -}
    , _engine_name :: !(TF.Attribute s Text)
    {- ^ (Required) The type of engine for the endpoint. Can be one of @mysql | oracle | postgres | mariadb | aurora | redshift | sybase | sqlserver | dynamodb@ . -}
    , _extra_connection_attributes :: !(TF.Attribute s Text)
    {- ^ (Optional) Additional attributes associated with the connection. For available attributes see <http://docs.aws.amazon.com/dms/latest/userguide/CHAP_Introduction.ConnectionAttributes.html> . -}
    , _kms_key_arn :: !(TF.Attribute s Text)
    {- ^ (Optional) The Amazon Resource Name (ARN) for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for @kms_key_arn@ , then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region. -}
    , _password :: !(TF.Attribute s Text)
    {- ^ (Optional) The password to be used to login to the endpoint database. -}
    , _port :: !(TF.Attribute s Text)
    {- ^ (Optional) The port used by the endpoint database. -}
    , _server_name :: !(TF.Attribute s Text)
    {- ^ (Optional) The host name of the server. -}
    , _service_access_role :: !(TF.Attribute s Text)
    {- ^ (Optional) The Amazon Resource Name (ARN) used by the service access IAM role for dynamodb endpoints. -}
    , _ssl_mode :: !(TF.Attribute s Text)
    {- ^ (Optional, Default: none) The SSL mode to use for the connection. Can be one of @none | require | verify-ca | verify-full@ -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _username :: !(TF.Attribute s Text)
    {- ^ (Optional) The user name to be used to login to the endpoint database. -}
    } deriving (Show, Eq)

instance TF.ToHCL (DmsEndpointResource s) where
    toHCL DmsEndpointResource{..} = TF.block $ catMaybes
        [ TF.assign "certificate_arn" <$> TF.attribute _certificate_arn
        , TF.assign "database_name" <$> TF.attribute _database_name
        , TF.assign "endpoint_id" <$> TF.attribute _endpoint_id
        , TF.assign "endpoint_type" <$> TF.attribute _endpoint_type
        , TF.assign "engine_name" <$> TF.attribute _engine_name
        , TF.assign "extra_connection_attributes" <$> TF.attribute _extra_connection_attributes
        , TF.assign "kms_key_arn" <$> TF.attribute _kms_key_arn
        , TF.assign "password" <$> TF.attribute _password
        , TF.assign "port" <$> TF.attribute _port
        , TF.assign "server_name" <$> TF.attribute _server_name
        , TF.assign "service_access_role" <$> TF.attribute _service_access_role
        , TF.assign "ssl_mode" <$> TF.attribute _ssl_mode
        , TF.assign "tags" <$> TF.attribute _tags
        , TF.assign "username" <$> TF.attribute _username
        ]

instance HasCertificateArn (DmsEndpointResource s) Text where
    type HasCertificateArnThread (DmsEndpointResource s) Text = s

    certificateArn =
        lens (_certificate_arn :: DmsEndpointResource s -> TF.Attribute s Text)
            (\s a -> s { _certificate_arn = a } :: DmsEndpointResource s)

instance HasDatabaseName (DmsEndpointResource s) Text where
    type HasDatabaseNameThread (DmsEndpointResource s) Text = s

    databaseName =
        lens (_database_name :: DmsEndpointResource s -> TF.Attribute s Text)
            (\s a -> s { _database_name = a } :: DmsEndpointResource s)

instance HasEndpointId (DmsEndpointResource s) Text where
    type HasEndpointIdThread (DmsEndpointResource s) Text = s

    endpointId =
        lens (_endpoint_id :: DmsEndpointResource s -> TF.Attribute s Text)
            (\s a -> s { _endpoint_id = a } :: DmsEndpointResource s)

instance HasEndpointType (DmsEndpointResource s) Text where
    type HasEndpointTypeThread (DmsEndpointResource s) Text = s

    endpointType =
        lens (_endpoint_type :: DmsEndpointResource s -> TF.Attribute s Text)
            (\s a -> s { _endpoint_type = a } :: DmsEndpointResource s)

instance HasEngineName (DmsEndpointResource s) Text where
    type HasEngineNameThread (DmsEndpointResource s) Text = s

    engineName =
        lens (_engine_name :: DmsEndpointResource s -> TF.Attribute s Text)
            (\s a -> s { _engine_name = a } :: DmsEndpointResource s)

instance HasExtraConnectionAttributes (DmsEndpointResource s) Text where
    type HasExtraConnectionAttributesThread (DmsEndpointResource s) Text = s

    extraConnectionAttributes =
        lens (_extra_connection_attributes :: DmsEndpointResource s -> TF.Attribute s Text)
            (\s a -> s { _extra_connection_attributes = a } :: DmsEndpointResource s)

instance HasKmsKeyArn (DmsEndpointResource s) Text where
    type HasKmsKeyArnThread (DmsEndpointResource s) Text = s

    kmsKeyArn =
        lens (_kms_key_arn :: DmsEndpointResource s -> TF.Attribute s Text)
            (\s a -> s { _kms_key_arn = a } :: DmsEndpointResource s)

instance HasPassword (DmsEndpointResource s) Text where
    type HasPasswordThread (DmsEndpointResource s) Text = s

    password =
        lens (_password :: DmsEndpointResource s -> TF.Attribute s Text)
            (\s a -> s { _password = a } :: DmsEndpointResource s)

instance HasPort (DmsEndpointResource s) Text where
    type HasPortThread (DmsEndpointResource s) Text = s

    port =
        lens (_port :: DmsEndpointResource s -> TF.Attribute s Text)
            (\s a -> s { _port = a } :: DmsEndpointResource s)

instance HasServerName (DmsEndpointResource s) Text where
    type HasServerNameThread (DmsEndpointResource s) Text = s

    serverName =
        lens (_server_name :: DmsEndpointResource s -> TF.Attribute s Text)
            (\s a -> s { _server_name = a } :: DmsEndpointResource s)

instance HasServiceAccessRole (DmsEndpointResource s) Text where
    type HasServiceAccessRoleThread (DmsEndpointResource s) Text = s

    serviceAccessRole =
        lens (_service_access_role :: DmsEndpointResource s -> TF.Attribute s Text)
            (\s a -> s { _service_access_role = a } :: DmsEndpointResource s)

instance HasSslMode (DmsEndpointResource s) Text where
    type HasSslModeThread (DmsEndpointResource s) Text = s

    sslMode =
        lens (_ssl_mode :: DmsEndpointResource s -> TF.Attribute s Text)
            (\s a -> s { _ssl_mode = a } :: DmsEndpointResource s)

instance HasTags (DmsEndpointResource s) TF.Tags where
    type HasTagsThread (DmsEndpointResource s) TF.Tags = s

    tags =
        lens (_tags :: DmsEndpointResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: DmsEndpointResource s)

instance HasUsername (DmsEndpointResource s) Text where
    type HasUsernameThread (DmsEndpointResource s) Text = s

    username =
        lens (_username :: DmsEndpointResource s -> TF.Attribute s Text)
            (\s a -> s { _username = a } :: DmsEndpointResource s)

instance HasComputedEndpointArn (DmsEndpointResource s) Text

dmsEndpointResource :: TF.Resource TF.AWS (DmsEndpointResource s)
dmsEndpointResource =
    TF.newResource "aws_dms_endpoint" $
        DmsEndpointResource {
              _certificate_arn = TF.Nil
            , _database_name = TF.Nil
            , _endpoint_id = TF.Nil
            , _endpoint_type = TF.Nil
            , _engine_name = TF.Nil
            , _extra_connection_attributes = TF.Nil
            , _kms_key_arn = TF.Nil
            , _password = TF.Nil
            , _port = TF.Nil
            , _server_name = TF.Nil
            , _service_access_role = TF.Nil
            , _ssl_mode = TF.Nil
            , _tags = TF.Nil
            , _username = TF.Nil
            }

{- | The @aws_dms_replication_instance@ AWS resource.

Provides a DMS (Data Migration Service) replication instance resource. DMS
replication instances can be created, updated, deleted, and imported.
-}
data DmsReplicationInstanceResource s = DmsReplicationInstanceResource {
      _allocated_storage :: !(TF.Attribute s Text)
    {- ^ (Optional, Default: 50, Min: 5, Max: 6144) The amount of storage (in gigabytes) to be initially allocated for the replication instance. -}
    , _apply_immediately :: !(TF.Attribute s Text)
    {- ^ (Optional, Default: false) Indicates whether the changes should be applied immediately or during the next maintenance window. Only used when updating an existing resource. -}
    , _auto_minor_version_upgrade :: !(TF.Attribute s Text)
    {- ^ (Optional, Default: false) Indicates that minor engine upgrades will be applied automatically to the replication instance during the maintenance window. -}
    , _availability_zone :: !(TF.Attribute s TF.Zone)
    {- ^ (Optional) The EC2 Availability Zone that the replication instance will be created in. -}
    , _engine_version :: !(TF.Attribute s Text)
    {- ^ (Optional) The engine version number of the replication instance. -}
    , _kms_key_arn :: !(TF.Attribute s Text)
    {- ^ (Optional) The Amazon Resource Name (ARN) for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for @kms_key_arn@ , then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region. -}
    , _multi_az :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies if the replication instance is a multi-az deployment. You cannot set the @availability_zone@ parameter if the @multi_az@ parameter is set to @true@ . -}
    , _preferred_maintenance_window :: !(TF.Attribute s Text)
    {- ^ (Optional) The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC). -}
    , _publicly_accessible :: !(TF.Attribute s Text)
    {- ^ (Optional, Default: false) Specifies the accessibility options for the replication instance. A value of true represents an instance with a public IP address. A value of false represents an instance with a private IP address. -}
    , _replication_instance_class :: !(TF.Attribute s Text)
    {- ^ (Required) The compute and memory capacity of the replication instance as specified by the replication instance class. Can be one of @dms.t2.micro | dms.t2.small | dms.t2.medium | dms.t2.large | dms.c4.large | dms.c4.xlarge | dms.c4.2xlarge | dms.c4.4xlarge@ -}
    , _replication_instance_id :: !(TF.Attribute s Text)
    {- ^ (Required) The replication instance identifier. This parameter is stored as a lowercase string. -}
    , _replication_subnet_group_id :: !(TF.Attribute s Text)
    {- ^ (Optional) A subnet group to associate with the replication instance. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _vpc_security_group_ids :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of VPC security group IDs to be used with the replication instance. The VPC security groups must work with the VPC containing the replication instance. -}
    } deriving (Show, Eq)

instance TF.ToHCL (DmsReplicationInstanceResource s) where
    toHCL DmsReplicationInstanceResource{..} = TF.block $ catMaybes
        [ TF.assign "allocated_storage" <$> TF.attribute _allocated_storage
        , TF.assign "apply_immediately" <$> TF.attribute _apply_immediately
        , TF.assign "auto_minor_version_upgrade" <$> TF.attribute _auto_minor_version_upgrade
        , TF.assign "availability_zone" <$> TF.attribute _availability_zone
        , TF.assign "engine_version" <$> TF.attribute _engine_version
        , TF.assign "kms_key_arn" <$> TF.attribute _kms_key_arn
        , TF.assign "multi_az" <$> TF.attribute _multi_az
        , TF.assign "preferred_maintenance_window" <$> TF.attribute _preferred_maintenance_window
        , TF.assign "publicly_accessible" <$> TF.attribute _publicly_accessible
        , TF.assign "replication_instance_class" <$> TF.attribute _replication_instance_class
        , TF.assign "replication_instance_id" <$> TF.attribute _replication_instance_id
        , TF.assign "replication_subnet_group_id" <$> TF.attribute _replication_subnet_group_id
        , TF.assign "tags" <$> TF.attribute _tags
        , TF.assign "vpc_security_group_ids" <$> TF.attribute _vpc_security_group_ids
        ]

instance HasAllocatedStorage (DmsReplicationInstanceResource s) Text where
    type HasAllocatedStorageThread (DmsReplicationInstanceResource s) Text = s

    allocatedStorage =
        lens (_allocated_storage :: DmsReplicationInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _allocated_storage = a } :: DmsReplicationInstanceResource s)

instance HasApplyImmediately (DmsReplicationInstanceResource s) Text where
    type HasApplyImmediatelyThread (DmsReplicationInstanceResource s) Text = s

    applyImmediately =
        lens (_apply_immediately :: DmsReplicationInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _apply_immediately = a } :: DmsReplicationInstanceResource s)

instance HasAutoMinorVersionUpgrade (DmsReplicationInstanceResource s) Text where
    type HasAutoMinorVersionUpgradeThread (DmsReplicationInstanceResource s) Text = s

    autoMinorVersionUpgrade =
        lens (_auto_minor_version_upgrade :: DmsReplicationInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_minor_version_upgrade = a } :: DmsReplicationInstanceResource s)

instance HasAvailabilityZone (DmsReplicationInstanceResource s) TF.Zone where
    type HasAvailabilityZoneThread (DmsReplicationInstanceResource s) TF.Zone = s

    availabilityZone =
        lens (_availability_zone :: DmsReplicationInstanceResource s -> TF.Attribute s TF.Zone)
            (\s a -> s { _availability_zone = a } :: DmsReplicationInstanceResource s)

instance HasEngineVersion (DmsReplicationInstanceResource s) Text where
    type HasEngineVersionThread (DmsReplicationInstanceResource s) Text = s

    engineVersion =
        lens (_engine_version :: DmsReplicationInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _engine_version = a } :: DmsReplicationInstanceResource s)

instance HasKmsKeyArn (DmsReplicationInstanceResource s) Text where
    type HasKmsKeyArnThread (DmsReplicationInstanceResource s) Text = s

    kmsKeyArn =
        lens (_kms_key_arn :: DmsReplicationInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _kms_key_arn = a } :: DmsReplicationInstanceResource s)

instance HasMultiAz (DmsReplicationInstanceResource s) Text where
    type HasMultiAzThread (DmsReplicationInstanceResource s) Text = s

    multiAz =
        lens (_multi_az :: DmsReplicationInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _multi_az = a } :: DmsReplicationInstanceResource s)

instance HasPreferredMaintenanceWindow (DmsReplicationInstanceResource s) Text where
    type HasPreferredMaintenanceWindowThread (DmsReplicationInstanceResource s) Text = s

    preferredMaintenanceWindow =
        lens (_preferred_maintenance_window :: DmsReplicationInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _preferred_maintenance_window = a } :: DmsReplicationInstanceResource s)

instance HasPubliclyAccessible (DmsReplicationInstanceResource s) Text where
    type HasPubliclyAccessibleThread (DmsReplicationInstanceResource s) Text = s

    publiclyAccessible =
        lens (_publicly_accessible :: DmsReplicationInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _publicly_accessible = a } :: DmsReplicationInstanceResource s)

instance HasReplicationInstanceClass (DmsReplicationInstanceResource s) Text where
    type HasReplicationInstanceClassThread (DmsReplicationInstanceResource s) Text = s

    replicationInstanceClass =
        lens (_replication_instance_class :: DmsReplicationInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _replication_instance_class = a } :: DmsReplicationInstanceResource s)

instance HasReplicationInstanceId (DmsReplicationInstanceResource s) Text where
    type HasReplicationInstanceIdThread (DmsReplicationInstanceResource s) Text = s

    replicationInstanceId =
        lens (_replication_instance_id :: DmsReplicationInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _replication_instance_id = a } :: DmsReplicationInstanceResource s)

instance HasReplicationSubnetGroupId (DmsReplicationInstanceResource s) Text where
    type HasReplicationSubnetGroupIdThread (DmsReplicationInstanceResource s) Text = s

    replicationSubnetGroupId =
        lens (_replication_subnet_group_id :: DmsReplicationInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _replication_subnet_group_id = a } :: DmsReplicationInstanceResource s)

instance HasTags (DmsReplicationInstanceResource s) TF.Tags where
    type HasTagsThread (DmsReplicationInstanceResource s) TF.Tags = s

    tags =
        lens (_tags :: DmsReplicationInstanceResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: DmsReplicationInstanceResource s)

instance HasVpcSecurityGroupIds (DmsReplicationInstanceResource s) Text where
    type HasVpcSecurityGroupIdsThread (DmsReplicationInstanceResource s) Text = s

    vpcSecurityGroupIds =
        lens (_vpc_security_group_ids :: DmsReplicationInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _vpc_security_group_ids = a } :: DmsReplicationInstanceResource s)

instance HasComputedReplicationInstanceArn (DmsReplicationInstanceResource s) Text

instance HasComputedReplicationInstancePrivateIps (DmsReplicationInstanceResource s) Text

instance HasComputedReplicationInstancePublicIps (DmsReplicationInstanceResource s) Text

dmsReplicationInstanceResource :: TF.Resource TF.AWS (DmsReplicationInstanceResource s)
dmsReplicationInstanceResource =
    TF.newResource "aws_dms_replication_instance" $
        DmsReplicationInstanceResource {
              _allocated_storage = TF.Nil
            , _apply_immediately = TF.Nil
            , _auto_minor_version_upgrade = TF.Nil
            , _availability_zone = TF.Nil
            , _engine_version = TF.Nil
            , _kms_key_arn = TF.Nil
            , _multi_az = TF.Nil
            , _preferred_maintenance_window = TF.Nil
            , _publicly_accessible = TF.Nil
            , _replication_instance_class = TF.Nil
            , _replication_instance_id = TF.Nil
            , _replication_subnet_group_id = TF.Nil
            , _tags = TF.Nil
            , _vpc_security_group_ids = TF.Nil
            }

{- | The @aws_dms_replication_subnet_group@ AWS resource.

Provides a DMS (Data Migration Service) replication subnet group resource.
DMS replication subnet groups can be created, updated, deleted, and
imported.
-}
data DmsReplicationSubnetGroupResource s = DmsReplicationSubnetGroupResource {
      _replication_subnet_group_description :: !(TF.Attribute s Text)
    {- ^ (Required) The description for the subnet group. -}
    , _replication_subnet_group_id :: !(TF.Attribute s Text)
    {- ^ (Required) The name for the replication subnet group. This value is stored as a lowercase string. -}
    , _subnet_ids :: !(TF.Attribute s Text)
    {- ^ (Required) A list of the EC2 subnet IDs for the subnet group. -}
    } deriving (Show, Eq)

instance TF.ToHCL (DmsReplicationSubnetGroupResource s) where
    toHCL DmsReplicationSubnetGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "replication_subnet_group_description" <$> TF.attribute _replication_subnet_group_description
        , TF.assign "replication_subnet_group_id" <$> TF.attribute _replication_subnet_group_id
        , TF.assign "subnet_ids" <$> TF.attribute _subnet_ids
        ]

instance HasReplicationSubnetGroupDescription (DmsReplicationSubnetGroupResource s) Text where
    type HasReplicationSubnetGroupDescriptionThread (DmsReplicationSubnetGroupResource s) Text = s

    replicationSubnetGroupDescription =
        lens (_replication_subnet_group_description :: DmsReplicationSubnetGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _replication_subnet_group_description = a } :: DmsReplicationSubnetGroupResource s)

instance HasReplicationSubnetGroupId (DmsReplicationSubnetGroupResource s) Text where
    type HasReplicationSubnetGroupIdThread (DmsReplicationSubnetGroupResource s) Text = s

    replicationSubnetGroupId =
        lens (_replication_subnet_group_id :: DmsReplicationSubnetGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _replication_subnet_group_id = a } :: DmsReplicationSubnetGroupResource s)

instance HasSubnetIds (DmsReplicationSubnetGroupResource s) Text where
    type HasSubnetIdsThread (DmsReplicationSubnetGroupResource s) Text = s

    subnetIds =
        lens (_subnet_ids :: DmsReplicationSubnetGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _subnet_ids = a } :: DmsReplicationSubnetGroupResource s)

instance HasComputedVpcId (DmsReplicationSubnetGroupResource s) Text

dmsReplicationSubnetGroupResource :: TF.Resource TF.AWS (DmsReplicationSubnetGroupResource s)
dmsReplicationSubnetGroupResource =
    TF.newResource "aws_dms_replication_subnet_group" $
        DmsReplicationSubnetGroupResource {
              _replication_subnet_group_description = TF.Nil
            , _replication_subnet_group_id = TF.Nil
            , _subnet_ids = TF.Nil
            }

{- | The @aws_dms_replication_task@ AWS resource.

Provides a DMS (Data Migration Service) replication task resource. DMS
replication tasks can be created, updated, deleted, and imported.
-}
data DmsReplicationTaskResource s = DmsReplicationTaskResource {
      _cdc_start_time :: !(TF.Attribute s Text)
    {- ^ (Optional) The Unix timestamp integer for the start of the Change Data Capture (CDC) operation. -}
    , _migration_type :: !(TF.Attribute s Text)
    {- ^ (Required) The migration type. Can be one of @full-load | cdc | full-load-and-cdc@ . -}
    , _replication_instance_arn :: !(TF.Attribute s Text)
    {- ^ (Required) The Amazon Resource Name (ARN) of the replication instance. -}
    , _replication_task_id :: !(TF.Attribute s Text)
    {- ^ (Required) The replication task identifier. -}
    , _replication_task_settings :: !(TF.Attribute s Text)
    {- ^ (Optional) An escaped JSON string that contains the task settings. For a complete list of task settings, see <http://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.CustomizingTasks.TaskSettings.html> . -}
    , _source_endpoint_arn :: !(TF.Attribute s Text)
    {- ^ (Required) The Amazon Resource Name (ARN) string that uniquely identifies the source endpoint. -}
    , _table_mappings :: !(TF.Attribute s Text)
    {- ^ (Required) An escaped JSON string that contains the table mappings. For information on table mapping see <http://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.CustomizingTasks.TableMapping.html> -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _target_endpoint_arn :: !(TF.Attribute s Text)
    {- ^ (Required) The Amazon Resource Name (ARN) string that uniquely identifies the target endpoint. -}
    } deriving (Show, Eq)

instance TF.ToHCL (DmsReplicationTaskResource s) where
    toHCL DmsReplicationTaskResource{..} = TF.block $ catMaybes
        [ TF.assign "cdc_start_time" <$> TF.attribute _cdc_start_time
        , TF.assign "migration_type" <$> TF.attribute _migration_type
        , TF.assign "replication_instance_arn" <$> TF.attribute _replication_instance_arn
        , TF.assign "replication_task_id" <$> TF.attribute _replication_task_id
        , TF.assign "replication_task_settings" <$> TF.attribute _replication_task_settings
        , TF.assign "source_endpoint_arn" <$> TF.attribute _source_endpoint_arn
        , TF.assign "table_mappings" <$> TF.attribute _table_mappings
        , TF.assign "tags" <$> TF.attribute _tags
        , TF.assign "target_endpoint_arn" <$> TF.attribute _target_endpoint_arn
        ]

instance HasCdcStartTime (DmsReplicationTaskResource s) Text where
    type HasCdcStartTimeThread (DmsReplicationTaskResource s) Text = s

    cdcStartTime =
        lens (_cdc_start_time :: DmsReplicationTaskResource s -> TF.Attribute s Text)
            (\s a -> s { _cdc_start_time = a } :: DmsReplicationTaskResource s)

instance HasMigrationType (DmsReplicationTaskResource s) Text where
    type HasMigrationTypeThread (DmsReplicationTaskResource s) Text = s

    migrationType =
        lens (_migration_type :: DmsReplicationTaskResource s -> TF.Attribute s Text)
            (\s a -> s { _migration_type = a } :: DmsReplicationTaskResource s)

instance HasReplicationInstanceArn (DmsReplicationTaskResource s) Text where
    type HasReplicationInstanceArnThread (DmsReplicationTaskResource s) Text = s

    replicationInstanceArn =
        lens (_replication_instance_arn :: DmsReplicationTaskResource s -> TF.Attribute s Text)
            (\s a -> s { _replication_instance_arn = a } :: DmsReplicationTaskResource s)

instance HasReplicationTaskId (DmsReplicationTaskResource s) Text where
    type HasReplicationTaskIdThread (DmsReplicationTaskResource s) Text = s

    replicationTaskId =
        lens (_replication_task_id :: DmsReplicationTaskResource s -> TF.Attribute s Text)
            (\s a -> s { _replication_task_id = a } :: DmsReplicationTaskResource s)

instance HasReplicationTaskSettings (DmsReplicationTaskResource s) Text where
    type HasReplicationTaskSettingsThread (DmsReplicationTaskResource s) Text = s

    replicationTaskSettings =
        lens (_replication_task_settings :: DmsReplicationTaskResource s -> TF.Attribute s Text)
            (\s a -> s { _replication_task_settings = a } :: DmsReplicationTaskResource s)

instance HasSourceEndpointArn (DmsReplicationTaskResource s) Text where
    type HasSourceEndpointArnThread (DmsReplicationTaskResource s) Text = s

    sourceEndpointArn =
        lens (_source_endpoint_arn :: DmsReplicationTaskResource s -> TF.Attribute s Text)
            (\s a -> s { _source_endpoint_arn = a } :: DmsReplicationTaskResource s)

instance HasTableMappings (DmsReplicationTaskResource s) Text where
    type HasTableMappingsThread (DmsReplicationTaskResource s) Text = s

    tableMappings =
        lens (_table_mappings :: DmsReplicationTaskResource s -> TF.Attribute s Text)
            (\s a -> s { _table_mappings = a } :: DmsReplicationTaskResource s)

instance HasTags (DmsReplicationTaskResource s) TF.Tags where
    type HasTagsThread (DmsReplicationTaskResource s) TF.Tags = s

    tags =
        lens (_tags :: DmsReplicationTaskResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: DmsReplicationTaskResource s)

instance HasTargetEndpointArn (DmsReplicationTaskResource s) Text where
    type HasTargetEndpointArnThread (DmsReplicationTaskResource s) Text = s

    targetEndpointArn =
        lens (_target_endpoint_arn :: DmsReplicationTaskResource s -> TF.Attribute s Text)
            (\s a -> s { _target_endpoint_arn = a } :: DmsReplicationTaskResource s)

instance HasComputedReplicationTaskArn (DmsReplicationTaskResource s) Text

dmsReplicationTaskResource :: TF.Resource TF.AWS (DmsReplicationTaskResource s)
dmsReplicationTaskResource =
    TF.newResource "aws_dms_replication_task" $
        DmsReplicationTaskResource {
              _cdc_start_time = TF.Nil
            , _migration_type = TF.Nil
            , _replication_instance_arn = TF.Nil
            , _replication_task_id = TF.Nil
            , _replication_task_settings = TF.Nil
            , _source_endpoint_arn = TF.Nil
            , _table_mappings = TF.Nil
            , _tags = TF.Nil
            , _target_endpoint_arn = TF.Nil
            }

{- | The @aws_dx_connection_association@ AWS resource.

Associates a Direct Connect Connection with a LAG.
-}
data DxConnectionAssociationResource s = DxConnectionAssociationResource {
      _connection_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the connection. -}
    , _lag_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the LAG with which to associate the connection. -}
    } deriving (Show, Eq)

instance TF.ToHCL (DxConnectionAssociationResource s) where
    toHCL DxConnectionAssociationResource{..} = TF.block $ catMaybes
        [ TF.assign "connection_id" <$> TF.attribute _connection_id
        , TF.assign "lag_id" <$> TF.attribute _lag_id
        ]

instance HasConnectionId (DxConnectionAssociationResource s) Text where
    type HasConnectionIdThread (DxConnectionAssociationResource s) Text = s

    connectionId =
        lens (_connection_id :: DxConnectionAssociationResource s -> TF.Attribute s Text)
            (\s a -> s { _connection_id = a } :: DxConnectionAssociationResource s)

instance HasLagId (DxConnectionAssociationResource s) Text where
    type HasLagIdThread (DxConnectionAssociationResource s) Text = s

    lagId =
        lens (_lag_id :: DxConnectionAssociationResource s -> TF.Attribute s Text)
            (\s a -> s { _lag_id = a } :: DxConnectionAssociationResource s)

dxConnectionAssociationResource :: TF.Resource TF.AWS (DxConnectionAssociationResource s)
dxConnectionAssociationResource =
    TF.newResource "aws_dx_connection_association" $
        DxConnectionAssociationResource {
              _connection_id = TF.Nil
            , _lag_id = TF.Nil
            }

{- | The @aws_dx_connection@ AWS resource.

Provides a Connection of Direct Connect.
-}
data DxConnectionResource s = DxConnectionResource {
      _bandwidth :: !(TF.Attribute s Text)
    {- ^ (Required) The bandwidth of the connection. Available values: 1Gbps, 10Gbps. Case sensitive. -}
    , _location :: !(TF.Attribute s Text)
    {- ^ (Required) The AWS Direct Connect location where the connection is located. See <https://docs.aws.amazon.com/directconnect/latest/APIReference/API_DescribeLocations.html> for the list of AWS Direct Connect locations. Use @locationCode@ . -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the connection. -}
    } deriving (Show, Eq)

instance TF.ToHCL (DxConnectionResource s) where
    toHCL DxConnectionResource{..} = TF.block $ catMaybes
        [ TF.assign "bandwidth" <$> TF.attribute _bandwidth
        , TF.assign "location" <$> TF.attribute _location
        , TF.assign "name" <$> TF.attribute _name
        ]

instance HasBandwidth (DxConnectionResource s) Text where
    type HasBandwidthThread (DxConnectionResource s) Text = s

    bandwidth =
        lens (_bandwidth :: DxConnectionResource s -> TF.Attribute s Text)
            (\s a -> s { _bandwidth = a } :: DxConnectionResource s)

instance HasLocation (DxConnectionResource s) Text where
    type HasLocationThread (DxConnectionResource s) Text = s

    location =
        lens (_location :: DxConnectionResource s -> TF.Attribute s Text)
            (\s a -> s { _location = a } :: DxConnectionResource s)

instance HasName (DxConnectionResource s) Text where
    type HasNameThread (DxConnectionResource s) Text = s

    name =
        lens (_name :: DxConnectionResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: DxConnectionResource s)

instance HasComputedId (DxConnectionResource s) Text

dxConnectionResource :: TF.Resource TF.AWS (DxConnectionResource s)
dxConnectionResource =
    TF.newResource "aws_dx_connection" $
        DxConnectionResource {
              _bandwidth = TF.Nil
            , _location = TF.Nil
            , _name = TF.Nil
            }

{- | The @aws_dx_lag@ AWS resource.

Provides a Direct Connect LAG.
-}
data DxLagResource s = DxLagResource {
      _connections_bandwidth :: !(TF.Attribute s Text)
    {- ^ (Required) The bandwidth of the individual physical connections bundled by the LAG. Available values: 1Gbps, 10Gbps. Case sensitive. -}
    , _force_destroy :: !(TF.Attribute s Text)
    {- ^ (Optional, Default:false) A boolean that indicates all connections associated with the LAG should be deleted so that the LAG can be destroyed without error. These objects are not recoverable. -}
    , _location :: !(TF.Attribute s Text)
    {- ^ (Required) The AWS Direct Connect location in which the LAG should be allocated. See <https://docs.aws.amazon.com/directconnect/latest/APIReference/API_DescribeLocations.html> for the list of AWS Direct Connect locations. Use @locationCode@ . -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the LAG. -}
    , _number_of_connections :: !(TF.Attribute s Text)
    {- ^ (Required) The number of physical connections initially provisioned and bundled by the LAG. -}
    } deriving (Show, Eq)

instance TF.ToHCL (DxLagResource s) where
    toHCL DxLagResource{..} = TF.block $ catMaybes
        [ TF.assign "connections_bandwidth" <$> TF.attribute _connections_bandwidth
        , TF.assign "force_destroy" <$> TF.attribute _force_destroy
        , TF.assign "location" <$> TF.attribute _location
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "number_of_connections" <$> TF.attribute _number_of_connections
        ]

instance HasConnectionsBandwidth (DxLagResource s) Text where
    type HasConnectionsBandwidthThread (DxLagResource s) Text = s

    connectionsBandwidth =
        lens (_connections_bandwidth :: DxLagResource s -> TF.Attribute s Text)
            (\s a -> s { _connections_bandwidth = a } :: DxLagResource s)

instance HasForceDestroy (DxLagResource s) Text where
    type HasForceDestroyThread (DxLagResource s) Text = s

    forceDestroy =
        lens (_force_destroy :: DxLagResource s -> TF.Attribute s Text)
            (\s a -> s { _force_destroy = a } :: DxLagResource s)

instance HasLocation (DxLagResource s) Text where
    type HasLocationThread (DxLagResource s) Text = s

    location =
        lens (_location :: DxLagResource s -> TF.Attribute s Text)
            (\s a -> s { _location = a } :: DxLagResource s)

instance HasName (DxLagResource s) Text where
    type HasNameThread (DxLagResource s) Text = s

    name =
        lens (_name :: DxLagResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: DxLagResource s)

instance HasNumberOfConnections (DxLagResource s) Text where
    type HasNumberOfConnectionsThread (DxLagResource s) Text = s

    numberOfConnections =
        lens (_number_of_connections :: DxLagResource s -> TF.Attribute s Text)
            (\s a -> s { _number_of_connections = a } :: DxLagResource s)

instance HasComputedId (DxLagResource s) Text

dxLagResource :: TF.Resource TF.AWS (DxLagResource s)
dxLagResource =
    TF.newResource "aws_dx_lag" $
        DxLagResource {
              _connections_bandwidth = TF.Nil
            , _force_destroy = TF.Nil
            , _location = TF.Nil
            , _name = TF.Nil
            , _number_of_connections = TF.Nil
            }

{- | The @aws_dynamodb_table@ AWS resource.

Provides a DynamoDB table resource ~> Note: It is recommended to use
@lifecycle@  </docs/configuration/resources.html#ignore_changes> for
@read_capacity@ and/or @write_capacity@ if there's
</docs/providers/aws/r/appautoscaling_policy.html> attached to the table.
-}
data DynamodbTableResource s = DynamodbTableResource {
      _attribute :: !(TF.Attribute s TF.DynamoTableAttributes)
    {- ^ (Required) Define an attribute, has two properties: -}
    , _global_secondary_index :: !(TF.Attribute s Text)
    {- ^ (Optional) Describe a GSO for the table; subject to the normal limits on the number of GSIs, projected attributes, etc. -}
    , _hash_key :: !(TF.Attribute s Text)
    {- ^ (Required, Forces new resource) The attribute to use as the hash key (the attribute must also be defined as an attribute record -}
    , _local_secondary_index :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) Describe an LSI on the table; these can only be allocated at creation so you cannot change this definition after you have created the resource. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the table, this needs to be unique within a region. -}
    , _range_key :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) The attribute to use as the range key (must also be defined) -}
    , _read_capacity :: !(TF.Attribute s TF.Natural)
    {- ^ (Required) The number of read units for this table -}
    , _stream_enabled :: !(TF.Attribute s TF.Bool)
    {- ^ (Optional) Indicates whether Streams are to be enabled (true) or disabled (false). -}
    , _stream_view_type :: !(TF.Attribute s Text)
    {- ^ (Optional) When an item in the table is modified, StreamViewType determines what information is written to the table's stream. Valid values are @KEYS_ONLY@ , @NEW_IMAGE@ , @OLD_IMAGE@ , @NEW_AND_OLD_IMAGES@ . -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A map of tags to populate on the created table. -}
    , _ttl :: !(TF.Attribute s Text)
    {- ^ (Optional) Defines ttl, has two properties, and can only be specified once: -}
    , _write_capacity :: !(TF.Attribute s TF.Natural)
    {- ^ (Required) The number of write units for this table -}
    } deriving (Show, Eq)

instance TF.ToHCL (DynamodbTableResource s) where
    toHCL DynamodbTableResource{..} = TF.block $ catMaybes
        [ TF.assign "attribute" <$> TF.attribute _attribute
        , TF.assign "global_secondary_index" <$> TF.attribute _global_secondary_index
        , TF.assign "hash_key" <$> TF.attribute _hash_key
        , TF.assign "local_secondary_index" <$> TF.attribute _local_secondary_index
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "range_key" <$> TF.attribute _range_key
        , TF.assign "read_capacity" <$> TF.attribute _read_capacity
        , TF.assign "stream_enabled" <$> TF.attribute _stream_enabled
        , TF.assign "stream_view_type" <$> TF.attribute _stream_view_type
        , TF.assign "tags" <$> TF.attribute _tags
        , TF.assign "ttl" <$> TF.attribute _ttl
        , TF.assign "write_capacity" <$> TF.attribute _write_capacity
        ]

instance HasAttribute (DynamodbTableResource s) TF.DynamoTableAttributes where
    type HasAttributeThread (DynamodbTableResource s) TF.DynamoTableAttributes = s

    attribute =
        lens (_attribute :: DynamodbTableResource s -> TF.Attribute s TF.DynamoTableAttributes)
            (\s a -> s { _attribute = a } :: DynamodbTableResource s)

instance HasGlobalSecondaryIndex (DynamodbTableResource s) Text where
    type HasGlobalSecondaryIndexThread (DynamodbTableResource s) Text = s

    globalSecondaryIndex =
        lens (_global_secondary_index :: DynamodbTableResource s -> TF.Attribute s Text)
            (\s a -> s { _global_secondary_index = a } :: DynamodbTableResource s)

instance HasHashKey (DynamodbTableResource s) Text where
    type HasHashKeyThread (DynamodbTableResource s) Text = s

    hashKey =
        lens (_hash_key :: DynamodbTableResource s -> TF.Attribute s Text)
            (\s a -> s { _hash_key = a } :: DynamodbTableResource s)

instance HasLocalSecondaryIndex (DynamodbTableResource s) Text where
    type HasLocalSecondaryIndexThread (DynamodbTableResource s) Text = s

    localSecondaryIndex =
        lens (_local_secondary_index :: DynamodbTableResource s -> TF.Attribute s Text)
            (\s a -> s { _local_secondary_index = a } :: DynamodbTableResource s)

instance HasName (DynamodbTableResource s) Text where
    type HasNameThread (DynamodbTableResource s) Text = s

    name =
        lens (_name :: DynamodbTableResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: DynamodbTableResource s)

instance HasRangeKey (DynamodbTableResource s) Text where
    type HasRangeKeyThread (DynamodbTableResource s) Text = s

    rangeKey =
        lens (_range_key :: DynamodbTableResource s -> TF.Attribute s Text)
            (\s a -> s { _range_key = a } :: DynamodbTableResource s)

instance HasReadCapacity (DynamodbTableResource s) TF.Natural where
    type HasReadCapacityThread (DynamodbTableResource s) TF.Natural = s

    readCapacity =
        lens (_read_capacity :: DynamodbTableResource s -> TF.Attribute s TF.Natural)
            (\s a -> s { _read_capacity = a } :: DynamodbTableResource s)

instance HasStreamEnabled (DynamodbTableResource s) TF.Bool where
    type HasStreamEnabledThread (DynamodbTableResource s) TF.Bool = s

    streamEnabled =
        lens (_stream_enabled :: DynamodbTableResource s -> TF.Attribute s TF.Bool)
            (\s a -> s { _stream_enabled = a } :: DynamodbTableResource s)

instance HasStreamViewType (DynamodbTableResource s) Text where
    type HasStreamViewTypeThread (DynamodbTableResource s) Text = s

    streamViewType =
        lens (_stream_view_type :: DynamodbTableResource s -> TF.Attribute s Text)
            (\s a -> s { _stream_view_type = a } :: DynamodbTableResource s)

instance HasTags (DynamodbTableResource s) TF.Tags where
    type HasTagsThread (DynamodbTableResource s) TF.Tags = s

    tags =
        lens (_tags :: DynamodbTableResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: DynamodbTableResource s)

instance HasTtl (DynamodbTableResource s) Text where
    type HasTtlThread (DynamodbTableResource s) Text = s

    ttl =
        lens (_ttl :: DynamodbTableResource s -> TF.Attribute s Text)
            (\s a -> s { _ttl = a } :: DynamodbTableResource s)

instance HasWriteCapacity (DynamodbTableResource s) TF.Natural where
    type HasWriteCapacityThread (DynamodbTableResource s) TF.Natural = s

    writeCapacity =
        lens (_write_capacity :: DynamodbTableResource s -> TF.Attribute s TF.Natural)
            (\s a -> s { _write_capacity = a } :: DynamodbTableResource s)

dynamodbTableResource :: TF.Resource TF.AWS (DynamodbTableResource s)
dynamodbTableResource =
    TF.newResource "aws_dynamodb_table" $
        DynamodbTableResource {
              _attribute = TF.Nil
            , _global_secondary_index = TF.Nil
            , _hash_key = TF.Nil
            , _local_secondary_index = TF.Nil
            , _name = TF.Nil
            , _range_key = TF.Nil
            , _read_capacity = TF.Nil
            , _stream_enabled = TF.Nil
            , _stream_view_type = TF.Nil
            , _tags = TF.Nil
            , _ttl = TF.Nil
            , _write_capacity = TF.Nil
            }

{- | The @aws_ebs_snapshot@ AWS resource.

Creates a Snapshot of an EBS Volume.
-}
data EbsSnapshotResource s = EbsSnapshotResource {
      _description :: !(TF.Attribute s Text)
    {- ^ (Optional) A description of what the snapshot is. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the snapshot -}
    , _volume_id :: !(TF.Attribute s Text)
    {- ^ (Required) The Volume ID of which to make a snapshot. -}
    } deriving (Show, Eq)

instance TF.ToHCL (EbsSnapshotResource s) where
    toHCL EbsSnapshotResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.attribute _description
        , TF.assign "tags" <$> TF.attribute _tags
        , TF.assign "volume_id" <$> TF.attribute _volume_id
        ]

instance HasDescription (EbsSnapshotResource s) Text where
    type HasDescriptionThread (EbsSnapshotResource s) Text = s

    description =
        lens (_description :: EbsSnapshotResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: EbsSnapshotResource s)

instance HasTags (EbsSnapshotResource s) TF.Tags where
    type HasTagsThread (EbsSnapshotResource s) TF.Tags = s

    tags =
        lens (_tags :: EbsSnapshotResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: EbsSnapshotResource s)

instance HasVolumeId (EbsSnapshotResource s) Text where
    type HasVolumeIdThread (EbsSnapshotResource s) Text = s

    volumeId =
        lens (_volume_id :: EbsSnapshotResource s -> TF.Attribute s Text)
            (\s a -> s { _volume_id = a } :: EbsSnapshotResource s)

instance HasComputedDataEncryptionKeyId (EbsSnapshotResource s) Text

instance HasComputedEncrypted (EbsSnapshotResource s) Text

instance HasComputedId (EbsSnapshotResource s) Text

instance HasComputedKmsKeyId (EbsSnapshotResource s) Text

instance HasComputedOwnerAlias (EbsSnapshotResource s) Text

instance HasComputedOwnerId (EbsSnapshotResource s) Text

instance HasComputedTags (EbsSnapshotResource s) TF.Tags

instance HasComputedVolumeSize (EbsSnapshotResource s) Text

ebsSnapshotResource :: TF.Resource TF.AWS (EbsSnapshotResource s)
ebsSnapshotResource =
    TF.newResource "aws_ebs_snapshot" $
        EbsSnapshotResource {
              _description = TF.Nil
            , _tags = TF.Nil
            , _volume_id = TF.Nil
            }

{- | The @aws_ebs_volume@ AWS resource.

Manages a single EBS volume.
-}
data EbsVolumeResource s = EbsVolumeResource {
      _availability_zone :: !(TF.Attribute s TF.Zone)
    {- ^ (Required) The AZ where the EBS volume will exist. -}
    , _encrypted :: !(TF.Attribute s Text)
    {- ^ (Optional) If true, the disk will be encrypted. -}
    , _iops :: !(TF.Attribute s Text)
    {- ^ (Optional) The amount of IOPS to provision for the disk. -}
    , _kms_key_id :: !(TF.Attribute s Text)
    {- ^ (Optional) The ARN for the KMS encryption key. When specifying @kms_key_id@ , @encrypted@ needs to be set to true. -}
    , _size :: !(TF.Attribute s Text)
    {- ^ (Optional) The size of the drive in GiBs. -}
    , _snapshot_id :: !(TF.Attribute s Text)
    {- ^ (Optional) A snapshot to base the EBS volume off of. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _type' :: !(TF.Attribute s Text)
    {- ^ (Optional) The type of EBS volume. Can be "standard", "gp2", "io1", "sc1" or "st1" (Default: "standard"). -}
    } deriving (Show, Eq)

instance TF.ToHCL (EbsVolumeResource s) where
    toHCL EbsVolumeResource{..} = TF.block $ catMaybes
        [ TF.assign "availability_zone" <$> TF.attribute _availability_zone
        , TF.assign "encrypted" <$> TF.attribute _encrypted
        , TF.assign "iops" <$> TF.attribute _iops
        , TF.assign "kms_key_id" <$> TF.attribute _kms_key_id
        , TF.assign "size" <$> TF.attribute _size
        , TF.assign "snapshot_id" <$> TF.attribute _snapshot_id
        , TF.assign "tags" <$> TF.attribute _tags
        , TF.assign "type" <$> TF.attribute _type'
        ]

instance HasAvailabilityZone (EbsVolumeResource s) TF.Zone where
    type HasAvailabilityZoneThread (EbsVolumeResource s) TF.Zone = s

    availabilityZone =
        lens (_availability_zone :: EbsVolumeResource s -> TF.Attribute s TF.Zone)
            (\s a -> s { _availability_zone = a } :: EbsVolumeResource s)

instance HasEncrypted (EbsVolumeResource s) Text where
    type HasEncryptedThread (EbsVolumeResource s) Text = s

    encrypted =
        lens (_encrypted :: EbsVolumeResource s -> TF.Attribute s Text)
            (\s a -> s { _encrypted = a } :: EbsVolumeResource s)

instance HasIops (EbsVolumeResource s) Text where
    type HasIopsThread (EbsVolumeResource s) Text = s

    iops =
        lens (_iops :: EbsVolumeResource s -> TF.Attribute s Text)
            (\s a -> s { _iops = a } :: EbsVolumeResource s)

instance HasKmsKeyId (EbsVolumeResource s) Text where
    type HasKmsKeyIdThread (EbsVolumeResource s) Text = s

    kmsKeyId =
        lens (_kms_key_id :: EbsVolumeResource s -> TF.Attribute s Text)
            (\s a -> s { _kms_key_id = a } :: EbsVolumeResource s)

instance HasSize (EbsVolumeResource s) Text where
    type HasSizeThread (EbsVolumeResource s) Text = s

    size =
        lens (_size :: EbsVolumeResource s -> TF.Attribute s Text)
            (\s a -> s { _size = a } :: EbsVolumeResource s)

instance HasSnapshotId (EbsVolumeResource s) Text where
    type HasSnapshotIdThread (EbsVolumeResource s) Text = s

    snapshotId =
        lens (_snapshot_id :: EbsVolumeResource s -> TF.Attribute s Text)
            (\s a -> s { _snapshot_id = a } :: EbsVolumeResource s)

instance HasTags (EbsVolumeResource s) TF.Tags where
    type HasTagsThread (EbsVolumeResource s) TF.Tags = s

    tags =
        lens (_tags :: EbsVolumeResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: EbsVolumeResource s)

instance HasType' (EbsVolumeResource s) Text where
    type HasType'Thread (EbsVolumeResource s) Text = s

    type' =
        lens (_type' :: EbsVolumeResource s -> TF.Attribute s Text)
            (\s a -> s { _type' = a } :: EbsVolumeResource s)

instance HasComputedArn (EbsVolumeResource s) Text

instance HasComputedId (EbsVolumeResource s) Text

ebsVolumeResource :: TF.Resource TF.AWS (EbsVolumeResource s)
ebsVolumeResource =
    TF.newResource "aws_ebs_volume" $
        EbsVolumeResource {
              _availability_zone = TF.Nil
            , _encrypted = TF.Nil
            , _iops = TF.Nil
            , _kms_key_id = TF.Nil
            , _size = TF.Nil
            , _snapshot_id = TF.Nil
            , _tags = TF.Nil
            , _type' = TF.Nil
            }

{- | The @aws_ecr_lifecycle_policy@ AWS resource.

Provides an ECR lifecycle policy.
-}
data EcrLifecyclePolicyResource s = EcrLifecyclePolicyResource {
      _policy :: !(TF.Attribute s Text)
    {- ^ (Required) The policy document. This is a JSON formatted string. See more details about <http://docs.aws.amazon.com/ja_jp/AmazonECR/latest/userguide/LifecyclePolicies.html#lifecycle_policy_parameters> in the official AWS docs. -}
    , _repository :: !(TF.Attribute s Text)
    {- ^ (Required) Name of the repository to apply the policy. -}
    } deriving (Show, Eq)

instance TF.ToHCL (EcrLifecyclePolicyResource s) where
    toHCL EcrLifecyclePolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "policy" <$> TF.attribute _policy
        , TF.assign "repository" <$> TF.attribute _repository
        ]

instance HasPolicy (EcrLifecyclePolicyResource s) Text where
    type HasPolicyThread (EcrLifecyclePolicyResource s) Text = s

    policy =
        lens (_policy :: EcrLifecyclePolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _policy = a } :: EcrLifecyclePolicyResource s)

instance HasRepository (EcrLifecyclePolicyResource s) Text where
    type HasRepositoryThread (EcrLifecyclePolicyResource s) Text = s

    repository =
        lens (_repository :: EcrLifecyclePolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _repository = a } :: EcrLifecyclePolicyResource s)

instance HasComputedRegistryId (EcrLifecyclePolicyResource s) Text

instance HasComputedRepository (EcrLifecyclePolicyResource s) Text

ecrLifecyclePolicyResource :: TF.Resource TF.AWS (EcrLifecyclePolicyResource s)
ecrLifecyclePolicyResource =
    TF.newResource "aws_ecr_lifecycle_policy" $
        EcrLifecyclePolicyResource {
              _policy = TF.Nil
            , _repository = TF.Nil
            }

{- | The @aws_ecr_repository_policy@ AWS resource.

Provides an ECR repository policy. Note that currently only one policy may
be applied to a repository. ~> NOTE on ECR Availability : The EC2 Container
Registry is not yet rolled out in all regions - available regions are listed
<https://docs.aws.amazon.com/general/latest/gr/rande.html#ecr_region> .
-}
data EcrRepositoryPolicyResource s = EcrRepositoryPolicyResource {
      _policy :: !(TF.Attribute s Text)
    {- ^ (Required) The policy document. This is a JSON formatted string. -}
    , _repository :: !(TF.Attribute s Text)
    {- ^ (Required) Name of the repository to apply the policy. -}
    } deriving (Show, Eq)

instance TF.ToHCL (EcrRepositoryPolicyResource s) where
    toHCL EcrRepositoryPolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "policy" <$> TF.attribute _policy
        , TF.assign "repository" <$> TF.attribute _repository
        ]

instance HasPolicy (EcrRepositoryPolicyResource s) Text where
    type HasPolicyThread (EcrRepositoryPolicyResource s) Text = s

    policy =
        lens (_policy :: EcrRepositoryPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _policy = a } :: EcrRepositoryPolicyResource s)

instance HasRepository (EcrRepositoryPolicyResource s) Text where
    type HasRepositoryThread (EcrRepositoryPolicyResource s) Text = s

    repository =
        lens (_repository :: EcrRepositoryPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _repository = a } :: EcrRepositoryPolicyResource s)

instance HasComputedRegistryId (EcrRepositoryPolicyResource s) Text

instance HasComputedRepository (EcrRepositoryPolicyResource s) Text

ecrRepositoryPolicyResource :: TF.Resource TF.AWS (EcrRepositoryPolicyResource s)
ecrRepositoryPolicyResource =
    TF.newResource "aws_ecr_repository_policy" $
        EcrRepositoryPolicyResource {
              _policy = TF.Nil
            , _repository = TF.Nil
            }

{- | The @aws_ecr_repository@ AWS resource.

Provides an EC2 Container Registry Repository. ~> NOTE on ECR Availability :
The EC2 Container Registry is not yet rolled out in all regions - available
regions are listed
<https://docs.aws.amazon.com/general/latest/gr/rande.html#ecr_region> .
-}
data EcrRepositoryResource s = EcrRepositoryResource {
      _name :: !(TF.Attribute s Text)
    {- ^ (Required) Name of the repository. -}
    } deriving (Show, Eq)

instance TF.ToHCL (EcrRepositoryResource s) where
    toHCL EcrRepositoryResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.attribute _name
        ]

instance HasName (EcrRepositoryResource s) Text where
    type HasNameThread (EcrRepositoryResource s) Text = s

    name =
        lens (_name :: EcrRepositoryResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: EcrRepositoryResource s)

instance HasComputedArn (EcrRepositoryResource s) Text

instance HasComputedName (EcrRepositoryResource s) Text

instance HasComputedRegistryId (EcrRepositoryResource s) Text

instance HasComputedRepositoryUrl (EcrRepositoryResource s) Text

ecrRepositoryResource :: TF.Resource TF.AWS (EcrRepositoryResource s)
ecrRepositoryResource =
    TF.newResource "aws_ecr_repository" $
        EcrRepositoryResource {
              _name = TF.Nil
            }

{- | The @aws_ecs_cluster@ AWS resource.

Provides an ECS cluster.
-}
data EcsClusterResource s = EcsClusterResource {
      _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the cluster (up to 255 letters, numbers, hyphens, and underscores) -}
    } deriving (Show, Eq)

instance TF.ToHCL (EcsClusterResource s) where
    toHCL EcsClusterResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.attribute _name
        ]

instance HasName (EcsClusterResource s) Text where
    type HasNameThread (EcsClusterResource s) Text = s

    name =
        lens (_name :: EcsClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: EcsClusterResource s)

instance HasComputedArn (EcsClusterResource s) Text

instance HasComputedId (EcsClusterResource s) Text

ecsClusterResource :: TF.Resource TF.AWS (EcsClusterResource s)
ecsClusterResource =
    TF.newResource "aws_ecs_cluster" $
        EcsClusterResource {
              _name = TF.Nil
            }

{- | The @aws_ecs_service@ AWS resource.

-> Note: To prevent a race condition during service deletion, make sure to
set @depends_on@ to the related @aws_iam_role_policy@ ; otherwise, the
policy may be destroyed too soon and the ECS service will then get stuck in
the @DRAINING@ state. Provides an ECS service - effectively a task that is
expected to run until an error occurs or a user terminates it (typically a
webserver or a database). See
<https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html>
.
-}
data EcsServiceResource s = EcsServiceResource {
      _cluster :: !(TF.Attribute s Text)
    {- ^ (Optional) ARN of an ECS cluster -}
    , _deployment_maximum_percent :: !(TF.Attribute s Text)
    {- ^ (Optional) The upper limit (as a percentage of the service's desiredCount) of the number of running tasks that can be running in a service during a deployment. -}
    , _deployment_minimum_healthy_percent :: !(TF.Attribute s Text)
    {- ^ (Optional) The lower limit (as a percentage of the service's desiredCount) of the number of running tasks that must remain running and healthy in a service during a deployment. -}
    , _desired_count :: !(TF.Attribute s Text)
    {- ^ (Required) The number of instances of the task definition to place and keep running -}
    , _health_check_grace_period_seconds :: !(TF.Attribute s Text)
    {- ^ (Optional) Seconds to ignore failing load balancer health checks on newly instantiated tasks to prevent premature shutdown, up to 1800. Only valid for services configured to use load balancers. -}
    , _iam_role :: !(TF.Attribute s Text)
    {- ^ (Optional) The ARN of IAM role that allows your Amazon ECS container agent to make calls to your load balancer on your behalf. This parameter is only required if you are using a load balancer with your service. -}
    , _launch_type :: !(TF.Attribute s Text)
    {- ^ (Optional) The launch type on which to run your service. The valid values are @EC2@ and @FARGATE@ . Defaults to @EC2@ . -}
    , _load_balancer :: !(TF.Attribute s Text)
    {- ^ (Optional) A load balancer block. Load balancers documented below. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the service (up to 255 letters, numbers, hyphens, and underscores) -}
    , _network_configuration :: !(TF.Attribute s Text)
    {- ^ (Optional) The network configuration for the service. This parameter is required for task definitions that use the awsvpc network mode to receive their own Elastic Network Interface, and it is not supported for other network modes. -}
    , _placement_constraints :: !(TF.Attribute s Text)
    {- ^ (Optional) rules that are taken into consideration during task placement. Maximum number of @placement_constraints@ is @10@ . Defined below. -}
    , _placement_strategy :: !(TF.Attribute s Text)
    {- ^ (Optional) Service level strategy rules that are taken into consideration during task placement. The maximum number of @placement_strategy@ blocks is @5@ . Defined below. -}
    , _task_definition :: !(TF.Attribute s Text)
    {- ^ (Required) The family and revision ( @family:revision@ ) or full ARN of the task definition that you want to run in your service. -}
    } deriving (Show, Eq)

instance TF.ToHCL (EcsServiceResource s) where
    toHCL EcsServiceResource{..} = TF.block $ catMaybes
        [ TF.assign "cluster" <$> TF.attribute _cluster
        , TF.assign "deployment_maximum_percent" <$> TF.attribute _deployment_maximum_percent
        , TF.assign "deployment_minimum_healthy_percent" <$> TF.attribute _deployment_minimum_healthy_percent
        , TF.assign "desired_count" <$> TF.attribute _desired_count
        , TF.assign "health_check_grace_period_seconds" <$> TF.attribute _health_check_grace_period_seconds
        , TF.assign "iam_role" <$> TF.attribute _iam_role
        , TF.assign "launch_type" <$> TF.attribute _launch_type
        , TF.assign "load_balancer" <$> TF.attribute _load_balancer
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "network_configuration" <$> TF.attribute _network_configuration
        , TF.assign "placement_constraints" <$> TF.attribute _placement_constraints
        , TF.assign "placement_strategy" <$> TF.attribute _placement_strategy
        , TF.assign "task_definition" <$> TF.attribute _task_definition
        ]

instance HasCluster (EcsServiceResource s) Text where
    type HasClusterThread (EcsServiceResource s) Text = s

    cluster =
        lens (_cluster :: EcsServiceResource s -> TF.Attribute s Text)
            (\s a -> s { _cluster = a } :: EcsServiceResource s)

instance HasDeploymentMaximumPercent (EcsServiceResource s) Text where
    type HasDeploymentMaximumPercentThread (EcsServiceResource s) Text = s

    deploymentMaximumPercent =
        lens (_deployment_maximum_percent :: EcsServiceResource s -> TF.Attribute s Text)
            (\s a -> s { _deployment_maximum_percent = a } :: EcsServiceResource s)

instance HasDeploymentMinimumHealthyPercent (EcsServiceResource s) Text where
    type HasDeploymentMinimumHealthyPercentThread (EcsServiceResource s) Text = s

    deploymentMinimumHealthyPercent =
        lens (_deployment_minimum_healthy_percent :: EcsServiceResource s -> TF.Attribute s Text)
            (\s a -> s { _deployment_minimum_healthy_percent = a } :: EcsServiceResource s)

instance HasDesiredCount (EcsServiceResource s) Text where
    type HasDesiredCountThread (EcsServiceResource s) Text = s

    desiredCount =
        lens (_desired_count :: EcsServiceResource s -> TF.Attribute s Text)
            (\s a -> s { _desired_count = a } :: EcsServiceResource s)

instance HasHealthCheckGracePeriodSeconds (EcsServiceResource s) Text where
    type HasHealthCheckGracePeriodSecondsThread (EcsServiceResource s) Text = s

    healthCheckGracePeriodSeconds =
        lens (_health_check_grace_period_seconds :: EcsServiceResource s -> TF.Attribute s Text)
            (\s a -> s { _health_check_grace_period_seconds = a } :: EcsServiceResource s)

instance HasIamRole (EcsServiceResource s) Text where
    type HasIamRoleThread (EcsServiceResource s) Text = s

    iamRole =
        lens (_iam_role :: EcsServiceResource s -> TF.Attribute s Text)
            (\s a -> s { _iam_role = a } :: EcsServiceResource s)

instance HasLaunchType (EcsServiceResource s) Text where
    type HasLaunchTypeThread (EcsServiceResource s) Text = s

    launchType =
        lens (_launch_type :: EcsServiceResource s -> TF.Attribute s Text)
            (\s a -> s { _launch_type = a } :: EcsServiceResource s)

instance HasLoadBalancer (EcsServiceResource s) Text where
    type HasLoadBalancerThread (EcsServiceResource s) Text = s

    loadBalancer =
        lens (_load_balancer :: EcsServiceResource s -> TF.Attribute s Text)
            (\s a -> s { _load_balancer = a } :: EcsServiceResource s)

instance HasName (EcsServiceResource s) Text where
    type HasNameThread (EcsServiceResource s) Text = s

    name =
        lens (_name :: EcsServiceResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: EcsServiceResource s)

instance HasNetworkConfiguration (EcsServiceResource s) Text where
    type HasNetworkConfigurationThread (EcsServiceResource s) Text = s

    networkConfiguration =
        lens (_network_configuration :: EcsServiceResource s -> TF.Attribute s Text)
            (\s a -> s { _network_configuration = a } :: EcsServiceResource s)

instance HasPlacementConstraints (EcsServiceResource s) Text where
    type HasPlacementConstraintsThread (EcsServiceResource s) Text = s

    placementConstraints =
        lens (_placement_constraints :: EcsServiceResource s -> TF.Attribute s Text)
            (\s a -> s { _placement_constraints = a } :: EcsServiceResource s)

instance HasPlacementStrategy (EcsServiceResource s) Text where
    type HasPlacementStrategyThread (EcsServiceResource s) Text = s

    placementStrategy =
        lens (_placement_strategy :: EcsServiceResource s -> TF.Attribute s Text)
            (\s a -> s { _placement_strategy = a } :: EcsServiceResource s)

instance HasTaskDefinition (EcsServiceResource s) Text where
    type HasTaskDefinitionThread (EcsServiceResource s) Text = s

    taskDefinition =
        lens (_task_definition :: EcsServiceResource s -> TF.Attribute s Text)
            (\s a -> s { _task_definition = a } :: EcsServiceResource s)

ecsServiceResource :: TF.Resource TF.AWS (EcsServiceResource s)
ecsServiceResource =
    TF.newResource "aws_ecs_service" $
        EcsServiceResource {
              _cluster = TF.Nil
            , _deployment_maximum_percent = TF.Nil
            , _deployment_minimum_healthy_percent = TF.Nil
            , _desired_count = TF.Nil
            , _health_check_grace_period_seconds = TF.Nil
            , _iam_role = TF.Nil
            , _launch_type = TF.Nil
            , _load_balancer = TF.Nil
            , _name = TF.Nil
            , _network_configuration = TF.Nil
            , _placement_constraints = TF.Nil
            , _placement_strategy = TF.Nil
            , _task_definition = TF.Nil
            }

{- | The @aws_ecs_task_definition@ AWS resource.

Provides an ECS task definition to be used in @aws_ecs_service@ .
-}
data EcsTaskDefinitionResource s = EcsTaskDefinitionResource {
      _container_definitions :: !(TF.Attribute s Text)
    {- ^ (Required) A list of valid [container definitions] (http://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html) provided as a single valid JSON document. Please note that you should only provide values that are part of the container definition document. For a detailed description of what parameters are available, see the [Task Definition Parameters] (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html) section from the official <https://docs.aws.amazon.com/AmazonECS/latest/developerguide> . -}
    , _family' :: !(TF.Attribute s Text)
    {- ^ (Required) A unique name for your task definition. -}
    } deriving (Show, Eq)

instance TF.ToHCL (EcsTaskDefinitionResource s) where
    toHCL EcsTaskDefinitionResource{..} = TF.block $ catMaybes
        [ TF.assign "container_definitions" <$> TF.attribute _container_definitions
        , TF.assign "family" <$> TF.attribute _family'
        ]

instance HasContainerDefinitions (EcsTaskDefinitionResource s) Text where
    type HasContainerDefinitionsThread (EcsTaskDefinitionResource s) Text = s

    containerDefinitions =
        lens (_container_definitions :: EcsTaskDefinitionResource s -> TF.Attribute s Text)
            (\s a -> s { _container_definitions = a } :: EcsTaskDefinitionResource s)

instance HasFamily' (EcsTaskDefinitionResource s) Text where
    type HasFamily'Thread (EcsTaskDefinitionResource s) Text = s

    family' =
        lens (_family' :: EcsTaskDefinitionResource s -> TF.Attribute s Text)
            (\s a -> s { _family' = a } :: EcsTaskDefinitionResource s)

ecsTaskDefinitionResource :: TF.Resource TF.AWS (EcsTaskDefinitionResource s)
ecsTaskDefinitionResource =
    TF.newResource "aws_ecs_task_definition" $
        EcsTaskDefinitionResource {
              _container_definitions = TF.Nil
            , _family' = TF.Nil
            }

{- | The @aws_efs_file_system@ AWS resource.

Provides an Elastic File System (EFS) resource.
-}
data EfsFileSystemResource s = EfsFileSystemResource {
      _creation_token :: !(TF.Attribute s Text)
    {- ^ (Optional) A unique name (a maximum of 64 characters are allowed) used as reference when creating the Elastic File System to ensure idempotent file system creation. By default generated by Terraform. See [Elastic File System] (http://docs.aws.amazon.com/efs/latest/ug/) user guide for more information. -}
    , _encrypted :: !(TF.Attribute s Text)
    {- ^ (Optional) If true, the disk will be encrypted. -}
    , _kms_key_id :: !(TF.Attribute s Text)
    {- ^ (Optional) The ARN for the KMS encryption key. When specifying kms_key_id, encrypted needs to be set to true. -}
    , _performance_mode :: !(TF.Attribute s Text)
    {- ^ (Optional) The file system performance mode. Can be either @"generalPurpose"@ or @"maxIO"@ (Default: @"generalPurpose"@ ). -}
    , _reference_name :: !(TF.Attribute s Text)
    {- ^ - DEPRECATED (Optional) A reference name used when creating the @Creation Token@ which Amazon EFS uses to ensure idempotent file system creation. By default generated by Terraform. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the file system. -}
    } deriving (Show, Eq)

instance TF.ToHCL (EfsFileSystemResource s) where
    toHCL EfsFileSystemResource{..} = TF.block $ catMaybes
        [ TF.assign "creation_token" <$> TF.attribute _creation_token
        , TF.assign "encrypted" <$> TF.attribute _encrypted
        , TF.assign "kms_key_id" <$> TF.attribute _kms_key_id
        , TF.assign "performance_mode" <$> TF.attribute _performance_mode
        , TF.assign "reference_name" <$> TF.attribute _reference_name
        , TF.assign "tags" <$> TF.attribute _tags
        ]

instance HasCreationToken (EfsFileSystemResource s) Text where
    type HasCreationTokenThread (EfsFileSystemResource s) Text = s

    creationToken =
        lens (_creation_token :: EfsFileSystemResource s -> TF.Attribute s Text)
            (\s a -> s { _creation_token = a } :: EfsFileSystemResource s)

instance HasEncrypted (EfsFileSystemResource s) Text where
    type HasEncryptedThread (EfsFileSystemResource s) Text = s

    encrypted =
        lens (_encrypted :: EfsFileSystemResource s -> TF.Attribute s Text)
            (\s a -> s { _encrypted = a } :: EfsFileSystemResource s)

instance HasKmsKeyId (EfsFileSystemResource s) Text where
    type HasKmsKeyIdThread (EfsFileSystemResource s) Text = s

    kmsKeyId =
        lens (_kms_key_id :: EfsFileSystemResource s -> TF.Attribute s Text)
            (\s a -> s { _kms_key_id = a } :: EfsFileSystemResource s)

instance HasPerformanceMode (EfsFileSystemResource s) Text where
    type HasPerformanceModeThread (EfsFileSystemResource s) Text = s

    performanceMode =
        lens (_performance_mode :: EfsFileSystemResource s -> TF.Attribute s Text)
            (\s a -> s { _performance_mode = a } :: EfsFileSystemResource s)

instance HasReferenceName (EfsFileSystemResource s) Text where
    type HasReferenceNameThread (EfsFileSystemResource s) Text = s

    referenceName =
        lens (_reference_name :: EfsFileSystemResource s -> TF.Attribute s Text)
            (\s a -> s { _reference_name = a } :: EfsFileSystemResource s)

instance HasTags (EfsFileSystemResource s) TF.Tags where
    type HasTagsThread (EfsFileSystemResource s) TF.Tags = s

    tags =
        lens (_tags :: EfsFileSystemResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: EfsFileSystemResource s)

instance HasComputedDnsName (EfsFileSystemResource s) Text

instance HasComputedId (EfsFileSystemResource s) Text

instance HasComputedKmsKeyId (EfsFileSystemResource s) Text

efsFileSystemResource :: TF.Resource TF.AWS (EfsFileSystemResource s)
efsFileSystemResource =
    TF.newResource "aws_efs_file_system" $
        EfsFileSystemResource {
              _creation_token = TF.Nil
            , _encrypted = TF.Nil
            , _kms_key_id = TF.Nil
            , _performance_mode = TF.Nil
            , _reference_name = TF.Nil
            , _tags = TF.Nil
            }

{- | The @aws_efs_mount_target@ AWS resource.

Provides an Elastic File System (EFS) mount target.
-}
data EfsMountTargetResource s = EfsMountTargetResource {
      _file_system_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the file system for which the mount target is intended. -}
    , _ip_address :: !(TF.Attribute s Text)
    {- ^ (Optional) The address (within the address range of the specified subnet) at which the file system may be mounted via the mount target. -}
    , _security_groups :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of up to 5 VPC security group IDs (that must be for the same VPC as subnet specified) in effect for the mount target. -}
    , _subnet_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the subnet to add the mount target in. -}
    } deriving (Show, Eq)

instance TF.ToHCL (EfsMountTargetResource s) where
    toHCL EfsMountTargetResource{..} = TF.block $ catMaybes
        [ TF.assign "file_system_id" <$> TF.attribute _file_system_id
        , TF.assign "ip_address" <$> TF.attribute _ip_address
        , TF.assign "security_groups" <$> TF.attribute _security_groups
        , TF.assign "subnet_id" <$> TF.attribute _subnet_id
        ]

instance HasFileSystemId (EfsMountTargetResource s) Text where
    type HasFileSystemIdThread (EfsMountTargetResource s) Text = s

    fileSystemId =
        lens (_file_system_id :: EfsMountTargetResource s -> TF.Attribute s Text)
            (\s a -> s { _file_system_id = a } :: EfsMountTargetResource s)

instance HasIpAddress (EfsMountTargetResource s) Text where
    type HasIpAddressThread (EfsMountTargetResource s) Text = s

    ipAddress =
        lens (_ip_address :: EfsMountTargetResource s -> TF.Attribute s Text)
            (\s a -> s { _ip_address = a } :: EfsMountTargetResource s)

instance HasSecurityGroups (EfsMountTargetResource s) Text where
    type HasSecurityGroupsThread (EfsMountTargetResource s) Text = s

    securityGroups =
        lens (_security_groups :: EfsMountTargetResource s -> TF.Attribute s Text)
            (\s a -> s { _security_groups = a } :: EfsMountTargetResource s)

instance HasSubnetId (EfsMountTargetResource s) Text where
    type HasSubnetIdThread (EfsMountTargetResource s) Text = s

    subnetId =
        lens (_subnet_id :: EfsMountTargetResource s -> TF.Attribute s Text)
            (\s a -> s { _subnet_id = a } :: EfsMountTargetResource s)

instance HasComputedDnsName (EfsMountTargetResource s) Text

instance HasComputedId (EfsMountTargetResource s) Text

instance HasComputedNetworkInterfaceId (EfsMountTargetResource s) Text

efsMountTargetResource :: TF.Resource TF.AWS (EfsMountTargetResource s)
efsMountTargetResource =
    TF.newResource "aws_efs_mount_target" $
        EfsMountTargetResource {
              _file_system_id = TF.Nil
            , _ip_address = TF.Nil
            , _security_groups = TF.Nil
            , _subnet_id = TF.Nil
            }

{- | The @aws_egress_only_internet_gateway@ AWS resource.

[IPv6 only] Creates an egress-only Internet gateway for your VPC. An
egress-only Internet gateway is used to enable outbound communication over
IPv6 from instances in your VPC to the Internet, and prevents hosts outside
of your VPC from initiating an IPv6 connection with your instance.
-}
data EgressOnlyInternetGatewayResource s = EgressOnlyInternetGatewayResource {
      _vpc_id :: !(TF.Attribute s Text)
    {- ^ (Required) The VPC ID to create in. -}
    } deriving (Show, Eq)

instance TF.ToHCL (EgressOnlyInternetGatewayResource s) where
    toHCL EgressOnlyInternetGatewayResource{..} = TF.block $ catMaybes
        [ TF.assign "vpc_id" <$> TF.attribute _vpc_id
        ]

instance HasVpcId (EgressOnlyInternetGatewayResource s) Text where
    type HasVpcIdThread (EgressOnlyInternetGatewayResource s) Text = s

    vpcId =
        lens (_vpc_id :: EgressOnlyInternetGatewayResource s -> TF.Attribute s Text)
            (\s a -> s { _vpc_id = a } :: EgressOnlyInternetGatewayResource s)

instance HasComputedId (EgressOnlyInternetGatewayResource s) Text

egressOnlyInternetGatewayResource :: TF.Resource TF.AWS (EgressOnlyInternetGatewayResource s)
egressOnlyInternetGatewayResource =
    TF.newResource "aws_egress_only_internet_gateway" $
        EgressOnlyInternetGatewayResource {
              _vpc_id = TF.Nil
            }

{- | The @aws_eip_association@ AWS resource.

Provides an AWS EIP Association as a top level resource, to associate and
disassociate Elastic IPs from AWS Instances and Network Interfaces. ~> NOTE:
@aws_eip_association@ is useful in scenarios where EIPs are either
pre-existing or distributed to customers or users and therefore cannot be
changed.
-}
data EipAssociationResource s = EipAssociationResource {
      _allocation_id :: !(TF.Attribute s Text)
    {- ^ (Optional) The allocation ID. This is required for EC2-VPC. -}
    , _allow_reassociation :: !(TF.Attribute s Text)
    {- ^ (Optional, Boolean) Whether to allow an Elastic IP to be re-associated. Defaults to @true@ in VPC. -}
    , _instance_id :: !(TF.Attribute s Text)
    {- ^ (Optional) The ID of the instance. This is required for EC2-Classic. For EC2-VPC, you can specify either the instance ID or the network interface ID, but not both. The operation fails if you specify an instance ID unless exactly one network interface is attached. -}
    , _network_interface_id :: !(TF.Attribute s Text)
    {- ^ (Optional) The ID of the network interface. If the instance has more than one network interface, you must specify a network interface ID. -}
    , _private_ip_address :: !(TF.Attribute s Text)
    {- ^ (Optional) The primary or secondary private IP address to associate with the Elastic IP address. If no private IP address is specified, the Elastic IP address is associated with the primary private IP address. -}
    , _public_ip :: !(TF.Attribute s Text)
    {- ^ (Optional) The Elastic IP address. This is required for EC2-Classic. -}
    } deriving (Show, Eq)

instance TF.ToHCL (EipAssociationResource s) where
    toHCL EipAssociationResource{..} = TF.block $ catMaybes
        [ TF.assign "allocation_id" <$> TF.attribute _allocation_id
        , TF.assign "allow_reassociation" <$> TF.attribute _allow_reassociation
        , TF.assign "instance_id" <$> TF.attribute _instance_id
        , TF.assign "network_interface_id" <$> TF.attribute _network_interface_id
        , TF.assign "private_ip_address" <$> TF.attribute _private_ip_address
        , TF.assign "public_ip" <$> TF.attribute _public_ip
        ]

instance HasAllocationId (EipAssociationResource s) Text where
    type HasAllocationIdThread (EipAssociationResource s) Text = s

    allocationId =
        lens (_allocation_id :: EipAssociationResource s -> TF.Attribute s Text)
            (\s a -> s { _allocation_id = a } :: EipAssociationResource s)

instance HasAllowReassociation (EipAssociationResource s) Text where
    type HasAllowReassociationThread (EipAssociationResource s) Text = s

    allowReassociation =
        lens (_allow_reassociation :: EipAssociationResource s -> TF.Attribute s Text)
            (\s a -> s { _allow_reassociation = a } :: EipAssociationResource s)

instance HasInstanceId (EipAssociationResource s) Text where
    type HasInstanceIdThread (EipAssociationResource s) Text = s

    instanceId =
        lens (_instance_id :: EipAssociationResource s -> TF.Attribute s Text)
            (\s a -> s { _instance_id = a } :: EipAssociationResource s)

instance HasNetworkInterfaceId (EipAssociationResource s) Text where
    type HasNetworkInterfaceIdThread (EipAssociationResource s) Text = s

    networkInterfaceId =
        lens (_network_interface_id :: EipAssociationResource s -> TF.Attribute s Text)
            (\s a -> s { _network_interface_id = a } :: EipAssociationResource s)

instance HasPrivateIpAddress (EipAssociationResource s) Text where
    type HasPrivateIpAddressThread (EipAssociationResource s) Text = s

    privateIpAddress =
        lens (_private_ip_address :: EipAssociationResource s -> TF.Attribute s Text)
            (\s a -> s { _private_ip_address = a } :: EipAssociationResource s)

instance HasPublicIp (EipAssociationResource s) Text where
    type HasPublicIpThread (EipAssociationResource s) Text = s

    publicIp =
        lens (_public_ip :: EipAssociationResource s -> TF.Attribute s Text)
            (\s a -> s { _public_ip = a } :: EipAssociationResource s)

instance HasComputedAllocationId (EipAssociationResource s) Text

instance HasComputedAssociationId (EipAssociationResource s) Text

instance HasComputedInstanceId (EipAssociationResource s) Text

instance HasComputedNetworkInterfaceId (EipAssociationResource s) Text

instance HasComputedPrivateIpAddress (EipAssociationResource s) Text

instance HasComputedPublicIp (EipAssociationResource s) Text

eipAssociationResource :: TF.Resource TF.AWS (EipAssociationResource s)
eipAssociationResource =
    TF.newResource "aws_eip_association" $
        EipAssociationResource {
              _allocation_id = TF.Nil
            , _allow_reassociation = TF.Nil
            , _instance_id = TF.Nil
            , _network_interface_id = TF.Nil
            , _private_ip_address = TF.Nil
            , _public_ip = TF.Nil
            }

{- | The @aws_eip@ AWS resource.

Provides an Elastic IP resource. ~> Note: EIP may require IGW to exist prior
to association. Use @depends_on@ to set an explicit dependency on the IGW.
-}
data EipResource s = EipResource {
      _associate_with_private_ip :: !(TF.Attribute s Text)
    {- ^ (Optional) A user specified primary or secondary private IP address to associate with the Elastic IP address. If no private IP address is specified, the Elastic IP address is associated with the primary private IP address. -}
    , _instance' :: !(TF.Attribute s Text)
    {- ^ (Optional) EC2 instance ID. -}
    , _network_interface :: !(TF.Attribute s Text)
    {- ^ (Optional) Network interface ID to associate with. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _vpc :: !(TF.Attribute s Text)
    {- ^ (Optional) Boolean if the EIP is in a VPC or not. -}
    } deriving (Show, Eq)

instance TF.ToHCL (EipResource s) where
    toHCL EipResource{..} = TF.block $ catMaybes
        [ TF.assign "associate_with_private_ip" <$> TF.attribute _associate_with_private_ip
        , TF.assign "instance" <$> TF.attribute _instance'
        , TF.assign "network_interface" <$> TF.attribute _network_interface
        , TF.assign "tags" <$> TF.attribute _tags
        , TF.assign "vpc" <$> TF.attribute _vpc
        ]

instance HasAssociateWithPrivateIp (EipResource s) Text where
    type HasAssociateWithPrivateIpThread (EipResource s) Text = s

    associateWithPrivateIp =
        lens (_associate_with_private_ip :: EipResource s -> TF.Attribute s Text)
            (\s a -> s { _associate_with_private_ip = a } :: EipResource s)

instance HasInstance' (EipResource s) Text where
    type HasInstance'Thread (EipResource s) Text = s

    instance' =
        lens (_instance' :: EipResource s -> TF.Attribute s Text)
            (\s a -> s { _instance' = a } :: EipResource s)

instance HasNetworkInterface (EipResource s) Text where
    type HasNetworkInterfaceThread (EipResource s) Text = s

    networkInterface =
        lens (_network_interface :: EipResource s -> TF.Attribute s Text)
            (\s a -> s { _network_interface = a } :: EipResource s)

instance HasTags (EipResource s) TF.Tags where
    type HasTagsThread (EipResource s) TF.Tags = s

    tags =
        lens (_tags :: EipResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: EipResource s)

instance HasVpc (EipResource s) Text where
    type HasVpcThread (EipResource s) Text = s

    vpc =
        lens (_vpc :: EipResource s -> TF.Attribute s Text)
            (\s a -> s { _vpc = a } :: EipResource s)

instance HasComputedAssociateWithPrivateIp (EipResource s) Text

instance HasComputedId (EipResource s) Text

instance HasComputedInstance' (EipResource s) Text

instance HasComputedNetworkInterface (EipResource s) Text

instance HasComputedPrivateIp (EipResource s) Text

instance HasComputedPublicIp (EipResource s) Text

eipResource :: TF.Resource TF.AWS (EipResource s)
eipResource =
    TF.newResource "aws_eip" $
        EipResource {
              _associate_with_private_ip = TF.Nil
            , _instance' = TF.Nil
            , _network_interface = TF.Nil
            , _tags = TF.Nil
            , _vpc = TF.Nil
            }

{- | The @aws_elastic_beanstalk_application@ AWS resource.

Provides an Elastic Beanstalk Application Resource. Elastic Beanstalk allows
you to deploy and manage applications in the AWS cloud without worrying
about the infrastructure that runs those applications. This resource creates
an application that has one configuration template named @default@ , and no
application versions
-}
data ElasticBeanstalkApplicationResource s = ElasticBeanstalkApplicationResource {
      _description :: !(TF.Attribute s Text)
    {- ^ (Optional) Short description of the application -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the application, must be unique within your account -}
    } deriving (Show, Eq)

instance TF.ToHCL (ElasticBeanstalkApplicationResource s) where
    toHCL ElasticBeanstalkApplicationResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.attribute _description
        , TF.assign "name" <$> TF.attribute _name
        ]

instance HasDescription (ElasticBeanstalkApplicationResource s) Text where
    type HasDescriptionThread (ElasticBeanstalkApplicationResource s) Text = s

    description =
        lens (_description :: ElasticBeanstalkApplicationResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: ElasticBeanstalkApplicationResource s)

instance HasName (ElasticBeanstalkApplicationResource s) Text where
    type HasNameThread (ElasticBeanstalkApplicationResource s) Text = s

    name =
        lens (_name :: ElasticBeanstalkApplicationResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: ElasticBeanstalkApplicationResource s)

elasticBeanstalkApplicationResource :: TF.Resource TF.AWS (ElasticBeanstalkApplicationResource s)
elasticBeanstalkApplicationResource =
    TF.newResource "aws_elastic_beanstalk_application" $
        ElasticBeanstalkApplicationResource {
              _description = TF.Nil
            , _name = TF.Nil
            }

{- | The @aws_elastic_beanstalk_application_version@ AWS resource.

Provides an Elastic Beanstalk Application Version Resource. Elastic
Beanstalk allows you to deploy and manage applications in the AWS cloud
without worrying about the infrastructure that runs those applications. This
resource creates a Beanstalk Application Version that can be deployed to a
Beanstalk Environment. ~> NOTE on Application Version Resource: When using
the Application Version resource with multiple
<elastic_beanstalk_environment.html> it is possible that an error may be
returned when attempting to delete an Application Version while it is still
in use by a different environment. To work around this you can:
-}
data ElasticBeanstalkApplicationVersionResource s = ElasticBeanstalkApplicationVersionResource {
      _application :: !(TF.Attribute s Text)
    {- ^ (Required) Name of the Beanstalk Application the version is associated with. -}
    , _bucket :: !(TF.Attribute s Text)
    {- ^ (Required) S3 bucket that contains the Application Version source bundle. -}
    , _description :: !(TF.Attribute s Text)
    {- ^ (Optional) Short description of the Application Version. -}
    , _force_delete :: !(TF.Attribute s Text)
    {- ^ (Optional) On delete, force an Application Version to be deleted when it may be in use by multiple Elastic Beanstalk Environments. -}
    , _key :: !(TF.Attribute s Text)
    {- ^ (Required) S3 object that is the Application Version source bundle. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) A unique name for the this Application Version. -}
    } deriving (Show, Eq)

instance TF.ToHCL (ElasticBeanstalkApplicationVersionResource s) where
    toHCL ElasticBeanstalkApplicationVersionResource{..} = TF.block $ catMaybes
        [ TF.assign "application" <$> TF.attribute _application
        , TF.assign "bucket" <$> TF.attribute _bucket
        , TF.assign "description" <$> TF.attribute _description
        , TF.assign "force_delete" <$> TF.attribute _force_delete
        , TF.assign "key" <$> TF.attribute _key
        , TF.assign "name" <$> TF.attribute _name
        ]

instance HasApplication (ElasticBeanstalkApplicationVersionResource s) Text where
    type HasApplicationThread (ElasticBeanstalkApplicationVersionResource s) Text = s

    application =
        lens (_application :: ElasticBeanstalkApplicationVersionResource s -> TF.Attribute s Text)
            (\s a -> s { _application = a } :: ElasticBeanstalkApplicationVersionResource s)

instance HasBucket (ElasticBeanstalkApplicationVersionResource s) Text where
    type HasBucketThread (ElasticBeanstalkApplicationVersionResource s) Text = s

    bucket =
        lens (_bucket :: ElasticBeanstalkApplicationVersionResource s -> TF.Attribute s Text)
            (\s a -> s { _bucket = a } :: ElasticBeanstalkApplicationVersionResource s)

instance HasDescription (ElasticBeanstalkApplicationVersionResource s) Text where
    type HasDescriptionThread (ElasticBeanstalkApplicationVersionResource s) Text = s

    description =
        lens (_description :: ElasticBeanstalkApplicationVersionResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: ElasticBeanstalkApplicationVersionResource s)

instance HasForceDelete (ElasticBeanstalkApplicationVersionResource s) Text where
    type HasForceDeleteThread (ElasticBeanstalkApplicationVersionResource s) Text = s

    forceDelete =
        lens (_force_delete :: ElasticBeanstalkApplicationVersionResource s -> TF.Attribute s Text)
            (\s a -> s { _force_delete = a } :: ElasticBeanstalkApplicationVersionResource s)

instance HasKey (ElasticBeanstalkApplicationVersionResource s) Text where
    type HasKeyThread (ElasticBeanstalkApplicationVersionResource s) Text = s

    key =
        lens (_key :: ElasticBeanstalkApplicationVersionResource s -> TF.Attribute s Text)
            (\s a -> s { _key = a } :: ElasticBeanstalkApplicationVersionResource s)

instance HasName (ElasticBeanstalkApplicationVersionResource s) Text where
    type HasNameThread (ElasticBeanstalkApplicationVersionResource s) Text = s

    name =
        lens (_name :: ElasticBeanstalkApplicationVersionResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: ElasticBeanstalkApplicationVersionResource s)

instance HasComputedName (ElasticBeanstalkApplicationVersionResource s) Text

elasticBeanstalkApplicationVersionResource :: TF.Resource TF.AWS (ElasticBeanstalkApplicationVersionResource s)
elasticBeanstalkApplicationVersionResource =
    TF.newResource "aws_elastic_beanstalk_application_version" $
        ElasticBeanstalkApplicationVersionResource {
              _application = TF.Nil
            , _bucket = TF.Nil
            , _description = TF.Nil
            , _force_delete = TF.Nil
            , _key = TF.Nil
            , _name = TF.Nil
            }

{- | The @aws_elastic_beanstalk_configuration_template@ AWS resource.

Provides an Elastic Beanstalk Configuration Template, which are associated
with a specific application and are used to deploy different versions of the
application with the same configuration settings.
-}
data ElasticBeanstalkConfigurationTemplateResource s = ElasticBeanstalkConfigurationTemplateResource {
      _application :: !(TF.Attribute s Text)
    {- ^ – (Required) name of the application to associate with this configuration template -}
    , _description :: !(TF.Attribute s Text)
    {- ^ (Optional) Short description of the Template -}
    , _environment_id :: !(TF.Attribute s Text)
    {- ^ – (Optional) The ID of the environment used with this configuration template -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) A unique name for this Template. -}
    , _setting :: !(TF.Attribute s Text)
    {- ^ – (Optional) Option settings to configure the new Environment. These override specific values that are set as defaults. The format is detailed below in <#option-settings> -}
    , _solution_stack_name :: !(TF.Attribute s Text)
    {- ^ – (Optional) A solution stack to base your Template off of. Example stacks can be found in the <https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html> -}
    } deriving (Show, Eq)

instance TF.ToHCL (ElasticBeanstalkConfigurationTemplateResource s) where
    toHCL ElasticBeanstalkConfigurationTemplateResource{..} = TF.block $ catMaybes
        [ TF.assign "application" <$> TF.attribute _application
        , TF.assign "description" <$> TF.attribute _description
        , TF.assign "environment_id" <$> TF.attribute _environment_id
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "setting" <$> TF.attribute _setting
        , TF.assign "solution_stack_name" <$> TF.attribute _solution_stack_name
        ]

instance HasApplication (ElasticBeanstalkConfigurationTemplateResource s) Text where
    type HasApplicationThread (ElasticBeanstalkConfigurationTemplateResource s) Text = s

    application =
        lens (_application :: ElasticBeanstalkConfigurationTemplateResource s -> TF.Attribute s Text)
            (\s a -> s { _application = a } :: ElasticBeanstalkConfigurationTemplateResource s)

instance HasDescription (ElasticBeanstalkConfigurationTemplateResource s) Text where
    type HasDescriptionThread (ElasticBeanstalkConfigurationTemplateResource s) Text = s

    description =
        lens (_description :: ElasticBeanstalkConfigurationTemplateResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: ElasticBeanstalkConfigurationTemplateResource s)

instance HasEnvironmentId (ElasticBeanstalkConfigurationTemplateResource s) Text where
    type HasEnvironmentIdThread (ElasticBeanstalkConfigurationTemplateResource s) Text = s

    environmentId =
        lens (_environment_id :: ElasticBeanstalkConfigurationTemplateResource s -> TF.Attribute s Text)
            (\s a -> s { _environment_id = a } :: ElasticBeanstalkConfigurationTemplateResource s)

instance HasName (ElasticBeanstalkConfigurationTemplateResource s) Text where
    type HasNameThread (ElasticBeanstalkConfigurationTemplateResource s) Text = s

    name =
        lens (_name :: ElasticBeanstalkConfigurationTemplateResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: ElasticBeanstalkConfigurationTemplateResource s)

instance HasSetting (ElasticBeanstalkConfigurationTemplateResource s) Text where
    type HasSettingThread (ElasticBeanstalkConfigurationTemplateResource s) Text = s

    setting =
        lens (_setting :: ElasticBeanstalkConfigurationTemplateResource s -> TF.Attribute s Text)
            (\s a -> s { _setting = a } :: ElasticBeanstalkConfigurationTemplateResource s)

instance HasSolutionStackName (ElasticBeanstalkConfigurationTemplateResource s) Text where
    type HasSolutionStackNameThread (ElasticBeanstalkConfigurationTemplateResource s) Text = s

    solutionStackName =
        lens (_solution_stack_name :: ElasticBeanstalkConfigurationTemplateResource s -> TF.Attribute s Text)
            (\s a -> s { _solution_stack_name = a } :: ElasticBeanstalkConfigurationTemplateResource s)

elasticBeanstalkConfigurationTemplateResource :: TF.Resource TF.AWS (ElasticBeanstalkConfigurationTemplateResource s)
elasticBeanstalkConfigurationTemplateResource =
    TF.newResource "aws_elastic_beanstalk_configuration_template" $
        ElasticBeanstalkConfigurationTemplateResource {
              _application = TF.Nil
            , _description = TF.Nil
            , _environment_id = TF.Nil
            , _name = TF.Nil
            , _setting = TF.Nil
            , _solution_stack_name = TF.Nil
            }

{- | The @aws_elastic_beanstalk_environment@ AWS resource.

Provides an Elastic Beanstalk Environment Resource. Elastic Beanstalk allows
you to deploy and manage applications in the AWS cloud without worrying
about the infrastructure that runs those applications. Environments are
often things such as @development@ , @integration@ , or @production@ .
-}
data ElasticBeanstalkEnvironmentResource s = ElasticBeanstalkEnvironmentResource {
      _application :: !(TF.Attribute s Text)
    {- ^ – (Required) Name of the application that contains the version to be deployed -}
    , _cname_prefix :: !(TF.Attribute s Text)
    {- ^ (Optional) Prefix to use for the fully qualified DNS name of the Environment. -}
    , _description :: !(TF.Attribute s Text)
    {- ^ (Optional) Short description of the Environment -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) A unique name for this Environment. This name is used in the application URL -}
    , _poll_interval :: !(TF.Attribute s Text)
    {- ^ – The time between polling the AWS API to check if changes have been applied. Use this to adjust the rate of API calls for any @create@ or @update@ action. Minimum @10s@ , maximum @180s@ . Omit this to use the default behavior, which is an exponential backoff -}
    , _setting :: !(TF.Attribute s Text)
    {- ^ – (Optional) Option settings to configure the new Environment. These override specific values that are set as defaults. The format is detailed below in <#option-settings> -}
    , _solution_stack_name :: !(TF.Attribute s Text)
    {- ^ – (Optional) A solution stack to base your environment off of. Example stacks can be found in the <https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html> -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ – (Optional) A set of tags to apply to the Environment. Note: at this time the Elastic Beanstalk API does not provide a programatic way of changing these tags after initial application -}
    , _template_name :: !(TF.Attribute s Text)
    {- ^ – (Optional) The name of the Elastic Beanstalk Configuration template to use in deployment -}
    , _tier :: !(TF.Attribute s Text)
    {- ^ (Optional) Elastic Beanstalk Environment tier. Valid values are @Worker@ or @WebServer@ . If tier is left blank @WebServer@ will be used. -}
    , _version_label :: !(TF.Attribute s Text)
    {- ^ (Optional) The name of the Elastic Beanstalk Application Version to use in deployment. -}
    , _wait_for_ready_timeout :: !(TF.Attribute s Text)
    {- ^ - (Default: @20m@ ) The maximum <https://golang.org/pkg/time/#ParseDuration> that Terraform should wait for an Elastic Beanstalk Environment to be in a ready state before timing out. -}
    } deriving (Show, Eq)

instance TF.ToHCL (ElasticBeanstalkEnvironmentResource s) where
    toHCL ElasticBeanstalkEnvironmentResource{..} = TF.block $ catMaybes
        [ TF.assign "application" <$> TF.attribute _application
        , TF.assign "cname_prefix" <$> TF.attribute _cname_prefix
        , TF.assign "description" <$> TF.attribute _description
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "poll_interval" <$> TF.attribute _poll_interval
        , TF.assign "setting" <$> TF.attribute _setting
        , TF.assign "solution_stack_name" <$> TF.attribute _solution_stack_name
        , TF.assign "tags" <$> TF.attribute _tags
        , TF.assign "template_name" <$> TF.attribute _template_name
        , TF.assign "tier" <$> TF.attribute _tier
        , TF.assign "version_label" <$> TF.attribute _version_label
        , TF.assign "wait_for_ready_timeout" <$> TF.attribute _wait_for_ready_timeout
        ]

instance HasApplication (ElasticBeanstalkEnvironmentResource s) Text where
    type HasApplicationThread (ElasticBeanstalkEnvironmentResource s) Text = s

    application =
        lens (_application :: ElasticBeanstalkEnvironmentResource s -> TF.Attribute s Text)
            (\s a -> s { _application = a } :: ElasticBeanstalkEnvironmentResource s)

instance HasCnamePrefix (ElasticBeanstalkEnvironmentResource s) Text where
    type HasCnamePrefixThread (ElasticBeanstalkEnvironmentResource s) Text = s

    cnamePrefix =
        lens (_cname_prefix :: ElasticBeanstalkEnvironmentResource s -> TF.Attribute s Text)
            (\s a -> s { _cname_prefix = a } :: ElasticBeanstalkEnvironmentResource s)

instance HasDescription (ElasticBeanstalkEnvironmentResource s) Text where
    type HasDescriptionThread (ElasticBeanstalkEnvironmentResource s) Text = s

    description =
        lens (_description :: ElasticBeanstalkEnvironmentResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: ElasticBeanstalkEnvironmentResource s)

instance HasName (ElasticBeanstalkEnvironmentResource s) Text where
    type HasNameThread (ElasticBeanstalkEnvironmentResource s) Text = s

    name =
        lens (_name :: ElasticBeanstalkEnvironmentResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: ElasticBeanstalkEnvironmentResource s)

instance HasPollInterval (ElasticBeanstalkEnvironmentResource s) Text where
    type HasPollIntervalThread (ElasticBeanstalkEnvironmentResource s) Text = s

    pollInterval =
        lens (_poll_interval :: ElasticBeanstalkEnvironmentResource s -> TF.Attribute s Text)
            (\s a -> s { _poll_interval = a } :: ElasticBeanstalkEnvironmentResource s)

instance HasSetting (ElasticBeanstalkEnvironmentResource s) Text where
    type HasSettingThread (ElasticBeanstalkEnvironmentResource s) Text = s

    setting =
        lens (_setting :: ElasticBeanstalkEnvironmentResource s -> TF.Attribute s Text)
            (\s a -> s { _setting = a } :: ElasticBeanstalkEnvironmentResource s)

instance HasSolutionStackName (ElasticBeanstalkEnvironmentResource s) Text where
    type HasSolutionStackNameThread (ElasticBeanstalkEnvironmentResource s) Text = s

    solutionStackName =
        lens (_solution_stack_name :: ElasticBeanstalkEnvironmentResource s -> TF.Attribute s Text)
            (\s a -> s { _solution_stack_name = a } :: ElasticBeanstalkEnvironmentResource s)

instance HasTags (ElasticBeanstalkEnvironmentResource s) TF.Tags where
    type HasTagsThread (ElasticBeanstalkEnvironmentResource s) TF.Tags = s

    tags =
        lens (_tags :: ElasticBeanstalkEnvironmentResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: ElasticBeanstalkEnvironmentResource s)

instance HasTemplateName (ElasticBeanstalkEnvironmentResource s) Text where
    type HasTemplateNameThread (ElasticBeanstalkEnvironmentResource s) Text = s

    templateName =
        lens (_template_name :: ElasticBeanstalkEnvironmentResource s -> TF.Attribute s Text)
            (\s a -> s { _template_name = a } :: ElasticBeanstalkEnvironmentResource s)

instance HasTier (ElasticBeanstalkEnvironmentResource s) Text where
    type HasTierThread (ElasticBeanstalkEnvironmentResource s) Text = s

    tier =
        lens (_tier :: ElasticBeanstalkEnvironmentResource s -> TF.Attribute s Text)
            (\s a -> s { _tier = a } :: ElasticBeanstalkEnvironmentResource s)

instance HasVersionLabel (ElasticBeanstalkEnvironmentResource s) Text where
    type HasVersionLabelThread (ElasticBeanstalkEnvironmentResource s) Text = s

    versionLabel =
        lens (_version_label :: ElasticBeanstalkEnvironmentResource s -> TF.Attribute s Text)
            (\s a -> s { _version_label = a } :: ElasticBeanstalkEnvironmentResource s)

instance HasWaitForReadyTimeout (ElasticBeanstalkEnvironmentResource s) Text where
    type HasWaitForReadyTimeoutThread (ElasticBeanstalkEnvironmentResource s) Text = s

    waitForReadyTimeout =
        lens (_wait_for_ready_timeout :: ElasticBeanstalkEnvironmentResource s -> TF.Attribute s Text)
            (\s a -> s { _wait_for_ready_timeout = a } :: ElasticBeanstalkEnvironmentResource s)

elasticBeanstalkEnvironmentResource :: TF.Resource TF.AWS (ElasticBeanstalkEnvironmentResource s)
elasticBeanstalkEnvironmentResource =
    TF.newResource "aws_elastic_beanstalk_environment" $
        ElasticBeanstalkEnvironmentResource {
              _application = TF.Nil
            , _cname_prefix = TF.Nil
            , _description = TF.Nil
            , _name = TF.Nil
            , _poll_interval = TF.Nil
            , _setting = TF.Nil
            , _solution_stack_name = TF.Nil
            , _tags = TF.Nil
            , _template_name = TF.Nil
            , _tier = TF.Nil
            , _version_label = TF.Nil
            , _wait_for_ready_timeout = TF.Nil
            }

{- | The @aws_elasticache_cluster@ AWS resource.

Provides an ElastiCache Cluster resource. Changes to a Cache Cluster can
occur when you manually change a parameter, such as @node_type@ , and are
reflected in the next maintenance window. Because of this, Terraform may
report a difference in its planning phase because a modification has not yet
taken place. You can use the @apply_immediately@ flag to instruct the
service to apply the change immediately (see documentation below). ~> Note:
using @apply_immediately@ can result in a brief downtime as the server
reboots. See the AWS Docs on
<https://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/Clusters.Modify.html>
for more information.
-}
data ElasticacheClusterResource s = ElasticacheClusterResource {
      _apply_immediately :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies whether any database modifications are applied immediately, or during the next maintenance window. Default is @false@ . See <https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheCluster.html> (Available since v0.6.0) -}
    , _availability_zone :: !(TF.Attribute s TF.Zone)
    {- ^ (Optional) The Availability Zone for the cache cluster. If you want to create cache nodes in multi-az, use @availability_zones@ -}
    , _availability_zones :: !(TF.Attribute s Text)
    {- ^ (Optional, Memcached only) List of Availability Zones in which the cache nodes will be created. If you want to create cache nodes in single-az, use @availability_zone@ -}
    , _az_mode :: !(TF.Attribute s Text)
    {- ^ (Optional, Memcached only) Specifies whether the nodes in this Memcached node group are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region. Valid values for this parameter are @single-az@ or @cross-az@ , default is @single-az@ . If you want to choose @cross-az@ , @num_cache_nodes@ must be greater than @1@ -}
    , _cluster_id :: !(TF.Attribute s Text)
    {- ^ – (Required) Group identifier. ElastiCache converts this name to lowercase -}
    , _engine :: !(TF.Attribute s Text)
    {- ^ – (Required) Name of the cache engine to be used for this cache cluster. Valid values for this parameter are @memcached@ or @redis@ -}
    , _engine_version :: !(TF.Attribute s Text)
    {- ^ – (Optional) Version number of the cache engine to be used. See <https://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/SelectEngine.html> in the AWS Documentation center for supported versions -}
    , _maintenance_window :: !(TF.Attribute s Text)
    {- ^ – (Optional) Specifies the weekly time range for when maintenance on the cache cluster is performed. The format is @ddd:hh24:mi-ddd:hh24:mi@ (24H Clock UTC). The minimum maintenance window is a 60 minute period. Example: @sun:05:00-sun:09:00@ -}
    , _node_type :: !(TF.Attribute s Text)
    {- ^ – (Required) The compute and memory capacity of the nodes. See <https://aws.amazon.com/elasticache/details#Available_Cache_Node_Types> for supported node types -}
    , _notification_topic_arn :: !(TF.Attribute s Text)
    {- ^ – (Optional) An Amazon Resource Name (ARN) of an SNS topic to send ElastiCache notifications to. Example: @arn:aws:sns:us-east-1:012345678999:my_sns_topic@ -}
    , _num_cache_nodes :: !(TF.Attribute s Text)
    {- ^ – (Required) The initial number of cache nodes that the cache cluster will have. For Redis, this value must be 1. For Memcache, this value must be between 1 and 20. If this number is reduced on subsequent runs, the highest numbered nodes will be removed. -}
    , _parameter_group_name :: !(TF.Attribute s Text)
    {- ^ – (Required) Name of the parameter group to associate with this cache cluster -}
    , _port :: !(TF.Attribute s Text)
    {- ^ – (Required) The port number on which each of the cache nodes will accept connections. For Memcache the default is 11211, and for Redis the default port is 6379. -}
    , _security_group_ids :: !(TF.Attribute s Text)
    {- ^ – (Optional, VPC only) One or more VPC security groups associated with the cache cluster -}
    , _security_group_names :: !(TF.Attribute s Text)
    {- ^ – (Optional, EC2 Classic only) List of security group names to associate with this cache cluster -}
    , _snapshot_arns :: !(TF.Attribute s Text)
    {- ^ – (Optional) A single-element string list containing an Amazon Resource Name (ARN) of a Redis RDB snapshot file stored in Amazon S3. Example: @arn:aws:s3:::my_bucket/snapshot1.rdb@ -}
    , _snapshot_name :: !(TF.Attribute s Text)
    {- ^ (Optional) The name of a snapshot from which to restore data into the new node group.  Changing the @snapshot_name@ forces a new resource. -}
    , _snapshot_retention_limit :: !(TF.Attribute s Text)
    {- ^ (Optional, Redis only) The number of days for which ElastiCache will retain automatic cache cluster snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, then a snapshot that was taken today will be retained for 5 days before being deleted. If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off. Please note that setting a @snapshot_retention_limit@ is not supported on cache.t1.micro or cache.t2.* cache nodes -}
    , _snapshot_window :: !(TF.Attribute s Text)
    {- ^ (Optional, Redis only) The daily time range (in UTC) during which ElastiCache will begin taking a daily snapshot of your cache cluster. Example: 05:00-09:00 -}
    , _subnet_group_name :: !(TF.Attribute s Text)
    {- ^ – (Optional, VPC only) Name of the subnet group to be used for the cache cluster. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource -}
    } deriving (Show, Eq)

instance TF.ToHCL (ElasticacheClusterResource s) where
    toHCL ElasticacheClusterResource{..} = TF.block $ catMaybes
        [ TF.assign "apply_immediately" <$> TF.attribute _apply_immediately
        , TF.assign "availability_zone" <$> TF.attribute _availability_zone
        , TF.assign "availability_zones" <$> TF.attribute _availability_zones
        , TF.assign "az_mode" <$> TF.attribute _az_mode
        , TF.assign "cluster_id" <$> TF.attribute _cluster_id
        , TF.assign "engine" <$> TF.attribute _engine
        , TF.assign "engine_version" <$> TF.attribute _engine_version
        , TF.assign "maintenance_window" <$> TF.attribute _maintenance_window
        , TF.assign "node_type" <$> TF.attribute _node_type
        , TF.assign "notification_topic_arn" <$> TF.attribute _notification_topic_arn
        , TF.assign "num_cache_nodes" <$> TF.attribute _num_cache_nodes
        , TF.assign "parameter_group_name" <$> TF.attribute _parameter_group_name
        , TF.assign "port" <$> TF.attribute _port
        , TF.assign "security_group_ids" <$> TF.attribute _security_group_ids
        , TF.assign "security_group_names" <$> TF.attribute _security_group_names
        , TF.assign "snapshot_arns" <$> TF.attribute _snapshot_arns
        , TF.assign "snapshot_name" <$> TF.attribute _snapshot_name
        , TF.assign "snapshot_retention_limit" <$> TF.attribute _snapshot_retention_limit
        , TF.assign "snapshot_window" <$> TF.attribute _snapshot_window
        , TF.assign "subnet_group_name" <$> TF.attribute _subnet_group_name
        , TF.assign "tags" <$> TF.attribute _tags
        ]

instance HasApplyImmediately (ElasticacheClusterResource s) Text where
    type HasApplyImmediatelyThread (ElasticacheClusterResource s) Text = s

    applyImmediately =
        lens (_apply_immediately :: ElasticacheClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _apply_immediately = a } :: ElasticacheClusterResource s)

instance HasAvailabilityZone (ElasticacheClusterResource s) TF.Zone where
    type HasAvailabilityZoneThread (ElasticacheClusterResource s) TF.Zone = s

    availabilityZone =
        lens (_availability_zone :: ElasticacheClusterResource s -> TF.Attribute s TF.Zone)
            (\s a -> s { _availability_zone = a } :: ElasticacheClusterResource s)

instance HasAvailabilityZones (ElasticacheClusterResource s) Text where
    type HasAvailabilityZonesThread (ElasticacheClusterResource s) Text = s

    availabilityZones =
        lens (_availability_zones :: ElasticacheClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _availability_zones = a } :: ElasticacheClusterResource s)

instance HasAzMode (ElasticacheClusterResource s) Text where
    type HasAzModeThread (ElasticacheClusterResource s) Text = s

    azMode =
        lens (_az_mode :: ElasticacheClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _az_mode = a } :: ElasticacheClusterResource s)

instance HasClusterId (ElasticacheClusterResource s) Text where
    type HasClusterIdThread (ElasticacheClusterResource s) Text = s

    clusterId =
        lens (_cluster_id :: ElasticacheClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _cluster_id = a } :: ElasticacheClusterResource s)

instance HasEngine (ElasticacheClusterResource s) Text where
    type HasEngineThread (ElasticacheClusterResource s) Text = s

    engine =
        lens (_engine :: ElasticacheClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _engine = a } :: ElasticacheClusterResource s)

instance HasEngineVersion (ElasticacheClusterResource s) Text where
    type HasEngineVersionThread (ElasticacheClusterResource s) Text = s

    engineVersion =
        lens (_engine_version :: ElasticacheClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _engine_version = a } :: ElasticacheClusterResource s)

instance HasMaintenanceWindow (ElasticacheClusterResource s) Text where
    type HasMaintenanceWindowThread (ElasticacheClusterResource s) Text = s

    maintenanceWindow =
        lens (_maintenance_window :: ElasticacheClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _maintenance_window = a } :: ElasticacheClusterResource s)

instance HasNodeType (ElasticacheClusterResource s) Text where
    type HasNodeTypeThread (ElasticacheClusterResource s) Text = s

    nodeType =
        lens (_node_type :: ElasticacheClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _node_type = a } :: ElasticacheClusterResource s)

instance HasNotificationTopicArn (ElasticacheClusterResource s) Text where
    type HasNotificationTopicArnThread (ElasticacheClusterResource s) Text = s

    notificationTopicArn =
        lens (_notification_topic_arn :: ElasticacheClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _notification_topic_arn = a } :: ElasticacheClusterResource s)

instance HasNumCacheNodes (ElasticacheClusterResource s) Text where
    type HasNumCacheNodesThread (ElasticacheClusterResource s) Text = s

    numCacheNodes =
        lens (_num_cache_nodes :: ElasticacheClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _num_cache_nodes = a } :: ElasticacheClusterResource s)

instance HasParameterGroupName (ElasticacheClusterResource s) Text where
    type HasParameterGroupNameThread (ElasticacheClusterResource s) Text = s

    parameterGroupName =
        lens (_parameter_group_name :: ElasticacheClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _parameter_group_name = a } :: ElasticacheClusterResource s)

instance HasPort (ElasticacheClusterResource s) Text where
    type HasPortThread (ElasticacheClusterResource s) Text = s

    port =
        lens (_port :: ElasticacheClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _port = a } :: ElasticacheClusterResource s)

instance HasSecurityGroupIds (ElasticacheClusterResource s) Text where
    type HasSecurityGroupIdsThread (ElasticacheClusterResource s) Text = s

    securityGroupIds =
        lens (_security_group_ids :: ElasticacheClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _security_group_ids = a } :: ElasticacheClusterResource s)

instance HasSecurityGroupNames (ElasticacheClusterResource s) Text where
    type HasSecurityGroupNamesThread (ElasticacheClusterResource s) Text = s

    securityGroupNames =
        lens (_security_group_names :: ElasticacheClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _security_group_names = a } :: ElasticacheClusterResource s)

instance HasSnapshotArns (ElasticacheClusterResource s) Text where
    type HasSnapshotArnsThread (ElasticacheClusterResource s) Text = s

    snapshotArns =
        lens (_snapshot_arns :: ElasticacheClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _snapshot_arns = a } :: ElasticacheClusterResource s)

instance HasSnapshotName (ElasticacheClusterResource s) Text where
    type HasSnapshotNameThread (ElasticacheClusterResource s) Text = s

    snapshotName =
        lens (_snapshot_name :: ElasticacheClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _snapshot_name = a } :: ElasticacheClusterResource s)

instance HasSnapshotRetentionLimit (ElasticacheClusterResource s) Text where
    type HasSnapshotRetentionLimitThread (ElasticacheClusterResource s) Text = s

    snapshotRetentionLimit =
        lens (_snapshot_retention_limit :: ElasticacheClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _snapshot_retention_limit = a } :: ElasticacheClusterResource s)

instance HasSnapshotWindow (ElasticacheClusterResource s) Text where
    type HasSnapshotWindowThread (ElasticacheClusterResource s) Text = s

    snapshotWindow =
        lens (_snapshot_window :: ElasticacheClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _snapshot_window = a } :: ElasticacheClusterResource s)

instance HasSubnetGroupName (ElasticacheClusterResource s) Text where
    type HasSubnetGroupNameThread (ElasticacheClusterResource s) Text = s

    subnetGroupName =
        lens (_subnet_group_name :: ElasticacheClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _subnet_group_name = a } :: ElasticacheClusterResource s)

instance HasTags (ElasticacheClusterResource s) TF.Tags where
    type HasTagsThread (ElasticacheClusterResource s) TF.Tags = s

    tags =
        lens (_tags :: ElasticacheClusterResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: ElasticacheClusterResource s)

instance HasComputedCacheNodes (ElasticacheClusterResource s) Text

instance HasComputedClusterAddress (ElasticacheClusterResource s) Text

instance HasComputedConfigurationEndpoint (ElasticacheClusterResource s) Text

elasticacheClusterResource :: TF.Resource TF.AWS (ElasticacheClusterResource s)
elasticacheClusterResource =
    TF.newResource "aws_elasticache_cluster" $
        ElasticacheClusterResource {
              _apply_immediately = TF.Nil
            , _availability_zone = TF.Nil
            , _availability_zones = TF.Nil
            , _az_mode = TF.Nil
            , _cluster_id = TF.Nil
            , _engine = TF.Nil
            , _engine_version = TF.Nil
            , _maintenance_window = TF.Nil
            , _node_type = TF.Nil
            , _notification_topic_arn = TF.Nil
            , _num_cache_nodes = TF.Nil
            , _parameter_group_name = TF.Nil
            , _port = TF.Nil
            , _security_group_ids = TF.Nil
            , _security_group_names = TF.Nil
            , _snapshot_arns = TF.Nil
            , _snapshot_name = TF.Nil
            , _snapshot_retention_limit = TF.Nil
            , _snapshot_window = TF.Nil
            , _subnet_group_name = TF.Nil
            , _tags = TF.Nil
            }

{- | The @aws_elasticache_parameter_group@ AWS resource.

Provides an ElastiCache parameter group resource.
-}
data ElasticacheParameterGroupResource s = ElasticacheParameterGroupResource {
      _description :: !(TF.Attribute s Text)
    {- ^ (Optional) The description of the ElastiCache parameter group. Defaults to "Managed by Terraform". -}
    , _family' :: !(TF.Attribute s Text)
    {- ^ (Required) The family of the ElastiCache parameter group. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the ElastiCache parameter group. -}
    , _parameter :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of ElastiCache parameters to apply. -}
    } deriving (Show, Eq)

instance TF.ToHCL (ElasticacheParameterGroupResource s) where
    toHCL ElasticacheParameterGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.attribute _description
        , TF.assign "family" <$> TF.attribute _family'
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "parameter" <$> TF.attribute _parameter
        ]

instance HasDescription (ElasticacheParameterGroupResource s) Text where
    type HasDescriptionThread (ElasticacheParameterGroupResource s) Text = s

    description =
        lens (_description :: ElasticacheParameterGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: ElasticacheParameterGroupResource s)

instance HasFamily' (ElasticacheParameterGroupResource s) Text where
    type HasFamily'Thread (ElasticacheParameterGroupResource s) Text = s

    family' =
        lens (_family' :: ElasticacheParameterGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _family' = a } :: ElasticacheParameterGroupResource s)

instance HasName (ElasticacheParameterGroupResource s) Text where
    type HasNameThread (ElasticacheParameterGroupResource s) Text = s

    name =
        lens (_name :: ElasticacheParameterGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: ElasticacheParameterGroupResource s)

instance HasParameter (ElasticacheParameterGroupResource s) Text where
    type HasParameterThread (ElasticacheParameterGroupResource s) Text = s

    parameter =
        lens (_parameter :: ElasticacheParameterGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _parameter = a } :: ElasticacheParameterGroupResource s)

instance HasComputedId (ElasticacheParameterGroupResource s) Text

elasticacheParameterGroupResource :: TF.Resource TF.AWS (ElasticacheParameterGroupResource s)
elasticacheParameterGroupResource =
    TF.newResource "aws_elasticache_parameter_group" $
        ElasticacheParameterGroupResource {
              _description = TF.Nil
            , _family' = TF.Nil
            , _name = TF.Nil
            , _parameter = TF.Nil
            }

{- | The @aws_elasticache_replication_group@ AWS resource.

Provides an ElastiCache Replication Group resource.
-}
data ElasticacheReplicationGroupResource s = ElasticacheReplicationGroupResource {
      _apply_immediately :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies whether any modifications are applied immediately, or during the next maintenance window. Default is @false@ . -}
    , _at_rest_encryption_enabled :: !(TF.Attribute s TF.Bool)
    {- ^ (Optional) Whether to enable encryption at rest. -}
    , _auth_token :: !(TF.Attribute s Text)
    {- ^ (Optional) The password used to access a password protected server. Can be specified only if @transit_encryption_enabled = true@ . -}
    , _auto_minor_version_upgrade :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies whether a minor engine upgrades will be applied automatically to the underlying Cache Cluster instances during the maintenance window. Defaults to @true@ . -}
    , _automatic_failover_enabled :: !(TF.Attribute s TF.Bool)
    {- ^ (Optional) Specifies whether a read-only replica will be automatically promoted to read/write primary if the existing primary fails. Defaults to @false@ . -}
    , _availability_zones :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of EC2 availability zones in which the replication group's cache clusters will be created. The order of the availability zones in the list is not important. -}
    , _cluster_mode :: !(TF.Attribute s Text)
    {- ^ (Optional) Create a native redis cluster. @automatic_failover_enabled@ must be set to true. Cluster Mode documented below. Only 1 @cluster_mode@ block is allowed. -}
    , _engine :: !(TF.Attribute s Text)
    {- ^ (Optional) The name of the cache engine to be used for the clusters in this replication group. e.g. @redis@ -}
    , _engine_version :: !(TF.Attribute s Text)
    {- ^ (Optional) The version number of the cache engine to be used for the cache clusters in this replication group. -}
    , _maintenance_window :: !(TF.Attribute s Text)
    {- ^ – (Optional) Specifies the weekly time range for when maintenance on the cache cluster is performed. The format is @ddd:hh24:mi-ddd:hh24:mi@ (24H Clock UTC). The minimum maintenance window is a 60 minute period. Example: @sun:05:00-sun:09:00@ -}
    , _node_type :: !(TF.Attribute s Text)
    {- ^ (Required) The compute and memory capacity of the nodes in the node group. -}
    , _notification_topic_arn :: !(TF.Attribute s Text)
    {- ^ – (Optional) An Amazon Resource Name (ARN) of an SNS topic to send ElastiCache notifications to. Example: @arn:aws:sns:us-east-1:012345678999:my_sns_topic@ -}
    , _number_cache_clusters :: !(TF.Attribute s Text)
    {- ^ (Required) The number of cache clusters this replication group will have. If Multi-AZ is enabled , the value of this parameter must be at least 2. Changing this number will force a new resource -}
    , _parameter_group_name :: !(TF.Attribute s Text)
    {- ^ (Optional) The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used. -}
    , _port :: !(TF.Attribute s Text)
    {- ^ – (Required) The port number on which each of the cache nodes will accept connections. For Memcache the default is 11211, and for Redis the default port is 6379. -}
    , _replication_group_description :: !(TF.Attribute s Text)
    {- ^ – (Required) A user-created description for the replication group. -}
    , _replication_group_id :: !(TF.Attribute s Text)
    {- ^ – (Required) The replication group identifier. This parameter is stored as a lowercase string. -}
    , _security_group_ids :: !(TF.Attribute s Text)
    {- ^ (Optional) One or more Amazon VPC security groups associated with this replication group. Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud -}
    , _security_group_names :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of cache security group names to associate with this replication group. -}
    , _snapshot_arns :: !(TF.Attribute s Text)
    {- ^ – (Optional) A single-element string list containing an Amazon Resource Name (ARN) of a Redis RDB snapshot file stored in Amazon S3. Example: @arn:aws:s3:::my_bucket/snapshot1.rdb@ -}
    , _snapshot_name :: !(TF.Attribute s Text)
    {- ^ (Optional) The name of a snapshot from which to restore data into the new node group. Changing the @snapshot_name@ forces a new resource. -}
    , _snapshot_retention_limit :: !(TF.Attribute s Text)
    {- ^ (Optional, Redis only) The number of days for which ElastiCache will retain automatic cache cluster snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, then a snapshot that was taken today will be retained for 5 days before being deleted. If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off. Please note that setting a @snapshot_retention_limit@ is not supported on cache.t1.micro or cache.t2.* cache nodes -}
    , _snapshot_window :: !(TF.Attribute s Text)
    {- ^ (Optional, Redis only) The daily time range (in UTC) during which ElastiCache will begin taking a daily snapshot of your cache cluster. The minimum snapshot window is a 60 minute period. Example: @05:00-09:00@ -}
    , _subnet_group_name :: !(TF.Attribute s Text)
    {- ^ (Optional) The name of the cache subnet group to be used for the replication group. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource -}
    , _transit_encryption_enabled :: !(TF.Attribute s TF.Bool)
    {- ^ (Optional) Whether to enable encryption in transit. -}
    } deriving (Show, Eq)

instance TF.ToHCL (ElasticacheReplicationGroupResource s) where
    toHCL ElasticacheReplicationGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "apply_immediately" <$> TF.attribute _apply_immediately
        , TF.assign "at_rest_encryption_enabled" <$> TF.attribute _at_rest_encryption_enabled
        , TF.assign "auth_token" <$> TF.attribute _auth_token
        , TF.assign "auto_minor_version_upgrade" <$> TF.attribute _auto_minor_version_upgrade
        , TF.assign "automatic_failover_enabled" <$> TF.attribute _automatic_failover_enabled
        , TF.assign "availability_zones" <$> TF.attribute _availability_zones
        , TF.assign "cluster_mode" <$> TF.attribute _cluster_mode
        , TF.assign "engine" <$> TF.attribute _engine
        , TF.assign "engine_version" <$> TF.attribute _engine_version
        , TF.assign "maintenance_window" <$> TF.attribute _maintenance_window
        , TF.assign "node_type" <$> TF.attribute _node_type
        , TF.assign "notification_topic_arn" <$> TF.attribute _notification_topic_arn
        , TF.assign "number_cache_clusters" <$> TF.attribute _number_cache_clusters
        , TF.assign "parameter_group_name" <$> TF.attribute _parameter_group_name
        , TF.assign "port" <$> TF.attribute _port
        , TF.assign "replication_group_description" <$> TF.attribute _replication_group_description
        , TF.assign "replication_group_id" <$> TF.attribute _replication_group_id
        , TF.assign "security_group_ids" <$> TF.attribute _security_group_ids
        , TF.assign "security_group_names" <$> TF.attribute _security_group_names
        , TF.assign "snapshot_arns" <$> TF.attribute _snapshot_arns
        , TF.assign "snapshot_name" <$> TF.attribute _snapshot_name
        , TF.assign "snapshot_retention_limit" <$> TF.attribute _snapshot_retention_limit
        , TF.assign "snapshot_window" <$> TF.attribute _snapshot_window
        , TF.assign "subnet_group_name" <$> TF.attribute _subnet_group_name
        , TF.assign "tags" <$> TF.attribute _tags
        , TF.assign "transit_encryption_enabled" <$> TF.attribute _transit_encryption_enabled
        ]

instance HasApplyImmediately (ElasticacheReplicationGroupResource s) Text where
    type HasApplyImmediatelyThread (ElasticacheReplicationGroupResource s) Text = s

    applyImmediately =
        lens (_apply_immediately :: ElasticacheReplicationGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _apply_immediately = a } :: ElasticacheReplicationGroupResource s)

instance HasAtRestEncryptionEnabled (ElasticacheReplicationGroupResource s) TF.Bool where
    type HasAtRestEncryptionEnabledThread (ElasticacheReplicationGroupResource s) TF.Bool = s

    atRestEncryptionEnabled =
        lens (_at_rest_encryption_enabled :: ElasticacheReplicationGroupResource s -> TF.Attribute s TF.Bool)
            (\s a -> s { _at_rest_encryption_enabled = a } :: ElasticacheReplicationGroupResource s)

instance HasAuthToken (ElasticacheReplicationGroupResource s) Text where
    type HasAuthTokenThread (ElasticacheReplicationGroupResource s) Text = s

    authToken =
        lens (_auth_token :: ElasticacheReplicationGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _auth_token = a } :: ElasticacheReplicationGroupResource s)

instance HasAutoMinorVersionUpgrade (ElasticacheReplicationGroupResource s) Text where
    type HasAutoMinorVersionUpgradeThread (ElasticacheReplicationGroupResource s) Text = s

    autoMinorVersionUpgrade =
        lens (_auto_minor_version_upgrade :: ElasticacheReplicationGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_minor_version_upgrade = a } :: ElasticacheReplicationGroupResource s)

instance HasAutomaticFailoverEnabled (ElasticacheReplicationGroupResource s) TF.Bool where
    type HasAutomaticFailoverEnabledThread (ElasticacheReplicationGroupResource s) TF.Bool = s

    automaticFailoverEnabled =
        lens (_automatic_failover_enabled :: ElasticacheReplicationGroupResource s -> TF.Attribute s TF.Bool)
            (\s a -> s { _automatic_failover_enabled = a } :: ElasticacheReplicationGroupResource s)

instance HasAvailabilityZones (ElasticacheReplicationGroupResource s) Text where
    type HasAvailabilityZonesThread (ElasticacheReplicationGroupResource s) Text = s

    availabilityZones =
        lens (_availability_zones :: ElasticacheReplicationGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _availability_zones = a } :: ElasticacheReplicationGroupResource s)

instance HasClusterMode (ElasticacheReplicationGroupResource s) Text where
    type HasClusterModeThread (ElasticacheReplicationGroupResource s) Text = s

    clusterMode =
        lens (_cluster_mode :: ElasticacheReplicationGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _cluster_mode = a } :: ElasticacheReplicationGroupResource s)

instance HasEngine (ElasticacheReplicationGroupResource s) Text where
    type HasEngineThread (ElasticacheReplicationGroupResource s) Text = s

    engine =
        lens (_engine :: ElasticacheReplicationGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _engine = a } :: ElasticacheReplicationGroupResource s)

instance HasEngineVersion (ElasticacheReplicationGroupResource s) Text where
    type HasEngineVersionThread (ElasticacheReplicationGroupResource s) Text = s

    engineVersion =
        lens (_engine_version :: ElasticacheReplicationGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _engine_version = a } :: ElasticacheReplicationGroupResource s)

instance HasMaintenanceWindow (ElasticacheReplicationGroupResource s) Text where
    type HasMaintenanceWindowThread (ElasticacheReplicationGroupResource s) Text = s

    maintenanceWindow =
        lens (_maintenance_window :: ElasticacheReplicationGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _maintenance_window = a } :: ElasticacheReplicationGroupResource s)

instance HasNodeType (ElasticacheReplicationGroupResource s) Text where
    type HasNodeTypeThread (ElasticacheReplicationGroupResource s) Text = s

    nodeType =
        lens (_node_type :: ElasticacheReplicationGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _node_type = a } :: ElasticacheReplicationGroupResource s)

instance HasNotificationTopicArn (ElasticacheReplicationGroupResource s) Text where
    type HasNotificationTopicArnThread (ElasticacheReplicationGroupResource s) Text = s

    notificationTopicArn =
        lens (_notification_topic_arn :: ElasticacheReplicationGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _notification_topic_arn = a } :: ElasticacheReplicationGroupResource s)

instance HasNumberCacheClusters (ElasticacheReplicationGroupResource s) Text where
    type HasNumberCacheClustersThread (ElasticacheReplicationGroupResource s) Text = s

    numberCacheClusters =
        lens (_number_cache_clusters :: ElasticacheReplicationGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _number_cache_clusters = a } :: ElasticacheReplicationGroupResource s)

instance HasParameterGroupName (ElasticacheReplicationGroupResource s) Text where
    type HasParameterGroupNameThread (ElasticacheReplicationGroupResource s) Text = s

    parameterGroupName =
        lens (_parameter_group_name :: ElasticacheReplicationGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _parameter_group_name = a } :: ElasticacheReplicationGroupResource s)

instance HasPort (ElasticacheReplicationGroupResource s) Text where
    type HasPortThread (ElasticacheReplicationGroupResource s) Text = s

    port =
        lens (_port :: ElasticacheReplicationGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _port = a } :: ElasticacheReplicationGroupResource s)

instance HasReplicationGroupDescription (ElasticacheReplicationGroupResource s) Text where
    type HasReplicationGroupDescriptionThread (ElasticacheReplicationGroupResource s) Text = s

    replicationGroupDescription =
        lens (_replication_group_description :: ElasticacheReplicationGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _replication_group_description = a } :: ElasticacheReplicationGroupResource s)

instance HasReplicationGroupId (ElasticacheReplicationGroupResource s) Text where
    type HasReplicationGroupIdThread (ElasticacheReplicationGroupResource s) Text = s

    replicationGroupId =
        lens (_replication_group_id :: ElasticacheReplicationGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _replication_group_id = a } :: ElasticacheReplicationGroupResource s)

instance HasSecurityGroupIds (ElasticacheReplicationGroupResource s) Text where
    type HasSecurityGroupIdsThread (ElasticacheReplicationGroupResource s) Text = s

    securityGroupIds =
        lens (_security_group_ids :: ElasticacheReplicationGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _security_group_ids = a } :: ElasticacheReplicationGroupResource s)

instance HasSecurityGroupNames (ElasticacheReplicationGroupResource s) Text where
    type HasSecurityGroupNamesThread (ElasticacheReplicationGroupResource s) Text = s

    securityGroupNames =
        lens (_security_group_names :: ElasticacheReplicationGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _security_group_names = a } :: ElasticacheReplicationGroupResource s)

instance HasSnapshotArns (ElasticacheReplicationGroupResource s) Text where
    type HasSnapshotArnsThread (ElasticacheReplicationGroupResource s) Text = s

    snapshotArns =
        lens (_snapshot_arns :: ElasticacheReplicationGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _snapshot_arns = a } :: ElasticacheReplicationGroupResource s)

instance HasSnapshotName (ElasticacheReplicationGroupResource s) Text where
    type HasSnapshotNameThread (ElasticacheReplicationGroupResource s) Text = s

    snapshotName =
        lens (_snapshot_name :: ElasticacheReplicationGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _snapshot_name = a } :: ElasticacheReplicationGroupResource s)

instance HasSnapshotRetentionLimit (ElasticacheReplicationGroupResource s) Text where
    type HasSnapshotRetentionLimitThread (ElasticacheReplicationGroupResource s) Text = s

    snapshotRetentionLimit =
        lens (_snapshot_retention_limit :: ElasticacheReplicationGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _snapshot_retention_limit = a } :: ElasticacheReplicationGroupResource s)

instance HasSnapshotWindow (ElasticacheReplicationGroupResource s) Text where
    type HasSnapshotWindowThread (ElasticacheReplicationGroupResource s) Text = s

    snapshotWindow =
        lens (_snapshot_window :: ElasticacheReplicationGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _snapshot_window = a } :: ElasticacheReplicationGroupResource s)

instance HasSubnetGroupName (ElasticacheReplicationGroupResource s) Text where
    type HasSubnetGroupNameThread (ElasticacheReplicationGroupResource s) Text = s

    subnetGroupName =
        lens (_subnet_group_name :: ElasticacheReplicationGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _subnet_group_name = a } :: ElasticacheReplicationGroupResource s)

instance HasTags (ElasticacheReplicationGroupResource s) TF.Tags where
    type HasTagsThread (ElasticacheReplicationGroupResource s) TF.Tags = s

    tags =
        lens (_tags :: ElasticacheReplicationGroupResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: ElasticacheReplicationGroupResource s)

instance HasTransitEncryptionEnabled (ElasticacheReplicationGroupResource s) TF.Bool where
    type HasTransitEncryptionEnabledThread (ElasticacheReplicationGroupResource s) TF.Bool = s

    transitEncryptionEnabled =
        lens (_transit_encryption_enabled :: ElasticacheReplicationGroupResource s -> TF.Attribute s TF.Bool)
            (\s a -> s { _transit_encryption_enabled = a } :: ElasticacheReplicationGroupResource s)

instance HasComputedConfigurationEndpointAddress (ElasticacheReplicationGroupResource s) Text

instance HasComputedId (ElasticacheReplicationGroupResource s) Text

instance HasComputedPrimaryEndpointAddress (ElasticacheReplicationGroupResource s) Text

elasticacheReplicationGroupResource :: TF.Resource TF.AWS (ElasticacheReplicationGroupResource s)
elasticacheReplicationGroupResource =
    TF.newResource "aws_elasticache_replication_group" $
        ElasticacheReplicationGroupResource {
              _apply_immediately = TF.Nil
            , _at_rest_encryption_enabled = TF.Nil
            , _auth_token = TF.Nil
            , _auto_minor_version_upgrade = TF.Nil
            , _automatic_failover_enabled = TF.Nil
            , _availability_zones = TF.Nil
            , _cluster_mode = TF.Nil
            , _engine = TF.Nil
            , _engine_version = TF.Nil
            , _maintenance_window = TF.Nil
            , _node_type = TF.Nil
            , _notification_topic_arn = TF.Nil
            , _number_cache_clusters = TF.Nil
            , _parameter_group_name = TF.Nil
            , _port = TF.Nil
            , _replication_group_description = TF.Nil
            , _replication_group_id = TF.Nil
            , _security_group_ids = TF.Nil
            , _security_group_names = TF.Nil
            , _snapshot_arns = TF.Nil
            , _snapshot_name = TF.Nil
            , _snapshot_retention_limit = TF.Nil
            , _snapshot_window = TF.Nil
            , _subnet_group_name = TF.Nil
            , _tags = TF.Nil
            , _transit_encryption_enabled = TF.Nil
            }

{- | The @aws_elasticache_security_group@ AWS resource.

Provides an ElastiCache Security Group to control access to one or more
cache clusters. ~> NOTE: ElastiCache Security Groups are for use only when
working with an ElastiCache cluster outside of a VPC. If you are using a
VPC, see the <elasticache_subnet_group.html> .
-}
data ElasticacheSecurityGroupResource s = ElasticacheSecurityGroupResource {
      _description :: !(TF.Attribute s Text)
    {- ^ – (Optional) description for the cache security group. Defaults to "Managed by Terraform". -}
    , _name :: !(TF.Attribute s Text)
    {- ^ – (Required) Name for the cache security group. This value is stored as a lowercase string. -}
    , _security_group_names :: !(TF.Attribute s Text)
    {- ^ – (Required) List of EC2 security group names to be authorized for ingress to the cache security group -}
    } deriving (Show, Eq)

instance TF.ToHCL (ElasticacheSecurityGroupResource s) where
    toHCL ElasticacheSecurityGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.attribute _description
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "security_group_names" <$> TF.attribute _security_group_names
        ]

instance HasDescription (ElasticacheSecurityGroupResource s) Text where
    type HasDescriptionThread (ElasticacheSecurityGroupResource s) Text = s

    description =
        lens (_description :: ElasticacheSecurityGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: ElasticacheSecurityGroupResource s)

instance HasName (ElasticacheSecurityGroupResource s) Text where
    type HasNameThread (ElasticacheSecurityGroupResource s) Text = s

    name =
        lens (_name :: ElasticacheSecurityGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: ElasticacheSecurityGroupResource s)

instance HasSecurityGroupNames (ElasticacheSecurityGroupResource s) Text where
    type HasSecurityGroupNamesThread (ElasticacheSecurityGroupResource s) Text = s

    securityGroupNames =
        lens (_security_group_names :: ElasticacheSecurityGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _security_group_names = a } :: ElasticacheSecurityGroupResource s)

elasticacheSecurityGroupResource :: TF.Resource TF.AWS (ElasticacheSecurityGroupResource s)
elasticacheSecurityGroupResource =
    TF.newResource "aws_elasticache_security_group" $
        ElasticacheSecurityGroupResource {
              _description = TF.Nil
            , _name = TF.Nil
            , _security_group_names = TF.Nil
            }

{- | The @aws_elasticache_subnet_group@ AWS resource.

Provides an ElastiCache Subnet Group resource. ~> NOTE: ElastiCache Subnet
Groups are only for use when working with an ElastiCache cluster inside of a
VPC. If you are on EC2 Classic, see the <elasticache_security_group.html> .
-}
data ElasticacheSubnetGroupResource s = ElasticacheSubnetGroupResource {
      _description :: !(TF.Attribute s Text)
    {- ^ – (Optional) Description for the cache subnet group. Defaults to "Managed by Terraform". -}
    , _name :: !(TF.Attribute s Text)
    {- ^ – (Required) Name for the cache subnet group. Elasticache converts this name to lowercase. -}
    , _subnet_ids :: !(TF.Attribute s Text)
    {- ^ – (Required) List of VPC Subnet IDs for the cache subnet group -}
    } deriving (Show, Eq)

instance TF.ToHCL (ElasticacheSubnetGroupResource s) where
    toHCL ElasticacheSubnetGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.attribute _description
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "subnet_ids" <$> TF.attribute _subnet_ids
        ]

instance HasDescription (ElasticacheSubnetGroupResource s) Text where
    type HasDescriptionThread (ElasticacheSubnetGroupResource s) Text = s

    description =
        lens (_description :: ElasticacheSubnetGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: ElasticacheSubnetGroupResource s)

instance HasName (ElasticacheSubnetGroupResource s) Text where
    type HasNameThread (ElasticacheSubnetGroupResource s) Text = s

    name =
        lens (_name :: ElasticacheSubnetGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: ElasticacheSubnetGroupResource s)

instance HasSubnetIds (ElasticacheSubnetGroupResource s) Text where
    type HasSubnetIdsThread (ElasticacheSubnetGroupResource s) Text = s

    subnetIds =
        lens (_subnet_ids :: ElasticacheSubnetGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _subnet_ids = a } :: ElasticacheSubnetGroupResource s)

elasticacheSubnetGroupResource :: TF.Resource TF.AWS (ElasticacheSubnetGroupResource s)
elasticacheSubnetGroupResource =
    TF.newResource "aws_elasticache_subnet_group" $
        ElasticacheSubnetGroupResource {
              _description = TF.Nil
            , _name = TF.Nil
            , _subnet_ids = TF.Nil
            }

{- | The @aws_elasticsearch_domain_policy@ AWS resource.

Allows setting policy to an ElasticSearch domain while referencing domain
attributes (e.g. ARN)
-}
data ElasticsearchDomainPolicyResource s = ElasticsearchDomainPolicyResource {
      _access_policies :: !(TF.Attribute s Text)
    {- ^ (Optional) IAM policy document specifying the access policies for the domain -}
    , _domain_name :: !(TF.Attribute s Text)
    {- ^ (Required) Name of the domain. -}
    } deriving (Show, Eq)

instance TF.ToHCL (ElasticsearchDomainPolicyResource s) where
    toHCL ElasticsearchDomainPolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "access_policies" <$> TF.attribute _access_policies
        , TF.assign "domain_name" <$> TF.attribute _domain_name
        ]

instance HasAccessPolicies (ElasticsearchDomainPolicyResource s) Text where
    type HasAccessPoliciesThread (ElasticsearchDomainPolicyResource s) Text = s

    accessPolicies =
        lens (_access_policies :: ElasticsearchDomainPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _access_policies = a } :: ElasticsearchDomainPolicyResource s)

instance HasDomainName (ElasticsearchDomainPolicyResource s) Text where
    type HasDomainNameThread (ElasticsearchDomainPolicyResource s) Text = s

    domainName =
        lens (_domain_name :: ElasticsearchDomainPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _domain_name = a } :: ElasticsearchDomainPolicyResource s)

elasticsearchDomainPolicyResource :: TF.Resource TF.AWS (ElasticsearchDomainPolicyResource s)
elasticsearchDomainPolicyResource =
    TF.newResource "aws_elasticsearch_domain_policy" $
        ElasticsearchDomainPolicyResource {
              _access_policies = TF.Nil
            , _domain_name = TF.Nil
            }

{- | The @aws_elasticsearch_domain@ AWS resource.


-}
data ElasticsearchDomainResource s = ElasticsearchDomainResource {
      _access_policies :: !(TF.Attribute s Text)
    {- ^ (Optional) IAM policy document specifying the access policies for the domain -}
    , _advanced_options :: !(TF.Attribute s Text)
    {- ^ (Optional) Key-value string pairs to specify advanced configuration options. -}
    , _cluster_config :: !(TF.Attribute s Text)
    {- ^ (Optional) Cluster configuration of the domain, see below. -}
    , _domain_name :: !(TF.Attribute s Text)
    {- ^ (Required) Name of the domain. -}
    , _ebs_options :: !(TF.Attribute s Text)
    {- ^ (Optional) EBS related options, may be required based on chosen <https://aws.amazon.com/elasticsearch-service/pricing/> . See below. -}
    , _elasticsearch_version :: !(TF.Attribute s Text)
    {- ^ (Optional) The version of ElasticSearch to deploy. Defaults to @1.5@ -}
    , _encrypt_at_rest :: !(TF.Attribute s Text)
    {- ^ (Optional) Encrypt at rest options. Only available for <http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/aes-supported-instance-types.html> . See below. -}
    , _log_publishing_options :: !(TF.Attribute s Text)
    {- ^ (Optional) Options for publishing slow logs to CloudWatch Logs. -}
    , _snapshot_options :: !(TF.Attribute s Text)
    {- ^ (Optional) Snapshot related options, see below. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource -}
    , _vpc_options :: !(TF.Attribute s Text)
    {- ^ (Optional) VPC related options, see below. Adding or removing this configuration forces a new resource ( <https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html#es-vpc-limitations> ). -}
    } deriving (Show, Eq)

instance TF.ToHCL (ElasticsearchDomainResource s) where
    toHCL ElasticsearchDomainResource{..} = TF.block $ catMaybes
        [ TF.assign "access_policies" <$> TF.attribute _access_policies
        , TF.assign "advanced_options" <$> TF.attribute _advanced_options
        , TF.assign "cluster_config" <$> TF.attribute _cluster_config
        , TF.assign "domain_name" <$> TF.attribute _domain_name
        , TF.assign "ebs_options" <$> TF.attribute _ebs_options
        , TF.assign "elasticsearch_version" <$> TF.attribute _elasticsearch_version
        , TF.assign "encrypt_at_rest" <$> TF.attribute _encrypt_at_rest
        , TF.assign "log_publishing_options" <$> TF.attribute _log_publishing_options
        , TF.assign "snapshot_options" <$> TF.attribute _snapshot_options
        , TF.assign "tags" <$> TF.attribute _tags
        , TF.assign "vpc_options" <$> TF.attribute _vpc_options
        ]

instance HasAccessPolicies (ElasticsearchDomainResource s) Text where
    type HasAccessPoliciesThread (ElasticsearchDomainResource s) Text = s

    accessPolicies =
        lens (_access_policies :: ElasticsearchDomainResource s -> TF.Attribute s Text)
            (\s a -> s { _access_policies = a } :: ElasticsearchDomainResource s)

instance HasAdvancedOptions (ElasticsearchDomainResource s) Text where
    type HasAdvancedOptionsThread (ElasticsearchDomainResource s) Text = s

    advancedOptions =
        lens (_advanced_options :: ElasticsearchDomainResource s -> TF.Attribute s Text)
            (\s a -> s { _advanced_options = a } :: ElasticsearchDomainResource s)

instance HasClusterConfig (ElasticsearchDomainResource s) Text where
    type HasClusterConfigThread (ElasticsearchDomainResource s) Text = s

    clusterConfig =
        lens (_cluster_config :: ElasticsearchDomainResource s -> TF.Attribute s Text)
            (\s a -> s { _cluster_config = a } :: ElasticsearchDomainResource s)

instance HasDomainName (ElasticsearchDomainResource s) Text where
    type HasDomainNameThread (ElasticsearchDomainResource s) Text = s

    domainName =
        lens (_domain_name :: ElasticsearchDomainResource s -> TF.Attribute s Text)
            (\s a -> s { _domain_name = a } :: ElasticsearchDomainResource s)

instance HasEbsOptions (ElasticsearchDomainResource s) Text where
    type HasEbsOptionsThread (ElasticsearchDomainResource s) Text = s

    ebsOptions =
        lens (_ebs_options :: ElasticsearchDomainResource s -> TF.Attribute s Text)
            (\s a -> s { _ebs_options = a } :: ElasticsearchDomainResource s)

instance HasElasticsearchVersion (ElasticsearchDomainResource s) Text where
    type HasElasticsearchVersionThread (ElasticsearchDomainResource s) Text = s

    elasticsearchVersion =
        lens (_elasticsearch_version :: ElasticsearchDomainResource s -> TF.Attribute s Text)
            (\s a -> s { _elasticsearch_version = a } :: ElasticsearchDomainResource s)

instance HasEncryptAtRest (ElasticsearchDomainResource s) Text where
    type HasEncryptAtRestThread (ElasticsearchDomainResource s) Text = s

    encryptAtRest =
        lens (_encrypt_at_rest :: ElasticsearchDomainResource s -> TF.Attribute s Text)
            (\s a -> s { _encrypt_at_rest = a } :: ElasticsearchDomainResource s)

instance HasLogPublishingOptions (ElasticsearchDomainResource s) Text where
    type HasLogPublishingOptionsThread (ElasticsearchDomainResource s) Text = s

    logPublishingOptions =
        lens (_log_publishing_options :: ElasticsearchDomainResource s -> TF.Attribute s Text)
            (\s a -> s { _log_publishing_options = a } :: ElasticsearchDomainResource s)

instance HasSnapshotOptions (ElasticsearchDomainResource s) Text where
    type HasSnapshotOptionsThread (ElasticsearchDomainResource s) Text = s

    snapshotOptions =
        lens (_snapshot_options :: ElasticsearchDomainResource s -> TF.Attribute s Text)
            (\s a -> s { _snapshot_options = a } :: ElasticsearchDomainResource s)

instance HasTags (ElasticsearchDomainResource s) TF.Tags where
    type HasTagsThread (ElasticsearchDomainResource s) TF.Tags = s

    tags =
        lens (_tags :: ElasticsearchDomainResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: ElasticsearchDomainResource s)

instance HasVpcOptions (ElasticsearchDomainResource s) Text where
    type HasVpcOptionsThread (ElasticsearchDomainResource s) Text = s

    vpcOptions =
        lens (_vpc_options :: ElasticsearchDomainResource s -> TF.Attribute s Text)
            (\s a -> s { _vpc_options = a } :: ElasticsearchDomainResource s)

instance HasComputedArn (ElasticsearchDomainResource s) Text

instance HasComputedDomainId (ElasticsearchDomainResource s) Text

instance HasComputedEndpoint (ElasticsearchDomainResource s) Text

instance HasComputedKibanaEndpoint (ElasticsearchDomainResource s) Text

instance HasComputedVpcOptions0AvailabilityZones (ElasticsearchDomainResource s) Text

instance HasComputedVpcOptions0VpcId (ElasticsearchDomainResource s) Text

elasticsearchDomainResource :: TF.Resource TF.AWS (ElasticsearchDomainResource s)
elasticsearchDomainResource =
    TF.newResource "aws_elasticsearch_domain" $
        ElasticsearchDomainResource {
              _access_policies = TF.Nil
            , _advanced_options = TF.Nil
            , _cluster_config = TF.Nil
            , _domain_name = TF.Nil
            , _ebs_options = TF.Nil
            , _elasticsearch_version = TF.Nil
            , _encrypt_at_rest = TF.Nil
            , _log_publishing_options = TF.Nil
            , _snapshot_options = TF.Nil
            , _tags = TF.Nil
            , _vpc_options = TF.Nil
            }

{- | The @aws_elastictranscoder_pipeline@ AWS resource.

Provides an Elastic Transcoder pipeline resource.
-}
data ElastictranscoderPipelineResource s = ElastictranscoderPipelineResource {
      _aws_kms_key_arn :: !(TF.Attribute s Text)
    {- ^ (Optional) The AWS Key Management Service (AWS KMS) key that you want to use with this pipeline. -}
    , _content_config :: !(TF.Attribute s Text)
    {- ^ (Optional) The ContentConfig object specifies information about the Amazon S3 bucket in which you want Elastic Transcoder to save transcoded files and playlists. (documented below) -}
    , _content_config_permissions :: !(TF.Attribute s Text)
    {- ^ (Optional) The permissions for the @content_config@ object. (documented below) -}
    , _input_bucket :: !(TF.Attribute s Text)
    {- ^ (Required) The Amazon S3 bucket in which you saved the media files that you want to transcode and the graphics that you want to use as watermarks. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) The name of the pipeline. Maximum 40 characters -}
    , _notifications :: !(TF.Attribute s Text)
    {- ^ (Optional) The Amazon Simple Notification Service (Amazon SNS) topic that you want to notify to report job status. (documented below) -}
    , _output_bucket :: !(TF.Attribute s Text)
    {- ^ (Optional) The Amazon S3 bucket in which you want Elastic Transcoder to save the transcoded files. -}
    , _role :: !(TF.Attribute s Text)
    {- ^ (Required) The IAM Amazon Resource Name (ARN) for the role that you want Elastic Transcoder to use to transcode jobs for this pipeline. -}
    , _thumbnail_config :: !(TF.Attribute s Text)
    {- ^ (Optional) The ThumbnailConfig object specifies information about the Amazon S3 bucket in which you want Elastic Transcoder to save thumbnail files. (documented below) -}
    , _thumbnail_config_permissions :: !(TF.Attribute s Text)
    {- ^ (Optional) The permissions for the @thumbnail_config@ object. (documented below) -}
    } deriving (Show, Eq)

instance TF.ToHCL (ElastictranscoderPipelineResource s) where
    toHCL ElastictranscoderPipelineResource{..} = TF.block $ catMaybes
        [ TF.assign "aws_kms_key_arn" <$> TF.attribute _aws_kms_key_arn
        , TF.assign "content_config" <$> TF.attribute _content_config
        , TF.assign "content_config_permissions" <$> TF.attribute _content_config_permissions
        , TF.assign "input_bucket" <$> TF.attribute _input_bucket
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "notifications" <$> TF.attribute _notifications
        , TF.assign "output_bucket" <$> TF.attribute _output_bucket
        , TF.assign "role" <$> TF.attribute _role
        , TF.assign "thumbnail_config" <$> TF.attribute _thumbnail_config
        , TF.assign "thumbnail_config_permissions" <$> TF.attribute _thumbnail_config_permissions
        ]

instance HasAwsKmsKeyArn (ElastictranscoderPipelineResource s) Text where
    type HasAwsKmsKeyArnThread (ElastictranscoderPipelineResource s) Text = s

    awsKmsKeyArn =
        lens (_aws_kms_key_arn :: ElastictranscoderPipelineResource s -> TF.Attribute s Text)
            (\s a -> s { _aws_kms_key_arn = a } :: ElastictranscoderPipelineResource s)

instance HasContentConfig (ElastictranscoderPipelineResource s) Text where
    type HasContentConfigThread (ElastictranscoderPipelineResource s) Text = s

    contentConfig =
        lens (_content_config :: ElastictranscoderPipelineResource s -> TF.Attribute s Text)
            (\s a -> s { _content_config = a } :: ElastictranscoderPipelineResource s)

instance HasContentConfigPermissions (ElastictranscoderPipelineResource s) Text where
    type HasContentConfigPermissionsThread (ElastictranscoderPipelineResource s) Text = s

    contentConfigPermissions =
        lens (_content_config_permissions :: ElastictranscoderPipelineResource s -> TF.Attribute s Text)
            (\s a -> s { _content_config_permissions = a } :: ElastictranscoderPipelineResource s)

instance HasInputBucket (ElastictranscoderPipelineResource s) Text where
    type HasInputBucketThread (ElastictranscoderPipelineResource s) Text = s

    inputBucket =
        lens (_input_bucket :: ElastictranscoderPipelineResource s -> TF.Attribute s Text)
            (\s a -> s { _input_bucket = a } :: ElastictranscoderPipelineResource s)

instance HasName (ElastictranscoderPipelineResource s) Text where
    type HasNameThread (ElastictranscoderPipelineResource s) Text = s

    name =
        lens (_name :: ElastictranscoderPipelineResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: ElastictranscoderPipelineResource s)

instance HasNotifications (ElastictranscoderPipelineResource s) Text where
    type HasNotificationsThread (ElastictranscoderPipelineResource s) Text = s

    notifications =
        lens (_notifications :: ElastictranscoderPipelineResource s -> TF.Attribute s Text)
            (\s a -> s { _notifications = a } :: ElastictranscoderPipelineResource s)

instance HasOutputBucket (ElastictranscoderPipelineResource s) Text where
    type HasOutputBucketThread (ElastictranscoderPipelineResource s) Text = s

    outputBucket =
        lens (_output_bucket :: ElastictranscoderPipelineResource s -> TF.Attribute s Text)
            (\s a -> s { _output_bucket = a } :: ElastictranscoderPipelineResource s)

instance HasRole (ElastictranscoderPipelineResource s) Text where
    type HasRoleThread (ElastictranscoderPipelineResource s) Text = s

    role =
        lens (_role :: ElastictranscoderPipelineResource s -> TF.Attribute s Text)
            (\s a -> s { _role = a } :: ElastictranscoderPipelineResource s)

instance HasThumbnailConfig (ElastictranscoderPipelineResource s) Text where
    type HasThumbnailConfigThread (ElastictranscoderPipelineResource s) Text = s

    thumbnailConfig =
        lens (_thumbnail_config :: ElastictranscoderPipelineResource s -> TF.Attribute s Text)
            (\s a -> s { _thumbnail_config = a } :: ElastictranscoderPipelineResource s)

instance HasThumbnailConfigPermissions (ElastictranscoderPipelineResource s) Text where
    type HasThumbnailConfigPermissionsThread (ElastictranscoderPipelineResource s) Text = s

    thumbnailConfigPermissions =
        lens (_thumbnail_config_permissions :: ElastictranscoderPipelineResource s -> TF.Attribute s Text)
            (\s a -> s { _thumbnail_config_permissions = a } :: ElastictranscoderPipelineResource s)

elastictranscoderPipelineResource :: TF.Resource TF.AWS (ElastictranscoderPipelineResource s)
elastictranscoderPipelineResource =
    TF.newResource "aws_elastictranscoder_pipeline" $
        ElastictranscoderPipelineResource {
              _aws_kms_key_arn = TF.Nil
            , _content_config = TF.Nil
            , _content_config_permissions = TF.Nil
            , _input_bucket = TF.Nil
            , _name = TF.Nil
            , _notifications = TF.Nil
            , _output_bucket = TF.Nil
            , _role = TF.Nil
            , _thumbnail_config = TF.Nil
            , _thumbnail_config_permissions = TF.Nil
            }

{- | The @aws_elastictranscoder_preset@ AWS resource.

Provides an Elastic Transcoder preset resource.
-}
data ElastictranscoderPresetResource s = ElastictranscoderPresetResource {
      _audio :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) Audio parameters object (documented below). -}
    , _audio_codec_options :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) Codec options for the audio parameters (documented below) -}
    , _container :: !(TF.Attribute s Text)
    {- ^ (Required, Forces new resource) The container type for the output file. Valid values are @flac@ , @flv@ , @fmp4@ , @gif@ , @mp3@ , @mp4@ , @mpg@ , @mxf@ , @oga@ , @ogg@ , @ts@ , and @webm@ . -}
    , _description :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) A description of the preset (maximum 255 characters) -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) The name of the preset. (maximum 40 characters) -}
    , _thumbnails :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) Thumbnail parameters object (documented below) -}
    , _video :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) Video parameters object (documented below) -}
    , _video_codec_options :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) Codec options for the video parameters -}
    , _video_watermarks :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) Watermark parameters for the video parameters (documented below) -}
    } deriving (Show, Eq)

instance TF.ToHCL (ElastictranscoderPresetResource s) where
    toHCL ElastictranscoderPresetResource{..} = TF.block $ catMaybes
        [ TF.assign "audio" <$> TF.attribute _audio
        , TF.assign "audio_codec_options" <$> TF.attribute _audio_codec_options
        , TF.assign "container" <$> TF.attribute _container
        , TF.assign "description" <$> TF.attribute _description
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "thumbnails" <$> TF.attribute _thumbnails
        , TF.assign "video" <$> TF.attribute _video
        , TF.assign "video_codec_options" <$> TF.attribute _video_codec_options
        , TF.assign "video_watermarks" <$> TF.attribute _video_watermarks
        ]

instance HasAudio (ElastictranscoderPresetResource s) Text where
    type HasAudioThread (ElastictranscoderPresetResource s) Text = s

    audio =
        lens (_audio :: ElastictranscoderPresetResource s -> TF.Attribute s Text)
            (\s a -> s { _audio = a } :: ElastictranscoderPresetResource s)

instance HasAudioCodecOptions (ElastictranscoderPresetResource s) Text where
    type HasAudioCodecOptionsThread (ElastictranscoderPresetResource s) Text = s

    audioCodecOptions =
        lens (_audio_codec_options :: ElastictranscoderPresetResource s -> TF.Attribute s Text)
            (\s a -> s { _audio_codec_options = a } :: ElastictranscoderPresetResource s)

instance HasContainer (ElastictranscoderPresetResource s) Text where
    type HasContainerThread (ElastictranscoderPresetResource s) Text = s

    container =
        lens (_container :: ElastictranscoderPresetResource s -> TF.Attribute s Text)
            (\s a -> s { _container = a } :: ElastictranscoderPresetResource s)

instance HasDescription (ElastictranscoderPresetResource s) Text where
    type HasDescriptionThread (ElastictranscoderPresetResource s) Text = s

    description =
        lens (_description :: ElastictranscoderPresetResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: ElastictranscoderPresetResource s)

instance HasName (ElastictranscoderPresetResource s) Text where
    type HasNameThread (ElastictranscoderPresetResource s) Text = s

    name =
        lens (_name :: ElastictranscoderPresetResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: ElastictranscoderPresetResource s)

instance HasThumbnails (ElastictranscoderPresetResource s) Text where
    type HasThumbnailsThread (ElastictranscoderPresetResource s) Text = s

    thumbnails =
        lens (_thumbnails :: ElastictranscoderPresetResource s -> TF.Attribute s Text)
            (\s a -> s { _thumbnails = a } :: ElastictranscoderPresetResource s)

instance HasVideo (ElastictranscoderPresetResource s) Text where
    type HasVideoThread (ElastictranscoderPresetResource s) Text = s

    video =
        lens (_video :: ElastictranscoderPresetResource s -> TF.Attribute s Text)
            (\s a -> s { _video = a } :: ElastictranscoderPresetResource s)

instance HasVideoCodecOptions (ElastictranscoderPresetResource s) Text where
    type HasVideoCodecOptionsThread (ElastictranscoderPresetResource s) Text = s

    videoCodecOptions =
        lens (_video_codec_options :: ElastictranscoderPresetResource s -> TF.Attribute s Text)
            (\s a -> s { _video_codec_options = a } :: ElastictranscoderPresetResource s)

instance HasVideoWatermarks (ElastictranscoderPresetResource s) Text where
    type HasVideoWatermarksThread (ElastictranscoderPresetResource s) Text = s

    videoWatermarks =
        lens (_video_watermarks :: ElastictranscoderPresetResource s -> TF.Attribute s Text)
            (\s a -> s { _video_watermarks = a } :: ElastictranscoderPresetResource s)

elastictranscoderPresetResource :: TF.Resource TF.AWS (ElastictranscoderPresetResource s)
elastictranscoderPresetResource =
    TF.newResource "aws_elastictranscoder_preset" $
        ElastictranscoderPresetResource {
              _audio = TF.Nil
            , _audio_codec_options = TF.Nil
            , _container = TF.Nil
            , _description = TF.Nil
            , _name = TF.Nil
            , _thumbnails = TF.Nil
            , _video = TF.Nil
            , _video_codec_options = TF.Nil
            , _video_watermarks = TF.Nil
            }

{- | The @aws_elb_attachment@ AWS resource.

Provides an Elastic Load Balancer Attachment resource. ~> NOTE on ELB
Instances and ELB Attachments: Terraform currently provides both a
standalone ELB Attachment resource (describing an instance attached to an
ELB), and an <elb.html> with @instances@ defined in-line. At this time you
cannot use an ELB with in-line instances in conjunction with an ELB
Attachment resource. Doing so will cause a conflict and will overwrite
attachments.
-}
data ElbAttachmentResource s = ElbAttachmentResource {
      _elb :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the ELB. -}
    , _instance' :: !(TF.Attribute s Text)
    {- ^ (Required) Instance ID to place in the ELB pool. -}
    } deriving (Show, Eq)

instance TF.ToHCL (ElbAttachmentResource s) where
    toHCL ElbAttachmentResource{..} = TF.block $ catMaybes
        [ TF.assign "elb" <$> TF.attribute _elb
        , TF.assign "instance" <$> TF.attribute _instance'
        ]

instance HasElb (ElbAttachmentResource s) Text where
    type HasElbThread (ElbAttachmentResource s) Text = s

    elb =
        lens (_elb :: ElbAttachmentResource s -> TF.Attribute s Text)
            (\s a -> s { _elb = a } :: ElbAttachmentResource s)

instance HasInstance' (ElbAttachmentResource s) Text where
    type HasInstance'Thread (ElbAttachmentResource s) Text = s

    instance' =
        lens (_instance' :: ElbAttachmentResource s -> TF.Attribute s Text)
            (\s a -> s { _instance' = a } :: ElbAttachmentResource s)

elbAttachmentResource :: TF.Resource TF.AWS (ElbAttachmentResource s)
elbAttachmentResource =
    TF.newResource "aws_elb_attachment" $
        ElbAttachmentResource {
              _elb = TF.Nil
            , _instance' = TF.Nil
            }

{- | The @aws_elb_load_balancer_backend_server_policy@ AWS resource.

Attaches a load balancer policy to an ELB backend server.
-}
data ElbLoadBalancerBackendServerPolicyResource s = ElbLoadBalancerBackendServerPolicyResource {
      _instance_port :: !(TF.Attribute s TF.Word16)
    {- ^ (Required) The instance port to apply the policy to. -}
    , _load_balancer_name :: !(TF.Attribute s Text)
    {- ^ (Required) The load balancer to attach the policy to. -}
    , _policy_names :: !(TF.Attribute s Text)
    {- ^ (Required) List of Policy Names to apply to the backend server. -}
    } deriving (Show, Eq)

instance TF.ToHCL (ElbLoadBalancerBackendServerPolicyResource s) where
    toHCL ElbLoadBalancerBackendServerPolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "instance_port" <$> TF.attribute _instance_port
        , TF.assign "load_balancer_name" <$> TF.attribute _load_balancer_name
        , TF.assign "policy_names" <$> TF.attribute _policy_names
        ]

instance HasInstancePort (ElbLoadBalancerBackendServerPolicyResource s) TF.Word16 where
    type HasInstancePortThread (ElbLoadBalancerBackendServerPolicyResource s) TF.Word16 = s

    instancePort =
        lens (_instance_port :: ElbLoadBalancerBackendServerPolicyResource s -> TF.Attribute s TF.Word16)
            (\s a -> s { _instance_port = a } :: ElbLoadBalancerBackendServerPolicyResource s)

instance HasLoadBalancerName (ElbLoadBalancerBackendServerPolicyResource s) Text where
    type HasLoadBalancerNameThread (ElbLoadBalancerBackendServerPolicyResource s) Text = s

    loadBalancerName =
        lens (_load_balancer_name :: ElbLoadBalancerBackendServerPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _load_balancer_name = a } :: ElbLoadBalancerBackendServerPolicyResource s)

instance HasPolicyNames (ElbLoadBalancerBackendServerPolicyResource s) Text where
    type HasPolicyNamesThread (ElbLoadBalancerBackendServerPolicyResource s) Text = s

    policyNames =
        lens (_policy_names :: ElbLoadBalancerBackendServerPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _policy_names = a } :: ElbLoadBalancerBackendServerPolicyResource s)

instance HasComputedId (ElbLoadBalancerBackendServerPolicyResource s) Text

instance HasComputedInstancePort (ElbLoadBalancerBackendServerPolicyResource s) TF.Word16

instance HasComputedLoadBalancerName (ElbLoadBalancerBackendServerPolicyResource s) Text

elbLoadBalancerBackendServerPolicyResource :: TF.Resource TF.AWS (ElbLoadBalancerBackendServerPolicyResource s)
elbLoadBalancerBackendServerPolicyResource =
    TF.newResource "aws_elb_load_balancer_backend_server_policy" $
        ElbLoadBalancerBackendServerPolicyResource {
              _instance_port = TF.Nil
            , _load_balancer_name = TF.Nil
            , _policy_names = TF.Nil
            }

{- | The @aws_elb_load_balancer_listener_policy@ AWS resource.

Attaches a load balancer policy to an ELB Listener.
-}
data ElbLoadBalancerListenerPolicyResource s = ElbLoadBalancerListenerPolicyResource {
      _load_balancer_name :: !(TF.Attribute s Text)
    {- ^ (Required) The load balancer to attach the policy to. -}
    , _load_balancer_port :: !(TF.Attribute s TF.Word16)
    {- ^ (Required) The load balancer listener port to apply the policy to. -}
    , _policy_names :: !(TF.Attribute s Text)
    {- ^ (Required) List of Policy Names to apply to the backend server. -}
    } deriving (Show, Eq)

instance TF.ToHCL (ElbLoadBalancerListenerPolicyResource s) where
    toHCL ElbLoadBalancerListenerPolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "load_balancer_name" <$> TF.attribute _load_balancer_name
        , TF.assign "load_balancer_port" <$> TF.attribute _load_balancer_port
        , TF.assign "policy_names" <$> TF.attribute _policy_names
        ]

instance HasLoadBalancerName (ElbLoadBalancerListenerPolicyResource s) Text where
    type HasLoadBalancerNameThread (ElbLoadBalancerListenerPolicyResource s) Text = s

    loadBalancerName =
        lens (_load_balancer_name :: ElbLoadBalancerListenerPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _load_balancer_name = a } :: ElbLoadBalancerListenerPolicyResource s)

instance HasLoadBalancerPort (ElbLoadBalancerListenerPolicyResource s) TF.Word16 where
    type HasLoadBalancerPortThread (ElbLoadBalancerListenerPolicyResource s) TF.Word16 = s

    loadBalancerPort =
        lens (_load_balancer_port :: ElbLoadBalancerListenerPolicyResource s -> TF.Attribute s TF.Word16)
            (\s a -> s { _load_balancer_port = a } :: ElbLoadBalancerListenerPolicyResource s)

instance HasPolicyNames (ElbLoadBalancerListenerPolicyResource s) Text where
    type HasPolicyNamesThread (ElbLoadBalancerListenerPolicyResource s) Text = s

    policyNames =
        lens (_policy_names :: ElbLoadBalancerListenerPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _policy_names = a } :: ElbLoadBalancerListenerPolicyResource s)

instance HasComputedId (ElbLoadBalancerListenerPolicyResource s) Text

instance HasComputedLoadBalancerName (ElbLoadBalancerListenerPolicyResource s) Text

instance HasComputedLoadBalancerPort (ElbLoadBalancerListenerPolicyResource s) TF.Word16

elbLoadBalancerListenerPolicyResource :: TF.Resource TF.AWS (ElbLoadBalancerListenerPolicyResource s)
elbLoadBalancerListenerPolicyResource =
    TF.newResource "aws_elb_load_balancer_listener_policy" $
        ElbLoadBalancerListenerPolicyResource {
              _load_balancer_name = TF.Nil
            , _load_balancer_port = TF.Nil
            , _policy_names = TF.Nil
            }

{- | The @aws_elb_load_balancer_policy@ AWS resource.

Provides a load balancer policy, which can be attached to an ELB listener or
backend server.
-}
data ElbLoadBalancerPolicyResource s = ElbLoadBalancerPolicyResource {
      _load_balancer_name :: !(TF.Attribute s Text)
    {- ^ (Required) The load balancer on which the policy is defined. -}
    , _policy_attribute :: !(TF.Attribute s Text)
    {- ^ (Optional) Policy attribute to apply to the policy. -}
    , _policy_name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the load balancer policy. -}
    , _policy_type_name :: !(TF.Attribute s Text)
    {- ^ (Required) The policy type. -}
    } deriving (Show, Eq)

instance TF.ToHCL (ElbLoadBalancerPolicyResource s) where
    toHCL ElbLoadBalancerPolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "load_balancer_name" <$> TF.attribute _load_balancer_name
        , TF.assign "policy_attribute" <$> TF.attribute _policy_attribute
        , TF.assign "policy_name" <$> TF.attribute _policy_name
        , TF.assign "policy_type_name" <$> TF.attribute _policy_type_name
        ]

instance HasLoadBalancerName (ElbLoadBalancerPolicyResource s) Text where
    type HasLoadBalancerNameThread (ElbLoadBalancerPolicyResource s) Text = s

    loadBalancerName =
        lens (_load_balancer_name :: ElbLoadBalancerPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _load_balancer_name = a } :: ElbLoadBalancerPolicyResource s)

instance HasPolicyAttribute (ElbLoadBalancerPolicyResource s) Text where
    type HasPolicyAttributeThread (ElbLoadBalancerPolicyResource s) Text = s

    policyAttribute =
        lens (_policy_attribute :: ElbLoadBalancerPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _policy_attribute = a } :: ElbLoadBalancerPolicyResource s)

instance HasPolicyName (ElbLoadBalancerPolicyResource s) Text where
    type HasPolicyNameThread (ElbLoadBalancerPolicyResource s) Text = s

    policyName =
        lens (_policy_name :: ElbLoadBalancerPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _policy_name = a } :: ElbLoadBalancerPolicyResource s)

instance HasPolicyTypeName (ElbLoadBalancerPolicyResource s) Text where
    type HasPolicyTypeNameThread (ElbLoadBalancerPolicyResource s) Text = s

    policyTypeName =
        lens (_policy_type_name :: ElbLoadBalancerPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _policy_type_name = a } :: ElbLoadBalancerPolicyResource s)

instance HasComputedId (ElbLoadBalancerPolicyResource s) Text

instance HasComputedLoadBalancerName (ElbLoadBalancerPolicyResource s) Text

instance HasComputedPolicyName (ElbLoadBalancerPolicyResource s) Text

instance HasComputedPolicyTypeName (ElbLoadBalancerPolicyResource s) Text

elbLoadBalancerPolicyResource :: TF.Resource TF.AWS (ElbLoadBalancerPolicyResource s)
elbLoadBalancerPolicyResource =
    TF.newResource "aws_elb_load_balancer_policy" $
        ElbLoadBalancerPolicyResource {
              _load_balancer_name = TF.Nil
            , _policy_attribute = TF.Nil
            , _policy_name = TF.Nil
            , _policy_type_name = TF.Nil
            }

{- | The @aws_elb@ AWS resource.

Provides an Elastic Load Balancer resource, also known as a "Classic Load
Balancer" after the release of </docs/providers/aws/r/lb.html> . ~> NOTE on
ELB Instances and ELB Attachments: Terraform currently provides both a
standalone <elb_attachment.html> (describing an instance attached to an
ELB), and an ELB resource with @instances@ defined in-line. At this time you
cannot use an ELB with in-line instances in conjunction with a ELB
Attachment resources. Doing so will cause a conflict and will overwrite
attachments.
-}
data ElbResource s = ElbResource {
      _access_logs :: !(TF.Attribute s Text)
    {- ^ (Optional) An Access Logs block. Access Logs documented below. -}
    , _availability_zones :: !(TF.Attribute s Text)
    {- ^ (Required for an EC2-classic ELB) The AZ's to serve traffic in. -}
    , _connection_draining :: !(TF.Attribute s Text)
    {- ^ (Optional) Boolean to enable connection draining. Default: @false@ -}
    , _connection_draining_timeout :: !(TF.Attribute s Text)
    {- ^ (Optional) The time in seconds to allow for connections to drain. Default: @300@ -}
    , _cross_zone_load_balancing :: !(TF.Attribute s Text)
    {- ^ (Optional) Enable cross-zone load balancing. Default: @true@ -}
    , _health_check :: !(TF.Attribute s Text)
    {- ^ (Optional) A health_check block. Health Check documented below. -}
    , _idle_timeout :: !(TF.Attribute s Text)
    {- ^ (Optional) The time in seconds that the connection is allowed to be idle. Default: @60@ -}
    , _instances :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of instance ids to place in the ELB pool. -}
    , _internal :: !(TF.Attribute s Text)
    {- ^ (Optional) If true, ELB will be an internal ELB. -}
    , _listener :: !(TF.Attribute s Text)
    {- ^ (Required) A list of listener blocks. Listeners documented below. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Optional) The name of the ELB. By default generated by Terraform. -}
    , _name_prefix :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) Creates a unique name beginning with the specified prefix. Conflicts with @name@ . -}
    , _security_groups :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of security group IDs to assign to the ELB. Only valid if creating an ELB within a VPC -}
    , _subnets :: !(TF.Attribute s Text)
    {- ^ (Required for a VPC ELB) A list of subnet IDs to attach to the ELB. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    } deriving (Show, Eq)

instance TF.ToHCL (ElbResource s) where
    toHCL ElbResource{..} = TF.block $ catMaybes
        [ TF.assign "access_logs" <$> TF.attribute _access_logs
        , TF.assign "availability_zones" <$> TF.attribute _availability_zones
        , TF.assign "connection_draining" <$> TF.attribute _connection_draining
        , TF.assign "connection_draining_timeout" <$> TF.attribute _connection_draining_timeout
        , TF.assign "cross_zone_load_balancing" <$> TF.attribute _cross_zone_load_balancing
        , TF.assign "health_check" <$> TF.attribute _health_check
        , TF.assign "idle_timeout" <$> TF.attribute _idle_timeout
        , TF.assign "instances" <$> TF.attribute _instances
        , TF.assign "internal" <$> TF.attribute _internal
        , TF.assign "listener" <$> TF.attribute _listener
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "name_prefix" <$> TF.attribute _name_prefix
        , TF.assign "security_groups" <$> TF.attribute _security_groups
        , TF.assign "subnets" <$> TF.attribute _subnets
        , TF.assign "tags" <$> TF.attribute _tags
        ]

instance HasAccessLogs (ElbResource s) Text where
    type HasAccessLogsThread (ElbResource s) Text = s

    accessLogs =
        lens (_access_logs :: ElbResource s -> TF.Attribute s Text)
            (\s a -> s { _access_logs = a } :: ElbResource s)

instance HasAvailabilityZones (ElbResource s) Text where
    type HasAvailabilityZonesThread (ElbResource s) Text = s

    availabilityZones =
        lens (_availability_zones :: ElbResource s -> TF.Attribute s Text)
            (\s a -> s { _availability_zones = a } :: ElbResource s)

instance HasConnectionDraining (ElbResource s) Text where
    type HasConnectionDrainingThread (ElbResource s) Text = s

    connectionDraining =
        lens (_connection_draining :: ElbResource s -> TF.Attribute s Text)
            (\s a -> s { _connection_draining = a } :: ElbResource s)

instance HasConnectionDrainingTimeout (ElbResource s) Text where
    type HasConnectionDrainingTimeoutThread (ElbResource s) Text = s

    connectionDrainingTimeout =
        lens (_connection_draining_timeout :: ElbResource s -> TF.Attribute s Text)
            (\s a -> s { _connection_draining_timeout = a } :: ElbResource s)

instance HasCrossZoneLoadBalancing (ElbResource s) Text where
    type HasCrossZoneLoadBalancingThread (ElbResource s) Text = s

    crossZoneLoadBalancing =
        lens (_cross_zone_load_balancing :: ElbResource s -> TF.Attribute s Text)
            (\s a -> s { _cross_zone_load_balancing = a } :: ElbResource s)

instance HasHealthCheck (ElbResource s) Text where
    type HasHealthCheckThread (ElbResource s) Text = s

    healthCheck =
        lens (_health_check :: ElbResource s -> TF.Attribute s Text)
            (\s a -> s { _health_check = a } :: ElbResource s)

instance HasIdleTimeout (ElbResource s) Text where
    type HasIdleTimeoutThread (ElbResource s) Text = s

    idleTimeout =
        lens (_idle_timeout :: ElbResource s -> TF.Attribute s Text)
            (\s a -> s { _idle_timeout = a } :: ElbResource s)

instance HasInstances (ElbResource s) Text where
    type HasInstancesThread (ElbResource s) Text = s

    instances =
        lens (_instances :: ElbResource s -> TF.Attribute s Text)
            (\s a -> s { _instances = a } :: ElbResource s)

instance HasInternal (ElbResource s) Text where
    type HasInternalThread (ElbResource s) Text = s

    internal =
        lens (_internal :: ElbResource s -> TF.Attribute s Text)
            (\s a -> s { _internal = a } :: ElbResource s)

instance HasListener (ElbResource s) Text where
    type HasListenerThread (ElbResource s) Text = s

    listener =
        lens (_listener :: ElbResource s -> TF.Attribute s Text)
            (\s a -> s { _listener = a } :: ElbResource s)

instance HasName (ElbResource s) Text where
    type HasNameThread (ElbResource s) Text = s

    name =
        lens (_name :: ElbResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: ElbResource s)

instance HasNamePrefix (ElbResource s) Text where
    type HasNamePrefixThread (ElbResource s) Text = s

    namePrefix =
        lens (_name_prefix :: ElbResource s -> TF.Attribute s Text)
            (\s a -> s { _name_prefix = a } :: ElbResource s)

instance HasSecurityGroups (ElbResource s) Text where
    type HasSecurityGroupsThread (ElbResource s) Text = s

    securityGroups =
        lens (_security_groups :: ElbResource s -> TF.Attribute s Text)
            (\s a -> s { _security_groups = a } :: ElbResource s)

instance HasSubnets (ElbResource s) Text where
    type HasSubnetsThread (ElbResource s) Text = s

    subnets =
        lens (_subnets :: ElbResource s -> TF.Attribute s Text)
            (\s a -> s { _subnets = a } :: ElbResource s)

instance HasTags (ElbResource s) TF.Tags where
    type HasTagsThread (ElbResource s) TF.Tags = s

    tags =
        lens (_tags :: ElbResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: ElbResource s)

elbResource :: TF.Resource TF.AWS (ElbResource s)
elbResource =
    TF.newResource "aws_elb" $
        ElbResource {
              _access_logs = TF.Nil
            , _availability_zones = TF.Nil
            , _connection_draining = TF.Nil
            , _connection_draining_timeout = TF.Nil
            , _cross_zone_load_balancing = TF.Nil
            , _health_check = TF.Nil
            , _idle_timeout = TF.Nil
            , _instances = TF.Nil
            , _internal = TF.Nil
            , _listener = TF.Nil
            , _name = TF.Nil
            , _name_prefix = TF.Nil
            , _security_groups = TF.Nil
            , _subnets = TF.Nil
            , _tags = TF.Nil
            }

{- | The @aws_emr_cluster@ AWS resource.

Provides an Elastic MapReduce Cluster, a web service that makes it easy to
process large amounts of data efficiently. See
<https://aws.amazon.com/documentation/elastic-mapreduce/> for more
information.
-}
data EmrClusterResource s = EmrClusterResource {
      _applications :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of applications for the cluster. Valid values are: @Flink@ , @Hadoop@ , @Hive@ , @Mahout@ , @Pig@ , and @Spark@ . Case insensitive -}
    , _autoscaling_role :: !(TF.Attribute s Text)
    {- ^ (Optional) An IAM role for automatic scaling policies. The IAM role provides permissions that the automatic scaling feature requires to launch and terminate EC2 instances in an instance group. -}
    , _bootstrap_action :: !(TF.Attribute s Text)
    {- ^ (Optional) List of bootstrap actions that will be run before Hadoop is started on the cluster nodes. Defined below -}
    , _configurations :: !(TF.Attribute s Text)
    {- ^ (Optional) List of configurations supplied for the EMR cluster you are creating -}
    , _core_instance_count :: !(TF.Attribute s Text)
    {- ^ (Optional) Number of Amazon EC2 instances used to execute the job flow. EMR will use one node as the cluster's master node and use the remainder of the nodes ( @core_instance_count@ -1) as core nodes. Cannot be specified if @instance_groups@ is set. Default @1@ -}
    , _core_instance_type :: !(TF.Attribute s Text)
    {- ^ (Optional) The EC2 instance type of the slave nodes. Cannot be specified if @instance_groups@ is set -}
    , _ebs_root_volume_size :: !(TF.Attribute s Text)
    {- ^ (Optional) Size in GiB of the EBS root device volume of the Linux AMI that is used for each EC2 instance. Available in Amazon EMR version 4.x and later. -}
    , _ec2_attributes :: !(TF.Attribute s Text)
    {- ^ (Optional) Attributes for the EC2 instances running the job flow. Defined below -}
    , _instance_group :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of @instance_group@ objects for each instance group in the cluster. Exactly one of @master_instance_type@ and @instance_group@ must be specified. If @instance_group@ is set, then it must contain a configuration block for at least the @MASTER@ instance group type (as well as any additional instance groups). Defined below -}
    , _keep_job_flow_alive_when_no_steps :: !(TF.Attribute s Text)
    {- ^ (Optional) Switch on/off run cluster with no steps or when all steps are complete (default is on) -}
    , _log_uri :: !(TF.Attribute s Text)
    {- ^ (Optional) S3 bucket to write the log files of the job flow. If a value is not provided, logs are not created -}
    , _master_instance_type :: !(TF.Attribute s Text)
    {- ^ (Optional) The EC2 instance type of the master node. Exactly one of @master_instance_type@ and @instance_group@ must be specified. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the job flow -}
    , _release_label :: !(TF.Attribute s Text)
    {- ^ (Required) The release label for the Amazon EMR release -}
    , _security_configuration :: !(TF.Attribute s Text)
    {- ^ (Optional) The security configuration name to attach to the EMR cluster. Only valid for EMR clusters with @release_label@ 4.8.0 or greater -}
    , _service_role :: !(TF.Attribute s Text)
    {- ^ (Required) IAM role that will be assumed by the Amazon EMR service to access AWS resources -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) list of tags to apply to the EMR Cluster -}
    , _termination_protection :: !(TF.Attribute s Text)
    {- ^ (Optional) Switch on/off termination protection (default is off) -}
    , _visible_to_all_users :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether the job flow is visible to all IAM users of the AWS account associated with the job flow. Default @true@ -}
    } deriving (Show, Eq)

instance TF.ToHCL (EmrClusterResource s) where
    toHCL EmrClusterResource{..} = TF.block $ catMaybes
        [ TF.assign "applications" <$> TF.attribute _applications
        , TF.assign "autoscaling_role" <$> TF.attribute _autoscaling_role
        , TF.assign "bootstrap_action" <$> TF.attribute _bootstrap_action
        , TF.assign "configurations" <$> TF.attribute _configurations
        , TF.assign "core_instance_count" <$> TF.attribute _core_instance_count
        , TF.assign "core_instance_type" <$> TF.attribute _core_instance_type
        , TF.assign "ebs_root_volume_size" <$> TF.attribute _ebs_root_volume_size
        , TF.assign "ec2_attributes" <$> TF.attribute _ec2_attributes
        , TF.assign "instance_group" <$> TF.attribute _instance_group
        , TF.assign "keep_job_flow_alive_when_no_steps" <$> TF.attribute _keep_job_flow_alive_when_no_steps
        , TF.assign "log_uri" <$> TF.attribute _log_uri
        , TF.assign "master_instance_type" <$> TF.attribute _master_instance_type
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "release_label" <$> TF.attribute _release_label
        , TF.assign "security_configuration" <$> TF.attribute _security_configuration
        , TF.assign "service_role" <$> TF.attribute _service_role
        , TF.assign "tags" <$> TF.attribute _tags
        , TF.assign "termination_protection" <$> TF.attribute _termination_protection
        , TF.assign "visible_to_all_users" <$> TF.attribute _visible_to_all_users
        ]

instance HasApplications (EmrClusterResource s) Text where
    type HasApplicationsThread (EmrClusterResource s) Text = s

    applications =
        lens (_applications :: EmrClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _applications = a } :: EmrClusterResource s)

instance HasAutoscalingRole (EmrClusterResource s) Text where
    type HasAutoscalingRoleThread (EmrClusterResource s) Text = s

    autoscalingRole =
        lens (_autoscaling_role :: EmrClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _autoscaling_role = a } :: EmrClusterResource s)

instance HasBootstrapAction (EmrClusterResource s) Text where
    type HasBootstrapActionThread (EmrClusterResource s) Text = s

    bootstrapAction =
        lens (_bootstrap_action :: EmrClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _bootstrap_action = a } :: EmrClusterResource s)

instance HasConfigurations (EmrClusterResource s) Text where
    type HasConfigurationsThread (EmrClusterResource s) Text = s

    configurations =
        lens (_configurations :: EmrClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _configurations = a } :: EmrClusterResource s)

instance HasCoreInstanceCount (EmrClusterResource s) Text where
    type HasCoreInstanceCountThread (EmrClusterResource s) Text = s

    coreInstanceCount =
        lens (_core_instance_count :: EmrClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _core_instance_count = a } :: EmrClusterResource s)

instance HasCoreInstanceType (EmrClusterResource s) Text where
    type HasCoreInstanceTypeThread (EmrClusterResource s) Text = s

    coreInstanceType =
        lens (_core_instance_type :: EmrClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _core_instance_type = a } :: EmrClusterResource s)

instance HasEbsRootVolumeSize (EmrClusterResource s) Text where
    type HasEbsRootVolumeSizeThread (EmrClusterResource s) Text = s

    ebsRootVolumeSize =
        lens (_ebs_root_volume_size :: EmrClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _ebs_root_volume_size = a } :: EmrClusterResource s)

instance HasEc2Attributes (EmrClusterResource s) Text where
    type HasEc2AttributesThread (EmrClusterResource s) Text = s

    ec2Attributes =
        lens (_ec2_attributes :: EmrClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _ec2_attributes = a } :: EmrClusterResource s)

instance HasInstanceGroup (EmrClusterResource s) Text where
    type HasInstanceGroupThread (EmrClusterResource s) Text = s

    instanceGroup =
        lens (_instance_group :: EmrClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _instance_group = a } :: EmrClusterResource s)

instance HasKeepJobFlowAliveWhenNoSteps (EmrClusterResource s) Text where
    type HasKeepJobFlowAliveWhenNoStepsThread (EmrClusterResource s) Text = s

    keepJobFlowAliveWhenNoSteps =
        lens (_keep_job_flow_alive_when_no_steps :: EmrClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _keep_job_flow_alive_when_no_steps = a } :: EmrClusterResource s)

instance HasLogUri (EmrClusterResource s) Text where
    type HasLogUriThread (EmrClusterResource s) Text = s

    logUri =
        lens (_log_uri :: EmrClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _log_uri = a } :: EmrClusterResource s)

instance HasMasterInstanceType (EmrClusterResource s) Text where
    type HasMasterInstanceTypeThread (EmrClusterResource s) Text = s

    masterInstanceType =
        lens (_master_instance_type :: EmrClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _master_instance_type = a } :: EmrClusterResource s)

instance HasName (EmrClusterResource s) Text where
    type HasNameThread (EmrClusterResource s) Text = s

    name =
        lens (_name :: EmrClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: EmrClusterResource s)

instance HasReleaseLabel (EmrClusterResource s) Text where
    type HasReleaseLabelThread (EmrClusterResource s) Text = s

    releaseLabel =
        lens (_release_label :: EmrClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _release_label = a } :: EmrClusterResource s)

instance HasSecurityConfiguration (EmrClusterResource s) Text where
    type HasSecurityConfigurationThread (EmrClusterResource s) Text = s

    securityConfiguration =
        lens (_security_configuration :: EmrClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _security_configuration = a } :: EmrClusterResource s)

instance HasServiceRole (EmrClusterResource s) Text where
    type HasServiceRoleThread (EmrClusterResource s) Text = s

    serviceRole =
        lens (_service_role :: EmrClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _service_role = a } :: EmrClusterResource s)

instance HasTags (EmrClusterResource s) TF.Tags where
    type HasTagsThread (EmrClusterResource s) TF.Tags = s

    tags =
        lens (_tags :: EmrClusterResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: EmrClusterResource s)

instance HasTerminationProtection (EmrClusterResource s) Text where
    type HasTerminationProtectionThread (EmrClusterResource s) Text = s

    terminationProtection =
        lens (_termination_protection :: EmrClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _termination_protection = a } :: EmrClusterResource s)

instance HasVisibleToAllUsers (EmrClusterResource s) Text where
    type HasVisibleToAllUsersThread (EmrClusterResource s) Text = s

    visibleToAllUsers =
        lens (_visible_to_all_users :: EmrClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _visible_to_all_users = a } :: EmrClusterResource s)

emrClusterResource :: TF.Resource TF.AWS (EmrClusterResource s)
emrClusterResource =
    TF.newResource "aws_emr_cluster" $
        EmrClusterResource {
              _applications = TF.Nil
            , _autoscaling_role = TF.Nil
            , _bootstrap_action = TF.Nil
            , _configurations = TF.Nil
            , _core_instance_count = TF.Nil
            , _core_instance_type = TF.Nil
            , _ebs_root_volume_size = TF.Nil
            , _ec2_attributes = TF.Nil
            , _instance_group = TF.Nil
            , _keep_job_flow_alive_when_no_steps = TF.Nil
            , _log_uri = TF.Nil
            , _master_instance_type = TF.Nil
            , _name = TF.Nil
            , _release_label = TF.Nil
            , _security_configuration = TF.Nil
            , _service_role = TF.Nil
            , _tags = TF.Nil
            , _termination_protection = TF.Nil
            , _visible_to_all_users = TF.Nil
            }

{- | The @aws_emr_instance_group@ AWS resource.

Provides an Elastic MapReduce Cluster Instance Group configuration. See
<https://aws.amazon.com/documentation/emr/> for more information. ~> NOTE:
At this time, Instance Groups cannot be destroyed through the API nor web
interface. Instance Groups are destroyed when the EMR Cluster is destroyed.
Terraform will resize any Instance Group to zero when destroying the
resource.
-}
data EmrInstanceGroupResource s = EmrInstanceGroupResource {
      _cluster_id :: !(TF.Attribute s Text)
    {- ^ (Required) ID of the EMR Cluster to attach to. Changing this forces a new resource to be created. -}
    , _ebs_config :: !(TF.Attribute s Text)
    {- ^ (Optional) One or more @ebs_config@ blocks as defined below. Changing this forces a new resource to be created. -}
    , _ebs_optimized :: !(TF.Attribute s Text)
    {- ^ (Optional) Indicates whether an Amazon EBS volume is EBS-optimized. Changing this forces a new resource to be created. -}
    , _instance_count :: !(TF.Attribute s Text)
    {- ^ (Optional) Target number of instances for the instance group. Defaults to 0. -}
    , _instance_type :: !(TF.Attribute s Text)
    {- ^ (Required) The EC2 instance type for all instances in the instance group. Changing this forces a new resource to be created. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) Human friendly name given to the instance group. Changing this forces a new resource to be created. -}
    } deriving (Show, Eq)

instance TF.ToHCL (EmrInstanceGroupResource s) where
    toHCL EmrInstanceGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "cluster_id" <$> TF.attribute _cluster_id
        , TF.assign "ebs_config" <$> TF.attribute _ebs_config
        , TF.assign "ebs_optimized" <$> TF.attribute _ebs_optimized
        , TF.assign "instance_count" <$> TF.attribute _instance_count
        , TF.assign "instance_type" <$> TF.attribute _instance_type
        , TF.assign "name" <$> TF.attribute _name
        ]

instance HasClusterId (EmrInstanceGroupResource s) Text where
    type HasClusterIdThread (EmrInstanceGroupResource s) Text = s

    clusterId =
        lens (_cluster_id :: EmrInstanceGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _cluster_id = a } :: EmrInstanceGroupResource s)

instance HasEbsConfig (EmrInstanceGroupResource s) Text where
    type HasEbsConfigThread (EmrInstanceGroupResource s) Text = s

    ebsConfig =
        lens (_ebs_config :: EmrInstanceGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _ebs_config = a } :: EmrInstanceGroupResource s)

instance HasEbsOptimized (EmrInstanceGroupResource s) Text where
    type HasEbsOptimizedThread (EmrInstanceGroupResource s) Text = s

    ebsOptimized =
        lens (_ebs_optimized :: EmrInstanceGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _ebs_optimized = a } :: EmrInstanceGroupResource s)

instance HasInstanceCount (EmrInstanceGroupResource s) Text where
    type HasInstanceCountThread (EmrInstanceGroupResource s) Text = s

    instanceCount =
        lens (_instance_count :: EmrInstanceGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _instance_count = a } :: EmrInstanceGroupResource s)

instance HasInstanceType (EmrInstanceGroupResource s) Text where
    type HasInstanceTypeThread (EmrInstanceGroupResource s) Text = s

    instanceType =
        lens (_instance_type :: EmrInstanceGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _instance_type = a } :: EmrInstanceGroupResource s)

instance HasName (EmrInstanceGroupResource s) Text where
    type HasNameThread (EmrInstanceGroupResource s) Text = s

    name =
        lens (_name :: EmrInstanceGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: EmrInstanceGroupResource s)

instance HasComputedId (EmrInstanceGroupResource s) Text

instance HasComputedRunningInstanceCount (EmrInstanceGroupResource s) Text

instance HasComputedStatus (EmrInstanceGroupResource s) Text

emrInstanceGroupResource :: TF.Resource TF.AWS (EmrInstanceGroupResource s)
emrInstanceGroupResource =
    TF.newResource "aws_emr_instance_group" $
        EmrInstanceGroupResource {
              _cluster_id = TF.Nil
            , _ebs_config = TF.Nil
            , _ebs_optimized = TF.Nil
            , _instance_count = TF.Nil
            , _instance_type = TF.Nil
            , _name = TF.Nil
            }

{- | The @aws_emr_security_configuration@ AWS resource.

Provides a resource to manage AWS EMR Security Configurations
-}
data EmrSecurityConfigurationResource s = EmrSecurityConfigurationResource {
      _configuration :: !(TF.Attribute s Text)
    {- ^ (Required) A JSON formatted Security Configuration -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Optional) The name of the EMR Security Configuration. By default generated by Terraform. -}
    , _name_prefix :: !(TF.Attribute s Text)
    {- ^ (Optional) Creates a unique name beginning with the specified prefix. Conflicts with @name@ . -}
    } deriving (Show, Eq)

instance TF.ToHCL (EmrSecurityConfigurationResource s) where
    toHCL EmrSecurityConfigurationResource{..} = TF.block $ catMaybes
        [ TF.assign "configuration" <$> TF.attribute _configuration
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "name_prefix" <$> TF.attribute _name_prefix
        ]

instance HasConfiguration (EmrSecurityConfigurationResource s) Text where
    type HasConfigurationThread (EmrSecurityConfigurationResource s) Text = s

    configuration =
        lens (_configuration :: EmrSecurityConfigurationResource s -> TF.Attribute s Text)
            (\s a -> s { _configuration = a } :: EmrSecurityConfigurationResource s)

instance HasName (EmrSecurityConfigurationResource s) Text where
    type HasNameThread (EmrSecurityConfigurationResource s) Text = s

    name =
        lens (_name :: EmrSecurityConfigurationResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: EmrSecurityConfigurationResource s)

instance HasNamePrefix (EmrSecurityConfigurationResource s) Text where
    type HasNamePrefixThread (EmrSecurityConfigurationResource s) Text = s

    namePrefix =
        lens (_name_prefix :: EmrSecurityConfigurationResource s -> TF.Attribute s Text)
            (\s a -> s { _name_prefix = a } :: EmrSecurityConfigurationResource s)

instance HasComputedConfiguration (EmrSecurityConfigurationResource s) Text

instance HasComputedCreationDate (EmrSecurityConfigurationResource s) Text

instance HasComputedId (EmrSecurityConfigurationResource s) Text

instance HasComputedName (EmrSecurityConfigurationResource s) Text

emrSecurityConfigurationResource :: TF.Resource TF.AWS (EmrSecurityConfigurationResource s)
emrSecurityConfigurationResource =
    TF.newResource "aws_emr_security_configuration" $
        EmrSecurityConfigurationResource {
              _configuration = TF.Nil
            , _name = TF.Nil
            , _name_prefix = TF.Nil
            }

{- | The @aws_flow_log@ AWS resource.

Provides a VPC/Subnet/ENI Flow Log to capture IP traffic for a specific
network interface, subnet, or VPC. Logs are sent to a CloudWatch Log Group.
-}
data FlowLogResource s = FlowLogResource {
      _eni_id :: !(TF.Attribute s Text)
    {- ^ (Optional) Elastic Network Interface ID to attach to -}
    , _iam_role_arn :: !(TF.Attribute s Text)
    {- ^ (Required) The ARN for the IAM role that's used to post flow logs to a CloudWatch Logs log group -}
    , _log_group_name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the CloudWatch log group -}
    , _subnet_id :: !(TF.Attribute s Text)
    {- ^ (Optional) Subnet ID to attach to -}
    , _traffic_type :: !(TF.Attribute s Text)
    {- ^ (Required) The type of traffic to capture. Valid values: @ACCEPT@ , @REJECT@ , @ALL@ -}
    , _vpc_id :: !(TF.Attribute s Text)
    {- ^ (Optional) VPC ID to attach to -}
    } deriving (Show, Eq)

instance TF.ToHCL (FlowLogResource s) where
    toHCL FlowLogResource{..} = TF.block $ catMaybes
        [ TF.assign "eni_id" <$> TF.attribute _eni_id
        , TF.assign "iam_role_arn" <$> TF.attribute _iam_role_arn
        , TF.assign "log_group_name" <$> TF.attribute _log_group_name
        , TF.assign "subnet_id" <$> TF.attribute _subnet_id
        , TF.assign "traffic_type" <$> TF.attribute _traffic_type
        , TF.assign "vpc_id" <$> TF.attribute _vpc_id
        ]

instance HasEniId (FlowLogResource s) Text where
    type HasEniIdThread (FlowLogResource s) Text = s

    eniId =
        lens (_eni_id :: FlowLogResource s -> TF.Attribute s Text)
            (\s a -> s { _eni_id = a } :: FlowLogResource s)

instance HasIamRoleArn (FlowLogResource s) Text where
    type HasIamRoleArnThread (FlowLogResource s) Text = s

    iamRoleArn =
        lens (_iam_role_arn :: FlowLogResource s -> TF.Attribute s Text)
            (\s a -> s { _iam_role_arn = a } :: FlowLogResource s)

instance HasLogGroupName (FlowLogResource s) Text where
    type HasLogGroupNameThread (FlowLogResource s) Text = s

    logGroupName =
        lens (_log_group_name :: FlowLogResource s -> TF.Attribute s Text)
            (\s a -> s { _log_group_name = a } :: FlowLogResource s)

instance HasSubnetId (FlowLogResource s) Text where
    type HasSubnetIdThread (FlowLogResource s) Text = s

    subnetId =
        lens (_subnet_id :: FlowLogResource s -> TF.Attribute s Text)
            (\s a -> s { _subnet_id = a } :: FlowLogResource s)

instance HasTrafficType (FlowLogResource s) Text where
    type HasTrafficTypeThread (FlowLogResource s) Text = s

    trafficType =
        lens (_traffic_type :: FlowLogResource s -> TF.Attribute s Text)
            (\s a -> s { _traffic_type = a } :: FlowLogResource s)

instance HasVpcId (FlowLogResource s) Text where
    type HasVpcIdThread (FlowLogResource s) Text = s

    vpcId =
        lens (_vpc_id :: FlowLogResource s -> TF.Attribute s Text)
            (\s a -> s { _vpc_id = a } :: FlowLogResource s)

instance HasComputedId (FlowLogResource s) Text

flowLogResource :: TF.Resource TF.AWS (FlowLogResource s)
flowLogResource =
    TF.newResource "aws_flow_log" $
        FlowLogResource {
              _eni_id = TF.Nil
            , _iam_role_arn = TF.Nil
            , _log_group_name = TF.Nil
            , _subnet_id = TF.Nil
            , _traffic_type = TF.Nil
            , _vpc_id = TF.Nil
            }

{- | The @aws_glacier_vault@ AWS resource.

Provides a Glacier Vault Resource. You can refer to the
<https://docs.aws.amazon.com/amazonglacier/latest/dev/working-with-vaults.html>
for a full explanation of the Glacier Vault functionality ~> NOTE: When
removing a Glacier Vault, the Vault must be empty.
-}
data GlacierVaultResource s = GlacierVaultResource {
      _access_policy :: !(TF.Attribute s Text)
    {- ^ (Optional) The policy document. This is a JSON formatted string. The heredoc syntax or @file@ function is helpful here. Use the <https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-access-policy.html> for more information on Glacier Vault Policy -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the Vault. Names can be between 1 and 255 characters long and the valid characters are a-z, A-Z, 0-9, '_' (underscore), '-' (hyphen), and '.' (period). -}
    , _notification :: !(TF.Attribute s Text)
    {- ^ (Optional) The notifications for the Vault. Fields documented below. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    } deriving (Show, Eq)

instance TF.ToHCL (GlacierVaultResource s) where
    toHCL GlacierVaultResource{..} = TF.block $ catMaybes
        [ TF.assign "access_policy" <$> TF.attribute _access_policy
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "notification" <$> TF.attribute _notification
        , TF.assign "tags" <$> TF.attribute _tags
        ]

instance HasAccessPolicy (GlacierVaultResource s) Text where
    type HasAccessPolicyThread (GlacierVaultResource s) Text = s

    accessPolicy =
        lens (_access_policy :: GlacierVaultResource s -> TF.Attribute s Text)
            (\s a -> s { _access_policy = a } :: GlacierVaultResource s)

instance HasName (GlacierVaultResource s) Text where
    type HasNameThread (GlacierVaultResource s) Text = s

    name =
        lens (_name :: GlacierVaultResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: GlacierVaultResource s)

instance HasNotification (GlacierVaultResource s) Text where
    type HasNotificationThread (GlacierVaultResource s) Text = s

    notification =
        lens (_notification :: GlacierVaultResource s -> TF.Attribute s Text)
            (\s a -> s { _notification = a } :: GlacierVaultResource s)

instance HasTags (GlacierVaultResource s) TF.Tags where
    type HasTagsThread (GlacierVaultResource s) TF.Tags = s

    tags =
        lens (_tags :: GlacierVaultResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: GlacierVaultResource s)

instance HasComputedArn (GlacierVaultResource s) Text

instance HasComputedLocation (GlacierVaultResource s) Text

glacierVaultResource :: TF.Resource TF.AWS (GlacierVaultResource s)
glacierVaultResource =
    TF.newResource "aws_glacier_vault" $
        GlacierVaultResource {
              _access_policy = TF.Nil
            , _name = TF.Nil
            , _notification = TF.Nil
            , _tags = TF.Nil
            }

{- | The @aws_glue_catalog_database@ AWS resource.

Provides a Glue Catalog Database Resource. You can refer to the
<http://docs.aws.amazon.com/glue/latest/dg/populate-data-catalog.html> for a
full explanation of the Glue Data Catalog functionality
-}
data GlueCatalogDatabaseResource s = GlueCatalogDatabaseResource {
      _catalog_id :: !(TF.Attribute s Text)
    {- ^ (Optional) ID of the Glue Catalog to create the database in. If omitted, this defaults to the AWS Account ID. -}
    , _description :: !(TF.Attribute s Text)
    {- ^ (Optional) Description of the database. -}
    , _location_uri :: !(TF.Attribute s Text)
    {- ^ (Optional) The location of the database (for example, an HDFS path). -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the database. -}
    , _parameters :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of key-value pairs that define parameters and properties of the database. -}
    } deriving (Show, Eq)

instance TF.ToHCL (GlueCatalogDatabaseResource s) where
    toHCL GlueCatalogDatabaseResource{..} = TF.block $ catMaybes
        [ TF.assign "catalog_id" <$> TF.attribute _catalog_id
        , TF.assign "description" <$> TF.attribute _description
        , TF.assign "location_uri" <$> TF.attribute _location_uri
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "parameters" <$> TF.attribute _parameters
        ]

instance HasCatalogId (GlueCatalogDatabaseResource s) Text where
    type HasCatalogIdThread (GlueCatalogDatabaseResource s) Text = s

    catalogId =
        lens (_catalog_id :: GlueCatalogDatabaseResource s -> TF.Attribute s Text)
            (\s a -> s { _catalog_id = a } :: GlueCatalogDatabaseResource s)

instance HasDescription (GlueCatalogDatabaseResource s) Text where
    type HasDescriptionThread (GlueCatalogDatabaseResource s) Text = s

    description =
        lens (_description :: GlueCatalogDatabaseResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: GlueCatalogDatabaseResource s)

instance HasLocationUri (GlueCatalogDatabaseResource s) Text where
    type HasLocationUriThread (GlueCatalogDatabaseResource s) Text = s

    locationUri =
        lens (_location_uri :: GlueCatalogDatabaseResource s -> TF.Attribute s Text)
            (\s a -> s { _location_uri = a } :: GlueCatalogDatabaseResource s)

instance HasName (GlueCatalogDatabaseResource s) Text where
    type HasNameThread (GlueCatalogDatabaseResource s) Text = s

    name =
        lens (_name :: GlueCatalogDatabaseResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: GlueCatalogDatabaseResource s)

instance HasParameters (GlueCatalogDatabaseResource s) Text where
    type HasParametersThread (GlueCatalogDatabaseResource s) Text = s

    parameters =
        lens (_parameters :: GlueCatalogDatabaseResource s -> TF.Attribute s Text)
            (\s a -> s { _parameters = a } :: GlueCatalogDatabaseResource s)

glueCatalogDatabaseResource :: TF.Resource TF.AWS (GlueCatalogDatabaseResource s)
glueCatalogDatabaseResource =
    TF.newResource "aws_glue_catalog_database" $
        GlueCatalogDatabaseResource {
              _catalog_id = TF.Nil
            , _description = TF.Nil
            , _location_uri = TF.Nil
            , _name = TF.Nil
            , _parameters = TF.Nil
            }

{- | The @aws_guardduty_detector@ AWS resource.

Provides a resource to manage a GuardDuty detector. ~> NOTE: Deleting this
resource is equivalent to "disabling" GuardDuty for an AWS region, which
removes all existing findings. You can set the @enable@ attribute to @false@
to instead "suspend" monitoring and feedback reporting while keeping
existing data. See the
<https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_suspend-disable.html>
for more information.
-}
data GuarddutyDetectorResource s = GuarddutyDetectorResource {
      _enable :: !(TF.Attribute s TF.Bool)
    {- ^ (Optional) Enable monitoring and feedback reporting. Setting to @false@ is equivalent to "suspending" GuardDuty. Defaults to @true@ . -}
    } deriving (Show, Eq)

instance TF.ToHCL (GuarddutyDetectorResource s) where
    toHCL GuarddutyDetectorResource{..} = TF.block $ catMaybes
        [ TF.assign "enable" <$> TF.attribute _enable
        ]

instance HasEnable (GuarddutyDetectorResource s) TF.Bool where
    type HasEnableThread (GuarddutyDetectorResource s) TF.Bool = s

    enable =
        lens (_enable :: GuarddutyDetectorResource s -> TF.Attribute s TF.Bool)
            (\s a -> s { _enable = a } :: GuarddutyDetectorResource s)

instance HasComputedAccountId (GuarddutyDetectorResource s) Text

instance HasComputedId (GuarddutyDetectorResource s) Text

guarddutyDetectorResource :: TF.Resource TF.AWS (GuarddutyDetectorResource s)
guarddutyDetectorResource =
    TF.newResource "aws_guardduty_detector" $
        GuarddutyDetectorResource {
              _enable = TF.Nil
            }

{- | The @aws_guardduty_member@ AWS resource.

Provides a resource to manage a GuardDuty member. ~> NOTE: Currently after
using this resource, you must manually invite and accept member account
invitations before GuardDuty will begin sending cross-account events. More
information for how to accomplish this via the AWS Console or API can be
found in the
<https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_accounts.html> .
Terraform implementation of member invitation and acceptance resources can
be tracked in
<https://github.com/terraform-providers/terraform-provider-aws/issues/2489>
.
-}
data GuarddutyMemberResource s = GuarddutyMemberResource {
      _account_id :: !(TF.Attribute s Text)
    {- ^ (Required) AWS account ID for member account. -}
    , _detector_id :: !(TF.Attribute s Text)
    {- ^ (Required) The detector ID of the GuardDuty account where you want to create member accounts. -}
    , _email :: !(TF.Attribute s Text)
    {- ^ (Required) Email address for member account. -}
    } deriving (Show, Eq)

instance TF.ToHCL (GuarddutyMemberResource s) where
    toHCL GuarddutyMemberResource{..} = TF.block $ catMaybes
        [ TF.assign "account_id" <$> TF.attribute _account_id
        , TF.assign "detector_id" <$> TF.attribute _detector_id
        , TF.assign "email" <$> TF.attribute _email
        ]

instance HasAccountId (GuarddutyMemberResource s) Text where
    type HasAccountIdThread (GuarddutyMemberResource s) Text = s

    accountId =
        lens (_account_id :: GuarddutyMemberResource s -> TF.Attribute s Text)
            (\s a -> s { _account_id = a } :: GuarddutyMemberResource s)

instance HasDetectorId (GuarddutyMemberResource s) Text where
    type HasDetectorIdThread (GuarddutyMemberResource s) Text = s

    detectorId =
        lens (_detector_id :: GuarddutyMemberResource s -> TF.Attribute s Text)
            (\s a -> s { _detector_id = a } :: GuarddutyMemberResource s)

instance HasEmail (GuarddutyMemberResource s) Text where
    type HasEmailThread (GuarddutyMemberResource s) Text = s

    email =
        lens (_email :: GuarddutyMemberResource s -> TF.Attribute s Text)
            (\s a -> s { _email = a } :: GuarddutyMemberResource s)

instance HasComputedId (GuarddutyMemberResource s) Text

guarddutyMemberResource :: TF.Resource TF.AWS (GuarddutyMemberResource s)
guarddutyMemberResource =
    TF.newResource "aws_guardduty_member" $
        GuarddutyMemberResource {
              _account_id = TF.Nil
            , _detector_id = TF.Nil
            , _email = TF.Nil
            }

{- | The @aws_iam_access_key@ AWS resource.

Provides an IAM access key. This is a set of credentials that allow API
requests to be made as an IAM user.
-}
data IamAccessKeyResource s = IamAccessKeyResource {
      _pgp_key :: !(TF.Attribute s Text)
    {- ^ (Optional) Either a base-64 encoded PGP public key, or a keybase username in the form @keybase:some_person_that_exists@ . -}
    , _user :: !(TF.Attribute s Text)
    {- ^ (Required) The IAM user to associate with this access key. -}
    } deriving (Show, Eq)

instance TF.ToHCL (IamAccessKeyResource s) where
    toHCL IamAccessKeyResource{..} = TF.block $ catMaybes
        [ TF.assign "pgp_key" <$> TF.attribute _pgp_key
        , TF.assign "user" <$> TF.attribute _user
        ]

instance HasPgpKey (IamAccessKeyResource s) Text where
    type HasPgpKeyThread (IamAccessKeyResource s) Text = s

    pgpKey =
        lens (_pgp_key :: IamAccessKeyResource s -> TF.Attribute s Text)
            (\s a -> s { _pgp_key = a } :: IamAccessKeyResource s)

instance HasUser (IamAccessKeyResource s) Text where
    type HasUserThread (IamAccessKeyResource s) Text = s

    user =
        lens (_user :: IamAccessKeyResource s -> TF.Attribute s Text)
            (\s a -> s { _user = a } :: IamAccessKeyResource s)

instance HasComputedEncryptedSecret (IamAccessKeyResource s) Text

instance HasComputedId (IamAccessKeyResource s) Text

instance HasComputedKeyFingerprint (IamAccessKeyResource s) Text

instance HasComputedSecret (IamAccessKeyResource s) Text

instance HasComputedSesSmtpPassword (IamAccessKeyResource s) Text

instance HasComputedStatus (IamAccessKeyResource s) Text

instance HasComputedUser (IamAccessKeyResource s) Text

iamAccessKeyResource :: TF.Resource TF.AWS (IamAccessKeyResource s)
iamAccessKeyResource =
    TF.newResource "aws_iam_access_key" $
        IamAccessKeyResource {
              _pgp_key = TF.Nil
            , _user = TF.Nil
            }

{- | The @aws_iam_account_alias@ AWS resource.

-> Note: There is only a single account alias per AWS account. Manages the
account alias for the AWS Account.
-}
data IamAccountAliasResource s = IamAccountAliasResource {
      _account_alias :: !(TF.Attribute s Text)
    {- ^ (Required) The account alias -}
    } deriving (Show, Eq)

instance TF.ToHCL (IamAccountAliasResource s) where
    toHCL IamAccountAliasResource{..} = TF.block $ catMaybes
        [ TF.assign "account_alias" <$> TF.attribute _account_alias
        ]

instance HasAccountAlias (IamAccountAliasResource s) Text where
    type HasAccountAliasThread (IamAccountAliasResource s) Text = s

    accountAlias =
        lens (_account_alias :: IamAccountAliasResource s -> TF.Attribute s Text)
            (\s a -> s { _account_alias = a } :: IamAccountAliasResource s)

iamAccountAliasResource :: TF.Resource TF.AWS (IamAccountAliasResource s)
iamAccountAliasResource =
    TF.newResource "aws_iam_account_alias" $
        IamAccountAliasResource {
              _account_alias = TF.Nil
            }

{- | The @aws_iam_account_password_policy@ AWS resource.

-> Note: There is only a single policy allowed per AWS account. An existing
policy will be lost when using this resource as an effect of this
limitation. Manages Password Policy for the AWS Account. See more about
<http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html>
in the official AWS docs.
-}
data IamAccountPasswordPolicyResource s = IamAccountPasswordPolicyResource {
      _allow_users_to_change_password :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to allow users to change their own password -}
    , _hard_expiry :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether users are prevented from setting a new password after their password has expired (i.e. require administrator reset) -}
    , _max_password_age :: !(TF.Attribute s Text)
    {- ^ (Optional) The number of days that an user password is valid. -}
    , _minimum_password_length :: !(TF.Attribute s Text)
    {- ^ (Optional) Minimum length to require for user passwords. -}
    , _password_reuse_prevention :: !(TF.Attribute s Text)
    {- ^ (Optional) The number of previous passwords that users are prevented from reusing. -}
    , _require_lowercase_characters :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to require lowercase characters for user passwords. -}
    , _require_numbers :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to require numbers for user passwords. -}
    , _require_symbols :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to require symbols for user passwords. -}
    , _require_uppercase_characters :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to require uppercase characters for user passwords. -}
    } deriving (Show, Eq)

instance TF.ToHCL (IamAccountPasswordPolicyResource s) where
    toHCL IamAccountPasswordPolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "allow_users_to_change_password" <$> TF.attribute _allow_users_to_change_password
        , TF.assign "hard_expiry" <$> TF.attribute _hard_expiry
        , TF.assign "max_password_age" <$> TF.attribute _max_password_age
        , TF.assign "minimum_password_length" <$> TF.attribute _minimum_password_length
        , TF.assign "password_reuse_prevention" <$> TF.attribute _password_reuse_prevention
        , TF.assign "require_lowercase_characters" <$> TF.attribute _require_lowercase_characters
        , TF.assign "require_numbers" <$> TF.attribute _require_numbers
        , TF.assign "require_symbols" <$> TF.attribute _require_symbols
        , TF.assign "require_uppercase_characters" <$> TF.attribute _require_uppercase_characters
        ]

instance HasAllowUsersToChangePassword (IamAccountPasswordPolicyResource s) Text where
    type HasAllowUsersToChangePasswordThread (IamAccountPasswordPolicyResource s) Text = s

    allowUsersToChangePassword =
        lens (_allow_users_to_change_password :: IamAccountPasswordPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _allow_users_to_change_password = a } :: IamAccountPasswordPolicyResource s)

instance HasHardExpiry (IamAccountPasswordPolicyResource s) Text where
    type HasHardExpiryThread (IamAccountPasswordPolicyResource s) Text = s

    hardExpiry =
        lens (_hard_expiry :: IamAccountPasswordPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _hard_expiry = a } :: IamAccountPasswordPolicyResource s)

instance HasMaxPasswordAge (IamAccountPasswordPolicyResource s) Text where
    type HasMaxPasswordAgeThread (IamAccountPasswordPolicyResource s) Text = s

    maxPasswordAge =
        lens (_max_password_age :: IamAccountPasswordPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _max_password_age = a } :: IamAccountPasswordPolicyResource s)

instance HasMinimumPasswordLength (IamAccountPasswordPolicyResource s) Text where
    type HasMinimumPasswordLengthThread (IamAccountPasswordPolicyResource s) Text = s

    minimumPasswordLength =
        lens (_minimum_password_length :: IamAccountPasswordPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _minimum_password_length = a } :: IamAccountPasswordPolicyResource s)

instance HasPasswordReusePrevention (IamAccountPasswordPolicyResource s) Text where
    type HasPasswordReusePreventionThread (IamAccountPasswordPolicyResource s) Text = s

    passwordReusePrevention =
        lens (_password_reuse_prevention :: IamAccountPasswordPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _password_reuse_prevention = a } :: IamAccountPasswordPolicyResource s)

instance HasRequireLowercaseCharacters (IamAccountPasswordPolicyResource s) Text where
    type HasRequireLowercaseCharactersThread (IamAccountPasswordPolicyResource s) Text = s

    requireLowercaseCharacters =
        lens (_require_lowercase_characters :: IamAccountPasswordPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _require_lowercase_characters = a } :: IamAccountPasswordPolicyResource s)

instance HasRequireNumbers (IamAccountPasswordPolicyResource s) Text where
    type HasRequireNumbersThread (IamAccountPasswordPolicyResource s) Text = s

    requireNumbers =
        lens (_require_numbers :: IamAccountPasswordPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _require_numbers = a } :: IamAccountPasswordPolicyResource s)

instance HasRequireSymbols (IamAccountPasswordPolicyResource s) Text where
    type HasRequireSymbolsThread (IamAccountPasswordPolicyResource s) Text = s

    requireSymbols =
        lens (_require_symbols :: IamAccountPasswordPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _require_symbols = a } :: IamAccountPasswordPolicyResource s)

instance HasRequireUppercaseCharacters (IamAccountPasswordPolicyResource s) Text where
    type HasRequireUppercaseCharactersThread (IamAccountPasswordPolicyResource s) Text = s

    requireUppercaseCharacters =
        lens (_require_uppercase_characters :: IamAccountPasswordPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _require_uppercase_characters = a } :: IamAccountPasswordPolicyResource s)

instance HasComputedExpirePasswords (IamAccountPasswordPolicyResource s) Text

iamAccountPasswordPolicyResource :: TF.Resource TF.AWS (IamAccountPasswordPolicyResource s)
iamAccountPasswordPolicyResource =
    TF.newResource "aws_iam_account_password_policy" $
        IamAccountPasswordPolicyResource {
              _allow_users_to_change_password = TF.Nil
            , _hard_expiry = TF.Nil
            , _max_password_age = TF.Nil
            , _minimum_password_length = TF.Nil
            , _password_reuse_prevention = TF.Nil
            , _require_lowercase_characters = TF.Nil
            , _require_numbers = TF.Nil
            , _require_symbols = TF.Nil
            , _require_uppercase_characters = TF.Nil
            }

{- | The @aws_iam_group_membership@ AWS resource.

Provides a top level resource to manage IAM Group membership for IAM Users.
For more information on managing IAM Groups or IAM Users, see
</docs/providers/aws/r/iam_group.html> or
</docs/providers/aws/r/iam_user.html>
-}
data IamGroupMembershipResource s = IamGroupMembershipResource {
      _group :: !(TF.Attribute s Text)
    {- ^ – (Required) The IAM Group name to attach the list of @users@ to -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name to identify the Group Membership -}
    , _users :: !(TF.Attribute s Text)
    {- ^ (Required) A list of IAM User names to associate with the Group -}
    } deriving (Show, Eq)

instance TF.ToHCL (IamGroupMembershipResource s) where
    toHCL IamGroupMembershipResource{..} = TF.block $ catMaybes
        [ TF.assign "group" <$> TF.attribute _group
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "users" <$> TF.attribute _users
        ]

instance HasGroup (IamGroupMembershipResource s) Text where
    type HasGroupThread (IamGroupMembershipResource s) Text = s

    group =
        lens (_group :: IamGroupMembershipResource s -> TF.Attribute s Text)
            (\s a -> s { _group = a } :: IamGroupMembershipResource s)

instance HasName (IamGroupMembershipResource s) Text where
    type HasNameThread (IamGroupMembershipResource s) Text = s

    name =
        lens (_name :: IamGroupMembershipResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: IamGroupMembershipResource s)

instance HasUsers (IamGroupMembershipResource s) Text where
    type HasUsersThread (IamGroupMembershipResource s) Text = s

    users =
        lens (_users :: IamGroupMembershipResource s -> TF.Attribute s Text)
            (\s a -> s { _users = a } :: IamGroupMembershipResource s)

instance HasComputedGroup (IamGroupMembershipResource s) Text

instance HasComputedName (IamGroupMembershipResource s) Text

instance HasComputedUsers (IamGroupMembershipResource s) Text

iamGroupMembershipResource :: TF.Resource TF.AWS (IamGroupMembershipResource s)
iamGroupMembershipResource =
    TF.newResource "aws_iam_group_membership" $
        IamGroupMembershipResource {
              _group = TF.Nil
            , _name = TF.Nil
            , _users = TF.Nil
            }

{- | The @aws_iam_group_policy_attachment@ AWS resource.

Attaches a Managed IAM Policy to an IAM group
-}
data IamGroupPolicyAttachmentResource s = IamGroupPolicyAttachmentResource {
      _group :: !(TF.Attribute s Text)
    {- ^ (Required) - The group the policy should be applied to -}
    , _policy_arn :: !(TF.Attribute s Text)
    {- ^ (Required) - The ARN of the policy you want to apply -}
    } deriving (Show, Eq)

instance TF.ToHCL (IamGroupPolicyAttachmentResource s) where
    toHCL IamGroupPolicyAttachmentResource{..} = TF.block $ catMaybes
        [ TF.assign "group" <$> TF.attribute _group
        , TF.assign "policy_arn" <$> TF.attribute _policy_arn
        ]

instance HasGroup (IamGroupPolicyAttachmentResource s) Text where
    type HasGroupThread (IamGroupPolicyAttachmentResource s) Text = s

    group =
        lens (_group :: IamGroupPolicyAttachmentResource s -> TF.Attribute s Text)
            (\s a -> s { _group = a } :: IamGroupPolicyAttachmentResource s)

instance HasPolicyArn (IamGroupPolicyAttachmentResource s) Text where
    type HasPolicyArnThread (IamGroupPolicyAttachmentResource s) Text = s

    policyArn =
        lens (_policy_arn :: IamGroupPolicyAttachmentResource s -> TF.Attribute s Text)
            (\s a -> s { _policy_arn = a } :: IamGroupPolicyAttachmentResource s)

iamGroupPolicyAttachmentResource :: TF.Resource TF.AWS (IamGroupPolicyAttachmentResource s)
iamGroupPolicyAttachmentResource =
    TF.newResource "aws_iam_group_policy_attachment" $
        IamGroupPolicyAttachmentResource {
              _group = TF.Nil
            , _policy_arn = TF.Nil
            }

{- | The @aws_iam_group_policy@ AWS resource.

Provides an IAM policy attached to a group.
-}
data IamGroupPolicyResource s = IamGroupPolicyResource {
      _group :: !(TF.Attribute s Text)
    {- ^ (Required) The IAM group to attach to the policy. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Optional) The name of the policy. If omitted, Terraform will assign a random, unique name. -}
    , _name_prefix :: !(TF.Attribute s Text)
    {- ^ (Optional) Creates a unique name beginning with the specified prefix. Conflicts with @name@ . -}
    , _policy :: !(TF.Attribute s Text)
    {- ^ (Required) The policy document. This is a JSON formatted string. The heredoc syntax or @file@ function is helpful here. -}
    } deriving (Show, Eq)

instance TF.ToHCL (IamGroupPolicyResource s) where
    toHCL IamGroupPolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "group" <$> TF.attribute _group
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "name_prefix" <$> TF.attribute _name_prefix
        , TF.assign "policy" <$> TF.attribute _policy
        ]

instance HasGroup (IamGroupPolicyResource s) Text where
    type HasGroupThread (IamGroupPolicyResource s) Text = s

    group =
        lens (_group :: IamGroupPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _group = a } :: IamGroupPolicyResource s)

instance HasName (IamGroupPolicyResource s) Text where
    type HasNameThread (IamGroupPolicyResource s) Text = s

    name =
        lens (_name :: IamGroupPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: IamGroupPolicyResource s)

instance HasNamePrefix (IamGroupPolicyResource s) Text where
    type HasNamePrefixThread (IamGroupPolicyResource s) Text = s

    namePrefix =
        lens (_name_prefix :: IamGroupPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _name_prefix = a } :: IamGroupPolicyResource s)

instance HasPolicy (IamGroupPolicyResource s) Text where
    type HasPolicyThread (IamGroupPolicyResource s) Text = s

    policy =
        lens (_policy :: IamGroupPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _policy = a } :: IamGroupPolicyResource s)

instance HasComputedGroup (IamGroupPolicyResource s) Text

instance HasComputedId (IamGroupPolicyResource s) Text

instance HasComputedName (IamGroupPolicyResource s) Text

instance HasComputedPolicy (IamGroupPolicyResource s) Text

iamGroupPolicyResource :: TF.Resource TF.AWS (IamGroupPolicyResource s)
iamGroupPolicyResource =
    TF.newResource "aws_iam_group_policy" $
        IamGroupPolicyResource {
              _group = TF.Nil
            , _name = TF.Nil
            , _name_prefix = TF.Nil
            , _policy = TF.Nil
            }

{- | The @aws_iam_group@ AWS resource.

Provides an IAM group.
-}
data IamGroupResource s = IamGroupResource {
      _name :: !(TF.Attribute s Text)
    {- ^ (Required) The group's name. The name must consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: @=,.@-_.@ . Group names are not distinguished by case. For example, you cannot create groups named both "ADMINS" and "admins". -}
    , _path :: !(TF.Attribute s Text)
    {- ^ (Optional, default "/") Path in which to create the group. -}
    } deriving (Show, Eq)

instance TF.ToHCL (IamGroupResource s) where
    toHCL IamGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.attribute _name
        , TF.assign "path" <$> TF.attribute _path
        ]

instance HasName (IamGroupResource s) Text where
    type HasNameThread (IamGroupResource s) Text = s

    name =
        lens (_name :: IamGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: IamGroupResource s)

instance HasPath (IamGroupResource s) Text where
    type HasPathThread (IamGroupResource s) Text = s

    path =
        lens (_path :: IamGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _path = a } :: IamGroupResource s)

instance HasComputedArn (IamGroupResource s) Text

instance HasComputedId (IamGroupResource s) Text

instance HasComputedName (IamGroupResource s) Text

instance HasComputedPath (IamGroupResource s) Text

instance HasComputedUniqueId (IamGroupResource s) Text

iamGroupResource :: TF.Resource TF.AWS (IamGroupResource s)
iamGroupResource =
    TF.newResource "aws_iam_group" $
        IamGroupResource {
              _name = TF.Nil
            , _path = TF.Nil
            }

{- | The @aws_iam_instance_profile@ AWS resource.

Provides an IAM instance profile. ~> NOTE: Either @role@ or @roles@ (
deprecated ) must be specified.
-}
data IamInstanceProfileResource s = IamInstanceProfileResource {
      _name :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) The profile's name. If omitted, Terraform will assign a random, unique name. -}
    , _name_prefix :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) Creates a unique name beginning with the specified prefix. Conflicts with @name@ . -}
    , _path :: !(TF.Attribute s Text)
    {- ^ (Optional, default "/") Path in which to create the profile. -}
    , _role :: !(TF.Attribute s Text)
    {- ^ (Optional) The role name to include in the profile. -}
    , _roles :: !(TF.Attribute s Text)
    {- ^ - ( Deprecated ) A list of role names to include in the profile.  The current default is 1.  If you see an error message similar to @Cannot exceed quota for InstanceSessionsPerInstanceProfile: 1@ , then you must contact AWS support and ask for a limit increase. WARNING: This is deprecated since <https://github.com/hashicorp/terraform/blob/master/CHANGELOG.md#093-april-12-2017> , as >= 2 roles are not possible. See <https://github.com/hashicorp/terraform/issues/11575> . -}
    } deriving (Show, Eq)

instance TF.ToHCL (IamInstanceProfileResource s) where
    toHCL IamInstanceProfileResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.attribute _name
        , TF.assign "name_prefix" <$> TF.attribute _name_prefix
        , TF.assign "path" <$> TF.attribute _path
        , TF.assign "role" <$> TF.attribute _role
        , TF.assign "roles" <$> TF.attribute _roles
        ]

instance HasName (IamInstanceProfileResource s) Text where
    type HasNameThread (IamInstanceProfileResource s) Text = s

    name =
        lens (_name :: IamInstanceProfileResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: IamInstanceProfileResource s)

instance HasNamePrefix (IamInstanceProfileResource s) Text where
    type HasNamePrefixThread (IamInstanceProfileResource s) Text = s

    namePrefix =
        lens (_name_prefix :: IamInstanceProfileResource s -> TF.Attribute s Text)
            (\s a -> s { _name_prefix = a } :: IamInstanceProfileResource s)

instance HasPath (IamInstanceProfileResource s) Text where
    type HasPathThread (IamInstanceProfileResource s) Text = s

    path =
        lens (_path :: IamInstanceProfileResource s -> TF.Attribute s Text)
            (\s a -> s { _path = a } :: IamInstanceProfileResource s)

instance HasRole (IamInstanceProfileResource s) Text where
    type HasRoleThread (IamInstanceProfileResource s) Text = s

    role =
        lens (_role :: IamInstanceProfileResource s -> TF.Attribute s Text)
            (\s a -> s { _role = a } :: IamInstanceProfileResource s)

instance HasRoles (IamInstanceProfileResource s) Text where
    type HasRolesThread (IamInstanceProfileResource s) Text = s

    roles =
        lens (_roles :: IamInstanceProfileResource s -> TF.Attribute s Text)
            (\s a -> s { _roles = a } :: IamInstanceProfileResource s)

instance HasComputedArn (IamInstanceProfileResource s) Text

instance HasComputedCreateDate (IamInstanceProfileResource s) Text

instance HasComputedId (IamInstanceProfileResource s) Text

instance HasComputedName (IamInstanceProfileResource s) Text

instance HasComputedPath (IamInstanceProfileResource s) Text

instance HasComputedRole (IamInstanceProfileResource s) Text

instance HasComputedRoles (IamInstanceProfileResource s) Text

instance HasComputedUniqueId (IamInstanceProfileResource s) Text

iamInstanceProfileResource :: TF.Resource TF.AWS (IamInstanceProfileResource s)
iamInstanceProfileResource =
    TF.newResource "aws_iam_instance_profile" $
        IamInstanceProfileResource {
              _name = TF.Nil
            , _name_prefix = TF.Nil
            , _path = TF.Nil
            , _role = TF.Nil
            , _roles = TF.Nil
            }

{- | The @aws_iam_openid_connect_provider@ AWS resource.

Provides an IAM OpenID Connect provider.
-}
data IamOpenidConnectProviderResource s = IamOpenidConnectProviderResource {
      _client_id_list :: !(TF.Attribute s Text)
    {- ^ (Required) A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the client_id parameter on OAuth requests.) -}
    , _thumbprint_list :: !(TF.Attribute s Text)
    {- ^ (Required) A list of server certificate thumbprints for the OpenID Connect (OIDC) identity provider's server certificate(s). -}
    , _url :: !(TF.Attribute s Text)
    {- ^ (Required) The URL of the identity provider. Corresponds to the iss claim. -}
    } deriving (Show, Eq)

instance TF.ToHCL (IamOpenidConnectProviderResource s) where
    toHCL IamOpenidConnectProviderResource{..} = TF.block $ catMaybes
        [ TF.assign "client_id_list" <$> TF.attribute _client_id_list
        , TF.assign "thumbprint_list" <$> TF.attribute _thumbprint_list
        , TF.assign "url" <$> TF.attribute _url
        ]

instance HasClientIdList (IamOpenidConnectProviderResource s) Text where
    type HasClientIdListThread (IamOpenidConnectProviderResource s) Text = s

    clientIdList =
        lens (_client_id_list :: IamOpenidConnectProviderResource s -> TF.Attribute s Text)
            (\s a -> s { _client_id_list = a } :: IamOpenidConnectProviderResource s)

instance HasThumbprintList (IamOpenidConnectProviderResource s) Text where
    type HasThumbprintListThread (IamOpenidConnectProviderResource s) Text = s

    thumbprintList =
        lens (_thumbprint_list :: IamOpenidConnectProviderResource s -> TF.Attribute s Text)
            (\s a -> s { _thumbprint_list = a } :: IamOpenidConnectProviderResource s)

instance HasUrl (IamOpenidConnectProviderResource s) Text where
    type HasUrlThread (IamOpenidConnectProviderResource s) Text = s

    url =
        lens (_url :: IamOpenidConnectProviderResource s -> TF.Attribute s Text)
            (\s a -> s { _url = a } :: IamOpenidConnectProviderResource s)

instance HasComputedArn (IamOpenidConnectProviderResource s) Text

iamOpenidConnectProviderResource :: TF.Resource TF.AWS (IamOpenidConnectProviderResource s)
iamOpenidConnectProviderResource =
    TF.newResource "aws_iam_openid_connect_provider" $
        IamOpenidConnectProviderResource {
              _client_id_list = TF.Nil
            , _thumbprint_list = TF.Nil
            , _url = TF.Nil
            }

{- | The @aws_iam_policy_attachment@ AWS resource.

Attaches a Managed IAM Policy to user(s), role(s), and/or group(s) !>
WARNING: The aws_iam_policy_attachment resource creates exclusive
attachments of IAM policies. Across the entire AWS account, all of the
users/roles/groups to which a single policy is attached must be declared by
a single aws_iam_policy_attachment resource. This means that even any
users/roles/groups that have the attached policy via some mechanism other
than Terraform will have that attached policy revoked by Terraform. Consider
@aws_iam_role_policy_attachment@ , @iam_user_policy_attachment@ , or
@iam_group_policy_attachment@ instead. These resources do not enforce
exclusive attachment of an IAM policy.
-}
data IamPolicyAttachmentResource s = IamPolicyAttachmentResource {
      _groups :: !(TF.Attribute s Text)
    {- ^ (Optional) - The group(s) the policy should be applied to -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) - The name of the policy. This cannot be an empty string. -}
    , _policy_arn :: !(TF.Attribute s Text)
    {- ^ (Required) - The ARN of the policy you want to apply -}
    , _roles :: !(TF.Attribute s Text)
    {- ^ (Optional) - The role(s) the policy should be applied to -}
    , _users :: !(TF.Attribute s Text)
    {- ^ (Optional) - The user(s) the policy should be applied to -}
    } deriving (Show, Eq)

instance TF.ToHCL (IamPolicyAttachmentResource s) where
    toHCL IamPolicyAttachmentResource{..} = TF.block $ catMaybes
        [ TF.assign "groups" <$> TF.attribute _groups
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "policy_arn" <$> TF.attribute _policy_arn
        , TF.assign "roles" <$> TF.attribute _roles
        , TF.assign "users" <$> TF.attribute _users
        ]

instance HasGroups (IamPolicyAttachmentResource s) Text where
    type HasGroupsThread (IamPolicyAttachmentResource s) Text = s

    groups =
        lens (_groups :: IamPolicyAttachmentResource s -> TF.Attribute s Text)
            (\s a -> s { _groups = a } :: IamPolicyAttachmentResource s)

instance HasName (IamPolicyAttachmentResource s) Text where
    type HasNameThread (IamPolicyAttachmentResource s) Text = s

    name =
        lens (_name :: IamPolicyAttachmentResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: IamPolicyAttachmentResource s)

instance HasPolicyArn (IamPolicyAttachmentResource s) Text where
    type HasPolicyArnThread (IamPolicyAttachmentResource s) Text = s

    policyArn =
        lens (_policy_arn :: IamPolicyAttachmentResource s -> TF.Attribute s Text)
            (\s a -> s { _policy_arn = a } :: IamPolicyAttachmentResource s)

instance HasRoles (IamPolicyAttachmentResource s) Text where
    type HasRolesThread (IamPolicyAttachmentResource s) Text = s

    roles =
        lens (_roles :: IamPolicyAttachmentResource s -> TF.Attribute s Text)
            (\s a -> s { _roles = a } :: IamPolicyAttachmentResource s)

instance HasUsers (IamPolicyAttachmentResource s) Text where
    type HasUsersThread (IamPolicyAttachmentResource s) Text = s

    users =
        lens (_users :: IamPolicyAttachmentResource s -> TF.Attribute s Text)
            (\s a -> s { _users = a } :: IamPolicyAttachmentResource s)

instance HasComputedId (IamPolicyAttachmentResource s) Text

instance HasComputedName (IamPolicyAttachmentResource s) Text

iamPolicyAttachmentResource :: TF.Resource TF.AWS (IamPolicyAttachmentResource s)
iamPolicyAttachmentResource =
    TF.newResource "aws_iam_policy_attachment" $
        IamPolicyAttachmentResource {
              _groups = TF.Nil
            , _name = TF.Nil
            , _policy_arn = TF.Nil
            , _roles = TF.Nil
            , _users = TF.Nil
            }

{- | The @aws_iam_policy@ AWS resource.

Provides an IAM policy.
-}
data IamPolicyResource s = IamPolicyResource {
      _description :: !(TF.Attribute s Text)
    {- ^ (Optional) Description of the IAM policy. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) The name of the policy. If omitted, Terraform will assign a random, unique name. -}
    , _name_prefix :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) Creates a unique name beginning with the specified prefix. Conflicts with @name@ . -}
    , _path :: !(TF.Attribute s Text)
    {- ^ (Optional, default "/") Path in which to create the policy. See <https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html> for more information. -}
    , _policy :: !(TF.Attribute s Text)
    {- ^ (Required) The policy document. This is a JSON formatted string. The heredoc syntax, @file@ function, or the </docs/providers/aws/d/iam_policy_document.html> are all helpful here. -}
    } deriving (Show, Eq)

instance TF.ToHCL (IamPolicyResource s) where
    toHCL IamPolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.attribute _description
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "name_prefix" <$> TF.attribute _name_prefix
        , TF.assign "path" <$> TF.attribute _path
        , TF.assign "policy" <$> TF.attribute _policy
        ]

instance HasDescription (IamPolicyResource s) Text where
    type HasDescriptionThread (IamPolicyResource s) Text = s

    description =
        lens (_description :: IamPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: IamPolicyResource s)

instance HasName (IamPolicyResource s) Text where
    type HasNameThread (IamPolicyResource s) Text = s

    name =
        lens (_name :: IamPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: IamPolicyResource s)

instance HasNamePrefix (IamPolicyResource s) Text where
    type HasNamePrefixThread (IamPolicyResource s) Text = s

    namePrefix =
        lens (_name_prefix :: IamPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _name_prefix = a } :: IamPolicyResource s)

instance HasPath (IamPolicyResource s) Text where
    type HasPathThread (IamPolicyResource s) Text = s

    path =
        lens (_path :: IamPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _path = a } :: IamPolicyResource s)

instance HasPolicy (IamPolicyResource s) Text where
    type HasPolicyThread (IamPolicyResource s) Text = s

    policy =
        lens (_policy :: IamPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _policy = a } :: IamPolicyResource s)

instance HasComputedArn (IamPolicyResource s) Text

instance HasComputedDescription (IamPolicyResource s) Text

instance HasComputedId (IamPolicyResource s) Text

instance HasComputedName (IamPolicyResource s) Text

instance HasComputedPath (IamPolicyResource s) Text

instance HasComputedPolicy (IamPolicyResource s) Text

iamPolicyResource :: TF.Resource TF.AWS (IamPolicyResource s)
iamPolicyResource =
    TF.newResource "aws_iam_policy" $
        IamPolicyResource {
              _description = TF.Nil
            , _name = TF.Nil
            , _name_prefix = TF.Nil
            , _path = TF.Nil
            , _policy = TF.Nil
            }

{- | The @aws_iam_role_policy_attachment@ AWS resource.

Attaches a Managed IAM Policy to an IAM role
-}
data IamRolePolicyAttachmentResource s = IamRolePolicyAttachmentResource {
      _policy_arn :: !(TF.Attribute s Text)
    {- ^ (Required) - The ARN of the policy you want to apply -}
    , _role :: !(TF.Attribute s Text)
    {- ^ (Required) - The role the policy should be applied to -}
    } deriving (Show, Eq)

instance TF.ToHCL (IamRolePolicyAttachmentResource s) where
    toHCL IamRolePolicyAttachmentResource{..} = TF.block $ catMaybes
        [ TF.assign "policy_arn" <$> TF.attribute _policy_arn
        , TF.assign "role" <$> TF.attribute _role
        ]

instance HasPolicyArn (IamRolePolicyAttachmentResource s) Text where
    type HasPolicyArnThread (IamRolePolicyAttachmentResource s) Text = s

    policyArn =
        lens (_policy_arn :: IamRolePolicyAttachmentResource s -> TF.Attribute s Text)
            (\s a -> s { _policy_arn = a } :: IamRolePolicyAttachmentResource s)

instance HasRole (IamRolePolicyAttachmentResource s) Text where
    type HasRoleThread (IamRolePolicyAttachmentResource s) Text = s

    role =
        lens (_role :: IamRolePolicyAttachmentResource s -> TF.Attribute s Text)
            (\s a -> s { _role = a } :: IamRolePolicyAttachmentResource s)

iamRolePolicyAttachmentResource :: TF.Resource TF.AWS (IamRolePolicyAttachmentResource s)
iamRolePolicyAttachmentResource =
    TF.newResource "aws_iam_role_policy_attachment" $
        IamRolePolicyAttachmentResource {
              _policy_arn = TF.Nil
            , _role = TF.Nil
            }

{- | The @aws_iam_role_policy@ AWS resource.

Provides an IAM role policy.
-}
data IamRolePolicyResource s = IamRolePolicyResource {
      _name :: !(TF.Attribute s Text)
    {- ^ (Optional) The name of the role policy. If omitted, Terraform will assign a random, unique name. -}
    , _name_prefix :: !(TF.Attribute s Text)
    {- ^ (Optional) Creates a unique name beginning with the specified prefix. Conflicts with @name@ . -}
    , _policy :: !(TF.Attribute s Text)
    {- ^ (Required) The policy document. This is a JSON formatted string. The heredoc syntax or @file@ function is helpful here. -}
    , _role :: !(TF.Attribute s Text)
    {- ^ (Required) The IAM role to attach to the policy. -}
    } deriving (Show, Eq)

instance TF.ToHCL (IamRolePolicyResource s) where
    toHCL IamRolePolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.attribute _name
        , TF.assign "name_prefix" <$> TF.attribute _name_prefix
        , TF.assign "policy" <$> TF.attribute _policy
        , TF.assign "role" <$> TF.attribute _role
        ]

instance HasName (IamRolePolicyResource s) Text where
    type HasNameThread (IamRolePolicyResource s) Text = s

    name =
        lens (_name :: IamRolePolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: IamRolePolicyResource s)

instance HasNamePrefix (IamRolePolicyResource s) Text where
    type HasNamePrefixThread (IamRolePolicyResource s) Text = s

    namePrefix =
        lens (_name_prefix :: IamRolePolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _name_prefix = a } :: IamRolePolicyResource s)

instance HasPolicy (IamRolePolicyResource s) Text where
    type HasPolicyThread (IamRolePolicyResource s) Text = s

    policy =
        lens (_policy :: IamRolePolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _policy = a } :: IamRolePolicyResource s)

instance HasRole (IamRolePolicyResource s) Text where
    type HasRoleThread (IamRolePolicyResource s) Text = s

    role =
        lens (_role :: IamRolePolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _role = a } :: IamRolePolicyResource s)

instance HasComputedId (IamRolePolicyResource s) Text

instance HasComputedName (IamRolePolicyResource s) Text

instance HasComputedPolicy (IamRolePolicyResource s) Text

instance HasComputedRole (IamRolePolicyResource s) Text

iamRolePolicyResource :: TF.Resource TF.AWS (IamRolePolicyResource s)
iamRolePolicyResource =
    TF.newResource "aws_iam_role_policy" $
        IamRolePolicyResource {
              _name = TF.Nil
            , _name_prefix = TF.Nil
            , _policy = TF.Nil
            , _role = TF.Nil
            }

{- | The @aws_iam_role@ AWS resource.

Provides an IAM role.
-}
data IamRoleResource s = IamRoleResource {
      _assume_role_policy :: !(TF.Attribute s Text)
    {- ^ (Required) The policy that grants an entity permission to assume the role. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) The name of the role. If omitted, Terraform will assign a random, unique name. -}
    , _name_prefix :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) Creates a unique name beginning with the specified prefix. Conflicts with @name@ . -}
    } deriving (Show, Eq)

instance TF.ToHCL (IamRoleResource s) where
    toHCL IamRoleResource{..} = TF.block $ catMaybes
        [ TF.assign "assume_role_policy" <$> TF.attribute _assume_role_policy
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "name_prefix" <$> TF.attribute _name_prefix
        ]

instance HasAssumeRolePolicy (IamRoleResource s) Text where
    type HasAssumeRolePolicyThread (IamRoleResource s) Text = s

    assumeRolePolicy =
        lens (_assume_role_policy :: IamRoleResource s -> TF.Attribute s Text)
            (\s a -> s { _assume_role_policy = a } :: IamRoleResource s)

instance HasName (IamRoleResource s) Text where
    type HasNameThread (IamRoleResource s) Text = s

    name =
        lens (_name :: IamRoleResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: IamRoleResource s)

instance HasNamePrefix (IamRoleResource s) Text where
    type HasNamePrefixThread (IamRoleResource s) Text = s

    namePrefix =
        lens (_name_prefix :: IamRoleResource s -> TF.Attribute s Text)
            (\s a -> s { _name_prefix = a } :: IamRoleResource s)

instance HasComputedArn (IamRoleResource s) Text

instance HasComputedCreateDate (IamRoleResource s) Text

instance HasComputedDescription (IamRoleResource s) Text

instance HasComputedName (IamRoleResource s) Text

instance HasComputedUniqueId (IamRoleResource s) Text

iamRoleResource :: TF.Resource TF.AWS (IamRoleResource s)
iamRoleResource =
    TF.newResource "aws_iam_role" $
        IamRoleResource {
              _assume_role_policy = TF.Nil
            , _name = TF.Nil
            , _name_prefix = TF.Nil
            }

{- | The @aws_iam_saml_provider@ AWS resource.

Provides an IAM SAML provider.
-}
data IamSamlProviderResource s = IamSamlProviderResource {
      _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the provider to create. -}
    , _saml_metadata_document :: !(TF.Attribute s Text)
    {- ^ (Required) An XML document generated by an identity provider that supports SAML 2.0. -}
    } deriving (Show, Eq)

instance TF.ToHCL (IamSamlProviderResource s) where
    toHCL IamSamlProviderResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.attribute _name
        , TF.assign "saml_metadata_document" <$> TF.attribute _saml_metadata_document
        ]

instance HasName (IamSamlProviderResource s) Text where
    type HasNameThread (IamSamlProviderResource s) Text = s

    name =
        lens (_name :: IamSamlProviderResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: IamSamlProviderResource s)

instance HasSamlMetadataDocument (IamSamlProviderResource s) Text where
    type HasSamlMetadataDocumentThread (IamSamlProviderResource s) Text = s

    samlMetadataDocument =
        lens (_saml_metadata_document :: IamSamlProviderResource s -> TF.Attribute s Text)
            (\s a -> s { _saml_metadata_document = a } :: IamSamlProviderResource s)

instance HasComputedArn (IamSamlProviderResource s) Text

instance HasComputedValidUntil (IamSamlProviderResource s) Text

iamSamlProviderResource :: TF.Resource TF.AWS (IamSamlProviderResource s)
iamSamlProviderResource =
    TF.newResource "aws_iam_saml_provider" $
        IamSamlProviderResource {
              _name = TF.Nil
            , _saml_metadata_document = TF.Nil
            }

{- | The @aws_iam_server_certificate@ AWS resource.

Provides an IAM Server Certificate resource to upload Server Certificates.
Certs uploaded to IAM can easily work with other AWS services such as:
-}
data IamServerCertificateResource s = IamServerCertificateResource {
      _certificate_body :: !(TF.Attribute s Text)
    {- ^ – (Required) The contents of the public key certificate in PEM-encoded format. -}
    , _certificate_chain :: !(TF.Attribute s Text)
    {- ^ – (Optional) The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Optional) The name of the Server Certificate. Do not include the path in this value. If omitted, Terraform will assign a random, unique name. -}
    , _name_prefix :: !(TF.Attribute s Text)
    {- ^ (Optional) Creates a unique name beginning with the specified prefix. Conflicts with @name@ . -}
    , _path :: !(TF.Attribute s Text)
    {- ^ (Optional) The IAM path for the server certificate.  If it is not included, it defaults to a slash (/). If this certificate is for use with AWS CloudFront, the path must be in format @/cloudfront/your_path_here@ . See <https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html> for more details on IAM Paths. -}
    , _private_key :: !(TF.Attribute s Text)
    {- ^ – (Required) The contents of the private key in PEM-encoded format. -}
    } deriving (Show, Eq)

instance TF.ToHCL (IamServerCertificateResource s) where
    toHCL IamServerCertificateResource{..} = TF.block $ catMaybes
        [ TF.assign "certificate_body" <$> TF.attribute _certificate_body
        , TF.assign "certificate_chain" <$> TF.attribute _certificate_chain
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "name_prefix" <$> TF.attribute _name_prefix
        , TF.assign "path" <$> TF.attribute _path
        , TF.assign "private_key" <$> TF.attribute _private_key
        ]

instance HasCertificateBody (IamServerCertificateResource s) Text where
    type HasCertificateBodyThread (IamServerCertificateResource s) Text = s

    certificateBody =
        lens (_certificate_body :: IamServerCertificateResource s -> TF.Attribute s Text)
            (\s a -> s { _certificate_body = a } :: IamServerCertificateResource s)

instance HasCertificateChain (IamServerCertificateResource s) Text where
    type HasCertificateChainThread (IamServerCertificateResource s) Text = s

    certificateChain =
        lens (_certificate_chain :: IamServerCertificateResource s -> TF.Attribute s Text)
            (\s a -> s { _certificate_chain = a } :: IamServerCertificateResource s)

instance HasName (IamServerCertificateResource s) Text where
    type HasNameThread (IamServerCertificateResource s) Text = s

    name =
        lens (_name :: IamServerCertificateResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: IamServerCertificateResource s)

instance HasNamePrefix (IamServerCertificateResource s) Text where
    type HasNamePrefixThread (IamServerCertificateResource s) Text = s

    namePrefix =
        lens (_name_prefix :: IamServerCertificateResource s -> TF.Attribute s Text)
            (\s a -> s { _name_prefix = a } :: IamServerCertificateResource s)

instance HasPath (IamServerCertificateResource s) Text where
    type HasPathThread (IamServerCertificateResource s) Text = s

    path =
        lens (_path :: IamServerCertificateResource s -> TF.Attribute s Text)
            (\s a -> s { _path = a } :: IamServerCertificateResource s)

instance HasPrivateKey (IamServerCertificateResource s) Text where
    type HasPrivateKeyThread (IamServerCertificateResource s) Text = s

    privateKey =
        lens (_private_key :: IamServerCertificateResource s -> TF.Attribute s Text)
            (\s a -> s { _private_key = a } :: IamServerCertificateResource s)

instance HasComputedArn (IamServerCertificateResource s) Text

instance HasComputedId (IamServerCertificateResource s) Text

instance HasComputedName (IamServerCertificateResource s) Text

iamServerCertificateResource :: TF.Resource TF.AWS (IamServerCertificateResource s)
iamServerCertificateResource =
    TF.newResource "aws_iam_server_certificate" $
        IamServerCertificateResource {
              _certificate_body = TF.Nil
            , _certificate_chain = TF.Nil
            , _name = TF.Nil
            , _name_prefix = TF.Nil
            , _path = TF.Nil
            , _private_key = TF.Nil
            }

{- | The @aws_iam_user_login_profile@ AWS resource.

Provides one-time creation of a IAM user login profile, and uses PGP to
encrypt the password for safe transport to the user. PGP keys can be
obtained from Keybase.
-}
data IamUserLoginProfileResource s = IamUserLoginProfileResource {
      _password_length :: !(TF.Attribute s Text)
    {- ^ (Optional, default 20) The length of the generated password. -}
    , _password_reset_required :: !(TF.Attribute s Text)
    {- ^ (Optional, default "true") Whether the user should be forced to reset the generated password on first login. -}
    , _pgp_key :: !(TF.Attribute s Text)
    {- ^ (Required) Either a base-64 encoded PGP public key, or a keybase username in the form @keybase:username@ . -}
    , _user :: !(TF.Attribute s Text)
    {- ^ (Required) The IAM user's name. -}
    } deriving (Show, Eq)

instance TF.ToHCL (IamUserLoginProfileResource s) where
    toHCL IamUserLoginProfileResource{..} = TF.block $ catMaybes
        [ TF.assign "password_length" <$> TF.attribute _password_length
        , TF.assign "password_reset_required" <$> TF.attribute _password_reset_required
        , TF.assign "pgp_key" <$> TF.attribute _pgp_key
        , TF.assign "user" <$> TF.attribute _user
        ]

instance HasPasswordLength (IamUserLoginProfileResource s) Text where
    type HasPasswordLengthThread (IamUserLoginProfileResource s) Text = s

    passwordLength =
        lens (_password_length :: IamUserLoginProfileResource s -> TF.Attribute s Text)
            (\s a -> s { _password_length = a } :: IamUserLoginProfileResource s)

instance HasPasswordResetRequired (IamUserLoginProfileResource s) Text where
    type HasPasswordResetRequiredThread (IamUserLoginProfileResource s) Text = s

    passwordResetRequired =
        lens (_password_reset_required :: IamUserLoginProfileResource s -> TF.Attribute s Text)
            (\s a -> s { _password_reset_required = a } :: IamUserLoginProfileResource s)

instance HasPgpKey (IamUserLoginProfileResource s) Text where
    type HasPgpKeyThread (IamUserLoginProfileResource s) Text = s

    pgpKey =
        lens (_pgp_key :: IamUserLoginProfileResource s -> TF.Attribute s Text)
            (\s a -> s { _pgp_key = a } :: IamUserLoginProfileResource s)

instance HasUser (IamUserLoginProfileResource s) Text where
    type HasUserThread (IamUserLoginProfileResource s) Text = s

    user =
        lens (_user :: IamUserLoginProfileResource s -> TF.Attribute s Text)
            (\s a -> s { _user = a } :: IamUserLoginProfileResource s)

instance HasComputedEncryptedPassword (IamUserLoginProfileResource s) Text

instance HasComputedKeyFingerprint (IamUserLoginProfileResource s) Text

iamUserLoginProfileResource :: TF.Resource TF.AWS (IamUserLoginProfileResource s)
iamUserLoginProfileResource =
    TF.newResource "aws_iam_user_login_profile" $
        IamUserLoginProfileResource {
              _password_length = TF.Nil
            , _password_reset_required = TF.Nil
            , _pgp_key = TF.Nil
            , _user = TF.Nil
            }

{- | The @aws_iam_user_policy_attachment@ AWS resource.

Attaches a Managed IAM Policy to an IAM user
-}
data IamUserPolicyAttachmentResource s = IamUserPolicyAttachmentResource {
      _policy_arn :: !(TF.Attribute s Text)
    {- ^ (Required) - The ARN of the policy you want to apply -}
    , _user :: !(TF.Attribute s Text)
    {- ^ (Required) - The user the policy should be applied to -}
    } deriving (Show, Eq)

instance TF.ToHCL (IamUserPolicyAttachmentResource s) where
    toHCL IamUserPolicyAttachmentResource{..} = TF.block $ catMaybes
        [ TF.assign "policy_arn" <$> TF.attribute _policy_arn
        , TF.assign "user" <$> TF.attribute _user
        ]

instance HasPolicyArn (IamUserPolicyAttachmentResource s) Text where
    type HasPolicyArnThread (IamUserPolicyAttachmentResource s) Text = s

    policyArn =
        lens (_policy_arn :: IamUserPolicyAttachmentResource s -> TF.Attribute s Text)
            (\s a -> s { _policy_arn = a } :: IamUserPolicyAttachmentResource s)

instance HasUser (IamUserPolicyAttachmentResource s) Text where
    type HasUserThread (IamUserPolicyAttachmentResource s) Text = s

    user =
        lens (_user :: IamUserPolicyAttachmentResource s -> TF.Attribute s Text)
            (\s a -> s { _user = a } :: IamUserPolicyAttachmentResource s)

iamUserPolicyAttachmentResource :: TF.Resource TF.AWS (IamUserPolicyAttachmentResource s)
iamUserPolicyAttachmentResource =
    TF.newResource "aws_iam_user_policy_attachment" $
        IamUserPolicyAttachmentResource {
              _policy_arn = TF.Nil
            , _user = TF.Nil
            }

{- | The @aws_iam_user_policy@ AWS resource.

Provides an IAM policy attached to a user.
-}
data IamUserPolicyResource s = IamUserPolicyResource {
      _name :: !(TF.Attribute s Text)
    {- ^ (Optional) The name of the policy. If omitted, Terraform will assign a random, unique name. -}
    , _name_prefix :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) Creates a unique name beginning with the specified prefix. Conflicts with @name@ . -}
    , _policy :: !(TF.Attribute s Text)
    {- ^ (Required) The policy document. This is a JSON formatted string. The heredoc syntax or @file@ function is helpful here. -}
    , _user :: !(TF.Attribute s Text)
    {- ^ (Required) IAM user to which to attach this policy. -}
    } deriving (Show, Eq)

instance TF.ToHCL (IamUserPolicyResource s) where
    toHCL IamUserPolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.attribute _name
        , TF.assign "name_prefix" <$> TF.attribute _name_prefix
        , TF.assign "policy" <$> TF.attribute _policy
        , TF.assign "user" <$> TF.attribute _user
        ]

instance HasName (IamUserPolicyResource s) Text where
    type HasNameThread (IamUserPolicyResource s) Text = s

    name =
        lens (_name :: IamUserPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: IamUserPolicyResource s)

instance HasNamePrefix (IamUserPolicyResource s) Text where
    type HasNamePrefixThread (IamUserPolicyResource s) Text = s

    namePrefix =
        lens (_name_prefix :: IamUserPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _name_prefix = a } :: IamUserPolicyResource s)

instance HasPolicy (IamUserPolicyResource s) Text where
    type HasPolicyThread (IamUserPolicyResource s) Text = s

    policy =
        lens (_policy :: IamUserPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _policy = a } :: IamUserPolicyResource s)

instance HasUser (IamUserPolicyResource s) Text where
    type HasUserThread (IamUserPolicyResource s) Text = s

    user =
        lens (_user :: IamUserPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _user = a } :: IamUserPolicyResource s)

iamUserPolicyResource :: TF.Resource TF.AWS (IamUserPolicyResource s)
iamUserPolicyResource =
    TF.newResource "aws_iam_user_policy" $
        IamUserPolicyResource {
              _name = TF.Nil
            , _name_prefix = TF.Nil
            , _policy = TF.Nil
            , _user = TF.Nil
            }

{- | The @aws_iam_user@ AWS resource.

Provides an IAM user.
-}
data IamUserResource s = IamUserResource {
      _force_destroy :: !(TF.Attribute s Text)
    {- ^ (Optional, default false) When destroying this user, destroy even if it has non-Terraform-managed IAM access keys, login profile or MFA devices. Without @force_destroy@ a user with non-Terraform-managed access keys and login profile will fail to be destroyed. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The user's name. The name must consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: @=,.@-_.@ . User names are not distinguished by case. For example, you cannot create users named both "TESTUSER" and "testuser". -}
    , _path :: !(TF.Attribute s Text)
    {- ^ (Optional, default "/") Path in which to create the user. -}
    } deriving (Show, Eq)

instance TF.ToHCL (IamUserResource s) where
    toHCL IamUserResource{..} = TF.block $ catMaybes
        [ TF.assign "force_destroy" <$> TF.attribute _force_destroy
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "path" <$> TF.attribute _path
        ]

instance HasForceDestroy (IamUserResource s) Text where
    type HasForceDestroyThread (IamUserResource s) Text = s

    forceDestroy =
        lens (_force_destroy :: IamUserResource s -> TF.Attribute s Text)
            (\s a -> s { _force_destroy = a } :: IamUserResource s)

instance HasName (IamUserResource s) Text where
    type HasNameThread (IamUserResource s) Text = s

    name =
        lens (_name :: IamUserResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: IamUserResource s)

instance HasPath (IamUserResource s) Text where
    type HasPathThread (IamUserResource s) Text = s

    path =
        lens (_path :: IamUserResource s -> TF.Attribute s Text)
            (\s a -> s { _path = a } :: IamUserResource s)

instance HasComputedArn (IamUserResource s) Text

instance HasComputedName (IamUserResource s) Text

instance HasComputedUniqueId (IamUserResource s) Text

iamUserResource :: TF.Resource TF.AWS (IamUserResource s)
iamUserResource =
    TF.newResource "aws_iam_user" $
        IamUserResource {
              _force_destroy = TF.Nil
            , _name = TF.Nil
            , _path = TF.Nil
            }

{- | The @aws_iam_user_ssh_key@ AWS resource.

Uploads an SSH public key and associates it with the specified IAM user.
-}
data IamUserSshKeyResource s = IamUserSshKeyResource {
      _encoding :: !(TF.Attribute s Text)
    {- ^ (Required) Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use @SSH@ . To retrieve the public key in PEM format, use @PEM@ . -}
    , _public_key :: !(TF.Attribute s Text)
    {- ^ (Required) The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. -}
    , _status :: !(TF.Attribute s Text)
    {- ^ (Optional) The status to assign to the SSH public key. Active means the key can be used for authentication with an AWS CodeCommit repository. Inactive means the key cannot be used. Default is @active@ . -}
    , _username :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the IAM user to associate the SSH public key with. -}
    } deriving (Show, Eq)

instance TF.ToHCL (IamUserSshKeyResource s) where
    toHCL IamUserSshKeyResource{..} = TF.block $ catMaybes
        [ TF.assign "encoding" <$> TF.attribute _encoding
        , TF.assign "public_key" <$> TF.attribute _public_key
        , TF.assign "status" <$> TF.attribute _status
        , TF.assign "username" <$> TF.attribute _username
        ]

instance HasEncoding (IamUserSshKeyResource s) Text where
    type HasEncodingThread (IamUserSshKeyResource s) Text = s

    encoding =
        lens (_encoding :: IamUserSshKeyResource s -> TF.Attribute s Text)
            (\s a -> s { _encoding = a } :: IamUserSshKeyResource s)

instance HasPublicKey (IamUserSshKeyResource s) Text where
    type HasPublicKeyThread (IamUserSshKeyResource s) Text = s

    publicKey =
        lens (_public_key :: IamUserSshKeyResource s -> TF.Attribute s Text)
            (\s a -> s { _public_key = a } :: IamUserSshKeyResource s)

instance HasStatus (IamUserSshKeyResource s) Text where
    type HasStatusThread (IamUserSshKeyResource s) Text = s

    status =
        lens (_status :: IamUserSshKeyResource s -> TF.Attribute s Text)
            (\s a -> s { _status = a } :: IamUserSshKeyResource s)

instance HasUsername (IamUserSshKeyResource s) Text where
    type HasUsernameThread (IamUserSshKeyResource s) Text = s

    username =
        lens (_username :: IamUserSshKeyResource s -> TF.Attribute s Text)
            (\s a -> s { _username = a } :: IamUserSshKeyResource s)

instance HasComputedFingerprint (IamUserSshKeyResource s) Text

instance HasComputedSshPublicKeyId (IamUserSshKeyResource s) Text

iamUserSshKeyResource :: TF.Resource TF.AWS (IamUserSshKeyResource s)
iamUserSshKeyResource =
    TF.newResource "aws_iam_user_ssh_key" $
        IamUserSshKeyResource {
              _encoding = TF.Nil
            , _public_key = TF.Nil
            , _status = TF.Nil
            , _username = TF.Nil
            }

{- | The @aws_inspector_assessment_target@ AWS resource.

Provides a Inspector assessment target
-}
data InspectorAssessmentTargetResource s = InspectorAssessmentTargetResource {
      _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the assessment target. -}
    , _resource_group_arn :: !(TF.Attribute s Text)
    {- ^ (Required )- The resource group ARN stating tags for instance matching. -}
    } deriving (Show, Eq)

instance TF.ToHCL (InspectorAssessmentTargetResource s) where
    toHCL InspectorAssessmentTargetResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.attribute _name
        , TF.assign "resource_group_arn" <$> TF.attribute _resource_group_arn
        ]

instance HasName (InspectorAssessmentTargetResource s) Text where
    type HasNameThread (InspectorAssessmentTargetResource s) Text = s

    name =
        lens (_name :: InspectorAssessmentTargetResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: InspectorAssessmentTargetResource s)

instance HasResourceGroupArn (InspectorAssessmentTargetResource s) Text where
    type HasResourceGroupArnThread (InspectorAssessmentTargetResource s) Text = s

    resourceGroupArn =
        lens (_resource_group_arn :: InspectorAssessmentTargetResource s -> TF.Attribute s Text)
            (\s a -> s { _resource_group_arn = a } :: InspectorAssessmentTargetResource s)

instance HasComputedArn (InspectorAssessmentTargetResource s) Text

inspectorAssessmentTargetResource :: TF.Resource TF.AWS (InspectorAssessmentTargetResource s)
inspectorAssessmentTargetResource =
    TF.newResource "aws_inspector_assessment_target" $
        InspectorAssessmentTargetResource {
              _name = TF.Nil
            , _resource_group_arn = TF.Nil
            }

{- | The @aws_inspector_assessment_template@ AWS resource.

Provides a Inspector assessment template
-}
data InspectorAssessmentTemplateResource s = InspectorAssessmentTemplateResource {
      _duration :: !(TF.Attribute s Text)
    {- ^ (Required) The duration of the inspector run. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the assessment template. -}
    , _rules_package_arns :: !(TF.Attribute s Text)
    {- ^ (Required) The rules to be used during the run. -}
    , _target_arn :: !(TF.Attribute s Text)
    {- ^ (Required) The assessment target ARN to attach the template to. -}
    } deriving (Show, Eq)

instance TF.ToHCL (InspectorAssessmentTemplateResource s) where
    toHCL InspectorAssessmentTemplateResource{..} = TF.block $ catMaybes
        [ TF.assign "duration" <$> TF.attribute _duration
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "rules_package_arns" <$> TF.attribute _rules_package_arns
        , TF.assign "target_arn" <$> TF.attribute _target_arn
        ]

instance HasDuration (InspectorAssessmentTemplateResource s) Text where
    type HasDurationThread (InspectorAssessmentTemplateResource s) Text = s

    duration =
        lens (_duration :: InspectorAssessmentTemplateResource s -> TF.Attribute s Text)
            (\s a -> s { _duration = a } :: InspectorAssessmentTemplateResource s)

instance HasName (InspectorAssessmentTemplateResource s) Text where
    type HasNameThread (InspectorAssessmentTemplateResource s) Text = s

    name =
        lens (_name :: InspectorAssessmentTemplateResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: InspectorAssessmentTemplateResource s)

instance HasRulesPackageArns (InspectorAssessmentTemplateResource s) Text where
    type HasRulesPackageArnsThread (InspectorAssessmentTemplateResource s) Text = s

    rulesPackageArns =
        lens (_rules_package_arns :: InspectorAssessmentTemplateResource s -> TF.Attribute s Text)
            (\s a -> s { _rules_package_arns = a } :: InspectorAssessmentTemplateResource s)

instance HasTargetArn (InspectorAssessmentTemplateResource s) Text where
    type HasTargetArnThread (InspectorAssessmentTemplateResource s) Text = s

    targetArn =
        lens (_target_arn :: InspectorAssessmentTemplateResource s -> TF.Attribute s Text)
            (\s a -> s { _target_arn = a } :: InspectorAssessmentTemplateResource s)

instance HasComputedArn (InspectorAssessmentTemplateResource s) Text

inspectorAssessmentTemplateResource :: TF.Resource TF.AWS (InspectorAssessmentTemplateResource s)
inspectorAssessmentTemplateResource =
    TF.newResource "aws_inspector_assessment_template" $
        InspectorAssessmentTemplateResource {
              _duration = TF.Nil
            , _name = TF.Nil
            , _rules_package_arns = TF.Nil
            , _target_arn = TF.Nil
            }

{- | The @aws_inspector_resource_group@ AWS resource.

Provides a Inspector resource group
-}
data InspectorResourceGroupResource s = InspectorResourceGroupResource {
      _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Required) The tags on your EC2 Instance. -}
    } deriving (Show, Eq)

instance TF.ToHCL (InspectorResourceGroupResource s) where
    toHCL InspectorResourceGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "tags" <$> TF.attribute _tags
        ]

instance HasTags (InspectorResourceGroupResource s) TF.Tags where
    type HasTagsThread (InspectorResourceGroupResource s) TF.Tags = s

    tags =
        lens (_tags :: InspectorResourceGroupResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: InspectorResourceGroupResource s)

instance HasComputedArn (InspectorResourceGroupResource s) Text

inspectorResourceGroupResource :: TF.Resource TF.AWS (InspectorResourceGroupResource s)
inspectorResourceGroupResource =
    TF.newResource "aws_inspector_resource_group" $
        InspectorResourceGroupResource {
              _tags = TF.Nil
            }

{- | The @aws_instance@ AWS resource.

Provides an EC2 instance resource. This allows instances to be created,
updated, and deleted. Instances also support </docs/provisioners/index.html>
.
-}
data InstanceResource s = InstanceResource {
      _ami :: !(TF.Attribute s Text)
    {- ^ (Required) The AMI to use for the instance. -}
    , _associate_public_ip_address :: !(TF.Attribute s Text)
    {- ^ (Optional) Associate a public ip address with an instance in a VPC.  Boolean value. -}
    , _availability_zone :: !(TF.Attribute s TF.Zone)
    {- ^ (Optional) The AZ to start the instance in. -}
    , _disable_api_termination :: !(TF.Attribute s Text)
    {- ^ (Optional) If true, enables <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#Using_ChangingDisableAPITermination> -}
    , _ebs_block_device :: !(TF.Attribute s Text)
    {- ^ (Optional) Additional EBS block devices to attach to the instance.  See <#block-devices> below for details. -}
    , _ebs_optimized :: !(TF.Attribute s Text)
    {- ^ (Optional) If true, the launched EC2 instance will be EBS-optimized. -}
    , _ephemeral_block_device :: !(TF.Attribute s Text)
    {- ^ (Optional) Customize Ephemeral (also known as "Instance Store") volumes on the instance. See <#block-devices> below for details. -}
    , _iam_instance_profile :: !(TF.Attribute s Text)
    {- ^ (Optional) The IAM Instance Profile to launch the instance with. Specified as the name of the Instance Profile. Ensure your credentials have the correct permission to assign the instance profile according to the <http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2.html#roles-usingrole-ec2instance-permissions> , notably @iam:PassRole@ . -}
    , _instance_initiated_shutdown_behavior :: !(TF.Attribute s Text)
    {- ^ (Optional) Shutdown behavior for the instance. Amazon defaults this to @stop@ for EBS-backed instances and @terminate@ for instance-store instances. Cannot be set on instance-store instances. See <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#Using_ChangingInstanceInitiatedShutdownBehavior> for more information. -}
    , _instance_type :: !(TF.Attribute s Text)
    {- ^ (Required) The type of instance to start. Updates to this field will trigger a stop/start of the EC2 instance. -}
    , _ipv6_address_count :: !(TF.Attribute s Text)
    {- ^ (Optional) A number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet. -}
    , _ipv6_addresses :: !(TF.Attribute s Text)
    {- ^ (Optional) Specify one or more IPv6 addresses from the range of the subnet to associate with the primary network interface -}
    , _key_name :: !(TF.Attribute s Text)
    {- ^ (Optional) The key name to use for the instance. -}
    , _monitoring :: !(TF.Attribute s Text)
    {- ^ (Optional) If true, the launched EC2 instance will have detailed monitoring enabled. (Available since v0.6.0) -}
    , _network_interface :: !(TF.Attribute s Text)
    {- ^ (Optional) Customize network interfaces to be attached at instance boot time. See <#network-interfaces> below for more details. -}
    , _placement_group :: !(TF.Attribute s Text)
    {- ^ (Optional) The Placement Group to start the instance in. -}
    , _private_ip :: !(TF.Attribute s Text)
    {- ^ (Optional) Private IP address to associate with the instance in a VPC. -}
    , _root_block_device :: !(TF.Attribute s Text)
    {- ^ (Optional) Customize details about the root block device of the instance. See <#block-devices> below for details. -}
    , _security_groups :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of security group names to associate with. If you are creating Instances in a VPC, use @vpc_security_group_ids@ instead. -}
    , _source_dest_check :: !(TF.Attribute s Text)
    {- ^ (Optional) Controls if traffic is routed to the instance when the destination address does not match the instance. Used for NAT or VPNs. Defaults true. -}
    , _subnet_id :: !(TF.Attribute s Text)
    {- ^ (Optional) The VPC Subnet ID to launch in. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _tenancy :: !(TF.Attribute s Text)
    {- ^ (Optional) The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware. The host tenancy is not supported for the import-instance command. -}
    , _user_data :: !(TF.Attribute s Text)
    {- ^ (Optional) The user data to provide when launching the instance. Do not pass gzip-compressed data via this argument; see @user_data_base64@ instead. -}
    , _user_data_base64 :: !(TF.Attribute s Text)
    {- ^ (Optional) Can be used instead of @user_data@ to pass base64-encoded binary data directly. Use this instead of @user_data@ whenever the value is not a valid UTF-8 string. For example, gzip-encoded user data must be base64-encoded and passed via this argument to avoid corruption. -}
    , _volume_tags :: !(TF.Attribute s Text)
    {- ^ (Optional) A mapping of tags to assign to the devices created by the instance at launch time. -}
    , _vpc_security_group_ids :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of security group IDs to associate with. -}
    } deriving (Show, Eq)

instance TF.ToHCL (InstanceResource s) where
    toHCL InstanceResource{..} = TF.block $ catMaybes
        [ TF.assign "ami" <$> TF.attribute _ami
        , TF.assign "associate_public_ip_address" <$> TF.attribute _associate_public_ip_address
        , TF.assign "availability_zone" <$> TF.attribute _availability_zone
        , TF.assign "disable_api_termination" <$> TF.attribute _disable_api_termination
        , TF.assign "ebs_block_device" <$> TF.attribute _ebs_block_device
        , TF.assign "ebs_optimized" <$> TF.attribute _ebs_optimized
        , TF.assign "ephemeral_block_device" <$> TF.attribute _ephemeral_block_device
        , TF.assign "iam_instance_profile" <$> TF.attribute _iam_instance_profile
        , TF.assign "instance_initiated_shutdown_behavior" <$> TF.attribute _instance_initiated_shutdown_behavior
        , TF.assign "instance_type" <$> TF.attribute _instance_type
        , TF.assign "ipv6_address_count" <$> TF.attribute _ipv6_address_count
        , TF.assign "ipv6_addresses" <$> TF.attribute _ipv6_addresses
        , TF.assign "key_name" <$> TF.attribute _key_name
        , TF.assign "monitoring" <$> TF.attribute _monitoring
        , TF.assign "network_interface" <$> TF.attribute _network_interface
        , TF.assign "placement_group" <$> TF.attribute _placement_group
        , TF.assign "private_ip" <$> TF.attribute _private_ip
        , TF.assign "root_block_device" <$> TF.attribute _root_block_device
        , TF.assign "security_groups" <$> TF.attribute _security_groups
        , TF.assign "source_dest_check" <$> TF.attribute _source_dest_check
        , TF.assign "subnet_id" <$> TF.attribute _subnet_id
        , TF.assign "tags" <$> TF.attribute _tags
        , TF.assign "tenancy" <$> TF.attribute _tenancy
        , TF.assign "user_data" <$> TF.attribute _user_data
        , TF.assign "user_data_base64" <$> TF.attribute _user_data_base64
        , TF.assign "volume_tags" <$> TF.attribute _volume_tags
        , TF.assign "vpc_security_group_ids" <$> TF.attribute _vpc_security_group_ids
        ]

instance HasAmi (InstanceResource s) Text where
    type HasAmiThread (InstanceResource s) Text = s

    ami =
        lens (_ami :: InstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _ami = a } :: InstanceResource s)

instance HasAssociatePublicIpAddress (InstanceResource s) Text where
    type HasAssociatePublicIpAddressThread (InstanceResource s) Text = s

    associatePublicIpAddress =
        lens (_associate_public_ip_address :: InstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _associate_public_ip_address = a } :: InstanceResource s)

instance HasAvailabilityZone (InstanceResource s) TF.Zone where
    type HasAvailabilityZoneThread (InstanceResource s) TF.Zone = s

    availabilityZone =
        lens (_availability_zone :: InstanceResource s -> TF.Attribute s TF.Zone)
            (\s a -> s { _availability_zone = a } :: InstanceResource s)

instance HasDisableApiTermination (InstanceResource s) Text where
    type HasDisableApiTerminationThread (InstanceResource s) Text = s

    disableApiTermination =
        lens (_disable_api_termination :: InstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _disable_api_termination = a } :: InstanceResource s)

instance HasEbsBlockDevice (InstanceResource s) Text where
    type HasEbsBlockDeviceThread (InstanceResource s) Text = s

    ebsBlockDevice =
        lens (_ebs_block_device :: InstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _ebs_block_device = a } :: InstanceResource s)

instance HasEbsOptimized (InstanceResource s) Text where
    type HasEbsOptimizedThread (InstanceResource s) Text = s

    ebsOptimized =
        lens (_ebs_optimized :: InstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _ebs_optimized = a } :: InstanceResource s)

instance HasEphemeralBlockDevice (InstanceResource s) Text where
    type HasEphemeralBlockDeviceThread (InstanceResource s) Text = s

    ephemeralBlockDevice =
        lens (_ephemeral_block_device :: InstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _ephemeral_block_device = a } :: InstanceResource s)

instance HasIamInstanceProfile (InstanceResource s) Text where
    type HasIamInstanceProfileThread (InstanceResource s) Text = s

    iamInstanceProfile =
        lens (_iam_instance_profile :: InstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _iam_instance_profile = a } :: InstanceResource s)

instance HasInstanceInitiatedShutdownBehavior (InstanceResource s) Text where
    type HasInstanceInitiatedShutdownBehaviorThread (InstanceResource s) Text = s

    instanceInitiatedShutdownBehavior =
        lens (_instance_initiated_shutdown_behavior :: InstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _instance_initiated_shutdown_behavior = a } :: InstanceResource s)

instance HasInstanceType (InstanceResource s) Text where
    type HasInstanceTypeThread (InstanceResource s) Text = s

    instanceType =
        lens (_instance_type :: InstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _instance_type = a } :: InstanceResource s)

instance HasIpv6AddressCount (InstanceResource s) Text where
    type HasIpv6AddressCountThread (InstanceResource s) Text = s

    ipv6AddressCount =
        lens (_ipv6_address_count :: InstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _ipv6_address_count = a } :: InstanceResource s)

instance HasIpv6Addresses (InstanceResource s) Text where
    type HasIpv6AddressesThread (InstanceResource s) Text = s

    ipv6Addresses =
        lens (_ipv6_addresses :: InstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _ipv6_addresses = a } :: InstanceResource s)

instance HasKeyName (InstanceResource s) Text where
    type HasKeyNameThread (InstanceResource s) Text = s

    keyName =
        lens (_key_name :: InstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _key_name = a } :: InstanceResource s)

instance HasMonitoring (InstanceResource s) Text where
    type HasMonitoringThread (InstanceResource s) Text = s

    monitoring =
        lens (_monitoring :: InstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _monitoring = a } :: InstanceResource s)

instance HasNetworkInterface (InstanceResource s) Text where
    type HasNetworkInterfaceThread (InstanceResource s) Text = s

    networkInterface =
        lens (_network_interface :: InstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _network_interface = a } :: InstanceResource s)

instance HasPlacementGroup (InstanceResource s) Text where
    type HasPlacementGroupThread (InstanceResource s) Text = s

    placementGroup =
        lens (_placement_group :: InstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _placement_group = a } :: InstanceResource s)

instance HasPrivateIp (InstanceResource s) Text where
    type HasPrivateIpThread (InstanceResource s) Text = s

    privateIp =
        lens (_private_ip :: InstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _private_ip = a } :: InstanceResource s)

instance HasRootBlockDevice (InstanceResource s) Text where
    type HasRootBlockDeviceThread (InstanceResource s) Text = s

    rootBlockDevice =
        lens (_root_block_device :: InstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _root_block_device = a } :: InstanceResource s)

instance HasSecurityGroups (InstanceResource s) Text where
    type HasSecurityGroupsThread (InstanceResource s) Text = s

    securityGroups =
        lens (_security_groups :: InstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _security_groups = a } :: InstanceResource s)

instance HasSourceDestCheck (InstanceResource s) Text where
    type HasSourceDestCheckThread (InstanceResource s) Text = s

    sourceDestCheck =
        lens (_source_dest_check :: InstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _source_dest_check = a } :: InstanceResource s)

instance HasSubnetId (InstanceResource s) Text where
    type HasSubnetIdThread (InstanceResource s) Text = s

    subnetId =
        lens (_subnet_id :: InstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _subnet_id = a } :: InstanceResource s)

instance HasTags (InstanceResource s) TF.Tags where
    type HasTagsThread (InstanceResource s) TF.Tags = s

    tags =
        lens (_tags :: InstanceResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: InstanceResource s)

instance HasTenancy (InstanceResource s) Text where
    type HasTenancyThread (InstanceResource s) Text = s

    tenancy =
        lens (_tenancy :: InstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _tenancy = a } :: InstanceResource s)

instance HasUserData (InstanceResource s) Text where
    type HasUserDataThread (InstanceResource s) Text = s

    userData =
        lens (_user_data :: InstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _user_data = a } :: InstanceResource s)

instance HasUserDataBase64 (InstanceResource s) Text where
    type HasUserDataBase64Thread (InstanceResource s) Text = s

    userDataBase64 =
        lens (_user_data_base64 :: InstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _user_data_base64 = a } :: InstanceResource s)

instance HasVolumeTags (InstanceResource s) Text where
    type HasVolumeTagsThread (InstanceResource s) Text = s

    volumeTags =
        lens (_volume_tags :: InstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _volume_tags = a } :: InstanceResource s)

instance HasVpcSecurityGroupIds (InstanceResource s) Text where
    type HasVpcSecurityGroupIdsThread (InstanceResource s) Text = s

    vpcSecurityGroupIds =
        lens (_vpc_security_group_ids :: InstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _vpc_security_group_ids = a } :: InstanceResource s)

instanceResource :: TF.Resource TF.AWS (InstanceResource s)
instanceResource =
    TF.newResource "aws_instance" $
        InstanceResource {
              _ami = TF.Nil
            , _associate_public_ip_address = TF.Nil
            , _availability_zone = TF.Nil
            , _disable_api_termination = TF.Nil
            , _ebs_block_device = TF.Nil
            , _ebs_optimized = TF.Nil
            , _ephemeral_block_device = TF.Nil
            , _iam_instance_profile = TF.Nil
            , _instance_initiated_shutdown_behavior = TF.Nil
            , _instance_type = TF.Nil
            , _ipv6_address_count = TF.Nil
            , _ipv6_addresses = TF.Nil
            , _key_name = TF.Nil
            , _monitoring = TF.Nil
            , _network_interface = TF.Nil
            , _placement_group = TF.Nil
            , _private_ip = TF.Nil
            , _root_block_device = TF.Nil
            , _security_groups = TF.Nil
            , _source_dest_check = TF.Nil
            , _subnet_id = TF.Nil
            , _tags = TF.Nil
            , _tenancy = TF.Nil
            , _user_data = TF.Nil
            , _user_data_base64 = TF.Nil
            , _volume_tags = TF.Nil
            , _vpc_security_group_ids = TF.Nil
            }

{- | The @aws_internet_gateway@ AWS resource.

Provides a resource to create a VPC Internet Gateway.
-}
data InternetGatewayResource s = InternetGatewayResource {
      _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _vpc_id :: !(TF.Attribute s Text)
    {- ^ (Required) The VPC ID to create in. -}
    } deriving (Show, Eq)

instance TF.ToHCL (InternetGatewayResource s) where
    toHCL InternetGatewayResource{..} = TF.block $ catMaybes
        [ TF.assign "tags" <$> TF.attribute _tags
        , TF.assign "vpc_id" <$> TF.attribute _vpc_id
        ]

instance HasTags (InternetGatewayResource s) TF.Tags where
    type HasTagsThread (InternetGatewayResource s) TF.Tags = s

    tags =
        lens (_tags :: InternetGatewayResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: InternetGatewayResource s)

instance HasVpcId (InternetGatewayResource s) Text where
    type HasVpcIdThread (InternetGatewayResource s) Text = s

    vpcId =
        lens (_vpc_id :: InternetGatewayResource s -> TF.Attribute s Text)
            (\s a -> s { _vpc_id = a } :: InternetGatewayResource s)

instance HasComputedId (InternetGatewayResource s) Text

internetGatewayResource :: TF.Resource TF.AWS (InternetGatewayResource s)
internetGatewayResource =
    TF.newResource "aws_internet_gateway" $
        InternetGatewayResource {
              _tags = TF.Nil
            , _vpc_id = TF.Nil
            }

{- | The @aws_iot_certificate@ AWS resource.

Creates and manages an AWS IoT certificate.
-}
data IotCertificateResource s = IotCertificateResource {
      _active :: !(TF.Attribute s Text)
    {- ^ (Required)  Boolean flag to indicate if the certificate should be active -}
    , _csr :: !(TF.Attribute s Text)
    {- ^ (Required) The certificate signing request. Review the [IoT API Reference Guide] (http://docs.aws.amazon.com/iot/latest/apireference/API_CreateCertificateFromCsr.html) for more information on creating a certificate from a certificate signing request (CSR). -}
    } deriving (Show, Eq)

instance TF.ToHCL (IotCertificateResource s) where
    toHCL IotCertificateResource{..} = TF.block $ catMaybes
        [ TF.assign "active" <$> TF.attribute _active
        , TF.assign "csr" <$> TF.attribute _csr
        ]

instance HasActive (IotCertificateResource s) Text where
    type HasActiveThread (IotCertificateResource s) Text = s

    active =
        lens (_active :: IotCertificateResource s -> TF.Attribute s Text)
            (\s a -> s { _active = a } :: IotCertificateResource s)

instance HasCsr (IotCertificateResource s) Text where
    type HasCsrThread (IotCertificateResource s) Text = s

    csr =
        lens (_csr :: IotCertificateResource s -> TF.Attribute s Text)
            (\s a -> s { _csr = a } :: IotCertificateResource s)

instance HasComputedArn (IotCertificateResource s) Text

iotCertificateResource :: TF.Resource TF.AWS (IotCertificateResource s)
iotCertificateResource =
    TF.newResource "aws_iot_certificate" $
        IotCertificateResource {
              _active = TF.Nil
            , _csr = TF.Nil
            }

{- | The @aws_iot_policy@ AWS resource.

Provides an IoT policy.
-}
data IotPolicyResource s = IotPolicyResource {
      _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the policy. -}
    , _policy :: !(TF.Attribute s Text)
    {- ^ (Required) The policy document. This is a JSON formatted string. The heredoc syntax or @file@ function is helpful here. Use the [IoT Developer Guide] (http://docs.aws.amazon.com/iot/latest/developerguide/iot-policies.html) for more information on IoT Policies -}
    } deriving (Show, Eq)

instance TF.ToHCL (IotPolicyResource s) where
    toHCL IotPolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.attribute _name
        , TF.assign "policy" <$> TF.attribute _policy
        ]

instance HasName (IotPolicyResource s) Text where
    type HasNameThread (IotPolicyResource s) Text = s

    name =
        lens (_name :: IotPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: IotPolicyResource s)

instance HasPolicy (IotPolicyResource s) Text where
    type HasPolicyThread (IotPolicyResource s) Text = s

    policy =
        lens (_policy :: IotPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _policy = a } :: IotPolicyResource s)

instance HasComputedArn (IotPolicyResource s) Text

instance HasComputedDefaultVersionId (IotPolicyResource s) Text

instance HasComputedName (IotPolicyResource s) Text

instance HasComputedPolicy (IotPolicyResource s) Text

iotPolicyResource :: TF.Resource TF.AWS (IotPolicyResource s)
iotPolicyResource =
    TF.newResource "aws_iot_policy" $
        IotPolicyResource {
              _name = TF.Nil
            , _policy = TF.Nil
            }

{- | The @aws_key_pair@ AWS resource.

Provides an
<https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html>
resource. A key pair is used to control login access to EC2 instances.
Currently this resource requires an existing user-supplied key pair. This
key pair's public key will be registered with AWS to allow logging-in to EC2
instances. When importing an existing key pair the public key material may
be in any format supported by AWS. Supported formats (per the
<https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html#how-to-generate-your-own-key-and-import-it-to-aws>
) are:
-}
data KeyPairResource s = KeyPairResource {
      _key_name :: !(TF.Attribute s Text)
    {- ^ (Optional) The name for the key pair. -}
    , _key_name_prefix :: !(TF.Attribute s Text)
    {- ^ (Optional) Creates a unique name beginning with the specified prefix. Conflicts with @key_name@ . -}
    , _public_key :: !(TF.Attribute s Text)
    {- ^ (Required) The public key material. -}
    } deriving (Show, Eq)

instance TF.ToHCL (KeyPairResource s) where
    toHCL KeyPairResource{..} = TF.block $ catMaybes
        [ TF.assign "key_name" <$> TF.attribute _key_name
        , TF.assign "key_name_prefix" <$> TF.attribute _key_name_prefix
        , TF.assign "public_key" <$> TF.attribute _public_key
        ]

instance HasKeyName (KeyPairResource s) Text where
    type HasKeyNameThread (KeyPairResource s) Text = s

    keyName =
        lens (_key_name :: KeyPairResource s -> TF.Attribute s Text)
            (\s a -> s { _key_name = a } :: KeyPairResource s)

instance HasKeyNamePrefix (KeyPairResource s) Text where
    type HasKeyNamePrefixThread (KeyPairResource s) Text = s

    keyNamePrefix =
        lens (_key_name_prefix :: KeyPairResource s -> TF.Attribute s Text)
            (\s a -> s { _key_name_prefix = a } :: KeyPairResource s)

instance HasPublicKey (KeyPairResource s) Text where
    type HasPublicKeyThread (KeyPairResource s) Text = s

    publicKey =
        lens (_public_key :: KeyPairResource s -> TF.Attribute s Text)
            (\s a -> s { _public_key = a } :: KeyPairResource s)

instance HasComputedFingerprint (KeyPairResource s) Text

instance HasComputedKeyName (KeyPairResource s) Text

keyPairResource :: TF.Resource TF.AWS (KeyPairResource s)
keyPairResource =
    TF.newResource "aws_key_pair" $
        KeyPairResource {
              _key_name = TF.Nil
            , _key_name_prefix = TF.Nil
            , _public_key = TF.Nil
            }

{- | The @aws_kinesis_firehose_delivery_stream@ AWS resource.

Provides a Kinesis Firehose Delivery Stream resource. Amazon Kinesis
Firehose is a fully managed, elastic service to easily deliver real-time
data streams to destinations such as Amazon S3 and Amazon Redshift. For more
details, see the <https://aws.amazon.com/documentation/firehose/> .
-}
data KinesisFirehoseDeliveryStreamResource s = KinesisFirehoseDeliveryStreamResource {
      _destination :: !(TF.Attribute s Text)
    {- ^ – (Required) This is the destination to where the data is delivered. The only options are @s3@ (Deprecated, use @extended_s3@ instead), @extended_s3@ , @redshift@ , and @elasticsearch@ . -}
    , _extended_s3_configuration :: !(TF.Attribute s Text)
    {- ^ (Optional, only Required when @destination@ is @extended_s3@ ) Enhanced configuration options for the s3 destination. More details are given below. -}
    , _kinesis_source_configuration :: !(TF.Attribute s Text)
    {- ^ (Optional) Allows the ability to specify the kinesis stream that is used as the source of the firehose delivery stream. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) A name to identify the stream. This is unique to the AWS account and region the Stream is created in. -}
    , _redshift_configuration :: !(TF.Attribute s Text)
    {- ^ (Optional) Configuration options if redshift is the destination. Using @redshift_configuration@ requires the user to also specify a @s3_configuration@ block. More details are given below. -}
    , _s3_configuration :: !(TF.Attribute s Text)
    {- ^ (Optional, Deprecated, see/use @extended_s3_configuration@ unless @destination@ is @redshift@ ) Configuration options for the s3 destination (or the intermediate bucket if the destination is redshift). More details are given below. -}
    } deriving (Show, Eq)

instance TF.ToHCL (KinesisFirehoseDeliveryStreamResource s) where
    toHCL KinesisFirehoseDeliveryStreamResource{..} = TF.block $ catMaybes
        [ TF.assign "destination" <$> TF.attribute _destination
        , TF.assign "extended_s3_configuration" <$> TF.attribute _extended_s3_configuration
        , TF.assign "kinesis_source_configuration" <$> TF.attribute _kinesis_source_configuration
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "redshift_configuration" <$> TF.attribute _redshift_configuration
        , TF.assign "s3_configuration" <$> TF.attribute _s3_configuration
        ]

instance HasDestination (KinesisFirehoseDeliveryStreamResource s) Text where
    type HasDestinationThread (KinesisFirehoseDeliveryStreamResource s) Text = s

    destination =
        lens (_destination :: KinesisFirehoseDeliveryStreamResource s -> TF.Attribute s Text)
            (\s a -> s { _destination = a } :: KinesisFirehoseDeliveryStreamResource s)

instance HasExtendedS3Configuration (KinesisFirehoseDeliveryStreamResource s) Text where
    type HasExtendedS3ConfigurationThread (KinesisFirehoseDeliveryStreamResource s) Text = s

    extendedS3Configuration =
        lens (_extended_s3_configuration :: KinesisFirehoseDeliveryStreamResource s -> TF.Attribute s Text)
            (\s a -> s { _extended_s3_configuration = a } :: KinesisFirehoseDeliveryStreamResource s)

instance HasKinesisSourceConfiguration (KinesisFirehoseDeliveryStreamResource s) Text where
    type HasKinesisSourceConfigurationThread (KinesisFirehoseDeliveryStreamResource s) Text = s

    kinesisSourceConfiguration =
        lens (_kinesis_source_configuration :: KinesisFirehoseDeliveryStreamResource s -> TF.Attribute s Text)
            (\s a -> s { _kinesis_source_configuration = a } :: KinesisFirehoseDeliveryStreamResource s)

instance HasName (KinesisFirehoseDeliveryStreamResource s) Text where
    type HasNameThread (KinesisFirehoseDeliveryStreamResource s) Text = s

    name =
        lens (_name :: KinesisFirehoseDeliveryStreamResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: KinesisFirehoseDeliveryStreamResource s)

instance HasRedshiftConfiguration (KinesisFirehoseDeliveryStreamResource s) Text where
    type HasRedshiftConfigurationThread (KinesisFirehoseDeliveryStreamResource s) Text = s

    redshiftConfiguration =
        lens (_redshift_configuration :: KinesisFirehoseDeliveryStreamResource s -> TF.Attribute s Text)
            (\s a -> s { _redshift_configuration = a } :: KinesisFirehoseDeliveryStreamResource s)

instance HasS3Configuration (KinesisFirehoseDeliveryStreamResource s) Text where
    type HasS3ConfigurationThread (KinesisFirehoseDeliveryStreamResource s) Text = s

    s3Configuration =
        lens (_s3_configuration :: KinesisFirehoseDeliveryStreamResource s -> TF.Attribute s Text)
            (\s a -> s { _s3_configuration = a } :: KinesisFirehoseDeliveryStreamResource s)

instance HasComputedArn (KinesisFirehoseDeliveryStreamResource s) Text

kinesisFirehoseDeliveryStreamResource :: TF.Resource TF.AWS (KinesisFirehoseDeliveryStreamResource s)
kinesisFirehoseDeliveryStreamResource =
    TF.newResource "aws_kinesis_firehose_delivery_stream" $
        KinesisFirehoseDeliveryStreamResource {
              _destination = TF.Nil
            , _extended_s3_configuration = TF.Nil
            , _kinesis_source_configuration = TF.Nil
            , _name = TF.Nil
            , _redshift_configuration = TF.Nil
            , _s3_configuration = TF.Nil
            }

{- | The @aws_kinesis_stream@ AWS resource.

Provides a Kinesis Stream resource. Amazon Kinesis is a managed service that
scales elastically for real-time processing of streaming big data. For more
details, see the <https://aws.amazon.com/documentation/kinesis/> .
-}
data KinesisStreamResource s = KinesisStreamResource {
      _encryption_type :: !(TF.Attribute s Text)
    {- ^ (Optional) The encryption type to use. The only acceptable values are @NONE@ or @KMS@ . The default value is @NONE@ . -}
    , _kms_key_id :: !(TF.Attribute s Text)
    {- ^ (Optional) The GUID for the customer-managed KMS key to use for encryption. You can also use a Kinesis-owned master key by specifying the alias aws/kinesis. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) A name to identify the stream. This is unique to the AWS account and region the Stream is created in. -}
    , _retention_period :: !(TF.Attribute s Text)
    {- ^ (Optional) Length of time data records are accessible after they are added to the stream. The maximum value of a stream's retention period is 168 hours. Minimum value is 24. Default is 24. -}
    , _shard_count :: !(TF.Attribute s Text)
    {- ^ – (Required) The number of shards that the stream will use. Amazon has guidlines for specifying the Stream size that should be referenced when creating a Kinesis stream. See <https://docs.aws.amazon.com/kinesis/latest/dev/amazon-kinesis-streams.html> for more. -}
    , _shard_level_metrics :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of shard-level CloudWatch metrics which can be enabled for the stream. See <https://docs.aws.amazon.com/streams/latest/dev/monitoring-with-cloudwatch.html> for more. Note that the value ALL should not be used; instead you should provide an explicit list of metrics you wish to enable. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    } deriving (Show, Eq)

instance TF.ToHCL (KinesisStreamResource s) where
    toHCL KinesisStreamResource{..} = TF.block $ catMaybes
        [ TF.assign "encryption_type" <$> TF.attribute _encryption_type
        , TF.assign "kms_key_id" <$> TF.attribute _kms_key_id
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "retention_period" <$> TF.attribute _retention_period
        , TF.assign "shard_count" <$> TF.attribute _shard_count
        , TF.assign "shard_level_metrics" <$> TF.attribute _shard_level_metrics
        , TF.assign "tags" <$> TF.attribute _tags
        ]

instance HasEncryptionType (KinesisStreamResource s) Text where
    type HasEncryptionTypeThread (KinesisStreamResource s) Text = s

    encryptionType =
        lens (_encryption_type :: KinesisStreamResource s -> TF.Attribute s Text)
            (\s a -> s { _encryption_type = a } :: KinesisStreamResource s)

instance HasKmsKeyId (KinesisStreamResource s) Text where
    type HasKmsKeyIdThread (KinesisStreamResource s) Text = s

    kmsKeyId =
        lens (_kms_key_id :: KinesisStreamResource s -> TF.Attribute s Text)
            (\s a -> s { _kms_key_id = a } :: KinesisStreamResource s)

instance HasName (KinesisStreamResource s) Text where
    type HasNameThread (KinesisStreamResource s) Text = s

    name =
        lens (_name :: KinesisStreamResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: KinesisStreamResource s)

instance HasRetentionPeriod (KinesisStreamResource s) Text where
    type HasRetentionPeriodThread (KinesisStreamResource s) Text = s

    retentionPeriod =
        lens (_retention_period :: KinesisStreamResource s -> TF.Attribute s Text)
            (\s a -> s { _retention_period = a } :: KinesisStreamResource s)

instance HasShardCount (KinesisStreamResource s) Text where
    type HasShardCountThread (KinesisStreamResource s) Text = s

    shardCount =
        lens (_shard_count :: KinesisStreamResource s -> TF.Attribute s Text)
            (\s a -> s { _shard_count = a } :: KinesisStreamResource s)

instance HasShardLevelMetrics (KinesisStreamResource s) Text where
    type HasShardLevelMetricsThread (KinesisStreamResource s) Text = s

    shardLevelMetrics =
        lens (_shard_level_metrics :: KinesisStreamResource s -> TF.Attribute s Text)
            (\s a -> s { _shard_level_metrics = a } :: KinesisStreamResource s)

instance HasTags (KinesisStreamResource s) TF.Tags where
    type HasTagsThread (KinesisStreamResource s) TF.Tags = s

    tags =
        lens (_tags :: KinesisStreamResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: KinesisStreamResource s)

instance HasComputedArn (KinesisStreamResource s) Text

instance HasComputedId (KinesisStreamResource s) Text

instance HasComputedName (KinesisStreamResource s) Text

instance HasComputedShardCount (KinesisStreamResource s) Text

kinesisStreamResource :: TF.Resource TF.AWS (KinesisStreamResource s)
kinesisStreamResource =
    TF.newResource "aws_kinesis_stream" $
        KinesisStreamResource {
              _encryption_type = TF.Nil
            , _kms_key_id = TF.Nil
            , _name = TF.Nil
            , _retention_period = TF.Nil
            , _shard_count = TF.Nil
            , _shard_level_metrics = TF.Nil
            , _tags = TF.Nil
            }

{- | The @aws_kms_alias@ AWS resource.

Provides an alias for a KMS customer master key. AWS Console enforces 1-to-1
mapping between aliases & keys, but API (hence Terraform too) allows you to
create as many aliases as the
<http://docs.aws.amazon.com/kms/latest/developerguide/limits.html> allow
you.
-}
data KmsAliasResource s = KmsAliasResource {
      _name :: !(TF.Attribute s Text)
    {- ^ (Optional) The display name of the alias. The name must start with the word "alias" followed by a forward slash (alias/) -}
    , _name_prefix :: !(TF.Attribute s Text)
    {- ^ (Optional) Creates an unique alias beginning with the specified prefix. The name must start with the word "alias" followed by a forward slash (alias/).  Conflicts with @name@ . -}
    , _target_key_id :: !(TF.Attribute s Text)
    {- ^ (Required) Identifier for the key for which the alias is for, can be either an ARN or key_id. -}
    } deriving (Show, Eq)

instance TF.ToHCL (KmsAliasResource s) where
    toHCL KmsAliasResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.attribute _name
        , TF.assign "name_prefix" <$> TF.attribute _name_prefix
        , TF.assign "target_key_id" <$> TF.attribute _target_key_id
        ]

instance HasName (KmsAliasResource s) Text where
    type HasNameThread (KmsAliasResource s) Text = s

    name =
        lens (_name :: KmsAliasResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: KmsAliasResource s)

instance HasNamePrefix (KmsAliasResource s) Text where
    type HasNamePrefixThread (KmsAliasResource s) Text = s

    namePrefix =
        lens (_name_prefix :: KmsAliasResource s -> TF.Attribute s Text)
            (\s a -> s { _name_prefix = a } :: KmsAliasResource s)

instance HasTargetKeyId (KmsAliasResource s) Text where
    type HasTargetKeyIdThread (KmsAliasResource s) Text = s

    targetKeyId =
        lens (_target_key_id :: KmsAliasResource s -> TF.Attribute s Text)
            (\s a -> s { _target_key_id = a } :: KmsAliasResource s)

instance HasComputedArn (KmsAliasResource s) Text

kmsAliasResource :: TF.Resource TF.AWS (KmsAliasResource s)
kmsAliasResource =
    TF.newResource "aws_kms_alias" $
        KmsAliasResource {
              _name = TF.Nil
            , _name_prefix = TF.Nil
            , _target_key_id = TF.Nil
            }

{- | The @aws_kms_key@ AWS resource.

Provides a KMS customer master key.
-}
data KmsKeyResource s = KmsKeyResource {
      _deletion_window_in_days :: !(TF.Attribute s Text)
    {- ^ (Optional) Duration in days after which the key is deleted after destruction of the resource, must be between 7 and 30 days. Defaults to 30 days. -}
    , _description :: !(TF.Attribute s Text)
    {- ^ (Optional) The description of the key as viewed in AWS console. -}
    , _enable_key_rotation :: !(TF.Attribute s TF.Bool)
    {- ^ (Optional) Specifies whether <http://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html> is enabled. Defaults to false. -}
    , _is_enabled :: !(TF.Attribute s TF.Bool)
    {- ^ (Optional) Specifies whether the key is enabled. Defaults to true. -}
    , _key_usage :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies the intended use of the key. Defaults to ENCRYPT_DECRYPT, and only symmetric encryption and decryption are supported. -}
    , _policy :: !(TF.Attribute s Text)
    {- ^ (Optional) A valid policy JSON document. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the object. -}
    } deriving (Show, Eq)

instance TF.ToHCL (KmsKeyResource s) where
    toHCL KmsKeyResource{..} = TF.block $ catMaybes
        [ TF.assign "deletion_window_in_days" <$> TF.attribute _deletion_window_in_days
        , TF.assign "description" <$> TF.attribute _description
        , TF.assign "enable_key_rotation" <$> TF.attribute _enable_key_rotation
        , TF.assign "is_enabled" <$> TF.attribute _is_enabled
        , TF.assign "key_usage" <$> TF.attribute _key_usage
        , TF.assign "policy" <$> TF.attribute _policy
        , TF.assign "tags" <$> TF.attribute _tags
        ]

instance HasDeletionWindowInDays (KmsKeyResource s) Text where
    type HasDeletionWindowInDaysThread (KmsKeyResource s) Text = s

    deletionWindowInDays =
        lens (_deletion_window_in_days :: KmsKeyResource s -> TF.Attribute s Text)
            (\s a -> s { _deletion_window_in_days = a } :: KmsKeyResource s)

instance HasDescription (KmsKeyResource s) Text where
    type HasDescriptionThread (KmsKeyResource s) Text = s

    description =
        lens (_description :: KmsKeyResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: KmsKeyResource s)

instance HasEnableKeyRotation (KmsKeyResource s) TF.Bool where
    type HasEnableKeyRotationThread (KmsKeyResource s) TF.Bool = s

    enableKeyRotation =
        lens (_enable_key_rotation :: KmsKeyResource s -> TF.Attribute s TF.Bool)
            (\s a -> s { _enable_key_rotation = a } :: KmsKeyResource s)

instance HasIsEnabled (KmsKeyResource s) TF.Bool where
    type HasIsEnabledThread (KmsKeyResource s) TF.Bool = s

    isEnabled =
        lens (_is_enabled :: KmsKeyResource s -> TF.Attribute s TF.Bool)
            (\s a -> s { _is_enabled = a } :: KmsKeyResource s)

instance HasKeyUsage (KmsKeyResource s) Text where
    type HasKeyUsageThread (KmsKeyResource s) Text = s

    keyUsage =
        lens (_key_usage :: KmsKeyResource s -> TF.Attribute s Text)
            (\s a -> s { _key_usage = a } :: KmsKeyResource s)

instance HasPolicy (KmsKeyResource s) Text where
    type HasPolicyThread (KmsKeyResource s) Text = s

    policy =
        lens (_policy :: KmsKeyResource s -> TF.Attribute s Text)
            (\s a -> s { _policy = a } :: KmsKeyResource s)

instance HasTags (KmsKeyResource s) TF.Tags where
    type HasTagsThread (KmsKeyResource s) TF.Tags = s

    tags =
        lens (_tags :: KmsKeyResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: KmsKeyResource s)

instance HasComputedArn (KmsKeyResource s) Text

instance HasComputedKeyId (KmsKeyResource s) Text

kmsKeyResource :: TF.Resource TF.AWS (KmsKeyResource s)
kmsKeyResource =
    TF.newResource "aws_kms_key" $
        KmsKeyResource {
              _deletion_window_in_days = TF.Nil
            , _description = TF.Nil
            , _enable_key_rotation = TF.Nil
            , _is_enabled = TF.Nil
            , _key_usage = TF.Nil
            , _policy = TF.Nil
            , _tags = TF.Nil
            }

{- | The @aws_lambda_alias@ AWS resource.

Creates a Lambda function alias. Creates an alias that points to the
specified Lambda function version. For information about Lambda and how to
use it, see <http://docs.aws.amazon.com/lambda/latest/dg/welcome.html> For
information about function aliases, see
<http://docs.aws.amazon.com/lambda/latest/dg/API_CreateAlias.html> in the
API docs.
-}
data LambdaAliasResource s = LambdaAliasResource {
      _description :: !(TF.Attribute s Text)
    {- ^ (Optional) Description of the alias. -}
    , _function_name :: !(TF.Attribute s Text)
    {- ^ (Required) The function ARN of the Lambda function for which you want to create an alias. -}
    , _function_version :: !(TF.Attribute s Text)
    {- ^ (Required) Lambda function version for which you are creating the alias. Pattern: @(\$LATEST|[0-9]+)@ . -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) Name for the alias you are creating. Pattern: @(?!^[0-9]+$)([a-zA-Z0-9-_]+)@ -}
    } deriving (Show, Eq)

instance TF.ToHCL (LambdaAliasResource s) where
    toHCL LambdaAliasResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.attribute _description
        , TF.assign "function_name" <$> TF.attribute _function_name
        , TF.assign "function_version" <$> TF.attribute _function_version
        , TF.assign "name" <$> TF.attribute _name
        ]

instance HasDescription (LambdaAliasResource s) Text where
    type HasDescriptionThread (LambdaAliasResource s) Text = s

    description =
        lens (_description :: LambdaAliasResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: LambdaAliasResource s)

instance HasFunctionName (LambdaAliasResource s) Text where
    type HasFunctionNameThread (LambdaAliasResource s) Text = s

    functionName =
        lens (_function_name :: LambdaAliasResource s -> TF.Attribute s Text)
            (\s a -> s { _function_name = a } :: LambdaAliasResource s)

instance HasFunctionVersion (LambdaAliasResource s) Text where
    type HasFunctionVersionThread (LambdaAliasResource s) Text = s

    functionVersion =
        lens (_function_version :: LambdaAliasResource s -> TF.Attribute s Text)
            (\s a -> s { _function_version = a } :: LambdaAliasResource s)

instance HasName (LambdaAliasResource s) Text where
    type HasNameThread (LambdaAliasResource s) Text = s

    name =
        lens (_name :: LambdaAliasResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: LambdaAliasResource s)

instance HasComputedArn (LambdaAliasResource s) Text

lambdaAliasResource :: TF.Resource TF.AWS (LambdaAliasResource s)
lambdaAliasResource =
    TF.newResource "aws_lambda_alias" $
        LambdaAliasResource {
              _description = TF.Nil
            , _function_name = TF.Nil
            , _function_version = TF.Nil
            , _name = TF.Nil
            }

{- | The @aws_lambda_event_source_mapping@ AWS resource.

Provides a Lambda event source mapping. This allows Lambda functions to get
events from Kinesis and DynamoDB. For information about Lambda and how to
use it, see <http://docs.aws.amazon.com/lambda/latest/dg/welcome.html> For
information about event source mappings, see
<http://docs.aws.amazon.com/lambda/latest/dg/API_CreateEventSourceMapping.html>
in the API docs.
-}
data LambdaEventSourceMappingResource s = LambdaEventSourceMappingResource {
      _batch_size :: !(TF.Attribute s Text)
    {- ^ (Optional) The largest number of records that Lambda will retrieve from your event source at the time of invocation. Defaults to @100@ . -}
    , _enabled :: !(TF.Attribute s TF.Bool)
    {- ^ (Optional) Determines if the mapping will be enabled on creation. Defaults to @true@ . -}
    , _event_source_arn :: !(TF.Attribute s Text)
    {- ^ (Required) The event source ARN - can either be a Kinesis or DynamoDB stream. -}
    , _function_name :: !(TF.Attribute s Text)
    {- ^ (Required) The name or the ARN of the Lambda function that will be subscribing to events. -}
    , _starting_position :: !(TF.Attribute s Text)
    {- ^ (Required) The position in the stream where AWS Lambda should start reading. Can be one of either @TRIM_HORIZON@ or @LATEST@ . -}
    } deriving (Show, Eq)

instance TF.ToHCL (LambdaEventSourceMappingResource s) where
    toHCL LambdaEventSourceMappingResource{..} = TF.block $ catMaybes
        [ TF.assign "batch_size" <$> TF.attribute _batch_size
        , TF.assign "enabled" <$> TF.attribute _enabled
        , TF.assign "event_source_arn" <$> TF.attribute _event_source_arn
        , TF.assign "function_name" <$> TF.attribute _function_name
        , TF.assign "starting_position" <$> TF.attribute _starting_position
        ]

instance HasBatchSize (LambdaEventSourceMappingResource s) Text where
    type HasBatchSizeThread (LambdaEventSourceMappingResource s) Text = s

    batchSize =
        lens (_batch_size :: LambdaEventSourceMappingResource s -> TF.Attribute s Text)
            (\s a -> s { _batch_size = a } :: LambdaEventSourceMappingResource s)

instance HasEnabled (LambdaEventSourceMappingResource s) TF.Bool where
    type HasEnabledThread (LambdaEventSourceMappingResource s) TF.Bool = s

    enabled =
        lens (_enabled :: LambdaEventSourceMappingResource s -> TF.Attribute s TF.Bool)
            (\s a -> s { _enabled = a } :: LambdaEventSourceMappingResource s)

instance HasEventSourceArn (LambdaEventSourceMappingResource s) Text where
    type HasEventSourceArnThread (LambdaEventSourceMappingResource s) Text = s

    eventSourceArn =
        lens (_event_source_arn :: LambdaEventSourceMappingResource s -> TF.Attribute s Text)
            (\s a -> s { _event_source_arn = a } :: LambdaEventSourceMappingResource s)

instance HasFunctionName (LambdaEventSourceMappingResource s) Text where
    type HasFunctionNameThread (LambdaEventSourceMappingResource s) Text = s

    functionName =
        lens (_function_name :: LambdaEventSourceMappingResource s -> TF.Attribute s Text)
            (\s a -> s { _function_name = a } :: LambdaEventSourceMappingResource s)

instance HasStartingPosition (LambdaEventSourceMappingResource s) Text where
    type HasStartingPositionThread (LambdaEventSourceMappingResource s) Text = s

    startingPosition =
        lens (_starting_position :: LambdaEventSourceMappingResource s -> TF.Attribute s Text)
            (\s a -> s { _starting_position = a } :: LambdaEventSourceMappingResource s)

instance HasComputedFunctionArn (LambdaEventSourceMappingResource s) Text

instance HasComputedLastModified (LambdaEventSourceMappingResource s) Text

instance HasComputedLastProcessingResult (LambdaEventSourceMappingResource s) Text

instance HasComputedState (LambdaEventSourceMappingResource s) Text

instance HasComputedStateTransitionReason (LambdaEventSourceMappingResource s) Text

instance HasComputedUuid (LambdaEventSourceMappingResource s) Text

lambdaEventSourceMappingResource :: TF.Resource TF.AWS (LambdaEventSourceMappingResource s)
lambdaEventSourceMappingResource =
    TF.newResource "aws_lambda_event_source_mapping" $
        LambdaEventSourceMappingResource {
              _batch_size = TF.Nil
            , _enabled = TF.Nil
            , _event_source_arn = TF.Nil
            , _function_name = TF.Nil
            , _starting_position = TF.Nil
            }

{- | The @aws_lambda_function@ AWS resource.

Provides a Lambda Function resource. Lambda allows you to trigger execution
of code in response to events in AWS. The Lambda Function itself includes
source code and runtime configuration. For information about Lambda and how
to use it, see <https://docs.aws.amazon.com/lambda/latest/dg/welcome.html>
-}
data LambdaFunctionResource s = LambdaFunctionResource {
      _dead_letter_config :: !(TF.Attribute s Text)
    {- ^ (Optional) Nested block to configure the function's dead letter queue . See details below. -}
    , _description :: !(TF.Attribute s Text)
    {- ^ (Optional) Description of what your Lambda Function does. -}
    , _environment :: !(TF.Attribute s Text)
    {- ^ (Optional) The Lambda environment's configuration settings. Fields documented below. -}
    , _filename :: !(TF.Attribute s Text)
    {- ^ (Optional) The path to the function's deployment package within the local filesystem. If defined, The @s3_@ -prefixed options cannot be used. -}
    , _function_name :: !(TF.Attribute s Text)
    {- ^ (Required) A unique name for your Lambda Function. -}
    , _handler :: !(TF.Attribute s Text)
    {- ^ (Required) The function <https://docs.aws.amazon.com/lambda/latest/dg/walkthrough-custom-events-create-test-function.html> in your code. -}
    , _kms_key_arn :: !(TF.Attribute s Text)
    {- ^ (Optional) The ARN for the KMS encryption key. -}
    , _memory_size :: !(TF.Attribute s Text)
    {- ^ (Optional) Amount of memory in MB your Lambda Function can use at runtime. Defaults to @128@ . See <https://docs.aws.amazon.com/lambda/latest/dg/limits.html> -}
    , _publish :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to publish creation/change as new Lambda Function Version. Defaults to @false@ . -}
    , _reserved_concurrent_executions :: !(TF.Attribute s Text)
    {- ^ (Optional) The amount of reserved concurrent executions for this lambda function. Defaults to Unreserved Concurrency Limits. See <https://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html> -}
    , _role :: !(TF.Attribute s Text)
    {- ^ (Required) IAM role attached to the Lambda Function. This governs both who / what can invoke your Lambda Function, as well as what resources our Lambda Function has access to. See <https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html> for more details. -}
    , _runtime :: !(TF.Attribute s Text)
    {- ^ (Required) See <https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime> for valid values. -}
    , _s3_bucket :: !(TF.Attribute s Text)
    {- ^ (Optional) The S3 bucket location containing the function's deployment package. Conflicts with @filename@ . -}
    , _s3_key :: !(TF.Attribute s Text)
    {- ^ (Optional) The S3 key of an object containing the function's deployment package. Conflicts with @filename@ . -}
    , _s3_object_version :: !(TF.Attribute s Text)
    {- ^ (Optional) The object version containing the function's deployment package. Conflicts with @filename@ . -}
    , _source_code_hash :: !(TF.Attribute s Text)
    {- ^ (Optional) Used to trigger updates. Must be set to a base64-encoded SHA256 hash of the package file specified with either @filename@ or @s3_key@ . The usual way to set this is @${base64sha256(file("file.zip"))}@ , where "file.zip" is the local filename of the lambda function source archive. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the object. -}
    , _timeout :: !(TF.Attribute s Text)
    {- ^ (Optional) The amount of time your Lambda Function has to run in seconds. Defaults to @3@ . See <https://docs.aws.amazon.com/lambda/latest/dg/limits.html> -}
    , _vpc_config :: !(TF.Attribute s Text)
    {- ^ (Optional) Provide this to allow your function to access your VPC. Fields documented below. See <http://docs.aws.amazon.com/lambda/latest/dg/vpc.html> -}
    } deriving (Show, Eq)

instance TF.ToHCL (LambdaFunctionResource s) where
    toHCL LambdaFunctionResource{..} = TF.block $ catMaybes
        [ TF.assign "dead_letter_config" <$> TF.attribute _dead_letter_config
        , TF.assign "description" <$> TF.attribute _description
        , TF.assign "environment" <$> TF.attribute _environment
        , TF.assign "filename" <$> TF.attribute _filename
        , TF.assign "function_name" <$> TF.attribute _function_name
        , TF.assign "handler" <$> TF.attribute _handler
        , TF.assign "kms_key_arn" <$> TF.attribute _kms_key_arn
        , TF.assign "memory_size" <$> TF.attribute _memory_size
        , TF.assign "publish" <$> TF.attribute _publish
        , TF.assign "reserved_concurrent_executions" <$> TF.attribute _reserved_concurrent_executions
        , TF.assign "role" <$> TF.attribute _role
        , TF.assign "runtime" <$> TF.attribute _runtime
        , TF.assign "s3_bucket" <$> TF.attribute _s3_bucket
        , TF.assign "s3_key" <$> TF.attribute _s3_key
        , TF.assign "s3_object_version" <$> TF.attribute _s3_object_version
        , TF.assign "source_code_hash" <$> TF.attribute _source_code_hash
        , TF.assign "tags" <$> TF.attribute _tags
        , TF.assign "timeout" <$> TF.attribute _timeout
        , TF.assign "vpc_config" <$> TF.attribute _vpc_config
        ]

instance HasDeadLetterConfig (LambdaFunctionResource s) Text where
    type HasDeadLetterConfigThread (LambdaFunctionResource s) Text = s

    deadLetterConfig =
        lens (_dead_letter_config :: LambdaFunctionResource s -> TF.Attribute s Text)
            (\s a -> s { _dead_letter_config = a } :: LambdaFunctionResource s)

instance HasDescription (LambdaFunctionResource s) Text where
    type HasDescriptionThread (LambdaFunctionResource s) Text = s

    description =
        lens (_description :: LambdaFunctionResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: LambdaFunctionResource s)

instance HasEnvironment (LambdaFunctionResource s) Text where
    type HasEnvironmentThread (LambdaFunctionResource s) Text = s

    environment =
        lens (_environment :: LambdaFunctionResource s -> TF.Attribute s Text)
            (\s a -> s { _environment = a } :: LambdaFunctionResource s)

instance HasFilename (LambdaFunctionResource s) Text where
    type HasFilenameThread (LambdaFunctionResource s) Text = s

    filename =
        lens (_filename :: LambdaFunctionResource s -> TF.Attribute s Text)
            (\s a -> s { _filename = a } :: LambdaFunctionResource s)

instance HasFunctionName (LambdaFunctionResource s) Text where
    type HasFunctionNameThread (LambdaFunctionResource s) Text = s

    functionName =
        lens (_function_name :: LambdaFunctionResource s -> TF.Attribute s Text)
            (\s a -> s { _function_name = a } :: LambdaFunctionResource s)

instance HasHandler (LambdaFunctionResource s) Text where
    type HasHandlerThread (LambdaFunctionResource s) Text = s

    handler =
        lens (_handler :: LambdaFunctionResource s -> TF.Attribute s Text)
            (\s a -> s { _handler = a } :: LambdaFunctionResource s)

instance HasKmsKeyArn (LambdaFunctionResource s) Text where
    type HasKmsKeyArnThread (LambdaFunctionResource s) Text = s

    kmsKeyArn =
        lens (_kms_key_arn :: LambdaFunctionResource s -> TF.Attribute s Text)
            (\s a -> s { _kms_key_arn = a } :: LambdaFunctionResource s)

instance HasMemorySize (LambdaFunctionResource s) Text where
    type HasMemorySizeThread (LambdaFunctionResource s) Text = s

    memorySize =
        lens (_memory_size :: LambdaFunctionResource s -> TF.Attribute s Text)
            (\s a -> s { _memory_size = a } :: LambdaFunctionResource s)

instance HasPublish (LambdaFunctionResource s) Text where
    type HasPublishThread (LambdaFunctionResource s) Text = s

    publish =
        lens (_publish :: LambdaFunctionResource s -> TF.Attribute s Text)
            (\s a -> s { _publish = a } :: LambdaFunctionResource s)

instance HasReservedConcurrentExecutions (LambdaFunctionResource s) Text where
    type HasReservedConcurrentExecutionsThread (LambdaFunctionResource s) Text = s

    reservedConcurrentExecutions =
        lens (_reserved_concurrent_executions :: LambdaFunctionResource s -> TF.Attribute s Text)
            (\s a -> s { _reserved_concurrent_executions = a } :: LambdaFunctionResource s)

instance HasRole (LambdaFunctionResource s) Text where
    type HasRoleThread (LambdaFunctionResource s) Text = s

    role =
        lens (_role :: LambdaFunctionResource s -> TF.Attribute s Text)
            (\s a -> s { _role = a } :: LambdaFunctionResource s)

instance HasRuntime (LambdaFunctionResource s) Text where
    type HasRuntimeThread (LambdaFunctionResource s) Text = s

    runtime =
        lens (_runtime :: LambdaFunctionResource s -> TF.Attribute s Text)
            (\s a -> s { _runtime = a } :: LambdaFunctionResource s)

instance HasS3Bucket (LambdaFunctionResource s) Text where
    type HasS3BucketThread (LambdaFunctionResource s) Text = s

    s3Bucket =
        lens (_s3_bucket :: LambdaFunctionResource s -> TF.Attribute s Text)
            (\s a -> s { _s3_bucket = a } :: LambdaFunctionResource s)

instance HasS3Key (LambdaFunctionResource s) Text where
    type HasS3KeyThread (LambdaFunctionResource s) Text = s

    s3Key =
        lens (_s3_key :: LambdaFunctionResource s -> TF.Attribute s Text)
            (\s a -> s { _s3_key = a } :: LambdaFunctionResource s)

instance HasS3ObjectVersion (LambdaFunctionResource s) Text where
    type HasS3ObjectVersionThread (LambdaFunctionResource s) Text = s

    s3ObjectVersion =
        lens (_s3_object_version :: LambdaFunctionResource s -> TF.Attribute s Text)
            (\s a -> s { _s3_object_version = a } :: LambdaFunctionResource s)

instance HasSourceCodeHash (LambdaFunctionResource s) Text where
    type HasSourceCodeHashThread (LambdaFunctionResource s) Text = s

    sourceCodeHash =
        lens (_source_code_hash :: LambdaFunctionResource s -> TF.Attribute s Text)
            (\s a -> s { _source_code_hash = a } :: LambdaFunctionResource s)

instance HasTags (LambdaFunctionResource s) TF.Tags where
    type HasTagsThread (LambdaFunctionResource s) TF.Tags = s

    tags =
        lens (_tags :: LambdaFunctionResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: LambdaFunctionResource s)

instance HasTimeout (LambdaFunctionResource s) Text where
    type HasTimeoutThread (LambdaFunctionResource s) Text = s

    timeout =
        lens (_timeout :: LambdaFunctionResource s -> TF.Attribute s Text)
            (\s a -> s { _timeout = a } :: LambdaFunctionResource s)

instance HasVpcConfig (LambdaFunctionResource s) Text where
    type HasVpcConfigThread (LambdaFunctionResource s) Text = s

    vpcConfig =
        lens (_vpc_config :: LambdaFunctionResource s -> TF.Attribute s Text)
            (\s a -> s { _vpc_config = a } :: LambdaFunctionResource s)

instance HasComputedArn (LambdaFunctionResource s) Text

instance HasComputedInvokeArn (LambdaFunctionResource s) Text

instance HasComputedKmsKeyArn (LambdaFunctionResource s) Text

instance HasComputedLastModified (LambdaFunctionResource s) Text

instance HasComputedQualifiedArn (LambdaFunctionResource s) Text

instance HasComputedSourceCodeHash (LambdaFunctionResource s) Text

instance HasComputedVersion (LambdaFunctionResource s) Text

lambdaFunctionResource :: TF.Resource TF.AWS (LambdaFunctionResource s)
lambdaFunctionResource =
    TF.newResource "aws_lambda_function" $
        LambdaFunctionResource {
              _dead_letter_config = TF.Nil
            , _description = TF.Nil
            , _environment = TF.Nil
            , _filename = TF.Nil
            , _function_name = TF.Nil
            , _handler = TF.Nil
            , _kms_key_arn = TF.Nil
            , _memory_size = TF.Nil
            , _publish = TF.Nil
            , _reserved_concurrent_executions = TF.Nil
            , _role = TF.Nil
            , _runtime = TF.Nil
            , _s3_bucket = TF.Nil
            , _s3_key = TF.Nil
            , _s3_object_version = TF.Nil
            , _source_code_hash = TF.Nil
            , _tags = TF.Nil
            , _timeout = TF.Nil
            , _vpc_config = TF.Nil
            }

{- | The @aws_lambda_permission@ AWS resource.

Creates a Lambda permission to allow external sources invoking the Lambda
function (e.g. CloudWatch Event Rule, SNS or S3).
-}
data LambdaPermissionResource s = LambdaPermissionResource {
      _action :: !(TF.Attribute s Text)
    {- ^ (Required) The AWS Lambda action you want to allow in this statement. (e.g. @lambda:InvokeFunction@ ) -}
    , _function_name :: !(TF.Attribute s Text)
    {- ^ (Required) Name of the Lambda function whose resource policy you are updating -}
    , _principal :: !(TF.Attribute s Text)
    {- ^ (Required) The principal who is getting this permission. e.g. @s3.amazonaws.com@ , an AWS account ID, or any valid AWS service principal such as @events.amazonaws.com@ or @sns.amazonaws.com@ . -}
    , _qualifier :: !(TF.Attribute s Text)
    {- ^ (Optional) Query parameter to specify function version or alias name. The permission will then apply to the specific qualified ARN. e.g. @arn:aws:lambda:aws-region:acct-id:function:function-name:2@ -}
    , _source_account :: !(TF.Attribute s Text)
    {- ^ (Optional) The AWS account ID (without a hyphen) of the source owner. -}
    , _source_arn :: !(TF.Attribute s Text)
    {- ^ (Optional) When granting Amazon S3 or CloudWatch Events permission to invoke your function, you should specify this field with the Amazon Resource Name (ARN) for the S3 Bucket or CloudWatch Events Rule as its value.  This ensures that only events generated from the specified bucket or rule can invoke the function. API Gateway ARNs have a unique structure described <http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-control-access-using-iam-policies-to-invoke-api.html> . -}
    , _statement_id :: !(TF.Attribute s Text)
    {- ^ (Required) A unique statement identifier. -}
    } deriving (Show, Eq)

instance TF.ToHCL (LambdaPermissionResource s) where
    toHCL LambdaPermissionResource{..} = TF.block $ catMaybes
        [ TF.assign "action" <$> TF.attribute _action
        , TF.assign "function_name" <$> TF.attribute _function_name
        , TF.assign "principal" <$> TF.attribute _principal
        , TF.assign "qualifier" <$> TF.attribute _qualifier
        , TF.assign "source_account" <$> TF.attribute _source_account
        , TF.assign "source_arn" <$> TF.attribute _source_arn
        , TF.assign "statement_id" <$> TF.attribute _statement_id
        ]

instance HasAction (LambdaPermissionResource s) Text where
    type HasActionThread (LambdaPermissionResource s) Text = s

    action =
        lens (_action :: LambdaPermissionResource s -> TF.Attribute s Text)
            (\s a -> s { _action = a } :: LambdaPermissionResource s)

instance HasFunctionName (LambdaPermissionResource s) Text where
    type HasFunctionNameThread (LambdaPermissionResource s) Text = s

    functionName =
        lens (_function_name :: LambdaPermissionResource s -> TF.Attribute s Text)
            (\s a -> s { _function_name = a } :: LambdaPermissionResource s)

instance HasPrincipal (LambdaPermissionResource s) Text where
    type HasPrincipalThread (LambdaPermissionResource s) Text = s

    principal =
        lens (_principal :: LambdaPermissionResource s -> TF.Attribute s Text)
            (\s a -> s { _principal = a } :: LambdaPermissionResource s)

instance HasQualifier (LambdaPermissionResource s) Text where
    type HasQualifierThread (LambdaPermissionResource s) Text = s

    qualifier =
        lens (_qualifier :: LambdaPermissionResource s -> TF.Attribute s Text)
            (\s a -> s { _qualifier = a } :: LambdaPermissionResource s)

instance HasSourceAccount (LambdaPermissionResource s) Text where
    type HasSourceAccountThread (LambdaPermissionResource s) Text = s

    sourceAccount =
        lens (_source_account :: LambdaPermissionResource s -> TF.Attribute s Text)
            (\s a -> s { _source_account = a } :: LambdaPermissionResource s)

instance HasSourceArn (LambdaPermissionResource s) Text where
    type HasSourceArnThread (LambdaPermissionResource s) Text = s

    sourceArn =
        lens (_source_arn :: LambdaPermissionResource s -> TF.Attribute s Text)
            (\s a -> s { _source_arn = a } :: LambdaPermissionResource s)

instance HasStatementId (LambdaPermissionResource s) Text where
    type HasStatementIdThread (LambdaPermissionResource s) Text = s

    statementId =
        lens (_statement_id :: LambdaPermissionResource s -> TF.Attribute s Text)
            (\s a -> s { _statement_id = a } :: LambdaPermissionResource s)

lambdaPermissionResource :: TF.Resource TF.AWS (LambdaPermissionResource s)
lambdaPermissionResource =
    TF.newResource "aws_lambda_permission" $
        LambdaPermissionResource {
              _action = TF.Nil
            , _function_name = TF.Nil
            , _principal = TF.Nil
            , _qualifier = TF.Nil
            , _source_account = TF.Nil
            , _source_arn = TF.Nil
            , _statement_id = TF.Nil
            }

{- | The @aws_launch_configuration@ AWS resource.

Provides a resource to create a new launch configuration, used for
autoscaling groups.
-}
data LaunchConfigurationResource s = LaunchConfigurationResource {
      _associate_public_ip_address :: !(TF.Attribute s Text)
    {- ^ (Optional) Associate a public ip address with an instance in a VPC. -}
    , _ebs_block_device :: !(TF.Attribute s Text)
    {- ^ (Optional) Additional EBS block devices to attach to the instance.  See <#block-devices> below for details. -}
    , _ebs_optimized :: !(TF.Attribute s Text)
    {- ^ (Optional) If true, the launched EC2 instance will be EBS-optimized. -}
    , _enable_monitoring :: !(TF.Attribute s TF.Bool)
    {- ^ (Optional) Enables/disables detailed monitoring. This is enabled by default. -}
    , _ephemeral_block_device :: !(TF.Attribute s Text)
    {- ^ (Optional) Customize Ephemeral (also known as "Instance Store") volumes on the instance. See <#block-devices> below for details. -}
    , _iam_instance_profile :: !(TF.Attribute s Text)
    {- ^ (Optional) The IAM instance profile to associate with launched instances. -}
    , _image_id :: !(TF.Attribute s Text)
    {- ^ (Required) The EC2 image ID to launch. -}
    , _instance_type :: !(TF.Attribute s Text)
    {- ^ (Required) The size of instance to launch. -}
    , _key_name :: !(TF.Attribute s Text)
    {- ^ (Optional) The key name that should be used for the instance. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Optional) The name of the launch configuration. If you leave this blank, Terraform will auto-generate a unique name. -}
    , _name_prefix :: !(TF.Attribute s Text)
    {- ^ (Optional) Creates a unique name beginning with the specified prefix. Conflicts with @name@ . -}
    , _placement_tenancy :: !(TF.Attribute s Text)
    {- ^ (Optional) The tenancy of the instance. Valid values are @"default"@ or @"dedicated"@ , see <http://docs.aws.amazon.com/AutoScaling/latest/APIReference/API_CreateLaunchConfiguration.html> for more details -}
    , _root_block_device :: !(TF.Attribute s Text)
    {- ^ (Optional) Customize details about the root block device of the instance. See <#block-devices> below for details. -}
    , _security_groups :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of associated security group IDS. -}
    , _spot_price :: !(TF.Attribute s Text)
    {- ^ (Optional) The price to use for reserving spot instances. -}
    , _user_data :: !(TF.Attribute s Text)
    {- ^ (Optional) The user data to provide when launching the instance. -}
    , _vpc_classic_link_id :: !(TF.Attribute s Text)
    {- ^ (Optional) The ID of a ClassicLink-enabled VPC. Only applies to EC2-Classic instances. (eg. @vpc-2730681a@ ) -}
    , _vpc_classic_link_security_groups :: !(TF.Attribute s Text)
    {- ^ (Optional) The IDs of one or more security groups for the specified ClassicLink-enabled VPC (eg. @sg-46ae3d11@ ). -}
    } deriving (Show, Eq)

instance TF.ToHCL (LaunchConfigurationResource s) where
    toHCL LaunchConfigurationResource{..} = TF.block $ catMaybes
        [ TF.assign "associate_public_ip_address" <$> TF.attribute _associate_public_ip_address
        , TF.assign "ebs_block_device" <$> TF.attribute _ebs_block_device
        , TF.assign "ebs_optimized" <$> TF.attribute _ebs_optimized
        , TF.assign "enable_monitoring" <$> TF.attribute _enable_monitoring
        , TF.assign "ephemeral_block_device" <$> TF.attribute _ephemeral_block_device
        , TF.assign "iam_instance_profile" <$> TF.attribute _iam_instance_profile
        , TF.assign "image_id" <$> TF.attribute _image_id
        , TF.assign "instance_type" <$> TF.attribute _instance_type
        , TF.assign "key_name" <$> TF.attribute _key_name
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "name_prefix" <$> TF.attribute _name_prefix
        , TF.assign "placement_tenancy" <$> TF.attribute _placement_tenancy
        , TF.assign "root_block_device" <$> TF.attribute _root_block_device
        , TF.assign "security_groups" <$> TF.attribute _security_groups
        , TF.assign "spot_price" <$> TF.attribute _spot_price
        , TF.assign "user_data" <$> TF.attribute _user_data
        , TF.assign "vpc_classic_link_id" <$> TF.attribute _vpc_classic_link_id
        , TF.assign "vpc_classic_link_security_groups" <$> TF.attribute _vpc_classic_link_security_groups
        ]

instance HasAssociatePublicIpAddress (LaunchConfigurationResource s) Text where
    type HasAssociatePublicIpAddressThread (LaunchConfigurationResource s) Text = s

    associatePublicIpAddress =
        lens (_associate_public_ip_address :: LaunchConfigurationResource s -> TF.Attribute s Text)
            (\s a -> s { _associate_public_ip_address = a } :: LaunchConfigurationResource s)

instance HasEbsBlockDevice (LaunchConfigurationResource s) Text where
    type HasEbsBlockDeviceThread (LaunchConfigurationResource s) Text = s

    ebsBlockDevice =
        lens (_ebs_block_device :: LaunchConfigurationResource s -> TF.Attribute s Text)
            (\s a -> s { _ebs_block_device = a } :: LaunchConfigurationResource s)

instance HasEbsOptimized (LaunchConfigurationResource s) Text where
    type HasEbsOptimizedThread (LaunchConfigurationResource s) Text = s

    ebsOptimized =
        lens (_ebs_optimized :: LaunchConfigurationResource s -> TF.Attribute s Text)
            (\s a -> s { _ebs_optimized = a } :: LaunchConfigurationResource s)

instance HasEnableMonitoring (LaunchConfigurationResource s) TF.Bool where
    type HasEnableMonitoringThread (LaunchConfigurationResource s) TF.Bool = s

    enableMonitoring =
        lens (_enable_monitoring :: LaunchConfigurationResource s -> TF.Attribute s TF.Bool)
            (\s a -> s { _enable_monitoring = a } :: LaunchConfigurationResource s)

instance HasEphemeralBlockDevice (LaunchConfigurationResource s) Text where
    type HasEphemeralBlockDeviceThread (LaunchConfigurationResource s) Text = s

    ephemeralBlockDevice =
        lens (_ephemeral_block_device :: LaunchConfigurationResource s -> TF.Attribute s Text)
            (\s a -> s { _ephemeral_block_device = a } :: LaunchConfigurationResource s)

instance HasIamInstanceProfile (LaunchConfigurationResource s) Text where
    type HasIamInstanceProfileThread (LaunchConfigurationResource s) Text = s

    iamInstanceProfile =
        lens (_iam_instance_profile :: LaunchConfigurationResource s -> TF.Attribute s Text)
            (\s a -> s { _iam_instance_profile = a } :: LaunchConfigurationResource s)

instance HasImageId (LaunchConfigurationResource s) Text where
    type HasImageIdThread (LaunchConfigurationResource s) Text = s

    imageId =
        lens (_image_id :: LaunchConfigurationResource s -> TF.Attribute s Text)
            (\s a -> s { _image_id = a } :: LaunchConfigurationResource s)

instance HasInstanceType (LaunchConfigurationResource s) Text where
    type HasInstanceTypeThread (LaunchConfigurationResource s) Text = s

    instanceType =
        lens (_instance_type :: LaunchConfigurationResource s -> TF.Attribute s Text)
            (\s a -> s { _instance_type = a } :: LaunchConfigurationResource s)

instance HasKeyName (LaunchConfigurationResource s) Text where
    type HasKeyNameThread (LaunchConfigurationResource s) Text = s

    keyName =
        lens (_key_name :: LaunchConfigurationResource s -> TF.Attribute s Text)
            (\s a -> s { _key_name = a } :: LaunchConfigurationResource s)

instance HasName (LaunchConfigurationResource s) Text where
    type HasNameThread (LaunchConfigurationResource s) Text = s

    name =
        lens (_name :: LaunchConfigurationResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: LaunchConfigurationResource s)

instance HasNamePrefix (LaunchConfigurationResource s) Text where
    type HasNamePrefixThread (LaunchConfigurationResource s) Text = s

    namePrefix =
        lens (_name_prefix :: LaunchConfigurationResource s -> TF.Attribute s Text)
            (\s a -> s { _name_prefix = a } :: LaunchConfigurationResource s)

instance HasPlacementTenancy (LaunchConfigurationResource s) Text where
    type HasPlacementTenancyThread (LaunchConfigurationResource s) Text = s

    placementTenancy =
        lens (_placement_tenancy :: LaunchConfigurationResource s -> TF.Attribute s Text)
            (\s a -> s { _placement_tenancy = a } :: LaunchConfigurationResource s)

instance HasRootBlockDevice (LaunchConfigurationResource s) Text where
    type HasRootBlockDeviceThread (LaunchConfigurationResource s) Text = s

    rootBlockDevice =
        lens (_root_block_device :: LaunchConfigurationResource s -> TF.Attribute s Text)
            (\s a -> s { _root_block_device = a } :: LaunchConfigurationResource s)

instance HasSecurityGroups (LaunchConfigurationResource s) Text where
    type HasSecurityGroupsThread (LaunchConfigurationResource s) Text = s

    securityGroups =
        lens (_security_groups :: LaunchConfigurationResource s -> TF.Attribute s Text)
            (\s a -> s { _security_groups = a } :: LaunchConfigurationResource s)

instance HasSpotPrice (LaunchConfigurationResource s) Text where
    type HasSpotPriceThread (LaunchConfigurationResource s) Text = s

    spotPrice =
        lens (_spot_price :: LaunchConfigurationResource s -> TF.Attribute s Text)
            (\s a -> s { _spot_price = a } :: LaunchConfigurationResource s)

instance HasUserData (LaunchConfigurationResource s) Text where
    type HasUserDataThread (LaunchConfigurationResource s) Text = s

    userData =
        lens (_user_data :: LaunchConfigurationResource s -> TF.Attribute s Text)
            (\s a -> s { _user_data = a } :: LaunchConfigurationResource s)

instance HasVpcClassicLinkId (LaunchConfigurationResource s) Text where
    type HasVpcClassicLinkIdThread (LaunchConfigurationResource s) Text = s

    vpcClassicLinkId =
        lens (_vpc_classic_link_id :: LaunchConfigurationResource s -> TF.Attribute s Text)
            (\s a -> s { _vpc_classic_link_id = a } :: LaunchConfigurationResource s)

instance HasVpcClassicLinkSecurityGroups (LaunchConfigurationResource s) Text where
    type HasVpcClassicLinkSecurityGroupsThread (LaunchConfigurationResource s) Text = s

    vpcClassicLinkSecurityGroups =
        lens (_vpc_classic_link_security_groups :: LaunchConfigurationResource s -> TF.Attribute s Text)
            (\s a -> s { _vpc_classic_link_security_groups = a } :: LaunchConfigurationResource s)

launchConfigurationResource :: TF.Resource TF.AWS (LaunchConfigurationResource s)
launchConfigurationResource =
    TF.newResource "aws_launch_configuration" $
        LaunchConfigurationResource {
              _associate_public_ip_address = TF.Nil
            , _ebs_block_device = TF.Nil
            , _ebs_optimized = TF.Nil
            , _enable_monitoring = TF.Nil
            , _ephemeral_block_device = TF.Nil
            , _iam_instance_profile = TF.Nil
            , _image_id = TF.Nil
            , _instance_type = TF.Nil
            , _key_name = TF.Nil
            , _name = TF.Nil
            , _name_prefix = TF.Nil
            , _placement_tenancy = TF.Nil
            , _root_block_device = TF.Nil
            , _security_groups = TF.Nil
            , _spot_price = TF.Nil
            , _user_data = TF.Nil
            , _vpc_classic_link_id = TF.Nil
            , _vpc_classic_link_security_groups = TF.Nil
            }

{- | The @aws_lb_cookie_stickiness_policy@ AWS resource.

Provides a load balancer cookie stickiness policy, which allows an ELB to
control the sticky session lifetime of the browser.
-}
data LbCookieStickinessPolicyResource s = LbCookieStickinessPolicyResource {
      _cookie_expiration_period :: !(TF.Attribute s Text)
    {- ^ (Optional) The time period after which the session cookie should be considered stale, expressed in seconds. -}
    , _lb_port :: !(TF.Attribute s TF.Word16)
    {- ^ (Required) The load balancer port to which the policy should be applied. This must be an active listener on the load balancer. -}
    , _load_balancer :: !(TF.Attribute s Text)
    {- ^ (Required) The load balancer to which the policy should be attached. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the stickiness policy. -}
    } deriving (Show, Eq)

instance TF.ToHCL (LbCookieStickinessPolicyResource s) where
    toHCL LbCookieStickinessPolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "cookie_expiration_period" <$> TF.attribute _cookie_expiration_period
        , TF.assign "lb_port" <$> TF.attribute _lb_port
        , TF.assign "load_balancer" <$> TF.attribute _load_balancer
        , TF.assign "name" <$> TF.attribute _name
        ]

instance HasCookieExpirationPeriod (LbCookieStickinessPolicyResource s) Text where
    type HasCookieExpirationPeriodThread (LbCookieStickinessPolicyResource s) Text = s

    cookieExpirationPeriod =
        lens (_cookie_expiration_period :: LbCookieStickinessPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _cookie_expiration_period = a } :: LbCookieStickinessPolicyResource s)

instance HasLbPort (LbCookieStickinessPolicyResource s) TF.Word16 where
    type HasLbPortThread (LbCookieStickinessPolicyResource s) TF.Word16 = s

    lbPort =
        lens (_lb_port :: LbCookieStickinessPolicyResource s -> TF.Attribute s TF.Word16)
            (\s a -> s { _lb_port = a } :: LbCookieStickinessPolicyResource s)

instance HasLoadBalancer (LbCookieStickinessPolicyResource s) Text where
    type HasLoadBalancerThread (LbCookieStickinessPolicyResource s) Text = s

    loadBalancer =
        lens (_load_balancer :: LbCookieStickinessPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _load_balancer = a } :: LbCookieStickinessPolicyResource s)

instance HasName (LbCookieStickinessPolicyResource s) Text where
    type HasNameThread (LbCookieStickinessPolicyResource s) Text = s

    name =
        lens (_name :: LbCookieStickinessPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: LbCookieStickinessPolicyResource s)

instance HasComputedCookieExpirationPeriod (LbCookieStickinessPolicyResource s) Text

instance HasComputedId (LbCookieStickinessPolicyResource s) Text

instance HasComputedLbPort (LbCookieStickinessPolicyResource s) TF.Word16

instance HasComputedLoadBalancer (LbCookieStickinessPolicyResource s) Text

instance HasComputedName (LbCookieStickinessPolicyResource s) Text

lbCookieStickinessPolicyResource :: TF.Resource TF.AWS (LbCookieStickinessPolicyResource s)
lbCookieStickinessPolicyResource =
    TF.newResource "aws_lb_cookie_stickiness_policy" $
        LbCookieStickinessPolicyResource {
              _cookie_expiration_period = TF.Nil
            , _lb_port = TF.Nil
            , _load_balancer = TF.Nil
            , _name = TF.Nil
            }

{- | The @aws_lb_listener@ AWS resource.

Provides a Load Balancer Listener resource. ~> Note:  @aws_alb_listener@ is
known as @aws_lb_listener@ . The functionality is identical.
-}
data LbListenerResource s = LbListenerResource {
      _certificate_arn :: !(TF.Attribute s Text)
    {- ^ (Optional) The ARN of the SSL server certificate. Exactly one certificate is required if the protocol is HTTPS. -}
    , _default_action :: !(TF.Attribute s Text)
    {- ^ (Required) An Action block. Action blocks are documented below. -}
    , _load_balancer_arn :: !(TF.Attribute s Text)
    {- ^ (Required, Forces New Resource) The ARN of the load balancer. -}
    , _port :: !(TF.Attribute s Text)
    {- ^ (Required) The port on which the load balancer is listening. -}
    , _protocol :: !(TF.Attribute s Text)
    {- ^ (Optional) The protocol for connections from clients to the load balancer. Valid values are @TCP@ , @HTTP@ and @HTTPS@ . Defaults to @HTTP@ . -}
    , _ssl_policy :: !(TF.Attribute s Text)
    {- ^ (Optional) The name of the SSL Policy for the listener. Required if @protocol@ is @HTTPS@ . -}
    } deriving (Show, Eq)

instance TF.ToHCL (LbListenerResource s) where
    toHCL LbListenerResource{..} = TF.block $ catMaybes
        [ TF.assign "certificate_arn" <$> TF.attribute _certificate_arn
        , TF.assign "default_action" <$> TF.attribute _default_action
        , TF.assign "load_balancer_arn" <$> TF.attribute _load_balancer_arn
        , TF.assign "port" <$> TF.attribute _port
        , TF.assign "protocol" <$> TF.attribute _protocol
        , TF.assign "ssl_policy" <$> TF.attribute _ssl_policy
        ]

instance HasCertificateArn (LbListenerResource s) Text where
    type HasCertificateArnThread (LbListenerResource s) Text = s

    certificateArn =
        lens (_certificate_arn :: LbListenerResource s -> TF.Attribute s Text)
            (\s a -> s { _certificate_arn = a } :: LbListenerResource s)

instance HasDefaultAction (LbListenerResource s) Text where
    type HasDefaultActionThread (LbListenerResource s) Text = s

    defaultAction =
        lens (_default_action :: LbListenerResource s -> TF.Attribute s Text)
            (\s a -> s { _default_action = a } :: LbListenerResource s)

instance HasLoadBalancerArn (LbListenerResource s) Text where
    type HasLoadBalancerArnThread (LbListenerResource s) Text = s

    loadBalancerArn =
        lens (_load_balancer_arn :: LbListenerResource s -> TF.Attribute s Text)
            (\s a -> s { _load_balancer_arn = a } :: LbListenerResource s)

instance HasPort (LbListenerResource s) Text where
    type HasPortThread (LbListenerResource s) Text = s

    port =
        lens (_port :: LbListenerResource s -> TF.Attribute s Text)
            (\s a -> s { _port = a } :: LbListenerResource s)

instance HasProtocol (LbListenerResource s) Text where
    type HasProtocolThread (LbListenerResource s) Text = s

    protocol =
        lens (_protocol :: LbListenerResource s -> TF.Attribute s Text)
            (\s a -> s { _protocol = a } :: LbListenerResource s)

instance HasSslPolicy (LbListenerResource s) Text where
    type HasSslPolicyThread (LbListenerResource s) Text = s

    sslPolicy =
        lens (_ssl_policy :: LbListenerResource s -> TF.Attribute s Text)
            (\s a -> s { _ssl_policy = a } :: LbListenerResource s)

instance HasComputedArn (LbListenerResource s) Text

instance HasComputedId (LbListenerResource s) Text

lbListenerResource :: TF.Resource TF.AWS (LbListenerResource s)
lbListenerResource =
    TF.newResource "aws_lb_listener" $
        LbListenerResource {
              _certificate_arn = TF.Nil
            , _default_action = TF.Nil
            , _load_balancer_arn = TF.Nil
            , _port = TF.Nil
            , _protocol = TF.Nil
            , _ssl_policy = TF.Nil
            }

{- | The @aws_lb_listener_rule@ AWS resource.

Provides a Load Balancer Listener Rule resource. ~> Note:
@aws_alb_listener_rule@ is known as @aws_lb_listener_rule@ . The
functionality is identical.
-}
data LbListenerRuleResource s = LbListenerRuleResource {
      _action :: !(TF.Attribute s Text)
    {- ^ (Required) An Action block. Action blocks are documented below. -}
    , _condition :: !(TF.Attribute s Text)
    {- ^ (Required) A Condition block. Condition blocks are documented below. -}
    , _listener_arn :: !(TF.Attribute s Text)
    {- ^ (Required, Forces New Resource) The ARN of the listener to which to attach the rule. -}
    , _priority :: !(TF.Attribute s Text)
    {- ^ (Required) The priority for the rule. A listener can't have multiple rules with the same priority. -}
    } deriving (Show, Eq)

instance TF.ToHCL (LbListenerRuleResource s) where
    toHCL LbListenerRuleResource{..} = TF.block $ catMaybes
        [ TF.assign "action" <$> TF.attribute _action
        , TF.assign "condition" <$> TF.attribute _condition
        , TF.assign "listener_arn" <$> TF.attribute _listener_arn
        , TF.assign "priority" <$> TF.attribute _priority
        ]

instance HasAction (LbListenerRuleResource s) Text where
    type HasActionThread (LbListenerRuleResource s) Text = s

    action =
        lens (_action :: LbListenerRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _action = a } :: LbListenerRuleResource s)

instance HasCondition (LbListenerRuleResource s) Text where
    type HasConditionThread (LbListenerRuleResource s) Text = s

    condition =
        lens (_condition :: LbListenerRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _condition = a } :: LbListenerRuleResource s)

instance HasListenerArn (LbListenerRuleResource s) Text where
    type HasListenerArnThread (LbListenerRuleResource s) Text = s

    listenerArn =
        lens (_listener_arn :: LbListenerRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _listener_arn = a } :: LbListenerRuleResource s)

instance HasPriority (LbListenerRuleResource s) Text where
    type HasPriorityThread (LbListenerRuleResource s) Text = s

    priority =
        lens (_priority :: LbListenerRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _priority = a } :: LbListenerRuleResource s)

instance HasComputedArn (LbListenerRuleResource s) Text

instance HasComputedId (LbListenerRuleResource s) Text

lbListenerRuleResource :: TF.Resource TF.AWS (LbListenerRuleResource s)
lbListenerRuleResource =
    TF.newResource "aws_lb_listener_rule" $
        LbListenerRuleResource {
              _action = TF.Nil
            , _condition = TF.Nil
            , _listener_arn = TF.Nil
            , _priority = TF.Nil
            }

{- | The @aws_lb@ AWS resource.

Provides a Load Balancer resource. ~> Note:  @aws_alb@ is known as @aws_lb@
. The functionality is identical.
-}
data LbResource s = LbResource {
      _access_logs :: !(TF.Attribute s Text)
    {- ^ (Optional) An Access Logs block. Access Logs documented below. -}
    , _enable_deletion_protection :: !(TF.Attribute s TF.Bool)
    {- ^ (Optional) If true, deletion of the load balancer will be disabled via the AWS API. This will prevent Terraform from deleting the load balancer. Defaults to @false@ . -}
    , _idle_timeout :: !(TF.Attribute s Text)
    {- ^ (Optional) The time in seconds that the connection is allowed to be idle. Default: 60. -}
    , _internal :: !(TF.Attribute s Text)
    {- ^ (Optional) If true, the LB will be internal. -}
    , _ip_address_type :: !(TF.Attribute s Text)
    {- ^ (Optional) The type of IP addresses used by the subnets for your load balancer. The possible values are @ipv4@ and @dualstack@ -}
    , _load_balancer_type :: !(TF.Attribute s Text)
    {- ^ (Optional) The type of load balancer to create. Possible values are @application@ or @network@ . The default value is @application@ . -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Optional) The name of the LB. This name must be unique within your AWS account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen. If not specified, Terraform will autogenerate a name beginning with @tf-lb@ . -}
    , _name_prefix :: !(TF.Attribute s Text)
    {- ^ (Optional) Creates a unique name beginning with the specified prefix. Conflicts with @name@ . -}
    , _security_groups :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of security group IDs to assign to the LB. Only valid for Load Balancers of type @application@ . -}
    , _subnet_mapping :: !(TF.Attribute s Text)
    {- ^ (Optional) A subnet mapping block as documented below. -}
    , _subnets :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of subnet IDs to attach to the LB. Subnets cannot be updated for Load Balancers of type @network@ . Changing this value will for load balancers of type @network@ will force a recreation of the resource. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    } deriving (Show, Eq)

instance TF.ToHCL (LbResource s) where
    toHCL LbResource{..} = TF.block $ catMaybes
        [ TF.assign "access_logs" <$> TF.attribute _access_logs
        , TF.assign "enable_deletion_protection" <$> TF.attribute _enable_deletion_protection
        , TF.assign "idle_timeout" <$> TF.attribute _idle_timeout
        , TF.assign "internal" <$> TF.attribute _internal
        , TF.assign "ip_address_type" <$> TF.attribute _ip_address_type
        , TF.assign "load_balancer_type" <$> TF.attribute _load_balancer_type
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "name_prefix" <$> TF.attribute _name_prefix
        , TF.assign "security_groups" <$> TF.attribute _security_groups
        , TF.assign "subnet_mapping" <$> TF.attribute _subnet_mapping
        , TF.assign "subnets" <$> TF.attribute _subnets
        , TF.assign "tags" <$> TF.attribute _tags
        ]

instance HasAccessLogs (LbResource s) Text where
    type HasAccessLogsThread (LbResource s) Text = s

    accessLogs =
        lens (_access_logs :: LbResource s -> TF.Attribute s Text)
            (\s a -> s { _access_logs = a } :: LbResource s)

instance HasEnableDeletionProtection (LbResource s) TF.Bool where
    type HasEnableDeletionProtectionThread (LbResource s) TF.Bool = s

    enableDeletionProtection =
        lens (_enable_deletion_protection :: LbResource s -> TF.Attribute s TF.Bool)
            (\s a -> s { _enable_deletion_protection = a } :: LbResource s)

instance HasIdleTimeout (LbResource s) Text where
    type HasIdleTimeoutThread (LbResource s) Text = s

    idleTimeout =
        lens (_idle_timeout :: LbResource s -> TF.Attribute s Text)
            (\s a -> s { _idle_timeout = a } :: LbResource s)

instance HasInternal (LbResource s) Text where
    type HasInternalThread (LbResource s) Text = s

    internal =
        lens (_internal :: LbResource s -> TF.Attribute s Text)
            (\s a -> s { _internal = a } :: LbResource s)

instance HasIpAddressType (LbResource s) Text where
    type HasIpAddressTypeThread (LbResource s) Text = s

    ipAddressType =
        lens (_ip_address_type :: LbResource s -> TF.Attribute s Text)
            (\s a -> s { _ip_address_type = a } :: LbResource s)

instance HasLoadBalancerType (LbResource s) Text where
    type HasLoadBalancerTypeThread (LbResource s) Text = s

    loadBalancerType =
        lens (_load_balancer_type :: LbResource s -> TF.Attribute s Text)
            (\s a -> s { _load_balancer_type = a } :: LbResource s)

instance HasName (LbResource s) Text where
    type HasNameThread (LbResource s) Text = s

    name =
        lens (_name :: LbResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: LbResource s)

instance HasNamePrefix (LbResource s) Text where
    type HasNamePrefixThread (LbResource s) Text = s

    namePrefix =
        lens (_name_prefix :: LbResource s -> TF.Attribute s Text)
            (\s a -> s { _name_prefix = a } :: LbResource s)

instance HasSecurityGroups (LbResource s) Text where
    type HasSecurityGroupsThread (LbResource s) Text = s

    securityGroups =
        lens (_security_groups :: LbResource s -> TF.Attribute s Text)
            (\s a -> s { _security_groups = a } :: LbResource s)

instance HasSubnetMapping (LbResource s) Text where
    type HasSubnetMappingThread (LbResource s) Text = s

    subnetMapping =
        lens (_subnet_mapping :: LbResource s -> TF.Attribute s Text)
            (\s a -> s { _subnet_mapping = a } :: LbResource s)

instance HasSubnets (LbResource s) Text where
    type HasSubnetsThread (LbResource s) Text = s

    subnets =
        lens (_subnets :: LbResource s -> TF.Attribute s Text)
            (\s a -> s { _subnets = a } :: LbResource s)

instance HasTags (LbResource s) TF.Tags where
    type HasTagsThread (LbResource s) TF.Tags = s

    tags =
        lens (_tags :: LbResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: LbResource s)

instance HasComputedArn (LbResource s) Text

instance HasComputedArnSuffix (LbResource s) Text

instance HasComputedCanonicalHostedZoneId (LbResource s) Text

instance HasComputedDnsName (LbResource s) Text

instance HasComputedId (LbResource s) Text

instance HasComputedZoneId (LbResource s) Text

lbResource :: TF.Resource TF.AWS (LbResource s)
lbResource =
    TF.newResource "aws_lb" $
        LbResource {
              _access_logs = TF.Nil
            , _enable_deletion_protection = TF.Nil
            , _idle_timeout = TF.Nil
            , _internal = TF.Nil
            , _ip_address_type = TF.Nil
            , _load_balancer_type = TF.Nil
            , _name = TF.Nil
            , _name_prefix = TF.Nil
            , _security_groups = TF.Nil
            , _subnet_mapping = TF.Nil
            , _subnets = TF.Nil
            , _tags = TF.Nil
            }

{- | The @aws_lb_ssl_negotiation_policy@ AWS resource.

Provides a load balancer SSL negotiation policy, which allows an ELB to
control the ciphers and protocols that are supported during SSL negotiations
between a client and a load balancer.
-}
data LbSslNegotiationPolicyResource s = LbSslNegotiationPolicyResource {
      _attribute :: !(TF.Attribute s Text)
    {- ^ (Optional) An SSL Negotiation policy attribute. Each has two properties: -}
    , _lb_port :: !(TF.Attribute s TF.Word16)
    {- ^ (Required) The load balancer port to which the policy should be applied. This must be an active listener on the load balancer. -}
    , _load_balancer :: !(TF.Attribute s Text)
    {- ^ (Required) The load balancer to which the policy should be attached. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the SSL negotiation policy. -}
    } deriving (Show, Eq)

instance TF.ToHCL (LbSslNegotiationPolicyResource s) where
    toHCL LbSslNegotiationPolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "attribute" <$> TF.attribute _attribute
        , TF.assign "lb_port" <$> TF.attribute _lb_port
        , TF.assign "load_balancer" <$> TF.attribute _load_balancer
        , TF.assign "name" <$> TF.attribute _name
        ]

instance HasAttribute (LbSslNegotiationPolicyResource s) Text where
    type HasAttributeThread (LbSslNegotiationPolicyResource s) Text = s

    attribute =
        lens (_attribute :: LbSslNegotiationPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _attribute = a } :: LbSslNegotiationPolicyResource s)

instance HasLbPort (LbSslNegotiationPolicyResource s) TF.Word16 where
    type HasLbPortThread (LbSslNegotiationPolicyResource s) TF.Word16 = s

    lbPort =
        lens (_lb_port :: LbSslNegotiationPolicyResource s -> TF.Attribute s TF.Word16)
            (\s a -> s { _lb_port = a } :: LbSslNegotiationPolicyResource s)

instance HasLoadBalancer (LbSslNegotiationPolicyResource s) Text where
    type HasLoadBalancerThread (LbSslNegotiationPolicyResource s) Text = s

    loadBalancer =
        lens (_load_balancer :: LbSslNegotiationPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _load_balancer = a } :: LbSslNegotiationPolicyResource s)

instance HasName (LbSslNegotiationPolicyResource s) Text where
    type HasNameThread (LbSslNegotiationPolicyResource s) Text = s

    name =
        lens (_name :: LbSslNegotiationPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: LbSslNegotiationPolicyResource s)

instance HasComputedAttribute (LbSslNegotiationPolicyResource s) Text

instance HasComputedId (LbSslNegotiationPolicyResource s) Text

instance HasComputedLbPort (LbSslNegotiationPolicyResource s) TF.Word16

instance HasComputedLoadBalancer (LbSslNegotiationPolicyResource s) Text

instance HasComputedName (LbSslNegotiationPolicyResource s) Text

lbSslNegotiationPolicyResource :: TF.Resource TF.AWS (LbSslNegotiationPolicyResource s)
lbSslNegotiationPolicyResource =
    TF.newResource "aws_lb_ssl_negotiation_policy" $
        LbSslNegotiationPolicyResource {
              _attribute = TF.Nil
            , _lb_port = TF.Nil
            , _load_balancer = TF.Nil
            , _name = TF.Nil
            }

{- | The @aws_lb_target_group_attachment@ AWS resource.

Provides the ability to register instances and containers with a LB target
group ~> Note:  @aws_alb_target_group_attachment@ is known as
@aws_lb_target_group_attachment@ . The functionality is identical.
-}
data LbTargetGroupAttachmentResource s = LbTargetGroupAttachmentResource {
      _availability_zone :: !(TF.Attribute s TF.Zone)
    {- ^ (Optional) The Availability Zone where the IP address of the target is to be registered. -}
    , _port :: !(TF.Attribute s Text)
    {- ^ (Optional) The port on which targets receive traffic. -}
    , _target_group_arn :: !(TF.Attribute s Text)
    {- ^ (Required) The ARN of the target group with which to register targets -}
    , _target_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the target. This is the Instance ID for an instance, or the container ID for an ECS container. If the target type is ip, specify an IP address. -}
    } deriving (Show, Eq)

instance TF.ToHCL (LbTargetGroupAttachmentResource s) where
    toHCL LbTargetGroupAttachmentResource{..} = TF.block $ catMaybes
        [ TF.assign "availability_zone" <$> TF.attribute _availability_zone
        , TF.assign "port" <$> TF.attribute _port
        , TF.assign "target_group_arn" <$> TF.attribute _target_group_arn
        , TF.assign "target_id" <$> TF.attribute _target_id
        ]

instance HasAvailabilityZone (LbTargetGroupAttachmentResource s) TF.Zone where
    type HasAvailabilityZoneThread (LbTargetGroupAttachmentResource s) TF.Zone = s

    availabilityZone =
        lens (_availability_zone :: LbTargetGroupAttachmentResource s -> TF.Attribute s TF.Zone)
            (\s a -> s { _availability_zone = a } :: LbTargetGroupAttachmentResource s)

instance HasPort (LbTargetGroupAttachmentResource s) Text where
    type HasPortThread (LbTargetGroupAttachmentResource s) Text = s

    port =
        lens (_port :: LbTargetGroupAttachmentResource s -> TF.Attribute s Text)
            (\s a -> s { _port = a } :: LbTargetGroupAttachmentResource s)

instance HasTargetGroupArn (LbTargetGroupAttachmentResource s) Text where
    type HasTargetGroupArnThread (LbTargetGroupAttachmentResource s) Text = s

    targetGroupArn =
        lens (_target_group_arn :: LbTargetGroupAttachmentResource s -> TF.Attribute s Text)
            (\s a -> s { _target_group_arn = a } :: LbTargetGroupAttachmentResource s)

instance HasTargetId (LbTargetGroupAttachmentResource s) Text where
    type HasTargetIdThread (LbTargetGroupAttachmentResource s) Text = s

    targetId =
        lens (_target_id :: LbTargetGroupAttachmentResource s -> TF.Attribute s Text)
            (\s a -> s { _target_id = a } :: LbTargetGroupAttachmentResource s)

instance HasComputedId (LbTargetGroupAttachmentResource s) Text

lbTargetGroupAttachmentResource :: TF.Resource TF.AWS (LbTargetGroupAttachmentResource s)
lbTargetGroupAttachmentResource =
    TF.newResource "aws_lb_target_group_attachment" $
        LbTargetGroupAttachmentResource {
              _availability_zone = TF.Nil
            , _port = TF.Nil
            , _target_group_arn = TF.Nil
            , _target_id = TF.Nil
            }

{- | The @aws_lb_target_group@ AWS resource.

Provides a Target Group resource for use with Load Balancer resources. ~>
Note:  @aws_alb_target_group@ is known as @aws_lb_target_group@ . The
functionality is identical.
-}
data LbTargetGroupResource s = LbTargetGroupResource {
      _deregistration_delay :: !(TF.Attribute s Text)
    {- ^ (Optional) The amount time for Elastic Load Balancing to wait before changing the state of a deregistering target from draining to unused. The range is 0-3600 seconds. The default value is 300 seconds. -}
    , _health_check :: !(TF.Attribute s Text)
    {- ^ (Optional) A Health Check block. Health Check blocks are documented below. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) The name of the target group. If omitted, Terraform will assign a random, unique name. -}
    , _name_prefix :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) Creates a unique name beginning with the specified prefix. Conflicts with @name@ . -}
    , _port :: !(TF.Attribute s Text)
    {- ^ (Required) The port on which targets receive traffic, unless overridden when registering a specific target. -}
    , _protocol :: !(TF.Attribute s Text)
    {- ^ (Required) The protocol to use for routing traffic to the targets. -}
    , _stickiness :: !(TF.Attribute s Text)
    {- ^ (Optional) A Stickiness block. Stickiness blocks are documented below. @stickiness@ is only valid if used with Load Balancers of type @Application@ -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _target_type :: !(TF.Attribute s Text)
    {- ^ (Optional) The type of target that you must specify when registering targets with this target group. The possible values are @instance@ (targets are specified by instance ID) or @ip@ (targets are specified by IP address). The default is @instance@ . Note that you can't specify targets for a target group using both instance IDs and IP addresses. If the target type is @ip@ , specify IP addresses from the subnets of the virtual private cloud (VPC) for the target group, the RFC 1918 range (10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16), and the RFC 6598 range (100.64.0.0/10). You can't specify publicly routable IP addresses. -}
    , _vpc_id :: !(TF.Attribute s Text)
    {- ^ (Required) The identifier of the VPC in which to create the target group. -}
    } deriving (Show, Eq)

instance TF.ToHCL (LbTargetGroupResource s) where
    toHCL LbTargetGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "deregistration_delay" <$> TF.attribute _deregistration_delay
        , TF.assign "health_check" <$> TF.attribute _health_check
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "name_prefix" <$> TF.attribute _name_prefix
        , TF.assign "port" <$> TF.attribute _port
        , TF.assign "protocol" <$> TF.attribute _protocol
        , TF.assign "stickiness" <$> TF.attribute _stickiness
        , TF.assign "tags" <$> TF.attribute _tags
        , TF.assign "target_type" <$> TF.attribute _target_type
        , TF.assign "vpc_id" <$> TF.attribute _vpc_id
        ]

instance HasDeregistrationDelay (LbTargetGroupResource s) Text where
    type HasDeregistrationDelayThread (LbTargetGroupResource s) Text = s

    deregistrationDelay =
        lens (_deregistration_delay :: LbTargetGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _deregistration_delay = a } :: LbTargetGroupResource s)

instance HasHealthCheck (LbTargetGroupResource s) Text where
    type HasHealthCheckThread (LbTargetGroupResource s) Text = s

    healthCheck =
        lens (_health_check :: LbTargetGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _health_check = a } :: LbTargetGroupResource s)

instance HasName (LbTargetGroupResource s) Text where
    type HasNameThread (LbTargetGroupResource s) Text = s

    name =
        lens (_name :: LbTargetGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: LbTargetGroupResource s)

instance HasNamePrefix (LbTargetGroupResource s) Text where
    type HasNamePrefixThread (LbTargetGroupResource s) Text = s

    namePrefix =
        lens (_name_prefix :: LbTargetGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _name_prefix = a } :: LbTargetGroupResource s)

instance HasPort (LbTargetGroupResource s) Text where
    type HasPortThread (LbTargetGroupResource s) Text = s

    port =
        lens (_port :: LbTargetGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _port = a } :: LbTargetGroupResource s)

instance HasProtocol (LbTargetGroupResource s) Text where
    type HasProtocolThread (LbTargetGroupResource s) Text = s

    protocol =
        lens (_protocol :: LbTargetGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _protocol = a } :: LbTargetGroupResource s)

instance HasStickiness (LbTargetGroupResource s) Text where
    type HasStickinessThread (LbTargetGroupResource s) Text = s

    stickiness =
        lens (_stickiness :: LbTargetGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _stickiness = a } :: LbTargetGroupResource s)

instance HasTags (LbTargetGroupResource s) TF.Tags where
    type HasTagsThread (LbTargetGroupResource s) TF.Tags = s

    tags =
        lens (_tags :: LbTargetGroupResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: LbTargetGroupResource s)

instance HasTargetType (LbTargetGroupResource s) Text where
    type HasTargetTypeThread (LbTargetGroupResource s) Text = s

    targetType =
        lens (_target_type :: LbTargetGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _target_type = a } :: LbTargetGroupResource s)

instance HasVpcId (LbTargetGroupResource s) Text where
    type HasVpcIdThread (LbTargetGroupResource s) Text = s

    vpcId =
        lens (_vpc_id :: LbTargetGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _vpc_id = a } :: LbTargetGroupResource s)

instance HasComputedArn (LbTargetGroupResource s) Text

instance HasComputedArnSuffix (LbTargetGroupResource s) Text

instance HasComputedId (LbTargetGroupResource s) Text

instance HasComputedName (LbTargetGroupResource s) Text

lbTargetGroupResource :: TF.Resource TF.AWS (LbTargetGroupResource s)
lbTargetGroupResource =
    TF.newResource "aws_lb_target_group" $
        LbTargetGroupResource {
              _deregistration_delay = TF.Nil
            , _health_check = TF.Nil
            , _name = TF.Nil
            , _name_prefix = TF.Nil
            , _port = TF.Nil
            , _protocol = TF.Nil
            , _stickiness = TF.Nil
            , _tags = TF.Nil
            , _target_type = TF.Nil
            , _vpc_id = TF.Nil
            }

{- | The @aws_lightsail_domain@ AWS resource.

Creates a domain resource for the specified domain (e.g., example.com). You
cannot register a new domain name using Lightsail. You must register a
domain name using Amazon Route 53 or another domain name registrar. If you
have already registered your domain, you can enter its name in this
parameter to manage the DNS records for that domain. ~> Note: Lightsail is
currently only supported in a limited number of AWS Regions, please see
<https://lightsail.aws.amazon.com/ls/docs/overview/article/understanding-regions-and-availability-zones-in-amazon-lightsail>
for more details
-}
data LightsailDomainResource s = LightsailDomainResource {
      _domain_name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the Lightsail domain to manage -}
    } deriving (Show, Eq)

instance TF.ToHCL (LightsailDomainResource s) where
    toHCL LightsailDomainResource{..} = TF.block $ catMaybes
        [ TF.assign "domain_name" <$> TF.attribute _domain_name
        ]

instance HasDomainName (LightsailDomainResource s) Text where
    type HasDomainNameThread (LightsailDomainResource s) Text = s

    domainName =
        lens (_domain_name :: LightsailDomainResource s -> TF.Attribute s Text)
            (\s a -> s { _domain_name = a } :: LightsailDomainResource s)

instance HasComputedArn (LightsailDomainResource s) Text

instance HasComputedId (LightsailDomainResource s) Text

lightsailDomainResource :: TF.Resource TF.AWS (LightsailDomainResource s)
lightsailDomainResource =
    TF.newResource "aws_lightsail_domain" $
        LightsailDomainResource {
              _domain_name = TF.Nil
            }

{- | The @aws_lightsail_instance@ AWS resource.

Provides a Lightsail Instance. Amazon Lightsail is a service to provide easy
virtual private servers with custom software already setup. See
<https://lightsail.aws.amazon.com/ls/docs/getting-started/article/what-is-amazon-lightsail>
for more information. ~> Note: Lightsail is currently only supported in a
limited number of AWS Regions, please see
<https://lightsail.aws.amazon.com/ls/docs/overview/article/understanding-regions-and-availability-zones-in-amazon-lightsail>
for more details
-}
data LightsailInstanceResource s = LightsailInstanceResource {
      _availability_zone :: !(TF.Attribute s TF.Zone)
    {- ^ (Required) The Availability Zone in which to create your instance. At this time, must be in @us-east-1@ , @us-east-2@ , @us-west-2@ , @eu-west-1@ , @eu-west-2@ , @eu-central-1@ , @ap-southeast-1@ , @ap-southeast-2@ , @ap-northeast-1@ , @ap-south-1@ regions -}
    , _blueprint_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID for a virtual private server image (see list below) -}
    , _bundle_id :: !(TF.Attribute s Text)
    {- ^ (Required) The bundle of specification information (see list below) -}
    , _key_pair_name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of your key pair. Created in the Lightsail console (cannot use @aws_key_pair@ at this time) -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the Lightsail Instance -}
    , _user_data :: !(TF.Attribute s Text)
    {- ^ (Optional) launch script to configure server with additional user data -}
    } deriving (Show, Eq)

instance TF.ToHCL (LightsailInstanceResource s) where
    toHCL LightsailInstanceResource{..} = TF.block $ catMaybes
        [ TF.assign "availability_zone" <$> TF.attribute _availability_zone
        , TF.assign "blueprint_id" <$> TF.attribute _blueprint_id
        , TF.assign "bundle_id" <$> TF.attribute _bundle_id
        , TF.assign "key_pair_name" <$> TF.attribute _key_pair_name
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "user_data" <$> TF.attribute _user_data
        ]

instance HasAvailabilityZone (LightsailInstanceResource s) TF.Zone where
    type HasAvailabilityZoneThread (LightsailInstanceResource s) TF.Zone = s

    availabilityZone =
        lens (_availability_zone :: LightsailInstanceResource s -> TF.Attribute s TF.Zone)
            (\s a -> s { _availability_zone = a } :: LightsailInstanceResource s)

instance HasBlueprintId (LightsailInstanceResource s) Text where
    type HasBlueprintIdThread (LightsailInstanceResource s) Text = s

    blueprintId =
        lens (_blueprint_id :: LightsailInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _blueprint_id = a } :: LightsailInstanceResource s)

instance HasBundleId (LightsailInstanceResource s) Text where
    type HasBundleIdThread (LightsailInstanceResource s) Text = s

    bundleId =
        lens (_bundle_id :: LightsailInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _bundle_id = a } :: LightsailInstanceResource s)

instance HasKeyPairName (LightsailInstanceResource s) Text where
    type HasKeyPairNameThread (LightsailInstanceResource s) Text = s

    keyPairName =
        lens (_key_pair_name :: LightsailInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _key_pair_name = a } :: LightsailInstanceResource s)

instance HasName (LightsailInstanceResource s) Text where
    type HasNameThread (LightsailInstanceResource s) Text = s

    name =
        lens (_name :: LightsailInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: LightsailInstanceResource s)

instance HasUserData (LightsailInstanceResource s) Text where
    type HasUserDataThread (LightsailInstanceResource s) Text = s

    userData =
        lens (_user_data :: LightsailInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _user_data = a } :: LightsailInstanceResource s)

lightsailInstanceResource :: TF.Resource TF.AWS (LightsailInstanceResource s)
lightsailInstanceResource =
    TF.newResource "aws_lightsail_instance" $
        LightsailInstanceResource {
              _availability_zone = TF.Nil
            , _blueprint_id = TF.Nil
            , _bundle_id = TF.Nil
            , _key_pair_name = TF.Nil
            , _name = TF.Nil
            , _user_data = TF.Nil
            }

{- | The @aws_lightsail_key_pair@ AWS resource.

Provides a Lightsail Key Pair, for use with Lightsail Instances. These key
pairs are seperate from EC2 Key Pairs, and must be created or imported for
use with Lightsail. ~> Note: Lightsail is currently only supported in a
limited number of AWS Regions, please see
<https://lightsail.aws.amazon.com/ls/docs/overview/article/understanding-regions-and-availability-zones-in-amazon-lightsail>
for more details
-}
data LightsailKeyPairResource s = LightsailKeyPairResource {
      _name :: !(TF.Attribute s Text)
    {- ^ (Optional) The name of the Lightsail Key Pair. If omitted, a unique name will be generated by Terraform -}
    , _pgp_key :: !(TF.Attribute s Text)
    {- ^ – (Optional) An optional PGP key to encrypt the resulting private key material. Only used when creating a new key pair -}
    , _public_key :: !(TF.Attribute s Text)
    {- ^ (Required) The public key material. This public key will be imported into Lightsail -}
    } deriving (Show, Eq)

instance TF.ToHCL (LightsailKeyPairResource s) where
    toHCL LightsailKeyPairResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.attribute _name
        , TF.assign "pgp_key" <$> TF.attribute _pgp_key
        , TF.assign "public_key" <$> TF.attribute _public_key
        ]

instance HasName (LightsailKeyPairResource s) Text where
    type HasNameThread (LightsailKeyPairResource s) Text = s

    name =
        lens (_name :: LightsailKeyPairResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: LightsailKeyPairResource s)

instance HasPgpKey (LightsailKeyPairResource s) Text where
    type HasPgpKeyThread (LightsailKeyPairResource s) Text = s

    pgpKey =
        lens (_pgp_key :: LightsailKeyPairResource s -> TF.Attribute s Text)
            (\s a -> s { _pgp_key = a } :: LightsailKeyPairResource s)

instance HasPublicKey (LightsailKeyPairResource s) Text where
    type HasPublicKeyThread (LightsailKeyPairResource s) Text = s

    publicKey =
        lens (_public_key :: LightsailKeyPairResource s -> TF.Attribute s Text)
            (\s a -> s { _public_key = a } :: LightsailKeyPairResource s)

instance HasComputedArn (LightsailKeyPairResource s) Text

instance HasComputedEncryptedFingerprint (LightsailKeyPairResource s) Text

instance HasComputedEncryptedPrivateKey (LightsailKeyPairResource s) Text

instance HasComputedFingerprint (LightsailKeyPairResource s) Text

instance HasComputedId (LightsailKeyPairResource s) Text

instance HasComputedPrivateKey (LightsailKeyPairResource s) Text

instance HasComputedPublicKey (LightsailKeyPairResource s) Text

lightsailKeyPairResource :: TF.Resource TF.AWS (LightsailKeyPairResource s)
lightsailKeyPairResource =
    TF.newResource "aws_lightsail_key_pair" $
        LightsailKeyPairResource {
              _name = TF.Nil
            , _pgp_key = TF.Nil
            , _public_key = TF.Nil
            }

{- | The @aws_lightsail_static_ip_attachment@ AWS resource.

Provides a static IP address attachment - relationship between a Lightsail
static IP & Lightsail instance. ~> Note: Lightsail is currently only
supported in a limited number of AWS Regions, please see
<https://lightsail.aws.amazon.com/ls/docs/overview/article/understanding-regions-and-availability-zones-in-amazon-lightsail>
for more details
-}
data LightsailStaticIpAttachmentResource s = LightsailStaticIpAttachmentResource {
      _instance_name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the Lightsail instance to attach the IP to -}
    , _static_ip_name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the allocated static IP -}
    } deriving (Show, Eq)

instance TF.ToHCL (LightsailStaticIpAttachmentResource s) where
    toHCL LightsailStaticIpAttachmentResource{..} = TF.block $ catMaybes
        [ TF.assign "instance_name" <$> TF.attribute _instance_name
        , TF.assign "static_ip_name" <$> TF.attribute _static_ip_name
        ]

instance HasInstanceName (LightsailStaticIpAttachmentResource s) Text where
    type HasInstanceNameThread (LightsailStaticIpAttachmentResource s) Text = s

    instanceName =
        lens (_instance_name :: LightsailStaticIpAttachmentResource s -> TF.Attribute s Text)
            (\s a -> s { _instance_name = a } :: LightsailStaticIpAttachmentResource s)

instance HasStaticIpName (LightsailStaticIpAttachmentResource s) Text where
    type HasStaticIpNameThread (LightsailStaticIpAttachmentResource s) Text = s

    staticIpName =
        lens (_static_ip_name :: LightsailStaticIpAttachmentResource s -> TF.Attribute s Text)
            (\s a -> s { _static_ip_name = a } :: LightsailStaticIpAttachmentResource s)

instance HasComputedArn (LightsailStaticIpAttachmentResource s) Text

instance HasComputedIpAddress (LightsailStaticIpAttachmentResource s) Text

instance HasComputedSupportCode (LightsailStaticIpAttachmentResource s) Text

lightsailStaticIpAttachmentResource :: TF.Resource TF.AWS (LightsailStaticIpAttachmentResource s)
lightsailStaticIpAttachmentResource =
    TF.newResource "aws_lightsail_static_ip_attachment" $
        LightsailStaticIpAttachmentResource {
              _instance_name = TF.Nil
            , _static_ip_name = TF.Nil
            }

{- | The @aws_lightsail_static_ip@ AWS resource.

Allocates a static IP address. ~> Note: Lightsail is currently only
supported in a limited number of AWS Regions, please see
<https://lightsail.aws.amazon.com/ls/docs/overview/article/understanding-regions-and-availability-zones-in-amazon-lightsail>
for more details
-}
data LightsailStaticIpResource s = LightsailStaticIpResource {
      _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name for the allocated static IP -}
    } deriving (Show, Eq)

instance TF.ToHCL (LightsailStaticIpResource s) where
    toHCL LightsailStaticIpResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.attribute _name
        ]

instance HasName (LightsailStaticIpResource s) Text where
    type HasNameThread (LightsailStaticIpResource s) Text = s

    name =
        lens (_name :: LightsailStaticIpResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: LightsailStaticIpResource s)

instance HasComputedArn (LightsailStaticIpResource s) Text

instance HasComputedIpAddress (LightsailStaticIpResource s) Text

instance HasComputedSupportCode (LightsailStaticIpResource s) Text

lightsailStaticIpResource :: TF.Resource TF.AWS (LightsailStaticIpResource s)
lightsailStaticIpResource =
    TF.newResource "aws_lightsail_static_ip" $
        LightsailStaticIpResource {
              _name = TF.Nil
            }

{- | The @aws_main_route_table_association@ AWS resource.

Provides a resource for managing the main routing table of a VPC.
-}
data MainRouteTableAssociationResource s = MainRouteTableAssociationResource {
      _route_table_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the Route Table to set as the new main route table for the target VPC -}
    , _vpc_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the VPC whose main route table should be set -}
    } deriving (Show, Eq)

instance TF.ToHCL (MainRouteTableAssociationResource s) where
    toHCL MainRouteTableAssociationResource{..} = TF.block $ catMaybes
        [ TF.assign "route_table_id" <$> TF.attribute _route_table_id
        , TF.assign "vpc_id" <$> TF.attribute _vpc_id
        ]

instance HasRouteTableId (MainRouteTableAssociationResource s) Text where
    type HasRouteTableIdThread (MainRouteTableAssociationResource s) Text = s

    routeTableId =
        lens (_route_table_id :: MainRouteTableAssociationResource s -> TF.Attribute s Text)
            (\s a -> s { _route_table_id = a } :: MainRouteTableAssociationResource s)

instance HasVpcId (MainRouteTableAssociationResource s) Text where
    type HasVpcIdThread (MainRouteTableAssociationResource s) Text = s

    vpcId =
        lens (_vpc_id :: MainRouteTableAssociationResource s -> TF.Attribute s Text)
            (\s a -> s { _vpc_id = a } :: MainRouteTableAssociationResource s)

instance HasComputedId (MainRouteTableAssociationResource s) Text

instance HasComputedOriginalRouteTableId (MainRouteTableAssociationResource s) Text

mainRouteTableAssociationResource :: TF.Resource TF.AWS (MainRouteTableAssociationResource s)
mainRouteTableAssociationResource =
    TF.newResource "aws_main_route_table_association" $
        MainRouteTableAssociationResource {
              _route_table_id = TF.Nil
            , _vpc_id = TF.Nil
            }

{- | The @aws_media_store_container@ AWS resource.

Provides a MediaStore Container.
-}
data MediaStoreContainerResource s = MediaStoreContainerResource {
      _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the container. Must contain alphanumeric characters or underscores. -}
    } deriving (Show, Eq)

instance TF.ToHCL (MediaStoreContainerResource s) where
    toHCL MediaStoreContainerResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.attribute _name
        ]

instance HasName (MediaStoreContainerResource s) Text where
    type HasNameThread (MediaStoreContainerResource s) Text = s

    name =
        lens (_name :: MediaStoreContainerResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: MediaStoreContainerResource s)

instance HasComputedArn (MediaStoreContainerResource s) Text

instance HasComputedEndpoint (MediaStoreContainerResource s) Text

mediaStoreContainerResource :: TF.Resource TF.AWS (MediaStoreContainerResource s)
mediaStoreContainerResource =
    TF.newResource "aws_media_store_container" $
        MediaStoreContainerResource {
              _name = TF.Nil
            }

{- | The @aws_mq_broker@ AWS resource.

Provides an MQ Broker Resource. This resources also manages users for the
broker. For more information on Amazon MQ, see
<https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/welcome.html>
. Changes to an MQ Broker can occur when you change a parameter, such as
@configuration@ or @user@ , and are reflected in the next maintenance
window. Because of this, Terraform may report a difference in its planning
phase because a modification has not yet taken place. You can use the
@apply_immediately@ flag to instruct the service to apply the change
immediately (see documentation below). ~> Note: using @apply_immediately@
can result in a brief downtime as the broker reboots. ~> Note: All arguments
including the username and password will be stored in the raw state as
plain-text. </docs/state/sensitive-data.html> .
-}
data MqBrokerResource s = MqBrokerResource {
      _apply_immediately :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies whether any broker modifications are applied immediately, or during the next maintenance window. Default is @false@ . -}
    , _auto_minor_version_upgrade :: !(TF.Attribute s Text)
    {- ^ (Optional) Enables automatic upgrades to new minor versions for brokers, as Apache releases the versions. -}
    , _broker_name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the broker. -}
    , _configuration :: !(TF.Attribute s Text)
    {- ^ (Optional) Configuration of the broker. See below. -}
    , _deployment_mode :: !(TF.Attribute s Text)
    {- ^ (Optional) The deployment mode of the broker. Supported: @SINGLE_INSTANCE@ and @ACTIVE_STANDBY_MULTI_AZ@ . Defaults to @SINGLE_INSTANCE@ . -}
    , _engine_type :: !(TF.Attribute s Text)
    {- ^ (Required) The type of broker engine. Currently, Amazon MQ supports only @ActiveMQ@ . -}
    , _engine_version :: !(TF.Attribute s Text)
    {- ^ (Required) The version of the broker engine. Currently, Amazon MQ supports only @5.15.0@ . -}
    , _host_instance_type :: !(TF.Attribute s Text)
    {- ^ (Required) The broker's instance type. e.g. @mq.t2.micro@ or @mq.m4.large@ -}
    , _maintenance_window_start_time :: !(TF.Attribute s Text)
    {- ^ (Optional) Maintenance window start time. See below. -}
    , _publicly_accessible :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to enable connections from applications outside of the VPC that hosts the broker's subnets. -}
    , _security_groups :: !(TF.Attribute s Text)
    {- ^ (Required) The list of security group IDs assigned to the broker. -}
    , _subnet_ids :: !(TF.Attribute s Text)
    {- ^ (Optional) The list of subnet IDs in which to launch the broker. A @SINGLE_INSTANCE@ deployment requires one subnet. An @ACTIVE_STANDBY_MULTI_AZ@ deployment requires two subnets. -}
    , _user :: !(TF.Attribute s Text)
    {- ^ (Optional) The list of all ActiveMQ usernames for the specified broker. See below. -}
    } deriving (Show, Eq)

instance TF.ToHCL (MqBrokerResource s) where
    toHCL MqBrokerResource{..} = TF.block $ catMaybes
        [ TF.assign "apply_immediately" <$> TF.attribute _apply_immediately
        , TF.assign "auto_minor_version_upgrade" <$> TF.attribute _auto_minor_version_upgrade
        , TF.assign "broker_name" <$> TF.attribute _broker_name
        , TF.assign "configuration" <$> TF.attribute _configuration
        , TF.assign "deployment_mode" <$> TF.attribute _deployment_mode
        , TF.assign "engine_type" <$> TF.attribute _engine_type
        , TF.assign "engine_version" <$> TF.attribute _engine_version
        , TF.assign "host_instance_type" <$> TF.attribute _host_instance_type
        , TF.assign "maintenance_window_start_time" <$> TF.attribute _maintenance_window_start_time
        , TF.assign "publicly_accessible" <$> TF.attribute _publicly_accessible
        , TF.assign "security_groups" <$> TF.attribute _security_groups
        , TF.assign "subnet_ids" <$> TF.attribute _subnet_ids
        , TF.assign "user" <$> TF.attribute _user
        ]

instance HasApplyImmediately (MqBrokerResource s) Text where
    type HasApplyImmediatelyThread (MqBrokerResource s) Text = s

    applyImmediately =
        lens (_apply_immediately :: MqBrokerResource s -> TF.Attribute s Text)
            (\s a -> s { _apply_immediately = a } :: MqBrokerResource s)

instance HasAutoMinorVersionUpgrade (MqBrokerResource s) Text where
    type HasAutoMinorVersionUpgradeThread (MqBrokerResource s) Text = s

    autoMinorVersionUpgrade =
        lens (_auto_minor_version_upgrade :: MqBrokerResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_minor_version_upgrade = a } :: MqBrokerResource s)

instance HasBrokerName (MqBrokerResource s) Text where
    type HasBrokerNameThread (MqBrokerResource s) Text = s

    brokerName =
        lens (_broker_name :: MqBrokerResource s -> TF.Attribute s Text)
            (\s a -> s { _broker_name = a } :: MqBrokerResource s)

instance HasConfiguration (MqBrokerResource s) Text where
    type HasConfigurationThread (MqBrokerResource s) Text = s

    configuration =
        lens (_configuration :: MqBrokerResource s -> TF.Attribute s Text)
            (\s a -> s { _configuration = a } :: MqBrokerResource s)

instance HasDeploymentMode (MqBrokerResource s) Text where
    type HasDeploymentModeThread (MqBrokerResource s) Text = s

    deploymentMode =
        lens (_deployment_mode :: MqBrokerResource s -> TF.Attribute s Text)
            (\s a -> s { _deployment_mode = a } :: MqBrokerResource s)

instance HasEngineType (MqBrokerResource s) Text where
    type HasEngineTypeThread (MqBrokerResource s) Text = s

    engineType =
        lens (_engine_type :: MqBrokerResource s -> TF.Attribute s Text)
            (\s a -> s { _engine_type = a } :: MqBrokerResource s)

instance HasEngineVersion (MqBrokerResource s) Text where
    type HasEngineVersionThread (MqBrokerResource s) Text = s

    engineVersion =
        lens (_engine_version :: MqBrokerResource s -> TF.Attribute s Text)
            (\s a -> s { _engine_version = a } :: MqBrokerResource s)

instance HasHostInstanceType (MqBrokerResource s) Text where
    type HasHostInstanceTypeThread (MqBrokerResource s) Text = s

    hostInstanceType =
        lens (_host_instance_type :: MqBrokerResource s -> TF.Attribute s Text)
            (\s a -> s { _host_instance_type = a } :: MqBrokerResource s)

instance HasMaintenanceWindowStartTime (MqBrokerResource s) Text where
    type HasMaintenanceWindowStartTimeThread (MqBrokerResource s) Text = s

    maintenanceWindowStartTime =
        lens (_maintenance_window_start_time :: MqBrokerResource s -> TF.Attribute s Text)
            (\s a -> s { _maintenance_window_start_time = a } :: MqBrokerResource s)

instance HasPubliclyAccessible (MqBrokerResource s) Text where
    type HasPubliclyAccessibleThread (MqBrokerResource s) Text = s

    publiclyAccessible =
        lens (_publicly_accessible :: MqBrokerResource s -> TF.Attribute s Text)
            (\s a -> s { _publicly_accessible = a } :: MqBrokerResource s)

instance HasSecurityGroups (MqBrokerResource s) Text where
    type HasSecurityGroupsThread (MqBrokerResource s) Text = s

    securityGroups =
        lens (_security_groups :: MqBrokerResource s -> TF.Attribute s Text)
            (\s a -> s { _security_groups = a } :: MqBrokerResource s)

instance HasSubnetIds (MqBrokerResource s) Text where
    type HasSubnetIdsThread (MqBrokerResource s) Text = s

    subnetIds =
        lens (_subnet_ids :: MqBrokerResource s -> TF.Attribute s Text)
            (\s a -> s { _subnet_ids = a } :: MqBrokerResource s)

instance HasUser (MqBrokerResource s) Text where
    type HasUserThread (MqBrokerResource s) Text = s

    user =
        lens (_user :: MqBrokerResource s -> TF.Attribute s Text)
            (\s a -> s { _user = a } :: MqBrokerResource s)

mqBrokerResource :: TF.Resource TF.AWS (MqBrokerResource s)
mqBrokerResource =
    TF.newResource "aws_mq_broker" $
        MqBrokerResource {
              _apply_immediately = TF.Nil
            , _auto_minor_version_upgrade = TF.Nil
            , _broker_name = TF.Nil
            , _configuration = TF.Nil
            , _deployment_mode = TF.Nil
            , _engine_type = TF.Nil
            , _engine_version = TF.Nil
            , _host_instance_type = TF.Nil
            , _maintenance_window_start_time = TF.Nil
            , _publicly_accessible = TF.Nil
            , _security_groups = TF.Nil
            , _subnet_ids = TF.Nil
            , _user = TF.Nil
            }

{- | The @aws_mq_configuration@ AWS resource.

Provides an MQ Configuration Resource. For more information on Amazon MQ,
see
<https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/welcome.html>
.
-}
data MqConfigurationResource s = MqConfigurationResource {
      _data' :: !(TF.Attribute s Text)
    {- ^ (Required) The broker configuration in XML format. See <https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/amazon-mq-broker-configuration-parameters.html> for supported parameters and format of the XML. -}
    , _description :: !(TF.Attribute s Text)
    {- ^ (Optional) The description of the configuration. -}
    , _engine_type :: !(TF.Attribute s Text)
    {- ^ (Required) The type of broker engine. -}
    , _engine_version :: !(TF.Attribute s Text)
    {- ^ (Required) The version of the broker engine. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the configuration -}
    } deriving (Show, Eq)

instance TF.ToHCL (MqConfigurationResource s) where
    toHCL MqConfigurationResource{..} = TF.block $ catMaybes
        [ TF.assign "data" <$> TF.attribute _data'
        , TF.assign "description" <$> TF.attribute _description
        , TF.assign "engine_type" <$> TF.attribute _engine_type
        , TF.assign "engine_version" <$> TF.attribute _engine_version
        , TF.assign "name" <$> TF.attribute _name
        ]

instance HasData' (MqConfigurationResource s) Text where
    type HasData'Thread (MqConfigurationResource s) Text = s

    data' =
        lens (_data' :: MqConfigurationResource s -> TF.Attribute s Text)
            (\s a -> s { _data' = a } :: MqConfigurationResource s)

instance HasDescription (MqConfigurationResource s) Text where
    type HasDescriptionThread (MqConfigurationResource s) Text = s

    description =
        lens (_description :: MqConfigurationResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: MqConfigurationResource s)

instance HasEngineType (MqConfigurationResource s) Text where
    type HasEngineTypeThread (MqConfigurationResource s) Text = s

    engineType =
        lens (_engine_type :: MqConfigurationResource s -> TF.Attribute s Text)
            (\s a -> s { _engine_type = a } :: MqConfigurationResource s)

instance HasEngineVersion (MqConfigurationResource s) Text where
    type HasEngineVersionThread (MqConfigurationResource s) Text = s

    engineVersion =
        lens (_engine_version :: MqConfigurationResource s -> TF.Attribute s Text)
            (\s a -> s { _engine_version = a } :: MqConfigurationResource s)

instance HasName (MqConfigurationResource s) Text where
    type HasNameThread (MqConfigurationResource s) Text = s

    name =
        lens (_name :: MqConfigurationResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: MqConfigurationResource s)

instance HasComputedArn (MqConfigurationResource s) Text

instance HasComputedId (MqConfigurationResource s) Text

instance HasComputedLatestRevision (MqConfigurationResource s) Text

mqConfigurationResource :: TF.Resource TF.AWS (MqConfigurationResource s)
mqConfigurationResource =
    TF.newResource "aws_mq_configuration" $
        MqConfigurationResource {
              _data' = TF.Nil
            , _description = TF.Nil
            , _engine_type = TF.Nil
            , _engine_version = TF.Nil
            , _name = TF.Nil
            }

{- | The @aws_nat_gateway@ AWS resource.

Provides a resource to create a VPC NAT Gateway.
-}
data NatGatewayResource s = NatGatewayResource {
      _allocation_id :: !(TF.Attribute s Text)
    {- ^ (Required) The Allocation ID of the Elastic IP address for the gateway. -}
    , _subnet_id :: !(TF.Attribute s Text)
    {- ^ (Required) The Subnet ID of the subnet in which to place the gateway. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    } deriving (Show, Eq)

instance TF.ToHCL (NatGatewayResource s) where
    toHCL NatGatewayResource{..} = TF.block $ catMaybes
        [ TF.assign "allocation_id" <$> TF.attribute _allocation_id
        , TF.assign "subnet_id" <$> TF.attribute _subnet_id
        , TF.assign "tags" <$> TF.attribute _tags
        ]

instance HasAllocationId (NatGatewayResource s) Text where
    type HasAllocationIdThread (NatGatewayResource s) Text = s

    allocationId =
        lens (_allocation_id :: NatGatewayResource s -> TF.Attribute s Text)
            (\s a -> s { _allocation_id = a } :: NatGatewayResource s)

instance HasSubnetId (NatGatewayResource s) Text where
    type HasSubnetIdThread (NatGatewayResource s) Text = s

    subnetId =
        lens (_subnet_id :: NatGatewayResource s -> TF.Attribute s Text)
            (\s a -> s { _subnet_id = a } :: NatGatewayResource s)

instance HasTags (NatGatewayResource s) TF.Tags where
    type HasTagsThread (NatGatewayResource s) TF.Tags = s

    tags =
        lens (_tags :: NatGatewayResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: NatGatewayResource s)

instance HasComputedAllocationId (NatGatewayResource s) Text

instance HasComputedId (NatGatewayResource s) Text

instance HasComputedNetworkInterfaceId (NatGatewayResource s) Text

instance HasComputedPrivateIp (NatGatewayResource s) Text

instance HasComputedPublicIp (NatGatewayResource s) Text

instance HasComputedSubnetId (NatGatewayResource s) Text

natGatewayResource :: TF.Resource TF.AWS (NatGatewayResource s)
natGatewayResource =
    TF.newResource "aws_nat_gateway" $
        NatGatewayResource {
              _allocation_id = TF.Nil
            , _subnet_id = TF.Nil
            , _tags = TF.Nil
            }

{- | The @aws_network_acl@ AWS resource.

Provides an network ACL resource. You might set up network ACLs with rules
similar to your security groups in order to add an additional layer of
security to your VPC.
-}
data NetworkAclResource s = NetworkAclResource {
      _egress :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies an egress rule. Parameters defined below. -}
    , _ingress :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies an ingress rule. Parameters defined below. -}
    , _subnet_id :: !(TF.Attribute s Text)
    {- ^ (Optional, Deprecated) The ID of the associated Subnet. This attribute is deprecated, please use the @subnet_ids@ attribute instead -}
    , _subnet_ids :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of Subnet IDs to apply the ACL to -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _vpc_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the associated VPC. -}
    } deriving (Show, Eq)

instance TF.ToHCL (NetworkAclResource s) where
    toHCL NetworkAclResource{..} = TF.block $ catMaybes
        [ TF.assign "egress" <$> TF.attribute _egress
        , TF.assign "ingress" <$> TF.attribute _ingress
        , TF.assign "subnet_id" <$> TF.attribute _subnet_id
        , TF.assign "subnet_ids" <$> TF.attribute _subnet_ids
        , TF.assign "tags" <$> TF.attribute _tags
        , TF.assign "vpc_id" <$> TF.attribute _vpc_id
        ]

instance HasEgress (NetworkAclResource s) Text where
    type HasEgressThread (NetworkAclResource s) Text = s

    egress =
        lens (_egress :: NetworkAclResource s -> TF.Attribute s Text)
            (\s a -> s { _egress = a } :: NetworkAclResource s)

instance HasIngress (NetworkAclResource s) Text where
    type HasIngressThread (NetworkAclResource s) Text = s

    ingress =
        lens (_ingress :: NetworkAclResource s -> TF.Attribute s Text)
            (\s a -> s { _ingress = a } :: NetworkAclResource s)

instance HasSubnetId (NetworkAclResource s) Text where
    type HasSubnetIdThread (NetworkAclResource s) Text = s

    subnetId =
        lens (_subnet_id :: NetworkAclResource s -> TF.Attribute s Text)
            (\s a -> s { _subnet_id = a } :: NetworkAclResource s)

instance HasSubnetIds (NetworkAclResource s) Text where
    type HasSubnetIdsThread (NetworkAclResource s) Text = s

    subnetIds =
        lens (_subnet_ids :: NetworkAclResource s -> TF.Attribute s Text)
            (\s a -> s { _subnet_ids = a } :: NetworkAclResource s)

instance HasTags (NetworkAclResource s) TF.Tags where
    type HasTagsThread (NetworkAclResource s) TF.Tags = s

    tags =
        lens (_tags :: NetworkAclResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: NetworkAclResource s)

instance HasVpcId (NetworkAclResource s) Text where
    type HasVpcIdThread (NetworkAclResource s) Text = s

    vpcId =
        lens (_vpc_id :: NetworkAclResource s -> TF.Attribute s Text)
            (\s a -> s { _vpc_id = a } :: NetworkAclResource s)

instance HasComputedId (NetworkAclResource s) Text

networkAclResource :: TF.Resource TF.AWS (NetworkAclResource s)
networkAclResource =
    TF.newResource "aws_network_acl" $
        NetworkAclResource {
              _egress = TF.Nil
            , _ingress = TF.Nil
            , _subnet_id = TF.Nil
            , _subnet_ids = TF.Nil
            , _tags = TF.Nil
            , _vpc_id = TF.Nil
            }

{- | The @aws_network_acl_rule@ AWS resource.

Creates an entry (a rule) in a network ACL with the specified rule number.
-}
data NetworkAclRuleResource s = NetworkAclRuleResource {
      _cidr_block :: !(TF.Attribute s TF.CIDR)
    {- ^ (Optional) The network range to allow or deny, in CIDR notation (for example 172.16.0.0/24 ). -}
    , _egress :: !(TF.Attribute s Text)
    {- ^ (Optional, bool) Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet). Default @false@ . -}
    , _from_port :: !(TF.Attribute s TF.Word16)
    {- ^ (Optional) The from port to match. -}
    , _icmp_code :: !(TF.Attribute s Text)
    {- ^ (Optional) ICMP protocol: The ICMP code. Required if specifying ICMP for the protocol. e.g. -1 -}
    , _icmp_type :: !(TF.Attribute s Text)
    {- ^ (Optional) ICMP protocol: The ICMP type. Required if specifying ICMP for the protocol. e.g. -1 -}
    , _ipv6_cidr_block :: !(TF.Attribute s TF.CIDR)
    {- ^ (Optional) The IPv6 CIDR block to allow or deny. -}
    , _network_acl_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the network ACL. -}
    , _protocol :: !(TF.Attribute s Text)
    {- ^ (Required) The protocol. A value of -1 means all protocols. -}
    , _rule_action :: !(TF.Attribute s Text)
    {- ^ (Required) Indicates whether to allow or deny the traffic that matches the rule. Accepted values: @allow@ | @deny@ -}
    , _rule_number :: !(TF.Attribute s Text)
    {- ^ (Required) The rule number for the entry (for example, 100). ACL entries are processed in ascending order by rule number. -}
    , _to_port :: !(TF.Attribute s TF.Word16)
    {- ^ (Optional) The to port to match. -}
    } deriving (Show, Eq)

instance TF.ToHCL (NetworkAclRuleResource s) where
    toHCL NetworkAclRuleResource{..} = TF.block $ catMaybes
        [ TF.assign "cidr_block" <$> TF.attribute _cidr_block
        , TF.assign "egress" <$> TF.attribute _egress
        , TF.assign "from_port" <$> TF.attribute _from_port
        , TF.assign "icmp_code" <$> TF.attribute _icmp_code
        , TF.assign "icmp_type" <$> TF.attribute _icmp_type
        , TF.assign "ipv6_cidr_block" <$> TF.attribute _ipv6_cidr_block
        , TF.assign "network_acl_id" <$> TF.attribute _network_acl_id
        , TF.assign "protocol" <$> TF.attribute _protocol
        , TF.assign "rule_action" <$> TF.attribute _rule_action
        , TF.assign "rule_number" <$> TF.attribute _rule_number
        , TF.assign "to_port" <$> TF.attribute _to_port
        ]

instance HasCidrBlock (NetworkAclRuleResource s) TF.CIDR where
    type HasCidrBlockThread (NetworkAclRuleResource s) TF.CIDR = s

    cidrBlock =
        lens (_cidr_block :: NetworkAclRuleResource s -> TF.Attribute s TF.CIDR)
            (\s a -> s { _cidr_block = a } :: NetworkAclRuleResource s)

instance HasEgress (NetworkAclRuleResource s) Text where
    type HasEgressThread (NetworkAclRuleResource s) Text = s

    egress =
        lens (_egress :: NetworkAclRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _egress = a } :: NetworkAclRuleResource s)

instance HasFromPort (NetworkAclRuleResource s) TF.Word16 where
    type HasFromPortThread (NetworkAclRuleResource s) TF.Word16 = s

    fromPort =
        lens (_from_port :: NetworkAclRuleResource s -> TF.Attribute s TF.Word16)
            (\s a -> s { _from_port = a } :: NetworkAclRuleResource s)

instance HasIcmpCode (NetworkAclRuleResource s) Text where
    type HasIcmpCodeThread (NetworkAclRuleResource s) Text = s

    icmpCode =
        lens (_icmp_code :: NetworkAclRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _icmp_code = a } :: NetworkAclRuleResource s)

instance HasIcmpType (NetworkAclRuleResource s) Text where
    type HasIcmpTypeThread (NetworkAclRuleResource s) Text = s

    icmpType =
        lens (_icmp_type :: NetworkAclRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _icmp_type = a } :: NetworkAclRuleResource s)

instance HasIpv6CidrBlock (NetworkAclRuleResource s) TF.CIDR where
    type HasIpv6CidrBlockThread (NetworkAclRuleResource s) TF.CIDR = s

    ipv6CidrBlock =
        lens (_ipv6_cidr_block :: NetworkAclRuleResource s -> TF.Attribute s TF.CIDR)
            (\s a -> s { _ipv6_cidr_block = a } :: NetworkAclRuleResource s)

instance HasNetworkAclId (NetworkAclRuleResource s) Text where
    type HasNetworkAclIdThread (NetworkAclRuleResource s) Text = s

    networkAclId =
        lens (_network_acl_id :: NetworkAclRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _network_acl_id = a } :: NetworkAclRuleResource s)

instance HasProtocol (NetworkAclRuleResource s) Text where
    type HasProtocolThread (NetworkAclRuleResource s) Text = s

    protocol =
        lens (_protocol :: NetworkAclRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _protocol = a } :: NetworkAclRuleResource s)

instance HasRuleAction (NetworkAclRuleResource s) Text where
    type HasRuleActionThread (NetworkAclRuleResource s) Text = s

    ruleAction =
        lens (_rule_action :: NetworkAclRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _rule_action = a } :: NetworkAclRuleResource s)

instance HasRuleNumber (NetworkAclRuleResource s) Text where
    type HasRuleNumberThread (NetworkAclRuleResource s) Text = s

    ruleNumber =
        lens (_rule_number :: NetworkAclRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _rule_number = a } :: NetworkAclRuleResource s)

instance HasToPort (NetworkAclRuleResource s) TF.Word16 where
    type HasToPortThread (NetworkAclRuleResource s) TF.Word16 = s

    toPort =
        lens (_to_port :: NetworkAclRuleResource s -> TF.Attribute s TF.Word16)
            (\s a -> s { _to_port = a } :: NetworkAclRuleResource s)

instance HasComputedId (NetworkAclRuleResource s) Text

networkAclRuleResource :: TF.Resource TF.AWS (NetworkAclRuleResource s)
networkAclRuleResource =
    TF.newResource "aws_network_acl_rule" $
        NetworkAclRuleResource {
              _cidr_block = TF.Nil
            , _egress = TF.Nil
            , _from_port = TF.Nil
            , _icmp_code = TF.Nil
            , _icmp_type = TF.Nil
            , _ipv6_cidr_block = TF.Nil
            , _network_acl_id = TF.Nil
            , _protocol = TF.Nil
            , _rule_action = TF.Nil
            , _rule_number = TF.Nil
            , _to_port = TF.Nil
            }

{- | The @aws_network_interface_attachment@ AWS resource.

Attach an Elastic network interface (ENI) resource with EC2 instance.
-}
data NetworkInterfaceAttachmentResource s = NetworkInterfaceAttachmentResource {
      _device_index :: !(TF.Attribute s Text)
    {- ^ (Required) Network interface index (int). -}
    , _instance_id :: !(TF.Attribute s Text)
    {- ^ (Required) Instance ID to attach. -}
    , _network_interface_id :: !(TF.Attribute s Text)
    {- ^ (Required) ENI ID to attach. -}
    } deriving (Show, Eq)

instance TF.ToHCL (NetworkInterfaceAttachmentResource s) where
    toHCL NetworkInterfaceAttachmentResource{..} = TF.block $ catMaybes
        [ TF.assign "device_index" <$> TF.attribute _device_index
        , TF.assign "instance_id" <$> TF.attribute _instance_id
        , TF.assign "network_interface_id" <$> TF.attribute _network_interface_id
        ]

instance HasDeviceIndex (NetworkInterfaceAttachmentResource s) Text where
    type HasDeviceIndexThread (NetworkInterfaceAttachmentResource s) Text = s

    deviceIndex =
        lens (_device_index :: NetworkInterfaceAttachmentResource s -> TF.Attribute s Text)
            (\s a -> s { _device_index = a } :: NetworkInterfaceAttachmentResource s)

instance HasInstanceId (NetworkInterfaceAttachmentResource s) Text where
    type HasInstanceIdThread (NetworkInterfaceAttachmentResource s) Text = s

    instanceId =
        lens (_instance_id :: NetworkInterfaceAttachmentResource s -> TF.Attribute s Text)
            (\s a -> s { _instance_id = a } :: NetworkInterfaceAttachmentResource s)

instance HasNetworkInterfaceId (NetworkInterfaceAttachmentResource s) Text where
    type HasNetworkInterfaceIdThread (NetworkInterfaceAttachmentResource s) Text = s

    networkInterfaceId =
        lens (_network_interface_id :: NetworkInterfaceAttachmentResource s -> TF.Attribute s Text)
            (\s a -> s { _network_interface_id = a } :: NetworkInterfaceAttachmentResource s)

instance HasComputedAttachmentId (NetworkInterfaceAttachmentResource s) Text

instance HasComputedInstanceId (NetworkInterfaceAttachmentResource s) Text

instance HasComputedNetworkInterfaceId (NetworkInterfaceAttachmentResource s) Text

instance HasComputedStatus (NetworkInterfaceAttachmentResource s) Text

networkInterfaceAttachmentResource :: TF.Resource TF.AWS (NetworkInterfaceAttachmentResource s)
networkInterfaceAttachmentResource =
    TF.newResource "aws_network_interface_attachment" $
        NetworkInterfaceAttachmentResource {
              _device_index = TF.Nil
            , _instance_id = TF.Nil
            , _network_interface_id = TF.Nil
            }

{- | The @aws_network_interface@ AWS resource.

Provides an Elastic network interface (ENI) resource.
-}
data NetworkInterfaceResource s = NetworkInterfaceResource {
      _attachment :: !(TF.Attribute s Text)
    {- ^ (Optional) Block to define the attachment of the ENI. Documented below. -}
    , _description :: !(TF.Attribute s Text)
    {- ^ (Optional) A description for the network interface. -}
    , _private_ips :: !(TF.Attribute s Text)
    {- ^ (Optional) List of private IPs to assign to the ENI. -}
    , _private_ips_count :: !(TF.Attribute s Text)
    {- ^ (Optional) Number of private IPs to assign to the ENI. -}
    , _security_groups :: !(TF.Attribute s Text)
    {- ^ (Optional) List of security group IDs to assign to the ENI. -}
    , _source_dest_check :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to enable source destination checking for the ENI. Default true. -}
    , _subnet_id :: !(TF.Attribute s Text)
    {- ^ (Required) Subnet ID to create the ENI in. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    } deriving (Show, Eq)

instance TF.ToHCL (NetworkInterfaceResource s) where
    toHCL NetworkInterfaceResource{..} = TF.block $ catMaybes
        [ TF.assign "attachment" <$> TF.attribute _attachment
        , TF.assign "description" <$> TF.attribute _description
        , TF.assign "private_ips" <$> TF.attribute _private_ips
        , TF.assign "private_ips_count" <$> TF.attribute _private_ips_count
        , TF.assign "security_groups" <$> TF.attribute _security_groups
        , TF.assign "source_dest_check" <$> TF.attribute _source_dest_check
        , TF.assign "subnet_id" <$> TF.attribute _subnet_id
        , TF.assign "tags" <$> TF.attribute _tags
        ]

instance HasAttachment (NetworkInterfaceResource s) Text where
    type HasAttachmentThread (NetworkInterfaceResource s) Text = s

    attachment =
        lens (_attachment :: NetworkInterfaceResource s -> TF.Attribute s Text)
            (\s a -> s { _attachment = a } :: NetworkInterfaceResource s)

instance HasDescription (NetworkInterfaceResource s) Text where
    type HasDescriptionThread (NetworkInterfaceResource s) Text = s

    description =
        lens (_description :: NetworkInterfaceResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: NetworkInterfaceResource s)

instance HasPrivateIps (NetworkInterfaceResource s) Text where
    type HasPrivateIpsThread (NetworkInterfaceResource s) Text = s

    privateIps =
        lens (_private_ips :: NetworkInterfaceResource s -> TF.Attribute s Text)
            (\s a -> s { _private_ips = a } :: NetworkInterfaceResource s)

instance HasPrivateIpsCount (NetworkInterfaceResource s) Text where
    type HasPrivateIpsCountThread (NetworkInterfaceResource s) Text = s

    privateIpsCount =
        lens (_private_ips_count :: NetworkInterfaceResource s -> TF.Attribute s Text)
            (\s a -> s { _private_ips_count = a } :: NetworkInterfaceResource s)

instance HasSecurityGroups (NetworkInterfaceResource s) Text where
    type HasSecurityGroupsThread (NetworkInterfaceResource s) Text = s

    securityGroups =
        lens (_security_groups :: NetworkInterfaceResource s -> TF.Attribute s Text)
            (\s a -> s { _security_groups = a } :: NetworkInterfaceResource s)

instance HasSourceDestCheck (NetworkInterfaceResource s) Text where
    type HasSourceDestCheckThread (NetworkInterfaceResource s) Text = s

    sourceDestCheck =
        lens (_source_dest_check :: NetworkInterfaceResource s -> TF.Attribute s Text)
            (\s a -> s { _source_dest_check = a } :: NetworkInterfaceResource s)

instance HasSubnetId (NetworkInterfaceResource s) Text where
    type HasSubnetIdThread (NetworkInterfaceResource s) Text = s

    subnetId =
        lens (_subnet_id :: NetworkInterfaceResource s -> TF.Attribute s Text)
            (\s a -> s { _subnet_id = a } :: NetworkInterfaceResource s)

instance HasTags (NetworkInterfaceResource s) TF.Tags where
    type HasTagsThread (NetworkInterfaceResource s) TF.Tags = s

    tags =
        lens (_tags :: NetworkInterfaceResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: NetworkInterfaceResource s)

instance HasComputedAttachment (NetworkInterfaceResource s) Text

instance HasComputedDescription (NetworkInterfaceResource s) Text

instance HasComputedId (NetworkInterfaceResource s) Text

instance HasComputedPrivateIps (NetworkInterfaceResource s) Text

instance HasComputedSecurityGroups (NetworkInterfaceResource s) Text

instance HasComputedSourceDestCheck (NetworkInterfaceResource s) Text

instance HasComputedSubnetId (NetworkInterfaceResource s) Text

instance HasComputedTags (NetworkInterfaceResource s) TF.Tags

networkInterfaceResource :: TF.Resource TF.AWS (NetworkInterfaceResource s)
networkInterfaceResource =
    TF.newResource "aws_network_interface" $
        NetworkInterfaceResource {
              _attachment = TF.Nil
            , _description = TF.Nil
            , _private_ips = TF.Nil
            , _private_ips_count = TF.Nil
            , _security_groups = TF.Nil
            , _source_dest_check = TF.Nil
            , _subnet_id = TF.Nil
            , _tags = TF.Nil
            }

{- | The @aws_network_interface_sg_attachment@ AWS resource.

This resource attaches a security group to an Elastic Network Interface
(ENI). It can be used to attach a security group to any existing ENI, be it
a secondary ENI or one attached as the primary interface on an instance. ~>
NOTE on instances, interfaces, and security groups: Terraform currently
provides the capability to assign security groups via the
</docs/providers/aws/d/instance.html> and the
</docs/providers/aws/r/network_interface.html> resources. Using this
resource in conjunction with security groups provided in-line in those
resources will cause conflicts, and will lead to spurious diffs and
undefined behavior - please use one or the other.
-}
data NetworkInterfaceSgAttachmentResource s = NetworkInterfaceSgAttachmentResource {
      _network_interface_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the network interface to attach to. -}
    , _security_group_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the security group. -}
    } deriving (Show, Eq)

instance TF.ToHCL (NetworkInterfaceSgAttachmentResource s) where
    toHCL NetworkInterfaceSgAttachmentResource{..} = TF.block $ catMaybes
        [ TF.assign "network_interface_id" <$> TF.attribute _network_interface_id
        , TF.assign "security_group_id" <$> TF.attribute _security_group_id
        ]

instance HasNetworkInterfaceId (NetworkInterfaceSgAttachmentResource s) Text where
    type HasNetworkInterfaceIdThread (NetworkInterfaceSgAttachmentResource s) Text = s

    networkInterfaceId =
        lens (_network_interface_id :: NetworkInterfaceSgAttachmentResource s -> TF.Attribute s Text)
            (\s a -> s { _network_interface_id = a } :: NetworkInterfaceSgAttachmentResource s)

instance HasSecurityGroupId (NetworkInterfaceSgAttachmentResource s) Text where
    type HasSecurityGroupIdThread (NetworkInterfaceSgAttachmentResource s) Text = s

    securityGroupId =
        lens (_security_group_id :: NetworkInterfaceSgAttachmentResource s -> TF.Attribute s Text)
            (\s a -> s { _security_group_id = a } :: NetworkInterfaceSgAttachmentResource s)

networkInterfaceSgAttachmentResource :: TF.Resource TF.AWS (NetworkInterfaceSgAttachmentResource s)
networkInterfaceSgAttachmentResource =
    TF.newResource "aws_network_interface_sg_attachment" $
        NetworkInterfaceSgAttachmentResource {
              _network_interface_id = TF.Nil
            , _security_group_id = TF.Nil
            }

{- | The @aws_opsworks_application@ AWS resource.

Provides an OpsWorks application resource.
-}
data OpsworksApplicationResource s = OpsworksApplicationResource {
      _app_source :: !(TF.Attribute s Text)
    {- ^ (Optional) SCM configuration of the app as described below. -}
    , _auto_bundle_on_deploy :: !(TF.Attribute s Text)
    {- ^ (Optional) Run bundle install when deploying for application of type @rails@ . -}
    , _aws_flow_ruby_settings :: !(TF.Attribute s Text)
    {- ^ (Optional) Specify activity and workflow workers for your app using the aws-flow gem. -}
    , _data_source_arn :: !(TF.Attribute s Text)
    {- ^ (Optional) The data source's ARN. -}
    , _data_source_database_name :: !(TF.Attribute s Text)
    {- ^ (Optional) The database name. -}
    , _data_source_type :: !(TF.Attribute s Text)
    {- ^ (Optional) The data source's type one of @AutoSelectOpsworksMysqlInstance@ , @OpsworksMysqlInstance@ , or @RdsDbInstance@ . -}
    , _description :: !(TF.Attribute s Text)
    {- ^ (Optional) A description of the app. -}
    , _document_root :: !(TF.Attribute s Text)
    {- ^ (Optional) Subfolder for the document root for application of type @rails@ . -}
    , _domains :: !(TF.Attribute s Text)
    {- ^ -  (Optional) A list of virtual host alias. -}
    , _enable_ssl :: !(TF.Attribute s TF.Bool)
    {- ^ (Optional) Whether to enable SSL for the app. This must be set in order to let @ssl_configuration.private_key@ , @ssl_configuration.certificate@ and @ssl_configuration.chain@ take effect. -}
    , _environment :: !(TF.Attribute s Text)
    {- ^ (Optional) Object to define environment variables.  Object is described below. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) A human-readable name for the application. -}
    , _rails_env :: !(TF.Attribute s Text)
    {- ^ (Required if @type@ = @rails@ ) The name of the Rails environment for application of type @rails@ . -}
    , _short_name :: !(TF.Attribute s Text)
    {- ^ (Required) A short, machine-readable name for the application. This can only be defined on resource creation and ignored on resource update. -}
    , _ssl_configuration :: !(TF.Attribute s Text)
    {- ^ (Optional) The SSL configuration of the app. Object is described below. -}
    , _stack_id :: !(TF.Attribute s Text)
    {- ^ (Required) The id of the stack the application will belong to. -}
    , _type' :: !(TF.Attribute s Text)
    {- ^ (Required) Opsworks application type. One of @aws-flow-ruby@ , @java@ , @rails@ , @php@ , @nodejs@ , @static@ or @other@ . -}
    } deriving (Show, Eq)

instance TF.ToHCL (OpsworksApplicationResource s) where
    toHCL OpsworksApplicationResource{..} = TF.block $ catMaybes
        [ TF.assign "app_source" <$> TF.attribute _app_source
        , TF.assign "auto_bundle_on_deploy" <$> TF.attribute _auto_bundle_on_deploy
        , TF.assign "aws_flow_ruby_settings" <$> TF.attribute _aws_flow_ruby_settings
        , TF.assign "data_source_arn" <$> TF.attribute _data_source_arn
        , TF.assign "data_source_database_name" <$> TF.attribute _data_source_database_name
        , TF.assign "data_source_type" <$> TF.attribute _data_source_type
        , TF.assign "description" <$> TF.attribute _description
        , TF.assign "document_root" <$> TF.attribute _document_root
        , TF.assign "domains" <$> TF.attribute _domains
        , TF.assign "enable_ssl" <$> TF.attribute _enable_ssl
        , TF.assign "environment" <$> TF.attribute _environment
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "rails_env" <$> TF.attribute _rails_env
        , TF.assign "short_name" <$> TF.attribute _short_name
        , TF.assign "ssl_configuration" <$> TF.attribute _ssl_configuration
        , TF.assign "stack_id" <$> TF.attribute _stack_id
        , TF.assign "type" <$> TF.attribute _type'
        ]

instance HasAppSource (OpsworksApplicationResource s) Text where
    type HasAppSourceThread (OpsworksApplicationResource s) Text = s

    appSource =
        lens (_app_source :: OpsworksApplicationResource s -> TF.Attribute s Text)
            (\s a -> s { _app_source = a } :: OpsworksApplicationResource s)

instance HasAutoBundleOnDeploy (OpsworksApplicationResource s) Text where
    type HasAutoBundleOnDeployThread (OpsworksApplicationResource s) Text = s

    autoBundleOnDeploy =
        lens (_auto_bundle_on_deploy :: OpsworksApplicationResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_bundle_on_deploy = a } :: OpsworksApplicationResource s)

instance HasAwsFlowRubySettings (OpsworksApplicationResource s) Text where
    type HasAwsFlowRubySettingsThread (OpsworksApplicationResource s) Text = s

    awsFlowRubySettings =
        lens (_aws_flow_ruby_settings :: OpsworksApplicationResource s -> TF.Attribute s Text)
            (\s a -> s { _aws_flow_ruby_settings = a } :: OpsworksApplicationResource s)

instance HasDataSourceArn (OpsworksApplicationResource s) Text where
    type HasDataSourceArnThread (OpsworksApplicationResource s) Text = s

    dataSourceArn =
        lens (_data_source_arn :: OpsworksApplicationResource s -> TF.Attribute s Text)
            (\s a -> s { _data_source_arn = a } :: OpsworksApplicationResource s)

instance HasDataSourceDatabaseName (OpsworksApplicationResource s) Text where
    type HasDataSourceDatabaseNameThread (OpsworksApplicationResource s) Text = s

    dataSourceDatabaseName =
        lens (_data_source_database_name :: OpsworksApplicationResource s -> TF.Attribute s Text)
            (\s a -> s { _data_source_database_name = a } :: OpsworksApplicationResource s)

instance HasDataSourceType (OpsworksApplicationResource s) Text where
    type HasDataSourceTypeThread (OpsworksApplicationResource s) Text = s

    dataSourceType =
        lens (_data_source_type :: OpsworksApplicationResource s -> TF.Attribute s Text)
            (\s a -> s { _data_source_type = a } :: OpsworksApplicationResource s)

instance HasDescription (OpsworksApplicationResource s) Text where
    type HasDescriptionThread (OpsworksApplicationResource s) Text = s

    description =
        lens (_description :: OpsworksApplicationResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: OpsworksApplicationResource s)

instance HasDocumentRoot (OpsworksApplicationResource s) Text where
    type HasDocumentRootThread (OpsworksApplicationResource s) Text = s

    documentRoot =
        lens (_document_root :: OpsworksApplicationResource s -> TF.Attribute s Text)
            (\s a -> s { _document_root = a } :: OpsworksApplicationResource s)

instance HasDomains (OpsworksApplicationResource s) Text where
    type HasDomainsThread (OpsworksApplicationResource s) Text = s

    domains =
        lens (_domains :: OpsworksApplicationResource s -> TF.Attribute s Text)
            (\s a -> s { _domains = a } :: OpsworksApplicationResource s)

instance HasEnableSsl (OpsworksApplicationResource s) TF.Bool where
    type HasEnableSslThread (OpsworksApplicationResource s) TF.Bool = s

    enableSsl =
        lens (_enable_ssl :: OpsworksApplicationResource s -> TF.Attribute s TF.Bool)
            (\s a -> s { _enable_ssl = a } :: OpsworksApplicationResource s)

instance HasEnvironment (OpsworksApplicationResource s) Text where
    type HasEnvironmentThread (OpsworksApplicationResource s) Text = s

    environment =
        lens (_environment :: OpsworksApplicationResource s -> TF.Attribute s Text)
            (\s a -> s { _environment = a } :: OpsworksApplicationResource s)

instance HasName (OpsworksApplicationResource s) Text where
    type HasNameThread (OpsworksApplicationResource s) Text = s

    name =
        lens (_name :: OpsworksApplicationResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: OpsworksApplicationResource s)

instance HasRailsEnv (OpsworksApplicationResource s) Text where
    type HasRailsEnvThread (OpsworksApplicationResource s) Text = s

    railsEnv =
        lens (_rails_env :: OpsworksApplicationResource s -> TF.Attribute s Text)
            (\s a -> s { _rails_env = a } :: OpsworksApplicationResource s)

instance HasShortName (OpsworksApplicationResource s) Text where
    type HasShortNameThread (OpsworksApplicationResource s) Text = s

    shortName =
        lens (_short_name :: OpsworksApplicationResource s -> TF.Attribute s Text)
            (\s a -> s { _short_name = a } :: OpsworksApplicationResource s)

instance HasSslConfiguration (OpsworksApplicationResource s) Text where
    type HasSslConfigurationThread (OpsworksApplicationResource s) Text = s

    sslConfiguration =
        lens (_ssl_configuration :: OpsworksApplicationResource s -> TF.Attribute s Text)
            (\s a -> s { _ssl_configuration = a } :: OpsworksApplicationResource s)

instance HasStackId (OpsworksApplicationResource s) Text where
    type HasStackIdThread (OpsworksApplicationResource s) Text = s

    stackId =
        lens (_stack_id :: OpsworksApplicationResource s -> TF.Attribute s Text)
            (\s a -> s { _stack_id = a } :: OpsworksApplicationResource s)

instance HasType' (OpsworksApplicationResource s) Text where
    type HasType'Thread (OpsworksApplicationResource s) Text = s

    type' =
        lens (_type' :: OpsworksApplicationResource s -> TF.Attribute s Text)
            (\s a -> s { _type' = a } :: OpsworksApplicationResource s)

instance HasComputedId (OpsworksApplicationResource s) Text

opsworksApplicationResource :: TF.Resource TF.AWS (OpsworksApplicationResource s)
opsworksApplicationResource =
    TF.newResource "aws_opsworks_application" $
        OpsworksApplicationResource {
              _app_source = TF.Nil
            , _auto_bundle_on_deploy = TF.Nil
            , _aws_flow_ruby_settings = TF.Nil
            , _data_source_arn = TF.Nil
            , _data_source_database_name = TF.Nil
            , _data_source_type = TF.Nil
            , _description = TF.Nil
            , _document_root = TF.Nil
            , _domains = TF.Nil
            , _enable_ssl = TF.Nil
            , _environment = TF.Nil
            , _name = TF.Nil
            , _rails_env = TF.Nil
            , _short_name = TF.Nil
            , _ssl_configuration = TF.Nil
            , _stack_id = TF.Nil
            , _type' = TF.Nil
            }

{- | The @aws_opsworks_custom_layer@ AWS resource.

Provides an OpsWorks custom layer resource.
-}
data OpsworksCustomLayerResource s = OpsworksCustomLayerResource {
      _auto_assign_elastic_ips :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to automatically assign an elastic IP address to the layer's instances. -}
    , _auto_assign_public_ips :: !(TF.Attribute s Text)
    {- ^ (Optional) For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances. -}
    , _auto_healing :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to enable auto-healing for the layer. -}
    , _custom_instance_profile_arn :: !(TF.Attribute s Text)
    {- ^ (Optional) The ARN of an IAM profile that will be used for the layer's instances. -}
    , _custom_json :: !(TF.Attribute s Text)
    {- ^ (Optional) Custom JSON attributes to apply to the layer. -}
    , _custom_security_group_ids :: !(TF.Attribute s Text)
    {- ^ (Optional) Ids for a set of security groups to apply to the layer's instances. -}
    , _drain_elb_on_shutdown :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to enable Elastic Load Balancing connection draining. -}
    , _ebs_volume :: !(TF.Attribute s Text)
    {- ^ (Optional) @ebs_volume@ blocks, as described below, will each create an EBS volume and connect it to the layer's instances. -}
    , _elastic_load_balancer :: !(TF.Attribute s Text)
    {- ^ (Optional) Name of an Elastic Load Balancer to attach to this layer -}
    , _install_updates_on_boot :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to install OS and package updates on each instance when it boots. -}
    , _instance_shutdown_timeout :: !(TF.Attribute s Text)
    {- ^ (Optional) The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) A human-readable name for the layer. -}
    , _short_name :: !(TF.Attribute s Text)
    {- ^ (Required) A short, machine-readable name for the layer, which will be used to identify it in the Chef node JSON. -}
    , _stack_id :: !(TF.Attribute s Text)
    {- ^ (Required) The id of the stack the layer will belong to. -}
    , _system_packages :: !(TF.Attribute s Text)
    {- ^ (Optional) Names of a set of system packages to install on the layer's instances. -}
    , _use_ebs_optimized_instances :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to use EBS-optimized instances. -}
    } deriving (Show, Eq)

instance TF.ToHCL (OpsworksCustomLayerResource s) where
    toHCL OpsworksCustomLayerResource{..} = TF.block $ catMaybes
        [ TF.assign "auto_assign_elastic_ips" <$> TF.attribute _auto_assign_elastic_ips
        , TF.assign "auto_assign_public_ips" <$> TF.attribute _auto_assign_public_ips
        , TF.assign "auto_healing" <$> TF.attribute _auto_healing
        , TF.assign "custom_instance_profile_arn" <$> TF.attribute _custom_instance_profile_arn
        , TF.assign "custom_json" <$> TF.attribute _custom_json
        , TF.assign "custom_security_group_ids" <$> TF.attribute _custom_security_group_ids
        , TF.assign "drain_elb_on_shutdown" <$> TF.attribute _drain_elb_on_shutdown
        , TF.assign "ebs_volume" <$> TF.attribute _ebs_volume
        , TF.assign "elastic_load_balancer" <$> TF.attribute _elastic_load_balancer
        , TF.assign "install_updates_on_boot" <$> TF.attribute _install_updates_on_boot
        , TF.assign "instance_shutdown_timeout" <$> TF.attribute _instance_shutdown_timeout
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "short_name" <$> TF.attribute _short_name
        , TF.assign "stack_id" <$> TF.attribute _stack_id
        , TF.assign "system_packages" <$> TF.attribute _system_packages
        , TF.assign "use_ebs_optimized_instances" <$> TF.attribute _use_ebs_optimized_instances
        ]

instance HasAutoAssignElasticIps (OpsworksCustomLayerResource s) Text where
    type HasAutoAssignElasticIpsThread (OpsworksCustomLayerResource s) Text = s

    autoAssignElasticIps =
        lens (_auto_assign_elastic_ips :: OpsworksCustomLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_assign_elastic_ips = a } :: OpsworksCustomLayerResource s)

instance HasAutoAssignPublicIps (OpsworksCustomLayerResource s) Text where
    type HasAutoAssignPublicIpsThread (OpsworksCustomLayerResource s) Text = s

    autoAssignPublicIps =
        lens (_auto_assign_public_ips :: OpsworksCustomLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_assign_public_ips = a } :: OpsworksCustomLayerResource s)

instance HasAutoHealing (OpsworksCustomLayerResource s) Text where
    type HasAutoHealingThread (OpsworksCustomLayerResource s) Text = s

    autoHealing =
        lens (_auto_healing :: OpsworksCustomLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_healing = a } :: OpsworksCustomLayerResource s)

instance HasCustomInstanceProfileArn (OpsworksCustomLayerResource s) Text where
    type HasCustomInstanceProfileArnThread (OpsworksCustomLayerResource s) Text = s

    customInstanceProfileArn =
        lens (_custom_instance_profile_arn :: OpsworksCustomLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _custom_instance_profile_arn = a } :: OpsworksCustomLayerResource s)

instance HasCustomJson (OpsworksCustomLayerResource s) Text where
    type HasCustomJsonThread (OpsworksCustomLayerResource s) Text = s

    customJson =
        lens (_custom_json :: OpsworksCustomLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _custom_json = a } :: OpsworksCustomLayerResource s)

instance HasCustomSecurityGroupIds (OpsworksCustomLayerResource s) Text where
    type HasCustomSecurityGroupIdsThread (OpsworksCustomLayerResource s) Text = s

    customSecurityGroupIds =
        lens (_custom_security_group_ids :: OpsworksCustomLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _custom_security_group_ids = a } :: OpsworksCustomLayerResource s)

instance HasDrainElbOnShutdown (OpsworksCustomLayerResource s) Text where
    type HasDrainElbOnShutdownThread (OpsworksCustomLayerResource s) Text = s

    drainElbOnShutdown =
        lens (_drain_elb_on_shutdown :: OpsworksCustomLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _drain_elb_on_shutdown = a } :: OpsworksCustomLayerResource s)

instance HasEbsVolume (OpsworksCustomLayerResource s) Text where
    type HasEbsVolumeThread (OpsworksCustomLayerResource s) Text = s

    ebsVolume =
        lens (_ebs_volume :: OpsworksCustomLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _ebs_volume = a } :: OpsworksCustomLayerResource s)

instance HasElasticLoadBalancer (OpsworksCustomLayerResource s) Text where
    type HasElasticLoadBalancerThread (OpsworksCustomLayerResource s) Text = s

    elasticLoadBalancer =
        lens (_elastic_load_balancer :: OpsworksCustomLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _elastic_load_balancer = a } :: OpsworksCustomLayerResource s)

instance HasInstallUpdatesOnBoot (OpsworksCustomLayerResource s) Text where
    type HasInstallUpdatesOnBootThread (OpsworksCustomLayerResource s) Text = s

    installUpdatesOnBoot =
        lens (_install_updates_on_boot :: OpsworksCustomLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _install_updates_on_boot = a } :: OpsworksCustomLayerResource s)

instance HasInstanceShutdownTimeout (OpsworksCustomLayerResource s) Text where
    type HasInstanceShutdownTimeoutThread (OpsworksCustomLayerResource s) Text = s

    instanceShutdownTimeout =
        lens (_instance_shutdown_timeout :: OpsworksCustomLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _instance_shutdown_timeout = a } :: OpsworksCustomLayerResource s)

instance HasName (OpsworksCustomLayerResource s) Text where
    type HasNameThread (OpsworksCustomLayerResource s) Text = s

    name =
        lens (_name :: OpsworksCustomLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: OpsworksCustomLayerResource s)

instance HasShortName (OpsworksCustomLayerResource s) Text where
    type HasShortNameThread (OpsworksCustomLayerResource s) Text = s

    shortName =
        lens (_short_name :: OpsworksCustomLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _short_name = a } :: OpsworksCustomLayerResource s)

instance HasStackId (OpsworksCustomLayerResource s) Text where
    type HasStackIdThread (OpsworksCustomLayerResource s) Text = s

    stackId =
        lens (_stack_id :: OpsworksCustomLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _stack_id = a } :: OpsworksCustomLayerResource s)

instance HasSystemPackages (OpsworksCustomLayerResource s) Text where
    type HasSystemPackagesThread (OpsworksCustomLayerResource s) Text = s

    systemPackages =
        lens (_system_packages :: OpsworksCustomLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _system_packages = a } :: OpsworksCustomLayerResource s)

instance HasUseEbsOptimizedInstances (OpsworksCustomLayerResource s) Text where
    type HasUseEbsOptimizedInstancesThread (OpsworksCustomLayerResource s) Text = s

    useEbsOptimizedInstances =
        lens (_use_ebs_optimized_instances :: OpsworksCustomLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _use_ebs_optimized_instances = a } :: OpsworksCustomLayerResource s)

instance HasComputedId (OpsworksCustomLayerResource s) Text

opsworksCustomLayerResource :: TF.Resource TF.AWS (OpsworksCustomLayerResource s)
opsworksCustomLayerResource =
    TF.newResource "aws_opsworks_custom_layer" $
        OpsworksCustomLayerResource {
              _auto_assign_elastic_ips = TF.Nil
            , _auto_assign_public_ips = TF.Nil
            , _auto_healing = TF.Nil
            , _custom_instance_profile_arn = TF.Nil
            , _custom_json = TF.Nil
            , _custom_security_group_ids = TF.Nil
            , _drain_elb_on_shutdown = TF.Nil
            , _ebs_volume = TF.Nil
            , _elastic_load_balancer = TF.Nil
            , _install_updates_on_boot = TF.Nil
            , _instance_shutdown_timeout = TF.Nil
            , _name = TF.Nil
            , _short_name = TF.Nil
            , _stack_id = TF.Nil
            , _system_packages = TF.Nil
            , _use_ebs_optimized_instances = TF.Nil
            }

{- | The @aws_opsworks_ganglia_layer@ AWS resource.

Provides an OpsWorks Ganglia layer resource.
-}
data OpsworksGangliaLayerResource s = OpsworksGangliaLayerResource {
      _auto_assign_elastic_ips :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to automatically assign an elastic IP address to the layer's instances. -}
    , _auto_assign_public_ips :: !(TF.Attribute s Text)
    {- ^ (Optional) For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances. -}
    , _auto_healing :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to enable auto-healing for the layer. -}
    , _custom_instance_profile_arn :: !(TF.Attribute s Text)
    {- ^ (Optional) The ARN of an IAM profile that will be used for the layer's instances. -}
    , _custom_json :: !(TF.Attribute s Text)
    {- ^ (Optional) Custom JSON attributes to apply to the layer. -}
    , _custom_security_group_ids :: !(TF.Attribute s Text)
    {- ^ (Optional) Ids for a set of security groups to apply to the layer's instances. -}
    , _drain_elb_on_shutdown :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to enable Elastic Load Balancing connection draining. -}
    , _ebs_volume :: !(TF.Attribute s Text)
    {- ^ (Optional) @ebs_volume@ blocks, as described below, will each create an EBS volume and connect it to the layer's instances. -}
    , _elastic_load_balancer :: !(TF.Attribute s Text)
    {- ^ (Optional) Name of an Elastic Load Balancer to attach to this layer -}
    , _install_updates_on_boot :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to install OS and package updates on each instance when it boots. -}
    , _instance_shutdown_timeout :: !(TF.Attribute s Text)
    {- ^ (Optional) The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Optional) A human-readable name for the layer. -}
    , _password :: !(TF.Attribute s Text)
    {- ^ (Required) The password to use for Ganglia. -}
    , _stack_id :: !(TF.Attribute s Text)
    {- ^ (Required) The id of the stack the layer will belong to. -}
    , _system_packages :: !(TF.Attribute s Text)
    {- ^ (Optional) Names of a set of system packages to install on the layer's instances. -}
    , _url :: !(TF.Attribute s Text)
    {- ^ (Optional) The URL path to use for Ganglia. Defaults to "/ganglia". -}
    , _use_ebs_optimized_instances :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to use EBS-optimized instances. -}
    , _username :: !(TF.Attribute s Text)
    {- ^ - (Optiona) The username to use for Ganglia. Defaults to "opsworks". -}
    } deriving (Show, Eq)

instance TF.ToHCL (OpsworksGangliaLayerResource s) where
    toHCL OpsworksGangliaLayerResource{..} = TF.block $ catMaybes
        [ TF.assign "auto_assign_elastic_ips" <$> TF.attribute _auto_assign_elastic_ips
        , TF.assign "auto_assign_public_ips" <$> TF.attribute _auto_assign_public_ips
        , TF.assign "auto_healing" <$> TF.attribute _auto_healing
        , TF.assign "custom_instance_profile_arn" <$> TF.attribute _custom_instance_profile_arn
        , TF.assign "custom_json" <$> TF.attribute _custom_json
        , TF.assign "custom_security_group_ids" <$> TF.attribute _custom_security_group_ids
        , TF.assign "drain_elb_on_shutdown" <$> TF.attribute _drain_elb_on_shutdown
        , TF.assign "ebs_volume" <$> TF.attribute _ebs_volume
        , TF.assign "elastic_load_balancer" <$> TF.attribute _elastic_load_balancer
        , TF.assign "install_updates_on_boot" <$> TF.attribute _install_updates_on_boot
        , TF.assign "instance_shutdown_timeout" <$> TF.attribute _instance_shutdown_timeout
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "password" <$> TF.attribute _password
        , TF.assign "stack_id" <$> TF.attribute _stack_id
        , TF.assign "system_packages" <$> TF.attribute _system_packages
        , TF.assign "url" <$> TF.attribute _url
        , TF.assign "use_ebs_optimized_instances" <$> TF.attribute _use_ebs_optimized_instances
        , TF.assign "username" <$> TF.attribute _username
        ]

instance HasAutoAssignElasticIps (OpsworksGangliaLayerResource s) Text where
    type HasAutoAssignElasticIpsThread (OpsworksGangliaLayerResource s) Text = s

    autoAssignElasticIps =
        lens (_auto_assign_elastic_ips :: OpsworksGangliaLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_assign_elastic_ips = a } :: OpsworksGangliaLayerResource s)

instance HasAutoAssignPublicIps (OpsworksGangliaLayerResource s) Text where
    type HasAutoAssignPublicIpsThread (OpsworksGangliaLayerResource s) Text = s

    autoAssignPublicIps =
        lens (_auto_assign_public_ips :: OpsworksGangliaLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_assign_public_ips = a } :: OpsworksGangliaLayerResource s)

instance HasAutoHealing (OpsworksGangliaLayerResource s) Text where
    type HasAutoHealingThread (OpsworksGangliaLayerResource s) Text = s

    autoHealing =
        lens (_auto_healing :: OpsworksGangliaLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_healing = a } :: OpsworksGangliaLayerResource s)

instance HasCustomInstanceProfileArn (OpsworksGangliaLayerResource s) Text where
    type HasCustomInstanceProfileArnThread (OpsworksGangliaLayerResource s) Text = s

    customInstanceProfileArn =
        lens (_custom_instance_profile_arn :: OpsworksGangliaLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _custom_instance_profile_arn = a } :: OpsworksGangliaLayerResource s)

instance HasCustomJson (OpsworksGangliaLayerResource s) Text where
    type HasCustomJsonThread (OpsworksGangliaLayerResource s) Text = s

    customJson =
        lens (_custom_json :: OpsworksGangliaLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _custom_json = a } :: OpsworksGangliaLayerResource s)

instance HasCustomSecurityGroupIds (OpsworksGangliaLayerResource s) Text where
    type HasCustomSecurityGroupIdsThread (OpsworksGangliaLayerResource s) Text = s

    customSecurityGroupIds =
        lens (_custom_security_group_ids :: OpsworksGangliaLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _custom_security_group_ids = a } :: OpsworksGangliaLayerResource s)

instance HasDrainElbOnShutdown (OpsworksGangliaLayerResource s) Text where
    type HasDrainElbOnShutdownThread (OpsworksGangliaLayerResource s) Text = s

    drainElbOnShutdown =
        lens (_drain_elb_on_shutdown :: OpsworksGangliaLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _drain_elb_on_shutdown = a } :: OpsworksGangliaLayerResource s)

instance HasEbsVolume (OpsworksGangliaLayerResource s) Text where
    type HasEbsVolumeThread (OpsworksGangliaLayerResource s) Text = s

    ebsVolume =
        lens (_ebs_volume :: OpsworksGangliaLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _ebs_volume = a } :: OpsworksGangliaLayerResource s)

instance HasElasticLoadBalancer (OpsworksGangliaLayerResource s) Text where
    type HasElasticLoadBalancerThread (OpsworksGangliaLayerResource s) Text = s

    elasticLoadBalancer =
        lens (_elastic_load_balancer :: OpsworksGangliaLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _elastic_load_balancer = a } :: OpsworksGangliaLayerResource s)

instance HasInstallUpdatesOnBoot (OpsworksGangliaLayerResource s) Text where
    type HasInstallUpdatesOnBootThread (OpsworksGangliaLayerResource s) Text = s

    installUpdatesOnBoot =
        lens (_install_updates_on_boot :: OpsworksGangliaLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _install_updates_on_boot = a } :: OpsworksGangliaLayerResource s)

instance HasInstanceShutdownTimeout (OpsworksGangliaLayerResource s) Text where
    type HasInstanceShutdownTimeoutThread (OpsworksGangliaLayerResource s) Text = s

    instanceShutdownTimeout =
        lens (_instance_shutdown_timeout :: OpsworksGangliaLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _instance_shutdown_timeout = a } :: OpsworksGangliaLayerResource s)

instance HasName (OpsworksGangliaLayerResource s) Text where
    type HasNameThread (OpsworksGangliaLayerResource s) Text = s

    name =
        lens (_name :: OpsworksGangliaLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: OpsworksGangliaLayerResource s)

instance HasPassword (OpsworksGangliaLayerResource s) Text where
    type HasPasswordThread (OpsworksGangliaLayerResource s) Text = s

    password =
        lens (_password :: OpsworksGangliaLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _password = a } :: OpsworksGangliaLayerResource s)

instance HasStackId (OpsworksGangliaLayerResource s) Text where
    type HasStackIdThread (OpsworksGangliaLayerResource s) Text = s

    stackId =
        lens (_stack_id :: OpsworksGangliaLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _stack_id = a } :: OpsworksGangliaLayerResource s)

instance HasSystemPackages (OpsworksGangliaLayerResource s) Text where
    type HasSystemPackagesThread (OpsworksGangliaLayerResource s) Text = s

    systemPackages =
        lens (_system_packages :: OpsworksGangliaLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _system_packages = a } :: OpsworksGangliaLayerResource s)

instance HasUrl (OpsworksGangliaLayerResource s) Text where
    type HasUrlThread (OpsworksGangliaLayerResource s) Text = s

    url =
        lens (_url :: OpsworksGangliaLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _url = a } :: OpsworksGangliaLayerResource s)

instance HasUseEbsOptimizedInstances (OpsworksGangliaLayerResource s) Text where
    type HasUseEbsOptimizedInstancesThread (OpsworksGangliaLayerResource s) Text = s

    useEbsOptimizedInstances =
        lens (_use_ebs_optimized_instances :: OpsworksGangliaLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _use_ebs_optimized_instances = a } :: OpsworksGangliaLayerResource s)

instance HasUsername (OpsworksGangliaLayerResource s) Text where
    type HasUsernameThread (OpsworksGangliaLayerResource s) Text = s

    username =
        lens (_username :: OpsworksGangliaLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _username = a } :: OpsworksGangliaLayerResource s)

instance HasComputedId (OpsworksGangliaLayerResource s) Text

opsworksGangliaLayerResource :: TF.Resource TF.AWS (OpsworksGangliaLayerResource s)
opsworksGangliaLayerResource =
    TF.newResource "aws_opsworks_ganglia_layer" $
        OpsworksGangliaLayerResource {
              _auto_assign_elastic_ips = TF.Nil
            , _auto_assign_public_ips = TF.Nil
            , _auto_healing = TF.Nil
            , _custom_instance_profile_arn = TF.Nil
            , _custom_json = TF.Nil
            , _custom_security_group_ids = TF.Nil
            , _drain_elb_on_shutdown = TF.Nil
            , _ebs_volume = TF.Nil
            , _elastic_load_balancer = TF.Nil
            , _install_updates_on_boot = TF.Nil
            , _instance_shutdown_timeout = TF.Nil
            , _name = TF.Nil
            , _password = TF.Nil
            , _stack_id = TF.Nil
            , _system_packages = TF.Nil
            , _url = TF.Nil
            , _use_ebs_optimized_instances = TF.Nil
            , _username = TF.Nil
            }

{- | The @aws_opsworks_haproxy_layer@ AWS resource.

Provides an OpsWorks haproxy layer resource.
-}
data OpsworksHaproxyLayerResource s = OpsworksHaproxyLayerResource {
      _auto_assign_elastic_ips :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to automatically assign an elastic IP address to the layer's instances. -}
    , _auto_assign_public_ips :: !(TF.Attribute s Text)
    {- ^ (Optional) For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances. -}
    , _auto_healing :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to enable auto-healing for the layer. -}
    , _custom_instance_profile_arn :: !(TF.Attribute s Text)
    {- ^ (Optional) The ARN of an IAM profile that will be used for the layer's instances. -}
    , _custom_json :: !(TF.Attribute s Text)
    {- ^ (Optional) Custom JSON attributes to apply to the layer. -}
    , _custom_security_group_ids :: !(TF.Attribute s Text)
    {- ^ (Optional) Ids for a set of security groups to apply to the layer's instances. -}
    , _drain_elb_on_shutdown :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to enable Elastic Load Balancing connection draining. -}
    , _ebs_volume :: !(TF.Attribute s Text)
    {- ^ (Optional) @ebs_volume@ blocks, as described below, will each create an EBS volume and connect it to the layer's instances. -}
    , _elastic_load_balancer :: !(TF.Attribute s Text)
    {- ^ (Optional) Name of an Elastic Load Balancer to attach to this layer -}
    , _healthcheck_method :: !(TF.Attribute s Text)
    {- ^ (Optional) HTTP method to use for instance healthchecks. Defaults to "OPTIONS". -}
    , _healthcheck_url :: !(TF.Attribute s Text)
    {- ^ (Optional) URL path to use for instance healthchecks. Defaults to "/". -}
    , _install_updates_on_boot :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to install OS and package updates on each instance when it boots. -}
    , _instance_shutdown_timeout :: !(TF.Attribute s Text)
    {- ^ (Optional) The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Optional) A human-readable name for the layer. -}
    , _stack_id :: !(TF.Attribute s Text)
    {- ^ (Required) The id of the stack the layer will belong to. -}
    , _stats_enabled :: !(TF.Attribute s TF.Bool)
    {- ^ (Optional) Whether to enable HAProxy stats. -}
    , _stats_password :: !(TF.Attribute s Text)
    {- ^ (Required) The password to use for HAProxy stats. -}
    , _stats_url :: !(TF.Attribute s Text)
    {- ^ (Optional) The HAProxy stats URL. Defaults to "/haproxy?stats". -}
    , _stats_user :: !(TF.Attribute s Text)
    {- ^ (Optional) The username for HAProxy stats. Defaults to "opsworks". -}
    , _system_packages :: !(TF.Attribute s Text)
    {- ^ (Optional) Names of a set of system packages to install on the layer's instances. -}
    , _use_ebs_optimized_instances :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to use EBS-optimized instances. -}
    } deriving (Show, Eq)

instance TF.ToHCL (OpsworksHaproxyLayerResource s) where
    toHCL OpsworksHaproxyLayerResource{..} = TF.block $ catMaybes
        [ TF.assign "auto_assign_elastic_ips" <$> TF.attribute _auto_assign_elastic_ips
        , TF.assign "auto_assign_public_ips" <$> TF.attribute _auto_assign_public_ips
        , TF.assign "auto_healing" <$> TF.attribute _auto_healing
        , TF.assign "custom_instance_profile_arn" <$> TF.attribute _custom_instance_profile_arn
        , TF.assign "custom_json" <$> TF.attribute _custom_json
        , TF.assign "custom_security_group_ids" <$> TF.attribute _custom_security_group_ids
        , TF.assign "drain_elb_on_shutdown" <$> TF.attribute _drain_elb_on_shutdown
        , TF.assign "ebs_volume" <$> TF.attribute _ebs_volume
        , TF.assign "elastic_load_balancer" <$> TF.attribute _elastic_load_balancer
        , TF.assign "healthcheck_method" <$> TF.attribute _healthcheck_method
        , TF.assign "healthcheck_url" <$> TF.attribute _healthcheck_url
        , TF.assign "install_updates_on_boot" <$> TF.attribute _install_updates_on_boot
        , TF.assign "instance_shutdown_timeout" <$> TF.attribute _instance_shutdown_timeout
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "stack_id" <$> TF.attribute _stack_id
        , TF.assign "stats_enabled" <$> TF.attribute _stats_enabled
        , TF.assign "stats_password" <$> TF.attribute _stats_password
        , TF.assign "stats_url" <$> TF.attribute _stats_url
        , TF.assign "stats_user" <$> TF.attribute _stats_user
        , TF.assign "system_packages" <$> TF.attribute _system_packages
        , TF.assign "use_ebs_optimized_instances" <$> TF.attribute _use_ebs_optimized_instances
        ]

instance HasAutoAssignElasticIps (OpsworksHaproxyLayerResource s) Text where
    type HasAutoAssignElasticIpsThread (OpsworksHaproxyLayerResource s) Text = s

    autoAssignElasticIps =
        lens (_auto_assign_elastic_ips :: OpsworksHaproxyLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_assign_elastic_ips = a } :: OpsworksHaproxyLayerResource s)

instance HasAutoAssignPublicIps (OpsworksHaproxyLayerResource s) Text where
    type HasAutoAssignPublicIpsThread (OpsworksHaproxyLayerResource s) Text = s

    autoAssignPublicIps =
        lens (_auto_assign_public_ips :: OpsworksHaproxyLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_assign_public_ips = a } :: OpsworksHaproxyLayerResource s)

instance HasAutoHealing (OpsworksHaproxyLayerResource s) Text where
    type HasAutoHealingThread (OpsworksHaproxyLayerResource s) Text = s

    autoHealing =
        lens (_auto_healing :: OpsworksHaproxyLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_healing = a } :: OpsworksHaproxyLayerResource s)

instance HasCustomInstanceProfileArn (OpsworksHaproxyLayerResource s) Text where
    type HasCustomInstanceProfileArnThread (OpsworksHaproxyLayerResource s) Text = s

    customInstanceProfileArn =
        lens (_custom_instance_profile_arn :: OpsworksHaproxyLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _custom_instance_profile_arn = a } :: OpsworksHaproxyLayerResource s)

instance HasCustomJson (OpsworksHaproxyLayerResource s) Text where
    type HasCustomJsonThread (OpsworksHaproxyLayerResource s) Text = s

    customJson =
        lens (_custom_json :: OpsworksHaproxyLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _custom_json = a } :: OpsworksHaproxyLayerResource s)

instance HasCustomSecurityGroupIds (OpsworksHaproxyLayerResource s) Text where
    type HasCustomSecurityGroupIdsThread (OpsworksHaproxyLayerResource s) Text = s

    customSecurityGroupIds =
        lens (_custom_security_group_ids :: OpsworksHaproxyLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _custom_security_group_ids = a } :: OpsworksHaproxyLayerResource s)

instance HasDrainElbOnShutdown (OpsworksHaproxyLayerResource s) Text where
    type HasDrainElbOnShutdownThread (OpsworksHaproxyLayerResource s) Text = s

    drainElbOnShutdown =
        lens (_drain_elb_on_shutdown :: OpsworksHaproxyLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _drain_elb_on_shutdown = a } :: OpsworksHaproxyLayerResource s)

instance HasEbsVolume (OpsworksHaproxyLayerResource s) Text where
    type HasEbsVolumeThread (OpsworksHaproxyLayerResource s) Text = s

    ebsVolume =
        lens (_ebs_volume :: OpsworksHaproxyLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _ebs_volume = a } :: OpsworksHaproxyLayerResource s)

instance HasElasticLoadBalancer (OpsworksHaproxyLayerResource s) Text where
    type HasElasticLoadBalancerThread (OpsworksHaproxyLayerResource s) Text = s

    elasticLoadBalancer =
        lens (_elastic_load_balancer :: OpsworksHaproxyLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _elastic_load_balancer = a } :: OpsworksHaproxyLayerResource s)

instance HasHealthcheckMethod (OpsworksHaproxyLayerResource s) Text where
    type HasHealthcheckMethodThread (OpsworksHaproxyLayerResource s) Text = s

    healthcheckMethod =
        lens (_healthcheck_method :: OpsworksHaproxyLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _healthcheck_method = a } :: OpsworksHaproxyLayerResource s)

instance HasHealthcheckUrl (OpsworksHaproxyLayerResource s) Text where
    type HasHealthcheckUrlThread (OpsworksHaproxyLayerResource s) Text = s

    healthcheckUrl =
        lens (_healthcheck_url :: OpsworksHaproxyLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _healthcheck_url = a } :: OpsworksHaproxyLayerResource s)

instance HasInstallUpdatesOnBoot (OpsworksHaproxyLayerResource s) Text where
    type HasInstallUpdatesOnBootThread (OpsworksHaproxyLayerResource s) Text = s

    installUpdatesOnBoot =
        lens (_install_updates_on_boot :: OpsworksHaproxyLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _install_updates_on_boot = a } :: OpsworksHaproxyLayerResource s)

instance HasInstanceShutdownTimeout (OpsworksHaproxyLayerResource s) Text where
    type HasInstanceShutdownTimeoutThread (OpsworksHaproxyLayerResource s) Text = s

    instanceShutdownTimeout =
        lens (_instance_shutdown_timeout :: OpsworksHaproxyLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _instance_shutdown_timeout = a } :: OpsworksHaproxyLayerResource s)

instance HasName (OpsworksHaproxyLayerResource s) Text where
    type HasNameThread (OpsworksHaproxyLayerResource s) Text = s

    name =
        lens (_name :: OpsworksHaproxyLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: OpsworksHaproxyLayerResource s)

instance HasStackId (OpsworksHaproxyLayerResource s) Text where
    type HasStackIdThread (OpsworksHaproxyLayerResource s) Text = s

    stackId =
        lens (_stack_id :: OpsworksHaproxyLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _stack_id = a } :: OpsworksHaproxyLayerResource s)

instance HasStatsEnabled (OpsworksHaproxyLayerResource s) TF.Bool where
    type HasStatsEnabledThread (OpsworksHaproxyLayerResource s) TF.Bool = s

    statsEnabled =
        lens (_stats_enabled :: OpsworksHaproxyLayerResource s -> TF.Attribute s TF.Bool)
            (\s a -> s { _stats_enabled = a } :: OpsworksHaproxyLayerResource s)

instance HasStatsPassword (OpsworksHaproxyLayerResource s) Text where
    type HasStatsPasswordThread (OpsworksHaproxyLayerResource s) Text = s

    statsPassword =
        lens (_stats_password :: OpsworksHaproxyLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _stats_password = a } :: OpsworksHaproxyLayerResource s)

instance HasStatsUrl (OpsworksHaproxyLayerResource s) Text where
    type HasStatsUrlThread (OpsworksHaproxyLayerResource s) Text = s

    statsUrl =
        lens (_stats_url :: OpsworksHaproxyLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _stats_url = a } :: OpsworksHaproxyLayerResource s)

instance HasStatsUser (OpsworksHaproxyLayerResource s) Text where
    type HasStatsUserThread (OpsworksHaproxyLayerResource s) Text = s

    statsUser =
        lens (_stats_user :: OpsworksHaproxyLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _stats_user = a } :: OpsworksHaproxyLayerResource s)

instance HasSystemPackages (OpsworksHaproxyLayerResource s) Text where
    type HasSystemPackagesThread (OpsworksHaproxyLayerResource s) Text = s

    systemPackages =
        lens (_system_packages :: OpsworksHaproxyLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _system_packages = a } :: OpsworksHaproxyLayerResource s)

instance HasUseEbsOptimizedInstances (OpsworksHaproxyLayerResource s) Text where
    type HasUseEbsOptimizedInstancesThread (OpsworksHaproxyLayerResource s) Text = s

    useEbsOptimizedInstances =
        lens (_use_ebs_optimized_instances :: OpsworksHaproxyLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _use_ebs_optimized_instances = a } :: OpsworksHaproxyLayerResource s)

instance HasComputedId (OpsworksHaproxyLayerResource s) Text

opsworksHaproxyLayerResource :: TF.Resource TF.AWS (OpsworksHaproxyLayerResource s)
opsworksHaproxyLayerResource =
    TF.newResource "aws_opsworks_haproxy_layer" $
        OpsworksHaproxyLayerResource {
              _auto_assign_elastic_ips = TF.Nil
            , _auto_assign_public_ips = TF.Nil
            , _auto_healing = TF.Nil
            , _custom_instance_profile_arn = TF.Nil
            , _custom_json = TF.Nil
            , _custom_security_group_ids = TF.Nil
            , _drain_elb_on_shutdown = TF.Nil
            , _ebs_volume = TF.Nil
            , _elastic_load_balancer = TF.Nil
            , _healthcheck_method = TF.Nil
            , _healthcheck_url = TF.Nil
            , _install_updates_on_boot = TF.Nil
            , _instance_shutdown_timeout = TF.Nil
            , _name = TF.Nil
            , _stack_id = TF.Nil
            , _stats_enabled = TF.Nil
            , _stats_password = TF.Nil
            , _stats_url = TF.Nil
            , _stats_user = TF.Nil
            , _system_packages = TF.Nil
            , _use_ebs_optimized_instances = TF.Nil
            }

{- | The @aws_opsworks_instance@ AWS resource.

Provides an OpsWorks instance resource.
-}
data OpsworksInstanceResource s = OpsworksInstanceResource {
      _agent_version :: !(TF.Attribute s Text)
    {- ^ (Optional) The AWS OpsWorks agent to install.  Defaults to @"INHERIT"@ . -}
    , _ami_id :: !(TF.Attribute s Text)
    {- ^ (Optional) The AMI to use for the instance.  If an AMI is specified, @os@ must be @"Custom"@ . -}
    , _architecture :: !(TF.Attribute s Text)
    {- ^ (Optional) Machine architecture for created instances.  Can be either @"x86_64"@ (the default) or @"i386"@ -}
    , _auto_scaling_type :: !(TF.Attribute s Text)
    {- ^ (Optional) Creates load-based or time-based instances.  If set, can be either: @"load"@ or @"timer"@ . -}
    , _availability_zone :: !(TF.Attribute s TF.Zone)
    {- ^ (Optional) Name of the availability zone where instances will be created by default. -}
    , _ebs_block_device :: !(TF.Attribute s Text)
    {- ^ (Optional) Additional EBS block devices to attach to the instance.  See <#block-devices> below for details. -}
    , _ebs_optimized :: !(TF.Attribute s Text)
    {- ^ (Optional) If true, the launched EC2 instance will be EBS-optimized. -}
    , _ephemeral_block_device :: !(TF.Attribute s Text)
    {- ^ (Optional) Customize Ephemeral (also known as "Instance Store") volumes on the instance. See <#block-devices> below for details. -}
    , _hostname :: !(TF.Attribute s Text)
    {- ^ (Optional) The instance's host name. -}
    , _install_updates_on_boot :: !(TF.Attribute s Text)
    {- ^ (Optional) Controls where to install OS and package updates when the instance boots.  Defaults to @true@ . -}
    , _instance_type :: !(TF.Attribute s Text)
    {- ^ (Required) The type of instance to start -}
    , _layer_ids :: !(TF.Attribute s Text)
    {- ^ (Required) The ids of the layers the instance will belong to. -}
    , _os :: !(TF.Attribute s Text)
    {- ^ (Optional) Name of operating system that will be installed. -}
    , _root_block_device :: !(TF.Attribute s Text)
    {- ^ (Optional) Customize details about the root block device of the instance. See <#block-devices> below for details. -}
    , _root_device_type :: !(TF.Attribute s Text)
    {- ^ (Optional) Name of the type of root device instances will have by default.  Can be either @"ebs"@ or @"instance-store"@ -}
    , _ssh_key_name :: !(TF.Attribute s Text)
    {- ^ (Optional) Name of the SSH keypair that instances will have by default. -}
    , _stack_id :: !(TF.Attribute s Text)
    {- ^ (Required) The id of the stack the instance will belong to. -}
    , _state :: !(TF.Attribute s Text)
    {- ^ (Optional) The desired state of the instance.  Can be either @"running"@ or @"stopped"@ . -}
    , _subnet_id :: !(TF.Attribute s Text)
    {- ^ (Optional) Subnet ID to attach to -}
    , _tenancy :: !(TF.Attribute s Text)
    {- ^ (Optional) Instance tenancy to use. Can be one of @"default"@ , @"dedicated"@ or @"host"@ -}
    , _virtualization_type :: !(TF.Attribute s Text)
    {- ^ (Optional) Keyword to choose what virtualization mode created instances will use. Can be either @"paravirtual"@ or @"hvm"@ . -}
    } deriving (Show, Eq)

instance TF.ToHCL (OpsworksInstanceResource s) where
    toHCL OpsworksInstanceResource{..} = TF.block $ catMaybes
        [ TF.assign "agent_version" <$> TF.attribute _agent_version
        , TF.assign "ami_id" <$> TF.attribute _ami_id
        , TF.assign "architecture" <$> TF.attribute _architecture
        , TF.assign "auto_scaling_type" <$> TF.attribute _auto_scaling_type
        , TF.assign "availability_zone" <$> TF.attribute _availability_zone
        , TF.assign "ebs_block_device" <$> TF.attribute _ebs_block_device
        , TF.assign "ebs_optimized" <$> TF.attribute _ebs_optimized
        , TF.assign "ephemeral_block_device" <$> TF.attribute _ephemeral_block_device
        , TF.assign "hostname" <$> TF.attribute _hostname
        , TF.assign "install_updates_on_boot" <$> TF.attribute _install_updates_on_boot
        , TF.assign "instance_type" <$> TF.attribute _instance_type
        , TF.assign "layer_ids" <$> TF.attribute _layer_ids
        , TF.assign "os" <$> TF.attribute _os
        , TF.assign "root_block_device" <$> TF.attribute _root_block_device
        , TF.assign "root_device_type" <$> TF.attribute _root_device_type
        , TF.assign "ssh_key_name" <$> TF.attribute _ssh_key_name
        , TF.assign "stack_id" <$> TF.attribute _stack_id
        , TF.assign "state" <$> TF.attribute _state
        , TF.assign "subnet_id" <$> TF.attribute _subnet_id
        , TF.assign "tenancy" <$> TF.attribute _tenancy
        , TF.assign "virtualization_type" <$> TF.attribute _virtualization_type
        ]

instance HasAgentVersion (OpsworksInstanceResource s) Text where
    type HasAgentVersionThread (OpsworksInstanceResource s) Text = s

    agentVersion =
        lens (_agent_version :: OpsworksInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _agent_version = a } :: OpsworksInstanceResource s)

instance HasAmiId (OpsworksInstanceResource s) Text where
    type HasAmiIdThread (OpsworksInstanceResource s) Text = s

    amiId =
        lens (_ami_id :: OpsworksInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _ami_id = a } :: OpsworksInstanceResource s)

instance HasArchitecture (OpsworksInstanceResource s) Text where
    type HasArchitectureThread (OpsworksInstanceResource s) Text = s

    architecture =
        lens (_architecture :: OpsworksInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _architecture = a } :: OpsworksInstanceResource s)

instance HasAutoScalingType (OpsworksInstanceResource s) Text where
    type HasAutoScalingTypeThread (OpsworksInstanceResource s) Text = s

    autoScalingType =
        lens (_auto_scaling_type :: OpsworksInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_scaling_type = a } :: OpsworksInstanceResource s)

instance HasAvailabilityZone (OpsworksInstanceResource s) TF.Zone where
    type HasAvailabilityZoneThread (OpsworksInstanceResource s) TF.Zone = s

    availabilityZone =
        lens (_availability_zone :: OpsworksInstanceResource s -> TF.Attribute s TF.Zone)
            (\s a -> s { _availability_zone = a } :: OpsworksInstanceResource s)

instance HasEbsBlockDevice (OpsworksInstanceResource s) Text where
    type HasEbsBlockDeviceThread (OpsworksInstanceResource s) Text = s

    ebsBlockDevice =
        lens (_ebs_block_device :: OpsworksInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _ebs_block_device = a } :: OpsworksInstanceResource s)

instance HasEbsOptimized (OpsworksInstanceResource s) Text where
    type HasEbsOptimizedThread (OpsworksInstanceResource s) Text = s

    ebsOptimized =
        lens (_ebs_optimized :: OpsworksInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _ebs_optimized = a } :: OpsworksInstanceResource s)

instance HasEphemeralBlockDevice (OpsworksInstanceResource s) Text where
    type HasEphemeralBlockDeviceThread (OpsworksInstanceResource s) Text = s

    ephemeralBlockDevice =
        lens (_ephemeral_block_device :: OpsworksInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _ephemeral_block_device = a } :: OpsworksInstanceResource s)

instance HasHostname (OpsworksInstanceResource s) Text where
    type HasHostnameThread (OpsworksInstanceResource s) Text = s

    hostname =
        lens (_hostname :: OpsworksInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _hostname = a } :: OpsworksInstanceResource s)

instance HasInstallUpdatesOnBoot (OpsworksInstanceResource s) Text where
    type HasInstallUpdatesOnBootThread (OpsworksInstanceResource s) Text = s

    installUpdatesOnBoot =
        lens (_install_updates_on_boot :: OpsworksInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _install_updates_on_boot = a } :: OpsworksInstanceResource s)

instance HasInstanceType (OpsworksInstanceResource s) Text where
    type HasInstanceTypeThread (OpsworksInstanceResource s) Text = s

    instanceType =
        lens (_instance_type :: OpsworksInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _instance_type = a } :: OpsworksInstanceResource s)

instance HasLayerIds (OpsworksInstanceResource s) Text where
    type HasLayerIdsThread (OpsworksInstanceResource s) Text = s

    layerIds =
        lens (_layer_ids :: OpsworksInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _layer_ids = a } :: OpsworksInstanceResource s)

instance HasOs (OpsworksInstanceResource s) Text where
    type HasOsThread (OpsworksInstanceResource s) Text = s

    os =
        lens (_os :: OpsworksInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _os = a } :: OpsworksInstanceResource s)

instance HasRootBlockDevice (OpsworksInstanceResource s) Text where
    type HasRootBlockDeviceThread (OpsworksInstanceResource s) Text = s

    rootBlockDevice =
        lens (_root_block_device :: OpsworksInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _root_block_device = a } :: OpsworksInstanceResource s)

instance HasRootDeviceType (OpsworksInstanceResource s) Text where
    type HasRootDeviceTypeThread (OpsworksInstanceResource s) Text = s

    rootDeviceType =
        lens (_root_device_type :: OpsworksInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _root_device_type = a } :: OpsworksInstanceResource s)

instance HasSshKeyName (OpsworksInstanceResource s) Text where
    type HasSshKeyNameThread (OpsworksInstanceResource s) Text = s

    sshKeyName =
        lens (_ssh_key_name :: OpsworksInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _ssh_key_name = a } :: OpsworksInstanceResource s)

instance HasStackId (OpsworksInstanceResource s) Text where
    type HasStackIdThread (OpsworksInstanceResource s) Text = s

    stackId =
        lens (_stack_id :: OpsworksInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _stack_id = a } :: OpsworksInstanceResource s)

instance HasState (OpsworksInstanceResource s) Text where
    type HasStateThread (OpsworksInstanceResource s) Text = s

    state =
        lens (_state :: OpsworksInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _state = a } :: OpsworksInstanceResource s)

instance HasSubnetId (OpsworksInstanceResource s) Text where
    type HasSubnetIdThread (OpsworksInstanceResource s) Text = s

    subnetId =
        lens (_subnet_id :: OpsworksInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _subnet_id = a } :: OpsworksInstanceResource s)

instance HasTenancy (OpsworksInstanceResource s) Text where
    type HasTenancyThread (OpsworksInstanceResource s) Text = s

    tenancy =
        lens (_tenancy :: OpsworksInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _tenancy = a } :: OpsworksInstanceResource s)

instance HasVirtualizationType (OpsworksInstanceResource s) Text where
    type HasVirtualizationTypeThread (OpsworksInstanceResource s) Text = s

    virtualizationType =
        lens (_virtualization_type :: OpsworksInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _virtualization_type = a } :: OpsworksInstanceResource s)

opsworksInstanceResource :: TF.Resource TF.AWS (OpsworksInstanceResource s)
opsworksInstanceResource =
    TF.newResource "aws_opsworks_instance" $
        OpsworksInstanceResource {
              _agent_version = TF.Nil
            , _ami_id = TF.Nil
            , _architecture = TF.Nil
            , _auto_scaling_type = TF.Nil
            , _availability_zone = TF.Nil
            , _ebs_block_device = TF.Nil
            , _ebs_optimized = TF.Nil
            , _ephemeral_block_device = TF.Nil
            , _hostname = TF.Nil
            , _install_updates_on_boot = TF.Nil
            , _instance_type = TF.Nil
            , _layer_ids = TF.Nil
            , _os = TF.Nil
            , _root_block_device = TF.Nil
            , _root_device_type = TF.Nil
            , _ssh_key_name = TF.Nil
            , _stack_id = TF.Nil
            , _state = TF.Nil
            , _subnet_id = TF.Nil
            , _tenancy = TF.Nil
            , _virtualization_type = TF.Nil
            }

{- | The @aws_opsworks_java_app_layer@ AWS resource.

Provides an OpsWorks Java application layer resource.
-}
data OpsworksJavaAppLayerResource s = OpsworksJavaAppLayerResource {
      _app_server :: !(TF.Attribute s Text)
    {- ^ (Optional) Keyword for the application container to use. Defaults to "tomcat". -}
    , _app_server_version :: !(TF.Attribute s Text)
    {- ^ (Optional) Version of the selected application container to use. Defaults to "7". -}
    , _auto_assign_elastic_ips :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to automatically assign an elastic IP address to the layer's instances. -}
    , _auto_assign_public_ips :: !(TF.Attribute s Text)
    {- ^ (Optional) For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances. -}
    , _auto_healing :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to enable auto-healing for the layer. -}
    , _custom_instance_profile_arn :: !(TF.Attribute s Text)
    {- ^ (Optional) The ARN of an IAM profile that will be used for the layer's instances. -}
    , _custom_json :: !(TF.Attribute s Text)
    {- ^ (Optional) Custom JSON attributes to apply to the layer. -}
    , _custom_security_group_ids :: !(TF.Attribute s Text)
    {- ^ (Optional) Ids for a set of security groups to apply to the layer's instances. -}
    , _drain_elb_on_shutdown :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to enable Elastic Load Balancing connection draining. -}
    , _ebs_volume :: !(TF.Attribute s Text)
    {- ^ (Optional) @ebs_volume@ blocks, as described below, will each create an EBS volume and connect it to the layer's instances. -}
    , _elastic_load_balancer :: !(TF.Attribute s Text)
    {- ^ (Optional) Name of an Elastic Load Balancer to attach to this layer -}
    , _install_updates_on_boot :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to install OS and package updates on each instance when it boots. -}
    , _instance_shutdown_timeout :: !(TF.Attribute s Text)
    {- ^ (Optional) The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event. -}
    , _jvm_options :: !(TF.Attribute s Text)
    {- ^ (Optional) Options to set for the JVM. -}
    , _jvm_type :: !(TF.Attribute s Text)
    {- ^ (Optional) Keyword for the type of JVM to use. Defaults to @openjdk@ . -}
    , _jvm_version :: !(TF.Attribute s Text)
    {- ^ (Optional) Version of JVM to use. Defaults to "7". -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Optional) A human-readable name for the layer. -}
    , _stack_id :: !(TF.Attribute s Text)
    {- ^ (Required) The id of the stack the layer will belong to. -}
    , _system_packages :: !(TF.Attribute s Text)
    {- ^ (Optional) Names of a set of system packages to install on the layer's instances. -}
    , _use_ebs_optimized_instances :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to use EBS-optimized instances. -}
    } deriving (Show, Eq)

instance TF.ToHCL (OpsworksJavaAppLayerResource s) where
    toHCL OpsworksJavaAppLayerResource{..} = TF.block $ catMaybes
        [ TF.assign "app_server" <$> TF.attribute _app_server
        , TF.assign "app_server_version" <$> TF.attribute _app_server_version
        , TF.assign "auto_assign_elastic_ips" <$> TF.attribute _auto_assign_elastic_ips
        , TF.assign "auto_assign_public_ips" <$> TF.attribute _auto_assign_public_ips
        , TF.assign "auto_healing" <$> TF.attribute _auto_healing
        , TF.assign "custom_instance_profile_arn" <$> TF.attribute _custom_instance_profile_arn
        , TF.assign "custom_json" <$> TF.attribute _custom_json
        , TF.assign "custom_security_group_ids" <$> TF.attribute _custom_security_group_ids
        , TF.assign "drain_elb_on_shutdown" <$> TF.attribute _drain_elb_on_shutdown
        , TF.assign "ebs_volume" <$> TF.attribute _ebs_volume
        , TF.assign "elastic_load_balancer" <$> TF.attribute _elastic_load_balancer
        , TF.assign "install_updates_on_boot" <$> TF.attribute _install_updates_on_boot
        , TF.assign "instance_shutdown_timeout" <$> TF.attribute _instance_shutdown_timeout
        , TF.assign "jvm_options" <$> TF.attribute _jvm_options
        , TF.assign "jvm_type" <$> TF.attribute _jvm_type
        , TF.assign "jvm_version" <$> TF.attribute _jvm_version
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "stack_id" <$> TF.attribute _stack_id
        , TF.assign "system_packages" <$> TF.attribute _system_packages
        , TF.assign "use_ebs_optimized_instances" <$> TF.attribute _use_ebs_optimized_instances
        ]

instance HasAppServer (OpsworksJavaAppLayerResource s) Text where
    type HasAppServerThread (OpsworksJavaAppLayerResource s) Text = s

    appServer =
        lens (_app_server :: OpsworksJavaAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _app_server = a } :: OpsworksJavaAppLayerResource s)

instance HasAppServerVersion (OpsworksJavaAppLayerResource s) Text where
    type HasAppServerVersionThread (OpsworksJavaAppLayerResource s) Text = s

    appServerVersion =
        lens (_app_server_version :: OpsworksJavaAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _app_server_version = a } :: OpsworksJavaAppLayerResource s)

instance HasAutoAssignElasticIps (OpsworksJavaAppLayerResource s) Text where
    type HasAutoAssignElasticIpsThread (OpsworksJavaAppLayerResource s) Text = s

    autoAssignElasticIps =
        lens (_auto_assign_elastic_ips :: OpsworksJavaAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_assign_elastic_ips = a } :: OpsworksJavaAppLayerResource s)

instance HasAutoAssignPublicIps (OpsworksJavaAppLayerResource s) Text where
    type HasAutoAssignPublicIpsThread (OpsworksJavaAppLayerResource s) Text = s

    autoAssignPublicIps =
        lens (_auto_assign_public_ips :: OpsworksJavaAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_assign_public_ips = a } :: OpsworksJavaAppLayerResource s)

instance HasAutoHealing (OpsworksJavaAppLayerResource s) Text where
    type HasAutoHealingThread (OpsworksJavaAppLayerResource s) Text = s

    autoHealing =
        lens (_auto_healing :: OpsworksJavaAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_healing = a } :: OpsworksJavaAppLayerResource s)

instance HasCustomInstanceProfileArn (OpsworksJavaAppLayerResource s) Text where
    type HasCustomInstanceProfileArnThread (OpsworksJavaAppLayerResource s) Text = s

    customInstanceProfileArn =
        lens (_custom_instance_profile_arn :: OpsworksJavaAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _custom_instance_profile_arn = a } :: OpsworksJavaAppLayerResource s)

instance HasCustomJson (OpsworksJavaAppLayerResource s) Text where
    type HasCustomJsonThread (OpsworksJavaAppLayerResource s) Text = s

    customJson =
        lens (_custom_json :: OpsworksJavaAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _custom_json = a } :: OpsworksJavaAppLayerResource s)

instance HasCustomSecurityGroupIds (OpsworksJavaAppLayerResource s) Text where
    type HasCustomSecurityGroupIdsThread (OpsworksJavaAppLayerResource s) Text = s

    customSecurityGroupIds =
        lens (_custom_security_group_ids :: OpsworksJavaAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _custom_security_group_ids = a } :: OpsworksJavaAppLayerResource s)

instance HasDrainElbOnShutdown (OpsworksJavaAppLayerResource s) Text where
    type HasDrainElbOnShutdownThread (OpsworksJavaAppLayerResource s) Text = s

    drainElbOnShutdown =
        lens (_drain_elb_on_shutdown :: OpsworksJavaAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _drain_elb_on_shutdown = a } :: OpsworksJavaAppLayerResource s)

instance HasEbsVolume (OpsworksJavaAppLayerResource s) Text where
    type HasEbsVolumeThread (OpsworksJavaAppLayerResource s) Text = s

    ebsVolume =
        lens (_ebs_volume :: OpsworksJavaAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _ebs_volume = a } :: OpsworksJavaAppLayerResource s)

instance HasElasticLoadBalancer (OpsworksJavaAppLayerResource s) Text where
    type HasElasticLoadBalancerThread (OpsworksJavaAppLayerResource s) Text = s

    elasticLoadBalancer =
        lens (_elastic_load_balancer :: OpsworksJavaAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _elastic_load_balancer = a } :: OpsworksJavaAppLayerResource s)

instance HasInstallUpdatesOnBoot (OpsworksJavaAppLayerResource s) Text where
    type HasInstallUpdatesOnBootThread (OpsworksJavaAppLayerResource s) Text = s

    installUpdatesOnBoot =
        lens (_install_updates_on_boot :: OpsworksJavaAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _install_updates_on_boot = a } :: OpsworksJavaAppLayerResource s)

instance HasInstanceShutdownTimeout (OpsworksJavaAppLayerResource s) Text where
    type HasInstanceShutdownTimeoutThread (OpsworksJavaAppLayerResource s) Text = s

    instanceShutdownTimeout =
        lens (_instance_shutdown_timeout :: OpsworksJavaAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _instance_shutdown_timeout = a } :: OpsworksJavaAppLayerResource s)

instance HasJvmOptions (OpsworksJavaAppLayerResource s) Text where
    type HasJvmOptionsThread (OpsworksJavaAppLayerResource s) Text = s

    jvmOptions =
        lens (_jvm_options :: OpsworksJavaAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _jvm_options = a } :: OpsworksJavaAppLayerResource s)

instance HasJvmType (OpsworksJavaAppLayerResource s) Text where
    type HasJvmTypeThread (OpsworksJavaAppLayerResource s) Text = s

    jvmType =
        lens (_jvm_type :: OpsworksJavaAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _jvm_type = a } :: OpsworksJavaAppLayerResource s)

instance HasJvmVersion (OpsworksJavaAppLayerResource s) Text where
    type HasJvmVersionThread (OpsworksJavaAppLayerResource s) Text = s

    jvmVersion =
        lens (_jvm_version :: OpsworksJavaAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _jvm_version = a } :: OpsworksJavaAppLayerResource s)

instance HasName (OpsworksJavaAppLayerResource s) Text where
    type HasNameThread (OpsworksJavaAppLayerResource s) Text = s

    name =
        lens (_name :: OpsworksJavaAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: OpsworksJavaAppLayerResource s)

instance HasStackId (OpsworksJavaAppLayerResource s) Text where
    type HasStackIdThread (OpsworksJavaAppLayerResource s) Text = s

    stackId =
        lens (_stack_id :: OpsworksJavaAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _stack_id = a } :: OpsworksJavaAppLayerResource s)

instance HasSystemPackages (OpsworksJavaAppLayerResource s) Text where
    type HasSystemPackagesThread (OpsworksJavaAppLayerResource s) Text = s

    systemPackages =
        lens (_system_packages :: OpsworksJavaAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _system_packages = a } :: OpsworksJavaAppLayerResource s)

instance HasUseEbsOptimizedInstances (OpsworksJavaAppLayerResource s) Text where
    type HasUseEbsOptimizedInstancesThread (OpsworksJavaAppLayerResource s) Text = s

    useEbsOptimizedInstances =
        lens (_use_ebs_optimized_instances :: OpsworksJavaAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _use_ebs_optimized_instances = a } :: OpsworksJavaAppLayerResource s)

instance HasComputedId (OpsworksJavaAppLayerResource s) Text

opsworksJavaAppLayerResource :: TF.Resource TF.AWS (OpsworksJavaAppLayerResource s)
opsworksJavaAppLayerResource =
    TF.newResource "aws_opsworks_java_app_layer" $
        OpsworksJavaAppLayerResource {
              _app_server = TF.Nil
            , _app_server_version = TF.Nil
            , _auto_assign_elastic_ips = TF.Nil
            , _auto_assign_public_ips = TF.Nil
            , _auto_healing = TF.Nil
            , _custom_instance_profile_arn = TF.Nil
            , _custom_json = TF.Nil
            , _custom_security_group_ids = TF.Nil
            , _drain_elb_on_shutdown = TF.Nil
            , _ebs_volume = TF.Nil
            , _elastic_load_balancer = TF.Nil
            , _install_updates_on_boot = TF.Nil
            , _instance_shutdown_timeout = TF.Nil
            , _jvm_options = TF.Nil
            , _jvm_type = TF.Nil
            , _jvm_version = TF.Nil
            , _name = TF.Nil
            , _stack_id = TF.Nil
            , _system_packages = TF.Nil
            , _use_ebs_optimized_instances = TF.Nil
            }

{- | The @aws_opsworks_memcached_layer@ AWS resource.

Provides an OpsWorks memcached layer resource.
-}
data OpsworksMemcachedLayerResource s = OpsworksMemcachedLayerResource {
      _allocated_memory :: !(TF.Attribute s Text)
    {- ^ (Optional) Amount of memory to allocate for the cache on each instance, in megabytes. Defaults to 512MB. -}
    , _auto_assign_elastic_ips :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to automatically assign an elastic IP address to the layer's instances. -}
    , _auto_assign_public_ips :: !(TF.Attribute s Text)
    {- ^ (Optional) For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances. -}
    , _auto_healing :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to enable auto-healing for the layer. -}
    , _custom_instance_profile_arn :: !(TF.Attribute s Text)
    {- ^ (Optional) The ARN of an IAM profile that will be used for the layer's instances. -}
    , _custom_json :: !(TF.Attribute s Text)
    {- ^ (Optional) Custom JSON attributes to apply to the layer. -}
    , _custom_security_group_ids :: !(TF.Attribute s Text)
    {- ^ (Optional) Ids for a set of security groups to apply to the layer's instances. -}
    , _drain_elb_on_shutdown :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to enable Elastic Load Balancing connection draining. -}
    , _ebs_volume :: !(TF.Attribute s Text)
    {- ^ (Optional) @ebs_volume@ blocks, as described below, will each create an EBS volume and connect it to the layer's instances. -}
    , _elastic_load_balancer :: !(TF.Attribute s Text)
    {- ^ (Optional) Name of an Elastic Load Balancer to attach to this layer -}
    , _install_updates_on_boot :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to install OS and package updates on each instance when it boots. -}
    , _instance_shutdown_timeout :: !(TF.Attribute s Text)
    {- ^ (Optional) The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Optional) A human-readable name for the layer. -}
    , _stack_id :: !(TF.Attribute s Text)
    {- ^ (Required) The id of the stack the layer will belong to. -}
    , _system_packages :: !(TF.Attribute s Text)
    {- ^ (Optional) Names of a set of system packages to install on the layer's instances. -}
    , _use_ebs_optimized_instances :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to use EBS-optimized instances. -}
    } deriving (Show, Eq)

instance TF.ToHCL (OpsworksMemcachedLayerResource s) where
    toHCL OpsworksMemcachedLayerResource{..} = TF.block $ catMaybes
        [ TF.assign "allocated_memory" <$> TF.attribute _allocated_memory
        , TF.assign "auto_assign_elastic_ips" <$> TF.attribute _auto_assign_elastic_ips
        , TF.assign "auto_assign_public_ips" <$> TF.attribute _auto_assign_public_ips
        , TF.assign "auto_healing" <$> TF.attribute _auto_healing
        , TF.assign "custom_instance_profile_arn" <$> TF.attribute _custom_instance_profile_arn
        , TF.assign "custom_json" <$> TF.attribute _custom_json
        , TF.assign "custom_security_group_ids" <$> TF.attribute _custom_security_group_ids
        , TF.assign "drain_elb_on_shutdown" <$> TF.attribute _drain_elb_on_shutdown
        , TF.assign "ebs_volume" <$> TF.attribute _ebs_volume
        , TF.assign "elastic_load_balancer" <$> TF.attribute _elastic_load_balancer
        , TF.assign "install_updates_on_boot" <$> TF.attribute _install_updates_on_boot
        , TF.assign "instance_shutdown_timeout" <$> TF.attribute _instance_shutdown_timeout
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "stack_id" <$> TF.attribute _stack_id
        , TF.assign "system_packages" <$> TF.attribute _system_packages
        , TF.assign "use_ebs_optimized_instances" <$> TF.attribute _use_ebs_optimized_instances
        ]

instance HasAllocatedMemory (OpsworksMemcachedLayerResource s) Text where
    type HasAllocatedMemoryThread (OpsworksMemcachedLayerResource s) Text = s

    allocatedMemory =
        lens (_allocated_memory :: OpsworksMemcachedLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _allocated_memory = a } :: OpsworksMemcachedLayerResource s)

instance HasAutoAssignElasticIps (OpsworksMemcachedLayerResource s) Text where
    type HasAutoAssignElasticIpsThread (OpsworksMemcachedLayerResource s) Text = s

    autoAssignElasticIps =
        lens (_auto_assign_elastic_ips :: OpsworksMemcachedLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_assign_elastic_ips = a } :: OpsworksMemcachedLayerResource s)

instance HasAutoAssignPublicIps (OpsworksMemcachedLayerResource s) Text where
    type HasAutoAssignPublicIpsThread (OpsworksMemcachedLayerResource s) Text = s

    autoAssignPublicIps =
        lens (_auto_assign_public_ips :: OpsworksMemcachedLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_assign_public_ips = a } :: OpsworksMemcachedLayerResource s)

instance HasAutoHealing (OpsworksMemcachedLayerResource s) Text where
    type HasAutoHealingThread (OpsworksMemcachedLayerResource s) Text = s

    autoHealing =
        lens (_auto_healing :: OpsworksMemcachedLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_healing = a } :: OpsworksMemcachedLayerResource s)

instance HasCustomInstanceProfileArn (OpsworksMemcachedLayerResource s) Text where
    type HasCustomInstanceProfileArnThread (OpsworksMemcachedLayerResource s) Text = s

    customInstanceProfileArn =
        lens (_custom_instance_profile_arn :: OpsworksMemcachedLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _custom_instance_profile_arn = a } :: OpsworksMemcachedLayerResource s)

instance HasCustomJson (OpsworksMemcachedLayerResource s) Text where
    type HasCustomJsonThread (OpsworksMemcachedLayerResource s) Text = s

    customJson =
        lens (_custom_json :: OpsworksMemcachedLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _custom_json = a } :: OpsworksMemcachedLayerResource s)

instance HasCustomSecurityGroupIds (OpsworksMemcachedLayerResource s) Text where
    type HasCustomSecurityGroupIdsThread (OpsworksMemcachedLayerResource s) Text = s

    customSecurityGroupIds =
        lens (_custom_security_group_ids :: OpsworksMemcachedLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _custom_security_group_ids = a } :: OpsworksMemcachedLayerResource s)

instance HasDrainElbOnShutdown (OpsworksMemcachedLayerResource s) Text where
    type HasDrainElbOnShutdownThread (OpsworksMemcachedLayerResource s) Text = s

    drainElbOnShutdown =
        lens (_drain_elb_on_shutdown :: OpsworksMemcachedLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _drain_elb_on_shutdown = a } :: OpsworksMemcachedLayerResource s)

instance HasEbsVolume (OpsworksMemcachedLayerResource s) Text where
    type HasEbsVolumeThread (OpsworksMemcachedLayerResource s) Text = s

    ebsVolume =
        lens (_ebs_volume :: OpsworksMemcachedLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _ebs_volume = a } :: OpsworksMemcachedLayerResource s)

instance HasElasticLoadBalancer (OpsworksMemcachedLayerResource s) Text where
    type HasElasticLoadBalancerThread (OpsworksMemcachedLayerResource s) Text = s

    elasticLoadBalancer =
        lens (_elastic_load_balancer :: OpsworksMemcachedLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _elastic_load_balancer = a } :: OpsworksMemcachedLayerResource s)

instance HasInstallUpdatesOnBoot (OpsworksMemcachedLayerResource s) Text where
    type HasInstallUpdatesOnBootThread (OpsworksMemcachedLayerResource s) Text = s

    installUpdatesOnBoot =
        lens (_install_updates_on_boot :: OpsworksMemcachedLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _install_updates_on_boot = a } :: OpsworksMemcachedLayerResource s)

instance HasInstanceShutdownTimeout (OpsworksMemcachedLayerResource s) Text where
    type HasInstanceShutdownTimeoutThread (OpsworksMemcachedLayerResource s) Text = s

    instanceShutdownTimeout =
        lens (_instance_shutdown_timeout :: OpsworksMemcachedLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _instance_shutdown_timeout = a } :: OpsworksMemcachedLayerResource s)

instance HasName (OpsworksMemcachedLayerResource s) Text where
    type HasNameThread (OpsworksMemcachedLayerResource s) Text = s

    name =
        lens (_name :: OpsworksMemcachedLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: OpsworksMemcachedLayerResource s)

instance HasStackId (OpsworksMemcachedLayerResource s) Text where
    type HasStackIdThread (OpsworksMemcachedLayerResource s) Text = s

    stackId =
        lens (_stack_id :: OpsworksMemcachedLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _stack_id = a } :: OpsworksMemcachedLayerResource s)

instance HasSystemPackages (OpsworksMemcachedLayerResource s) Text where
    type HasSystemPackagesThread (OpsworksMemcachedLayerResource s) Text = s

    systemPackages =
        lens (_system_packages :: OpsworksMemcachedLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _system_packages = a } :: OpsworksMemcachedLayerResource s)

instance HasUseEbsOptimizedInstances (OpsworksMemcachedLayerResource s) Text where
    type HasUseEbsOptimizedInstancesThread (OpsworksMemcachedLayerResource s) Text = s

    useEbsOptimizedInstances =
        lens (_use_ebs_optimized_instances :: OpsworksMemcachedLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _use_ebs_optimized_instances = a } :: OpsworksMemcachedLayerResource s)

instance HasComputedId (OpsworksMemcachedLayerResource s) Text

opsworksMemcachedLayerResource :: TF.Resource TF.AWS (OpsworksMemcachedLayerResource s)
opsworksMemcachedLayerResource =
    TF.newResource "aws_opsworks_memcached_layer" $
        OpsworksMemcachedLayerResource {
              _allocated_memory = TF.Nil
            , _auto_assign_elastic_ips = TF.Nil
            , _auto_assign_public_ips = TF.Nil
            , _auto_healing = TF.Nil
            , _custom_instance_profile_arn = TF.Nil
            , _custom_json = TF.Nil
            , _custom_security_group_ids = TF.Nil
            , _drain_elb_on_shutdown = TF.Nil
            , _ebs_volume = TF.Nil
            , _elastic_load_balancer = TF.Nil
            , _install_updates_on_boot = TF.Nil
            , _instance_shutdown_timeout = TF.Nil
            , _name = TF.Nil
            , _stack_id = TF.Nil
            , _system_packages = TF.Nil
            , _use_ebs_optimized_instances = TF.Nil
            }

{- | The @aws_opsworks_mysql_layer@ AWS resource.

Provides an OpsWorks MySQL layer resource. ~> Note: All arguments including
the root password will be stored in the raw state as plain-text.
</docs/state/sensitive-data.html> .
-}
data OpsworksMysqlLayerResource s = OpsworksMysqlLayerResource {
      _auto_assign_elastic_ips :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to automatically assign an elastic IP address to the layer's instances. -}
    , _auto_assign_public_ips :: !(TF.Attribute s Text)
    {- ^ (Optional) For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances. -}
    , _auto_healing :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to enable auto-healing for the layer. -}
    , _custom_instance_profile_arn :: !(TF.Attribute s Text)
    {- ^ (Optional) The ARN of an IAM profile that will be used for the layer's instances. -}
    , _custom_json :: !(TF.Attribute s Text)
    {- ^ (Optional) Custom JSON attributes to apply to the layer. -}
    , _custom_security_group_ids :: !(TF.Attribute s Text)
    {- ^ (Optional) Ids for a set of security groups to apply to the layer's instances. -}
    , _drain_elb_on_shutdown :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to enable Elastic Load Balancing connection draining. -}
    , _ebs_volume :: !(TF.Attribute s Text)
    {- ^ (Optional) @ebs_volume@ blocks, as described below, will each create an EBS volume and connect it to the layer's instances. -}
    , _elastic_load_balancer :: !(TF.Attribute s Text)
    {- ^ (Optional) Name of an Elastic Load Balancer to attach to this layer -}
    , _install_updates_on_boot :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to install OS and package updates on each instance when it boots. -}
    , _instance_shutdown_timeout :: !(TF.Attribute s Text)
    {- ^ (Optional) The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Optional) A human-readable name for the layer. -}
    , _root_password :: !(TF.Attribute s Text)
    {- ^ (Optional) Root password to use for MySQL. -}
    , _root_password_on_all_instances :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to set the root user password to all instances in the stack so they can access the instances in this layer. -}
    , _stack_id :: !(TF.Attribute s Text)
    {- ^ (Required) The id of the stack the layer will belong to. -}
    , _system_packages :: !(TF.Attribute s Text)
    {- ^ (Optional) Names of a set of system packages to install on the layer's instances. -}
    , _use_ebs_optimized_instances :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to use EBS-optimized instances. -}
    } deriving (Show, Eq)

instance TF.ToHCL (OpsworksMysqlLayerResource s) where
    toHCL OpsworksMysqlLayerResource{..} = TF.block $ catMaybes
        [ TF.assign "auto_assign_elastic_ips" <$> TF.attribute _auto_assign_elastic_ips
        , TF.assign "auto_assign_public_ips" <$> TF.attribute _auto_assign_public_ips
        , TF.assign "auto_healing" <$> TF.attribute _auto_healing
        , TF.assign "custom_instance_profile_arn" <$> TF.attribute _custom_instance_profile_arn
        , TF.assign "custom_json" <$> TF.attribute _custom_json
        , TF.assign "custom_security_group_ids" <$> TF.attribute _custom_security_group_ids
        , TF.assign "drain_elb_on_shutdown" <$> TF.attribute _drain_elb_on_shutdown
        , TF.assign "ebs_volume" <$> TF.attribute _ebs_volume
        , TF.assign "elastic_load_balancer" <$> TF.attribute _elastic_load_balancer
        , TF.assign "install_updates_on_boot" <$> TF.attribute _install_updates_on_boot
        , TF.assign "instance_shutdown_timeout" <$> TF.attribute _instance_shutdown_timeout
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "root_password" <$> TF.attribute _root_password
        , TF.assign "root_password_on_all_instances" <$> TF.attribute _root_password_on_all_instances
        , TF.assign "stack_id" <$> TF.attribute _stack_id
        , TF.assign "system_packages" <$> TF.attribute _system_packages
        , TF.assign "use_ebs_optimized_instances" <$> TF.attribute _use_ebs_optimized_instances
        ]

instance HasAutoAssignElasticIps (OpsworksMysqlLayerResource s) Text where
    type HasAutoAssignElasticIpsThread (OpsworksMysqlLayerResource s) Text = s

    autoAssignElasticIps =
        lens (_auto_assign_elastic_ips :: OpsworksMysqlLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_assign_elastic_ips = a } :: OpsworksMysqlLayerResource s)

instance HasAutoAssignPublicIps (OpsworksMysqlLayerResource s) Text where
    type HasAutoAssignPublicIpsThread (OpsworksMysqlLayerResource s) Text = s

    autoAssignPublicIps =
        lens (_auto_assign_public_ips :: OpsworksMysqlLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_assign_public_ips = a } :: OpsworksMysqlLayerResource s)

instance HasAutoHealing (OpsworksMysqlLayerResource s) Text where
    type HasAutoHealingThread (OpsworksMysqlLayerResource s) Text = s

    autoHealing =
        lens (_auto_healing :: OpsworksMysqlLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_healing = a } :: OpsworksMysqlLayerResource s)

instance HasCustomInstanceProfileArn (OpsworksMysqlLayerResource s) Text where
    type HasCustomInstanceProfileArnThread (OpsworksMysqlLayerResource s) Text = s

    customInstanceProfileArn =
        lens (_custom_instance_profile_arn :: OpsworksMysqlLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _custom_instance_profile_arn = a } :: OpsworksMysqlLayerResource s)

instance HasCustomJson (OpsworksMysqlLayerResource s) Text where
    type HasCustomJsonThread (OpsworksMysqlLayerResource s) Text = s

    customJson =
        lens (_custom_json :: OpsworksMysqlLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _custom_json = a } :: OpsworksMysqlLayerResource s)

instance HasCustomSecurityGroupIds (OpsworksMysqlLayerResource s) Text where
    type HasCustomSecurityGroupIdsThread (OpsworksMysqlLayerResource s) Text = s

    customSecurityGroupIds =
        lens (_custom_security_group_ids :: OpsworksMysqlLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _custom_security_group_ids = a } :: OpsworksMysqlLayerResource s)

instance HasDrainElbOnShutdown (OpsworksMysqlLayerResource s) Text where
    type HasDrainElbOnShutdownThread (OpsworksMysqlLayerResource s) Text = s

    drainElbOnShutdown =
        lens (_drain_elb_on_shutdown :: OpsworksMysqlLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _drain_elb_on_shutdown = a } :: OpsworksMysqlLayerResource s)

instance HasEbsVolume (OpsworksMysqlLayerResource s) Text where
    type HasEbsVolumeThread (OpsworksMysqlLayerResource s) Text = s

    ebsVolume =
        lens (_ebs_volume :: OpsworksMysqlLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _ebs_volume = a } :: OpsworksMysqlLayerResource s)

instance HasElasticLoadBalancer (OpsworksMysqlLayerResource s) Text where
    type HasElasticLoadBalancerThread (OpsworksMysqlLayerResource s) Text = s

    elasticLoadBalancer =
        lens (_elastic_load_balancer :: OpsworksMysqlLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _elastic_load_balancer = a } :: OpsworksMysqlLayerResource s)

instance HasInstallUpdatesOnBoot (OpsworksMysqlLayerResource s) Text where
    type HasInstallUpdatesOnBootThread (OpsworksMysqlLayerResource s) Text = s

    installUpdatesOnBoot =
        lens (_install_updates_on_boot :: OpsworksMysqlLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _install_updates_on_boot = a } :: OpsworksMysqlLayerResource s)

instance HasInstanceShutdownTimeout (OpsworksMysqlLayerResource s) Text where
    type HasInstanceShutdownTimeoutThread (OpsworksMysqlLayerResource s) Text = s

    instanceShutdownTimeout =
        lens (_instance_shutdown_timeout :: OpsworksMysqlLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _instance_shutdown_timeout = a } :: OpsworksMysqlLayerResource s)

instance HasName (OpsworksMysqlLayerResource s) Text where
    type HasNameThread (OpsworksMysqlLayerResource s) Text = s

    name =
        lens (_name :: OpsworksMysqlLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: OpsworksMysqlLayerResource s)

instance HasRootPassword (OpsworksMysqlLayerResource s) Text where
    type HasRootPasswordThread (OpsworksMysqlLayerResource s) Text = s

    rootPassword =
        lens (_root_password :: OpsworksMysqlLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _root_password = a } :: OpsworksMysqlLayerResource s)

instance HasRootPasswordOnAllInstances (OpsworksMysqlLayerResource s) Text where
    type HasRootPasswordOnAllInstancesThread (OpsworksMysqlLayerResource s) Text = s

    rootPasswordOnAllInstances =
        lens (_root_password_on_all_instances :: OpsworksMysqlLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _root_password_on_all_instances = a } :: OpsworksMysqlLayerResource s)

instance HasStackId (OpsworksMysqlLayerResource s) Text where
    type HasStackIdThread (OpsworksMysqlLayerResource s) Text = s

    stackId =
        lens (_stack_id :: OpsworksMysqlLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _stack_id = a } :: OpsworksMysqlLayerResource s)

instance HasSystemPackages (OpsworksMysqlLayerResource s) Text where
    type HasSystemPackagesThread (OpsworksMysqlLayerResource s) Text = s

    systemPackages =
        lens (_system_packages :: OpsworksMysqlLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _system_packages = a } :: OpsworksMysqlLayerResource s)

instance HasUseEbsOptimizedInstances (OpsworksMysqlLayerResource s) Text where
    type HasUseEbsOptimizedInstancesThread (OpsworksMysqlLayerResource s) Text = s

    useEbsOptimizedInstances =
        lens (_use_ebs_optimized_instances :: OpsworksMysqlLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _use_ebs_optimized_instances = a } :: OpsworksMysqlLayerResource s)

instance HasComputedId (OpsworksMysqlLayerResource s) Text

opsworksMysqlLayerResource :: TF.Resource TF.AWS (OpsworksMysqlLayerResource s)
opsworksMysqlLayerResource =
    TF.newResource "aws_opsworks_mysql_layer" $
        OpsworksMysqlLayerResource {
              _auto_assign_elastic_ips = TF.Nil
            , _auto_assign_public_ips = TF.Nil
            , _auto_healing = TF.Nil
            , _custom_instance_profile_arn = TF.Nil
            , _custom_json = TF.Nil
            , _custom_security_group_ids = TF.Nil
            , _drain_elb_on_shutdown = TF.Nil
            , _ebs_volume = TF.Nil
            , _elastic_load_balancer = TF.Nil
            , _install_updates_on_boot = TF.Nil
            , _instance_shutdown_timeout = TF.Nil
            , _name = TF.Nil
            , _root_password = TF.Nil
            , _root_password_on_all_instances = TF.Nil
            , _stack_id = TF.Nil
            , _system_packages = TF.Nil
            , _use_ebs_optimized_instances = TF.Nil
            }

{- | The @aws_opsworks_nodejs_app_layer@ AWS resource.

Provides an OpsWorks NodeJS application layer resource.
-}
data OpsworksNodejsAppLayerResource s = OpsworksNodejsAppLayerResource {
      _auto_assign_elastic_ips :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to automatically assign an elastic IP address to the layer's instances. -}
    , _auto_assign_public_ips :: !(TF.Attribute s Text)
    {- ^ (Optional) For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances. -}
    , _auto_healing :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to enable auto-healing for the layer. -}
    , _custom_instance_profile_arn :: !(TF.Attribute s Text)
    {- ^ (Optional) The ARN of an IAM profile that will be used for the layer's instances. -}
    , _custom_json :: !(TF.Attribute s Text)
    {- ^ (Optional) Custom JSON attributes to apply to the layer. -}
    , _custom_security_group_ids :: !(TF.Attribute s Text)
    {- ^ (Optional) Ids for a set of security groups to apply to the layer's instances. -}
    , _drain_elb_on_shutdown :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to enable Elastic Load Balancing connection draining. -}
    , _ebs_volume :: !(TF.Attribute s Text)
    {- ^ (Optional) @ebs_volume@ blocks, as described below, will each create an EBS volume and connect it to the layer's instances. -}
    , _elastic_load_balancer :: !(TF.Attribute s Text)
    {- ^ (Optional) Name of an Elastic Load Balancer to attach to this layer -}
    , _install_updates_on_boot :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to install OS and package updates on each instance when it boots. -}
    , _instance_shutdown_timeout :: !(TF.Attribute s Text)
    {- ^ (Optional) The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Optional) A human-readable name for the layer. -}
    , _nodejs_version :: !(TF.Attribute s Text)
    {- ^ (Optional) The version of NodeJS to use. Defaults to "0.10.38". -}
    , _stack_id :: !(TF.Attribute s Text)
    {- ^ (Required) The id of the stack the layer will belong to. -}
    , _system_packages :: !(TF.Attribute s Text)
    {- ^ (Optional) Names of a set of system packages to install on the layer's instances. -}
    , _use_ebs_optimized_instances :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to use EBS-optimized instances. -}
    } deriving (Show, Eq)

instance TF.ToHCL (OpsworksNodejsAppLayerResource s) where
    toHCL OpsworksNodejsAppLayerResource{..} = TF.block $ catMaybes
        [ TF.assign "auto_assign_elastic_ips" <$> TF.attribute _auto_assign_elastic_ips
        , TF.assign "auto_assign_public_ips" <$> TF.attribute _auto_assign_public_ips
        , TF.assign "auto_healing" <$> TF.attribute _auto_healing
        , TF.assign "custom_instance_profile_arn" <$> TF.attribute _custom_instance_profile_arn
        , TF.assign "custom_json" <$> TF.attribute _custom_json
        , TF.assign "custom_security_group_ids" <$> TF.attribute _custom_security_group_ids
        , TF.assign "drain_elb_on_shutdown" <$> TF.attribute _drain_elb_on_shutdown
        , TF.assign "ebs_volume" <$> TF.attribute _ebs_volume
        , TF.assign "elastic_load_balancer" <$> TF.attribute _elastic_load_balancer
        , TF.assign "install_updates_on_boot" <$> TF.attribute _install_updates_on_boot
        , TF.assign "instance_shutdown_timeout" <$> TF.attribute _instance_shutdown_timeout
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "nodejs_version" <$> TF.attribute _nodejs_version
        , TF.assign "stack_id" <$> TF.attribute _stack_id
        , TF.assign "system_packages" <$> TF.attribute _system_packages
        , TF.assign "use_ebs_optimized_instances" <$> TF.attribute _use_ebs_optimized_instances
        ]

instance HasAutoAssignElasticIps (OpsworksNodejsAppLayerResource s) Text where
    type HasAutoAssignElasticIpsThread (OpsworksNodejsAppLayerResource s) Text = s

    autoAssignElasticIps =
        lens (_auto_assign_elastic_ips :: OpsworksNodejsAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_assign_elastic_ips = a } :: OpsworksNodejsAppLayerResource s)

instance HasAutoAssignPublicIps (OpsworksNodejsAppLayerResource s) Text where
    type HasAutoAssignPublicIpsThread (OpsworksNodejsAppLayerResource s) Text = s

    autoAssignPublicIps =
        lens (_auto_assign_public_ips :: OpsworksNodejsAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_assign_public_ips = a } :: OpsworksNodejsAppLayerResource s)

instance HasAutoHealing (OpsworksNodejsAppLayerResource s) Text where
    type HasAutoHealingThread (OpsworksNodejsAppLayerResource s) Text = s

    autoHealing =
        lens (_auto_healing :: OpsworksNodejsAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_healing = a } :: OpsworksNodejsAppLayerResource s)

instance HasCustomInstanceProfileArn (OpsworksNodejsAppLayerResource s) Text where
    type HasCustomInstanceProfileArnThread (OpsworksNodejsAppLayerResource s) Text = s

    customInstanceProfileArn =
        lens (_custom_instance_profile_arn :: OpsworksNodejsAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _custom_instance_profile_arn = a } :: OpsworksNodejsAppLayerResource s)

instance HasCustomJson (OpsworksNodejsAppLayerResource s) Text where
    type HasCustomJsonThread (OpsworksNodejsAppLayerResource s) Text = s

    customJson =
        lens (_custom_json :: OpsworksNodejsAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _custom_json = a } :: OpsworksNodejsAppLayerResource s)

instance HasCustomSecurityGroupIds (OpsworksNodejsAppLayerResource s) Text where
    type HasCustomSecurityGroupIdsThread (OpsworksNodejsAppLayerResource s) Text = s

    customSecurityGroupIds =
        lens (_custom_security_group_ids :: OpsworksNodejsAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _custom_security_group_ids = a } :: OpsworksNodejsAppLayerResource s)

instance HasDrainElbOnShutdown (OpsworksNodejsAppLayerResource s) Text where
    type HasDrainElbOnShutdownThread (OpsworksNodejsAppLayerResource s) Text = s

    drainElbOnShutdown =
        lens (_drain_elb_on_shutdown :: OpsworksNodejsAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _drain_elb_on_shutdown = a } :: OpsworksNodejsAppLayerResource s)

instance HasEbsVolume (OpsworksNodejsAppLayerResource s) Text where
    type HasEbsVolumeThread (OpsworksNodejsAppLayerResource s) Text = s

    ebsVolume =
        lens (_ebs_volume :: OpsworksNodejsAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _ebs_volume = a } :: OpsworksNodejsAppLayerResource s)

instance HasElasticLoadBalancer (OpsworksNodejsAppLayerResource s) Text where
    type HasElasticLoadBalancerThread (OpsworksNodejsAppLayerResource s) Text = s

    elasticLoadBalancer =
        lens (_elastic_load_balancer :: OpsworksNodejsAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _elastic_load_balancer = a } :: OpsworksNodejsAppLayerResource s)

instance HasInstallUpdatesOnBoot (OpsworksNodejsAppLayerResource s) Text where
    type HasInstallUpdatesOnBootThread (OpsworksNodejsAppLayerResource s) Text = s

    installUpdatesOnBoot =
        lens (_install_updates_on_boot :: OpsworksNodejsAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _install_updates_on_boot = a } :: OpsworksNodejsAppLayerResource s)

instance HasInstanceShutdownTimeout (OpsworksNodejsAppLayerResource s) Text where
    type HasInstanceShutdownTimeoutThread (OpsworksNodejsAppLayerResource s) Text = s

    instanceShutdownTimeout =
        lens (_instance_shutdown_timeout :: OpsworksNodejsAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _instance_shutdown_timeout = a } :: OpsworksNodejsAppLayerResource s)

instance HasName (OpsworksNodejsAppLayerResource s) Text where
    type HasNameThread (OpsworksNodejsAppLayerResource s) Text = s

    name =
        lens (_name :: OpsworksNodejsAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: OpsworksNodejsAppLayerResource s)

instance HasNodejsVersion (OpsworksNodejsAppLayerResource s) Text where
    type HasNodejsVersionThread (OpsworksNodejsAppLayerResource s) Text = s

    nodejsVersion =
        lens (_nodejs_version :: OpsworksNodejsAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _nodejs_version = a } :: OpsworksNodejsAppLayerResource s)

instance HasStackId (OpsworksNodejsAppLayerResource s) Text where
    type HasStackIdThread (OpsworksNodejsAppLayerResource s) Text = s

    stackId =
        lens (_stack_id :: OpsworksNodejsAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _stack_id = a } :: OpsworksNodejsAppLayerResource s)

instance HasSystemPackages (OpsworksNodejsAppLayerResource s) Text where
    type HasSystemPackagesThread (OpsworksNodejsAppLayerResource s) Text = s

    systemPackages =
        lens (_system_packages :: OpsworksNodejsAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _system_packages = a } :: OpsworksNodejsAppLayerResource s)

instance HasUseEbsOptimizedInstances (OpsworksNodejsAppLayerResource s) Text where
    type HasUseEbsOptimizedInstancesThread (OpsworksNodejsAppLayerResource s) Text = s

    useEbsOptimizedInstances =
        lens (_use_ebs_optimized_instances :: OpsworksNodejsAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _use_ebs_optimized_instances = a } :: OpsworksNodejsAppLayerResource s)

instance HasComputedId (OpsworksNodejsAppLayerResource s) Text

opsworksNodejsAppLayerResource :: TF.Resource TF.AWS (OpsworksNodejsAppLayerResource s)
opsworksNodejsAppLayerResource =
    TF.newResource "aws_opsworks_nodejs_app_layer" $
        OpsworksNodejsAppLayerResource {
              _auto_assign_elastic_ips = TF.Nil
            , _auto_assign_public_ips = TF.Nil
            , _auto_healing = TF.Nil
            , _custom_instance_profile_arn = TF.Nil
            , _custom_json = TF.Nil
            , _custom_security_group_ids = TF.Nil
            , _drain_elb_on_shutdown = TF.Nil
            , _ebs_volume = TF.Nil
            , _elastic_load_balancer = TF.Nil
            , _install_updates_on_boot = TF.Nil
            , _instance_shutdown_timeout = TF.Nil
            , _name = TF.Nil
            , _nodejs_version = TF.Nil
            , _stack_id = TF.Nil
            , _system_packages = TF.Nil
            , _use_ebs_optimized_instances = TF.Nil
            }

{- | The @aws_opsworks_permission@ AWS resource.

Provides an OpsWorks permission resource.
-}
data OpsworksPermissionResource s = OpsworksPermissionResource {
      _allow_ssh :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether the user is allowed to use SSH to communicate with the instance -}
    , _allow_sudo :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether the user is allowed to use sudo to elevate privileges -}
    , _level :: !(TF.Attribute s Text)
    {- ^ (Optional) The users permission level. Mus be one of @deny@ , @show@ , @deploy@ , @manage@ , @iam_only@ -}
    , _stack_id :: !(TF.Attribute s Text)
    {- ^ (Required) The stack to set the permissions for -}
    , _user_arn :: !(TF.Attribute s Text)
    {- ^ (Required) The user's IAM ARN to set permissions for -}
    } deriving (Show, Eq)

instance TF.ToHCL (OpsworksPermissionResource s) where
    toHCL OpsworksPermissionResource{..} = TF.block $ catMaybes
        [ TF.assign "allow_ssh" <$> TF.attribute _allow_ssh
        , TF.assign "allow_sudo" <$> TF.attribute _allow_sudo
        , TF.assign "level" <$> TF.attribute _level
        , TF.assign "stack_id" <$> TF.attribute _stack_id
        , TF.assign "user_arn" <$> TF.attribute _user_arn
        ]

instance HasAllowSsh (OpsworksPermissionResource s) Text where
    type HasAllowSshThread (OpsworksPermissionResource s) Text = s

    allowSsh =
        lens (_allow_ssh :: OpsworksPermissionResource s -> TF.Attribute s Text)
            (\s a -> s { _allow_ssh = a } :: OpsworksPermissionResource s)

instance HasAllowSudo (OpsworksPermissionResource s) Text where
    type HasAllowSudoThread (OpsworksPermissionResource s) Text = s

    allowSudo =
        lens (_allow_sudo :: OpsworksPermissionResource s -> TF.Attribute s Text)
            (\s a -> s { _allow_sudo = a } :: OpsworksPermissionResource s)

instance HasLevel (OpsworksPermissionResource s) Text where
    type HasLevelThread (OpsworksPermissionResource s) Text = s

    level =
        lens (_level :: OpsworksPermissionResource s -> TF.Attribute s Text)
            (\s a -> s { _level = a } :: OpsworksPermissionResource s)

instance HasStackId (OpsworksPermissionResource s) Text where
    type HasStackIdThread (OpsworksPermissionResource s) Text = s

    stackId =
        lens (_stack_id :: OpsworksPermissionResource s -> TF.Attribute s Text)
            (\s a -> s { _stack_id = a } :: OpsworksPermissionResource s)

instance HasUserArn (OpsworksPermissionResource s) Text where
    type HasUserArnThread (OpsworksPermissionResource s) Text = s

    userArn =
        lens (_user_arn :: OpsworksPermissionResource s -> TF.Attribute s Text)
            (\s a -> s { _user_arn = a } :: OpsworksPermissionResource s)

instance HasComputedId (OpsworksPermissionResource s) Text

opsworksPermissionResource :: TF.Resource TF.AWS (OpsworksPermissionResource s)
opsworksPermissionResource =
    TF.newResource "aws_opsworks_permission" $
        OpsworksPermissionResource {
              _allow_ssh = TF.Nil
            , _allow_sudo = TF.Nil
            , _level = TF.Nil
            , _stack_id = TF.Nil
            , _user_arn = TF.Nil
            }

{- | The @aws_opsworks_php_app_layer@ AWS resource.

Provides an OpsWorks PHP application layer resource.
-}
data OpsworksPhpAppLayerResource s = OpsworksPhpAppLayerResource {
      _auto_assign_elastic_ips :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to automatically assign an elastic IP address to the layer's instances. -}
    , _auto_assign_public_ips :: !(TF.Attribute s Text)
    {- ^ (Optional) For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances. -}
    , _auto_healing :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to enable auto-healing for the layer. -}
    , _custom_instance_profile_arn :: !(TF.Attribute s Text)
    {- ^ (Optional) The ARN of an IAM profile that will be used for the layer's instances. -}
    , _custom_json :: !(TF.Attribute s Text)
    {- ^ (Optional) Custom JSON attributes to apply to the layer. -}
    , _custom_security_group_ids :: !(TF.Attribute s Text)
    {- ^ (Optional) Ids for a set of security groups to apply to the layer's instances. -}
    , _drain_elb_on_shutdown :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to enable Elastic Load Balancing connection draining. -}
    , _ebs_volume :: !(TF.Attribute s Text)
    {- ^ (Optional) @ebs_volume@ blocks, as described below, will each create an EBS volume and connect it to the layer's instances. -}
    , _elastic_load_balancer :: !(TF.Attribute s Text)
    {- ^ (Optional) Name of an Elastic Load Balancer to attach to this layer -}
    , _install_updates_on_boot :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to install OS and package updates on each instance when it boots. -}
    , _instance_shutdown_timeout :: !(TF.Attribute s Text)
    {- ^ (Optional) The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Optional) A human-readable name for the layer. -}
    , _stack_id :: !(TF.Attribute s Text)
    {- ^ (Required) The id of the stack the layer will belong to. -}
    , _system_packages :: !(TF.Attribute s Text)
    {- ^ (Optional) Names of a set of system packages to install on the layer's instances. -}
    , _use_ebs_optimized_instances :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to use EBS-optimized instances. -}
    } deriving (Show, Eq)

instance TF.ToHCL (OpsworksPhpAppLayerResource s) where
    toHCL OpsworksPhpAppLayerResource{..} = TF.block $ catMaybes
        [ TF.assign "auto_assign_elastic_ips" <$> TF.attribute _auto_assign_elastic_ips
        , TF.assign "auto_assign_public_ips" <$> TF.attribute _auto_assign_public_ips
        , TF.assign "auto_healing" <$> TF.attribute _auto_healing
        , TF.assign "custom_instance_profile_arn" <$> TF.attribute _custom_instance_profile_arn
        , TF.assign "custom_json" <$> TF.attribute _custom_json
        , TF.assign "custom_security_group_ids" <$> TF.attribute _custom_security_group_ids
        , TF.assign "drain_elb_on_shutdown" <$> TF.attribute _drain_elb_on_shutdown
        , TF.assign "ebs_volume" <$> TF.attribute _ebs_volume
        , TF.assign "elastic_load_balancer" <$> TF.attribute _elastic_load_balancer
        , TF.assign "install_updates_on_boot" <$> TF.attribute _install_updates_on_boot
        , TF.assign "instance_shutdown_timeout" <$> TF.attribute _instance_shutdown_timeout
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "stack_id" <$> TF.attribute _stack_id
        , TF.assign "system_packages" <$> TF.attribute _system_packages
        , TF.assign "use_ebs_optimized_instances" <$> TF.attribute _use_ebs_optimized_instances
        ]

instance HasAutoAssignElasticIps (OpsworksPhpAppLayerResource s) Text where
    type HasAutoAssignElasticIpsThread (OpsworksPhpAppLayerResource s) Text = s

    autoAssignElasticIps =
        lens (_auto_assign_elastic_ips :: OpsworksPhpAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_assign_elastic_ips = a } :: OpsworksPhpAppLayerResource s)

instance HasAutoAssignPublicIps (OpsworksPhpAppLayerResource s) Text where
    type HasAutoAssignPublicIpsThread (OpsworksPhpAppLayerResource s) Text = s

    autoAssignPublicIps =
        lens (_auto_assign_public_ips :: OpsworksPhpAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_assign_public_ips = a } :: OpsworksPhpAppLayerResource s)

instance HasAutoHealing (OpsworksPhpAppLayerResource s) Text where
    type HasAutoHealingThread (OpsworksPhpAppLayerResource s) Text = s

    autoHealing =
        lens (_auto_healing :: OpsworksPhpAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_healing = a } :: OpsworksPhpAppLayerResource s)

instance HasCustomInstanceProfileArn (OpsworksPhpAppLayerResource s) Text where
    type HasCustomInstanceProfileArnThread (OpsworksPhpAppLayerResource s) Text = s

    customInstanceProfileArn =
        lens (_custom_instance_profile_arn :: OpsworksPhpAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _custom_instance_profile_arn = a } :: OpsworksPhpAppLayerResource s)

instance HasCustomJson (OpsworksPhpAppLayerResource s) Text where
    type HasCustomJsonThread (OpsworksPhpAppLayerResource s) Text = s

    customJson =
        lens (_custom_json :: OpsworksPhpAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _custom_json = a } :: OpsworksPhpAppLayerResource s)

instance HasCustomSecurityGroupIds (OpsworksPhpAppLayerResource s) Text where
    type HasCustomSecurityGroupIdsThread (OpsworksPhpAppLayerResource s) Text = s

    customSecurityGroupIds =
        lens (_custom_security_group_ids :: OpsworksPhpAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _custom_security_group_ids = a } :: OpsworksPhpAppLayerResource s)

instance HasDrainElbOnShutdown (OpsworksPhpAppLayerResource s) Text where
    type HasDrainElbOnShutdownThread (OpsworksPhpAppLayerResource s) Text = s

    drainElbOnShutdown =
        lens (_drain_elb_on_shutdown :: OpsworksPhpAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _drain_elb_on_shutdown = a } :: OpsworksPhpAppLayerResource s)

instance HasEbsVolume (OpsworksPhpAppLayerResource s) Text where
    type HasEbsVolumeThread (OpsworksPhpAppLayerResource s) Text = s

    ebsVolume =
        lens (_ebs_volume :: OpsworksPhpAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _ebs_volume = a } :: OpsworksPhpAppLayerResource s)

instance HasElasticLoadBalancer (OpsworksPhpAppLayerResource s) Text where
    type HasElasticLoadBalancerThread (OpsworksPhpAppLayerResource s) Text = s

    elasticLoadBalancer =
        lens (_elastic_load_balancer :: OpsworksPhpAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _elastic_load_balancer = a } :: OpsworksPhpAppLayerResource s)

instance HasInstallUpdatesOnBoot (OpsworksPhpAppLayerResource s) Text where
    type HasInstallUpdatesOnBootThread (OpsworksPhpAppLayerResource s) Text = s

    installUpdatesOnBoot =
        lens (_install_updates_on_boot :: OpsworksPhpAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _install_updates_on_boot = a } :: OpsworksPhpAppLayerResource s)

instance HasInstanceShutdownTimeout (OpsworksPhpAppLayerResource s) Text where
    type HasInstanceShutdownTimeoutThread (OpsworksPhpAppLayerResource s) Text = s

    instanceShutdownTimeout =
        lens (_instance_shutdown_timeout :: OpsworksPhpAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _instance_shutdown_timeout = a } :: OpsworksPhpAppLayerResource s)

instance HasName (OpsworksPhpAppLayerResource s) Text where
    type HasNameThread (OpsworksPhpAppLayerResource s) Text = s

    name =
        lens (_name :: OpsworksPhpAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: OpsworksPhpAppLayerResource s)

instance HasStackId (OpsworksPhpAppLayerResource s) Text where
    type HasStackIdThread (OpsworksPhpAppLayerResource s) Text = s

    stackId =
        lens (_stack_id :: OpsworksPhpAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _stack_id = a } :: OpsworksPhpAppLayerResource s)

instance HasSystemPackages (OpsworksPhpAppLayerResource s) Text where
    type HasSystemPackagesThread (OpsworksPhpAppLayerResource s) Text = s

    systemPackages =
        lens (_system_packages :: OpsworksPhpAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _system_packages = a } :: OpsworksPhpAppLayerResource s)

instance HasUseEbsOptimizedInstances (OpsworksPhpAppLayerResource s) Text where
    type HasUseEbsOptimizedInstancesThread (OpsworksPhpAppLayerResource s) Text = s

    useEbsOptimizedInstances =
        lens (_use_ebs_optimized_instances :: OpsworksPhpAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _use_ebs_optimized_instances = a } :: OpsworksPhpAppLayerResource s)

instance HasComputedId (OpsworksPhpAppLayerResource s) Text

opsworksPhpAppLayerResource :: TF.Resource TF.AWS (OpsworksPhpAppLayerResource s)
opsworksPhpAppLayerResource =
    TF.newResource "aws_opsworks_php_app_layer" $
        OpsworksPhpAppLayerResource {
              _auto_assign_elastic_ips = TF.Nil
            , _auto_assign_public_ips = TF.Nil
            , _auto_healing = TF.Nil
            , _custom_instance_profile_arn = TF.Nil
            , _custom_json = TF.Nil
            , _custom_security_group_ids = TF.Nil
            , _drain_elb_on_shutdown = TF.Nil
            , _ebs_volume = TF.Nil
            , _elastic_load_balancer = TF.Nil
            , _install_updates_on_boot = TF.Nil
            , _instance_shutdown_timeout = TF.Nil
            , _name = TF.Nil
            , _stack_id = TF.Nil
            , _system_packages = TF.Nil
            , _use_ebs_optimized_instances = TF.Nil
            }

{- | The @aws_opsworks_rails_app_layer@ AWS resource.

Provides an OpsWorks Ruby on Rails application layer resource.
-}
data OpsworksRailsAppLayerResource s = OpsworksRailsAppLayerResource {
      _app_server :: !(TF.Attribute s Text)
    {- ^ (Optional) Keyword for the app server to use. Defaults to "apache_passenger". -}
    , _auto_assign_elastic_ips :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to automatically assign an elastic IP address to the layer's instances. -}
    , _auto_assign_public_ips :: !(TF.Attribute s Text)
    {- ^ (Optional) For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances. -}
    , _auto_healing :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to enable auto-healing for the layer. -}
    , _bundler_version :: !(TF.Attribute s Text)
    {- ^ (Optional) When OpsWorks is managing Bundler, which version to use. Defaults to "1.5.3". -}
    , _custom_instance_profile_arn :: !(TF.Attribute s Text)
    {- ^ (Optional) The ARN of an IAM profile that will be used for the layer's instances. -}
    , _custom_json :: !(TF.Attribute s Text)
    {- ^ (Optional) Custom JSON attributes to apply to the layer. -}
    , _custom_security_group_ids :: !(TF.Attribute s Text)
    {- ^ (Optional) Ids for a set of security groups to apply to the layer's instances. -}
    , _drain_elb_on_shutdown :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to enable Elastic Load Balancing connection draining. -}
    , _ebs_volume :: !(TF.Attribute s Text)
    {- ^ (Optional) @ebs_volume@ blocks, as described below, will each create an EBS volume and connect it to the layer's instances. -}
    , _elastic_load_balancer :: !(TF.Attribute s Text)
    {- ^ (Optional) Name of an Elastic Load Balancer to attach to this layer -}
    , _install_updates_on_boot :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to install OS and package updates on each instance when it boots. -}
    , _instance_shutdown_timeout :: !(TF.Attribute s Text)
    {- ^ (Optional) The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event. -}
    , _manage_bundler :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether OpsWorks should manage bundler. On by default. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Optional) A human-readable name for the layer. -}
    , _passenger_version :: !(TF.Attribute s Text)
    {- ^ (Optional) The version of Passenger to use. Defaults to "4.0.46". -}
    , _ruby_version :: !(TF.Attribute s Text)
    {- ^ (Optional) The version of Ruby to use. Defaults to "2.0.0". -}
    , _rubygems_version :: !(TF.Attribute s Text)
    {- ^ (Optional) The version of RubyGems to use. Defaults to "2.2.2". -}
    , _stack_id :: !(TF.Attribute s Text)
    {- ^ (Required) The id of the stack the layer will belong to. -}
    , _system_packages :: !(TF.Attribute s Text)
    {- ^ (Optional) Names of a set of system packages to install on the layer's instances. -}
    , _use_ebs_optimized_instances :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to use EBS-optimized instances. -}
    } deriving (Show, Eq)

instance TF.ToHCL (OpsworksRailsAppLayerResource s) where
    toHCL OpsworksRailsAppLayerResource{..} = TF.block $ catMaybes
        [ TF.assign "app_server" <$> TF.attribute _app_server
        , TF.assign "auto_assign_elastic_ips" <$> TF.attribute _auto_assign_elastic_ips
        , TF.assign "auto_assign_public_ips" <$> TF.attribute _auto_assign_public_ips
        , TF.assign "auto_healing" <$> TF.attribute _auto_healing
        , TF.assign "bundler_version" <$> TF.attribute _bundler_version
        , TF.assign "custom_instance_profile_arn" <$> TF.attribute _custom_instance_profile_arn
        , TF.assign "custom_json" <$> TF.attribute _custom_json
        , TF.assign "custom_security_group_ids" <$> TF.attribute _custom_security_group_ids
        , TF.assign "drain_elb_on_shutdown" <$> TF.attribute _drain_elb_on_shutdown
        , TF.assign "ebs_volume" <$> TF.attribute _ebs_volume
        , TF.assign "elastic_load_balancer" <$> TF.attribute _elastic_load_balancer
        , TF.assign "install_updates_on_boot" <$> TF.attribute _install_updates_on_boot
        , TF.assign "instance_shutdown_timeout" <$> TF.attribute _instance_shutdown_timeout
        , TF.assign "manage_bundler" <$> TF.attribute _manage_bundler
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "passenger_version" <$> TF.attribute _passenger_version
        , TF.assign "ruby_version" <$> TF.attribute _ruby_version
        , TF.assign "rubygems_version" <$> TF.attribute _rubygems_version
        , TF.assign "stack_id" <$> TF.attribute _stack_id
        , TF.assign "system_packages" <$> TF.attribute _system_packages
        , TF.assign "use_ebs_optimized_instances" <$> TF.attribute _use_ebs_optimized_instances
        ]

instance HasAppServer (OpsworksRailsAppLayerResource s) Text where
    type HasAppServerThread (OpsworksRailsAppLayerResource s) Text = s

    appServer =
        lens (_app_server :: OpsworksRailsAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _app_server = a } :: OpsworksRailsAppLayerResource s)

instance HasAutoAssignElasticIps (OpsworksRailsAppLayerResource s) Text where
    type HasAutoAssignElasticIpsThread (OpsworksRailsAppLayerResource s) Text = s

    autoAssignElasticIps =
        lens (_auto_assign_elastic_ips :: OpsworksRailsAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_assign_elastic_ips = a } :: OpsworksRailsAppLayerResource s)

instance HasAutoAssignPublicIps (OpsworksRailsAppLayerResource s) Text where
    type HasAutoAssignPublicIpsThread (OpsworksRailsAppLayerResource s) Text = s

    autoAssignPublicIps =
        lens (_auto_assign_public_ips :: OpsworksRailsAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_assign_public_ips = a } :: OpsworksRailsAppLayerResource s)

instance HasAutoHealing (OpsworksRailsAppLayerResource s) Text where
    type HasAutoHealingThread (OpsworksRailsAppLayerResource s) Text = s

    autoHealing =
        lens (_auto_healing :: OpsworksRailsAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_healing = a } :: OpsworksRailsAppLayerResource s)

instance HasBundlerVersion (OpsworksRailsAppLayerResource s) Text where
    type HasBundlerVersionThread (OpsworksRailsAppLayerResource s) Text = s

    bundlerVersion =
        lens (_bundler_version :: OpsworksRailsAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _bundler_version = a } :: OpsworksRailsAppLayerResource s)

instance HasCustomInstanceProfileArn (OpsworksRailsAppLayerResource s) Text where
    type HasCustomInstanceProfileArnThread (OpsworksRailsAppLayerResource s) Text = s

    customInstanceProfileArn =
        lens (_custom_instance_profile_arn :: OpsworksRailsAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _custom_instance_profile_arn = a } :: OpsworksRailsAppLayerResource s)

instance HasCustomJson (OpsworksRailsAppLayerResource s) Text where
    type HasCustomJsonThread (OpsworksRailsAppLayerResource s) Text = s

    customJson =
        lens (_custom_json :: OpsworksRailsAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _custom_json = a } :: OpsworksRailsAppLayerResource s)

instance HasCustomSecurityGroupIds (OpsworksRailsAppLayerResource s) Text where
    type HasCustomSecurityGroupIdsThread (OpsworksRailsAppLayerResource s) Text = s

    customSecurityGroupIds =
        lens (_custom_security_group_ids :: OpsworksRailsAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _custom_security_group_ids = a } :: OpsworksRailsAppLayerResource s)

instance HasDrainElbOnShutdown (OpsworksRailsAppLayerResource s) Text where
    type HasDrainElbOnShutdownThread (OpsworksRailsAppLayerResource s) Text = s

    drainElbOnShutdown =
        lens (_drain_elb_on_shutdown :: OpsworksRailsAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _drain_elb_on_shutdown = a } :: OpsworksRailsAppLayerResource s)

instance HasEbsVolume (OpsworksRailsAppLayerResource s) Text where
    type HasEbsVolumeThread (OpsworksRailsAppLayerResource s) Text = s

    ebsVolume =
        lens (_ebs_volume :: OpsworksRailsAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _ebs_volume = a } :: OpsworksRailsAppLayerResource s)

instance HasElasticLoadBalancer (OpsworksRailsAppLayerResource s) Text where
    type HasElasticLoadBalancerThread (OpsworksRailsAppLayerResource s) Text = s

    elasticLoadBalancer =
        lens (_elastic_load_balancer :: OpsworksRailsAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _elastic_load_balancer = a } :: OpsworksRailsAppLayerResource s)

instance HasInstallUpdatesOnBoot (OpsworksRailsAppLayerResource s) Text where
    type HasInstallUpdatesOnBootThread (OpsworksRailsAppLayerResource s) Text = s

    installUpdatesOnBoot =
        lens (_install_updates_on_boot :: OpsworksRailsAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _install_updates_on_boot = a } :: OpsworksRailsAppLayerResource s)

instance HasInstanceShutdownTimeout (OpsworksRailsAppLayerResource s) Text where
    type HasInstanceShutdownTimeoutThread (OpsworksRailsAppLayerResource s) Text = s

    instanceShutdownTimeout =
        lens (_instance_shutdown_timeout :: OpsworksRailsAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _instance_shutdown_timeout = a } :: OpsworksRailsAppLayerResource s)

instance HasManageBundler (OpsworksRailsAppLayerResource s) Text where
    type HasManageBundlerThread (OpsworksRailsAppLayerResource s) Text = s

    manageBundler =
        lens (_manage_bundler :: OpsworksRailsAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _manage_bundler = a } :: OpsworksRailsAppLayerResource s)

instance HasName (OpsworksRailsAppLayerResource s) Text where
    type HasNameThread (OpsworksRailsAppLayerResource s) Text = s

    name =
        lens (_name :: OpsworksRailsAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: OpsworksRailsAppLayerResource s)

instance HasPassengerVersion (OpsworksRailsAppLayerResource s) Text where
    type HasPassengerVersionThread (OpsworksRailsAppLayerResource s) Text = s

    passengerVersion =
        lens (_passenger_version :: OpsworksRailsAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _passenger_version = a } :: OpsworksRailsAppLayerResource s)

instance HasRubyVersion (OpsworksRailsAppLayerResource s) Text where
    type HasRubyVersionThread (OpsworksRailsAppLayerResource s) Text = s

    rubyVersion =
        lens (_ruby_version :: OpsworksRailsAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _ruby_version = a } :: OpsworksRailsAppLayerResource s)

instance HasRubygemsVersion (OpsworksRailsAppLayerResource s) Text where
    type HasRubygemsVersionThread (OpsworksRailsAppLayerResource s) Text = s

    rubygemsVersion =
        lens (_rubygems_version :: OpsworksRailsAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _rubygems_version = a } :: OpsworksRailsAppLayerResource s)

instance HasStackId (OpsworksRailsAppLayerResource s) Text where
    type HasStackIdThread (OpsworksRailsAppLayerResource s) Text = s

    stackId =
        lens (_stack_id :: OpsworksRailsAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _stack_id = a } :: OpsworksRailsAppLayerResource s)

instance HasSystemPackages (OpsworksRailsAppLayerResource s) Text where
    type HasSystemPackagesThread (OpsworksRailsAppLayerResource s) Text = s

    systemPackages =
        lens (_system_packages :: OpsworksRailsAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _system_packages = a } :: OpsworksRailsAppLayerResource s)

instance HasUseEbsOptimizedInstances (OpsworksRailsAppLayerResource s) Text where
    type HasUseEbsOptimizedInstancesThread (OpsworksRailsAppLayerResource s) Text = s

    useEbsOptimizedInstances =
        lens (_use_ebs_optimized_instances :: OpsworksRailsAppLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _use_ebs_optimized_instances = a } :: OpsworksRailsAppLayerResource s)

instance HasComputedId (OpsworksRailsAppLayerResource s) Text

opsworksRailsAppLayerResource :: TF.Resource TF.AWS (OpsworksRailsAppLayerResource s)
opsworksRailsAppLayerResource =
    TF.newResource "aws_opsworks_rails_app_layer" $
        OpsworksRailsAppLayerResource {
              _app_server = TF.Nil
            , _auto_assign_elastic_ips = TF.Nil
            , _auto_assign_public_ips = TF.Nil
            , _auto_healing = TF.Nil
            , _bundler_version = TF.Nil
            , _custom_instance_profile_arn = TF.Nil
            , _custom_json = TF.Nil
            , _custom_security_group_ids = TF.Nil
            , _drain_elb_on_shutdown = TF.Nil
            , _ebs_volume = TF.Nil
            , _elastic_load_balancer = TF.Nil
            , _install_updates_on_boot = TF.Nil
            , _instance_shutdown_timeout = TF.Nil
            , _manage_bundler = TF.Nil
            , _name = TF.Nil
            , _passenger_version = TF.Nil
            , _ruby_version = TF.Nil
            , _rubygems_version = TF.Nil
            , _stack_id = TF.Nil
            , _system_packages = TF.Nil
            , _use_ebs_optimized_instances = TF.Nil
            }

{- | The @aws_opsworks_rds_db_instance@ AWS resource.

Provides an OpsWorks RDS DB Instance resource. ~> Note: All arguments
including the username and password will be stored in the raw state as
plain-text. </docs/state/sensitive-data.html> .
-}
data OpsworksRdsDbInstanceResource s = OpsworksRdsDbInstanceResource {
      _db_password :: !(TF.Attribute s Text)
    {- ^ (Required) A db password -}
    , _db_user :: !(TF.Attribute s Text)
    {- ^ (Required) A db username -}
    , _rds_db_instance_arn :: !(TF.Attribute s Text)
    {- ^ (Required) The db instance to register for this stack. Changing this will force a new resource. -}
    , _stack_id :: !(TF.Attribute s Text)
    {- ^ (Required) The stack to register a db inatance for. Changing this will force a new resource. -}
    } deriving (Show, Eq)

instance TF.ToHCL (OpsworksRdsDbInstanceResource s) where
    toHCL OpsworksRdsDbInstanceResource{..} = TF.block $ catMaybes
        [ TF.assign "db_password" <$> TF.attribute _db_password
        , TF.assign "db_user" <$> TF.attribute _db_user
        , TF.assign "rds_db_instance_arn" <$> TF.attribute _rds_db_instance_arn
        , TF.assign "stack_id" <$> TF.attribute _stack_id
        ]

instance HasDbPassword (OpsworksRdsDbInstanceResource s) Text where
    type HasDbPasswordThread (OpsworksRdsDbInstanceResource s) Text = s

    dbPassword =
        lens (_db_password :: OpsworksRdsDbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _db_password = a } :: OpsworksRdsDbInstanceResource s)

instance HasDbUser (OpsworksRdsDbInstanceResource s) Text where
    type HasDbUserThread (OpsworksRdsDbInstanceResource s) Text = s

    dbUser =
        lens (_db_user :: OpsworksRdsDbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _db_user = a } :: OpsworksRdsDbInstanceResource s)

instance HasRdsDbInstanceArn (OpsworksRdsDbInstanceResource s) Text where
    type HasRdsDbInstanceArnThread (OpsworksRdsDbInstanceResource s) Text = s

    rdsDbInstanceArn =
        lens (_rds_db_instance_arn :: OpsworksRdsDbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _rds_db_instance_arn = a } :: OpsworksRdsDbInstanceResource s)

instance HasStackId (OpsworksRdsDbInstanceResource s) Text where
    type HasStackIdThread (OpsworksRdsDbInstanceResource s) Text = s

    stackId =
        lens (_stack_id :: OpsworksRdsDbInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _stack_id = a } :: OpsworksRdsDbInstanceResource s)

instance HasComputedId (OpsworksRdsDbInstanceResource s) Text

opsworksRdsDbInstanceResource :: TF.Resource TF.AWS (OpsworksRdsDbInstanceResource s)
opsworksRdsDbInstanceResource =
    TF.newResource "aws_opsworks_rds_db_instance" $
        OpsworksRdsDbInstanceResource {
              _db_password = TF.Nil
            , _db_user = TF.Nil
            , _rds_db_instance_arn = TF.Nil
            , _stack_id = TF.Nil
            }

{- | The @aws_opsworks_stack@ AWS resource.

Provides an OpsWorks stack resource.
-}
data OpsworksStackResource s = OpsworksStackResource {
      _agent_version :: !(TF.Attribute s Text)
    {- ^ (Optional) If set to @"LATEST"@ , OpsWorks will automatically install the latest version. -}
    , _berkshelf_version :: !(TF.Attribute s Text)
    {- ^ (Optional) If @manage_berkshelf@ is enabled, the version of Berkshelf to use. -}
    , _color :: !(TF.Attribute s Text)
    {- ^ (Optional) Color to paint next to the stack's resources in the OpsWorks console. -}
    , _configuration_manager_name :: !(TF.Attribute s Text)
    {- ^ (Optional) Name of the configuration manager to use. Defaults to "Chef". -}
    , _configuration_manager_version :: !(TF.Attribute s Text)
    {- ^ (Optional) Version of the configuration manager to use. Defaults to "11.4". -}
    , _custom_cookbooks_source :: !(TF.Attribute s Text)
    {- ^ (Optional) When @use_custom_cookbooks@ is set, provide this sub-object as described below. -}
    , _custom_json :: !(TF.Attribute s Text)
    {- ^ (Optional) Custom JSON attributes to apply to the entire stack. -}
    , _default_availability_zone :: !(TF.Attribute s TF.Zone)
    {- ^ (Optional) Name of the availability zone where instances will be created by default. This is required unless you set @vpc_id@ . -}
    , _default_instance_profile_arn :: !(TF.Attribute s Text)
    {- ^ (Required) The ARN of an IAM Instance Profile that created instances will have by default. -}
    , _default_os :: !(TF.Attribute s Text)
    {- ^ (Optional) Name of OS that will be installed on instances by default. -}
    , _default_root_device_type :: !(TF.Attribute s Text)
    {- ^ (Optional) Name of the type of root device instances will have by default. -}
    , _default_ssh_key_name :: !(TF.Attribute s Text)
    {- ^ (Optional) Name of the SSH keypair that instances will have by default. -}
    , _default_subnet_id :: !(TF.Attribute s Text)
    {- ^ (Optional) Id of the subnet in which instances will be created by default. Mandatory if @vpc_id@ is set, and forbidden if it isn't. -}
    , _hostname_theme :: !(TF.Attribute s Text)
    {- ^ (Optional) Keyword representing the naming scheme that will be used for instance hostnames within this stack. -}
    , _manage_berkshelf :: !(TF.Attribute s Text)
    {- ^ (Optional) Boolean value controlling whether Opsworks will run Berkshelf for this stack. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the stack. -}
    , _region :: !(TF.Attribute s TF.Region)
    {- ^ (Required) The name of the region where the stack will exist. -}
    , _service_role_arn :: !(TF.Attribute s Text)
    {- ^ (Required) The ARN of an IAM role that the OpsWorks service will act as. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _use_custom_cookbooks :: !(TF.Attribute s Text)
    {- ^ (Optional) Boolean value controlling whether the custom cookbook settings are enabled. -}
    , _use_opsworks_security_groups :: !(TF.Attribute s Text)
    {- ^ (Optional) Boolean value controlling whether the standard OpsWorks security groups apply to created instances. -}
    , _vpc_id :: !(TF.Attribute s Text)
    {- ^ (Optional) The id of the VPC that this stack belongs to. -}
    } deriving (Show, Eq)

instance TF.ToHCL (OpsworksStackResource s) where
    toHCL OpsworksStackResource{..} = TF.block $ catMaybes
        [ TF.assign "agent_version" <$> TF.attribute _agent_version
        , TF.assign "berkshelf_version" <$> TF.attribute _berkshelf_version
        , TF.assign "color" <$> TF.attribute _color
        , TF.assign "configuration_manager_name" <$> TF.attribute _configuration_manager_name
        , TF.assign "configuration_manager_version" <$> TF.attribute _configuration_manager_version
        , TF.assign "custom_cookbooks_source" <$> TF.attribute _custom_cookbooks_source
        , TF.assign "custom_json" <$> TF.attribute _custom_json
        , TF.assign "default_availability_zone" <$> TF.attribute _default_availability_zone
        , TF.assign "default_instance_profile_arn" <$> TF.attribute _default_instance_profile_arn
        , TF.assign "default_os" <$> TF.attribute _default_os
        , TF.assign "default_root_device_type" <$> TF.attribute _default_root_device_type
        , TF.assign "default_ssh_key_name" <$> TF.attribute _default_ssh_key_name
        , TF.assign "default_subnet_id" <$> TF.attribute _default_subnet_id
        , TF.assign "hostname_theme" <$> TF.attribute _hostname_theme
        , TF.assign "manage_berkshelf" <$> TF.attribute _manage_berkshelf
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "region" <$> TF.attribute _region
        , TF.assign "service_role_arn" <$> TF.attribute _service_role_arn
        , TF.assign "tags" <$> TF.attribute _tags
        , TF.assign "use_custom_cookbooks" <$> TF.attribute _use_custom_cookbooks
        , TF.assign "use_opsworks_security_groups" <$> TF.attribute _use_opsworks_security_groups
        , TF.assign "vpc_id" <$> TF.attribute _vpc_id
        ]

instance HasAgentVersion (OpsworksStackResource s) Text where
    type HasAgentVersionThread (OpsworksStackResource s) Text = s

    agentVersion =
        lens (_agent_version :: OpsworksStackResource s -> TF.Attribute s Text)
            (\s a -> s { _agent_version = a } :: OpsworksStackResource s)

instance HasBerkshelfVersion (OpsworksStackResource s) Text where
    type HasBerkshelfVersionThread (OpsworksStackResource s) Text = s

    berkshelfVersion =
        lens (_berkshelf_version :: OpsworksStackResource s -> TF.Attribute s Text)
            (\s a -> s { _berkshelf_version = a } :: OpsworksStackResource s)

instance HasColor (OpsworksStackResource s) Text where
    type HasColorThread (OpsworksStackResource s) Text = s

    color =
        lens (_color :: OpsworksStackResource s -> TF.Attribute s Text)
            (\s a -> s { _color = a } :: OpsworksStackResource s)

instance HasConfigurationManagerName (OpsworksStackResource s) Text where
    type HasConfigurationManagerNameThread (OpsworksStackResource s) Text = s

    configurationManagerName =
        lens (_configuration_manager_name :: OpsworksStackResource s -> TF.Attribute s Text)
            (\s a -> s { _configuration_manager_name = a } :: OpsworksStackResource s)

instance HasConfigurationManagerVersion (OpsworksStackResource s) Text where
    type HasConfigurationManagerVersionThread (OpsworksStackResource s) Text = s

    configurationManagerVersion =
        lens (_configuration_manager_version :: OpsworksStackResource s -> TF.Attribute s Text)
            (\s a -> s { _configuration_manager_version = a } :: OpsworksStackResource s)

instance HasCustomCookbooksSource (OpsworksStackResource s) Text where
    type HasCustomCookbooksSourceThread (OpsworksStackResource s) Text = s

    customCookbooksSource =
        lens (_custom_cookbooks_source :: OpsworksStackResource s -> TF.Attribute s Text)
            (\s a -> s { _custom_cookbooks_source = a } :: OpsworksStackResource s)

instance HasCustomJson (OpsworksStackResource s) Text where
    type HasCustomJsonThread (OpsworksStackResource s) Text = s

    customJson =
        lens (_custom_json :: OpsworksStackResource s -> TF.Attribute s Text)
            (\s a -> s { _custom_json = a } :: OpsworksStackResource s)

instance HasDefaultAvailabilityZone (OpsworksStackResource s) TF.Zone where
    type HasDefaultAvailabilityZoneThread (OpsworksStackResource s) TF.Zone = s

    defaultAvailabilityZone =
        lens (_default_availability_zone :: OpsworksStackResource s -> TF.Attribute s TF.Zone)
            (\s a -> s { _default_availability_zone = a } :: OpsworksStackResource s)

instance HasDefaultInstanceProfileArn (OpsworksStackResource s) Text where
    type HasDefaultInstanceProfileArnThread (OpsworksStackResource s) Text = s

    defaultInstanceProfileArn =
        lens (_default_instance_profile_arn :: OpsworksStackResource s -> TF.Attribute s Text)
            (\s a -> s { _default_instance_profile_arn = a } :: OpsworksStackResource s)

instance HasDefaultOs (OpsworksStackResource s) Text where
    type HasDefaultOsThread (OpsworksStackResource s) Text = s

    defaultOs =
        lens (_default_os :: OpsworksStackResource s -> TF.Attribute s Text)
            (\s a -> s { _default_os = a } :: OpsworksStackResource s)

instance HasDefaultRootDeviceType (OpsworksStackResource s) Text where
    type HasDefaultRootDeviceTypeThread (OpsworksStackResource s) Text = s

    defaultRootDeviceType =
        lens (_default_root_device_type :: OpsworksStackResource s -> TF.Attribute s Text)
            (\s a -> s { _default_root_device_type = a } :: OpsworksStackResource s)

instance HasDefaultSshKeyName (OpsworksStackResource s) Text where
    type HasDefaultSshKeyNameThread (OpsworksStackResource s) Text = s

    defaultSshKeyName =
        lens (_default_ssh_key_name :: OpsworksStackResource s -> TF.Attribute s Text)
            (\s a -> s { _default_ssh_key_name = a } :: OpsworksStackResource s)

instance HasDefaultSubnetId (OpsworksStackResource s) Text where
    type HasDefaultSubnetIdThread (OpsworksStackResource s) Text = s

    defaultSubnetId =
        lens (_default_subnet_id :: OpsworksStackResource s -> TF.Attribute s Text)
            (\s a -> s { _default_subnet_id = a } :: OpsworksStackResource s)

instance HasHostnameTheme (OpsworksStackResource s) Text where
    type HasHostnameThemeThread (OpsworksStackResource s) Text = s

    hostnameTheme =
        lens (_hostname_theme :: OpsworksStackResource s -> TF.Attribute s Text)
            (\s a -> s { _hostname_theme = a } :: OpsworksStackResource s)

instance HasManageBerkshelf (OpsworksStackResource s) Text where
    type HasManageBerkshelfThread (OpsworksStackResource s) Text = s

    manageBerkshelf =
        lens (_manage_berkshelf :: OpsworksStackResource s -> TF.Attribute s Text)
            (\s a -> s { _manage_berkshelf = a } :: OpsworksStackResource s)

instance HasName (OpsworksStackResource s) Text where
    type HasNameThread (OpsworksStackResource s) Text = s

    name =
        lens (_name :: OpsworksStackResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: OpsworksStackResource s)

instance HasRegion (OpsworksStackResource s) TF.Region where
    type HasRegionThread (OpsworksStackResource s) TF.Region = s

    region =
        lens (_region :: OpsworksStackResource s -> TF.Attribute s TF.Region)
            (\s a -> s { _region = a } :: OpsworksStackResource s)

instance HasServiceRoleArn (OpsworksStackResource s) Text where
    type HasServiceRoleArnThread (OpsworksStackResource s) Text = s

    serviceRoleArn =
        lens (_service_role_arn :: OpsworksStackResource s -> TF.Attribute s Text)
            (\s a -> s { _service_role_arn = a } :: OpsworksStackResource s)

instance HasTags (OpsworksStackResource s) TF.Tags where
    type HasTagsThread (OpsworksStackResource s) TF.Tags = s

    tags =
        lens (_tags :: OpsworksStackResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: OpsworksStackResource s)

instance HasUseCustomCookbooks (OpsworksStackResource s) Text where
    type HasUseCustomCookbooksThread (OpsworksStackResource s) Text = s

    useCustomCookbooks =
        lens (_use_custom_cookbooks :: OpsworksStackResource s -> TF.Attribute s Text)
            (\s a -> s { _use_custom_cookbooks = a } :: OpsworksStackResource s)

instance HasUseOpsworksSecurityGroups (OpsworksStackResource s) Text where
    type HasUseOpsworksSecurityGroupsThread (OpsworksStackResource s) Text = s

    useOpsworksSecurityGroups =
        lens (_use_opsworks_security_groups :: OpsworksStackResource s -> TF.Attribute s Text)
            (\s a -> s { _use_opsworks_security_groups = a } :: OpsworksStackResource s)

instance HasVpcId (OpsworksStackResource s) Text where
    type HasVpcIdThread (OpsworksStackResource s) Text = s

    vpcId =
        lens (_vpc_id :: OpsworksStackResource s -> TF.Attribute s Text)
            (\s a -> s { _vpc_id = a } :: OpsworksStackResource s)

instance HasComputedId (OpsworksStackResource s) Text

opsworksStackResource :: TF.Resource TF.AWS (OpsworksStackResource s)
opsworksStackResource =
    TF.newResource "aws_opsworks_stack" $
        OpsworksStackResource {
              _agent_version = TF.Nil
            , _berkshelf_version = TF.Nil
            , _color = TF.Nil
            , _configuration_manager_name = TF.Nil
            , _configuration_manager_version = TF.Nil
            , _custom_cookbooks_source = TF.Nil
            , _custom_json = TF.Nil
            , _default_availability_zone = TF.Nil
            , _default_instance_profile_arn = TF.Nil
            , _default_os = TF.Nil
            , _default_root_device_type = TF.Nil
            , _default_ssh_key_name = TF.Nil
            , _default_subnet_id = TF.Nil
            , _hostname_theme = TF.Nil
            , _manage_berkshelf = TF.Nil
            , _name = TF.Nil
            , _region = TF.Nil
            , _service_role_arn = TF.Nil
            , _tags = TF.Nil
            , _use_custom_cookbooks = TF.Nil
            , _use_opsworks_security_groups = TF.Nil
            , _vpc_id = TF.Nil
            }

{- | The @aws_opsworks_static_web_layer@ AWS resource.

Provides an OpsWorks static web server layer resource.
-}
data OpsworksStaticWebLayerResource s = OpsworksStaticWebLayerResource {
      _auto_assign_elastic_ips :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to automatically assign an elastic IP address to the layer's instances. -}
    , _auto_assign_public_ips :: !(TF.Attribute s Text)
    {- ^ (Optional) For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances. -}
    , _auto_healing :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to enable auto-healing for the layer. -}
    , _custom_instance_profile_arn :: !(TF.Attribute s Text)
    {- ^ (Optional) The ARN of an IAM profile that will be used for the layer's instances. -}
    , _custom_security_group_ids :: !(TF.Attribute s Text)
    {- ^ (Optional) Ids for a set of security groups to apply to the layer's instances. -}
    , _drain_elb_on_shutdown :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to enable Elastic Load Balancing connection draining. -}
    , _ebs_volume :: !(TF.Attribute s Text)
    {- ^ (Optional) @ebs_volume@ blocks, as described below, will each create an EBS volume and connect it to the layer's instances. -}
    , _elastic_load_balancer :: !(TF.Attribute s Text)
    {- ^ (Optional) Name of an Elastic Load Balancer to attach to this layer -}
    , _install_updates_on_boot :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to install OS and package updates on each instance when it boots. -}
    , _instance_shutdown_timeout :: !(TF.Attribute s Text)
    {- ^ (Optional) The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Optional) A human-readable name for the layer. -}
    , _stack_id :: !(TF.Attribute s Text)
    {- ^ (Required) The id of the stack the layer will belong to. -}
    , _system_packages :: !(TF.Attribute s Text)
    {- ^ (Optional) Names of a set of system packages to install on the layer's instances. -}
    , _use_ebs_optimized_instances :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to use EBS-optimized instances. -}
    } deriving (Show, Eq)

instance TF.ToHCL (OpsworksStaticWebLayerResource s) where
    toHCL OpsworksStaticWebLayerResource{..} = TF.block $ catMaybes
        [ TF.assign "auto_assign_elastic_ips" <$> TF.attribute _auto_assign_elastic_ips
        , TF.assign "auto_assign_public_ips" <$> TF.attribute _auto_assign_public_ips
        , TF.assign "auto_healing" <$> TF.attribute _auto_healing
        , TF.assign "custom_instance_profile_arn" <$> TF.attribute _custom_instance_profile_arn
        , TF.assign "custom_security_group_ids" <$> TF.attribute _custom_security_group_ids
        , TF.assign "drain_elb_on_shutdown" <$> TF.attribute _drain_elb_on_shutdown
        , TF.assign "ebs_volume" <$> TF.attribute _ebs_volume
        , TF.assign "elastic_load_balancer" <$> TF.attribute _elastic_load_balancer
        , TF.assign "install_updates_on_boot" <$> TF.attribute _install_updates_on_boot
        , TF.assign "instance_shutdown_timeout" <$> TF.attribute _instance_shutdown_timeout
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "stack_id" <$> TF.attribute _stack_id
        , TF.assign "system_packages" <$> TF.attribute _system_packages
        , TF.assign "use_ebs_optimized_instances" <$> TF.attribute _use_ebs_optimized_instances
        ]

instance HasAutoAssignElasticIps (OpsworksStaticWebLayerResource s) Text where
    type HasAutoAssignElasticIpsThread (OpsworksStaticWebLayerResource s) Text = s

    autoAssignElasticIps =
        lens (_auto_assign_elastic_ips :: OpsworksStaticWebLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_assign_elastic_ips = a } :: OpsworksStaticWebLayerResource s)

instance HasAutoAssignPublicIps (OpsworksStaticWebLayerResource s) Text where
    type HasAutoAssignPublicIpsThread (OpsworksStaticWebLayerResource s) Text = s

    autoAssignPublicIps =
        lens (_auto_assign_public_ips :: OpsworksStaticWebLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_assign_public_ips = a } :: OpsworksStaticWebLayerResource s)

instance HasAutoHealing (OpsworksStaticWebLayerResource s) Text where
    type HasAutoHealingThread (OpsworksStaticWebLayerResource s) Text = s

    autoHealing =
        lens (_auto_healing :: OpsworksStaticWebLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_healing = a } :: OpsworksStaticWebLayerResource s)

instance HasCustomInstanceProfileArn (OpsworksStaticWebLayerResource s) Text where
    type HasCustomInstanceProfileArnThread (OpsworksStaticWebLayerResource s) Text = s

    customInstanceProfileArn =
        lens (_custom_instance_profile_arn :: OpsworksStaticWebLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _custom_instance_profile_arn = a } :: OpsworksStaticWebLayerResource s)

instance HasCustomSecurityGroupIds (OpsworksStaticWebLayerResource s) Text where
    type HasCustomSecurityGroupIdsThread (OpsworksStaticWebLayerResource s) Text = s

    customSecurityGroupIds =
        lens (_custom_security_group_ids :: OpsworksStaticWebLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _custom_security_group_ids = a } :: OpsworksStaticWebLayerResource s)

instance HasDrainElbOnShutdown (OpsworksStaticWebLayerResource s) Text where
    type HasDrainElbOnShutdownThread (OpsworksStaticWebLayerResource s) Text = s

    drainElbOnShutdown =
        lens (_drain_elb_on_shutdown :: OpsworksStaticWebLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _drain_elb_on_shutdown = a } :: OpsworksStaticWebLayerResource s)

instance HasEbsVolume (OpsworksStaticWebLayerResource s) Text where
    type HasEbsVolumeThread (OpsworksStaticWebLayerResource s) Text = s

    ebsVolume =
        lens (_ebs_volume :: OpsworksStaticWebLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _ebs_volume = a } :: OpsworksStaticWebLayerResource s)

instance HasElasticLoadBalancer (OpsworksStaticWebLayerResource s) Text where
    type HasElasticLoadBalancerThread (OpsworksStaticWebLayerResource s) Text = s

    elasticLoadBalancer =
        lens (_elastic_load_balancer :: OpsworksStaticWebLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _elastic_load_balancer = a } :: OpsworksStaticWebLayerResource s)

instance HasInstallUpdatesOnBoot (OpsworksStaticWebLayerResource s) Text where
    type HasInstallUpdatesOnBootThread (OpsworksStaticWebLayerResource s) Text = s

    installUpdatesOnBoot =
        lens (_install_updates_on_boot :: OpsworksStaticWebLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _install_updates_on_boot = a } :: OpsworksStaticWebLayerResource s)

instance HasInstanceShutdownTimeout (OpsworksStaticWebLayerResource s) Text where
    type HasInstanceShutdownTimeoutThread (OpsworksStaticWebLayerResource s) Text = s

    instanceShutdownTimeout =
        lens (_instance_shutdown_timeout :: OpsworksStaticWebLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _instance_shutdown_timeout = a } :: OpsworksStaticWebLayerResource s)

instance HasName (OpsworksStaticWebLayerResource s) Text where
    type HasNameThread (OpsworksStaticWebLayerResource s) Text = s

    name =
        lens (_name :: OpsworksStaticWebLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: OpsworksStaticWebLayerResource s)

instance HasStackId (OpsworksStaticWebLayerResource s) Text where
    type HasStackIdThread (OpsworksStaticWebLayerResource s) Text = s

    stackId =
        lens (_stack_id :: OpsworksStaticWebLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _stack_id = a } :: OpsworksStaticWebLayerResource s)

instance HasSystemPackages (OpsworksStaticWebLayerResource s) Text where
    type HasSystemPackagesThread (OpsworksStaticWebLayerResource s) Text = s

    systemPackages =
        lens (_system_packages :: OpsworksStaticWebLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _system_packages = a } :: OpsworksStaticWebLayerResource s)

instance HasUseEbsOptimizedInstances (OpsworksStaticWebLayerResource s) Text where
    type HasUseEbsOptimizedInstancesThread (OpsworksStaticWebLayerResource s) Text = s

    useEbsOptimizedInstances =
        lens (_use_ebs_optimized_instances :: OpsworksStaticWebLayerResource s -> TF.Attribute s Text)
            (\s a -> s { _use_ebs_optimized_instances = a } :: OpsworksStaticWebLayerResource s)

instance HasComputedId (OpsworksStaticWebLayerResource s) Text

opsworksStaticWebLayerResource :: TF.Resource TF.AWS (OpsworksStaticWebLayerResource s)
opsworksStaticWebLayerResource =
    TF.newResource "aws_opsworks_static_web_layer" $
        OpsworksStaticWebLayerResource {
              _auto_assign_elastic_ips = TF.Nil
            , _auto_assign_public_ips = TF.Nil
            , _auto_healing = TF.Nil
            , _custom_instance_profile_arn = TF.Nil
            , _custom_security_group_ids = TF.Nil
            , _drain_elb_on_shutdown = TF.Nil
            , _ebs_volume = TF.Nil
            , _elastic_load_balancer = TF.Nil
            , _install_updates_on_boot = TF.Nil
            , _instance_shutdown_timeout = TF.Nil
            , _name = TF.Nil
            , _stack_id = TF.Nil
            , _system_packages = TF.Nil
            , _use_ebs_optimized_instances = TF.Nil
            }

{- | The @aws_opsworks_user_profile@ AWS resource.

Provides an OpsWorks User Profile resource.
-}
data OpsworksUserProfileResource s = OpsworksUserProfileResource {
      _allow_self_management :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether users can specify their own SSH public key through the My Settings page -}
    , _ssh_public_key :: !(TF.Attribute s Text)
    {- ^ (Optional) The users public key -}
    , _ssh_username :: !(TF.Attribute s Text)
    {- ^ (Required) The ssh username, with witch this user wants to log in -}
    , _user_arn :: !(TF.Attribute s Text)
    {- ^ (Required) The user's IAM ARN -}
    } deriving (Show, Eq)

instance TF.ToHCL (OpsworksUserProfileResource s) where
    toHCL OpsworksUserProfileResource{..} = TF.block $ catMaybes
        [ TF.assign "allow_self_management" <$> TF.attribute _allow_self_management
        , TF.assign "ssh_public_key" <$> TF.attribute _ssh_public_key
        , TF.assign "ssh_username" <$> TF.attribute _ssh_username
        , TF.assign "user_arn" <$> TF.attribute _user_arn
        ]

instance HasAllowSelfManagement (OpsworksUserProfileResource s) Text where
    type HasAllowSelfManagementThread (OpsworksUserProfileResource s) Text = s

    allowSelfManagement =
        lens (_allow_self_management :: OpsworksUserProfileResource s -> TF.Attribute s Text)
            (\s a -> s { _allow_self_management = a } :: OpsworksUserProfileResource s)

instance HasSshPublicKey (OpsworksUserProfileResource s) Text where
    type HasSshPublicKeyThread (OpsworksUserProfileResource s) Text = s

    sshPublicKey =
        lens (_ssh_public_key :: OpsworksUserProfileResource s -> TF.Attribute s Text)
            (\s a -> s { _ssh_public_key = a } :: OpsworksUserProfileResource s)

instance HasSshUsername (OpsworksUserProfileResource s) Text where
    type HasSshUsernameThread (OpsworksUserProfileResource s) Text = s

    sshUsername =
        lens (_ssh_username :: OpsworksUserProfileResource s -> TF.Attribute s Text)
            (\s a -> s { _ssh_username = a } :: OpsworksUserProfileResource s)

instance HasUserArn (OpsworksUserProfileResource s) Text where
    type HasUserArnThread (OpsworksUserProfileResource s) Text = s

    userArn =
        lens (_user_arn :: OpsworksUserProfileResource s -> TF.Attribute s Text)
            (\s a -> s { _user_arn = a } :: OpsworksUserProfileResource s)

instance HasComputedId (OpsworksUserProfileResource s) Text

opsworksUserProfileResource :: TF.Resource TF.AWS (OpsworksUserProfileResource s)
opsworksUserProfileResource =
    TF.newResource "aws_opsworks_user_profile" $
        OpsworksUserProfileResource {
              _allow_self_management = TF.Nil
            , _ssh_public_key = TF.Nil
            , _ssh_username = TF.Nil
            , _user_arn = TF.Nil
            }

{- | The @aws_placement_group@ AWS resource.

Provides an EC2 placement group. Read more about placement groups in
<https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html>
.
-}
data PlacementGroupResource s = PlacementGroupResource {
      _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the placement group. -}
    , _strategy :: !(TF.Attribute s Text)
    {- ^ (Required) The placement strategy. -}
    } deriving (Show, Eq)

instance TF.ToHCL (PlacementGroupResource s) where
    toHCL PlacementGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.attribute _name
        , TF.assign "strategy" <$> TF.attribute _strategy
        ]

instance HasName (PlacementGroupResource s) Text where
    type HasNameThread (PlacementGroupResource s) Text = s

    name =
        lens (_name :: PlacementGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: PlacementGroupResource s)

instance HasStrategy (PlacementGroupResource s) Text where
    type HasStrategyThread (PlacementGroupResource s) Text = s

    strategy =
        lens (_strategy :: PlacementGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _strategy = a } :: PlacementGroupResource s)

instance HasComputedId (PlacementGroupResource s) Text

placementGroupResource :: TF.Resource TF.AWS (PlacementGroupResource s)
placementGroupResource =
    TF.newResource "aws_placement_group" $
        PlacementGroupResource {
              _name = TF.Nil
            , _strategy = TF.Nil
            }

{- | The @aws_proxy_protocol_policy@ AWS resource.

Provides a proxy protocol policy, which allows an ELB to carry a client
connection information to a backend.
-}
data ProxyProtocolPolicyResource s = ProxyProtocolPolicyResource {
      _instance_ports :: !(TF.Attribute s Text)
    {- ^ (Required) List of instance ports to which the policy should be applied. This can be specified if the protocol is SSL or TCP. -}
    , _load_balancer :: !(TF.Attribute s Text)
    {- ^ (Required) The load balancer to which the policy should be attached. -}
    } deriving (Show, Eq)

instance TF.ToHCL (ProxyProtocolPolicyResource s) where
    toHCL ProxyProtocolPolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "instance_ports" <$> TF.attribute _instance_ports
        , TF.assign "load_balancer" <$> TF.attribute _load_balancer
        ]

instance HasInstancePorts (ProxyProtocolPolicyResource s) Text where
    type HasInstancePortsThread (ProxyProtocolPolicyResource s) Text = s

    instancePorts =
        lens (_instance_ports :: ProxyProtocolPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _instance_ports = a } :: ProxyProtocolPolicyResource s)

instance HasLoadBalancer (ProxyProtocolPolicyResource s) Text where
    type HasLoadBalancerThread (ProxyProtocolPolicyResource s) Text = s

    loadBalancer =
        lens (_load_balancer :: ProxyProtocolPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _load_balancer = a } :: ProxyProtocolPolicyResource s)

instance HasComputedId (ProxyProtocolPolicyResource s) Text

instance HasComputedLoadBalancer (ProxyProtocolPolicyResource s) Text

proxyProtocolPolicyResource :: TF.Resource TF.AWS (ProxyProtocolPolicyResource s)
proxyProtocolPolicyResource =
    TF.newResource "aws_proxy_protocol_policy" $
        ProxyProtocolPolicyResource {
              _instance_ports = TF.Nil
            , _load_balancer = TF.Nil
            }

{- | The @aws_rds_cluster_instance@ AWS resource.

Provides an RDS Cluster Resource Instance. A Cluster Instance Resource
defines attributes that are specific to a single instance in a
</docs/providers/aws/r/rds_cluster.html> , specifically running Amazon
Aurora. Unlike other RDS resources that support replication, with Amazon
Aurora you do not designate a primary and subsequent replicas. Instead, you
simply add RDS Instances and Aurora manages the replication. You can use the
</docs/configuration/resources.html#count> meta-parameter to make multiple
instances and join them all to the same RDS Cluster, or you may specify
different Cluster Instance resources with various @instance_class@ sizes.
For more information on Amazon Aurora, see
<https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html> in
the Amazon RDS User Guide.
-}
data RdsClusterInstanceResource s = RdsClusterInstanceResource {
      _apply_immediately :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies whether any database modifications are applied immediately, or during the next maintenance window. Default is @false@ . -}
    , _auto_minor_version_upgrade :: !(TF.Attribute s Text)
    {- ^ (Optional) Indicates that minor engine upgrades will be applied automatically to the DB instance during the maintenance window. Default @true@ . -}
    , _cluster_identifier :: !(TF.Attribute s Text)
    {- ^ (Required) The identifier of the </docs/providers/aws/r/rds_cluster.html> in which to launch this instance. -}
    , _db_parameter_group_name :: !(TF.Attribute s Text)
    {- ^ (Optional) The name of the DB parameter group to associate with this instance. -}
    , _db_subnet_group_name :: !(TF.Attribute s Text)
    {- ^ (Required if @publicly_accessible = false@ , Optional otherwise) A DB subnet group to associate with this DB instance. NOTE: This must match the @db_subnet_group_name@ of the attached </docs/providers/aws/r/rds_cluster.html> . -}
    , _engine :: !(TF.Attribute s Text)
    {- ^ (Optional) The name of the database engine to be used for the RDS instance. Defaults to @aurora@ . -}
    , _engine_version :: !(TF.Attribute s Text)
    {- ^ (Optional) The database engine version. -}
    , _identifier :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) The indentifier for the RDS instance, if omitted, Terraform will assign a random, unique identifier. -}
    , _identifier_prefix :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) Creates a unique identifier beginning with the specified prefix. Conflicts with @identifer@ . -}
    , _instance_class :: !(TF.Attribute s Text)
    {- ^ (Required) The instance class to use. For details on CPU and memory, see <https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Aurora.Managing.html> . Aurora currently supports the below instance classes. -}
    , _monitoring_interval :: !(TF.Attribute s Text)
    {- ^ (Optional) The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0. Valid Values: 0, 1, 5, 10, 15, 30, 60. -}
    , _monitoring_role_arn :: !(TF.Attribute s Text)
    {- ^ (Optional) The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to CloudWatch Logs. You can find more information on the <http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html> what IAM permissions are needed to allow Enhanced Monitoring for RDS Instances. -}
    , _performance_insights_enabled :: !(TF.Attribute s TF.Bool)
    {- ^ (Optional) Specifies whether Performance Insights is enabled or not. -}
    , _performance_insights_kms_key_id :: !(TF.Attribute s Text)
    {- ^ (Optional) The ARN for the KMS key to encrypt Performance Insights data. When specifying @performance_insights_kms_key_id@ , @performance_insights_enabled@ needs to be set to true. -}
    , _preferred_backup_window :: !(TF.Attribute s Text)
    {- ^ (Optional) The daily time range during which automated backups are created if automated backups are enabled. Eg: "04:00-09:00" -}
    , _preferred_maintenance_window :: !(TF.Attribute s Text)
    {- ^ (Optional) The window to perform maintenance in. Syntax: "ddd:hh24:mi-ddd:hh24:mi". Eg: "Mon:00:00-Mon:03:00". -}
    , _promotion_tier :: !(TF.Attribute s Text)
    {- ^ (Optional) Default 0. Failover Priority setting on instance level. The reader who has lower tier has higher priority to get promoter to writer. -}
    , _publicly_accessible :: !(TF.Attribute s Text)
    {- ^ (Optional) Bool to control if instance is publicly accessible. Default @false@ . See the documentation on <https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBInstance.html> for more details on controlling this property. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the instance. -}
    } deriving (Show, Eq)

instance TF.ToHCL (RdsClusterInstanceResource s) where
    toHCL RdsClusterInstanceResource{..} = TF.block $ catMaybes
        [ TF.assign "apply_immediately" <$> TF.attribute _apply_immediately
        , TF.assign "auto_minor_version_upgrade" <$> TF.attribute _auto_minor_version_upgrade
        , TF.assign "cluster_identifier" <$> TF.attribute _cluster_identifier
        , TF.assign "db_parameter_group_name" <$> TF.attribute _db_parameter_group_name
        , TF.assign "db_subnet_group_name" <$> TF.attribute _db_subnet_group_name
        , TF.assign "engine" <$> TF.attribute _engine
        , TF.assign "engine_version" <$> TF.attribute _engine_version
        , TF.assign "identifier" <$> TF.attribute _identifier
        , TF.assign "identifier_prefix" <$> TF.attribute _identifier_prefix
        , TF.assign "instance_class" <$> TF.attribute _instance_class
        , TF.assign "monitoring_interval" <$> TF.attribute _monitoring_interval
        , TF.assign "monitoring_role_arn" <$> TF.attribute _monitoring_role_arn
        , TF.assign "performance_insights_enabled" <$> TF.attribute _performance_insights_enabled
        , TF.assign "performance_insights_kms_key_id" <$> TF.attribute _performance_insights_kms_key_id
        , TF.assign "preferred_backup_window" <$> TF.attribute _preferred_backup_window
        , TF.assign "preferred_maintenance_window" <$> TF.attribute _preferred_maintenance_window
        , TF.assign "promotion_tier" <$> TF.attribute _promotion_tier
        , TF.assign "publicly_accessible" <$> TF.attribute _publicly_accessible
        , TF.assign "tags" <$> TF.attribute _tags
        ]

instance HasApplyImmediately (RdsClusterInstanceResource s) Text where
    type HasApplyImmediatelyThread (RdsClusterInstanceResource s) Text = s

    applyImmediately =
        lens (_apply_immediately :: RdsClusterInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _apply_immediately = a } :: RdsClusterInstanceResource s)

instance HasAutoMinorVersionUpgrade (RdsClusterInstanceResource s) Text where
    type HasAutoMinorVersionUpgradeThread (RdsClusterInstanceResource s) Text = s

    autoMinorVersionUpgrade =
        lens (_auto_minor_version_upgrade :: RdsClusterInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_minor_version_upgrade = a } :: RdsClusterInstanceResource s)

instance HasClusterIdentifier (RdsClusterInstanceResource s) Text where
    type HasClusterIdentifierThread (RdsClusterInstanceResource s) Text = s

    clusterIdentifier =
        lens (_cluster_identifier :: RdsClusterInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _cluster_identifier = a } :: RdsClusterInstanceResource s)

instance HasDbParameterGroupName (RdsClusterInstanceResource s) Text where
    type HasDbParameterGroupNameThread (RdsClusterInstanceResource s) Text = s

    dbParameterGroupName =
        lens (_db_parameter_group_name :: RdsClusterInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _db_parameter_group_name = a } :: RdsClusterInstanceResource s)

instance HasDbSubnetGroupName (RdsClusterInstanceResource s) Text where
    type HasDbSubnetGroupNameThread (RdsClusterInstanceResource s) Text = s

    dbSubnetGroupName =
        lens (_db_subnet_group_name :: RdsClusterInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _db_subnet_group_name = a } :: RdsClusterInstanceResource s)

instance HasEngine (RdsClusterInstanceResource s) Text where
    type HasEngineThread (RdsClusterInstanceResource s) Text = s

    engine =
        lens (_engine :: RdsClusterInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _engine = a } :: RdsClusterInstanceResource s)

instance HasEngineVersion (RdsClusterInstanceResource s) Text where
    type HasEngineVersionThread (RdsClusterInstanceResource s) Text = s

    engineVersion =
        lens (_engine_version :: RdsClusterInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _engine_version = a } :: RdsClusterInstanceResource s)

instance HasIdentifier (RdsClusterInstanceResource s) Text where
    type HasIdentifierThread (RdsClusterInstanceResource s) Text = s

    identifier =
        lens (_identifier :: RdsClusterInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _identifier = a } :: RdsClusterInstanceResource s)

instance HasIdentifierPrefix (RdsClusterInstanceResource s) Text where
    type HasIdentifierPrefixThread (RdsClusterInstanceResource s) Text = s

    identifierPrefix =
        lens (_identifier_prefix :: RdsClusterInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _identifier_prefix = a } :: RdsClusterInstanceResource s)

instance HasInstanceClass (RdsClusterInstanceResource s) Text where
    type HasInstanceClassThread (RdsClusterInstanceResource s) Text = s

    instanceClass =
        lens (_instance_class :: RdsClusterInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _instance_class = a } :: RdsClusterInstanceResource s)

instance HasMonitoringInterval (RdsClusterInstanceResource s) Text where
    type HasMonitoringIntervalThread (RdsClusterInstanceResource s) Text = s

    monitoringInterval =
        lens (_monitoring_interval :: RdsClusterInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _monitoring_interval = a } :: RdsClusterInstanceResource s)

instance HasMonitoringRoleArn (RdsClusterInstanceResource s) Text where
    type HasMonitoringRoleArnThread (RdsClusterInstanceResource s) Text = s

    monitoringRoleArn =
        lens (_monitoring_role_arn :: RdsClusterInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _monitoring_role_arn = a } :: RdsClusterInstanceResource s)

instance HasPerformanceInsightsEnabled (RdsClusterInstanceResource s) TF.Bool where
    type HasPerformanceInsightsEnabledThread (RdsClusterInstanceResource s) TF.Bool = s

    performanceInsightsEnabled =
        lens (_performance_insights_enabled :: RdsClusterInstanceResource s -> TF.Attribute s TF.Bool)
            (\s a -> s { _performance_insights_enabled = a } :: RdsClusterInstanceResource s)

instance HasPerformanceInsightsKmsKeyId (RdsClusterInstanceResource s) Text where
    type HasPerformanceInsightsKmsKeyIdThread (RdsClusterInstanceResource s) Text = s

    performanceInsightsKmsKeyId =
        lens (_performance_insights_kms_key_id :: RdsClusterInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _performance_insights_kms_key_id = a } :: RdsClusterInstanceResource s)

instance HasPreferredBackupWindow (RdsClusterInstanceResource s) Text where
    type HasPreferredBackupWindowThread (RdsClusterInstanceResource s) Text = s

    preferredBackupWindow =
        lens (_preferred_backup_window :: RdsClusterInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _preferred_backup_window = a } :: RdsClusterInstanceResource s)

instance HasPreferredMaintenanceWindow (RdsClusterInstanceResource s) Text where
    type HasPreferredMaintenanceWindowThread (RdsClusterInstanceResource s) Text = s

    preferredMaintenanceWindow =
        lens (_preferred_maintenance_window :: RdsClusterInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _preferred_maintenance_window = a } :: RdsClusterInstanceResource s)

instance HasPromotionTier (RdsClusterInstanceResource s) Text where
    type HasPromotionTierThread (RdsClusterInstanceResource s) Text = s

    promotionTier =
        lens (_promotion_tier :: RdsClusterInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _promotion_tier = a } :: RdsClusterInstanceResource s)

instance HasPubliclyAccessible (RdsClusterInstanceResource s) Text where
    type HasPubliclyAccessibleThread (RdsClusterInstanceResource s) Text = s

    publiclyAccessible =
        lens (_publicly_accessible :: RdsClusterInstanceResource s -> TF.Attribute s Text)
            (\s a -> s { _publicly_accessible = a } :: RdsClusterInstanceResource s)

instance HasTags (RdsClusterInstanceResource s) TF.Tags where
    type HasTagsThread (RdsClusterInstanceResource s) TF.Tags = s

    tags =
        lens (_tags :: RdsClusterInstanceResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: RdsClusterInstanceResource s)

instance HasComputedAllocatedStorage (RdsClusterInstanceResource s) Text

instance HasComputedAvailabilityZone (RdsClusterInstanceResource s) TF.Zone

instance HasComputedClusterIdentifier (RdsClusterInstanceResource s) Text

instance HasComputedDatabaseName (RdsClusterInstanceResource s) Text

instance HasComputedDbiResourceId (RdsClusterInstanceResource s) Text

instance HasComputedEndpoint (RdsClusterInstanceResource s) Text

instance HasComputedEngine (RdsClusterInstanceResource s) Text

instance HasComputedEngineVersion (RdsClusterInstanceResource s) Text

instance HasComputedId (RdsClusterInstanceResource s) Text

instance HasComputedIdentifier (RdsClusterInstanceResource s) Text

instance HasComputedKmsKeyId (RdsClusterInstanceResource s) Text

instance HasComputedPerformanceInsightsEnabled (RdsClusterInstanceResource s) TF.Bool

instance HasComputedPerformanceInsightsKmsKeyId (RdsClusterInstanceResource s) Text

instance HasComputedPort (RdsClusterInstanceResource s) Text

instance HasComputedStatus (RdsClusterInstanceResource s) Text

instance HasComputedStorageEncrypted (RdsClusterInstanceResource s) Text

instance HasComputedWriter (RdsClusterInstanceResource s) Text

rdsClusterInstanceResource :: TF.Resource TF.AWS (RdsClusterInstanceResource s)
rdsClusterInstanceResource =
    TF.newResource "aws_rds_cluster_instance" $
        RdsClusterInstanceResource {
              _apply_immediately = TF.Nil
            , _auto_minor_version_upgrade = TF.Nil
            , _cluster_identifier = TF.Nil
            , _db_parameter_group_name = TF.Nil
            , _db_subnet_group_name = TF.Nil
            , _engine = TF.Nil
            , _engine_version = TF.Nil
            , _identifier = TF.Nil
            , _identifier_prefix = TF.Nil
            , _instance_class = TF.Nil
            , _monitoring_interval = TF.Nil
            , _monitoring_role_arn = TF.Nil
            , _performance_insights_enabled = TF.Nil
            , _performance_insights_kms_key_id = TF.Nil
            , _preferred_backup_window = TF.Nil
            , _preferred_maintenance_window = TF.Nil
            , _promotion_tier = TF.Nil
            , _publicly_accessible = TF.Nil
            , _tags = TF.Nil
            }

{- | The @aws_rds_cluster_parameter_group@ AWS resource.

Provides an RDS DB cluster parameter group resource.
-}
data RdsClusterParameterGroupResource s = RdsClusterParameterGroupResource {
      _description :: !(TF.Attribute s Text)
    {- ^ (Optional) The description of the DB cluster parameter group. Defaults to "Managed by Terraform". -}
    , _family' :: !(TF.Attribute s Text)
    {- ^ (Required) The family of the DB cluster parameter group. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) The name of the DB cluster parameter group. If omitted, Terraform will assign a random, unique name. -}
    , _name_prefix :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) Creates a unique name beginning with the specified prefix. Conflicts with @name@ . -}
    , _parameter :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of DB parameters to apply. Note that parameters may differ from a family to an other. Full list of all parameters can be discovered via <https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-cluster-parameters.html> after initial creation of the group. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    } deriving (Show, Eq)

instance TF.ToHCL (RdsClusterParameterGroupResource s) where
    toHCL RdsClusterParameterGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.attribute _description
        , TF.assign "family" <$> TF.attribute _family'
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "name_prefix" <$> TF.attribute _name_prefix
        , TF.assign "parameter" <$> TF.attribute _parameter
        , TF.assign "tags" <$> TF.attribute _tags
        ]

instance HasDescription (RdsClusterParameterGroupResource s) Text where
    type HasDescriptionThread (RdsClusterParameterGroupResource s) Text = s

    description =
        lens (_description :: RdsClusterParameterGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: RdsClusterParameterGroupResource s)

instance HasFamily' (RdsClusterParameterGroupResource s) Text where
    type HasFamily'Thread (RdsClusterParameterGroupResource s) Text = s

    family' =
        lens (_family' :: RdsClusterParameterGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _family' = a } :: RdsClusterParameterGroupResource s)

instance HasName (RdsClusterParameterGroupResource s) Text where
    type HasNameThread (RdsClusterParameterGroupResource s) Text = s

    name =
        lens (_name :: RdsClusterParameterGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: RdsClusterParameterGroupResource s)

instance HasNamePrefix (RdsClusterParameterGroupResource s) Text where
    type HasNamePrefixThread (RdsClusterParameterGroupResource s) Text = s

    namePrefix =
        lens (_name_prefix :: RdsClusterParameterGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _name_prefix = a } :: RdsClusterParameterGroupResource s)

instance HasParameter (RdsClusterParameterGroupResource s) Text where
    type HasParameterThread (RdsClusterParameterGroupResource s) Text = s

    parameter =
        lens (_parameter :: RdsClusterParameterGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _parameter = a } :: RdsClusterParameterGroupResource s)

instance HasTags (RdsClusterParameterGroupResource s) TF.Tags where
    type HasTagsThread (RdsClusterParameterGroupResource s) TF.Tags = s

    tags =
        lens (_tags :: RdsClusterParameterGroupResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: RdsClusterParameterGroupResource s)

instance HasComputedArn (RdsClusterParameterGroupResource s) Text

instance HasComputedId (RdsClusterParameterGroupResource s) Text

rdsClusterParameterGroupResource :: TF.Resource TF.AWS (RdsClusterParameterGroupResource s)
rdsClusterParameterGroupResource =
    TF.newResource "aws_rds_cluster_parameter_group" $
        RdsClusterParameterGroupResource {
              _description = TF.Nil
            , _family' = TF.Nil
            , _name = TF.Nil
            , _name_prefix = TF.Nil
            , _parameter = TF.Nil
            , _tags = TF.Nil
            }

{- | The @aws_rds_cluster@ AWS resource.

Provides an RDS Cluster Resource. A Cluster Resource defines attributes that
are applied to the entire cluster of
</docs/providers/aws/r/rds_cluster_instance.html> . Use the RDS Cluster
resource and RDS Cluster Instances to create and use Amazon Aurora, a
MySQL-compatible database engine. For more information on Amazon Aurora, see
<https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html> in
the Amazon RDS User Guide. Changes to a RDS Cluster can occur when you
manually change a parameter, such as @port@ , and are reflected in the next
maintenance window. Because of this, Terraform may report a difference in
its planning phase because a modification has not yet taken place. You can
use the @apply_immediately@ flag to instruct the service to apply the change
immediately (see documentation below). ~> Note: using @apply_immediately@
can result in a brief downtime as the server reboots. See the AWS Docs on
<https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html>
for more information. ~> Note: All arguments including the username and
password will be stored in the raw state as plain-text.
</docs/state/sensitive-data.html> .
-}
data RdsClusterResource s = RdsClusterResource {
      _apply_immediately :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies whether any cluster modifications are applied immediately, or during the next maintenance window. Default is @false@ . See <https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html> -}
    , _availability_zones :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of EC2 Availability Zones that instances in the DB cluster can be created in -}
    , _backup_retention_period :: !(TF.Attribute s Text)
    {- ^ (Optional) The days to retain backups for. Default 1 -}
    , _cluster_identifier :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resources) The cluster identifier. If omitted, Terraform will assign a random, unique identifier. -}
    , _cluster_identifier_prefix :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) Creates a unique cluster identifier beginning with the specified prefix. Conflicts with @cluster_identifer@ . -}
    , _database_name :: !(TF.Attribute s Text)
    {- ^ (Optional) Name for an automatically created database on cluster creation. There are different naming restrictions per database engine: <http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Limits.html#RDS_Limits.Constraints> -}
    , _db_cluster_parameter_group_name :: !(TF.Attribute s Text)
    {- ^ (Optional) A cluster parameter group to associate with the cluster. -}
    , _db_subnet_group_name :: !(TF.Attribute s Text)
    {- ^ (Optional) A DB subnet group to associate with this DB instance. NOTE: This must match the @db_subnet_group_name@ specified on every </docs/providers/aws/r/rds_cluster_instance.html> in the cluster. -}
    , _engine :: !(TF.Attribute s Text)
    {- ^ (Optional) The name of the database engine to be used for this DB cluster. Defaults to @aurora@ . -}
    , _engine_version :: !(TF.Attribute s Text)
    {- ^ (Optional) The database engine version. -}
    , _final_snapshot_identifier :: !(TF.Attribute s Text)
    {- ^ (Optional) The name of your final DB snapshot when this DB cluster is deleted. If omitted, no final snapshot will be made. -}
    , _iam_database_authentication_enabled :: !(TF.Attribute s TF.Bool)
    {- ^ (Optional) Specifies whether or mappings of AWS Identity and Access Management (IAM) accounts to database accounts is enabled. -}
    , _iam_roles :: !(TF.Attribute s Text)
    {- ^ (Optional) A List of ARNs for the IAM roles to associate to the RDS Cluster. -}
    , _kms_key_id :: !(TF.Attribute s Text)
    {- ^ (Optional) The ARN for the KMS encryption key. When specifying @kms_key_id@ , @storage_encrypted@ needs to be set to true. -}
    , _master_password :: !(TF.Attribute s Text)
    {- ^ (Required unless a @snapshot_identifier@ is provided) Password for the master DB user. Note that this may show up in logs, and it will be stored in the state file. Please refer to the <http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Limits.html#RDS_Limits.Constraints> -}
    , _master_username :: !(TF.Attribute s Text)
    {- ^ (Required unless a @snapshot_identifier@ is provided) Username for the master DB user. Please refer to the <http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Limits.html#RDS_Limits.Constraints> -}
    , _port :: !(TF.Attribute s Text)
    {- ^ (Optional) The port on which the DB accepts connections -}
    , _preferred_backup_window :: !(TF.Attribute s Text)
    {- ^ (Optional) The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter.Time in UTC Default: A 30-minute window selected at random from an 8-hour block of time per region. e.g. 04:00-09:00 -}
    , _preferred_maintenance_window :: !(TF.Attribute s Text)
    {- ^ (Optional) The weekly time range during which system maintenance can occur, in (UTC) e.g. wed:04:00-wed:04:30 -}
    , _skip_final_snapshot :: !(TF.Attribute s Text)
    {- ^ (Optional) Determines whether a final DB snapshot is created before the DB cluster is deleted. If true is specified, no DB snapshot is created. If false is specified, a DB snapshot is created before the DB cluster is deleted, using the value from @final_snapshot_identifier@ . Default is @false@ . -}
    , _snapshot_identifier :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies whether or not to create this cluster from a snapshot. This correlates to the snapshot ID you'd find in the RDS console, e.g: rds:production-2015-06-26-06-05. -}
    , _storage_encrypted :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies whether the DB cluster is encrypted. The default is @false@ if not specified. -}
    , _vpc_security_group_ids :: !(TF.Attribute s Text)
    {- ^ (Optional) List of VPC security groups to associate with the Cluster -}
    } deriving (Show, Eq)

instance TF.ToHCL (RdsClusterResource s) where
    toHCL RdsClusterResource{..} = TF.block $ catMaybes
        [ TF.assign "apply_immediately" <$> TF.attribute _apply_immediately
        , TF.assign "availability_zones" <$> TF.attribute _availability_zones
        , TF.assign "backup_retention_period" <$> TF.attribute _backup_retention_period
        , TF.assign "cluster_identifier" <$> TF.attribute _cluster_identifier
        , TF.assign "cluster_identifier_prefix" <$> TF.attribute _cluster_identifier_prefix
        , TF.assign "database_name" <$> TF.attribute _database_name
        , TF.assign "db_cluster_parameter_group_name" <$> TF.attribute _db_cluster_parameter_group_name
        , TF.assign "db_subnet_group_name" <$> TF.attribute _db_subnet_group_name
        , TF.assign "engine" <$> TF.attribute _engine
        , TF.assign "engine_version" <$> TF.attribute _engine_version
        , TF.assign "final_snapshot_identifier" <$> TF.attribute _final_snapshot_identifier
        , TF.assign "iam_database_authentication_enabled" <$> TF.attribute _iam_database_authentication_enabled
        , TF.assign "iam_roles" <$> TF.attribute _iam_roles
        , TF.assign "kms_key_id" <$> TF.attribute _kms_key_id
        , TF.assign "master_password" <$> TF.attribute _master_password
        , TF.assign "master_username" <$> TF.attribute _master_username
        , TF.assign "port" <$> TF.attribute _port
        , TF.assign "preferred_backup_window" <$> TF.attribute _preferred_backup_window
        , TF.assign "preferred_maintenance_window" <$> TF.attribute _preferred_maintenance_window
        , TF.assign "skip_final_snapshot" <$> TF.attribute _skip_final_snapshot
        , TF.assign "snapshot_identifier" <$> TF.attribute _snapshot_identifier
        , TF.assign "storage_encrypted" <$> TF.attribute _storage_encrypted
        , TF.assign "vpc_security_group_ids" <$> TF.attribute _vpc_security_group_ids
        ]

instance HasApplyImmediately (RdsClusterResource s) Text where
    type HasApplyImmediatelyThread (RdsClusterResource s) Text = s

    applyImmediately =
        lens (_apply_immediately :: RdsClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _apply_immediately = a } :: RdsClusterResource s)

instance HasAvailabilityZones (RdsClusterResource s) Text where
    type HasAvailabilityZonesThread (RdsClusterResource s) Text = s

    availabilityZones =
        lens (_availability_zones :: RdsClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _availability_zones = a } :: RdsClusterResource s)

instance HasBackupRetentionPeriod (RdsClusterResource s) Text where
    type HasBackupRetentionPeriodThread (RdsClusterResource s) Text = s

    backupRetentionPeriod =
        lens (_backup_retention_period :: RdsClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _backup_retention_period = a } :: RdsClusterResource s)

instance HasClusterIdentifier (RdsClusterResource s) Text where
    type HasClusterIdentifierThread (RdsClusterResource s) Text = s

    clusterIdentifier =
        lens (_cluster_identifier :: RdsClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _cluster_identifier = a } :: RdsClusterResource s)

instance HasClusterIdentifierPrefix (RdsClusterResource s) Text where
    type HasClusterIdentifierPrefixThread (RdsClusterResource s) Text = s

    clusterIdentifierPrefix =
        lens (_cluster_identifier_prefix :: RdsClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _cluster_identifier_prefix = a } :: RdsClusterResource s)

instance HasDatabaseName (RdsClusterResource s) Text where
    type HasDatabaseNameThread (RdsClusterResource s) Text = s

    databaseName =
        lens (_database_name :: RdsClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _database_name = a } :: RdsClusterResource s)

instance HasDbClusterParameterGroupName (RdsClusterResource s) Text where
    type HasDbClusterParameterGroupNameThread (RdsClusterResource s) Text = s

    dbClusterParameterGroupName =
        lens (_db_cluster_parameter_group_name :: RdsClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _db_cluster_parameter_group_name = a } :: RdsClusterResource s)

instance HasDbSubnetGroupName (RdsClusterResource s) Text where
    type HasDbSubnetGroupNameThread (RdsClusterResource s) Text = s

    dbSubnetGroupName =
        lens (_db_subnet_group_name :: RdsClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _db_subnet_group_name = a } :: RdsClusterResource s)

instance HasEngine (RdsClusterResource s) Text where
    type HasEngineThread (RdsClusterResource s) Text = s

    engine =
        lens (_engine :: RdsClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _engine = a } :: RdsClusterResource s)

instance HasEngineVersion (RdsClusterResource s) Text where
    type HasEngineVersionThread (RdsClusterResource s) Text = s

    engineVersion =
        lens (_engine_version :: RdsClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _engine_version = a } :: RdsClusterResource s)

instance HasFinalSnapshotIdentifier (RdsClusterResource s) Text where
    type HasFinalSnapshotIdentifierThread (RdsClusterResource s) Text = s

    finalSnapshotIdentifier =
        lens (_final_snapshot_identifier :: RdsClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _final_snapshot_identifier = a } :: RdsClusterResource s)

instance HasIamDatabaseAuthenticationEnabled (RdsClusterResource s) TF.Bool where
    type HasIamDatabaseAuthenticationEnabledThread (RdsClusterResource s) TF.Bool = s

    iamDatabaseAuthenticationEnabled =
        lens (_iam_database_authentication_enabled :: RdsClusterResource s -> TF.Attribute s TF.Bool)
            (\s a -> s { _iam_database_authentication_enabled = a } :: RdsClusterResource s)

instance HasIamRoles (RdsClusterResource s) Text where
    type HasIamRolesThread (RdsClusterResource s) Text = s

    iamRoles =
        lens (_iam_roles :: RdsClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _iam_roles = a } :: RdsClusterResource s)

instance HasKmsKeyId (RdsClusterResource s) Text where
    type HasKmsKeyIdThread (RdsClusterResource s) Text = s

    kmsKeyId =
        lens (_kms_key_id :: RdsClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _kms_key_id = a } :: RdsClusterResource s)

instance HasMasterPassword (RdsClusterResource s) Text where
    type HasMasterPasswordThread (RdsClusterResource s) Text = s

    masterPassword =
        lens (_master_password :: RdsClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _master_password = a } :: RdsClusterResource s)

instance HasMasterUsername (RdsClusterResource s) Text where
    type HasMasterUsernameThread (RdsClusterResource s) Text = s

    masterUsername =
        lens (_master_username :: RdsClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _master_username = a } :: RdsClusterResource s)

instance HasPort (RdsClusterResource s) Text where
    type HasPortThread (RdsClusterResource s) Text = s

    port =
        lens (_port :: RdsClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _port = a } :: RdsClusterResource s)

instance HasPreferredBackupWindow (RdsClusterResource s) Text where
    type HasPreferredBackupWindowThread (RdsClusterResource s) Text = s

    preferredBackupWindow =
        lens (_preferred_backup_window :: RdsClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _preferred_backup_window = a } :: RdsClusterResource s)

instance HasPreferredMaintenanceWindow (RdsClusterResource s) Text where
    type HasPreferredMaintenanceWindowThread (RdsClusterResource s) Text = s

    preferredMaintenanceWindow =
        lens (_preferred_maintenance_window :: RdsClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _preferred_maintenance_window = a } :: RdsClusterResource s)

instance HasSkipFinalSnapshot (RdsClusterResource s) Text where
    type HasSkipFinalSnapshotThread (RdsClusterResource s) Text = s

    skipFinalSnapshot =
        lens (_skip_final_snapshot :: RdsClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _skip_final_snapshot = a } :: RdsClusterResource s)

instance HasSnapshotIdentifier (RdsClusterResource s) Text where
    type HasSnapshotIdentifierThread (RdsClusterResource s) Text = s

    snapshotIdentifier =
        lens (_snapshot_identifier :: RdsClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _snapshot_identifier = a } :: RdsClusterResource s)

instance HasStorageEncrypted (RdsClusterResource s) Text where
    type HasStorageEncryptedThread (RdsClusterResource s) Text = s

    storageEncrypted =
        lens (_storage_encrypted :: RdsClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _storage_encrypted = a } :: RdsClusterResource s)

instance HasVpcSecurityGroupIds (RdsClusterResource s) Text where
    type HasVpcSecurityGroupIdsThread (RdsClusterResource s) Text = s

    vpcSecurityGroupIds =
        lens (_vpc_security_group_ids :: RdsClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _vpc_security_group_ids = a } :: RdsClusterResource s)

instance HasComputedAllocatedStorage (RdsClusterResource s) Text

instance HasComputedAvailabilityZones (RdsClusterResource s) Text

instance HasComputedBackupRetentionPeriod (RdsClusterResource s) Text

instance HasComputedClusterIdentifier (RdsClusterResource s) Text

instance HasComputedClusterMembers (RdsClusterResource s) Text

instance HasComputedClusterResourceId (RdsClusterResource s) Text

instance HasComputedDatabaseName (RdsClusterResource s) Text

instance HasComputedEndpoint (RdsClusterResource s) Text

instance HasComputedEngine (RdsClusterResource s) Text

instance HasComputedEngineVersion (RdsClusterResource s) Text

instance HasComputedId (RdsClusterResource s) Text

instance HasComputedMaintenanceWindow (RdsClusterResource s) Text

instance HasComputedMasterUsername (RdsClusterResource s) Text

instance HasComputedPort (RdsClusterResource s) Text

instance HasComputedPreferredBackupWindow (RdsClusterResource s) Text

instance HasComputedPreferredMaintenanceWindow (RdsClusterResource s) Text

instance HasComputedReaderEndpoint (RdsClusterResource s) Text

instance HasComputedReplicationSourceIdentifier (RdsClusterResource s) Text

instance HasComputedStatus (RdsClusterResource s) Text

instance HasComputedStorageEncrypted (RdsClusterResource s) Text

rdsClusterResource :: TF.Resource TF.AWS (RdsClusterResource s)
rdsClusterResource =
    TF.newResource "aws_rds_cluster" $
        RdsClusterResource {
              _apply_immediately = TF.Nil
            , _availability_zones = TF.Nil
            , _backup_retention_period = TF.Nil
            , _cluster_identifier = TF.Nil
            , _cluster_identifier_prefix = TF.Nil
            , _database_name = TF.Nil
            , _db_cluster_parameter_group_name = TF.Nil
            , _db_subnet_group_name = TF.Nil
            , _engine = TF.Nil
            , _engine_version = TF.Nil
            , _final_snapshot_identifier = TF.Nil
            , _iam_database_authentication_enabled = TF.Nil
            , _iam_roles = TF.Nil
            , _kms_key_id = TF.Nil
            , _master_password = TF.Nil
            , _master_username = TF.Nil
            , _port = TF.Nil
            , _preferred_backup_window = TF.Nil
            , _preferred_maintenance_window = TF.Nil
            , _skip_final_snapshot = TF.Nil
            , _snapshot_identifier = TF.Nil
            , _storage_encrypted = TF.Nil
            , _vpc_security_group_ids = TF.Nil
            }

{- | The @aws_redshift_cluster@ AWS resource.

Provides a Redshift Cluster Resource. ~> Note: All arguments including the
username and password will be stored in the raw state as plain-text.
</docs/state/sensitive-data.html> .
-}
data RedshiftClusterResource s = RedshiftClusterResource {
      _allow_version_upgrade :: !(TF.Attribute s Text)
    {- ^ (Optional) If true , major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster. Default is true -}
    , _automated_snapshot_retention_period :: !(TF.Attribute s Text)
    {- ^ (Optional) The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with create-cluster-snapshot. Default is 1. -}
    , _availability_zone :: !(TF.Attribute s TF.Zone)
    {- ^ (Optional) The EC2 Availability Zone (AZ) in which you want Amazon Redshift to provision the cluster. For example, if you have several EC2 instances running in a specific Availability Zone, then you might want the cluster to be provisioned in the same zone in order to decrease network latency. -}
    , _cluster_identifier :: !(TF.Attribute s Text)
    {- ^ (Required) The Cluster Identifier. Must be a lower case string. -}
    , _cluster_parameter_group_name :: !(TF.Attribute s Text)
    {- ^ (Optional) The name of the parameter group to be associated with this cluster. -}
    , _cluster_security_groups :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of security groups to be associated with this cluster. -}
    , _cluster_subnet_group_name :: !(TF.Attribute s Text)
    {- ^ (Optional) The name of a cluster subnet group to be associated with this cluster. If this parameter is not provided the resulting cluster will be deployed outside virtual private cloud (VPC). -}
    , _cluster_type :: !(TF.Attribute s Text)
    {- ^ (Optional) The cluster type to use. Either @single-node@ or @multi-node@ . -}
    , _cluster_version :: !(TF.Attribute s Text)
    {- ^ (Optional) The version of the Amazon Redshift engine software that you want to deploy on the cluster. The version selected runs on all the nodes in the cluster. -}
    , _database_name :: !(TF.Attribute s Text)
    {- ^ (Optional) The name of the first database to be created when the cluster is created. If you do not provide a name, Amazon Redshift will create a default database called @dev@ . -}
    , _elastic_ip :: !(TF.Attribute s Text)
    {- ^ (Optional) The Elastic IP (EIP) address for the cluster. -}
    , _encrypted :: !(TF.Attribute s Text)
    {- ^ (Optional) If true , the data in the cluster is encrypted at rest. -}
    , _enhanced_vpc_routing :: !(TF.Attribute s Text)
    {- ^ (Optional) If true , enhanced VPC routing is enabled. -}
    , _final_snapshot_identifier :: !(TF.Attribute s Text)
    {- ^ (Optional) The identifier of the final snapshot that is to be created immediately before deleting the cluster. If this parameter is provided, @skip_final_snapshot@ must be false. -}
    , _iam_roles :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of IAM Role ARNs to associate with the cluster. A Maximum of 10 can be associated to the cluster at any time. -}
    , _kms_key_id :: !(TF.Attribute s Text)
    {- ^ (Optional) The ARN for the KMS encryption key. When specifying @kms_key_id@ , @encrypted@ needs to be set to true. -}
    , _logging :: !(TF.Attribute s Text)
    {- ^ (Optional) Logging, documented below. -}
    , _master_password :: !(TF.Attribute s Text)
    {- ^ (Required unless a @snapshot_identifier@ is provided) Password for the master DB user. Note that this may show up in logs, and it will be stored in the state file. Password must contain at least 8 chars and contain at least one uppercase letter, one lowercase letter, and one number. -}
    , _master_username :: !(TF.Attribute s Text)
    {- ^ (Required unless a @snapshot_identifier@ is provided) Username for the master DB user. -}
    , _node_type :: !(TF.Attribute s Text)
    {- ^ (Required) The node type to be provisioned for the cluster. -}
    , _number_of_nodes :: !(TF.Attribute s Text)
    {- ^ (Optional) The number of compute nodes in the cluster. This parameter is required when the ClusterType parameter is specified as multi-node. Default is 1. -}
    , _owner_account :: !(TF.Attribute s Text)
    {- ^ (Optional) The AWS customer account used to create or copy the snapshot. Required if you are restoring a snapshot you do not own, optional if you own the snapshot. -}
    , _port :: !(TF.Attribute s Text)
    {- ^ (Optional) The port number on which the cluster accepts incoming connections. The cluster is accessible only via the JDBC and ODBC connection strings. Part of the connection string requires the port on which the cluster will listen for incoming connections. Default port is 5439. -}
    , _preferred_maintenance_window :: !(TF.Attribute s Text)
    {- ^ (Optional) The weekly time range (in UTC) during which automated cluster maintenance can occur. Format: ddd:hh24:mi-ddd:hh24:mi -}
    , _publicly_accessible :: !(TF.Attribute s Text)
    {- ^ (Optional) If true, the cluster can be accessed from a public network. Default is @true@ . -}
    , _skip_final_snapshot :: !(TF.Attribute s Text)
    {- ^ (Optional) Determines whether a final snapshot of the cluster is created before Amazon Redshift deletes the cluster. If true , a final cluster snapshot is not created. If false , a final cluster snapshot is created before the cluster is deleted. Default is false. -}
    , _snapshot_cluster_identifier :: !(TF.Attribute s Text)
    {- ^ (Optional) The name of the cluster the source snapshot was created from. -}
    , _snapshot_copy :: !(TF.Attribute s Text)
    {- ^ (Optional) Configuration of automatic copy of snapshots from one region to another. Documented below. -}
    , _snapshot_identifier :: !(TF.Attribute s Text)
    {- ^ (Optional) The name of the snapshot from which to create the new cluster. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _vpc_security_group_ids :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster. -}
    } deriving (Show, Eq)

instance TF.ToHCL (RedshiftClusterResource s) where
    toHCL RedshiftClusterResource{..} = TF.block $ catMaybes
        [ TF.assign "allow_version_upgrade" <$> TF.attribute _allow_version_upgrade
        , TF.assign "automated_snapshot_retention_period" <$> TF.attribute _automated_snapshot_retention_period
        , TF.assign "availability_zone" <$> TF.attribute _availability_zone
        , TF.assign "cluster_identifier" <$> TF.attribute _cluster_identifier
        , TF.assign "cluster_parameter_group_name" <$> TF.attribute _cluster_parameter_group_name
        , TF.assign "cluster_security_groups" <$> TF.attribute _cluster_security_groups
        , TF.assign "cluster_subnet_group_name" <$> TF.attribute _cluster_subnet_group_name
        , TF.assign "cluster_type" <$> TF.attribute _cluster_type
        , TF.assign "cluster_version" <$> TF.attribute _cluster_version
        , TF.assign "database_name" <$> TF.attribute _database_name
        , TF.assign "elastic_ip" <$> TF.attribute _elastic_ip
        , TF.assign "encrypted" <$> TF.attribute _encrypted
        , TF.assign "enhanced_vpc_routing" <$> TF.attribute _enhanced_vpc_routing
        , TF.assign "final_snapshot_identifier" <$> TF.attribute _final_snapshot_identifier
        , TF.assign "iam_roles" <$> TF.attribute _iam_roles
        , TF.assign "kms_key_id" <$> TF.attribute _kms_key_id
        , TF.assign "logging" <$> TF.attribute _logging
        , TF.assign "master_password" <$> TF.attribute _master_password
        , TF.assign "master_username" <$> TF.attribute _master_username
        , TF.assign "node_type" <$> TF.attribute _node_type
        , TF.assign "number_of_nodes" <$> TF.attribute _number_of_nodes
        , TF.assign "owner_account" <$> TF.attribute _owner_account
        , TF.assign "port" <$> TF.attribute _port
        , TF.assign "preferred_maintenance_window" <$> TF.attribute _preferred_maintenance_window
        , TF.assign "publicly_accessible" <$> TF.attribute _publicly_accessible
        , TF.assign "skip_final_snapshot" <$> TF.attribute _skip_final_snapshot
        , TF.assign "snapshot_cluster_identifier" <$> TF.attribute _snapshot_cluster_identifier
        , TF.assign "snapshot_copy" <$> TF.attribute _snapshot_copy
        , TF.assign "snapshot_identifier" <$> TF.attribute _snapshot_identifier
        , TF.assign "tags" <$> TF.attribute _tags
        , TF.assign "vpc_security_group_ids" <$> TF.attribute _vpc_security_group_ids
        ]

instance HasAllowVersionUpgrade (RedshiftClusterResource s) Text where
    type HasAllowVersionUpgradeThread (RedshiftClusterResource s) Text = s

    allowVersionUpgrade =
        lens (_allow_version_upgrade :: RedshiftClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _allow_version_upgrade = a } :: RedshiftClusterResource s)

instance HasAutomatedSnapshotRetentionPeriod (RedshiftClusterResource s) Text where
    type HasAutomatedSnapshotRetentionPeriodThread (RedshiftClusterResource s) Text = s

    automatedSnapshotRetentionPeriod =
        lens (_automated_snapshot_retention_period :: RedshiftClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _automated_snapshot_retention_period = a } :: RedshiftClusterResource s)

instance HasAvailabilityZone (RedshiftClusterResource s) TF.Zone where
    type HasAvailabilityZoneThread (RedshiftClusterResource s) TF.Zone = s

    availabilityZone =
        lens (_availability_zone :: RedshiftClusterResource s -> TF.Attribute s TF.Zone)
            (\s a -> s { _availability_zone = a } :: RedshiftClusterResource s)

instance HasClusterIdentifier (RedshiftClusterResource s) Text where
    type HasClusterIdentifierThread (RedshiftClusterResource s) Text = s

    clusterIdentifier =
        lens (_cluster_identifier :: RedshiftClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _cluster_identifier = a } :: RedshiftClusterResource s)

instance HasClusterParameterGroupName (RedshiftClusterResource s) Text where
    type HasClusterParameterGroupNameThread (RedshiftClusterResource s) Text = s

    clusterParameterGroupName =
        lens (_cluster_parameter_group_name :: RedshiftClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _cluster_parameter_group_name = a } :: RedshiftClusterResource s)

instance HasClusterSecurityGroups (RedshiftClusterResource s) Text where
    type HasClusterSecurityGroupsThread (RedshiftClusterResource s) Text = s

    clusterSecurityGroups =
        lens (_cluster_security_groups :: RedshiftClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _cluster_security_groups = a } :: RedshiftClusterResource s)

instance HasClusterSubnetGroupName (RedshiftClusterResource s) Text where
    type HasClusterSubnetGroupNameThread (RedshiftClusterResource s) Text = s

    clusterSubnetGroupName =
        lens (_cluster_subnet_group_name :: RedshiftClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _cluster_subnet_group_name = a } :: RedshiftClusterResource s)

instance HasClusterType (RedshiftClusterResource s) Text where
    type HasClusterTypeThread (RedshiftClusterResource s) Text = s

    clusterType =
        lens (_cluster_type :: RedshiftClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _cluster_type = a } :: RedshiftClusterResource s)

instance HasClusterVersion (RedshiftClusterResource s) Text where
    type HasClusterVersionThread (RedshiftClusterResource s) Text = s

    clusterVersion =
        lens (_cluster_version :: RedshiftClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _cluster_version = a } :: RedshiftClusterResource s)

instance HasDatabaseName (RedshiftClusterResource s) Text where
    type HasDatabaseNameThread (RedshiftClusterResource s) Text = s

    databaseName =
        lens (_database_name :: RedshiftClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _database_name = a } :: RedshiftClusterResource s)

instance HasElasticIp (RedshiftClusterResource s) Text where
    type HasElasticIpThread (RedshiftClusterResource s) Text = s

    elasticIp =
        lens (_elastic_ip :: RedshiftClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _elastic_ip = a } :: RedshiftClusterResource s)

instance HasEncrypted (RedshiftClusterResource s) Text where
    type HasEncryptedThread (RedshiftClusterResource s) Text = s

    encrypted =
        lens (_encrypted :: RedshiftClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _encrypted = a } :: RedshiftClusterResource s)

instance HasEnhancedVpcRouting (RedshiftClusterResource s) Text where
    type HasEnhancedVpcRoutingThread (RedshiftClusterResource s) Text = s

    enhancedVpcRouting =
        lens (_enhanced_vpc_routing :: RedshiftClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _enhanced_vpc_routing = a } :: RedshiftClusterResource s)

instance HasFinalSnapshotIdentifier (RedshiftClusterResource s) Text where
    type HasFinalSnapshotIdentifierThread (RedshiftClusterResource s) Text = s

    finalSnapshotIdentifier =
        lens (_final_snapshot_identifier :: RedshiftClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _final_snapshot_identifier = a } :: RedshiftClusterResource s)

instance HasIamRoles (RedshiftClusterResource s) Text where
    type HasIamRolesThread (RedshiftClusterResource s) Text = s

    iamRoles =
        lens (_iam_roles :: RedshiftClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _iam_roles = a } :: RedshiftClusterResource s)

instance HasKmsKeyId (RedshiftClusterResource s) Text where
    type HasKmsKeyIdThread (RedshiftClusterResource s) Text = s

    kmsKeyId =
        lens (_kms_key_id :: RedshiftClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _kms_key_id = a } :: RedshiftClusterResource s)

instance HasLogging (RedshiftClusterResource s) Text where
    type HasLoggingThread (RedshiftClusterResource s) Text = s

    logging =
        lens (_logging :: RedshiftClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _logging = a } :: RedshiftClusterResource s)

instance HasMasterPassword (RedshiftClusterResource s) Text where
    type HasMasterPasswordThread (RedshiftClusterResource s) Text = s

    masterPassword =
        lens (_master_password :: RedshiftClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _master_password = a } :: RedshiftClusterResource s)

instance HasMasterUsername (RedshiftClusterResource s) Text where
    type HasMasterUsernameThread (RedshiftClusterResource s) Text = s

    masterUsername =
        lens (_master_username :: RedshiftClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _master_username = a } :: RedshiftClusterResource s)

instance HasNodeType (RedshiftClusterResource s) Text where
    type HasNodeTypeThread (RedshiftClusterResource s) Text = s

    nodeType =
        lens (_node_type :: RedshiftClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _node_type = a } :: RedshiftClusterResource s)

instance HasNumberOfNodes (RedshiftClusterResource s) Text where
    type HasNumberOfNodesThread (RedshiftClusterResource s) Text = s

    numberOfNodes =
        lens (_number_of_nodes :: RedshiftClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _number_of_nodes = a } :: RedshiftClusterResource s)

instance HasOwnerAccount (RedshiftClusterResource s) Text where
    type HasOwnerAccountThread (RedshiftClusterResource s) Text = s

    ownerAccount =
        lens (_owner_account :: RedshiftClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _owner_account = a } :: RedshiftClusterResource s)

instance HasPort (RedshiftClusterResource s) Text where
    type HasPortThread (RedshiftClusterResource s) Text = s

    port =
        lens (_port :: RedshiftClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _port = a } :: RedshiftClusterResource s)

instance HasPreferredMaintenanceWindow (RedshiftClusterResource s) Text where
    type HasPreferredMaintenanceWindowThread (RedshiftClusterResource s) Text = s

    preferredMaintenanceWindow =
        lens (_preferred_maintenance_window :: RedshiftClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _preferred_maintenance_window = a } :: RedshiftClusterResource s)

instance HasPubliclyAccessible (RedshiftClusterResource s) Text where
    type HasPubliclyAccessibleThread (RedshiftClusterResource s) Text = s

    publiclyAccessible =
        lens (_publicly_accessible :: RedshiftClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _publicly_accessible = a } :: RedshiftClusterResource s)

instance HasSkipFinalSnapshot (RedshiftClusterResource s) Text where
    type HasSkipFinalSnapshotThread (RedshiftClusterResource s) Text = s

    skipFinalSnapshot =
        lens (_skip_final_snapshot :: RedshiftClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _skip_final_snapshot = a } :: RedshiftClusterResource s)

instance HasSnapshotClusterIdentifier (RedshiftClusterResource s) Text where
    type HasSnapshotClusterIdentifierThread (RedshiftClusterResource s) Text = s

    snapshotClusterIdentifier =
        lens (_snapshot_cluster_identifier :: RedshiftClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _snapshot_cluster_identifier = a } :: RedshiftClusterResource s)

instance HasSnapshotCopy (RedshiftClusterResource s) Text where
    type HasSnapshotCopyThread (RedshiftClusterResource s) Text = s

    snapshotCopy =
        lens (_snapshot_copy :: RedshiftClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _snapshot_copy = a } :: RedshiftClusterResource s)

instance HasSnapshotIdentifier (RedshiftClusterResource s) Text where
    type HasSnapshotIdentifierThread (RedshiftClusterResource s) Text = s

    snapshotIdentifier =
        lens (_snapshot_identifier :: RedshiftClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _snapshot_identifier = a } :: RedshiftClusterResource s)

instance HasTags (RedshiftClusterResource s) TF.Tags where
    type HasTagsThread (RedshiftClusterResource s) TF.Tags = s

    tags =
        lens (_tags :: RedshiftClusterResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: RedshiftClusterResource s)

instance HasVpcSecurityGroupIds (RedshiftClusterResource s) Text where
    type HasVpcSecurityGroupIdsThread (RedshiftClusterResource s) Text = s

    vpcSecurityGroupIds =
        lens (_vpc_security_group_ids :: RedshiftClusterResource s -> TF.Attribute s Text)
            (\s a -> s { _vpc_security_group_ids = a } :: RedshiftClusterResource s)

redshiftClusterResource :: TF.Resource TF.AWS (RedshiftClusterResource s)
redshiftClusterResource =
    TF.newResource "aws_redshift_cluster" $
        RedshiftClusterResource {
              _allow_version_upgrade = TF.Nil
            , _automated_snapshot_retention_period = TF.Nil
            , _availability_zone = TF.Nil
            , _cluster_identifier = TF.Nil
            , _cluster_parameter_group_name = TF.Nil
            , _cluster_security_groups = TF.Nil
            , _cluster_subnet_group_name = TF.Nil
            , _cluster_type = TF.Nil
            , _cluster_version = TF.Nil
            , _database_name = TF.Nil
            , _elastic_ip = TF.Nil
            , _encrypted = TF.Nil
            , _enhanced_vpc_routing = TF.Nil
            , _final_snapshot_identifier = TF.Nil
            , _iam_roles = TF.Nil
            , _kms_key_id = TF.Nil
            , _logging = TF.Nil
            , _master_password = TF.Nil
            , _master_username = TF.Nil
            , _node_type = TF.Nil
            , _number_of_nodes = TF.Nil
            , _owner_account = TF.Nil
            , _port = TF.Nil
            , _preferred_maintenance_window = TF.Nil
            , _publicly_accessible = TF.Nil
            , _skip_final_snapshot = TF.Nil
            , _snapshot_cluster_identifier = TF.Nil
            , _snapshot_copy = TF.Nil
            , _snapshot_identifier = TF.Nil
            , _tags = TF.Nil
            , _vpc_security_group_ids = TF.Nil
            }

{- | The @aws_redshift_parameter_group@ AWS resource.

Provides a Redshift Cluster parameter group resource.
-}
data RedshiftParameterGroupResource s = RedshiftParameterGroupResource {
      _description :: !(TF.Attribute s Text)
    {- ^ (Optional) The description of the Redshift parameter group. Defaults to "Managed by Terraform". -}
    , _family' :: !(TF.Attribute s Text)
    {- ^ (Required) The family of the Redshift parameter group. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the Redshift parameter group. -}
    , _parameter :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of Redshift parameters to apply. -}
    } deriving (Show, Eq)

instance TF.ToHCL (RedshiftParameterGroupResource s) where
    toHCL RedshiftParameterGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.attribute _description
        , TF.assign "family" <$> TF.attribute _family'
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "parameter" <$> TF.attribute _parameter
        ]

instance HasDescription (RedshiftParameterGroupResource s) Text where
    type HasDescriptionThread (RedshiftParameterGroupResource s) Text = s

    description =
        lens (_description :: RedshiftParameterGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: RedshiftParameterGroupResource s)

instance HasFamily' (RedshiftParameterGroupResource s) Text where
    type HasFamily'Thread (RedshiftParameterGroupResource s) Text = s

    family' =
        lens (_family' :: RedshiftParameterGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _family' = a } :: RedshiftParameterGroupResource s)

instance HasName (RedshiftParameterGroupResource s) Text where
    type HasNameThread (RedshiftParameterGroupResource s) Text = s

    name =
        lens (_name :: RedshiftParameterGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: RedshiftParameterGroupResource s)

instance HasParameter (RedshiftParameterGroupResource s) Text where
    type HasParameterThread (RedshiftParameterGroupResource s) Text = s

    parameter =
        lens (_parameter :: RedshiftParameterGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _parameter = a } :: RedshiftParameterGroupResource s)

instance HasComputedId (RedshiftParameterGroupResource s) Text

redshiftParameterGroupResource :: TF.Resource TF.AWS (RedshiftParameterGroupResource s)
redshiftParameterGroupResource =
    TF.newResource "aws_redshift_parameter_group" $
        RedshiftParameterGroupResource {
              _description = TF.Nil
            , _family' = TF.Nil
            , _name = TF.Nil
            , _parameter = TF.Nil
            }

{- | The @aws_redshift_security_group@ AWS resource.

Creates a new Amazon Redshift security group. You use security groups to
control access to non-VPC clusters
-}
data RedshiftSecurityGroupResource s = RedshiftSecurityGroupResource {
      _description :: !(TF.Attribute s Text)
    {- ^ (Optional) The description of the Redshift security group. Defaults to "Managed by Terraform". -}
    , _ingress :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of ingress rules. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the Redshift security group. -}
    } deriving (Show, Eq)

instance TF.ToHCL (RedshiftSecurityGroupResource s) where
    toHCL RedshiftSecurityGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.attribute _description
        , TF.assign "ingress" <$> TF.attribute _ingress
        , TF.assign "name" <$> TF.attribute _name
        ]

instance HasDescription (RedshiftSecurityGroupResource s) Text where
    type HasDescriptionThread (RedshiftSecurityGroupResource s) Text = s

    description =
        lens (_description :: RedshiftSecurityGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: RedshiftSecurityGroupResource s)

instance HasIngress (RedshiftSecurityGroupResource s) Text where
    type HasIngressThread (RedshiftSecurityGroupResource s) Text = s

    ingress =
        lens (_ingress :: RedshiftSecurityGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _ingress = a } :: RedshiftSecurityGroupResource s)

instance HasName (RedshiftSecurityGroupResource s) Text where
    type HasNameThread (RedshiftSecurityGroupResource s) Text = s

    name =
        lens (_name :: RedshiftSecurityGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: RedshiftSecurityGroupResource s)

instance HasComputedId (RedshiftSecurityGroupResource s) Text

redshiftSecurityGroupResource :: TF.Resource TF.AWS (RedshiftSecurityGroupResource s)
redshiftSecurityGroupResource =
    TF.newResource "aws_redshift_security_group" $
        RedshiftSecurityGroupResource {
              _description = TF.Nil
            , _ingress = TF.Nil
            , _name = TF.Nil
            }

{- | The @aws_redshift_subnet_group@ AWS resource.

Creates a new Amazon Redshift subnet group. You must provide a list of one
or more subnets in your existing Amazon Virtual Private Cloud (Amazon VPC)
when creating Amazon Redshift subnet group.
-}
data RedshiftSubnetGroupResource s = RedshiftSubnetGroupResource {
      _description :: !(TF.Attribute s Text)
    {- ^ (Optional) The description of the Redshift Subnet group. Defaults to "Managed by Terraform". -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the Redshift Subnet group. -}
    , _subnet_ids :: !(TF.Attribute s Text)
    {- ^ (Required) An array of VPC subnet IDs. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    } deriving (Show, Eq)

instance TF.ToHCL (RedshiftSubnetGroupResource s) where
    toHCL RedshiftSubnetGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.attribute _description
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "subnet_ids" <$> TF.attribute _subnet_ids
        , TF.assign "tags" <$> TF.attribute _tags
        ]

instance HasDescription (RedshiftSubnetGroupResource s) Text where
    type HasDescriptionThread (RedshiftSubnetGroupResource s) Text = s

    description =
        lens (_description :: RedshiftSubnetGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: RedshiftSubnetGroupResource s)

instance HasName (RedshiftSubnetGroupResource s) Text where
    type HasNameThread (RedshiftSubnetGroupResource s) Text = s

    name =
        lens (_name :: RedshiftSubnetGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: RedshiftSubnetGroupResource s)

instance HasSubnetIds (RedshiftSubnetGroupResource s) Text where
    type HasSubnetIdsThread (RedshiftSubnetGroupResource s) Text = s

    subnetIds =
        lens (_subnet_ids :: RedshiftSubnetGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _subnet_ids = a } :: RedshiftSubnetGroupResource s)

instance HasTags (RedshiftSubnetGroupResource s) TF.Tags where
    type HasTagsThread (RedshiftSubnetGroupResource s) TF.Tags = s

    tags =
        lens (_tags :: RedshiftSubnetGroupResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: RedshiftSubnetGroupResource s)

instance HasComputedId (RedshiftSubnetGroupResource s) Text

redshiftSubnetGroupResource :: TF.Resource TF.AWS (RedshiftSubnetGroupResource s)
redshiftSubnetGroupResource =
    TF.newResource "aws_redshift_subnet_group" $
        RedshiftSubnetGroupResource {
              _description = TF.Nil
            , _name = TF.Nil
            , _subnet_ids = TF.Nil
            , _tags = TF.Nil
            }

{- | The @aws_route53_delegation_set@ AWS resource.

Provides a
<https://docs.aws.amazon.com/Route53/latest/APIReference/actions-on-reusable-delegation-sets.html>
resource.
-}
data Route53DelegationSetResource s = Route53DelegationSetResource {
      _reference_name :: !(TF.Attribute s Text)
    {- ^ (Optional) This is a reference name used in Caller Reference (helpful for identifying single delegation set amongst others) -}
    } deriving (Show, Eq)

instance TF.ToHCL (Route53DelegationSetResource s) where
    toHCL Route53DelegationSetResource{..} = TF.block $ catMaybes
        [ TF.assign "reference_name" <$> TF.attribute _reference_name
        ]

instance HasReferenceName (Route53DelegationSetResource s) Text where
    type HasReferenceNameThread (Route53DelegationSetResource s) Text = s

    referenceName =
        lens (_reference_name :: Route53DelegationSetResource s -> TF.Attribute s Text)
            (\s a -> s { _reference_name = a } :: Route53DelegationSetResource s)

instance HasComputedId (Route53DelegationSetResource s) Text

instance HasComputedNameServers (Route53DelegationSetResource s) Text

route53DelegationSetResource :: TF.Resource TF.AWS (Route53DelegationSetResource s)
route53DelegationSetResource =
    TF.newResource "aws_route53_delegation_set" $
        Route53DelegationSetResource {
              _reference_name = TF.Nil
            }

{- | The @aws_route53_health_check@ AWS resource.

Provides a Route53 health check.
-}
data Route53HealthCheckResource s = Route53HealthCheckResource {
      _child_health_threshold :: !(TF.Attribute s Text)
    {- ^ (Optional) The minimum number of child health checks that must be healthy for Route 53 to consider the parent health check to be healthy. Valid values are integers between 0 and 256, inclusive -}
    , _child_healthchecks :: !(TF.Attribute s Text)
    {- ^ (Optional) For a specified parent health check, a list of HealthCheckId values for the associated child health checks. -}
    , _cloudwatch_alarm_name :: !(TF.Attribute s Text)
    {- ^ (Optional) The name of the CloudWatch alarm. -}
    , _cloudwatch_alarm_region :: !(TF.Attribute s TF.Region)
    {- ^ (Optional) The CloudWatchRegion that the CloudWatch alarm was created in. -}
    , _enable_sni :: !(TF.Attribute s TF.Bool)
    {- ^ (Optional) A boolean value that indicates whether Route53 should send the @fqdn@ to the endpoint when performing the health check. This defaults to AWS' defaults: when the @type@ is "HTTPS" @enable_sni@ defaults to @true@ , when @type@ is anything else @enable_sni@ defaults to @false@ . -}
    , _failure_threshold :: !(TF.Attribute s Text)
    {- ^ (Required) The number of consecutive health checks that an endpoint must pass or fail. -}
    , _fqdn :: !(TF.Attribute s Text)
    {- ^ (Optional) The fully qualified domain name of the endpoint to be checked. -}
    , _insufficient_data_health_status :: !(TF.Attribute s Text)
    {- ^ (Optional) The status of the health check when CloudWatch has insufficient data about the state of associated alarm. Valid values are @Healthy@ , @Unhealthy@ and @LastKnownStatus@ . -}
    , _invert_healthcheck :: !(TF.Attribute s Text)
    {- ^ (Optional) A boolean value that indicates whether the status of health check should be inverted. For example, if a health check is healthy but Inverted is True , then Route 53 considers the health check to be unhealthy. -}
    , _ip_address :: !(TF.Attribute s Text)
    {- ^ (Optional) The IP address of the endpoint to be checked. -}
    , _measure_latency :: !(TF.Attribute s Text)
    {- ^ (Optional) A Boolean value that indicates whether you want Route 53 to measure the latency between health checkers in multiple AWS regions and your endpoint and to display CloudWatch latency graphs in the Route 53 console. -}
    , _port :: !(TF.Attribute s Text)
    {- ^ (Optional) The port of the endpoint to be checked. -}
    , _reference_name :: !(TF.Attribute s Text)
    {- ^ (Optional) This is a reference name used in Caller Reference (helpful for identifying single health_check set amongst others) -}
    , _regions :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of AWS regions that you want Amazon Route 53 health checkers to check the specified endpoint from. -}
    , _request_interval :: !(TF.Attribute s Text)
    {- ^ (Required) The number of seconds between the time that Amazon Route 53 gets a response from your endpoint and the time that it sends the next health-check request. -}
    , _resource_path :: !(TF.Attribute s Text)
    {- ^ (Optional) The path that you want Amazon Route 53 to request when performing health checks. -}
    , _search_string :: !(TF.Attribute s Text)
    {- ^ (Optional) String searched in the first 5120 bytes of the response body for check to be considered healthy. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the health check. -}
    , _type' :: !(TF.Attribute s Text)
    {- ^ (Required) The protocol to use when performing health checks. Valid values are @HTTP@ , @HTTPS@ , @HTTP_STR_MATCH@ , @HTTPS_STR_MATCH@ , @TCP@ , @CALCULATED@ and @CLOUDWATCH_METRIC@ . -}
    } deriving (Show, Eq)

instance TF.ToHCL (Route53HealthCheckResource s) where
    toHCL Route53HealthCheckResource{..} = TF.block $ catMaybes
        [ TF.assign "child_health_threshold" <$> TF.attribute _child_health_threshold
        , TF.assign "child_healthchecks" <$> TF.attribute _child_healthchecks
        , TF.assign "cloudwatch_alarm_name" <$> TF.attribute _cloudwatch_alarm_name
        , TF.assign "cloudwatch_alarm_region" <$> TF.attribute _cloudwatch_alarm_region
        , TF.assign "enable_sni" <$> TF.attribute _enable_sni
        , TF.assign "failure_threshold" <$> TF.attribute _failure_threshold
        , TF.assign "fqdn" <$> TF.attribute _fqdn
        , TF.assign "insufficient_data_health_status" <$> TF.attribute _insufficient_data_health_status
        , TF.assign "invert_healthcheck" <$> TF.attribute _invert_healthcheck
        , TF.assign "ip_address" <$> TF.attribute _ip_address
        , TF.assign "measure_latency" <$> TF.attribute _measure_latency
        , TF.assign "port" <$> TF.attribute _port
        , TF.assign "reference_name" <$> TF.attribute _reference_name
        , TF.assign "regions" <$> TF.attribute _regions
        , TF.assign "request_interval" <$> TF.attribute _request_interval
        , TF.assign "resource_path" <$> TF.attribute _resource_path
        , TF.assign "search_string" <$> TF.attribute _search_string
        , TF.assign "tags" <$> TF.attribute _tags
        , TF.assign "type" <$> TF.attribute _type'
        ]

instance HasChildHealthThreshold (Route53HealthCheckResource s) Text where
    type HasChildHealthThresholdThread (Route53HealthCheckResource s) Text = s

    childHealthThreshold =
        lens (_child_health_threshold :: Route53HealthCheckResource s -> TF.Attribute s Text)
            (\s a -> s { _child_health_threshold = a } :: Route53HealthCheckResource s)

instance HasChildHealthchecks (Route53HealthCheckResource s) Text where
    type HasChildHealthchecksThread (Route53HealthCheckResource s) Text = s

    childHealthchecks =
        lens (_child_healthchecks :: Route53HealthCheckResource s -> TF.Attribute s Text)
            (\s a -> s { _child_healthchecks = a } :: Route53HealthCheckResource s)

instance HasCloudwatchAlarmName (Route53HealthCheckResource s) Text where
    type HasCloudwatchAlarmNameThread (Route53HealthCheckResource s) Text = s

    cloudwatchAlarmName =
        lens (_cloudwatch_alarm_name :: Route53HealthCheckResource s -> TF.Attribute s Text)
            (\s a -> s { _cloudwatch_alarm_name = a } :: Route53HealthCheckResource s)

instance HasCloudwatchAlarmRegion (Route53HealthCheckResource s) TF.Region where
    type HasCloudwatchAlarmRegionThread (Route53HealthCheckResource s) TF.Region = s

    cloudwatchAlarmRegion =
        lens (_cloudwatch_alarm_region :: Route53HealthCheckResource s -> TF.Attribute s TF.Region)
            (\s a -> s { _cloudwatch_alarm_region = a } :: Route53HealthCheckResource s)

instance HasEnableSni (Route53HealthCheckResource s) TF.Bool where
    type HasEnableSniThread (Route53HealthCheckResource s) TF.Bool = s

    enableSni =
        lens (_enable_sni :: Route53HealthCheckResource s -> TF.Attribute s TF.Bool)
            (\s a -> s { _enable_sni = a } :: Route53HealthCheckResource s)

instance HasFailureThreshold (Route53HealthCheckResource s) Text where
    type HasFailureThresholdThread (Route53HealthCheckResource s) Text = s

    failureThreshold =
        lens (_failure_threshold :: Route53HealthCheckResource s -> TF.Attribute s Text)
            (\s a -> s { _failure_threshold = a } :: Route53HealthCheckResource s)

instance HasFqdn (Route53HealthCheckResource s) Text where
    type HasFqdnThread (Route53HealthCheckResource s) Text = s

    fqdn =
        lens (_fqdn :: Route53HealthCheckResource s -> TF.Attribute s Text)
            (\s a -> s { _fqdn = a } :: Route53HealthCheckResource s)

instance HasInsufficientDataHealthStatus (Route53HealthCheckResource s) Text where
    type HasInsufficientDataHealthStatusThread (Route53HealthCheckResource s) Text = s

    insufficientDataHealthStatus =
        lens (_insufficient_data_health_status :: Route53HealthCheckResource s -> TF.Attribute s Text)
            (\s a -> s { _insufficient_data_health_status = a } :: Route53HealthCheckResource s)

instance HasInvertHealthcheck (Route53HealthCheckResource s) Text where
    type HasInvertHealthcheckThread (Route53HealthCheckResource s) Text = s

    invertHealthcheck =
        lens (_invert_healthcheck :: Route53HealthCheckResource s -> TF.Attribute s Text)
            (\s a -> s { _invert_healthcheck = a } :: Route53HealthCheckResource s)

instance HasIpAddress (Route53HealthCheckResource s) Text where
    type HasIpAddressThread (Route53HealthCheckResource s) Text = s

    ipAddress =
        lens (_ip_address :: Route53HealthCheckResource s -> TF.Attribute s Text)
            (\s a -> s { _ip_address = a } :: Route53HealthCheckResource s)

instance HasMeasureLatency (Route53HealthCheckResource s) Text where
    type HasMeasureLatencyThread (Route53HealthCheckResource s) Text = s

    measureLatency =
        lens (_measure_latency :: Route53HealthCheckResource s -> TF.Attribute s Text)
            (\s a -> s { _measure_latency = a } :: Route53HealthCheckResource s)

instance HasPort (Route53HealthCheckResource s) Text where
    type HasPortThread (Route53HealthCheckResource s) Text = s

    port =
        lens (_port :: Route53HealthCheckResource s -> TF.Attribute s Text)
            (\s a -> s { _port = a } :: Route53HealthCheckResource s)

instance HasReferenceName (Route53HealthCheckResource s) Text where
    type HasReferenceNameThread (Route53HealthCheckResource s) Text = s

    referenceName =
        lens (_reference_name :: Route53HealthCheckResource s -> TF.Attribute s Text)
            (\s a -> s { _reference_name = a } :: Route53HealthCheckResource s)

instance HasRegions (Route53HealthCheckResource s) Text where
    type HasRegionsThread (Route53HealthCheckResource s) Text = s

    regions =
        lens (_regions :: Route53HealthCheckResource s -> TF.Attribute s Text)
            (\s a -> s { _regions = a } :: Route53HealthCheckResource s)

instance HasRequestInterval (Route53HealthCheckResource s) Text where
    type HasRequestIntervalThread (Route53HealthCheckResource s) Text = s

    requestInterval =
        lens (_request_interval :: Route53HealthCheckResource s -> TF.Attribute s Text)
            (\s a -> s { _request_interval = a } :: Route53HealthCheckResource s)

instance HasResourcePath (Route53HealthCheckResource s) Text where
    type HasResourcePathThread (Route53HealthCheckResource s) Text = s

    resourcePath =
        lens (_resource_path :: Route53HealthCheckResource s -> TF.Attribute s Text)
            (\s a -> s { _resource_path = a } :: Route53HealthCheckResource s)

instance HasSearchString (Route53HealthCheckResource s) Text where
    type HasSearchStringThread (Route53HealthCheckResource s) Text = s

    searchString =
        lens (_search_string :: Route53HealthCheckResource s -> TF.Attribute s Text)
            (\s a -> s { _search_string = a } :: Route53HealthCheckResource s)

instance HasTags (Route53HealthCheckResource s) TF.Tags where
    type HasTagsThread (Route53HealthCheckResource s) TF.Tags = s

    tags =
        lens (_tags :: Route53HealthCheckResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: Route53HealthCheckResource s)

instance HasType' (Route53HealthCheckResource s) Text where
    type HasType'Thread (Route53HealthCheckResource s) Text = s

    type' =
        lens (_type' :: Route53HealthCheckResource s -> TF.Attribute s Text)
            (\s a -> s { _type' = a } :: Route53HealthCheckResource s)

route53HealthCheckResource :: TF.Resource TF.AWS (Route53HealthCheckResource s)
route53HealthCheckResource =
    TF.newResource "aws_route53_health_check" $
        Route53HealthCheckResource {
              _child_health_threshold = TF.Nil
            , _child_healthchecks = TF.Nil
            , _cloudwatch_alarm_name = TF.Nil
            , _cloudwatch_alarm_region = TF.Nil
            , _enable_sni = TF.Nil
            , _failure_threshold = TF.Nil
            , _fqdn = TF.Nil
            , _insufficient_data_health_status = TF.Nil
            , _invert_healthcheck = TF.Nil
            , _ip_address = TF.Nil
            , _measure_latency = TF.Nil
            , _port = TF.Nil
            , _reference_name = TF.Nil
            , _regions = TF.Nil
            , _request_interval = TF.Nil
            , _resource_path = TF.Nil
            , _search_string = TF.Nil
            , _tags = TF.Nil
            , _type' = TF.Nil
            }

{- | The @aws_route53_query_log@ AWS resource.

Provides a Route53 query logging configuration resource. ~> NOTE: There are
restrictions on the configuration of query logging. Notably, the CloudWatch
log group must be in the @us-east-1@ region, a permissive CloudWatch log
resource policy must be in place, and the Route53 hosted zone must be
public. See
<https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/query-logs.html?console_help=true#query-logs-configuring>
for additional details.
-}
data Route53QueryLogResource s = Route53QueryLogResource {
      _cloudwatch_log_group_arn :: !(TF.Attribute s Text)
    {- ^ (Required) CloudWatch log group ARN to send query logs. -}
    , _zone_id :: !(TF.Attribute s Text)
    {- ^ (Required) Route53 hosted zone ID to enable query logs. -}
    } deriving (Show, Eq)

instance TF.ToHCL (Route53QueryLogResource s) where
    toHCL Route53QueryLogResource{..} = TF.block $ catMaybes
        [ TF.assign "cloudwatch_log_group_arn" <$> TF.attribute _cloudwatch_log_group_arn
        , TF.assign "zone_id" <$> TF.attribute _zone_id
        ]

instance HasCloudwatchLogGroupArn (Route53QueryLogResource s) Text where
    type HasCloudwatchLogGroupArnThread (Route53QueryLogResource s) Text = s

    cloudwatchLogGroupArn =
        lens (_cloudwatch_log_group_arn :: Route53QueryLogResource s -> TF.Attribute s Text)
            (\s a -> s { _cloudwatch_log_group_arn = a } :: Route53QueryLogResource s)

instance HasZoneId (Route53QueryLogResource s) Text where
    type HasZoneIdThread (Route53QueryLogResource s) Text = s

    zoneId =
        lens (_zone_id :: Route53QueryLogResource s -> TF.Attribute s Text)
            (\s a -> s { _zone_id = a } :: Route53QueryLogResource s)

instance HasComputedId (Route53QueryLogResource s) Text

route53QueryLogResource :: TF.Resource TF.AWS (Route53QueryLogResource s)
route53QueryLogResource =
    TF.newResource "aws_route53_query_log" $
        Route53QueryLogResource {
              _cloudwatch_log_group_arn = TF.Nil
            , _zone_id = TF.Nil
            }

{- | The @aws_route53_record@ AWS resource.

Provides a Route53 record resource.
-}
data Route53RecordResource s = Route53RecordResource {
      _alias :: !(TF.Attribute s Text)
    {- ^ (Optional) An alias block. Conflicts with @ttl@ & @records@ . Alias record documented below. -}
    , _failover_routing_policy :: !(TF.Attribute s Text)
    {- ^ (Optional) A block indicating the routing behavior when associated health check fails. Conflicts with any other routing policy. Documented below. -}
    , _geolocation_routing_policy :: !(TF.Attribute s Text)
    {- ^ (Optional) A block indicating a routing policy based on the geolocation of the requestor. Conflicts with any other routing policy. Documented below. -}
    , _health_check_id :: !(TF.Attribute s Text)
    {- ^ (Optional) The health check the record should be associated with. -}
    , _latency_routing_policy :: !(TF.Attribute s Text)
    {- ^ (Optional) A block indicating a routing policy based on the latency between the requestor and an AWS region. Conflicts with any other routing policy. Documented below. -}
    , _multivalue_answer_routing_policy :: !(TF.Attribute s Text)
    {- ^ (Optional) A block indicating a multivalue answer routing policy. Conflicts with any other routing policy. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the record. -}
    , _records :: !(TF.Attribute s Text)
    {- ^ (Required for non-alias records) A string list of records. To specify a single record value longer than 255 characters such as a TXT record for DKIM, add @\"\"@ inside the Terraform configuration string (e.g. @"first255characters\"\"morecharacters"@ ). -}
    , _set_identifier :: !(TF.Attribute s Text)
    {- ^ (Optional) Unique identifier to differentiate records with routing policies from one another. Required if using @failover@ , @geolocation@ , @latency@ , or @weighted@ routing policies documented below. -}
    , _ttl :: !(TF.Attribute s Text)
    {- ^ (Required for non-alias records) The TTL of the record. -}
    , _type' :: !(TF.Attribute s Text)
    {- ^ (Required) The record type. Valid values are @A@ , @AAAA@ , @CAA@ , @CNAME@ , @MX@ , @NAPTR@ , @NS@ , @PTR@ , @SOA@ , @SPF@ , @SRV@ and @TXT@ . -}
    , _weighted_routing_policy :: !(TF.Attribute s Text)
    {- ^ (Optional) A block indicating a weighted routing policy. Conflicts with any other routing policy. Documented below. -}
    , _zone_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the hosted zone to contain this record. -}
    } deriving (Show, Eq)

instance TF.ToHCL (Route53RecordResource s) where
    toHCL Route53RecordResource{..} = TF.block $ catMaybes
        [ TF.assign "alias" <$> TF.attribute _alias
        , TF.assign "failover_routing_policy" <$> TF.attribute _failover_routing_policy
        , TF.assign "geolocation_routing_policy" <$> TF.attribute _geolocation_routing_policy
        , TF.assign "health_check_id" <$> TF.attribute _health_check_id
        , TF.assign "latency_routing_policy" <$> TF.attribute _latency_routing_policy
        , TF.assign "multivalue_answer_routing_policy" <$> TF.attribute _multivalue_answer_routing_policy
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "records" <$> TF.attribute _records
        , TF.assign "set_identifier" <$> TF.attribute _set_identifier
        , TF.assign "ttl" <$> TF.attribute _ttl
        , TF.assign "type" <$> TF.attribute _type'
        , TF.assign "weighted_routing_policy" <$> TF.attribute _weighted_routing_policy
        , TF.assign "zone_id" <$> TF.attribute _zone_id
        ]

instance HasAlias (Route53RecordResource s) Text where
    type HasAliasThread (Route53RecordResource s) Text = s

    alias =
        lens (_alias :: Route53RecordResource s -> TF.Attribute s Text)
            (\s a -> s { _alias = a } :: Route53RecordResource s)

instance HasFailoverRoutingPolicy (Route53RecordResource s) Text where
    type HasFailoverRoutingPolicyThread (Route53RecordResource s) Text = s

    failoverRoutingPolicy =
        lens (_failover_routing_policy :: Route53RecordResource s -> TF.Attribute s Text)
            (\s a -> s { _failover_routing_policy = a } :: Route53RecordResource s)

instance HasGeolocationRoutingPolicy (Route53RecordResource s) Text where
    type HasGeolocationRoutingPolicyThread (Route53RecordResource s) Text = s

    geolocationRoutingPolicy =
        lens (_geolocation_routing_policy :: Route53RecordResource s -> TF.Attribute s Text)
            (\s a -> s { _geolocation_routing_policy = a } :: Route53RecordResource s)

instance HasHealthCheckId (Route53RecordResource s) Text where
    type HasHealthCheckIdThread (Route53RecordResource s) Text = s

    healthCheckId =
        lens (_health_check_id :: Route53RecordResource s -> TF.Attribute s Text)
            (\s a -> s { _health_check_id = a } :: Route53RecordResource s)

instance HasLatencyRoutingPolicy (Route53RecordResource s) Text where
    type HasLatencyRoutingPolicyThread (Route53RecordResource s) Text = s

    latencyRoutingPolicy =
        lens (_latency_routing_policy :: Route53RecordResource s -> TF.Attribute s Text)
            (\s a -> s { _latency_routing_policy = a } :: Route53RecordResource s)

instance HasMultivalueAnswerRoutingPolicy (Route53RecordResource s) Text where
    type HasMultivalueAnswerRoutingPolicyThread (Route53RecordResource s) Text = s

    multivalueAnswerRoutingPolicy =
        lens (_multivalue_answer_routing_policy :: Route53RecordResource s -> TF.Attribute s Text)
            (\s a -> s { _multivalue_answer_routing_policy = a } :: Route53RecordResource s)

instance HasName (Route53RecordResource s) Text where
    type HasNameThread (Route53RecordResource s) Text = s

    name =
        lens (_name :: Route53RecordResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: Route53RecordResource s)

instance HasRecords (Route53RecordResource s) Text where
    type HasRecordsThread (Route53RecordResource s) Text = s

    records =
        lens (_records :: Route53RecordResource s -> TF.Attribute s Text)
            (\s a -> s { _records = a } :: Route53RecordResource s)

instance HasSetIdentifier (Route53RecordResource s) Text where
    type HasSetIdentifierThread (Route53RecordResource s) Text = s

    setIdentifier =
        lens (_set_identifier :: Route53RecordResource s -> TF.Attribute s Text)
            (\s a -> s { _set_identifier = a } :: Route53RecordResource s)

instance HasTtl (Route53RecordResource s) Text where
    type HasTtlThread (Route53RecordResource s) Text = s

    ttl =
        lens (_ttl :: Route53RecordResource s -> TF.Attribute s Text)
            (\s a -> s { _ttl = a } :: Route53RecordResource s)

instance HasType' (Route53RecordResource s) Text where
    type HasType'Thread (Route53RecordResource s) Text = s

    type' =
        lens (_type' :: Route53RecordResource s -> TF.Attribute s Text)
            (\s a -> s { _type' = a } :: Route53RecordResource s)

instance HasWeightedRoutingPolicy (Route53RecordResource s) Text where
    type HasWeightedRoutingPolicyThread (Route53RecordResource s) Text = s

    weightedRoutingPolicy =
        lens (_weighted_routing_policy :: Route53RecordResource s -> TF.Attribute s Text)
            (\s a -> s { _weighted_routing_policy = a } :: Route53RecordResource s)

instance HasZoneId (Route53RecordResource s) Text where
    type HasZoneIdThread (Route53RecordResource s) Text = s

    zoneId =
        lens (_zone_id :: Route53RecordResource s -> TF.Attribute s Text)
            (\s a -> s { _zone_id = a } :: Route53RecordResource s)

instance HasComputedFqdn (Route53RecordResource s) Text

route53RecordResource :: TF.Resource TF.AWS (Route53RecordResource s)
route53RecordResource =
    TF.newResource "aws_route53_record" $
        Route53RecordResource {
              _alias = TF.Nil
            , _failover_routing_policy = TF.Nil
            , _geolocation_routing_policy = TF.Nil
            , _health_check_id = TF.Nil
            , _latency_routing_policy = TF.Nil
            , _multivalue_answer_routing_policy = TF.Nil
            , _name = TF.Nil
            , _records = TF.Nil
            , _set_identifier = TF.Nil
            , _ttl = TF.Nil
            , _type' = TF.Nil
            , _weighted_routing_policy = TF.Nil
            , _zone_id = TF.Nil
            }

{- | The @aws_route53_zone_association@ AWS resource.

Provides a Route53 private Hosted Zone to VPC association resource.
-}
data Route53ZoneAssociationResource s = Route53ZoneAssociationResource {
      _vpc_id :: !(TF.Attribute s Text)
    {- ^ (Required) The VPC to associate with the private hosted zone. -}
    , _vpc_region :: !(TF.Attribute s TF.Region)
    {- ^ (Optional) The VPC's region. Defaults to the region of the AWS provider. -}
    , _zone_id :: !(TF.Attribute s Text)
    {- ^ (Required) The private hosted zone to associate. -}
    } deriving (Show, Eq)

instance TF.ToHCL (Route53ZoneAssociationResource s) where
    toHCL Route53ZoneAssociationResource{..} = TF.block $ catMaybes
        [ TF.assign "vpc_id" <$> TF.attribute _vpc_id
        , TF.assign "vpc_region" <$> TF.attribute _vpc_region
        , TF.assign "zone_id" <$> TF.attribute _zone_id
        ]

instance HasVpcId (Route53ZoneAssociationResource s) Text where
    type HasVpcIdThread (Route53ZoneAssociationResource s) Text = s

    vpcId =
        lens (_vpc_id :: Route53ZoneAssociationResource s -> TF.Attribute s Text)
            (\s a -> s { _vpc_id = a } :: Route53ZoneAssociationResource s)

instance HasVpcRegion (Route53ZoneAssociationResource s) TF.Region where
    type HasVpcRegionThread (Route53ZoneAssociationResource s) TF.Region = s

    vpcRegion =
        lens (_vpc_region :: Route53ZoneAssociationResource s -> TF.Attribute s TF.Region)
            (\s a -> s { _vpc_region = a } :: Route53ZoneAssociationResource s)

instance HasZoneId (Route53ZoneAssociationResource s) Text where
    type HasZoneIdThread (Route53ZoneAssociationResource s) Text = s

    zoneId =
        lens (_zone_id :: Route53ZoneAssociationResource s -> TF.Attribute s Text)
            (\s a -> s { _zone_id = a } :: Route53ZoneAssociationResource s)

instance HasComputedId (Route53ZoneAssociationResource s) Text

instance HasComputedVpcId (Route53ZoneAssociationResource s) Text

instance HasComputedVpcRegion (Route53ZoneAssociationResource s) TF.Region

instance HasComputedZoneId (Route53ZoneAssociationResource s) Text

route53ZoneAssociationResource :: TF.Resource TF.AWS (Route53ZoneAssociationResource s)
route53ZoneAssociationResource =
    TF.newResource "aws_route53_zone_association" $
        Route53ZoneAssociationResource {
              _vpc_id = TF.Nil
            , _vpc_region = TF.Nil
            , _zone_id = TF.Nil
            }

{- | The @aws_route53_zone@ AWS resource.

Provides a Route53 Hosted Zone resource.
-}
data Route53ZoneResource s = Route53ZoneResource {
      _comment :: !(TF.Attribute s Text)
    {- ^ (Optional) A comment for the hosted zone. Defaults to 'Managed by Terraform'. -}
    , _delegation_set_id :: !(TF.Attribute s Text)
    {- ^ (Optional) The ID of the reusable delegation set whose NS records you want to assign to the hosted zone. Conflicts w/ @vpc_id@ as delegation sets can only be used for public zones. -}
    , _force_destroy :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether to destroy all records (possibly managed outside of Terraform) in the zone when destroying the zone. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) This is the name of the hosted zone. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the zone. -}
    , _vpc_id :: !(TF.Attribute s Text)
    {- ^ (Optional) The VPC to associate with a private hosted zone. Specifying @vpc_id@ will create a private hosted zone. Conflicts w/ @delegation_set_id@ as delegation sets can only be used for public zones. -}
    , _vpc_region :: !(TF.Attribute s TF.Region)
    {- ^ (Optional) The VPC's region. Defaults to the region of the AWS provider. -}
    } deriving (Show, Eq)

instance TF.ToHCL (Route53ZoneResource s) where
    toHCL Route53ZoneResource{..} = TF.block $ catMaybes
        [ TF.assign "comment" <$> TF.attribute _comment
        , TF.assign "delegation_set_id" <$> TF.attribute _delegation_set_id
        , TF.assign "force_destroy" <$> TF.attribute _force_destroy
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "tags" <$> TF.attribute _tags
        , TF.assign "vpc_id" <$> TF.attribute _vpc_id
        , TF.assign "vpc_region" <$> TF.attribute _vpc_region
        ]

instance HasComment (Route53ZoneResource s) Text where
    type HasCommentThread (Route53ZoneResource s) Text = s

    comment =
        lens (_comment :: Route53ZoneResource s -> TF.Attribute s Text)
            (\s a -> s { _comment = a } :: Route53ZoneResource s)

instance HasDelegationSetId (Route53ZoneResource s) Text where
    type HasDelegationSetIdThread (Route53ZoneResource s) Text = s

    delegationSetId =
        lens (_delegation_set_id :: Route53ZoneResource s -> TF.Attribute s Text)
            (\s a -> s { _delegation_set_id = a } :: Route53ZoneResource s)

instance HasForceDestroy (Route53ZoneResource s) Text where
    type HasForceDestroyThread (Route53ZoneResource s) Text = s

    forceDestroy =
        lens (_force_destroy :: Route53ZoneResource s -> TF.Attribute s Text)
            (\s a -> s { _force_destroy = a } :: Route53ZoneResource s)

instance HasName (Route53ZoneResource s) Text where
    type HasNameThread (Route53ZoneResource s) Text = s

    name =
        lens (_name :: Route53ZoneResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: Route53ZoneResource s)

instance HasTags (Route53ZoneResource s) TF.Tags where
    type HasTagsThread (Route53ZoneResource s) TF.Tags = s

    tags =
        lens (_tags :: Route53ZoneResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: Route53ZoneResource s)

instance HasVpcId (Route53ZoneResource s) Text where
    type HasVpcIdThread (Route53ZoneResource s) Text = s

    vpcId =
        lens (_vpc_id :: Route53ZoneResource s -> TF.Attribute s Text)
            (\s a -> s { _vpc_id = a } :: Route53ZoneResource s)

instance HasVpcRegion (Route53ZoneResource s) TF.Region where
    type HasVpcRegionThread (Route53ZoneResource s) TF.Region = s

    vpcRegion =
        lens (_vpc_region :: Route53ZoneResource s -> TF.Attribute s TF.Region)
            (\s a -> s { _vpc_region = a } :: Route53ZoneResource s)

instance HasComputedNameServers (Route53ZoneResource s) Text

instance HasComputedZoneId (Route53ZoneResource s) Text

route53ZoneResource :: TF.Resource TF.AWS (Route53ZoneResource s)
route53ZoneResource =
    TF.newResource "aws_route53_zone" $
        Route53ZoneResource {
              _comment = TF.Nil
            , _delegation_set_id = TF.Nil
            , _force_destroy = TF.Nil
            , _name = TF.Nil
            , _tags = TF.Nil
            , _vpc_id = TF.Nil
            , _vpc_region = TF.Nil
            }

{- | The @aws_route@ AWS resource.

Provides a resource to create a routing table entry (a route) in a VPC
routing table. ~> NOTE on Route Tables and Routes: Terraform currently
provides both a standalone Route resource and a <route_table.html> resource
with routes defined in-line. At this time you cannot use a Route Table with
in-line routes in conjunction with any Route resources. Doing so will cause
a conflict of rule settings and will overwrite rules.
-}
data RouteResource s = RouteResource {
      _destination_cidr_block :: !(TF.Attribute s TF.CIDR)
    {- ^ (Optional) The destination CIDR block. -}
    , _destination_ipv6_cidr_block :: !(TF.Attribute s TF.CIDR)
    {- ^ (Optional) The destination IPv6 CIDR block. -}
    , _egress_only_gateway_id :: !(TF.Attribute s Text)
    {- ^ (Optional) An ID of a VPC Egress Only Internet Gateway. -}
    , _gateway_id :: !(TF.Attribute s Text)
    {- ^ (Optional) An ID of a VPC internet gateway or a virtual private gateway. -}
    , _instance_id :: !(TF.Attribute s Text)
    {- ^ (Optional) An ID of an EC2 instance. -}
    , _nat_gateway_id :: !(TF.Attribute s Text)
    {- ^ (Optional) An ID of a VPC NAT gateway. -}
    , _network_interface_id :: !(TF.Attribute s Text)
    {- ^ (Optional) An ID of a network interface. -}
    , _route_table_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the routing table. -}
    , _vpc_peering_connection_id :: !(TF.Attribute s Text)
    {- ^ (Optional) An ID of a VPC peering connection. -}
    } deriving (Show, Eq)

instance TF.ToHCL (RouteResource s) where
    toHCL RouteResource{..} = TF.block $ catMaybes
        [ TF.assign "destination_cidr_block" <$> TF.attribute _destination_cidr_block
        , TF.assign "destination_ipv6_cidr_block" <$> TF.attribute _destination_ipv6_cidr_block
        , TF.assign "egress_only_gateway_id" <$> TF.attribute _egress_only_gateway_id
        , TF.assign "gateway_id" <$> TF.attribute _gateway_id
        , TF.assign "instance_id" <$> TF.attribute _instance_id
        , TF.assign "nat_gateway_id" <$> TF.attribute _nat_gateway_id
        , TF.assign "network_interface_id" <$> TF.attribute _network_interface_id
        , TF.assign "route_table_id" <$> TF.attribute _route_table_id
        , TF.assign "vpc_peering_connection_id" <$> TF.attribute _vpc_peering_connection_id
        ]

instance HasDestinationCidrBlock (RouteResource s) TF.CIDR where
    type HasDestinationCidrBlockThread (RouteResource s) TF.CIDR = s

    destinationCidrBlock =
        lens (_destination_cidr_block :: RouteResource s -> TF.Attribute s TF.CIDR)
            (\s a -> s { _destination_cidr_block = a } :: RouteResource s)

instance HasDestinationIpv6CidrBlock (RouteResource s) TF.CIDR where
    type HasDestinationIpv6CidrBlockThread (RouteResource s) TF.CIDR = s

    destinationIpv6CidrBlock =
        lens (_destination_ipv6_cidr_block :: RouteResource s -> TF.Attribute s TF.CIDR)
            (\s a -> s { _destination_ipv6_cidr_block = a } :: RouteResource s)

instance HasEgressOnlyGatewayId (RouteResource s) Text where
    type HasEgressOnlyGatewayIdThread (RouteResource s) Text = s

    egressOnlyGatewayId =
        lens (_egress_only_gateway_id :: RouteResource s -> TF.Attribute s Text)
            (\s a -> s { _egress_only_gateway_id = a } :: RouteResource s)

instance HasGatewayId (RouteResource s) Text where
    type HasGatewayIdThread (RouteResource s) Text = s

    gatewayId =
        lens (_gateway_id :: RouteResource s -> TF.Attribute s Text)
            (\s a -> s { _gateway_id = a } :: RouteResource s)

instance HasInstanceId (RouteResource s) Text where
    type HasInstanceIdThread (RouteResource s) Text = s

    instanceId =
        lens (_instance_id :: RouteResource s -> TF.Attribute s Text)
            (\s a -> s { _instance_id = a } :: RouteResource s)

instance HasNatGatewayId (RouteResource s) Text where
    type HasNatGatewayIdThread (RouteResource s) Text = s

    natGatewayId =
        lens (_nat_gateway_id :: RouteResource s -> TF.Attribute s Text)
            (\s a -> s { _nat_gateway_id = a } :: RouteResource s)

instance HasNetworkInterfaceId (RouteResource s) Text where
    type HasNetworkInterfaceIdThread (RouteResource s) Text = s

    networkInterfaceId =
        lens (_network_interface_id :: RouteResource s -> TF.Attribute s Text)
            (\s a -> s { _network_interface_id = a } :: RouteResource s)

instance HasRouteTableId (RouteResource s) Text where
    type HasRouteTableIdThread (RouteResource s) Text = s

    routeTableId =
        lens (_route_table_id :: RouteResource s -> TF.Attribute s Text)
            (\s a -> s { _route_table_id = a } :: RouteResource s)

instance HasVpcPeeringConnectionId (RouteResource s) Text where
    type HasVpcPeeringConnectionIdThread (RouteResource s) Text = s

    vpcPeeringConnectionId =
        lens (_vpc_peering_connection_id :: RouteResource s -> TF.Attribute s Text)
            (\s a -> s { _vpc_peering_connection_id = a } :: RouteResource s)

instance HasComputedDestinationCidrBlock (RouteResource s) TF.CIDR

instance HasComputedDestinationIpv6CidrBlock (RouteResource s) TF.CIDR

instance HasComputedEgressOnlyGatewayId (RouteResource s) Text

instance HasComputedGatewayId (RouteResource s) Text

instance HasComputedInstanceId (RouteResource s) Text

instance HasComputedNatGatewayId (RouteResource s) Text

instance HasComputedNetworkInterfaceId (RouteResource s) Text

instance HasComputedRouteTableId (RouteResource s) Text

instance HasComputedVpcPeeringConnectionId (RouteResource s) Text

routeResource :: TF.Resource TF.AWS (RouteResource s)
routeResource =
    TF.newResource "aws_route" $
        RouteResource {
              _destination_cidr_block = TF.Nil
            , _destination_ipv6_cidr_block = TF.Nil
            , _egress_only_gateway_id = TF.Nil
            , _gateway_id = TF.Nil
            , _instance_id = TF.Nil
            , _nat_gateway_id = TF.Nil
            , _network_interface_id = TF.Nil
            , _route_table_id = TF.Nil
            , _vpc_peering_connection_id = TF.Nil
            }

{- | The @aws_route_table_association@ AWS resource.

Provides a resource to create an association between a subnet and routing
table.
-}
data RouteTableAssociationResource s = RouteTableAssociationResource {
      _route_table_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the routing table to associate with. -}
    , _subnet_id :: !(TF.Attribute s Text)
    {- ^ (Required) The subnet ID to create an association. -}
    } deriving (Show, Eq)

instance TF.ToHCL (RouteTableAssociationResource s) where
    toHCL RouteTableAssociationResource{..} = TF.block $ catMaybes
        [ TF.assign "route_table_id" <$> TF.attribute _route_table_id
        , TF.assign "subnet_id" <$> TF.attribute _subnet_id
        ]

instance HasRouteTableId (RouteTableAssociationResource s) Text where
    type HasRouteTableIdThread (RouteTableAssociationResource s) Text = s

    routeTableId =
        lens (_route_table_id :: RouteTableAssociationResource s -> TF.Attribute s Text)
            (\s a -> s { _route_table_id = a } :: RouteTableAssociationResource s)

instance HasSubnetId (RouteTableAssociationResource s) Text where
    type HasSubnetIdThread (RouteTableAssociationResource s) Text = s

    subnetId =
        lens (_subnet_id :: RouteTableAssociationResource s -> TF.Attribute s Text)
            (\s a -> s { _subnet_id = a } :: RouteTableAssociationResource s)

instance HasComputedId (RouteTableAssociationResource s) Text

routeTableAssociationResource :: TF.Resource TF.AWS (RouteTableAssociationResource s)
routeTableAssociationResource =
    TF.newResource "aws_route_table_association" $
        RouteTableAssociationResource {
              _route_table_id = TF.Nil
            , _subnet_id = TF.Nil
            }

{- | The @aws_route_table@ AWS resource.

Provides a resource to create a VPC routing table. ~> NOTE on Route Tables
and Routes: Terraform currently provides both a standalone <route.html> and
a Route Table resource with routes defined in-line. At this time you cannot
use a Route Table with in-line routes in conjunction with any Route
resources. Doing so will cause a conflict of rule settings and will
overwrite rules. ~> NOTE on @gateway_id@ and @nat_gateway_id@ : The AWS API
is very forgiving with these two attributes and the @aws_route_table@
resource can be created with a NAT ID specified as a Gateway ID attribute.
This will lead to a permanent diff between your configuration and statefile,
as the API returns the correct parameters in the returned route table. If
you're experiencing constant diffs in your @aws_route_table@ resources, the
first thing to check is whether or not you're specifying a NAT ID instead of
a Gateway ID, or vice-versa. ~> NOTE on @propagating_vgws@ and the
@aws_vpn_gateway_route_propagation@ resource: If the @propagating_vgws@
argument is present, it's not supported to also define route propagations
using @aws_vpn_gateway_route_propagation@ , since this resource will delete
any propagating gateways not explicitly listed in @propagating_vgws@ . Omit
this argument when defining route propagation using the separate resource.
-}
data RouteTableResource s = RouteTableResource {
      _propagating_vgws :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of virtual gateways for propagation. -}
    , _route :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of route objects. Their keys are documented below. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _vpc_id :: !(TF.Attribute s Text)
    {- ^ (Required) The VPC ID. -}
    } deriving (Show, Eq)

instance TF.ToHCL (RouteTableResource s) where
    toHCL RouteTableResource{..} = TF.block $ catMaybes
        [ TF.assign "propagating_vgws" <$> TF.attribute _propagating_vgws
        , TF.assign "route" <$> TF.attribute _route
        , TF.assign "tags" <$> TF.attribute _tags
        , TF.assign "vpc_id" <$> TF.attribute _vpc_id
        ]

instance HasPropagatingVgws (RouteTableResource s) Text where
    type HasPropagatingVgwsThread (RouteTableResource s) Text = s

    propagatingVgws =
        lens (_propagating_vgws :: RouteTableResource s -> TF.Attribute s Text)
            (\s a -> s { _propagating_vgws = a } :: RouteTableResource s)

instance HasRoute (RouteTableResource s) Text where
    type HasRouteThread (RouteTableResource s) Text = s

    route =
        lens (_route :: RouteTableResource s -> TF.Attribute s Text)
            (\s a -> s { _route = a } :: RouteTableResource s)

instance HasTags (RouteTableResource s) TF.Tags where
    type HasTagsThread (RouteTableResource s) TF.Tags = s

    tags =
        lens (_tags :: RouteTableResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: RouteTableResource s)

instance HasVpcId (RouteTableResource s) Text where
    type HasVpcIdThread (RouteTableResource s) Text = s

    vpcId =
        lens (_vpc_id :: RouteTableResource s -> TF.Attribute s Text)
            (\s a -> s { _vpc_id = a } :: RouteTableResource s)

instance HasComputedId (RouteTableResource s) Text

routeTableResource :: TF.Resource TF.AWS (RouteTableResource s)
routeTableResource =
    TF.newResource "aws_route_table" $
        RouteTableResource {
              _propagating_vgws = TF.Nil
            , _route = TF.Nil
            , _tags = TF.Nil
            , _vpc_id = TF.Nil
            }

{- | The @aws_s3_bucket_notification@ AWS resource.

Provides a S3 bucket notification resource.
-}
data S3BucketNotificationResource s = S3BucketNotificationResource {
      _bucket :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the bucket to put notification configuration. -}
    , _lambda_function :: !(TF.Attribute s Text)
    {- ^ (Optional, Multiple) Used to configure notifications to a Lambda Function (documented below). -}
    , _queue :: !(TF.Attribute s Text)
    {- ^ (Optional) The notification configuration to SQS Queue (documented below). -}
    , _topic :: !(TF.Attribute s Text)
    {- ^ (Optional) The notification configuration to SNS Topic (documented below). -}
    } deriving (Show, Eq)

instance TF.ToHCL (S3BucketNotificationResource s) where
    toHCL S3BucketNotificationResource{..} = TF.block $ catMaybes
        [ TF.assign "bucket" <$> TF.attribute _bucket
        , TF.assign "lambda_function" <$> TF.attribute _lambda_function
        , TF.assign "queue" <$> TF.attribute _queue
        , TF.assign "topic" <$> TF.attribute _topic
        ]

instance HasBucket (S3BucketNotificationResource s) Text where
    type HasBucketThread (S3BucketNotificationResource s) Text = s

    bucket =
        lens (_bucket :: S3BucketNotificationResource s -> TF.Attribute s Text)
            (\s a -> s { _bucket = a } :: S3BucketNotificationResource s)

instance HasLambdaFunction (S3BucketNotificationResource s) Text where
    type HasLambdaFunctionThread (S3BucketNotificationResource s) Text = s

    lambdaFunction =
        lens (_lambda_function :: S3BucketNotificationResource s -> TF.Attribute s Text)
            (\s a -> s { _lambda_function = a } :: S3BucketNotificationResource s)

instance HasQueue (S3BucketNotificationResource s) Text where
    type HasQueueThread (S3BucketNotificationResource s) Text = s

    queue =
        lens (_queue :: S3BucketNotificationResource s -> TF.Attribute s Text)
            (\s a -> s { _queue = a } :: S3BucketNotificationResource s)

instance HasTopic (S3BucketNotificationResource s) Text where
    type HasTopicThread (S3BucketNotificationResource s) Text = s

    topic =
        lens (_topic :: S3BucketNotificationResource s -> TF.Attribute s Text)
            (\s a -> s { _topic = a } :: S3BucketNotificationResource s)

s3BucketNotificationResource :: TF.Resource TF.AWS (S3BucketNotificationResource s)
s3BucketNotificationResource =
    TF.newResource "aws_s3_bucket_notification" $
        S3BucketNotificationResource {
              _bucket = TF.Nil
            , _lambda_function = TF.Nil
            , _queue = TF.Nil
            , _topic = TF.Nil
            }

{- | The @aws_s3_bucket_object@ AWS resource.

Provides a S3 bucket object resource.
-}
data S3BucketObjectResource s = S3BucketObjectResource {
      _acl :: !(TF.Attribute s Text)
    {- ^ (Optional) The <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl> to apply. Defaults to "private". -}
    , _bucket :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the bucket to put the file in. -}
    , _cache_control :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies caching behavior along the request/reply chain Read <http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9> for further details. -}
    , _content :: !(TF.Attribute s Text)
    {- ^ (Required unless @source@ given) The literal content being uploaded to the bucket. -}
    , _content_disposition :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies presentational information for the object. Read <http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.5.1> for further information. -}
    , _content_encoding :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field. Read <http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11> for further information. -}
    , _content_language :: !(TF.Attribute s Text)
    {- ^ (Optional) The language the content is in e.g. en-US or en-GB. -}
    , _content_type :: !(TF.Attribute s Text)
    {- ^ (Optional) A standard MIME type describing the format of the object data, e.g. application/octet-stream. All Valid MIME Types are valid for this input. -}
    , _etag :: !(TF.Attribute s Text)
    {- ^ (Optional) Used to trigger updates. The only meaningful value is @${md5(file("path/to/file"))}@ . This attribute is not compatible with @kms_key_id@ . -}
    , _key :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the object once it is in the bucket. -}
    , _kms_key_id :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies the AWS KMS Key ARN to use for object encryption. This value is a fully qualified ARN of the KMS Key. If using @aws_kms_key@ , use the exported @arn@ attribute: @kms_key_id = "${aws_kms_key.foo.arn}"@ -}
    , _server_side_encryption :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies server-side encryption of the object in S3. Valid values are " @AES256@ " and " @aws:kms@ ". -}
    , _source :: !(TF.Attribute s Text)
    {- ^ (Required) The path to the source file being uploaded to the bucket. -}
    , _storage_class :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies the desired <http://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html> for the object. Can be either " @STANDARD@ ", " @REDUCED_REDUNDANCY@ ", or " @STANDARD_IA@ ". Defaults to " @STANDARD@ ". -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the object. -}
    , _website_redirect :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies a target URL for <http://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html> . -}
    } deriving (Show, Eq)

instance TF.ToHCL (S3BucketObjectResource s) where
    toHCL S3BucketObjectResource{..} = TF.block $ catMaybes
        [ TF.assign "acl" <$> TF.attribute _acl
        , TF.assign "bucket" <$> TF.attribute _bucket
        , TF.assign "cache_control" <$> TF.attribute _cache_control
        , TF.assign "content" <$> TF.attribute _content
        , TF.assign "content_disposition" <$> TF.attribute _content_disposition
        , TF.assign "content_encoding" <$> TF.attribute _content_encoding
        , TF.assign "content_language" <$> TF.attribute _content_language
        , TF.assign "content_type" <$> TF.attribute _content_type
        , TF.assign "etag" <$> TF.attribute _etag
        , TF.assign "key" <$> TF.attribute _key
        , TF.assign "kms_key_id" <$> TF.attribute _kms_key_id
        , TF.assign "server_side_encryption" <$> TF.attribute _server_side_encryption
        , TF.assign "source" <$> TF.attribute _source
        , TF.assign "storage_class" <$> TF.attribute _storage_class
        , TF.assign "tags" <$> TF.attribute _tags
        , TF.assign "website_redirect" <$> TF.attribute _website_redirect
        ]

instance HasAcl (S3BucketObjectResource s) Text where
    type HasAclThread (S3BucketObjectResource s) Text = s

    acl =
        lens (_acl :: S3BucketObjectResource s -> TF.Attribute s Text)
            (\s a -> s { _acl = a } :: S3BucketObjectResource s)

instance HasBucket (S3BucketObjectResource s) Text where
    type HasBucketThread (S3BucketObjectResource s) Text = s

    bucket =
        lens (_bucket :: S3BucketObjectResource s -> TF.Attribute s Text)
            (\s a -> s { _bucket = a } :: S3BucketObjectResource s)

instance HasCacheControl (S3BucketObjectResource s) Text where
    type HasCacheControlThread (S3BucketObjectResource s) Text = s

    cacheControl =
        lens (_cache_control :: S3BucketObjectResource s -> TF.Attribute s Text)
            (\s a -> s { _cache_control = a } :: S3BucketObjectResource s)

instance HasContent (S3BucketObjectResource s) Text where
    type HasContentThread (S3BucketObjectResource s) Text = s

    content =
        lens (_content :: S3BucketObjectResource s -> TF.Attribute s Text)
            (\s a -> s { _content = a } :: S3BucketObjectResource s)

instance HasContentDisposition (S3BucketObjectResource s) Text where
    type HasContentDispositionThread (S3BucketObjectResource s) Text = s

    contentDisposition =
        lens (_content_disposition :: S3BucketObjectResource s -> TF.Attribute s Text)
            (\s a -> s { _content_disposition = a } :: S3BucketObjectResource s)

instance HasContentEncoding (S3BucketObjectResource s) Text where
    type HasContentEncodingThread (S3BucketObjectResource s) Text = s

    contentEncoding =
        lens (_content_encoding :: S3BucketObjectResource s -> TF.Attribute s Text)
            (\s a -> s { _content_encoding = a } :: S3BucketObjectResource s)

instance HasContentLanguage (S3BucketObjectResource s) Text where
    type HasContentLanguageThread (S3BucketObjectResource s) Text = s

    contentLanguage =
        lens (_content_language :: S3BucketObjectResource s -> TF.Attribute s Text)
            (\s a -> s { _content_language = a } :: S3BucketObjectResource s)

instance HasContentType (S3BucketObjectResource s) Text where
    type HasContentTypeThread (S3BucketObjectResource s) Text = s

    contentType =
        lens (_content_type :: S3BucketObjectResource s -> TF.Attribute s Text)
            (\s a -> s { _content_type = a } :: S3BucketObjectResource s)

instance HasEtag (S3BucketObjectResource s) Text where
    type HasEtagThread (S3BucketObjectResource s) Text = s

    etag =
        lens (_etag :: S3BucketObjectResource s -> TF.Attribute s Text)
            (\s a -> s { _etag = a } :: S3BucketObjectResource s)

instance HasKey (S3BucketObjectResource s) Text where
    type HasKeyThread (S3BucketObjectResource s) Text = s

    key =
        lens (_key :: S3BucketObjectResource s -> TF.Attribute s Text)
            (\s a -> s { _key = a } :: S3BucketObjectResource s)

instance HasKmsKeyId (S3BucketObjectResource s) Text where
    type HasKmsKeyIdThread (S3BucketObjectResource s) Text = s

    kmsKeyId =
        lens (_kms_key_id :: S3BucketObjectResource s -> TF.Attribute s Text)
            (\s a -> s { _kms_key_id = a } :: S3BucketObjectResource s)

instance HasServerSideEncryption (S3BucketObjectResource s) Text where
    type HasServerSideEncryptionThread (S3BucketObjectResource s) Text = s

    serverSideEncryption =
        lens (_server_side_encryption :: S3BucketObjectResource s -> TF.Attribute s Text)
            (\s a -> s { _server_side_encryption = a } :: S3BucketObjectResource s)

instance HasSource (S3BucketObjectResource s) Text where
    type HasSourceThread (S3BucketObjectResource s) Text = s

    source =
        lens (_source :: S3BucketObjectResource s -> TF.Attribute s Text)
            (\s a -> s { _source = a } :: S3BucketObjectResource s)

instance HasStorageClass (S3BucketObjectResource s) Text where
    type HasStorageClassThread (S3BucketObjectResource s) Text = s

    storageClass =
        lens (_storage_class :: S3BucketObjectResource s -> TF.Attribute s Text)
            (\s a -> s { _storage_class = a } :: S3BucketObjectResource s)

instance HasTags (S3BucketObjectResource s) TF.Tags where
    type HasTagsThread (S3BucketObjectResource s) TF.Tags = s

    tags =
        lens (_tags :: S3BucketObjectResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: S3BucketObjectResource s)

instance HasWebsiteRedirect (S3BucketObjectResource s) Text where
    type HasWebsiteRedirectThread (S3BucketObjectResource s) Text = s

    websiteRedirect =
        lens (_website_redirect :: S3BucketObjectResource s -> TF.Attribute s Text)
            (\s a -> s { _website_redirect = a } :: S3BucketObjectResource s)

instance HasComputedEtag (S3BucketObjectResource s) Text

instance HasComputedId (S3BucketObjectResource s) Text

instance HasComputedVersionId (S3BucketObjectResource s) Text

s3BucketObjectResource :: TF.Resource TF.AWS (S3BucketObjectResource s)
s3BucketObjectResource =
    TF.newResource "aws_s3_bucket_object" $
        S3BucketObjectResource {
              _acl = TF.Nil
            , _bucket = TF.Nil
            , _cache_control = TF.Nil
            , _content = TF.Nil
            , _content_disposition = TF.Nil
            , _content_encoding = TF.Nil
            , _content_language = TF.Nil
            , _content_type = TF.Nil
            , _etag = TF.Nil
            , _key = TF.Nil
            , _kms_key_id = TF.Nil
            , _server_side_encryption = TF.Nil
            , _source = TF.Nil
            , _storage_class = TF.Nil
            , _tags = TF.Nil
            , _website_redirect = TF.Nil
            }

{- | The @aws_s3_bucket_policy@ AWS resource.

Attaches a policy to an S3 bucket resource.
-}
data S3BucketPolicyResource s = S3BucketPolicyResource {
      _bucket :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the bucket to which to apply the policy. -}
    , _policy :: !(TF.Attribute s Text)
    {- ^ (Required) The text of the policy. -}
    } deriving (Show, Eq)

instance TF.ToHCL (S3BucketPolicyResource s) where
    toHCL S3BucketPolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "bucket" <$> TF.attribute _bucket
        , TF.assign "policy" <$> TF.attribute _policy
        ]

instance HasBucket (S3BucketPolicyResource s) Text where
    type HasBucketThread (S3BucketPolicyResource s) Text = s

    bucket =
        lens (_bucket :: S3BucketPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _bucket = a } :: S3BucketPolicyResource s)

instance HasPolicy (S3BucketPolicyResource s) Text where
    type HasPolicyThread (S3BucketPolicyResource s) Text = s

    policy =
        lens (_policy :: S3BucketPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _policy = a } :: S3BucketPolicyResource s)

s3BucketPolicyResource :: TF.Resource TF.AWS (S3BucketPolicyResource s)
s3BucketPolicyResource =
    TF.newResource "aws_s3_bucket_policy" $
        S3BucketPolicyResource {
              _bucket = TF.Nil
            , _policy = TF.Nil
            }

{- | The @aws_s3_bucket@ AWS resource.

Provides a S3 bucket resource.
-}
data S3BucketResource s = S3BucketResource {
      _acceleration_status :: !(TF.Attribute s Text)
    {- ^ (Optional) Sets the accelerate configuration of an existing bucket. Can be @Enabled@ or @Suspended@ . -}
    , _acl :: !(TF.Attribute s Text)
    {- ^ (Optional) The <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl> to apply. Defaults to "private". -}
    , _bucket :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) The name of the bucket. If omitted, Terraform will assign a random, unique name. -}
    , _bucket_prefix :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) Creates a unique bucket name beginning with the specified prefix. Conflicts with @bucket@ . -}
    , _cors_rule :: !(TF.Attribute s Text)
    {- ^ (Optional) A rule of <https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html> (documented below). -}
    , _force_destroy :: !(TF.Attribute s Text)
    {- ^ (Optional, Default:false ) A boolean that indicates all objects should be deleted from the bucket so that the bucket can be destroyed without error. These objects are not recoverable. -}
    , _lifecycle_rule :: !(TF.Attribute s Text)
    {- ^ (Optional) A configuration of <http://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html> (documented below). -}
    , _logging :: !(TF.Attribute s Text)
    {- ^ (Optional) A settings of <https://docs.aws.amazon.com/AmazonS3/latest/UG/ManagingBucketLogging.html> (documented below). -}
    , _policy :: !(TF.Attribute s Text)
    {- ^ (Optional) A valid <https://docs.aws.amazon.com/AmazonS3/latest/dev/example-bucket-policies.html> JSON document. Note that if the policy document is not specific enough (but still valid), Terraform may view the policy as constantly changing in a @terraform plan@ . In this case, please make sure you use the verbose/specific version of the policy. -}
    , _region :: !(TF.Attribute s TF.Region)
    {- ^ (Optional) If specified, the AWS region this bucket should reside in. Otherwise, the region used by the callee. -}
    , _replication_configuration :: !(TF.Attribute s Text)
    {- ^ (Optional) A configuration of <http://docs.aws.amazon.com/AmazonS3/latest/dev/crr.html> (documented below). -}
    , _request_payer :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies who should bear the cost of Amazon S3 data transfer. Can be either @BucketOwner@ or @Requester@ . By default, the owner of the S3 bucket would incur the costs of any data transfer. See <http://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html> developer guide for more information. -}
    , _server_side_encryption_configuration :: !(TF.Attribute s Text)
    {- ^ (Optional) A configuration of <http://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html> (documented below) -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the bucket. -}
    , _versioning :: !(TF.Attribute s (TF.S3BucketVersioning s))
    {- ^ (Optional) A state of <https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html> (documented below) -}
    , _website :: !(TF.Attribute s Text)
    {- ^ (Optional) A website object (documented below). -}
    } deriving (Show, Eq)

instance TF.ToHCL (S3BucketResource s) where
    toHCL S3BucketResource{..} = TF.block $ catMaybes
        [ TF.assign "acceleration_status" <$> TF.attribute _acceleration_status
        , TF.assign "acl" <$> TF.attribute _acl
        , TF.assign "bucket" <$> TF.attribute _bucket
        , TF.assign "bucket_prefix" <$> TF.attribute _bucket_prefix
        , TF.assign "cors_rule" <$> TF.attribute _cors_rule
        , TF.assign "force_destroy" <$> TF.attribute _force_destroy
        , TF.assign "lifecycle_rule" <$> TF.attribute _lifecycle_rule
        , TF.assign "logging" <$> TF.attribute _logging
        , TF.assign "policy" <$> TF.attribute _policy
        , TF.assign "region" <$> TF.attribute _region
        , TF.assign "replication_configuration" <$> TF.attribute _replication_configuration
        , TF.assign "request_payer" <$> TF.attribute _request_payer
        , TF.assign "server_side_encryption_configuration" <$> TF.attribute _server_side_encryption_configuration
        , TF.assign "tags" <$> TF.attribute _tags
        , TF.assign "versioning" <$> TF.attribute _versioning
        , TF.assign "website" <$> TF.attribute _website
        ]

instance HasAccelerationStatus (S3BucketResource s) Text where
    type HasAccelerationStatusThread (S3BucketResource s) Text = s

    accelerationStatus =
        lens (_acceleration_status :: S3BucketResource s -> TF.Attribute s Text)
            (\s a -> s { _acceleration_status = a } :: S3BucketResource s)

instance HasAcl (S3BucketResource s) Text where
    type HasAclThread (S3BucketResource s) Text = s

    acl =
        lens (_acl :: S3BucketResource s -> TF.Attribute s Text)
            (\s a -> s { _acl = a } :: S3BucketResource s)

instance HasBucket (S3BucketResource s) Text where
    type HasBucketThread (S3BucketResource s) Text = s

    bucket =
        lens (_bucket :: S3BucketResource s -> TF.Attribute s Text)
            (\s a -> s { _bucket = a } :: S3BucketResource s)

instance HasBucketPrefix (S3BucketResource s) Text where
    type HasBucketPrefixThread (S3BucketResource s) Text = s

    bucketPrefix =
        lens (_bucket_prefix :: S3BucketResource s -> TF.Attribute s Text)
            (\s a -> s { _bucket_prefix = a } :: S3BucketResource s)

instance HasCorsRule (S3BucketResource s) Text where
    type HasCorsRuleThread (S3BucketResource s) Text = s

    corsRule =
        lens (_cors_rule :: S3BucketResource s -> TF.Attribute s Text)
            (\s a -> s { _cors_rule = a } :: S3BucketResource s)

instance HasForceDestroy (S3BucketResource s) Text where
    type HasForceDestroyThread (S3BucketResource s) Text = s

    forceDestroy =
        lens (_force_destroy :: S3BucketResource s -> TF.Attribute s Text)
            (\s a -> s { _force_destroy = a } :: S3BucketResource s)

instance HasLifecycleRule (S3BucketResource s) Text where
    type HasLifecycleRuleThread (S3BucketResource s) Text = s

    lifecycleRule =
        lens (_lifecycle_rule :: S3BucketResource s -> TF.Attribute s Text)
            (\s a -> s { _lifecycle_rule = a } :: S3BucketResource s)

instance HasLogging (S3BucketResource s) Text where
    type HasLoggingThread (S3BucketResource s) Text = s

    logging =
        lens (_logging :: S3BucketResource s -> TF.Attribute s Text)
            (\s a -> s { _logging = a } :: S3BucketResource s)

instance HasPolicy (S3BucketResource s) Text where
    type HasPolicyThread (S3BucketResource s) Text = s

    policy =
        lens (_policy :: S3BucketResource s -> TF.Attribute s Text)
            (\s a -> s { _policy = a } :: S3BucketResource s)

instance HasRegion (S3BucketResource s) TF.Region where
    type HasRegionThread (S3BucketResource s) TF.Region = s

    region =
        lens (_region :: S3BucketResource s -> TF.Attribute s TF.Region)
            (\s a -> s { _region = a } :: S3BucketResource s)

instance HasReplicationConfiguration (S3BucketResource s) Text where
    type HasReplicationConfigurationThread (S3BucketResource s) Text = s

    replicationConfiguration =
        lens (_replication_configuration :: S3BucketResource s -> TF.Attribute s Text)
            (\s a -> s { _replication_configuration = a } :: S3BucketResource s)

instance HasRequestPayer (S3BucketResource s) Text where
    type HasRequestPayerThread (S3BucketResource s) Text = s

    requestPayer =
        lens (_request_payer :: S3BucketResource s -> TF.Attribute s Text)
            (\s a -> s { _request_payer = a } :: S3BucketResource s)

instance HasServerSideEncryptionConfiguration (S3BucketResource s) Text where
    type HasServerSideEncryptionConfigurationThread (S3BucketResource s) Text = s

    serverSideEncryptionConfiguration =
        lens (_server_side_encryption_configuration :: S3BucketResource s -> TF.Attribute s Text)
            (\s a -> s { _server_side_encryption_configuration = a } :: S3BucketResource s)

instance HasTags (S3BucketResource s) TF.Tags where
    type HasTagsThread (S3BucketResource s) TF.Tags = s

    tags =
        lens (_tags :: S3BucketResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: S3BucketResource s)

instance HasVersioning (S3BucketResource s) (TF.S3BucketVersioning s) where
    type HasVersioningThread (S3BucketResource s) (TF.S3BucketVersioning s) = s

    versioning =
        lens (_versioning :: S3BucketResource s -> TF.Attribute s (TF.S3BucketVersioning s))
            (\s a -> s { _versioning = a } :: S3BucketResource s)

instance HasWebsite (S3BucketResource s) Text where
    type HasWebsiteThread (S3BucketResource s) Text = s

    website =
        lens (_website :: S3BucketResource s -> TF.Attribute s Text)
            (\s a -> s { _website = a } :: S3BucketResource s)

instance HasComputedArn (S3BucketResource s) Text

instance HasComputedBucketDomainName (S3BucketResource s) Text

instance HasComputedHostedZoneId (S3BucketResource s) Text

instance HasComputedId (S3BucketResource s) Text

instance HasComputedRegion (S3BucketResource s) TF.Region

instance HasComputedWebsiteDomain (S3BucketResource s) Text

instance HasComputedWebsiteEndpoint (S3BucketResource s) Text

s3BucketResource :: TF.Resource TF.AWS (S3BucketResource s)
s3BucketResource =
    TF.newResource "aws_s3_bucket" $
        S3BucketResource {
              _acceleration_status = TF.Nil
            , _acl = TF.Nil
            , _bucket = TF.Nil
            , _bucket_prefix = TF.Nil
            , _cors_rule = TF.Nil
            , _force_destroy = TF.Nil
            , _lifecycle_rule = TF.Nil
            , _logging = TF.Nil
            , _policy = TF.Nil
            , _region = TF.Nil
            , _replication_configuration = TF.Nil
            , _request_payer = TF.Nil
            , _server_side_encryption_configuration = TF.Nil
            , _tags = TF.Nil
            , _versioning = TF.Nil
            , _website = TF.Nil
            }

{- | The @aws_security_group@ AWS resource.

Provides a security group resource. ~> NOTE on Security Groups and Security
Group Rules: Terraform currently provides both a standalone
<security_group_rule.html> (a single @ingress@ or @egress@ rule), and a
Security Group resource with @ingress@ and @egress@ rules defined in-line.
At this time you cannot use a Security Group with in-line rules in
conjunction with any Security Group Rule resources. Doing so will cause a
conflict of rule settings and will overwrite rules.
-}
data SecurityGroupResource s = SecurityGroupResource {
      _description :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) The security group description. Defaults to "Managed by Terraform". Cannot be "". NOTE : This field maps to the AWS @GroupDescription@ attribute, for which there is no Update API. If you'd like to classify your security groups in a way that can be updated, use @tags@ . -}
    , _egress :: !(TF.Attribute s Text)
    {- ^ (Optional, VPC only) Can be specified multiple times for each egress rule. Each egress block supports fields documented below. -}
    , _ingress :: !(TF.Attribute s Text)
    {- ^ (Optional) Can be specified multiple times for each ingress rule. Each ingress block supports fields documented below. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) The name of the security group. If omitted, Terraform will assign a random, unique name -}
    , _name_prefix :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) Creates a unique name beginning with the specified prefix. Conflicts with @name@ . -}
    , _revoke_rules_on_delete :: !(TF.Attribute s Text)
    {- ^ (Optional) Instruct Terraform to revoke all of the Security Groups attached ingress and egress rules before deleting the rule itself. This is normally not needed, however certain AWS services such as Elastic Map Reduce may automatically add required rules to security groups used with the service, and those rules may contain a cyclic dependency that prevent the security groups from being destroyed without removing the dependency first. Default @false@ -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _vpc_id :: !(TF.Attribute s Text)
    {- ^ (Optional, Forces new resource) The VPC ID. -}
    } deriving (Show, Eq)

instance TF.ToHCL (SecurityGroupResource s) where
    toHCL SecurityGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.attribute _description
        , TF.assign "egress" <$> TF.attribute _egress
        , TF.assign "ingress" <$> TF.attribute _ingress
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "name_prefix" <$> TF.attribute _name_prefix
        , TF.assign "revoke_rules_on_delete" <$> TF.attribute _revoke_rules_on_delete
        , TF.assign "tags" <$> TF.attribute _tags
        , TF.assign "vpc_id" <$> TF.attribute _vpc_id
        ]

instance HasDescription (SecurityGroupResource s) Text where
    type HasDescriptionThread (SecurityGroupResource s) Text = s

    description =
        lens (_description :: SecurityGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: SecurityGroupResource s)

instance HasEgress (SecurityGroupResource s) Text where
    type HasEgressThread (SecurityGroupResource s) Text = s

    egress =
        lens (_egress :: SecurityGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _egress = a } :: SecurityGroupResource s)

instance HasIngress (SecurityGroupResource s) Text where
    type HasIngressThread (SecurityGroupResource s) Text = s

    ingress =
        lens (_ingress :: SecurityGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _ingress = a } :: SecurityGroupResource s)

instance HasName (SecurityGroupResource s) Text where
    type HasNameThread (SecurityGroupResource s) Text = s

    name =
        lens (_name :: SecurityGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: SecurityGroupResource s)

instance HasNamePrefix (SecurityGroupResource s) Text where
    type HasNamePrefixThread (SecurityGroupResource s) Text = s

    namePrefix =
        lens (_name_prefix :: SecurityGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _name_prefix = a } :: SecurityGroupResource s)

instance HasRevokeRulesOnDelete (SecurityGroupResource s) Text where
    type HasRevokeRulesOnDeleteThread (SecurityGroupResource s) Text = s

    revokeRulesOnDelete =
        lens (_revoke_rules_on_delete :: SecurityGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _revoke_rules_on_delete = a } :: SecurityGroupResource s)

instance HasTags (SecurityGroupResource s) TF.Tags where
    type HasTagsThread (SecurityGroupResource s) TF.Tags = s

    tags =
        lens (_tags :: SecurityGroupResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: SecurityGroupResource s)

instance HasVpcId (SecurityGroupResource s) Text where
    type HasVpcIdThread (SecurityGroupResource s) Text = s

    vpcId =
        lens (_vpc_id :: SecurityGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _vpc_id = a } :: SecurityGroupResource s)

securityGroupResource :: TF.Resource TF.AWS (SecurityGroupResource s)
securityGroupResource =
    TF.newResource "aws_security_group" $
        SecurityGroupResource {
              _description = TF.Nil
            , _egress = TF.Nil
            , _ingress = TF.Nil
            , _name = TF.Nil
            , _name_prefix = TF.Nil
            , _revoke_rules_on_delete = TF.Nil
            , _tags = TF.Nil
            , _vpc_id = TF.Nil
            }

{- | The @aws_security_group_rule@ AWS resource.

Provides a security group rule resource. Represents a single @ingress@ or
@egress@ group rule, which can be added to external Security Groups. ~> NOTE
on Security Groups and Security Group Rules: Terraform currently provides
both a standalone Security Group Rule resource (a single @ingress@ or
@egress@ rule), and a <security_group.html> with @ingress@ and @egress@
rules defined in-line. At this time you cannot use a Security Group with
in-line rules in conjunction with any Security Group Rule resources. Doing
so will cause a conflict of rule settings and will overwrite rules.
-}
data SecurityGroupRuleResource s = SecurityGroupRuleResource {
      _cidr_blocks :: !(TF.Attribute s Text)
    {- ^ (Optional) List of CIDR blocks. Cannot be specified with @source_security_group_id@ . -}
    , _description :: !(TF.Attribute s Text)
    {- ^ (Optional) Description of the rule. -}
    , _from_port :: !(TF.Attribute s TF.Word16)
    {- ^ (Required) The start port (or ICMP type number if protocol is "icmp"). -}
    , _ipv6_cidr_blocks :: !(TF.Attribute s Text)
    {- ^ (Optional) List of IPv6 CIDR blocks. -}
    , _prefix_list_ids :: !(TF.Attribute s Text)
    {- ^ (Optional) List of prefix list IDs (for allowing access to VPC endpoints). Only valid with @egress@ . -}
    , _protocol :: !(TF.Attribute s Text)
    {- ^ (Required) The protocol. If not icmp, tcp, udp, or all use the <https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml> -}
    , _security_group_id :: !(TF.Attribute s Text)
    {- ^ (Required) The security group to apply this rule to. -}
    , _self :: !(TF.Attribute s Text)
    {- ^ (Optional) If true, the security group itself will be added as a source to this ingress rule. -}
    , _source_security_group_id :: !(TF.Attribute s Text)
    {- ^ (Optional) The security group id to allow access to/from, depending on the @type@ . Cannot be specified with @cidr_blocks@ . -}
    , _to_port :: !(TF.Attribute s TF.Word16)
    {- ^ (Required) The end port (or ICMP code if protocol is "icmp"). -}
    , _type' :: !(TF.Attribute s Text)
    {- ^ (Required) The type of rule being created. Valid options are @ingress@ (inbound) or @egress@ (outbound). -}
    } deriving (Show, Eq)

instance TF.ToHCL (SecurityGroupRuleResource s) where
    toHCL SecurityGroupRuleResource{..} = TF.block $ catMaybes
        [ TF.assign "cidr_blocks" <$> TF.attribute _cidr_blocks
        , TF.assign "description" <$> TF.attribute _description
        , TF.assign "from_port" <$> TF.attribute _from_port
        , TF.assign "ipv6_cidr_blocks" <$> TF.attribute _ipv6_cidr_blocks
        , TF.assign "prefix_list_ids" <$> TF.attribute _prefix_list_ids
        , TF.assign "protocol" <$> TF.attribute _protocol
        , TF.assign "security_group_id" <$> TF.attribute _security_group_id
        , TF.assign "self" <$> TF.attribute _self
        , TF.assign "source_security_group_id" <$> TF.attribute _source_security_group_id
        , TF.assign "to_port" <$> TF.attribute _to_port
        , TF.assign "type" <$> TF.attribute _type'
        ]

instance HasCidrBlocks (SecurityGroupRuleResource s) Text where
    type HasCidrBlocksThread (SecurityGroupRuleResource s) Text = s

    cidrBlocks =
        lens (_cidr_blocks :: SecurityGroupRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _cidr_blocks = a } :: SecurityGroupRuleResource s)

instance HasDescription (SecurityGroupRuleResource s) Text where
    type HasDescriptionThread (SecurityGroupRuleResource s) Text = s

    description =
        lens (_description :: SecurityGroupRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: SecurityGroupRuleResource s)

instance HasFromPort (SecurityGroupRuleResource s) TF.Word16 where
    type HasFromPortThread (SecurityGroupRuleResource s) TF.Word16 = s

    fromPort =
        lens (_from_port :: SecurityGroupRuleResource s -> TF.Attribute s TF.Word16)
            (\s a -> s { _from_port = a } :: SecurityGroupRuleResource s)

instance HasIpv6CidrBlocks (SecurityGroupRuleResource s) Text where
    type HasIpv6CidrBlocksThread (SecurityGroupRuleResource s) Text = s

    ipv6CidrBlocks =
        lens (_ipv6_cidr_blocks :: SecurityGroupRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _ipv6_cidr_blocks = a } :: SecurityGroupRuleResource s)

instance HasPrefixListIds (SecurityGroupRuleResource s) Text where
    type HasPrefixListIdsThread (SecurityGroupRuleResource s) Text = s

    prefixListIds =
        lens (_prefix_list_ids :: SecurityGroupRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _prefix_list_ids = a } :: SecurityGroupRuleResource s)

instance HasProtocol (SecurityGroupRuleResource s) Text where
    type HasProtocolThread (SecurityGroupRuleResource s) Text = s

    protocol =
        lens (_protocol :: SecurityGroupRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _protocol = a } :: SecurityGroupRuleResource s)

instance HasSecurityGroupId (SecurityGroupRuleResource s) Text where
    type HasSecurityGroupIdThread (SecurityGroupRuleResource s) Text = s

    securityGroupId =
        lens (_security_group_id :: SecurityGroupRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _security_group_id = a } :: SecurityGroupRuleResource s)

instance HasSelf (SecurityGroupRuleResource s) Text where
    type HasSelfThread (SecurityGroupRuleResource s) Text = s

    self =
        lens (_self :: SecurityGroupRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _self = a } :: SecurityGroupRuleResource s)

instance HasSourceSecurityGroupId (SecurityGroupRuleResource s) Text where
    type HasSourceSecurityGroupIdThread (SecurityGroupRuleResource s) Text = s

    sourceSecurityGroupId =
        lens (_source_security_group_id :: SecurityGroupRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _source_security_group_id = a } :: SecurityGroupRuleResource s)

instance HasToPort (SecurityGroupRuleResource s) TF.Word16 where
    type HasToPortThread (SecurityGroupRuleResource s) TF.Word16 = s

    toPort =
        lens (_to_port :: SecurityGroupRuleResource s -> TF.Attribute s TF.Word16)
            (\s a -> s { _to_port = a } :: SecurityGroupRuleResource s)

instance HasType' (SecurityGroupRuleResource s) Text where
    type HasType'Thread (SecurityGroupRuleResource s) Text = s

    type' =
        lens (_type' :: SecurityGroupRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _type' = a } :: SecurityGroupRuleResource s)

securityGroupRuleResource :: TF.Resource TF.AWS (SecurityGroupRuleResource s)
securityGroupRuleResource =
    TF.newResource "aws_security_group_rule" $
        SecurityGroupRuleResource {
              _cidr_blocks = TF.Nil
            , _description = TF.Nil
            , _from_port = TF.Nil
            , _ipv6_cidr_blocks = TF.Nil
            , _prefix_list_ids = TF.Nil
            , _protocol = TF.Nil
            , _security_group_id = TF.Nil
            , _self = TF.Nil
            , _source_security_group_id = TF.Nil
            , _to_port = TF.Nil
            , _type' = TF.Nil
            }

{- | The @aws_service_discovery_private_dns_namespace@ AWS resource.

Provides a Service Discovery Private DNS Namespace resource.
-}
data ServiceDiscoveryPrivateDnsNamespaceResource s = ServiceDiscoveryPrivateDnsNamespaceResource {
      _description :: !(TF.Attribute s Text)
    {- ^ (Optional) The description that you specify for the namespace when you create it. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the namespace. -}
    , _vpc :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of VPC that you want to associate the namespace with. -}
    } deriving (Show, Eq)

instance TF.ToHCL (ServiceDiscoveryPrivateDnsNamespaceResource s) where
    toHCL ServiceDiscoveryPrivateDnsNamespaceResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.attribute _description
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "vpc" <$> TF.attribute _vpc
        ]

instance HasDescription (ServiceDiscoveryPrivateDnsNamespaceResource s) Text where
    type HasDescriptionThread (ServiceDiscoveryPrivateDnsNamespaceResource s) Text = s

    description =
        lens (_description :: ServiceDiscoveryPrivateDnsNamespaceResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: ServiceDiscoveryPrivateDnsNamespaceResource s)

instance HasName (ServiceDiscoveryPrivateDnsNamespaceResource s) Text where
    type HasNameThread (ServiceDiscoveryPrivateDnsNamespaceResource s) Text = s

    name =
        lens (_name :: ServiceDiscoveryPrivateDnsNamespaceResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: ServiceDiscoveryPrivateDnsNamespaceResource s)

instance HasVpc (ServiceDiscoveryPrivateDnsNamespaceResource s) Text where
    type HasVpcThread (ServiceDiscoveryPrivateDnsNamespaceResource s) Text = s

    vpc =
        lens (_vpc :: ServiceDiscoveryPrivateDnsNamespaceResource s -> TF.Attribute s Text)
            (\s a -> s { _vpc = a } :: ServiceDiscoveryPrivateDnsNamespaceResource s)

instance HasComputedArn (ServiceDiscoveryPrivateDnsNamespaceResource s) Text

instance HasComputedHostedZone (ServiceDiscoveryPrivateDnsNamespaceResource s) Text

instance HasComputedId (ServiceDiscoveryPrivateDnsNamespaceResource s) Text

serviceDiscoveryPrivateDnsNamespaceResource :: TF.Resource TF.AWS (ServiceDiscoveryPrivateDnsNamespaceResource s)
serviceDiscoveryPrivateDnsNamespaceResource =
    TF.newResource "aws_service_discovery_private_dns_namespace" $
        ServiceDiscoveryPrivateDnsNamespaceResource {
              _description = TF.Nil
            , _name = TF.Nil
            , _vpc = TF.Nil
            }

{- | The @aws_service_discovery_public_dns_namespace@ AWS resource.

Provides a Service Discovery Public DNS Namespace resource.
-}
data ServiceDiscoveryPublicDnsNamespaceResource s = ServiceDiscoveryPublicDnsNamespaceResource {
      _description :: !(TF.Attribute s Text)
    {- ^ (Optional) The description that you specify for the namespace when you create it. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the namespace. -}
    } deriving (Show, Eq)

instance TF.ToHCL (ServiceDiscoveryPublicDnsNamespaceResource s) where
    toHCL ServiceDiscoveryPublicDnsNamespaceResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.attribute _description
        , TF.assign "name" <$> TF.attribute _name
        ]

instance HasDescription (ServiceDiscoveryPublicDnsNamespaceResource s) Text where
    type HasDescriptionThread (ServiceDiscoveryPublicDnsNamespaceResource s) Text = s

    description =
        lens (_description :: ServiceDiscoveryPublicDnsNamespaceResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: ServiceDiscoveryPublicDnsNamespaceResource s)

instance HasName (ServiceDiscoveryPublicDnsNamespaceResource s) Text where
    type HasNameThread (ServiceDiscoveryPublicDnsNamespaceResource s) Text = s

    name =
        lens (_name :: ServiceDiscoveryPublicDnsNamespaceResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: ServiceDiscoveryPublicDnsNamespaceResource s)

instance HasComputedArn (ServiceDiscoveryPublicDnsNamespaceResource s) Text

instance HasComputedHostedZone (ServiceDiscoveryPublicDnsNamespaceResource s) Text

instance HasComputedId (ServiceDiscoveryPublicDnsNamespaceResource s) Text

serviceDiscoveryPublicDnsNamespaceResource :: TF.Resource TF.AWS (ServiceDiscoveryPublicDnsNamespaceResource s)
serviceDiscoveryPublicDnsNamespaceResource =
    TF.newResource "aws_service_discovery_public_dns_namespace" $
        ServiceDiscoveryPublicDnsNamespaceResource {
              _description = TF.Nil
            , _name = TF.Nil
            }

{- | The @aws_service_discovery_service@ AWS resource.

Provides a Service Discovery Service resource.
-}
data ServiceDiscoveryServiceResource s = ServiceDiscoveryServiceResource {
      _description :: !(TF.Attribute s Text)
    {- ^ (Optional) The description of the service. -}
    , _dns_config :: !(TF.Attribute s Text)
    {- ^ (Required) A complex type that contains information about the resource record sets that you want Amazon Route 53 to create when you register an instance. -}
    , _health_check_config :: !(TF.Attribute s Text)
    {- ^ (Optional) A complex type that contains settings for an optional health check. Only for Public DNS namespaces. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required, ForceNew) The name of the service. -}
    } deriving (Show, Eq)

instance TF.ToHCL (ServiceDiscoveryServiceResource s) where
    toHCL ServiceDiscoveryServiceResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.attribute _description
        , TF.assign "dns_config" <$> TF.attribute _dns_config
        , TF.assign "health_check_config" <$> TF.attribute _health_check_config
        , TF.assign "name" <$> TF.attribute _name
        ]

instance HasDescription (ServiceDiscoveryServiceResource s) Text where
    type HasDescriptionThread (ServiceDiscoveryServiceResource s) Text = s

    description =
        lens (_description :: ServiceDiscoveryServiceResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: ServiceDiscoveryServiceResource s)

instance HasDnsConfig (ServiceDiscoveryServiceResource s) Text where
    type HasDnsConfigThread (ServiceDiscoveryServiceResource s) Text = s

    dnsConfig =
        lens (_dns_config :: ServiceDiscoveryServiceResource s -> TF.Attribute s Text)
            (\s a -> s { _dns_config = a } :: ServiceDiscoveryServiceResource s)

instance HasHealthCheckConfig (ServiceDiscoveryServiceResource s) Text where
    type HasHealthCheckConfigThread (ServiceDiscoveryServiceResource s) Text = s

    healthCheckConfig =
        lens (_health_check_config :: ServiceDiscoveryServiceResource s -> TF.Attribute s Text)
            (\s a -> s { _health_check_config = a } :: ServiceDiscoveryServiceResource s)

instance HasName (ServiceDiscoveryServiceResource s) Text where
    type HasNameThread (ServiceDiscoveryServiceResource s) Text = s

    name =
        lens (_name :: ServiceDiscoveryServiceResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: ServiceDiscoveryServiceResource s)

serviceDiscoveryServiceResource :: TF.Resource TF.AWS (ServiceDiscoveryServiceResource s)
serviceDiscoveryServiceResource =
    TF.newResource "aws_service_discovery_service" $
        ServiceDiscoveryServiceResource {
              _description = TF.Nil
            , _dns_config = TF.Nil
            , _health_check_config = TF.Nil
            , _name = TF.Nil
            }

{- | The @aws_servicecatalog_portfolio@ AWS resource.

Provides a resource to create a Service Catalog Portfolio.
-}
data ServicecatalogPortfolioResource s = ServicecatalogPortfolioResource {
      _description :: !(TF.Attribute s Text)
    {- ^ (Required) Description of the portfolio -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the portfolio. -}
    , _provider_name :: !(TF.Attribute s Text)
    {- ^ (Required) Name of the person or organization who owns the portfolio. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) Tags to apply to the connection. -}
    } deriving (Show, Eq)

instance TF.ToHCL (ServicecatalogPortfolioResource s) where
    toHCL ServicecatalogPortfolioResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.attribute _description
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "provider_name" <$> TF.attribute _provider_name
        , TF.assign "tags" <$> TF.attribute _tags
        ]

instance HasDescription (ServicecatalogPortfolioResource s) Text where
    type HasDescriptionThread (ServicecatalogPortfolioResource s) Text = s

    description =
        lens (_description :: ServicecatalogPortfolioResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: ServicecatalogPortfolioResource s)

instance HasName (ServicecatalogPortfolioResource s) Text where
    type HasNameThread (ServicecatalogPortfolioResource s) Text = s

    name =
        lens (_name :: ServicecatalogPortfolioResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: ServicecatalogPortfolioResource s)

instance HasProviderName (ServicecatalogPortfolioResource s) Text where
    type HasProviderNameThread (ServicecatalogPortfolioResource s) Text = s

    providerName =
        lens (_provider_name :: ServicecatalogPortfolioResource s -> TF.Attribute s Text)
            (\s a -> s { _provider_name = a } :: ServicecatalogPortfolioResource s)

instance HasTags (ServicecatalogPortfolioResource s) TF.Tags where
    type HasTagsThread (ServicecatalogPortfolioResource s) TF.Tags = s

    tags =
        lens (_tags :: ServicecatalogPortfolioResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: ServicecatalogPortfolioResource s)

instance HasComputedId (ServicecatalogPortfolioResource s) Text

servicecatalogPortfolioResource :: TF.Resource TF.AWS (ServicecatalogPortfolioResource s)
servicecatalogPortfolioResource =
    TF.newResource "aws_servicecatalog_portfolio" $
        ServicecatalogPortfolioResource {
              _description = TF.Nil
            , _name = TF.Nil
            , _provider_name = TF.Nil
            , _tags = TF.Nil
            }

{- | The @aws_ses_active_receipt_rule_set@ AWS resource.

Provides a resource to designate the active SES receipt rule set
-}
data SesActiveReceiptRuleSetResource s = SesActiveReceiptRuleSetResource {
      _rule_set_name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the rule set -}
    } deriving (Show, Eq)

instance TF.ToHCL (SesActiveReceiptRuleSetResource s) where
    toHCL SesActiveReceiptRuleSetResource{..} = TF.block $ catMaybes
        [ TF.assign "rule_set_name" <$> TF.attribute _rule_set_name
        ]

instance HasRuleSetName (SesActiveReceiptRuleSetResource s) Text where
    type HasRuleSetNameThread (SesActiveReceiptRuleSetResource s) Text = s

    ruleSetName =
        lens (_rule_set_name :: SesActiveReceiptRuleSetResource s -> TF.Attribute s Text)
            (\s a -> s { _rule_set_name = a } :: SesActiveReceiptRuleSetResource s)

sesActiveReceiptRuleSetResource :: TF.Resource TF.AWS (SesActiveReceiptRuleSetResource s)
sesActiveReceiptRuleSetResource =
    TF.newResource "aws_ses_active_receipt_rule_set" $
        SesActiveReceiptRuleSetResource {
              _rule_set_name = TF.Nil
            }

{- | The @aws_ses_configuration_set@ AWS resource.

Provides an SES configuration set resource
-}
data SesConfigurationSetResource s = SesConfigurationSetResource {
      _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the configuration set -}
    } deriving (Show, Eq)

instance TF.ToHCL (SesConfigurationSetResource s) where
    toHCL SesConfigurationSetResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.attribute _name
        ]

instance HasName (SesConfigurationSetResource s) Text where
    type HasNameThread (SesConfigurationSetResource s) Text = s

    name =
        lens (_name :: SesConfigurationSetResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: SesConfigurationSetResource s)

sesConfigurationSetResource :: TF.Resource TF.AWS (SesConfigurationSetResource s)
sesConfigurationSetResource =
    TF.newResource "aws_ses_configuration_set" $
        SesConfigurationSetResource {
              _name = TF.Nil
            }

{- | The @aws_ses_domain_dkim@ AWS resource.

Provides an SES domain DKIM generation resource. Domain ownership needs to
be confirmed first using </docs/providers/aws/r/ses_domain_identity.html>
-}
data SesDomainDkimResource s = SesDomainDkimResource {
      _domain :: !(TF.Attribute s Text)
    {- ^ (Required) Verified domain name to generate DKIM tokens for. -}
    } deriving (Show, Eq)

instance TF.ToHCL (SesDomainDkimResource s) where
    toHCL SesDomainDkimResource{..} = TF.block $ catMaybes
        [ TF.assign "domain" <$> TF.attribute _domain
        ]

instance HasDomain (SesDomainDkimResource s) Text where
    type HasDomainThread (SesDomainDkimResource s) Text = s

    domain =
        lens (_domain :: SesDomainDkimResource s -> TF.Attribute s Text)
            (\s a -> s { _domain = a } :: SesDomainDkimResource s)

instance HasComputedDkimTokens (SesDomainDkimResource s) Text

sesDomainDkimResource :: TF.Resource TF.AWS (SesDomainDkimResource s)
sesDomainDkimResource =
    TF.newResource "aws_ses_domain_dkim" $
        SesDomainDkimResource {
              _domain = TF.Nil
            }

{- | The @aws_ses_domain_identity@ AWS resource.

Provides an SES domain identity resource
-}
data SesDomainIdentityResource s = SesDomainIdentityResource {
      _domain :: !(TF.Attribute s Text)
    {- ^ (Required) The domain name to assign to SES -}
    } deriving (Show, Eq)

instance TF.ToHCL (SesDomainIdentityResource s) where
    toHCL SesDomainIdentityResource{..} = TF.block $ catMaybes
        [ TF.assign "domain" <$> TF.attribute _domain
        ]

instance HasDomain (SesDomainIdentityResource s) Text where
    type HasDomainThread (SesDomainIdentityResource s) Text = s

    domain =
        lens (_domain :: SesDomainIdentityResource s -> TF.Attribute s Text)
            (\s a -> s { _domain = a } :: SesDomainIdentityResource s)

instance HasComputedArn (SesDomainIdentityResource s) Text

instance HasComputedVerificationToken (SesDomainIdentityResource s) Text

sesDomainIdentityResource :: TF.Resource TF.AWS (SesDomainIdentityResource s)
sesDomainIdentityResource =
    TF.newResource "aws_ses_domain_identity" $
        SesDomainIdentityResource {
              _domain = TF.Nil
            }

{- | The @aws_ses_event_destination@ AWS resource.

Provides an SES event destination
-}
data SesEventDestinationResource s = SesEventDestinationResource {
      _cloudwatch_destination :: !(TF.Attribute s Text)
    {- ^ (Optional) CloudWatch destination for the events -}
    , _configuration_set_name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the configuration set -}
    , _enabled :: !(TF.Attribute s TF.Bool)
    {- ^ (Optional) If true, the event destination will be enabled -}
    , _kinesis_destination :: !(TF.Attribute s Text)
    {- ^ (Optional) Send the events to a kinesis firehose destination -}
    , _matching_types :: !(TF.Attribute s Text)
    {- ^ (Required) A list of matching types. May be any of @"send"@ , @"reject"@ , @"bounce"@ , @"complaint"@ , @"delivery"@ , @"open"@ , or @"click"@ . -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the event destination -}
    , _sns_destination :: !(TF.Attribute s Text)
    {- ^ (Optional) Send the events to an SNS Topic destination -}
    } deriving (Show, Eq)

instance TF.ToHCL (SesEventDestinationResource s) where
    toHCL SesEventDestinationResource{..} = TF.block $ catMaybes
        [ TF.assign "cloudwatch_destination" <$> TF.attribute _cloudwatch_destination
        , TF.assign "configuration_set_name" <$> TF.attribute _configuration_set_name
        , TF.assign "enabled" <$> TF.attribute _enabled
        , TF.assign "kinesis_destination" <$> TF.attribute _kinesis_destination
        , TF.assign "matching_types" <$> TF.attribute _matching_types
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "sns_destination" <$> TF.attribute _sns_destination
        ]

instance HasCloudwatchDestination (SesEventDestinationResource s) Text where
    type HasCloudwatchDestinationThread (SesEventDestinationResource s) Text = s

    cloudwatchDestination =
        lens (_cloudwatch_destination :: SesEventDestinationResource s -> TF.Attribute s Text)
            (\s a -> s { _cloudwatch_destination = a } :: SesEventDestinationResource s)

instance HasConfigurationSetName (SesEventDestinationResource s) Text where
    type HasConfigurationSetNameThread (SesEventDestinationResource s) Text = s

    configurationSetName =
        lens (_configuration_set_name :: SesEventDestinationResource s -> TF.Attribute s Text)
            (\s a -> s { _configuration_set_name = a } :: SesEventDestinationResource s)

instance HasEnabled (SesEventDestinationResource s) TF.Bool where
    type HasEnabledThread (SesEventDestinationResource s) TF.Bool = s

    enabled =
        lens (_enabled :: SesEventDestinationResource s -> TF.Attribute s TF.Bool)
            (\s a -> s { _enabled = a } :: SesEventDestinationResource s)

instance HasKinesisDestination (SesEventDestinationResource s) Text where
    type HasKinesisDestinationThread (SesEventDestinationResource s) Text = s

    kinesisDestination =
        lens (_kinesis_destination :: SesEventDestinationResource s -> TF.Attribute s Text)
            (\s a -> s { _kinesis_destination = a } :: SesEventDestinationResource s)

instance HasMatchingTypes (SesEventDestinationResource s) Text where
    type HasMatchingTypesThread (SesEventDestinationResource s) Text = s

    matchingTypes =
        lens (_matching_types :: SesEventDestinationResource s -> TF.Attribute s Text)
            (\s a -> s { _matching_types = a } :: SesEventDestinationResource s)

instance HasName (SesEventDestinationResource s) Text where
    type HasNameThread (SesEventDestinationResource s) Text = s

    name =
        lens (_name :: SesEventDestinationResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: SesEventDestinationResource s)

instance HasSnsDestination (SesEventDestinationResource s) Text where
    type HasSnsDestinationThread (SesEventDestinationResource s) Text = s

    snsDestination =
        lens (_sns_destination :: SesEventDestinationResource s -> TF.Attribute s Text)
            (\s a -> s { _sns_destination = a } :: SesEventDestinationResource s)

sesEventDestinationResource :: TF.Resource TF.AWS (SesEventDestinationResource s)
sesEventDestinationResource =
    TF.newResource "aws_ses_event_destination" $
        SesEventDestinationResource {
              _cloudwatch_destination = TF.Nil
            , _configuration_set_name = TF.Nil
            , _enabled = TF.Nil
            , _kinesis_destination = TF.Nil
            , _matching_types = TF.Nil
            , _name = TF.Nil
            , _sns_destination = TF.Nil
            }

{- | The @aws_ses_receipt_filter@ AWS resource.

Provides an SES receipt filter resource
-}
data SesReceiptFilterResource s = SesReceiptFilterResource {
      _cidr :: !(TF.Attribute s Text)
    {- ^ (Required) The IP address or address range to filter, in CIDR notation -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the filter -}
    , _policy :: !(TF.Attribute s Text)
    {- ^ (Required) Block or Allow -}
    } deriving (Show, Eq)

instance TF.ToHCL (SesReceiptFilterResource s) where
    toHCL SesReceiptFilterResource{..} = TF.block $ catMaybes
        [ TF.assign "cidr" <$> TF.attribute _cidr
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "policy" <$> TF.attribute _policy
        ]

instance HasCidr (SesReceiptFilterResource s) Text where
    type HasCidrThread (SesReceiptFilterResource s) Text = s

    cidr =
        lens (_cidr :: SesReceiptFilterResource s -> TF.Attribute s Text)
            (\s a -> s { _cidr = a } :: SesReceiptFilterResource s)

instance HasName (SesReceiptFilterResource s) Text where
    type HasNameThread (SesReceiptFilterResource s) Text = s

    name =
        lens (_name :: SesReceiptFilterResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: SesReceiptFilterResource s)

instance HasPolicy (SesReceiptFilterResource s) Text where
    type HasPolicyThread (SesReceiptFilterResource s) Text = s

    policy =
        lens (_policy :: SesReceiptFilterResource s -> TF.Attribute s Text)
            (\s a -> s { _policy = a } :: SesReceiptFilterResource s)

sesReceiptFilterResource :: TF.Resource TF.AWS (SesReceiptFilterResource s)
sesReceiptFilterResource =
    TF.newResource "aws_ses_receipt_filter" $
        SesReceiptFilterResource {
              _cidr = TF.Nil
            , _name = TF.Nil
            , _policy = TF.Nil
            }

{- | The @aws_ses_receipt_rule@ AWS resource.

Provides an SES receipt rule resource
-}
data SesReceiptRuleResource s = SesReceiptRuleResource {
      _add_header_action :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of Add Header Action blocks. Documented below. -}
    , _after :: !(TF.Attribute s Text)
    {- ^ (Optional) The name of the rule to place this rule after -}
    , _bounce_action :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of Bounce Action blocks. Documented below. -}
    , _enabled :: !(TF.Attribute s TF.Bool)
    {- ^ (Optional) If true, the rule will be enabled -}
    , _lambda_action :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of Lambda Action blocks. Documented below. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the rule -}
    , _recipients :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of email addresses -}
    , _rule_set_name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the rule set -}
    , _s3_action :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of S3 Action blocks. Documented below. -}
    , _scan_enabled :: !(TF.Attribute s TF.Bool)
    {- ^ (Optional) If true, incoming emails will be scanned for spam and viruses -}
    , _sns_action :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of SNS Action blocks. Documented below. -}
    , _stop_action :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of Stop Action blocks. Documented below. -}
    , _tls_policy :: !(TF.Attribute s Text)
    {- ^ (Optional) Require or Optional -}
    , _workmail_action :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of WorkMail Action blocks. Documented below. -}
    } deriving (Show, Eq)

instance TF.ToHCL (SesReceiptRuleResource s) where
    toHCL SesReceiptRuleResource{..} = TF.block $ catMaybes
        [ TF.assign "add_header_action" <$> TF.attribute _add_header_action
        , TF.assign "after" <$> TF.attribute _after
        , TF.assign "bounce_action" <$> TF.attribute _bounce_action
        , TF.assign "enabled" <$> TF.attribute _enabled
        , TF.assign "lambda_action" <$> TF.attribute _lambda_action
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "recipients" <$> TF.attribute _recipients
        , TF.assign "rule_set_name" <$> TF.attribute _rule_set_name
        , TF.assign "s3_action" <$> TF.attribute _s3_action
        , TF.assign "scan_enabled" <$> TF.attribute _scan_enabled
        , TF.assign "sns_action" <$> TF.attribute _sns_action
        , TF.assign "stop_action" <$> TF.attribute _stop_action
        , TF.assign "tls_policy" <$> TF.attribute _tls_policy
        , TF.assign "workmail_action" <$> TF.attribute _workmail_action
        ]

instance HasAddHeaderAction (SesReceiptRuleResource s) Text where
    type HasAddHeaderActionThread (SesReceiptRuleResource s) Text = s

    addHeaderAction =
        lens (_add_header_action :: SesReceiptRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _add_header_action = a } :: SesReceiptRuleResource s)

instance HasAfter (SesReceiptRuleResource s) Text where
    type HasAfterThread (SesReceiptRuleResource s) Text = s

    after =
        lens (_after :: SesReceiptRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _after = a } :: SesReceiptRuleResource s)

instance HasBounceAction (SesReceiptRuleResource s) Text where
    type HasBounceActionThread (SesReceiptRuleResource s) Text = s

    bounceAction =
        lens (_bounce_action :: SesReceiptRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _bounce_action = a } :: SesReceiptRuleResource s)

instance HasEnabled (SesReceiptRuleResource s) TF.Bool where
    type HasEnabledThread (SesReceiptRuleResource s) TF.Bool = s

    enabled =
        lens (_enabled :: SesReceiptRuleResource s -> TF.Attribute s TF.Bool)
            (\s a -> s { _enabled = a } :: SesReceiptRuleResource s)

instance HasLambdaAction (SesReceiptRuleResource s) Text where
    type HasLambdaActionThread (SesReceiptRuleResource s) Text = s

    lambdaAction =
        lens (_lambda_action :: SesReceiptRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _lambda_action = a } :: SesReceiptRuleResource s)

instance HasName (SesReceiptRuleResource s) Text where
    type HasNameThread (SesReceiptRuleResource s) Text = s

    name =
        lens (_name :: SesReceiptRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: SesReceiptRuleResource s)

instance HasRecipients (SesReceiptRuleResource s) Text where
    type HasRecipientsThread (SesReceiptRuleResource s) Text = s

    recipients =
        lens (_recipients :: SesReceiptRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _recipients = a } :: SesReceiptRuleResource s)

instance HasRuleSetName (SesReceiptRuleResource s) Text where
    type HasRuleSetNameThread (SesReceiptRuleResource s) Text = s

    ruleSetName =
        lens (_rule_set_name :: SesReceiptRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _rule_set_name = a } :: SesReceiptRuleResource s)

instance HasS3Action (SesReceiptRuleResource s) Text where
    type HasS3ActionThread (SesReceiptRuleResource s) Text = s

    s3Action =
        lens (_s3_action :: SesReceiptRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _s3_action = a } :: SesReceiptRuleResource s)

instance HasScanEnabled (SesReceiptRuleResource s) TF.Bool where
    type HasScanEnabledThread (SesReceiptRuleResource s) TF.Bool = s

    scanEnabled =
        lens (_scan_enabled :: SesReceiptRuleResource s -> TF.Attribute s TF.Bool)
            (\s a -> s { _scan_enabled = a } :: SesReceiptRuleResource s)

instance HasSnsAction (SesReceiptRuleResource s) Text where
    type HasSnsActionThread (SesReceiptRuleResource s) Text = s

    snsAction =
        lens (_sns_action :: SesReceiptRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _sns_action = a } :: SesReceiptRuleResource s)

instance HasStopAction (SesReceiptRuleResource s) Text where
    type HasStopActionThread (SesReceiptRuleResource s) Text = s

    stopAction =
        lens (_stop_action :: SesReceiptRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _stop_action = a } :: SesReceiptRuleResource s)

instance HasTlsPolicy (SesReceiptRuleResource s) Text where
    type HasTlsPolicyThread (SesReceiptRuleResource s) Text = s

    tlsPolicy =
        lens (_tls_policy :: SesReceiptRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _tls_policy = a } :: SesReceiptRuleResource s)

instance HasWorkmailAction (SesReceiptRuleResource s) Text where
    type HasWorkmailActionThread (SesReceiptRuleResource s) Text = s

    workmailAction =
        lens (_workmail_action :: SesReceiptRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _workmail_action = a } :: SesReceiptRuleResource s)

sesReceiptRuleResource :: TF.Resource TF.AWS (SesReceiptRuleResource s)
sesReceiptRuleResource =
    TF.newResource "aws_ses_receipt_rule" $
        SesReceiptRuleResource {
              _add_header_action = TF.Nil
            , _after = TF.Nil
            , _bounce_action = TF.Nil
            , _enabled = TF.Nil
            , _lambda_action = TF.Nil
            , _name = TF.Nil
            , _recipients = TF.Nil
            , _rule_set_name = TF.Nil
            , _s3_action = TF.Nil
            , _scan_enabled = TF.Nil
            , _sns_action = TF.Nil
            , _stop_action = TF.Nil
            , _tls_policy = TF.Nil
            , _workmail_action = TF.Nil
            }

{- | The @aws_ses_receipt_rule_set@ AWS resource.

Provides an SES receipt rule set resource
-}
data SesReceiptRuleSetResource s = SesReceiptRuleSetResource {
      _rule_set_name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the rule set -}
    } deriving (Show, Eq)

instance TF.ToHCL (SesReceiptRuleSetResource s) where
    toHCL SesReceiptRuleSetResource{..} = TF.block $ catMaybes
        [ TF.assign "rule_set_name" <$> TF.attribute _rule_set_name
        ]

instance HasRuleSetName (SesReceiptRuleSetResource s) Text where
    type HasRuleSetNameThread (SesReceiptRuleSetResource s) Text = s

    ruleSetName =
        lens (_rule_set_name :: SesReceiptRuleSetResource s -> TF.Attribute s Text)
            (\s a -> s { _rule_set_name = a } :: SesReceiptRuleSetResource s)

sesReceiptRuleSetResource :: TF.Resource TF.AWS (SesReceiptRuleSetResource s)
sesReceiptRuleSetResource =
    TF.newResource "aws_ses_receipt_rule_set" $
        SesReceiptRuleSetResource {
              _rule_set_name = TF.Nil
            }

{- | The @aws_ses_template@ AWS resource.

Provides a resource to create a SES template.
-}
data SesTemplateResource s = SesTemplateResource {
      _html :: !(TF.Attribute s Text)
    {- ^ (Optional) The HTML body of the email. Must be less than 500KB in size, including both the text and HTML parts. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the template. Cannot exceed 64 characters. You will refer to this name when you send email. -}
    , _subject :: !(TF.Attribute s Text)
    {- ^ (Optional) The subject line of the email. -}
    , _text :: !(TF.Attribute s Text)
    {- ^ (Optional) The email body that will be visible to recipients whose email clients do not display HTML. Must be less than 500KB in size, including both the text and HTML parts. -}
    } deriving (Show, Eq)

instance TF.ToHCL (SesTemplateResource s) where
    toHCL SesTemplateResource{..} = TF.block $ catMaybes
        [ TF.assign "html" <$> TF.attribute _html
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "subject" <$> TF.attribute _subject
        , TF.assign "text" <$> TF.attribute _text
        ]

instance HasHtml (SesTemplateResource s) Text where
    type HasHtmlThread (SesTemplateResource s) Text = s

    html =
        lens (_html :: SesTemplateResource s -> TF.Attribute s Text)
            (\s a -> s { _html = a } :: SesTemplateResource s)

instance HasName (SesTemplateResource s) Text where
    type HasNameThread (SesTemplateResource s) Text = s

    name =
        lens (_name :: SesTemplateResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: SesTemplateResource s)

instance HasSubject (SesTemplateResource s) Text where
    type HasSubjectThread (SesTemplateResource s) Text = s

    subject =
        lens (_subject :: SesTemplateResource s -> TF.Attribute s Text)
            (\s a -> s { _subject = a } :: SesTemplateResource s)

instance HasText (SesTemplateResource s) Text where
    type HasTextThread (SesTemplateResource s) Text = s

    text =
        lens (_text :: SesTemplateResource s -> TF.Attribute s Text)
            (\s a -> s { _text = a } :: SesTemplateResource s)

instance HasComputedId (SesTemplateResource s) Text

sesTemplateResource :: TF.Resource TF.AWS (SesTemplateResource s)
sesTemplateResource =
    TF.newResource "aws_ses_template" $
        SesTemplateResource {
              _html = TF.Nil
            , _name = TF.Nil
            , _subject = TF.Nil
            , _text = TF.Nil
            }

{- | The @aws_simpledb_domain@ AWS resource.

Provides a SimpleDB domain resource
-}
data SimpledbDomainResource s = SimpledbDomainResource {
      _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the SimpleDB domain -}
    } deriving (Show, Eq)

instance TF.ToHCL (SimpledbDomainResource s) where
    toHCL SimpledbDomainResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.attribute _name
        ]

instance HasName (SimpledbDomainResource s) Text where
    type HasNameThread (SimpledbDomainResource s) Text = s

    name =
        lens (_name :: SimpledbDomainResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: SimpledbDomainResource s)

instance HasComputedId (SimpledbDomainResource s) Text

simpledbDomainResource :: TF.Resource TF.AWS (SimpledbDomainResource s)
simpledbDomainResource =
    TF.newResource "aws_simpledb_domain" $
        SimpledbDomainResource {
              _name = TF.Nil
            }

{- | The @aws_snapshot_create_volume_permission@ AWS resource.

Adds permission to create volumes off of a given EBS Snapshot.
-}
data SnapshotCreateVolumePermissionResource s = SnapshotCreateVolumePermissionResource {
      _account_id :: !(TF.Attribute s Text)
    {- ^ - (required) An AWS Account ID to add create volume permissions -}
    , _snapshot_id :: !(TF.Attribute s Text)
    {- ^ - (required) A snapshot ID -}
    } deriving (Show, Eq)

instance TF.ToHCL (SnapshotCreateVolumePermissionResource s) where
    toHCL SnapshotCreateVolumePermissionResource{..} = TF.block $ catMaybes
        [ TF.assign "account_id" <$> TF.attribute _account_id
        , TF.assign "snapshot_id" <$> TF.attribute _snapshot_id
        ]

instance HasAccountId (SnapshotCreateVolumePermissionResource s) Text where
    type HasAccountIdThread (SnapshotCreateVolumePermissionResource s) Text = s

    accountId =
        lens (_account_id :: SnapshotCreateVolumePermissionResource s -> TF.Attribute s Text)
            (\s a -> s { _account_id = a } :: SnapshotCreateVolumePermissionResource s)

instance HasSnapshotId (SnapshotCreateVolumePermissionResource s) Text where
    type HasSnapshotIdThread (SnapshotCreateVolumePermissionResource s) Text = s

    snapshotId =
        lens (_snapshot_id :: SnapshotCreateVolumePermissionResource s -> TF.Attribute s Text)
            (\s a -> s { _snapshot_id = a } :: SnapshotCreateVolumePermissionResource s)

instance HasComputedId (SnapshotCreateVolumePermissionResource s) Text

snapshotCreateVolumePermissionResource :: TF.Resource TF.AWS (SnapshotCreateVolumePermissionResource s)
snapshotCreateVolumePermissionResource =
    TF.newResource "aws_snapshot_create_volume_permission" $
        SnapshotCreateVolumePermissionResource {
              _account_id = TF.Nil
            , _snapshot_id = TF.Nil
            }

{- | The @aws_sns_topic_policy@ AWS resource.

Provides an SNS topic policy resource ~> NOTE: If a Principal is specified
as just an AWS account ID rather than an ARN, AWS silently converts it to
the ARN for the root user, causing future terraform plans to differ. To
avoid this problem, just specify the full ARN, e.g.
@arn:aws:iam::123456789012:root@
-}
data SnsTopicPolicyResource s = SnsTopicPolicyResource {
      _arn :: !(TF.Attribute s Text)
    {- ^ (Required) The ARN of the SNS topic -}
    , _policy :: !(TF.Attribute s Text)
    {- ^ (Required) The fully-formed AWS policy as JSON -}
    } deriving (Show, Eq)

instance TF.ToHCL (SnsTopicPolicyResource s) where
    toHCL SnsTopicPolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "arn" <$> TF.attribute _arn
        , TF.assign "policy" <$> TF.attribute _policy
        ]

instance HasArn (SnsTopicPolicyResource s) Text where
    type HasArnThread (SnsTopicPolicyResource s) Text = s

    arn =
        lens (_arn :: SnsTopicPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _arn = a } :: SnsTopicPolicyResource s)

instance HasPolicy (SnsTopicPolicyResource s) Text where
    type HasPolicyThread (SnsTopicPolicyResource s) Text = s

    policy =
        lens (_policy :: SnsTopicPolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _policy = a } :: SnsTopicPolicyResource s)

snsTopicPolicyResource :: TF.Resource TF.AWS (SnsTopicPolicyResource s)
snsTopicPolicyResource =
    TF.newResource "aws_sns_topic_policy" $
        SnsTopicPolicyResource {
              _arn = TF.Nil
            , _policy = TF.Nil
            }

{- | The @aws_sns_topic@ AWS resource.

Provides an SNS topic resource
-}
data SnsTopicResource s = SnsTopicResource {
      _delivery_policy :: !(TF.Attribute s Text)
    {- ^ (Optional) The SNS delivery policy -}
    , _display_name :: !(TF.Attribute s Text)
    {- ^ (Optional) The display name for the SNS topic -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The friendly name for the SNS topic -}
    , _policy :: !(TF.Attribute s Text)
    {- ^ (Optional) The fully-formed AWS policy as JSON -}
    } deriving (Show, Eq)

instance TF.ToHCL (SnsTopicResource s) where
    toHCL SnsTopicResource{..} = TF.block $ catMaybes
        [ TF.assign "delivery_policy" <$> TF.attribute _delivery_policy
        , TF.assign "display_name" <$> TF.attribute _display_name
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "policy" <$> TF.attribute _policy
        ]

instance HasDeliveryPolicy (SnsTopicResource s) Text where
    type HasDeliveryPolicyThread (SnsTopicResource s) Text = s

    deliveryPolicy =
        lens (_delivery_policy :: SnsTopicResource s -> TF.Attribute s Text)
            (\s a -> s { _delivery_policy = a } :: SnsTopicResource s)

instance HasDisplayName (SnsTopicResource s) Text where
    type HasDisplayNameThread (SnsTopicResource s) Text = s

    displayName =
        lens (_display_name :: SnsTopicResource s -> TF.Attribute s Text)
            (\s a -> s { _display_name = a } :: SnsTopicResource s)

instance HasName (SnsTopicResource s) Text where
    type HasNameThread (SnsTopicResource s) Text = s

    name =
        lens (_name :: SnsTopicResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: SnsTopicResource s)

instance HasPolicy (SnsTopicResource s) Text where
    type HasPolicyThread (SnsTopicResource s) Text = s

    policy =
        lens (_policy :: SnsTopicResource s -> TF.Attribute s Text)
            (\s a -> s { _policy = a } :: SnsTopicResource s)

instance HasComputedArn (SnsTopicResource s) Text

instance HasComputedId (SnsTopicResource s) Text

snsTopicResource :: TF.Resource TF.AWS (SnsTopicResource s)
snsTopicResource =
    TF.newResource "aws_sns_topic" $
        SnsTopicResource {
              _delivery_policy = TF.Nil
            , _display_name = TF.Nil
            , _name = TF.Nil
            , _policy = TF.Nil
            }

{- | The @aws_sns_topic_subscription@ AWS resource.

Provides a resource for subscribing to SNS topics. Requires that an SNS
topic exist for the subscription to attach to. This resource allows you to
automatically place messages sent to SNS topics in SQS queues, send them as
HTTP(S) POST requests to a given endpoint, send SMS messages, or notify
devices / applications. The most likely use case for Terraform users will
probably be SQS queues. ~> NOTE: If SNS topic and SQS queue are in different
AWS regions it is important to place the "aws_sns_topic_subscription" into
the terraform configuration of the region with the SQS queue. If
"aws_sns_topic_subscription" is placed in the terraform configuration of the
region with the SNS topic terraform will fail to create the subscription. ~>
NOTE: Setup of cross-account subscriptions from SNS topics to SQS queues
requires Terraform to have access to BOTH accounts. ~> NOTE: If SNS topic
and SQS queue are in different AWS accounts but the same region it is
important to place the "aws_sns_topic_subscription" into the terraform
configuration of the account with the SQS queue. If
"aws_sns_topic_subscription" is placed in the terraform configuration of the
account with the SNS topic terraform creates the subscriptions but does not
keep state and tries to re-create the subscription at every apply. ~> NOTE:
If SNS topic and SQS queue are in different AWS accounts and different AWS
regions it is important to recognize that the subscription needs to be
initiated from the account with the SQS queue but in the region of the SNS
topic.
-}
data SnsTopicSubscriptionResource s = SnsTopicSubscriptionResource {
      _confirmation_timeout_in_minutes :: !(TF.Attribute s Text)
    {- ^ (Optional) Integer indicating number of minutes to wait in retying mode for fetching subscription arn before marking it as failure. Only applicable for http and https protocols (default is 1 minute). -}
    , _endpoint :: !(TF.Attribute s Text)
    {- ^ (Required) The endpoint to send data to, the contents will vary with the protocol. (see below for more information) -}
    , _endpoint_auto_confirms :: !(TF.Attribute s Text)
    {- ^ (Optional) Boolean indicating whether the end point is capable of <http://docs.aws.amazon.com/sns/latest/dg/SendMessageToHttp.html#SendMessageToHttp.prepare> e.g., PagerDuty (default is false) -}
    , _protocol :: !(TF.Attribute s Text)
    {- ^ (Required) The protocol to use. The possible values for this are: @sqs@ , @sms@ , @lambda@ , @application@ . ( @http@ or @https@ are partially supported, see below) ( @email@ is option but unsupported, see below). -}
    , _raw_message_delivery :: !(TF.Attribute s Text)
    {- ^ (Optional) Boolean indicating whether or not to enable raw message delivery (the original message is directly passed, not wrapped in JSON with the original message in the message property) (default is false). -}
    , _topic_arn :: !(TF.Attribute s Text)
    {- ^ (Required) The ARN of the SNS topic to subscribe to -}
    } deriving (Show, Eq)

instance TF.ToHCL (SnsTopicSubscriptionResource s) where
    toHCL SnsTopicSubscriptionResource{..} = TF.block $ catMaybes
        [ TF.assign "confirmation_timeout_in_minutes" <$> TF.attribute _confirmation_timeout_in_minutes
        , TF.assign "endpoint" <$> TF.attribute _endpoint
        , TF.assign "endpoint_auto_confirms" <$> TF.attribute _endpoint_auto_confirms
        , TF.assign "protocol" <$> TF.attribute _protocol
        , TF.assign "raw_message_delivery" <$> TF.attribute _raw_message_delivery
        , TF.assign "topic_arn" <$> TF.attribute _topic_arn
        ]

instance HasConfirmationTimeoutInMinutes (SnsTopicSubscriptionResource s) Text where
    type HasConfirmationTimeoutInMinutesThread (SnsTopicSubscriptionResource s) Text = s

    confirmationTimeoutInMinutes =
        lens (_confirmation_timeout_in_minutes :: SnsTopicSubscriptionResource s -> TF.Attribute s Text)
            (\s a -> s { _confirmation_timeout_in_minutes = a } :: SnsTopicSubscriptionResource s)

instance HasEndpoint (SnsTopicSubscriptionResource s) Text where
    type HasEndpointThread (SnsTopicSubscriptionResource s) Text = s

    endpoint =
        lens (_endpoint :: SnsTopicSubscriptionResource s -> TF.Attribute s Text)
            (\s a -> s { _endpoint = a } :: SnsTopicSubscriptionResource s)

instance HasEndpointAutoConfirms (SnsTopicSubscriptionResource s) Text where
    type HasEndpointAutoConfirmsThread (SnsTopicSubscriptionResource s) Text = s

    endpointAutoConfirms =
        lens (_endpoint_auto_confirms :: SnsTopicSubscriptionResource s -> TF.Attribute s Text)
            (\s a -> s { _endpoint_auto_confirms = a } :: SnsTopicSubscriptionResource s)

instance HasProtocol (SnsTopicSubscriptionResource s) Text where
    type HasProtocolThread (SnsTopicSubscriptionResource s) Text = s

    protocol =
        lens (_protocol :: SnsTopicSubscriptionResource s -> TF.Attribute s Text)
            (\s a -> s { _protocol = a } :: SnsTopicSubscriptionResource s)

instance HasRawMessageDelivery (SnsTopicSubscriptionResource s) Text where
    type HasRawMessageDeliveryThread (SnsTopicSubscriptionResource s) Text = s

    rawMessageDelivery =
        lens (_raw_message_delivery :: SnsTopicSubscriptionResource s -> TF.Attribute s Text)
            (\s a -> s { _raw_message_delivery = a } :: SnsTopicSubscriptionResource s)

instance HasTopicArn (SnsTopicSubscriptionResource s) Text where
    type HasTopicArnThread (SnsTopicSubscriptionResource s) Text = s

    topicArn =
        lens (_topic_arn :: SnsTopicSubscriptionResource s -> TF.Attribute s Text)
            (\s a -> s { _topic_arn = a } :: SnsTopicSubscriptionResource s)

snsTopicSubscriptionResource :: TF.Resource TF.AWS (SnsTopicSubscriptionResource s)
snsTopicSubscriptionResource =
    TF.newResource "aws_sns_topic_subscription" $
        SnsTopicSubscriptionResource {
              _confirmation_timeout_in_minutes = TF.Nil
            , _endpoint = TF.Nil
            , _endpoint_auto_confirms = TF.Nil
            , _protocol = TF.Nil
            , _raw_message_delivery = TF.Nil
            , _topic_arn = TF.Nil
            }

{- | The @aws_spot_datafeed_subscription@ AWS resource.

-> Note: There is only a single subscription allowed per account. To help
you understand the charges for your Spot instances, Amazon EC2 provides a
data feed that describes your Spot instance usage and pricing. This data
feed is sent to an Amazon S3 bucket that you specify when you subscribe to
the data feed.
-}
data SpotDatafeedSubscriptionResource s = SpotDatafeedSubscriptionResource {
      _bucket :: !(TF.Attribute s Text)
    {- ^ (Required) The Amazon S3 bucket in which to store the Spot instance data feed. -}
    , _prefix :: !(TF.Attribute s Text)
    {- ^ (Optional) Path of folder inside bucket to place spot pricing data. -}
    } deriving (Show, Eq)

instance TF.ToHCL (SpotDatafeedSubscriptionResource s) where
    toHCL SpotDatafeedSubscriptionResource{..} = TF.block $ catMaybes
        [ TF.assign "bucket" <$> TF.attribute _bucket
        , TF.assign "prefix" <$> TF.attribute _prefix
        ]

instance HasBucket (SpotDatafeedSubscriptionResource s) Text where
    type HasBucketThread (SpotDatafeedSubscriptionResource s) Text = s

    bucket =
        lens (_bucket :: SpotDatafeedSubscriptionResource s -> TF.Attribute s Text)
            (\s a -> s { _bucket = a } :: SpotDatafeedSubscriptionResource s)

instance HasPrefix (SpotDatafeedSubscriptionResource s) Text where
    type HasPrefixThread (SpotDatafeedSubscriptionResource s) Text = s

    prefix =
        lens (_prefix :: SpotDatafeedSubscriptionResource s -> TF.Attribute s Text)
            (\s a -> s { _prefix = a } :: SpotDatafeedSubscriptionResource s)

spotDatafeedSubscriptionResource :: TF.Resource TF.AWS (SpotDatafeedSubscriptionResource s)
spotDatafeedSubscriptionResource =
    TF.newResource "aws_spot_datafeed_subscription" $
        SpotDatafeedSubscriptionResource {
              _bucket = TF.Nil
            , _prefix = TF.Nil
            }

{- | The @aws_spot_fleet_request@ AWS resource.

Provides an EC2 Spot Fleet Request resource. This allows a fleet of Spot
instances to be requested on the Spot market.
-}
data SpotFleetRequestResource s = SpotFleetRequestResource {
      _allocation_strategy :: !(TF.Attribute s Text)
    {- ^ - Indicates how to allocate the target capacity across the Spot pools specified by the Spot fleet request. The default is lowestPrice. -}
    , _excess_capacity_termination_policy :: !(TF.Attribute s Text)
    {- ^ - Indicates whether running Spot instances should be terminated if the target capacity of the Spot fleet request is decreased below the current size of the Spot fleet. -}
    , _iam_fleet_role :: !(TF.Attribute s Text)
    {- ^ (Required) Grants the Spot fleet permission to terminate Spot instances on your behalf when you cancel its Spot fleet request using CancelSpotFleetRequests or when the Spot fleet request expires, if you set terminateInstancesWithExpiration. -}
    , _instance_interruption_behavior :: !(TF.Attribute s Text)
    {- ^ (Optional) Indicates whether a Spot instance stops or terminates when it is interrupted. Default is @terminate@ . -}
    , _launch_specification :: !(TF.Attribute s Text)
    {- ^ - Used to define the launch configuration of the spot-fleet request. Can be specified multiple times to define different bids across different markets and instance types. -}
    , _replace_unhealthy_instances :: !(TF.Attribute s Text)
    {- ^ (Optional) Indicates whether Spot fleet should replace unhealthy instances. Default @false@ . -}
    , _spot_price :: !(TF.Attribute s Text)
    {- ^ (Required) The bid price per unit hour. -}
    , _target_capacity :: !(TF.Attribute s Text)
    {- ^ - The number of units to request. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. -}
    , _terminate_instances_with_expiration :: !(TF.Attribute s Text)
    {- ^ - Indicates whether running Spot instances should be terminated when the Spot fleet request expires. -}
    , _valid_until :: !(TF.Attribute s Text)
    {- ^ - The end date and time of the request, in UTC ISO8601 format (for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new Spot instance requests are placed or enabled to fulfill the request. Defaults to 24 hours. -}
    , _wait_for_fulfillment :: !(TF.Attribute s Text)
    {- ^ (Optional; Default: false) If set, Terraform will wait for the Spot Request to be fulfilled, and will throw an error if the timeout of 10m is reached. -}
    } deriving (Show, Eq)

instance TF.ToHCL (SpotFleetRequestResource s) where
    toHCL SpotFleetRequestResource{..} = TF.block $ catMaybes
        [ TF.assign "allocation_strategy" <$> TF.attribute _allocation_strategy
        , TF.assign "excess_capacity_termination_policy" <$> TF.attribute _excess_capacity_termination_policy
        , TF.assign "iam_fleet_role" <$> TF.attribute _iam_fleet_role
        , TF.assign "instance_interruption_behavior" <$> TF.attribute _instance_interruption_behavior
        , TF.assign "launch_specification" <$> TF.attribute _launch_specification
        , TF.assign "replace_unhealthy_instances" <$> TF.attribute _replace_unhealthy_instances
        , TF.assign "spot_price" <$> TF.attribute _spot_price
        , TF.assign "target_capacity" <$> TF.attribute _target_capacity
        , TF.assign "terminate_instances_with_expiration" <$> TF.attribute _terminate_instances_with_expiration
        , TF.assign "valid_until" <$> TF.attribute _valid_until
        , TF.assign "wait_for_fulfillment" <$> TF.attribute _wait_for_fulfillment
        ]

instance HasAllocationStrategy (SpotFleetRequestResource s) Text where
    type HasAllocationStrategyThread (SpotFleetRequestResource s) Text = s

    allocationStrategy =
        lens (_allocation_strategy :: SpotFleetRequestResource s -> TF.Attribute s Text)
            (\s a -> s { _allocation_strategy = a } :: SpotFleetRequestResource s)

instance HasExcessCapacityTerminationPolicy (SpotFleetRequestResource s) Text where
    type HasExcessCapacityTerminationPolicyThread (SpotFleetRequestResource s) Text = s

    excessCapacityTerminationPolicy =
        lens (_excess_capacity_termination_policy :: SpotFleetRequestResource s -> TF.Attribute s Text)
            (\s a -> s { _excess_capacity_termination_policy = a } :: SpotFleetRequestResource s)

instance HasIamFleetRole (SpotFleetRequestResource s) Text where
    type HasIamFleetRoleThread (SpotFleetRequestResource s) Text = s

    iamFleetRole =
        lens (_iam_fleet_role :: SpotFleetRequestResource s -> TF.Attribute s Text)
            (\s a -> s { _iam_fleet_role = a } :: SpotFleetRequestResource s)

instance HasInstanceInterruptionBehavior (SpotFleetRequestResource s) Text where
    type HasInstanceInterruptionBehaviorThread (SpotFleetRequestResource s) Text = s

    instanceInterruptionBehavior =
        lens (_instance_interruption_behavior :: SpotFleetRequestResource s -> TF.Attribute s Text)
            (\s a -> s { _instance_interruption_behavior = a } :: SpotFleetRequestResource s)

instance HasLaunchSpecification (SpotFleetRequestResource s) Text where
    type HasLaunchSpecificationThread (SpotFleetRequestResource s) Text = s

    launchSpecification =
        lens (_launch_specification :: SpotFleetRequestResource s -> TF.Attribute s Text)
            (\s a -> s { _launch_specification = a } :: SpotFleetRequestResource s)

instance HasReplaceUnhealthyInstances (SpotFleetRequestResource s) Text where
    type HasReplaceUnhealthyInstancesThread (SpotFleetRequestResource s) Text = s

    replaceUnhealthyInstances =
        lens (_replace_unhealthy_instances :: SpotFleetRequestResource s -> TF.Attribute s Text)
            (\s a -> s { _replace_unhealthy_instances = a } :: SpotFleetRequestResource s)

instance HasSpotPrice (SpotFleetRequestResource s) Text where
    type HasSpotPriceThread (SpotFleetRequestResource s) Text = s

    spotPrice =
        lens (_spot_price :: SpotFleetRequestResource s -> TF.Attribute s Text)
            (\s a -> s { _spot_price = a } :: SpotFleetRequestResource s)

instance HasTargetCapacity (SpotFleetRequestResource s) Text where
    type HasTargetCapacityThread (SpotFleetRequestResource s) Text = s

    targetCapacity =
        lens (_target_capacity :: SpotFleetRequestResource s -> TF.Attribute s Text)
            (\s a -> s { _target_capacity = a } :: SpotFleetRequestResource s)

instance HasTerminateInstancesWithExpiration (SpotFleetRequestResource s) Text where
    type HasTerminateInstancesWithExpirationThread (SpotFleetRequestResource s) Text = s

    terminateInstancesWithExpiration =
        lens (_terminate_instances_with_expiration :: SpotFleetRequestResource s -> TF.Attribute s Text)
            (\s a -> s { _terminate_instances_with_expiration = a } :: SpotFleetRequestResource s)

instance HasValidUntil (SpotFleetRequestResource s) Text where
    type HasValidUntilThread (SpotFleetRequestResource s) Text = s

    validUntil =
        lens (_valid_until :: SpotFleetRequestResource s -> TF.Attribute s Text)
            (\s a -> s { _valid_until = a } :: SpotFleetRequestResource s)

instance HasWaitForFulfillment (SpotFleetRequestResource s) Text where
    type HasWaitForFulfillmentThread (SpotFleetRequestResource s) Text = s

    waitForFulfillment =
        lens (_wait_for_fulfillment :: SpotFleetRequestResource s -> TF.Attribute s Text)
            (\s a -> s { _wait_for_fulfillment = a } :: SpotFleetRequestResource s)

spotFleetRequestResource :: TF.Resource TF.AWS (SpotFleetRequestResource s)
spotFleetRequestResource =
    TF.newResource "aws_spot_fleet_request" $
        SpotFleetRequestResource {
              _allocation_strategy = TF.Nil
            , _excess_capacity_termination_policy = TF.Nil
            , _iam_fleet_role = TF.Nil
            , _instance_interruption_behavior = TF.Nil
            , _launch_specification = TF.Nil
            , _replace_unhealthy_instances = TF.Nil
            , _spot_price = TF.Nil
            , _target_capacity = TF.Nil
            , _terminate_instances_with_expiration = TF.Nil
            , _valid_until = TF.Nil
            , _wait_for_fulfillment = TF.Nil
            }

{- | The @aws_spot_instance_request@ AWS resource.

Provides an EC2 Spot Instance Request resource. This allows instances to be
requested on the spot market. Terraform always creates Spot Instance
Requests with a @persistent@ type, which means that for the duration of
their lifetime, AWS will launch an instance with the configured details if
and when the spot market will accept the requested price. On destruction,
Terraform will make an attempt to terminate the associated Spot Instance if
there is one present. ~> NOTE: Because their behavior depends on the live
status of the spot market, Spot Instance Requests have a unique lifecycle
that makes them behave differently than other Terraform resources. Most
importantly: there is no guarantee that a Spot Instance exists to fulfill
the request at any given point in time. See the
<https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-spot-instances.html>
for more information.
-}
data SpotInstanceRequestResource s = SpotInstanceRequestResource {
      _block_duration_minutes :: !(TF.Attribute s Text)
    {- ^ (Optional) The required duration for the Spot instances, in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360). The duration period starts as soon as your Spot instance receives its instance ID. At the end of the duration period, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates. Note that you can't specify an Availability Zone group or a launch group if you specify a duration. -}
    , _instance_interruption_behavior :: !(TF.Attribute s Text)
    {- ^ (Optional) Indicates whether a Spot instance stops or terminates when it is interrupted. Default is @terminate@ as this is the current AWS behaviour. -}
    , _launch_group :: !(TF.Attribute s Text)
    {- ^ (Optional) A launch group is a group of spot instances that launch together and terminate together. If left empty instances are launched and terminated individually. -}
    , _spot_price :: !(TF.Attribute s Text)
    {- ^ (Required) The price to request on the spot market. -}
    , _spot_type :: !(TF.Attribute s Text)
    {- ^ (Optional; Default: "persistent") If set to "one-time", after the instance is terminated, the spot request will be closed. Also, Terraform can't manage one-time spot requests, just launch them. -}
    , _wait_for_fulfillment :: !(TF.Attribute s Text)
    {- ^ (Optional; Default: false) If set, Terraform will wait for the Spot Request to be fulfilled, and will throw an error if the timeout of 10m is reached. -}
    } deriving (Show, Eq)

instance TF.ToHCL (SpotInstanceRequestResource s) where
    toHCL SpotInstanceRequestResource{..} = TF.block $ catMaybes
        [ TF.assign "block_duration_minutes" <$> TF.attribute _block_duration_minutes
        , TF.assign "instance_interruption_behavior" <$> TF.attribute _instance_interruption_behavior
        , TF.assign "launch_group" <$> TF.attribute _launch_group
        , TF.assign "spot_price" <$> TF.attribute _spot_price
        , TF.assign "spot_type" <$> TF.attribute _spot_type
        , TF.assign "wait_for_fulfillment" <$> TF.attribute _wait_for_fulfillment
        ]

instance HasBlockDurationMinutes (SpotInstanceRequestResource s) Text where
    type HasBlockDurationMinutesThread (SpotInstanceRequestResource s) Text = s

    blockDurationMinutes =
        lens (_block_duration_minutes :: SpotInstanceRequestResource s -> TF.Attribute s Text)
            (\s a -> s { _block_duration_minutes = a } :: SpotInstanceRequestResource s)

instance HasInstanceInterruptionBehavior (SpotInstanceRequestResource s) Text where
    type HasInstanceInterruptionBehaviorThread (SpotInstanceRequestResource s) Text = s

    instanceInterruptionBehavior =
        lens (_instance_interruption_behavior :: SpotInstanceRequestResource s -> TF.Attribute s Text)
            (\s a -> s { _instance_interruption_behavior = a } :: SpotInstanceRequestResource s)

instance HasLaunchGroup (SpotInstanceRequestResource s) Text where
    type HasLaunchGroupThread (SpotInstanceRequestResource s) Text = s

    launchGroup =
        lens (_launch_group :: SpotInstanceRequestResource s -> TF.Attribute s Text)
            (\s a -> s { _launch_group = a } :: SpotInstanceRequestResource s)

instance HasSpotPrice (SpotInstanceRequestResource s) Text where
    type HasSpotPriceThread (SpotInstanceRequestResource s) Text = s

    spotPrice =
        lens (_spot_price :: SpotInstanceRequestResource s -> TF.Attribute s Text)
            (\s a -> s { _spot_price = a } :: SpotInstanceRequestResource s)

instance HasSpotType (SpotInstanceRequestResource s) Text where
    type HasSpotTypeThread (SpotInstanceRequestResource s) Text = s

    spotType =
        lens (_spot_type :: SpotInstanceRequestResource s -> TF.Attribute s Text)
            (\s a -> s { _spot_type = a } :: SpotInstanceRequestResource s)

instance HasWaitForFulfillment (SpotInstanceRequestResource s) Text where
    type HasWaitForFulfillmentThread (SpotInstanceRequestResource s) Text = s

    waitForFulfillment =
        lens (_wait_for_fulfillment :: SpotInstanceRequestResource s -> TF.Attribute s Text)
            (\s a -> s { _wait_for_fulfillment = a } :: SpotInstanceRequestResource s)

spotInstanceRequestResource :: TF.Resource TF.AWS (SpotInstanceRequestResource s)
spotInstanceRequestResource =
    TF.newResource "aws_spot_instance_request" $
        SpotInstanceRequestResource {
              _block_duration_minutes = TF.Nil
            , _instance_interruption_behavior = TF.Nil
            , _launch_group = TF.Nil
            , _spot_price = TF.Nil
            , _spot_type = TF.Nil
            , _wait_for_fulfillment = TF.Nil
            }

{- | The @aws_sqs_queue_policy@ AWS resource.

Allows you to set a policy of an SQS Queue while referencing ARN of the
queue within the policy.
-}
data SqsQueuePolicyResource s = SqsQueuePolicyResource {
      _policy :: !(TF.Attribute s Text)
    {- ^ (Required) The JSON policy for the SQS queue -}
    , _queue_url :: !(TF.Attribute s Text)
    {- ^ (Required) The URL of the SQS Queue to which to attach the policy -}
    } deriving (Show, Eq)

instance TF.ToHCL (SqsQueuePolicyResource s) where
    toHCL SqsQueuePolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "policy" <$> TF.attribute _policy
        , TF.assign "queue_url" <$> TF.attribute _queue_url
        ]

instance HasPolicy (SqsQueuePolicyResource s) Text where
    type HasPolicyThread (SqsQueuePolicyResource s) Text = s

    policy =
        lens (_policy :: SqsQueuePolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _policy = a } :: SqsQueuePolicyResource s)

instance HasQueueUrl (SqsQueuePolicyResource s) Text where
    type HasQueueUrlThread (SqsQueuePolicyResource s) Text = s

    queueUrl =
        lens (_queue_url :: SqsQueuePolicyResource s -> TF.Attribute s Text)
            (\s a -> s { _queue_url = a } :: SqsQueuePolicyResource s)

sqsQueuePolicyResource :: TF.Resource TF.AWS (SqsQueuePolicyResource s)
sqsQueuePolicyResource =
    TF.newResource "aws_sqs_queue_policy" $
        SqsQueuePolicyResource {
              _policy = TF.Nil
            , _queue_url = TF.Nil
            }

{- | The @aws_sqs_queue@ AWS resource.


-}
data SqsQueueResource s = SqsQueueResource {
      _content_based_deduplication :: !(TF.Attribute s Text)
    {- ^ (Optional) Enables content-based deduplication for FIFO queues. For more information, see the <http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html#FIFO-queues-exactly-once-processing> -}
    , _delay_seconds :: !(TF.Attribute s Text)
    {- ^ (Optional) The time in seconds that the delivery of all messages in the queue will be delayed. An integer from 0 to 900 (15 minutes). The default for this attribute is 0 seconds. -}
    , _fifo_queue :: !(TF.Attribute s Text)
    {- ^ (Optional) Boolean designating a FIFO queue. If not set, it defaults to @false@ making it standard. -}
    , _kms_data_key_reuse_period_seconds :: !(TF.Attribute s Text)
    {- ^ (Optional) The length of time, in seconds, for which Amazon SQS can reuse a data key to encrypt or decrypt messages before calling AWS KMS again. An integer representing seconds, between 60 seconds (1 minute) and 86,400 seconds (24 hours). The default is 300 (5 minutes). -}
    , _kms_master_key_id :: !(TF.Attribute s Text)
    {- ^ (Optional) The ID of an AWS-managed customer master key (CMK) for Amazon SQS or a custom CMK. For more information, see <http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-sse-key-terms> . -}
    , _max_message_size :: !(TF.Attribute s Text)
    {- ^ (Optional) The limit of how many bytes a message can contain before Amazon SQS rejects it. An integer from 1024 bytes (1 KiB) up to 262144 bytes (256 KiB). The default for this attribute is 262144 (256 KiB). -}
    , _message_retention_seconds :: !(TF.Attribute s Text)
    {- ^ (Optional) The number of seconds Amazon SQS retains a message. Integer representing seconds, from 60 (1 minute) to 1209600 (14 days). The default for this attribute is 345600 (4 days). -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Optional) This is the human-readable name of the queue. If omitted, Terraform will assign a random name. -}
    , _name_prefix :: !(TF.Attribute s Text)
    {- ^ (Optional) Creates a unique name beginning with the specified prefix. Conflicts with @name@ . -}
    , _policy :: !(TF.Attribute s Text)
    {- ^ (Optional) The JSON policy for the SQS queue -}
    , _receive_wait_time_seconds :: !(TF.Attribute s Text)
    {- ^ (Optional) The time for which a ReceiveMessage call will wait for a message to arrive (long polling) before returning. An integer from 0 to 20 (seconds). The default for this attribute is 0, meaning that the call will return immediately. -}
    , _redrive_policy :: !(TF.Attribute s Text)
    {- ^ (Optional) The JSON policy to set up the Dead Letter Queue, see <https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/SQSDeadLetterQueue.html> . Note: when specifying @maxReceiveCount@ , you must specify it as an integer ( @5@ ), and not a string ( @"5"@ ). -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the queue. -}
    , _visibility_timeout_seconds :: !(TF.Attribute s Text)
    {- ^ (Optional) The visibility timeout for the queue. An integer from 0 to 43200 (12 hours). The default for this attribute is 30. For more information about visibility timeout, see <https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/AboutVT.html> . -}
    } deriving (Show, Eq)

instance TF.ToHCL (SqsQueueResource s) where
    toHCL SqsQueueResource{..} = TF.block $ catMaybes
        [ TF.assign "content_based_deduplication" <$> TF.attribute _content_based_deduplication
        , TF.assign "delay_seconds" <$> TF.attribute _delay_seconds
        , TF.assign "fifo_queue" <$> TF.attribute _fifo_queue
        , TF.assign "kms_data_key_reuse_period_seconds" <$> TF.attribute _kms_data_key_reuse_period_seconds
        , TF.assign "kms_master_key_id" <$> TF.attribute _kms_master_key_id
        , TF.assign "max_message_size" <$> TF.attribute _max_message_size
        , TF.assign "message_retention_seconds" <$> TF.attribute _message_retention_seconds
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "name_prefix" <$> TF.attribute _name_prefix
        , TF.assign "policy" <$> TF.attribute _policy
        , TF.assign "receive_wait_time_seconds" <$> TF.attribute _receive_wait_time_seconds
        , TF.assign "redrive_policy" <$> TF.attribute _redrive_policy
        , TF.assign "tags" <$> TF.attribute _tags
        , TF.assign "visibility_timeout_seconds" <$> TF.attribute _visibility_timeout_seconds
        ]

instance HasContentBasedDeduplication (SqsQueueResource s) Text where
    type HasContentBasedDeduplicationThread (SqsQueueResource s) Text = s

    contentBasedDeduplication =
        lens (_content_based_deduplication :: SqsQueueResource s -> TF.Attribute s Text)
            (\s a -> s { _content_based_deduplication = a } :: SqsQueueResource s)

instance HasDelaySeconds (SqsQueueResource s) Text where
    type HasDelaySecondsThread (SqsQueueResource s) Text = s

    delaySeconds =
        lens (_delay_seconds :: SqsQueueResource s -> TF.Attribute s Text)
            (\s a -> s { _delay_seconds = a } :: SqsQueueResource s)

instance HasFifoQueue (SqsQueueResource s) Text where
    type HasFifoQueueThread (SqsQueueResource s) Text = s

    fifoQueue =
        lens (_fifo_queue :: SqsQueueResource s -> TF.Attribute s Text)
            (\s a -> s { _fifo_queue = a } :: SqsQueueResource s)

instance HasKmsDataKeyReusePeriodSeconds (SqsQueueResource s) Text where
    type HasKmsDataKeyReusePeriodSecondsThread (SqsQueueResource s) Text = s

    kmsDataKeyReusePeriodSeconds =
        lens (_kms_data_key_reuse_period_seconds :: SqsQueueResource s -> TF.Attribute s Text)
            (\s a -> s { _kms_data_key_reuse_period_seconds = a } :: SqsQueueResource s)

instance HasKmsMasterKeyId (SqsQueueResource s) Text where
    type HasKmsMasterKeyIdThread (SqsQueueResource s) Text = s

    kmsMasterKeyId =
        lens (_kms_master_key_id :: SqsQueueResource s -> TF.Attribute s Text)
            (\s a -> s { _kms_master_key_id = a } :: SqsQueueResource s)

instance HasMaxMessageSize (SqsQueueResource s) Text where
    type HasMaxMessageSizeThread (SqsQueueResource s) Text = s

    maxMessageSize =
        lens (_max_message_size :: SqsQueueResource s -> TF.Attribute s Text)
            (\s a -> s { _max_message_size = a } :: SqsQueueResource s)

instance HasMessageRetentionSeconds (SqsQueueResource s) Text where
    type HasMessageRetentionSecondsThread (SqsQueueResource s) Text = s

    messageRetentionSeconds =
        lens (_message_retention_seconds :: SqsQueueResource s -> TF.Attribute s Text)
            (\s a -> s { _message_retention_seconds = a } :: SqsQueueResource s)

instance HasName (SqsQueueResource s) Text where
    type HasNameThread (SqsQueueResource s) Text = s

    name =
        lens (_name :: SqsQueueResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: SqsQueueResource s)

instance HasNamePrefix (SqsQueueResource s) Text where
    type HasNamePrefixThread (SqsQueueResource s) Text = s

    namePrefix =
        lens (_name_prefix :: SqsQueueResource s -> TF.Attribute s Text)
            (\s a -> s { _name_prefix = a } :: SqsQueueResource s)

instance HasPolicy (SqsQueueResource s) Text where
    type HasPolicyThread (SqsQueueResource s) Text = s

    policy =
        lens (_policy :: SqsQueueResource s -> TF.Attribute s Text)
            (\s a -> s { _policy = a } :: SqsQueueResource s)

instance HasReceiveWaitTimeSeconds (SqsQueueResource s) Text where
    type HasReceiveWaitTimeSecondsThread (SqsQueueResource s) Text = s

    receiveWaitTimeSeconds =
        lens (_receive_wait_time_seconds :: SqsQueueResource s -> TF.Attribute s Text)
            (\s a -> s { _receive_wait_time_seconds = a } :: SqsQueueResource s)

instance HasRedrivePolicy (SqsQueueResource s) Text where
    type HasRedrivePolicyThread (SqsQueueResource s) Text = s

    redrivePolicy =
        lens (_redrive_policy :: SqsQueueResource s -> TF.Attribute s Text)
            (\s a -> s { _redrive_policy = a } :: SqsQueueResource s)

instance HasTags (SqsQueueResource s) TF.Tags where
    type HasTagsThread (SqsQueueResource s) TF.Tags = s

    tags =
        lens (_tags :: SqsQueueResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: SqsQueueResource s)

instance HasVisibilityTimeoutSeconds (SqsQueueResource s) Text where
    type HasVisibilityTimeoutSecondsThread (SqsQueueResource s) Text = s

    visibilityTimeoutSeconds =
        lens (_visibility_timeout_seconds :: SqsQueueResource s -> TF.Attribute s Text)
            (\s a -> s { _visibility_timeout_seconds = a } :: SqsQueueResource s)

instance HasComputedArn (SqsQueueResource s) Text

instance HasComputedId (SqsQueueResource s) Text

sqsQueueResource :: TF.Resource TF.AWS (SqsQueueResource s)
sqsQueueResource =
    TF.newResource "aws_sqs_queue" $
        SqsQueueResource {
              _content_based_deduplication = TF.Nil
            , _delay_seconds = TF.Nil
            , _fifo_queue = TF.Nil
            , _kms_data_key_reuse_period_seconds = TF.Nil
            , _kms_master_key_id = TF.Nil
            , _max_message_size = TF.Nil
            , _message_retention_seconds = TF.Nil
            , _name = TF.Nil
            , _name_prefix = TF.Nil
            , _policy = TF.Nil
            , _receive_wait_time_seconds = TF.Nil
            , _redrive_policy = TF.Nil
            , _tags = TF.Nil
            , _visibility_timeout_seconds = TF.Nil
            }

{- | The @aws_ssm_activation@ AWS resource.

Registers an on-premises server or virtual machine with Amazon EC2 so that
it can be managed using Run Command.
-}
data SsmActivationResource s = SsmActivationResource {
      _description :: !(TF.Attribute s Text)
    {- ^ (Optional) The description of the resource that you want to register. -}
    , _expiration_date :: !(TF.Attribute s Text)
    {- ^ (Optional) The date by which this activation request should expire. The default value is 24 hours. -}
    , _iam_role :: !(TF.Attribute s Text)
    {- ^ (Required) The IAM Role to attach to the managed instance. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Optional) The default name of the registerd managed instance. -}
    , _registration_limit :: !(TF.Attribute s Text)
    {- ^ (Optional) The maximum number of managed instances you want to register. The default value is 1 instance. -}
    } deriving (Show, Eq)

instance TF.ToHCL (SsmActivationResource s) where
    toHCL SsmActivationResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.attribute _description
        , TF.assign "expiration_date" <$> TF.attribute _expiration_date
        , TF.assign "iam_role" <$> TF.attribute _iam_role
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "registration_limit" <$> TF.attribute _registration_limit
        ]

instance HasDescription (SsmActivationResource s) Text where
    type HasDescriptionThread (SsmActivationResource s) Text = s

    description =
        lens (_description :: SsmActivationResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: SsmActivationResource s)

instance HasExpirationDate (SsmActivationResource s) Text where
    type HasExpirationDateThread (SsmActivationResource s) Text = s

    expirationDate =
        lens (_expiration_date :: SsmActivationResource s -> TF.Attribute s Text)
            (\s a -> s { _expiration_date = a } :: SsmActivationResource s)

instance HasIamRole (SsmActivationResource s) Text where
    type HasIamRoleThread (SsmActivationResource s) Text = s

    iamRole =
        lens (_iam_role :: SsmActivationResource s -> TF.Attribute s Text)
            (\s a -> s { _iam_role = a } :: SsmActivationResource s)

instance HasName (SsmActivationResource s) Text where
    type HasNameThread (SsmActivationResource s) Text = s

    name =
        lens (_name :: SsmActivationResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: SsmActivationResource s)

instance HasRegistrationLimit (SsmActivationResource s) Text where
    type HasRegistrationLimitThread (SsmActivationResource s) Text = s

    registrationLimit =
        lens (_registration_limit :: SsmActivationResource s -> TF.Attribute s Text)
            (\s a -> s { _registration_limit = a } :: SsmActivationResource s)

instance HasComputedActivationCode (SsmActivationResource s) Text

instance HasComputedDescription (SsmActivationResource s) Text

instance HasComputedExpirationDate (SsmActivationResource s) Text

instance HasComputedExpired (SsmActivationResource s) Text

instance HasComputedIamRole (SsmActivationResource s) Text

instance HasComputedName (SsmActivationResource s) Text

instance HasComputedRegistrationCount (SsmActivationResource s) Text

instance HasComputedRegistrationLimit (SsmActivationResource s) Text

ssmActivationResource :: TF.Resource TF.AWS (SsmActivationResource s)
ssmActivationResource =
    TF.newResource "aws_ssm_activation" $
        SsmActivationResource {
              _description = TF.Nil
            , _expiration_date = TF.Nil
            , _iam_role = TF.Nil
            , _name = TF.Nil
            , _registration_limit = TF.Nil
            }

{- | The @aws_ssm_association@ AWS resource.

Associates an SSM Document to an instance or EC2 tag.
-}
data SsmAssociationResource s = SsmAssociationResource {
      _association_name :: !(TF.Attribute s Text)
    {- ^ (Optional) The descriptive name for the association. -}
    , _document_version :: !(TF.Attribute s Text)
    {- ^ (Optional) The document version you want to associate with the target(s). Can be a specific version or the default version. -}
    , _instance_id :: !(TF.Attribute s Text)
    {- ^ (Optional) The instance ID to apply an SSM document to. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the SSM document to apply. -}
    , _output_location :: !(TF.Attribute s Text)
    {- ^ (Optional) An output location block. Output Location is documented below. -}
    , _parameters :: !(TF.Attribute s Text)
    {- ^ (Optional) A block of arbitrary string parameters to pass to the SSM document. -}
    , _schedule_expression :: !(TF.Attribute s Text)
    {- ^ (Optional) A cron expression when the association will be applied to the target(s). -}
    , _targets :: !(TF.Attribute s Text)
    {- ^ (Optional) A block containing the targets of the SSM association. Targets are documented below. AWS currently supports a maximum of 5 targets. -}
    } deriving (Show, Eq)

instance TF.ToHCL (SsmAssociationResource s) where
    toHCL SsmAssociationResource{..} = TF.block $ catMaybes
        [ TF.assign "association_name" <$> TF.attribute _association_name
        , TF.assign "document_version" <$> TF.attribute _document_version
        , TF.assign "instance_id" <$> TF.attribute _instance_id
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "output_location" <$> TF.attribute _output_location
        , TF.assign "parameters" <$> TF.attribute _parameters
        , TF.assign "schedule_expression" <$> TF.attribute _schedule_expression
        , TF.assign "targets" <$> TF.attribute _targets
        ]

instance HasAssociationName (SsmAssociationResource s) Text where
    type HasAssociationNameThread (SsmAssociationResource s) Text = s

    associationName =
        lens (_association_name :: SsmAssociationResource s -> TF.Attribute s Text)
            (\s a -> s { _association_name = a } :: SsmAssociationResource s)

instance HasDocumentVersion (SsmAssociationResource s) Text where
    type HasDocumentVersionThread (SsmAssociationResource s) Text = s

    documentVersion =
        lens (_document_version :: SsmAssociationResource s -> TF.Attribute s Text)
            (\s a -> s { _document_version = a } :: SsmAssociationResource s)

instance HasInstanceId (SsmAssociationResource s) Text where
    type HasInstanceIdThread (SsmAssociationResource s) Text = s

    instanceId =
        lens (_instance_id :: SsmAssociationResource s -> TF.Attribute s Text)
            (\s a -> s { _instance_id = a } :: SsmAssociationResource s)

instance HasName (SsmAssociationResource s) Text where
    type HasNameThread (SsmAssociationResource s) Text = s

    name =
        lens (_name :: SsmAssociationResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: SsmAssociationResource s)

instance HasOutputLocation (SsmAssociationResource s) Text where
    type HasOutputLocationThread (SsmAssociationResource s) Text = s

    outputLocation =
        lens (_output_location :: SsmAssociationResource s -> TF.Attribute s Text)
            (\s a -> s { _output_location = a } :: SsmAssociationResource s)

instance HasParameters (SsmAssociationResource s) Text where
    type HasParametersThread (SsmAssociationResource s) Text = s

    parameters =
        lens (_parameters :: SsmAssociationResource s -> TF.Attribute s Text)
            (\s a -> s { _parameters = a } :: SsmAssociationResource s)

instance HasScheduleExpression (SsmAssociationResource s) Text where
    type HasScheduleExpressionThread (SsmAssociationResource s) Text = s

    scheduleExpression =
        lens (_schedule_expression :: SsmAssociationResource s -> TF.Attribute s Text)
            (\s a -> s { _schedule_expression = a } :: SsmAssociationResource s)

instance HasTargets (SsmAssociationResource s) Text where
    type HasTargetsThread (SsmAssociationResource s) Text = s

    targets =
        lens (_targets :: SsmAssociationResource s -> TF.Attribute s Text)
            (\s a -> s { _targets = a } :: SsmAssociationResource s)

instance HasComputedInstanceIds (SsmAssociationResource s) Text

instance HasComputedName (SsmAssociationResource s) Text

instance HasComputedParameters (SsmAssociationResource s) Text

ssmAssociationResource :: TF.Resource TF.AWS (SsmAssociationResource s)
ssmAssociationResource =
    TF.newResource "aws_ssm_association" $
        SsmAssociationResource {
              _association_name = TF.Nil
            , _document_version = TF.Nil
            , _instance_id = TF.Nil
            , _name = TF.Nil
            , _output_location = TF.Nil
            , _parameters = TF.Nil
            , _schedule_expression = TF.Nil
            , _targets = TF.Nil
            }

{- | The @aws_ssm_document@ AWS resource.

Provides an SSM Document resource ~> NOTE on updating SSM documents: Only
documents with a schema version of 2.0 or greater can update their content
once created, see
<http://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-ssm-docs.html#document-schemas-features>
. To update a document with an older schema version you must recreate the
resource.
-}
data SsmDocumentResource s = SsmDocumentResource {
      _content :: !(TF.Attribute s Text)
    {- ^ (Required) The json content of the document. -}
    , _document_type :: !(TF.Attribute s Text)
    {- ^ (Required) The type of the document. Valid document types include: @Command@ , @Policy@ and @Automation@ -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the document. -}
    , _permissions :: !(TF.Attribute s Text)
    {- ^ (Optional) Additional Permissions to attach to the document. See <#permissions> below for details. -}
    } deriving (Show, Eq)

instance TF.ToHCL (SsmDocumentResource s) where
    toHCL SsmDocumentResource{..} = TF.block $ catMaybes
        [ TF.assign "content" <$> TF.attribute _content
        , TF.assign "document_type" <$> TF.attribute _document_type
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "permissions" <$> TF.attribute _permissions
        ]

instance HasContent (SsmDocumentResource s) Text where
    type HasContentThread (SsmDocumentResource s) Text = s

    content =
        lens (_content :: SsmDocumentResource s -> TF.Attribute s Text)
            (\s a -> s { _content = a } :: SsmDocumentResource s)

instance HasDocumentType (SsmDocumentResource s) Text where
    type HasDocumentTypeThread (SsmDocumentResource s) Text = s

    documentType =
        lens (_document_type :: SsmDocumentResource s -> TF.Attribute s Text)
            (\s a -> s { _document_type = a } :: SsmDocumentResource s)

instance HasName (SsmDocumentResource s) Text where
    type HasNameThread (SsmDocumentResource s) Text = s

    name =
        lens (_name :: SsmDocumentResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: SsmDocumentResource s)

instance HasPermissions (SsmDocumentResource s) Text where
    type HasPermissionsThread (SsmDocumentResource s) Text = s

    permissions =
        lens (_permissions :: SsmDocumentResource s -> TF.Attribute s Text)
            (\s a -> s { _permissions = a } :: SsmDocumentResource s)

instance HasComputedContent (SsmDocumentResource s) Text

instance HasComputedCreatedDate (SsmDocumentResource s) Text

instance HasComputedDefaultVersion (SsmDocumentResource s) Text

instance HasComputedDescription (SsmDocumentResource s) Text

instance HasComputedDocumentType (SsmDocumentResource s) Text

instance HasComputedHash (SsmDocumentResource s) Text

instance HasComputedHashType (SsmDocumentResource s) Text

instance HasComputedLatestVersion (SsmDocumentResource s) Text

instance HasComputedName (SsmDocumentResource s) Text

instance HasComputedOwner (SsmDocumentResource s) Text

instance HasComputedParameter (SsmDocumentResource s) Text

instance HasComputedPermissions (SsmDocumentResource s) Text

instance HasComputedPlatformTypes (SsmDocumentResource s) Text

instance HasComputedSchemaVersion (SsmDocumentResource s) Text

instance HasComputedStatus (SsmDocumentResource s) Text

ssmDocumentResource :: TF.Resource TF.AWS (SsmDocumentResource s)
ssmDocumentResource =
    TF.newResource "aws_ssm_document" $
        SsmDocumentResource {
              _content = TF.Nil
            , _document_type = TF.Nil
            , _name = TF.Nil
            , _permissions = TF.Nil
            }

{- | The @aws_ssm_maintenance_window@ AWS resource.

Provides an SSM Maintenance Window resource
-}
data SsmMaintenanceWindowResource s = SsmMaintenanceWindowResource {
      _allow_unassociated_targets :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether targets must be registered with the Maintenance Window before tasks can be defined for those targets. -}
    , _cutoff :: !(TF.Attribute s Text)
    {- ^ (Required) The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution. -}
    , _duration :: !(TF.Attribute s Text)
    {- ^ (Required) The duration of the Maintenance Window in hours. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the maintenance window. -}
    , _schedule :: !(TF.Attribute s Text)
    {- ^ (Required) The schedule of the Maintenance Window in the form of a <https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-maintenance-cron.html> or rate expression. -}
    } deriving (Show, Eq)

instance TF.ToHCL (SsmMaintenanceWindowResource s) where
    toHCL SsmMaintenanceWindowResource{..} = TF.block $ catMaybes
        [ TF.assign "allow_unassociated_targets" <$> TF.attribute _allow_unassociated_targets
        , TF.assign "cutoff" <$> TF.attribute _cutoff
        , TF.assign "duration" <$> TF.attribute _duration
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "schedule" <$> TF.attribute _schedule
        ]

instance HasAllowUnassociatedTargets (SsmMaintenanceWindowResource s) Text where
    type HasAllowUnassociatedTargetsThread (SsmMaintenanceWindowResource s) Text = s

    allowUnassociatedTargets =
        lens (_allow_unassociated_targets :: SsmMaintenanceWindowResource s -> TF.Attribute s Text)
            (\s a -> s { _allow_unassociated_targets = a } :: SsmMaintenanceWindowResource s)

instance HasCutoff (SsmMaintenanceWindowResource s) Text where
    type HasCutoffThread (SsmMaintenanceWindowResource s) Text = s

    cutoff =
        lens (_cutoff :: SsmMaintenanceWindowResource s -> TF.Attribute s Text)
            (\s a -> s { _cutoff = a } :: SsmMaintenanceWindowResource s)

instance HasDuration (SsmMaintenanceWindowResource s) Text where
    type HasDurationThread (SsmMaintenanceWindowResource s) Text = s

    duration =
        lens (_duration :: SsmMaintenanceWindowResource s -> TF.Attribute s Text)
            (\s a -> s { _duration = a } :: SsmMaintenanceWindowResource s)

instance HasName (SsmMaintenanceWindowResource s) Text where
    type HasNameThread (SsmMaintenanceWindowResource s) Text = s

    name =
        lens (_name :: SsmMaintenanceWindowResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: SsmMaintenanceWindowResource s)

instance HasSchedule (SsmMaintenanceWindowResource s) Text where
    type HasScheduleThread (SsmMaintenanceWindowResource s) Text = s

    schedule =
        lens (_schedule :: SsmMaintenanceWindowResource s -> TF.Attribute s Text)
            (\s a -> s { _schedule = a } :: SsmMaintenanceWindowResource s)

instance HasComputedId (SsmMaintenanceWindowResource s) Text

ssmMaintenanceWindowResource :: TF.Resource TF.AWS (SsmMaintenanceWindowResource s)
ssmMaintenanceWindowResource =
    TF.newResource "aws_ssm_maintenance_window" $
        SsmMaintenanceWindowResource {
              _allow_unassociated_targets = TF.Nil
            , _cutoff = TF.Nil
            , _duration = TF.Nil
            , _name = TF.Nil
            , _schedule = TF.Nil
            }

{- | The @aws_ssm_maintenance_window_target@ AWS resource.

Provides an SSM Maintenance Window Target resource
-}
data SsmMaintenanceWindowTargetResource s = SsmMaintenanceWindowTargetResource {
      _owner_information :: !(TF.Attribute s Text)
    {- ^ (Optional) User-provided value that will be included in any CloudWatch events raised while running tasks for these targets in this Maintenance Window. -}
    , _resource_type :: !(TF.Attribute s Text)
    {- ^ (Required) The type of target being registered with the Maintenance Window. Possible values @INSTANCE@ . -}
    , _targets :: !(TF.Attribute s Text)
    {- ^ (Required) The targets (either instances or tags). Instances are specified using Key=instanceids,Values=instanceid1,instanceid2. Tags are specified using Key=tag name,Values=tag value. -}
    , _window_id :: !(TF.Attribute s Text)
    {- ^ (Required) The Id of the maintenance window to register the target with. -}
    } deriving (Show, Eq)

instance TF.ToHCL (SsmMaintenanceWindowTargetResource s) where
    toHCL SsmMaintenanceWindowTargetResource{..} = TF.block $ catMaybes
        [ TF.assign "owner_information" <$> TF.attribute _owner_information
        , TF.assign "resource_type" <$> TF.attribute _resource_type
        , TF.assign "targets" <$> TF.attribute _targets
        , TF.assign "window_id" <$> TF.attribute _window_id
        ]

instance HasOwnerInformation (SsmMaintenanceWindowTargetResource s) Text where
    type HasOwnerInformationThread (SsmMaintenanceWindowTargetResource s) Text = s

    ownerInformation =
        lens (_owner_information :: SsmMaintenanceWindowTargetResource s -> TF.Attribute s Text)
            (\s a -> s { _owner_information = a } :: SsmMaintenanceWindowTargetResource s)

instance HasResourceType (SsmMaintenanceWindowTargetResource s) Text where
    type HasResourceTypeThread (SsmMaintenanceWindowTargetResource s) Text = s

    resourceType =
        lens (_resource_type :: SsmMaintenanceWindowTargetResource s -> TF.Attribute s Text)
            (\s a -> s { _resource_type = a } :: SsmMaintenanceWindowTargetResource s)

instance HasTargets (SsmMaintenanceWindowTargetResource s) Text where
    type HasTargetsThread (SsmMaintenanceWindowTargetResource s) Text = s

    targets =
        lens (_targets :: SsmMaintenanceWindowTargetResource s -> TF.Attribute s Text)
            (\s a -> s { _targets = a } :: SsmMaintenanceWindowTargetResource s)

instance HasWindowId (SsmMaintenanceWindowTargetResource s) Text where
    type HasWindowIdThread (SsmMaintenanceWindowTargetResource s) Text = s

    windowId =
        lens (_window_id :: SsmMaintenanceWindowTargetResource s -> TF.Attribute s Text)
            (\s a -> s { _window_id = a } :: SsmMaintenanceWindowTargetResource s)

instance HasComputedId (SsmMaintenanceWindowTargetResource s) Text

ssmMaintenanceWindowTargetResource :: TF.Resource TF.AWS (SsmMaintenanceWindowTargetResource s)
ssmMaintenanceWindowTargetResource =
    TF.newResource "aws_ssm_maintenance_window_target" $
        SsmMaintenanceWindowTargetResource {
              _owner_information = TF.Nil
            , _resource_type = TF.Nil
            , _targets = TF.Nil
            , _window_id = TF.Nil
            }

{- | The @aws_ssm_maintenance_window_task@ AWS resource.

Provides an SSM Maintenance Window Task resource
-}
data SsmMaintenanceWindowTaskResource s = SsmMaintenanceWindowTaskResource {
      _logging_info :: !(TF.Attribute s Text)
    {- ^ (Optional) A structure containing information about an Amazon S3 bucket to write instance-level logs to. Documented below. -}
    , _max_concurrency :: !(TF.Attribute s Text)
    {- ^ (Required) The maximum number of targets this task can be run for in parallel. -}
    , _max_errors :: !(TF.Attribute s Text)
    {- ^ (Required) The maximum number of errors allowed before this task stops being scheduled. -}
    , _priority :: !(TF.Attribute s Text)
    {- ^ (Optional) The priority of the task in the Maintenance Window, the lower the number the higher the priority. Tasks in a Maintenance Window are scheduled in priority order with tasks that have the same priority scheduled in parallel. -}
    , _service_role_arn :: !(TF.Attribute s Text)
    {- ^ (Required) The role that should be assumed when executing the task. -}
    , _targets :: !(TF.Attribute s Text)
    {- ^ (Required) The targets (either instances or window target ids). Instances are specified using Key=InstanceIds,Values=instanceid1,instanceid2. Window target ids are specified using Key=WindowTargetIds,Values=window target id1, window target id2. -}
    , _task_arn :: !(TF.Attribute s Text)
    {- ^ (Required) The ARN of the task to execute. -}
    , _task_parameters :: !(TF.Attribute s Text)
    {- ^ (Optional) A structure containing information about parameters required by the particular @task_arn@ . Documented below. -}
    , _task_type :: !(TF.Attribute s Text)
    {- ^ (Required) The type of task being registered. The only allowed value is @RUN_COMMAND@ . -}
    , _window_id :: !(TF.Attribute s Text)
    {- ^ (Required) The Id of the maintenance window to register the task with. -}
    } deriving (Show, Eq)

instance TF.ToHCL (SsmMaintenanceWindowTaskResource s) where
    toHCL SsmMaintenanceWindowTaskResource{..} = TF.block $ catMaybes
        [ TF.assign "logging_info" <$> TF.attribute _logging_info
        , TF.assign "max_concurrency" <$> TF.attribute _max_concurrency
        , TF.assign "max_errors" <$> TF.attribute _max_errors
        , TF.assign "priority" <$> TF.attribute _priority
        , TF.assign "service_role_arn" <$> TF.attribute _service_role_arn
        , TF.assign "targets" <$> TF.attribute _targets
        , TF.assign "task_arn" <$> TF.attribute _task_arn
        , TF.assign "task_parameters" <$> TF.attribute _task_parameters
        , TF.assign "task_type" <$> TF.attribute _task_type
        , TF.assign "window_id" <$> TF.attribute _window_id
        ]

instance HasLoggingInfo (SsmMaintenanceWindowTaskResource s) Text where
    type HasLoggingInfoThread (SsmMaintenanceWindowTaskResource s) Text = s

    loggingInfo =
        lens (_logging_info :: SsmMaintenanceWindowTaskResource s -> TF.Attribute s Text)
            (\s a -> s { _logging_info = a } :: SsmMaintenanceWindowTaskResource s)

instance HasMaxConcurrency (SsmMaintenanceWindowTaskResource s) Text where
    type HasMaxConcurrencyThread (SsmMaintenanceWindowTaskResource s) Text = s

    maxConcurrency =
        lens (_max_concurrency :: SsmMaintenanceWindowTaskResource s -> TF.Attribute s Text)
            (\s a -> s { _max_concurrency = a } :: SsmMaintenanceWindowTaskResource s)

instance HasMaxErrors (SsmMaintenanceWindowTaskResource s) Text where
    type HasMaxErrorsThread (SsmMaintenanceWindowTaskResource s) Text = s

    maxErrors =
        lens (_max_errors :: SsmMaintenanceWindowTaskResource s -> TF.Attribute s Text)
            (\s a -> s { _max_errors = a } :: SsmMaintenanceWindowTaskResource s)

instance HasPriority (SsmMaintenanceWindowTaskResource s) Text where
    type HasPriorityThread (SsmMaintenanceWindowTaskResource s) Text = s

    priority =
        lens (_priority :: SsmMaintenanceWindowTaskResource s -> TF.Attribute s Text)
            (\s a -> s { _priority = a } :: SsmMaintenanceWindowTaskResource s)

instance HasServiceRoleArn (SsmMaintenanceWindowTaskResource s) Text where
    type HasServiceRoleArnThread (SsmMaintenanceWindowTaskResource s) Text = s

    serviceRoleArn =
        lens (_service_role_arn :: SsmMaintenanceWindowTaskResource s -> TF.Attribute s Text)
            (\s a -> s { _service_role_arn = a } :: SsmMaintenanceWindowTaskResource s)

instance HasTargets (SsmMaintenanceWindowTaskResource s) Text where
    type HasTargetsThread (SsmMaintenanceWindowTaskResource s) Text = s

    targets =
        lens (_targets :: SsmMaintenanceWindowTaskResource s -> TF.Attribute s Text)
            (\s a -> s { _targets = a } :: SsmMaintenanceWindowTaskResource s)

instance HasTaskArn (SsmMaintenanceWindowTaskResource s) Text where
    type HasTaskArnThread (SsmMaintenanceWindowTaskResource s) Text = s

    taskArn =
        lens (_task_arn :: SsmMaintenanceWindowTaskResource s -> TF.Attribute s Text)
            (\s a -> s { _task_arn = a } :: SsmMaintenanceWindowTaskResource s)

instance HasTaskParameters (SsmMaintenanceWindowTaskResource s) Text where
    type HasTaskParametersThread (SsmMaintenanceWindowTaskResource s) Text = s

    taskParameters =
        lens (_task_parameters :: SsmMaintenanceWindowTaskResource s -> TF.Attribute s Text)
            (\s a -> s { _task_parameters = a } :: SsmMaintenanceWindowTaskResource s)

instance HasTaskType (SsmMaintenanceWindowTaskResource s) Text where
    type HasTaskTypeThread (SsmMaintenanceWindowTaskResource s) Text = s

    taskType =
        lens (_task_type :: SsmMaintenanceWindowTaskResource s -> TF.Attribute s Text)
            (\s a -> s { _task_type = a } :: SsmMaintenanceWindowTaskResource s)

instance HasWindowId (SsmMaintenanceWindowTaskResource s) Text where
    type HasWindowIdThread (SsmMaintenanceWindowTaskResource s) Text = s

    windowId =
        lens (_window_id :: SsmMaintenanceWindowTaskResource s -> TF.Attribute s Text)
            (\s a -> s { _window_id = a } :: SsmMaintenanceWindowTaskResource s)

instance HasComputedId (SsmMaintenanceWindowTaskResource s) Text

ssmMaintenanceWindowTaskResource :: TF.Resource TF.AWS (SsmMaintenanceWindowTaskResource s)
ssmMaintenanceWindowTaskResource =
    TF.newResource "aws_ssm_maintenance_window_task" $
        SsmMaintenanceWindowTaskResource {
              _logging_info = TF.Nil
            , _max_concurrency = TF.Nil
            , _max_errors = TF.Nil
            , _priority = TF.Nil
            , _service_role_arn = TF.Nil
            , _targets = TF.Nil
            , _task_arn = TF.Nil
            , _task_parameters = TF.Nil
            , _task_type = TF.Nil
            , _window_id = TF.Nil
            }

{- | The @aws_ssm_parameter@ AWS resource.

Provides an SSM Parameter resource.
-}
data SsmParameterResource s = SsmParameterResource {
      _key_id :: !(TF.Attribute s Text)
    {- ^ (Optional) The KMS key id or arn for encrypting a SecureString. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the parameter. -}
    , _overwrite :: !(TF.Attribute s Text)
    {- ^ (Optional) Overwrite an existing parameter. If not specified, will default to @false@ . -}
    , _type' :: !(TF.Attribute s Text)
    {- ^ (Required) The type of the parameter. Valid types are @String@ , @StringList@ and @SecureString@ . -}
    , _value :: !(TF.Attribute s Text)
    {- ^ (Required) The value of the parameter. -}
    } deriving (Show, Eq)

instance TF.ToHCL (SsmParameterResource s) where
    toHCL SsmParameterResource{..} = TF.block $ catMaybes
        [ TF.assign "key_id" <$> TF.attribute _key_id
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "overwrite" <$> TF.attribute _overwrite
        , TF.assign "type" <$> TF.attribute _type'
        , TF.assign "value" <$> TF.attribute _value
        ]

instance HasKeyId (SsmParameterResource s) Text where
    type HasKeyIdThread (SsmParameterResource s) Text = s

    keyId =
        lens (_key_id :: SsmParameterResource s -> TF.Attribute s Text)
            (\s a -> s { _key_id = a } :: SsmParameterResource s)

instance HasName (SsmParameterResource s) Text where
    type HasNameThread (SsmParameterResource s) Text = s

    name =
        lens (_name :: SsmParameterResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: SsmParameterResource s)

instance HasOverwrite (SsmParameterResource s) Text where
    type HasOverwriteThread (SsmParameterResource s) Text = s

    overwrite =
        lens (_overwrite :: SsmParameterResource s -> TF.Attribute s Text)
            (\s a -> s { _overwrite = a } :: SsmParameterResource s)

instance HasType' (SsmParameterResource s) Text where
    type HasType'Thread (SsmParameterResource s) Text = s

    type' =
        lens (_type' :: SsmParameterResource s -> TF.Attribute s Text)
            (\s a -> s { _type' = a } :: SsmParameterResource s)

instance HasValue (SsmParameterResource s) Text where
    type HasValueThread (SsmParameterResource s) Text = s

    value =
        lens (_value :: SsmParameterResource s -> TF.Attribute s Text)
            (\s a -> s { _value = a } :: SsmParameterResource s)

instance HasComputedArn (SsmParameterResource s) Text

instance HasComputedName (SsmParameterResource s) Text

instance HasComputedType' (SsmParameterResource s) Text

instance HasComputedValue (SsmParameterResource s) Text

ssmParameterResource :: TF.Resource TF.AWS (SsmParameterResource s)
ssmParameterResource =
    TF.newResource "aws_ssm_parameter" $
        SsmParameterResource {
              _key_id = TF.Nil
            , _name = TF.Nil
            , _overwrite = TF.Nil
            , _type' = TF.Nil
            , _value = TF.Nil
            }

{- | The @aws_ssm_patch_baseline@ AWS resource.

Provides an SSM Patch Baseline resource ~> NOTE on Patch Baselines: The
@approved_patches@ and @approval_rule@ are both marked as optional fields,
but the Patch Baseline requires that at least one of them is specified.
-}
data SsmPatchBaselineResource s = SsmPatchBaselineResource {
      _approval_rule :: !(TF.Attribute s Text)
    {- ^ (Optional) A set of rules used to include patches in the baseline. up to 10 approval rules can be specified. Each approval_rule block requires the fields documented below. -}
    , _approved_patches :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of explicitly approved patches for the baseline. -}
    , _approved_patches_compliance_level :: !(TF.Attribute s Text)
    {- ^ (Optional) Defines the compliance level for approved patches. This means that if an approved patch is reported as missing, this is the severity of the compliance violation. Valid compliance levels include the following: @CRITICAL@ , @HIGH@ , @MEDIUM@ , @LOW@ , @INFORMATIONAL@ , @UNSPECIFIED@ . The default value is @UNSPECIFIED@ . -}
    , _description :: !(TF.Attribute s Text)
    {- ^ (Optional) The description of the patch baseline. -}
    , _global_filter :: !(TF.Attribute s Text)
    {- ^ (Optional) A set of global filters used to exclude patches from the baseline. Up to 4 global filters can be specified using Key/Value pairs. Valid Keys are @PRODUCT | CLASSIFICATION | MSRC_SEVERITY | PATCH_ID@ . -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the patch baseline. -}
    , _operating_system :: !(TF.Attribute s Text)
    {- ^ (Optional) Defines the operating system the patch baseline applies to. Supported operating systems include @WINDOWS@ , @AMAZON_LINUX@ , @UBUNTU@ and @REDHAT_ENTERPRISE_LINUX@ . The Default value is @WINDOWS@ . -}
    , _rejected_patches :: !(TF.Attribute s Text)
    {- ^ (Optional) A list of rejected patches. -}
    } deriving (Show, Eq)

instance TF.ToHCL (SsmPatchBaselineResource s) where
    toHCL SsmPatchBaselineResource{..} = TF.block $ catMaybes
        [ TF.assign "approval_rule" <$> TF.attribute _approval_rule
        , TF.assign "approved_patches" <$> TF.attribute _approved_patches
        , TF.assign "approved_patches_compliance_level" <$> TF.attribute _approved_patches_compliance_level
        , TF.assign "description" <$> TF.attribute _description
        , TF.assign "global_filter" <$> TF.attribute _global_filter
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "operating_system" <$> TF.attribute _operating_system
        , TF.assign "rejected_patches" <$> TF.attribute _rejected_patches
        ]

instance HasApprovalRule (SsmPatchBaselineResource s) Text where
    type HasApprovalRuleThread (SsmPatchBaselineResource s) Text = s

    approvalRule =
        lens (_approval_rule :: SsmPatchBaselineResource s -> TF.Attribute s Text)
            (\s a -> s { _approval_rule = a } :: SsmPatchBaselineResource s)

instance HasApprovedPatches (SsmPatchBaselineResource s) Text where
    type HasApprovedPatchesThread (SsmPatchBaselineResource s) Text = s

    approvedPatches =
        lens (_approved_patches :: SsmPatchBaselineResource s -> TF.Attribute s Text)
            (\s a -> s { _approved_patches = a } :: SsmPatchBaselineResource s)

instance HasApprovedPatchesComplianceLevel (SsmPatchBaselineResource s) Text where
    type HasApprovedPatchesComplianceLevelThread (SsmPatchBaselineResource s) Text = s

    approvedPatchesComplianceLevel =
        lens (_approved_patches_compliance_level :: SsmPatchBaselineResource s -> TF.Attribute s Text)
            (\s a -> s { _approved_patches_compliance_level = a } :: SsmPatchBaselineResource s)

instance HasDescription (SsmPatchBaselineResource s) Text where
    type HasDescriptionThread (SsmPatchBaselineResource s) Text = s

    description =
        lens (_description :: SsmPatchBaselineResource s -> TF.Attribute s Text)
            (\s a -> s { _description = a } :: SsmPatchBaselineResource s)

instance HasGlobalFilter (SsmPatchBaselineResource s) Text where
    type HasGlobalFilterThread (SsmPatchBaselineResource s) Text = s

    globalFilter =
        lens (_global_filter :: SsmPatchBaselineResource s -> TF.Attribute s Text)
            (\s a -> s { _global_filter = a } :: SsmPatchBaselineResource s)

instance HasName (SsmPatchBaselineResource s) Text where
    type HasNameThread (SsmPatchBaselineResource s) Text = s

    name =
        lens (_name :: SsmPatchBaselineResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: SsmPatchBaselineResource s)

instance HasOperatingSystem (SsmPatchBaselineResource s) Text where
    type HasOperatingSystemThread (SsmPatchBaselineResource s) Text = s

    operatingSystem =
        lens (_operating_system :: SsmPatchBaselineResource s -> TF.Attribute s Text)
            (\s a -> s { _operating_system = a } :: SsmPatchBaselineResource s)

instance HasRejectedPatches (SsmPatchBaselineResource s) Text where
    type HasRejectedPatchesThread (SsmPatchBaselineResource s) Text = s

    rejectedPatches =
        lens (_rejected_patches :: SsmPatchBaselineResource s -> TF.Attribute s Text)
            (\s a -> s { _rejected_patches = a } :: SsmPatchBaselineResource s)

instance HasComputedId (SsmPatchBaselineResource s) Text

ssmPatchBaselineResource :: TF.Resource TF.AWS (SsmPatchBaselineResource s)
ssmPatchBaselineResource =
    TF.newResource "aws_ssm_patch_baseline" $
        SsmPatchBaselineResource {
              _approval_rule = TF.Nil
            , _approved_patches = TF.Nil
            , _approved_patches_compliance_level = TF.Nil
            , _description = TF.Nil
            , _global_filter = TF.Nil
            , _name = TF.Nil
            , _operating_system = TF.Nil
            , _rejected_patches = TF.Nil
            }

{- | The @aws_ssm_patch_group@ AWS resource.

Provides an SSM Patch Group resource
-}
data SsmPatchGroupResource s = SsmPatchGroupResource {
      _baseline_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the patch baseline to register the patch group with. -}
    , _patch_group :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the patch group that should be registered with the patch baseline. -}
    } deriving (Show, Eq)

instance TF.ToHCL (SsmPatchGroupResource s) where
    toHCL SsmPatchGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "baseline_id" <$> TF.attribute _baseline_id
        , TF.assign "patch_group" <$> TF.attribute _patch_group
        ]

instance HasBaselineId (SsmPatchGroupResource s) Text where
    type HasBaselineIdThread (SsmPatchGroupResource s) Text = s

    baselineId =
        lens (_baseline_id :: SsmPatchGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _baseline_id = a } :: SsmPatchGroupResource s)

instance HasPatchGroup (SsmPatchGroupResource s) Text where
    type HasPatchGroupThread (SsmPatchGroupResource s) Text = s

    patchGroup =
        lens (_patch_group :: SsmPatchGroupResource s -> TF.Attribute s Text)
            (\s a -> s { _patch_group = a } :: SsmPatchGroupResource s)

instance HasComputedId (SsmPatchGroupResource s) Text

ssmPatchGroupResource :: TF.Resource TF.AWS (SsmPatchGroupResource s)
ssmPatchGroupResource =
    TF.newResource "aws_ssm_patch_group" $
        SsmPatchGroupResource {
              _baseline_id = TF.Nil
            , _patch_group = TF.Nil
            }

{- | The @sfn_state_machine@ AWS resource.

Provides a Step Function State Machine resource
-}
data StateMachineResource s = StateMachineResource {
      _definition :: !(TF.Attribute s Text)
    {- ^ (Required) The Amazon States Language definition of the state machine. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the state machine. -}
    , _role_arn :: !(TF.Attribute s Text)
    {- ^ (Required) The Amazon Resource Name (ARN) of the IAM role to use for this state machine. -}
    } deriving (Show, Eq)

instance TF.ToHCL (StateMachineResource s) where
    toHCL StateMachineResource{..} = TF.block $ catMaybes
        [ TF.assign "definition" <$> TF.attribute _definition
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "role_arn" <$> TF.attribute _role_arn
        ]

instance HasDefinition (StateMachineResource s) Text where
    type HasDefinitionThread (StateMachineResource s) Text = s

    definition =
        lens (_definition :: StateMachineResource s -> TF.Attribute s Text)
            (\s a -> s { _definition = a } :: StateMachineResource s)

instance HasName (StateMachineResource s) Text where
    type HasNameThread (StateMachineResource s) Text = s

    name =
        lens (_name :: StateMachineResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: StateMachineResource s)

instance HasRoleArn (StateMachineResource s) Text where
    type HasRoleArnThread (StateMachineResource s) Text = s

    roleArn =
        lens (_role_arn :: StateMachineResource s -> TF.Attribute s Text)
            (\s a -> s { _role_arn = a } :: StateMachineResource s)

instance HasComputedCreationDate (StateMachineResource s) Text

instance HasComputedId (StateMachineResource s) Text

instance HasComputedStatus (StateMachineResource s) Text

stateMachineResource :: TF.Resource TF.AWS (StateMachineResource s)
stateMachineResource =
    TF.newResource "sfn_state_machine" $
        StateMachineResource {
              _definition = TF.Nil
            , _name = TF.Nil
            , _role_arn = TF.Nil
            }

{- | The @aws_subnet@ AWS resource.

Provides an VPC subnet resource.
-}
data SubnetResource s = SubnetResource {
      _assign_ipv6_address_on_creation :: !(TF.Attribute s Text)
    {- ^ (Optional) Specify true to indicate that network interfaces created in the specified subnet should be assigned an IPv6 address. Default is @false@ -}
    , _availability_zone :: !(TF.Attribute s TF.Zone)
    {- ^ (Optional) The AZ for the subnet. -}
    , _cidr_block :: !(TF.Attribute s TF.CIDR)
    {- ^ (Required) The CIDR block for the subnet. -}
    , _ipv6_cidr_block :: !(TF.Attribute s TF.CIDR)
    {- ^ (Optional) The IPv6 network range for the subnet, in CIDR notation. The subnet size must use a /64 prefix length. -}
    , _map_public_ip_on_launch :: !(TF.Attribute s Text)
    {- ^ -  (Optional) Specify true to indicate that instances launched into the subnet should be assigned a public IP address. Default is @false@ . -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _vpc_id :: !(TF.Attribute s Text)
    {- ^ (Required) The VPC ID. -}
    } deriving (Show, Eq)

instance TF.ToHCL (SubnetResource s) where
    toHCL SubnetResource{..} = TF.block $ catMaybes
        [ TF.assign "assign_ipv6_address_on_creation" <$> TF.attribute _assign_ipv6_address_on_creation
        , TF.assign "availability_zone" <$> TF.attribute _availability_zone
        , TF.assign "cidr_block" <$> TF.attribute _cidr_block
        , TF.assign "ipv6_cidr_block" <$> TF.attribute _ipv6_cidr_block
        , TF.assign "map_public_ip_on_launch" <$> TF.attribute _map_public_ip_on_launch
        , TF.assign "tags" <$> TF.attribute _tags
        , TF.assign "vpc_id" <$> TF.attribute _vpc_id
        ]

instance HasAssignIpv6AddressOnCreation (SubnetResource s) Text where
    type HasAssignIpv6AddressOnCreationThread (SubnetResource s) Text = s

    assignIpv6AddressOnCreation =
        lens (_assign_ipv6_address_on_creation :: SubnetResource s -> TF.Attribute s Text)
            (\s a -> s { _assign_ipv6_address_on_creation = a } :: SubnetResource s)

instance HasAvailabilityZone (SubnetResource s) TF.Zone where
    type HasAvailabilityZoneThread (SubnetResource s) TF.Zone = s

    availabilityZone =
        lens (_availability_zone :: SubnetResource s -> TF.Attribute s TF.Zone)
            (\s a -> s { _availability_zone = a } :: SubnetResource s)

instance HasCidrBlock (SubnetResource s) TF.CIDR where
    type HasCidrBlockThread (SubnetResource s) TF.CIDR = s

    cidrBlock =
        lens (_cidr_block :: SubnetResource s -> TF.Attribute s TF.CIDR)
            (\s a -> s { _cidr_block = a } :: SubnetResource s)

instance HasIpv6CidrBlock (SubnetResource s) TF.CIDR where
    type HasIpv6CidrBlockThread (SubnetResource s) TF.CIDR = s

    ipv6CidrBlock =
        lens (_ipv6_cidr_block :: SubnetResource s -> TF.Attribute s TF.CIDR)
            (\s a -> s { _ipv6_cidr_block = a } :: SubnetResource s)

instance HasMapPublicIpOnLaunch (SubnetResource s) Text where
    type HasMapPublicIpOnLaunchThread (SubnetResource s) Text = s

    mapPublicIpOnLaunch =
        lens (_map_public_ip_on_launch :: SubnetResource s -> TF.Attribute s Text)
            (\s a -> s { _map_public_ip_on_launch = a } :: SubnetResource s)

instance HasTags (SubnetResource s) TF.Tags where
    type HasTagsThread (SubnetResource s) TF.Tags = s

    tags =
        lens (_tags :: SubnetResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: SubnetResource s)

instance HasVpcId (SubnetResource s) Text where
    type HasVpcIdThread (SubnetResource s) Text = s

    vpcId =
        lens (_vpc_id :: SubnetResource s -> TF.Attribute s Text)
            (\s a -> s { _vpc_id = a } :: SubnetResource s)

instance HasComputedAvailabilityZone (SubnetResource s) TF.Zone

instance HasComputedCidrBlock (SubnetResource s) TF.CIDR

instance HasComputedId (SubnetResource s) Text

instance HasComputedIpv6AssociationId (SubnetResource s) Text

instance HasComputedIpv6CidrBlock (SubnetResource s) TF.CIDR

instance HasComputedVpcId (SubnetResource s) Text

subnetResource :: TF.Resource TF.AWS (SubnetResource s)
subnetResource =
    TF.newResource "aws_subnet" $
        SubnetResource {
              _assign_ipv6_address_on_creation = TF.Nil
            , _availability_zone = TF.Nil
            , _cidr_block = TF.Nil
            , _ipv6_cidr_block = TF.Nil
            , _map_public_ip_on_launch = TF.Nil
            , _tags = TF.Nil
            , _vpc_id = TF.Nil
            }

{- | The @aws_volume_attachment@ AWS resource.

Provides an AWS EBS Volume Attachment as a top level resource, to attach and
detach volumes from AWS Instances. ~> NOTE on EBS block devices: If you use
@ebs_block_device@ on an @aws_instance@ , Terraform will assume management
over the full set of non-root EBS block devices for the instance, and treats
additional block devices as drift. For this reason, @ebs_block_device@
cannot be mixed with external @aws_ebs_volume@ + @aws_ebs_volume_attachment@
resources for a given instance.
-}
data VolumeAttachmentResource s = VolumeAttachmentResource {
      _device_name :: !(TF.Attribute s Text)
    {- ^ (Required) The device name to expose to the instance (for example, @/dev/sdh@ or @xvdh@ ) -}
    , _force_detach :: !(TF.Attribute s Text)
    {- ^ (Optional, Boolean) Set to @true@ if you want to force the volume to detach. Useful if previous attempts failed, but use this option only as a last resort, as this can result in data loss . See <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-detaching-volume.html> for more information. -}
    , _instance_id :: !(TF.Attribute s Text)
    {- ^ (Required) ID of the Instance to attach to -}
    , _skip_destroy :: !(TF.Attribute s Text)
    {- ^ (Optional, Boolean) Set this to true if you do not wish to detach the volume from the instance to which it is attached at destroy time, and instead just remove the attachment from Terraform state. This is useful when destroying an instance which has volumes created by some other means attached. -}
    , _volume_id :: !(TF.Attribute s Text)
    {- ^ (Required) ID of the Volume to be attached -}
    } deriving (Show, Eq)

instance TF.ToHCL (VolumeAttachmentResource s) where
    toHCL VolumeAttachmentResource{..} = TF.block $ catMaybes
        [ TF.assign "device_name" <$> TF.attribute _device_name
        , TF.assign "force_detach" <$> TF.attribute _force_detach
        , TF.assign "instance_id" <$> TF.attribute _instance_id
        , TF.assign "skip_destroy" <$> TF.attribute _skip_destroy
        , TF.assign "volume_id" <$> TF.attribute _volume_id
        ]

instance HasDeviceName (VolumeAttachmentResource s) Text where
    type HasDeviceNameThread (VolumeAttachmentResource s) Text = s

    deviceName =
        lens (_device_name :: VolumeAttachmentResource s -> TF.Attribute s Text)
            (\s a -> s { _device_name = a } :: VolumeAttachmentResource s)

instance HasForceDetach (VolumeAttachmentResource s) Text where
    type HasForceDetachThread (VolumeAttachmentResource s) Text = s

    forceDetach =
        lens (_force_detach :: VolumeAttachmentResource s -> TF.Attribute s Text)
            (\s a -> s { _force_detach = a } :: VolumeAttachmentResource s)

instance HasInstanceId (VolumeAttachmentResource s) Text where
    type HasInstanceIdThread (VolumeAttachmentResource s) Text = s

    instanceId =
        lens (_instance_id :: VolumeAttachmentResource s -> TF.Attribute s Text)
            (\s a -> s { _instance_id = a } :: VolumeAttachmentResource s)

instance HasSkipDestroy (VolumeAttachmentResource s) Text where
    type HasSkipDestroyThread (VolumeAttachmentResource s) Text = s

    skipDestroy =
        lens (_skip_destroy :: VolumeAttachmentResource s -> TF.Attribute s Text)
            (\s a -> s { _skip_destroy = a } :: VolumeAttachmentResource s)

instance HasVolumeId (VolumeAttachmentResource s) Text where
    type HasVolumeIdThread (VolumeAttachmentResource s) Text = s

    volumeId =
        lens (_volume_id :: VolumeAttachmentResource s -> TF.Attribute s Text)
            (\s a -> s { _volume_id = a } :: VolumeAttachmentResource s)

instance HasComputedDeviceName (VolumeAttachmentResource s) Text

instance HasComputedInstanceId (VolumeAttachmentResource s) Text

instance HasComputedVolumeId (VolumeAttachmentResource s) Text

volumeAttachmentResource :: TF.Resource TF.AWS (VolumeAttachmentResource s)
volumeAttachmentResource =
    TF.newResource "aws_volume_attachment" $
        VolumeAttachmentResource {
              _device_name = TF.Nil
            , _force_detach = TF.Nil
            , _instance_id = TF.Nil
            , _skip_destroy = TF.Nil
            , _volume_id = TF.Nil
            }

{- | The @aws_vpc_dhcp_options_association@ AWS resource.

Provides a VPC DHCP Options Association resource.
-}
data VpcDhcpOptionsAssociationResource s = VpcDhcpOptionsAssociationResource {
      _dhcp_options_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the DHCP Options Set to associate to the VPC. -}
    , _vpc_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the VPC to which we would like to associate a DHCP Options Set. -}
    } deriving (Show, Eq)

instance TF.ToHCL (VpcDhcpOptionsAssociationResource s) where
    toHCL VpcDhcpOptionsAssociationResource{..} = TF.block $ catMaybes
        [ TF.assign "dhcp_options_id" <$> TF.attribute _dhcp_options_id
        , TF.assign "vpc_id" <$> TF.attribute _vpc_id
        ]

instance HasDhcpOptionsId (VpcDhcpOptionsAssociationResource s) Text where
    type HasDhcpOptionsIdThread (VpcDhcpOptionsAssociationResource s) Text = s

    dhcpOptionsId =
        lens (_dhcp_options_id :: VpcDhcpOptionsAssociationResource s -> TF.Attribute s Text)
            (\s a -> s { _dhcp_options_id = a } :: VpcDhcpOptionsAssociationResource s)

instance HasVpcId (VpcDhcpOptionsAssociationResource s) Text where
    type HasVpcIdThread (VpcDhcpOptionsAssociationResource s) Text = s

    vpcId =
        lens (_vpc_id :: VpcDhcpOptionsAssociationResource s -> TF.Attribute s Text)
            (\s a -> s { _vpc_id = a } :: VpcDhcpOptionsAssociationResource s)

vpcDhcpOptionsAssociationResource :: TF.Resource TF.AWS (VpcDhcpOptionsAssociationResource s)
vpcDhcpOptionsAssociationResource =
    TF.newResource "aws_vpc_dhcp_options_association" $
        VpcDhcpOptionsAssociationResource {
              _dhcp_options_id = TF.Nil
            , _vpc_id = TF.Nil
            }

{- | The @aws_vpc_dhcp_options@ AWS resource.

Provides a VPC DHCP Options resource.
-}
data VpcDhcpOptionsResource s = VpcDhcpOptionsResource {
      _domain_name :: !(TF.Attribute s Text)
    {- ^ (Optional) the suffix domain name to use by default when resolving non Fully Qualified Domain Names. In other words, this is what ends up being the @search@ value in the @/etc/resolv.conf@ file. -}
    , _domain_name_servers :: !(TF.Attribute s Text)
    {- ^ (Optional) List of name servers to configure in @/etc/resolv.conf@ . If you want to use the default AWS nameservers you should set this to @AmazonProvidedDNS@ . -}
    , _netbios_name_servers :: !(TF.Attribute s Text)
    {- ^ (Optional) List of NETBIOS name servers. -}
    , _netbios_node_type :: !(TF.Attribute s Text)
    {- ^ (Optional) The NetBIOS node type (1, 2, 4, or 8). AWS recommends to specify 2 since broadcast and multicast are not supported in their network. For more information about these node types, see <http://www.ietf.org/rfc/rfc2132.txt> . -}
    , _ntp_servers :: !(TF.Attribute s Text)
    {- ^ (Optional) List of NTP servers to configure. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    } deriving (Show, Eq)

instance TF.ToHCL (VpcDhcpOptionsResource s) where
    toHCL VpcDhcpOptionsResource{..} = TF.block $ catMaybes
        [ TF.assign "domain_name" <$> TF.attribute _domain_name
        , TF.assign "domain_name_servers" <$> TF.attribute _domain_name_servers
        , TF.assign "netbios_name_servers" <$> TF.attribute _netbios_name_servers
        , TF.assign "netbios_node_type" <$> TF.attribute _netbios_node_type
        , TF.assign "ntp_servers" <$> TF.attribute _ntp_servers
        , TF.assign "tags" <$> TF.attribute _tags
        ]

instance HasDomainName (VpcDhcpOptionsResource s) Text where
    type HasDomainNameThread (VpcDhcpOptionsResource s) Text = s

    domainName =
        lens (_domain_name :: VpcDhcpOptionsResource s -> TF.Attribute s Text)
            (\s a -> s { _domain_name = a } :: VpcDhcpOptionsResource s)

instance HasDomainNameServers (VpcDhcpOptionsResource s) Text where
    type HasDomainNameServersThread (VpcDhcpOptionsResource s) Text = s

    domainNameServers =
        lens (_domain_name_servers :: VpcDhcpOptionsResource s -> TF.Attribute s Text)
            (\s a -> s { _domain_name_servers = a } :: VpcDhcpOptionsResource s)

instance HasNetbiosNameServers (VpcDhcpOptionsResource s) Text where
    type HasNetbiosNameServersThread (VpcDhcpOptionsResource s) Text = s

    netbiosNameServers =
        lens (_netbios_name_servers :: VpcDhcpOptionsResource s -> TF.Attribute s Text)
            (\s a -> s { _netbios_name_servers = a } :: VpcDhcpOptionsResource s)

instance HasNetbiosNodeType (VpcDhcpOptionsResource s) Text where
    type HasNetbiosNodeTypeThread (VpcDhcpOptionsResource s) Text = s

    netbiosNodeType =
        lens (_netbios_node_type :: VpcDhcpOptionsResource s -> TF.Attribute s Text)
            (\s a -> s { _netbios_node_type = a } :: VpcDhcpOptionsResource s)

instance HasNtpServers (VpcDhcpOptionsResource s) Text where
    type HasNtpServersThread (VpcDhcpOptionsResource s) Text = s

    ntpServers =
        lens (_ntp_servers :: VpcDhcpOptionsResource s -> TF.Attribute s Text)
            (\s a -> s { _ntp_servers = a } :: VpcDhcpOptionsResource s)

instance HasTags (VpcDhcpOptionsResource s) TF.Tags where
    type HasTagsThread (VpcDhcpOptionsResource s) TF.Tags = s

    tags =
        lens (_tags :: VpcDhcpOptionsResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: VpcDhcpOptionsResource s)

vpcDhcpOptionsResource :: TF.Resource TF.AWS (VpcDhcpOptionsResource s)
vpcDhcpOptionsResource =
    TF.newResource "aws_vpc_dhcp_options" $
        VpcDhcpOptionsResource {
              _domain_name = TF.Nil
            , _domain_name_servers = TF.Nil
            , _netbios_name_servers = TF.Nil
            , _netbios_node_type = TF.Nil
            , _ntp_servers = TF.Nil
            , _tags = TF.Nil
            }

{- | The @aws_vpc_endpoint@ AWS resource.

Provides a VPC Endpoint resource. ~> NOTE on VPC Endpoints and VPC Endpoint
Route Table Associations: Terraform provides both a standalone
<vpc_endpoint_route_table_association.html> (an association between a VPC
endpoint and a single @route_table_id@ ) and a VPC Endpoint resource with a
@route_table_ids@ attribute. Do not use the same route table ID in both a
VPC Endpoint resource and a VPC Endpoint Route Table Association resource.
Doing so will cause a conflict of associations and will overwrite the
association.
-}
data VpcEndpointResource s = VpcEndpointResource {
      _policy :: !(TF.Attribute s Text)
    {- ^ (Optional) A policy to attach to the endpoint that controls access to the service. -}
    , _route_table_ids :: !(TF.Attribute s Text)
    {- ^ (Optional) One or more route table IDs. -}
    , _service_name :: !(TF.Attribute s Text)
    {- ^ (Required) The AWS service name, in the form @com.amazonaws.region.service@ . -}
    , _vpc_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the VPC in which the endpoint will be used. -}
    } deriving (Show, Eq)

instance TF.ToHCL (VpcEndpointResource s) where
    toHCL VpcEndpointResource{..} = TF.block $ catMaybes
        [ TF.assign "policy" <$> TF.attribute _policy
        , TF.assign "route_table_ids" <$> TF.attribute _route_table_ids
        , TF.assign "service_name" <$> TF.attribute _service_name
        , TF.assign "vpc_id" <$> TF.attribute _vpc_id
        ]

instance HasPolicy (VpcEndpointResource s) Text where
    type HasPolicyThread (VpcEndpointResource s) Text = s

    policy =
        lens (_policy :: VpcEndpointResource s -> TF.Attribute s Text)
            (\s a -> s { _policy = a } :: VpcEndpointResource s)

instance HasRouteTableIds (VpcEndpointResource s) Text where
    type HasRouteTableIdsThread (VpcEndpointResource s) Text = s

    routeTableIds =
        lens (_route_table_ids :: VpcEndpointResource s -> TF.Attribute s Text)
            (\s a -> s { _route_table_ids = a } :: VpcEndpointResource s)

instance HasServiceName (VpcEndpointResource s) Text where
    type HasServiceNameThread (VpcEndpointResource s) Text = s

    serviceName =
        lens (_service_name :: VpcEndpointResource s -> TF.Attribute s Text)
            (\s a -> s { _service_name = a } :: VpcEndpointResource s)

instance HasVpcId (VpcEndpointResource s) Text where
    type HasVpcIdThread (VpcEndpointResource s) Text = s

    vpcId =
        lens (_vpc_id :: VpcEndpointResource s -> TF.Attribute s Text)
            (\s a -> s { _vpc_id = a } :: VpcEndpointResource s)

instance HasComputedCidrBlocks (VpcEndpointResource s) Text

instance HasComputedId (VpcEndpointResource s) Text

instance HasComputedPrefixListId (VpcEndpointResource s) Text

vpcEndpointResource :: TF.Resource TF.AWS (VpcEndpointResource s)
vpcEndpointResource =
    TF.newResource "aws_vpc_endpoint" $
        VpcEndpointResource {
              _policy = TF.Nil
            , _route_table_ids = TF.Nil
            , _service_name = TF.Nil
            , _vpc_id = TF.Nil
            }

{- | The @aws_vpc_endpoint_route_table_association@ AWS resource.

Provides a resource to create an association between a VPC endpoint and
routing table. ~> NOTE on VPC Endpoints and VPC Endpoint Route Table
Associations: Terraform provides both a standalone VPC Endpoint Route Table
Association (an association between a VPC endpoint and a single
@route_table_id@ ) and a <vpc_endpoint.html> resource with a
@route_table_ids@ attribute. Do not use the same route table ID in both a
VPC Endpoint resource and a VPC Endpoint Route Table Association resource.
Doing so will cause a conflict of associations and will overwrite the
association.
-}
data VpcEndpointRouteTableAssociationResource s = VpcEndpointRouteTableAssociationResource {
      _route_table_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the routing table to be associated with the VPC endpoint. -}
    , _vpc_endpoint_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the VPC endpoint with which the routing table will be associated. -}
    } deriving (Show, Eq)

instance TF.ToHCL (VpcEndpointRouteTableAssociationResource s) where
    toHCL VpcEndpointRouteTableAssociationResource{..} = TF.block $ catMaybes
        [ TF.assign "route_table_id" <$> TF.attribute _route_table_id
        , TF.assign "vpc_endpoint_id" <$> TF.attribute _vpc_endpoint_id
        ]

instance HasRouteTableId (VpcEndpointRouteTableAssociationResource s) Text where
    type HasRouteTableIdThread (VpcEndpointRouteTableAssociationResource s) Text = s

    routeTableId =
        lens (_route_table_id :: VpcEndpointRouteTableAssociationResource s -> TF.Attribute s Text)
            (\s a -> s { _route_table_id = a } :: VpcEndpointRouteTableAssociationResource s)

instance HasVpcEndpointId (VpcEndpointRouteTableAssociationResource s) Text where
    type HasVpcEndpointIdThread (VpcEndpointRouteTableAssociationResource s) Text = s

    vpcEndpointId =
        lens (_vpc_endpoint_id :: VpcEndpointRouteTableAssociationResource s -> TF.Attribute s Text)
            (\s a -> s { _vpc_endpoint_id = a } :: VpcEndpointRouteTableAssociationResource s)

instance HasComputedId (VpcEndpointRouteTableAssociationResource s) Text

vpcEndpointRouteTableAssociationResource :: TF.Resource TF.AWS (VpcEndpointRouteTableAssociationResource s)
vpcEndpointRouteTableAssociationResource =
    TF.newResource "aws_vpc_endpoint_route_table_association" $
        VpcEndpointRouteTableAssociationResource {
              _route_table_id = TF.Nil
            , _vpc_endpoint_id = TF.Nil
            }

{- | The @aws_vpc_peering_connection_accepter@ AWS resource.

Provides a resource to manage the accepter's side of a VPC Peering
Connection. When a cross-account (requester's AWS account differs from the
accepter's AWS account) or an inter-region VPC Peering Connection is
created, a VPC Peering Connection resource is automatically created in the
accepter's account. The requester can use the @aws_vpc_peering_connection@
resource to manage its side of the connection and the accepter can use the
@aws_vpc_peering_connection_accepter@ resource to "adopt" its side of the
connection into management.
-}
data VpcPeeringConnectionAccepterResource s = VpcPeeringConnectionAccepterResource {
      _auto_accept :: !(TF.Attribute s Text)
    {- ^ (Optional) Whether or not to accept the peering request. Defaults to @false@ . -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _vpc_peering_connection_id :: !(TF.Attribute s Text)
    {- ^ (Required) The VPC Peering Connection ID to manage. -}
    } deriving (Show, Eq)

instance TF.ToHCL (VpcPeeringConnectionAccepterResource s) where
    toHCL VpcPeeringConnectionAccepterResource{..} = TF.block $ catMaybes
        [ TF.assign "auto_accept" <$> TF.attribute _auto_accept
        , TF.assign "tags" <$> TF.attribute _tags
        , TF.assign "vpc_peering_connection_id" <$> TF.attribute _vpc_peering_connection_id
        ]

instance HasAutoAccept (VpcPeeringConnectionAccepterResource s) Text where
    type HasAutoAcceptThread (VpcPeeringConnectionAccepterResource s) Text = s

    autoAccept =
        lens (_auto_accept :: VpcPeeringConnectionAccepterResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_accept = a } :: VpcPeeringConnectionAccepterResource s)

instance HasTags (VpcPeeringConnectionAccepterResource s) TF.Tags where
    type HasTagsThread (VpcPeeringConnectionAccepterResource s) TF.Tags = s

    tags =
        lens (_tags :: VpcPeeringConnectionAccepterResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: VpcPeeringConnectionAccepterResource s)

instance HasVpcPeeringConnectionId (VpcPeeringConnectionAccepterResource s) Text where
    type HasVpcPeeringConnectionIdThread (VpcPeeringConnectionAccepterResource s) Text = s

    vpcPeeringConnectionId =
        lens (_vpc_peering_connection_id :: VpcPeeringConnectionAccepterResource s -> TF.Attribute s Text)
            (\s a -> s { _vpc_peering_connection_id = a } :: VpcPeeringConnectionAccepterResource s)

vpcPeeringConnectionAccepterResource :: TF.Resource TF.AWS (VpcPeeringConnectionAccepterResource s)
vpcPeeringConnectionAccepterResource =
    TF.newResource "aws_vpc_peering_connection_accepter" $
        VpcPeeringConnectionAccepterResource {
              _auto_accept = TF.Nil
            , _tags = TF.Nil
            , _vpc_peering_connection_id = TF.Nil
            }

{- | The @aws_vpc_peering_connection@ AWS resource.

Provides a resource to manage a VPC Peering Connection resource. -> Note:
For cross-account (requester's AWS account differs from the accepter's AWS
account) or inter-region VPC Peering Connections use the
@aws_vpc_peering_connection@ resource to manage the requester's side of the
connection and use the @aws_vpc_peering_connection_accepter@ resource to
manage the accepter's side of the connection.
-}
data VpcPeeringConnectionResource s = VpcPeeringConnectionResource {
      _accepter :: !(TF.Attribute s Text)
    {- ^ (Optional) - An optional configuration block that allows for [VPC Peering Connection] (http://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide) options to be set for the VPC that accepts the peering connection (a maximum of one). -}
    , _auto_accept :: !(TF.Attribute s Text)
    {- ^ (Optional) Accept the peering (both VPCs need to be in the same AWS account). -}
    , _peer_owner_id :: !(TF.Attribute s Text)
    {- ^ (Optional) The AWS account ID of the owner of the peer VPC. Defaults to the account ID the </docs/providers/aws/index.html> is currently connected to. -}
    , _peer_region :: !(TF.Attribute s TF.Region)
    {- ^ (Optional) The region of the accepter VPC of the [VPC Peering Connection]. @auto_accept@ must be @false@ , and use the @aws_vpc_peering_connection_accepter@ to manage the accepter side. -}
    , _peer_vpc_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the VPC with which you are creating the VPC Peering Connection. -}
    , _requester :: !(TF.Attribute s Text)
    {- ^ (Optional) - A optional configuration block that allows for [VPC Peering Connection] (http://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide) options to be set for the VPC that requests the peering connection (a maximum of one). -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _vpc_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the requester VPC. -}
    } deriving (Show, Eq)

instance TF.ToHCL (VpcPeeringConnectionResource s) where
    toHCL VpcPeeringConnectionResource{..} = TF.block $ catMaybes
        [ TF.assign "accepter" <$> TF.attribute _accepter
        , TF.assign "auto_accept" <$> TF.attribute _auto_accept
        , TF.assign "peer_owner_id" <$> TF.attribute _peer_owner_id
        , TF.assign "peer_region" <$> TF.attribute _peer_region
        , TF.assign "peer_vpc_id" <$> TF.attribute _peer_vpc_id
        , TF.assign "requester" <$> TF.attribute _requester
        , TF.assign "tags" <$> TF.attribute _tags
        , TF.assign "vpc_id" <$> TF.attribute _vpc_id
        ]

instance HasAccepter (VpcPeeringConnectionResource s) Text where
    type HasAccepterThread (VpcPeeringConnectionResource s) Text = s

    accepter =
        lens (_accepter :: VpcPeeringConnectionResource s -> TF.Attribute s Text)
            (\s a -> s { _accepter = a } :: VpcPeeringConnectionResource s)

instance HasAutoAccept (VpcPeeringConnectionResource s) Text where
    type HasAutoAcceptThread (VpcPeeringConnectionResource s) Text = s

    autoAccept =
        lens (_auto_accept :: VpcPeeringConnectionResource s -> TF.Attribute s Text)
            (\s a -> s { _auto_accept = a } :: VpcPeeringConnectionResource s)

instance HasPeerOwnerId (VpcPeeringConnectionResource s) Text where
    type HasPeerOwnerIdThread (VpcPeeringConnectionResource s) Text = s

    peerOwnerId =
        lens (_peer_owner_id :: VpcPeeringConnectionResource s -> TF.Attribute s Text)
            (\s a -> s { _peer_owner_id = a } :: VpcPeeringConnectionResource s)

instance HasPeerRegion (VpcPeeringConnectionResource s) TF.Region where
    type HasPeerRegionThread (VpcPeeringConnectionResource s) TF.Region = s

    peerRegion =
        lens (_peer_region :: VpcPeeringConnectionResource s -> TF.Attribute s TF.Region)
            (\s a -> s { _peer_region = a } :: VpcPeeringConnectionResource s)

instance HasPeerVpcId (VpcPeeringConnectionResource s) Text where
    type HasPeerVpcIdThread (VpcPeeringConnectionResource s) Text = s

    peerVpcId =
        lens (_peer_vpc_id :: VpcPeeringConnectionResource s -> TF.Attribute s Text)
            (\s a -> s { _peer_vpc_id = a } :: VpcPeeringConnectionResource s)

instance HasRequester (VpcPeeringConnectionResource s) Text where
    type HasRequesterThread (VpcPeeringConnectionResource s) Text = s

    requester =
        lens (_requester :: VpcPeeringConnectionResource s -> TF.Attribute s Text)
            (\s a -> s { _requester = a } :: VpcPeeringConnectionResource s)

instance HasTags (VpcPeeringConnectionResource s) TF.Tags where
    type HasTagsThread (VpcPeeringConnectionResource s) TF.Tags = s

    tags =
        lens (_tags :: VpcPeeringConnectionResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: VpcPeeringConnectionResource s)

instance HasVpcId (VpcPeeringConnectionResource s) Text where
    type HasVpcIdThread (VpcPeeringConnectionResource s) Text = s

    vpcId =
        lens (_vpc_id :: VpcPeeringConnectionResource s -> TF.Attribute s Text)
            (\s a -> s { _vpc_id = a } :: VpcPeeringConnectionResource s)

vpcPeeringConnectionResource :: TF.Resource TF.AWS (VpcPeeringConnectionResource s)
vpcPeeringConnectionResource =
    TF.newResource "aws_vpc_peering_connection" $
        VpcPeeringConnectionResource {
              _accepter = TF.Nil
            , _auto_accept = TF.Nil
            , _peer_owner_id = TF.Nil
            , _peer_region = TF.Nil
            , _peer_vpc_id = TF.Nil
            , _requester = TF.Nil
            , _tags = TF.Nil
            , _vpc_id = TF.Nil
            }

{- | The @aws_vpc@ AWS resource.

Provides an VPC resource.
-}
data VpcResource s = VpcResource {
      _assign_generated_ipv6_cidr_block :: !(TF.Attribute s TF.CIDR)
    {- ^ (Optional) Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block. Default is @false@ . -}
    , _cidr_block :: !(TF.Attribute s TF.CIDR)
    {- ^ (Required) The CIDR block for the VPC. -}
    , _enable_classiclink :: !(TF.Attribute s TF.Bool)
    {- ^ (Optional) A boolean flag to enable/disable ClassicLink for the VPC. Only valid in regions and accounts that support EC2 Classic. See the <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html> for more information. Defaults false. -}
    , _enable_classiclink_dns_support :: !(TF.Attribute s TF.Bool)
    {- ^ (Optional) A boolean flag to enable/disable ClassicLink DNS Support for the VPC. Only valid in regions and accounts that support EC2 Classic. -}
    , _enable_dns_hostnames :: !(TF.Attribute s TF.Bool)
    {- ^ (Optional) A boolean flag to enable/disable DNS hostnames in the VPC. Defaults false. -}
    , _enable_dns_support :: !(TF.Attribute s TF.Bool)
    {- ^ (Optional) A boolean flag to enable/disable DNS support in the VPC. Defaults true. -}
    , _instance_tenancy :: !(TF.Attribute s Text)
    {- ^ (Optional) A tenancy option for instances launched into the VPC -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    } deriving (Show, Eq)

instance TF.ToHCL (VpcResource s) where
    toHCL VpcResource{..} = TF.block $ catMaybes
        [ TF.assign "assign_generated_ipv6_cidr_block" <$> TF.attribute _assign_generated_ipv6_cidr_block
        , TF.assign "cidr_block" <$> TF.attribute _cidr_block
        , TF.assign "enable_classiclink" <$> TF.attribute _enable_classiclink
        , TF.assign "enable_classiclink_dns_support" <$> TF.attribute _enable_classiclink_dns_support
        , TF.assign "enable_dns_hostnames" <$> TF.attribute _enable_dns_hostnames
        , TF.assign "enable_dns_support" <$> TF.attribute _enable_dns_support
        , TF.assign "instance_tenancy" <$> TF.attribute _instance_tenancy
        , TF.assign "tags" <$> TF.attribute _tags
        ]

instance HasAssignGeneratedIpv6CidrBlock (VpcResource s) TF.CIDR where
    type HasAssignGeneratedIpv6CidrBlockThread (VpcResource s) TF.CIDR = s

    assignGeneratedIpv6CidrBlock =
        lens (_assign_generated_ipv6_cidr_block :: VpcResource s -> TF.Attribute s TF.CIDR)
            (\s a -> s { _assign_generated_ipv6_cidr_block = a } :: VpcResource s)

instance HasCidrBlock (VpcResource s) TF.CIDR where
    type HasCidrBlockThread (VpcResource s) TF.CIDR = s

    cidrBlock =
        lens (_cidr_block :: VpcResource s -> TF.Attribute s TF.CIDR)
            (\s a -> s { _cidr_block = a } :: VpcResource s)

instance HasEnableClassiclink (VpcResource s) TF.Bool where
    type HasEnableClassiclinkThread (VpcResource s) TF.Bool = s

    enableClassiclink =
        lens (_enable_classiclink :: VpcResource s -> TF.Attribute s TF.Bool)
            (\s a -> s { _enable_classiclink = a } :: VpcResource s)

instance HasEnableClassiclinkDnsSupport (VpcResource s) TF.Bool where
    type HasEnableClassiclinkDnsSupportThread (VpcResource s) TF.Bool = s

    enableClassiclinkDnsSupport =
        lens (_enable_classiclink_dns_support :: VpcResource s -> TF.Attribute s TF.Bool)
            (\s a -> s { _enable_classiclink_dns_support = a } :: VpcResource s)

instance HasEnableDnsHostnames (VpcResource s) TF.Bool where
    type HasEnableDnsHostnamesThread (VpcResource s) TF.Bool = s

    enableDnsHostnames =
        lens (_enable_dns_hostnames :: VpcResource s -> TF.Attribute s TF.Bool)
            (\s a -> s { _enable_dns_hostnames = a } :: VpcResource s)

instance HasEnableDnsSupport (VpcResource s) TF.Bool where
    type HasEnableDnsSupportThread (VpcResource s) TF.Bool = s

    enableDnsSupport =
        lens (_enable_dns_support :: VpcResource s -> TF.Attribute s TF.Bool)
            (\s a -> s { _enable_dns_support = a } :: VpcResource s)

instance HasInstanceTenancy (VpcResource s) Text where
    type HasInstanceTenancyThread (VpcResource s) Text = s

    instanceTenancy =
        lens (_instance_tenancy :: VpcResource s -> TF.Attribute s Text)
            (\s a -> s { _instance_tenancy = a } :: VpcResource s)

instance HasTags (VpcResource s) TF.Tags where
    type HasTagsThread (VpcResource s) TF.Tags = s

    tags =
        lens (_tags :: VpcResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: VpcResource s)

instance HasComputedCidrBlock (VpcResource s) TF.CIDR

instance HasComputedDefaultNetworkAclId (VpcResource s) Text

instance HasComputedDefaultRouteTableId (VpcResource s) Text

instance HasComputedDefaultSecurityGroupId (VpcResource s) Text

instance HasComputedEnableClassiclink (VpcResource s) TF.Bool

instance HasComputedEnableDnsHostnames (VpcResource s) TF.Bool

instance HasComputedEnableDnsSupport (VpcResource s) TF.Bool

instance HasComputedId (VpcResource s) Text

instance HasComputedInstanceTenancy (VpcResource s) Text

instance HasComputedIpv6AssociationId (VpcResource s) Text

instance HasComputedIpv6CidrBlock (VpcResource s) TF.CIDR

instance HasComputedMainRouteTableId (VpcResource s) Text

vpcResource :: TF.Resource TF.AWS (VpcResource s)
vpcResource =
    TF.newResource "aws_vpc" $
        VpcResource {
              _assign_generated_ipv6_cidr_block = TF.Nil
            , _cidr_block = TF.Nil
            , _enable_classiclink = TF.Nil
            , _enable_classiclink_dns_support = TF.Nil
            , _enable_dns_hostnames = TF.Nil
            , _enable_dns_support = TF.Nil
            , _instance_tenancy = TF.Nil
            , _tags = TF.Nil
            }

{- | The @aws_vpn_connection@ AWS resource.

Provides a VPN connection connected to a VPC. These objects can be connected
to customer gateways, and allow you to establish tunnels between your
network and the VPC. ~> Note: All arguments including
@tunnel1_preshared_key@ and @tunnel2_preshared_key@ will be stored in the
raw state as plain-text. </docs/state/sensitive-data.html> .
-}
data VpnConnectionResource s = VpnConnectionResource {
      _customer_gateway_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the customer gateway. -}
    , _static_routes_only :: !(TF.Attribute s Text)
    {- ^ (Optional, Default @false@ ) Whether the VPN connection uses static routes exclusively. Static routes must be used for devices that don't support BGP. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) Tags to apply to the connection. -}
    , _type' :: !(TF.Attribute s Text)
    {- ^ (Required) The type of VPN connection. The only type AWS supports at this time is "ipsec.1". -}
    , _vpn_gateway_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the virtual private gateway. -}
    } deriving (Show, Eq)

instance TF.ToHCL (VpnConnectionResource s) where
    toHCL VpnConnectionResource{..} = TF.block $ catMaybes
        [ TF.assign "customer_gateway_id" <$> TF.attribute _customer_gateway_id
        , TF.assign "static_routes_only" <$> TF.attribute _static_routes_only
        , TF.assign "tags" <$> TF.attribute _tags
        , TF.assign "type" <$> TF.attribute _type'
        , TF.assign "vpn_gateway_id" <$> TF.attribute _vpn_gateway_id
        ]

instance HasCustomerGatewayId (VpnConnectionResource s) Text where
    type HasCustomerGatewayIdThread (VpnConnectionResource s) Text = s

    customerGatewayId =
        lens (_customer_gateway_id :: VpnConnectionResource s -> TF.Attribute s Text)
            (\s a -> s { _customer_gateway_id = a } :: VpnConnectionResource s)

instance HasStaticRoutesOnly (VpnConnectionResource s) Text where
    type HasStaticRoutesOnlyThread (VpnConnectionResource s) Text = s

    staticRoutesOnly =
        lens (_static_routes_only :: VpnConnectionResource s -> TF.Attribute s Text)
            (\s a -> s { _static_routes_only = a } :: VpnConnectionResource s)

instance HasTags (VpnConnectionResource s) TF.Tags where
    type HasTagsThread (VpnConnectionResource s) TF.Tags = s

    tags =
        lens (_tags :: VpnConnectionResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: VpnConnectionResource s)

instance HasType' (VpnConnectionResource s) Text where
    type HasType'Thread (VpnConnectionResource s) Text = s

    type' =
        lens (_type' :: VpnConnectionResource s -> TF.Attribute s Text)
            (\s a -> s { _type' = a } :: VpnConnectionResource s)

instance HasVpnGatewayId (VpnConnectionResource s) Text where
    type HasVpnGatewayIdThread (VpnConnectionResource s) Text = s

    vpnGatewayId =
        lens (_vpn_gateway_id :: VpnConnectionResource s -> TF.Attribute s Text)
            (\s a -> s { _vpn_gateway_id = a } :: VpnConnectionResource s)

instance HasComputedCustomerGatewayConfiguration (VpnConnectionResource s) Text

instance HasComputedCustomerGatewayId (VpnConnectionResource s) Text

instance HasComputedId (VpnConnectionResource s) Text

instance HasComputedStaticRoutesOnly (VpnConnectionResource s) Text

instance HasComputedTags (VpnConnectionResource s) TF.Tags

instance HasComputedTunnel1Address (VpnConnectionResource s) Text

instance HasComputedTunnel1BgpAsn (VpnConnectionResource s) Text

instance HasComputedTunnel1BgpHoldtime (VpnConnectionResource s) Text

instance HasComputedTunnel1CgwInsideAddress (VpnConnectionResource s) Text

instance HasComputedTunnel1PresharedKey (VpnConnectionResource s) Text

instance HasComputedTunnel1VgwInsideAddress (VpnConnectionResource s) Text

instance HasComputedTunnel2Address (VpnConnectionResource s) Text

instance HasComputedTunnel2BgpAsn (VpnConnectionResource s) Text

instance HasComputedTunnel2BgpHoldtime (VpnConnectionResource s) Text

instance HasComputedTunnel2CgwInsideAddress (VpnConnectionResource s) Text

instance HasComputedTunnel2PresharedKey (VpnConnectionResource s) Text

instance HasComputedTunnel2VgwInsideAddress (VpnConnectionResource s) Text

instance HasComputedType' (VpnConnectionResource s) Text

instance HasComputedVpnGatewayId (VpnConnectionResource s) Text

vpnConnectionResource :: TF.Resource TF.AWS (VpnConnectionResource s)
vpnConnectionResource =
    TF.newResource "aws_vpn_connection" $
        VpnConnectionResource {
              _customer_gateway_id = TF.Nil
            , _static_routes_only = TF.Nil
            , _tags = TF.Nil
            , _type' = TF.Nil
            , _vpn_gateway_id = TF.Nil
            }

{- | The @aws_vpn_connection_route@ AWS resource.

Provides a static route between a VPN connection and a customer gateway.
-}
data VpnConnectionRouteResource s = VpnConnectionRouteResource {
      _destination_cidr_block :: !(TF.Attribute s TF.CIDR)
    {- ^ (Required) The CIDR block associated with the local subnet of the customer network. -}
    , _vpn_connection_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the VPN connection. -}
    } deriving (Show, Eq)

instance TF.ToHCL (VpnConnectionRouteResource s) where
    toHCL VpnConnectionRouteResource{..} = TF.block $ catMaybes
        [ TF.assign "destination_cidr_block" <$> TF.attribute _destination_cidr_block
        , TF.assign "vpn_connection_id" <$> TF.attribute _vpn_connection_id
        ]

instance HasDestinationCidrBlock (VpnConnectionRouteResource s) TF.CIDR where
    type HasDestinationCidrBlockThread (VpnConnectionRouteResource s) TF.CIDR = s

    destinationCidrBlock =
        lens (_destination_cidr_block :: VpnConnectionRouteResource s -> TF.Attribute s TF.CIDR)
            (\s a -> s { _destination_cidr_block = a } :: VpnConnectionRouteResource s)

instance HasVpnConnectionId (VpnConnectionRouteResource s) Text where
    type HasVpnConnectionIdThread (VpnConnectionRouteResource s) Text = s

    vpnConnectionId =
        lens (_vpn_connection_id :: VpnConnectionRouteResource s -> TF.Attribute s Text)
            (\s a -> s { _vpn_connection_id = a } :: VpnConnectionRouteResource s)

instance HasComputedDestinationCidrBlock (VpnConnectionRouteResource s) TF.CIDR

instance HasComputedVpnConnectionId (VpnConnectionRouteResource s) Text

vpnConnectionRouteResource :: TF.Resource TF.AWS (VpnConnectionRouteResource s)
vpnConnectionRouteResource =
    TF.newResource "aws_vpn_connection_route" $
        VpnConnectionRouteResource {
              _destination_cidr_block = TF.Nil
            , _vpn_connection_id = TF.Nil
            }

{- | The @aws_vpn_gateway_attachment@ AWS resource.

Provides a Virtual Private Gateway attachment resource, allowing for an
existing hardware VPN gateway to be attached and/or detached from a VPC. ->
Note: The <vpn_gateway.html> resource can also automatically attach the
Virtual Private Gateway it creates to an existing VPC by setting the
<vpn_gateway.html#vpc_id> attribute accordingly.
-}
data VpnGatewayAttachmentResource s = VpnGatewayAttachmentResource {
      _vpc_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the VPC. -}
    , _vpn_gateway_id :: !(TF.Attribute s Text)
    {- ^ (Required) The ID of the Virtual Private Gateway. -}
    } deriving (Show, Eq)

instance TF.ToHCL (VpnGatewayAttachmentResource s) where
    toHCL VpnGatewayAttachmentResource{..} = TF.block $ catMaybes
        [ TF.assign "vpc_id" <$> TF.attribute _vpc_id
        , TF.assign "vpn_gateway_id" <$> TF.attribute _vpn_gateway_id
        ]

instance HasVpcId (VpnGatewayAttachmentResource s) Text where
    type HasVpcIdThread (VpnGatewayAttachmentResource s) Text = s

    vpcId =
        lens (_vpc_id :: VpnGatewayAttachmentResource s -> TF.Attribute s Text)
            (\s a -> s { _vpc_id = a } :: VpnGatewayAttachmentResource s)

instance HasVpnGatewayId (VpnGatewayAttachmentResource s) Text where
    type HasVpnGatewayIdThread (VpnGatewayAttachmentResource s) Text = s

    vpnGatewayId =
        lens (_vpn_gateway_id :: VpnGatewayAttachmentResource s -> TF.Attribute s Text)
            (\s a -> s { _vpn_gateway_id = a } :: VpnGatewayAttachmentResource s)

instance HasComputedVpcId (VpnGatewayAttachmentResource s) Text

instance HasComputedVpnGatewayId (VpnGatewayAttachmentResource s) Text

vpnGatewayAttachmentResource :: TF.Resource TF.AWS (VpnGatewayAttachmentResource s)
vpnGatewayAttachmentResource =
    TF.newResource "aws_vpn_gateway_attachment" $
        VpnGatewayAttachmentResource {
              _vpc_id = TF.Nil
            , _vpn_gateway_id = TF.Nil
            }

{- | The @aws_vpn_gateway@ AWS resource.

Provides a resource to create a VPC VPN Gateway.
-}
data VpnGatewayResource s = VpnGatewayResource {
      _availability_zone :: !(TF.Attribute s TF.Zone)
    {- ^ (Optional) The Availability Zone for the virtual private gateway. -}
    , _tags :: !(TF.Attribute s TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _vpc_id :: !(TF.Attribute s Text)
    {- ^ (Optional) The VPC ID to create in. -}
    } deriving (Show, Eq)

instance TF.ToHCL (VpnGatewayResource s) where
    toHCL VpnGatewayResource{..} = TF.block $ catMaybes
        [ TF.assign "availability_zone" <$> TF.attribute _availability_zone
        , TF.assign "tags" <$> TF.attribute _tags
        , TF.assign "vpc_id" <$> TF.attribute _vpc_id
        ]

instance HasAvailabilityZone (VpnGatewayResource s) TF.Zone where
    type HasAvailabilityZoneThread (VpnGatewayResource s) TF.Zone = s

    availabilityZone =
        lens (_availability_zone :: VpnGatewayResource s -> TF.Attribute s TF.Zone)
            (\s a -> s { _availability_zone = a } :: VpnGatewayResource s)

instance HasTags (VpnGatewayResource s) TF.Tags where
    type HasTagsThread (VpnGatewayResource s) TF.Tags = s

    tags =
        lens (_tags :: VpnGatewayResource s -> TF.Attribute s TF.Tags)
            (\s a -> s { _tags = a } :: VpnGatewayResource s)

instance HasVpcId (VpnGatewayResource s) Text where
    type HasVpcIdThread (VpnGatewayResource s) Text = s

    vpcId =
        lens (_vpc_id :: VpnGatewayResource s -> TF.Attribute s Text)
            (\s a -> s { _vpc_id = a } :: VpnGatewayResource s)

instance HasComputedId (VpnGatewayResource s) Text

vpnGatewayResource :: TF.Resource TF.AWS (VpnGatewayResource s)
vpnGatewayResource =
    TF.newResource "aws_vpn_gateway" $
        VpnGatewayResource {
              _availability_zone = TF.Nil
            , _tags = TF.Nil
            , _vpc_id = TF.Nil
            }

{- | The @aws_vpn_gateway_route_propagation@ AWS resource.

Requests automatic route propagation between a VPN gateway and a route
table. ~> Note: This resource should not be used with a route table that has
the @propagating_vgws@ argument set. If that argument is set, any route
propagation not explicitly listed in its value will be removed.
-}
data VpnGatewayRoutePropagationResource s = VpnGatewayRoutePropagationResource {
      _route_table_id :: !(TF.Attribute s Text)
    {- ^ - The id of the @aws_route_table@ to propagate routes into. -}
    , _vpn_gateway_id :: !(TF.Attribute s Text)
    {- ^ - The id of the @aws_vpn_gateway@ to propagate routes from. -}
    } deriving (Show, Eq)

instance TF.ToHCL (VpnGatewayRoutePropagationResource s) where
    toHCL VpnGatewayRoutePropagationResource{..} = TF.block $ catMaybes
        [ TF.assign "route_table_id" <$> TF.attribute _route_table_id
        , TF.assign "vpn_gateway_id" <$> TF.attribute _vpn_gateway_id
        ]

instance HasRouteTableId (VpnGatewayRoutePropagationResource s) Text where
    type HasRouteTableIdThread (VpnGatewayRoutePropagationResource s) Text = s

    routeTableId =
        lens (_route_table_id :: VpnGatewayRoutePropagationResource s -> TF.Attribute s Text)
            (\s a -> s { _route_table_id = a } :: VpnGatewayRoutePropagationResource s)

instance HasVpnGatewayId (VpnGatewayRoutePropagationResource s) Text where
    type HasVpnGatewayIdThread (VpnGatewayRoutePropagationResource s) Text = s

    vpnGatewayId =
        lens (_vpn_gateway_id :: VpnGatewayRoutePropagationResource s -> TF.Attribute s Text)
            (\s a -> s { _vpn_gateway_id = a } :: VpnGatewayRoutePropagationResource s)

vpnGatewayRoutePropagationResource :: TF.Resource TF.AWS (VpnGatewayRoutePropagationResource s)
vpnGatewayRoutePropagationResource =
    TF.newResource "aws_vpn_gateway_route_propagation" $
        VpnGatewayRoutePropagationResource {
              _route_table_id = TF.Nil
            , _vpn_gateway_id = TF.Nil
            }

{- | The @aws_waf_byte_match_set@ AWS resource.

Provides a WAF Byte Match Set Resource
-}
data WafByteMatchSetResource s = WafByteMatchSetResource {
      _byte_match_tuples :: !(TF.Attribute s Text)
    {- ^ - Specifies the bytes (typically a string that corresponds with ASCII characters) that you want to search for in web requests, the location in requests that you want to search, and other settings. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name or description of the Byte Match Set. -}
    } deriving (Show, Eq)

instance TF.ToHCL (WafByteMatchSetResource s) where
    toHCL WafByteMatchSetResource{..} = TF.block $ catMaybes
        [ TF.assign "byte_match_tuples" <$> TF.attribute _byte_match_tuples
        , TF.assign "name" <$> TF.attribute _name
        ]

instance HasByteMatchTuples (WafByteMatchSetResource s) Text where
    type HasByteMatchTuplesThread (WafByteMatchSetResource s) Text = s

    byteMatchTuples =
        lens (_byte_match_tuples :: WafByteMatchSetResource s -> TF.Attribute s Text)
            (\s a -> s { _byte_match_tuples = a } :: WafByteMatchSetResource s)

instance HasName (WafByteMatchSetResource s) Text where
    type HasNameThread (WafByteMatchSetResource s) Text = s

    name =
        lens (_name :: WafByteMatchSetResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: WafByteMatchSetResource s)

wafByteMatchSetResource :: TF.Resource TF.AWS (WafByteMatchSetResource s)
wafByteMatchSetResource =
    TF.newResource "aws_waf_byte_match_set" $
        WafByteMatchSetResource {
              _byte_match_tuples = TF.Nil
            , _name = TF.Nil
            }

{- | The @aws_waf_ipset@ AWS resource.

Provides a WAF IPSet Resource
-}
data WafIpsetResource s = WafIpsetResource {
      _ip_set_descriptors :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies the IP address type (IPV4 or IPV6) and the IP address range (in CIDR format) that web requests originate from. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name or description of the IPSet. -}
    } deriving (Show, Eq)

instance TF.ToHCL (WafIpsetResource s) where
    toHCL WafIpsetResource{..} = TF.block $ catMaybes
        [ TF.assign "ip_set_descriptors" <$> TF.attribute _ip_set_descriptors
        , TF.assign "name" <$> TF.attribute _name
        ]

instance HasIpSetDescriptors (WafIpsetResource s) Text where
    type HasIpSetDescriptorsThread (WafIpsetResource s) Text = s

    ipSetDescriptors =
        lens (_ip_set_descriptors :: WafIpsetResource s -> TF.Attribute s Text)
            (\s a -> s { _ip_set_descriptors = a } :: WafIpsetResource s)

instance HasName (WafIpsetResource s) Text where
    type HasNameThread (WafIpsetResource s) Text = s

    name =
        lens (_name :: WafIpsetResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: WafIpsetResource s)

wafIpsetResource :: TF.Resource TF.AWS (WafIpsetResource s)
wafIpsetResource =
    TF.newResource "aws_waf_ipset" $
        WafIpsetResource {
              _ip_set_descriptors = TF.Nil
            , _name = TF.Nil
            }

{- | The @aws_waf_rate_based_rule@ AWS resource.

Provides a WAF Rate Based Rule Resource
-}
data WafRateBasedRuleResource s = WafRateBasedRuleResource {
      _metric_name :: !(TF.Attribute s Text)
    {- ^ (Required) The name or description for the Amazon CloudWatch metric of this rule. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name or description of the rule. -}
    , _predicates :: !(TF.Attribute s Text)
    {- ^ (Optional) One of ByteMatchSet, IPSet, SizeConstraintSet, SqlInjectionMatchSet, or XssMatchSet objects to include in a rule. -}
    , _rate_key :: !(TF.Attribute s Text)
    {- ^ (Required) Valid value is IP. -}
    , _rate_limit :: !(TF.Attribute s Text)
    {- ^ (Required) The maximum number of requests, which have an identical value in the field specified by the RateKey, allowed in a five-minute period. Minimum value is 2000. -}
    } deriving (Show, Eq)

instance TF.ToHCL (WafRateBasedRuleResource s) where
    toHCL WafRateBasedRuleResource{..} = TF.block $ catMaybes
        [ TF.assign "metric_name" <$> TF.attribute _metric_name
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "predicates" <$> TF.attribute _predicates
        , TF.assign "rate_key" <$> TF.attribute _rate_key
        , TF.assign "rate_limit" <$> TF.attribute _rate_limit
        ]

instance HasMetricName (WafRateBasedRuleResource s) Text where
    type HasMetricNameThread (WafRateBasedRuleResource s) Text = s

    metricName =
        lens (_metric_name :: WafRateBasedRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _metric_name = a } :: WafRateBasedRuleResource s)

instance HasName (WafRateBasedRuleResource s) Text where
    type HasNameThread (WafRateBasedRuleResource s) Text = s

    name =
        lens (_name :: WafRateBasedRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: WafRateBasedRuleResource s)

instance HasPredicates (WafRateBasedRuleResource s) Text where
    type HasPredicatesThread (WafRateBasedRuleResource s) Text = s

    predicates =
        lens (_predicates :: WafRateBasedRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _predicates = a } :: WafRateBasedRuleResource s)

instance HasRateKey (WafRateBasedRuleResource s) Text where
    type HasRateKeyThread (WafRateBasedRuleResource s) Text = s

    rateKey =
        lens (_rate_key :: WafRateBasedRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _rate_key = a } :: WafRateBasedRuleResource s)

instance HasRateLimit (WafRateBasedRuleResource s) Text where
    type HasRateLimitThread (WafRateBasedRuleResource s) Text = s

    rateLimit =
        lens (_rate_limit :: WafRateBasedRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _rate_limit = a } :: WafRateBasedRuleResource s)

wafRateBasedRuleResource :: TF.Resource TF.AWS (WafRateBasedRuleResource s)
wafRateBasedRuleResource =
    TF.newResource "aws_waf_rate_based_rule" $
        WafRateBasedRuleResource {
              _metric_name = TF.Nil
            , _name = TF.Nil
            , _predicates = TF.Nil
            , _rate_key = TF.Nil
            , _rate_limit = TF.Nil
            }

{- | The @aws_waf_rule@ AWS resource.

Provides a WAF Rule Resource
-}
data WafRuleResource s = WafRuleResource {
      _metric_name :: !(TF.Attribute s Text)
    {- ^ (Required) The name or description for the Amazon CloudWatch metric of this rule. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name or description of the rule. -}
    , _predicates :: !(TF.Attribute s Text)
    {- ^ (Optional) One of ByteMatchSet, IPSet, SizeConstraintSet, SqlInjectionMatchSet, or XssMatchSet objects to include in a rule. -}
    } deriving (Show, Eq)

instance TF.ToHCL (WafRuleResource s) where
    toHCL WafRuleResource{..} = TF.block $ catMaybes
        [ TF.assign "metric_name" <$> TF.attribute _metric_name
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "predicates" <$> TF.attribute _predicates
        ]

instance HasMetricName (WafRuleResource s) Text where
    type HasMetricNameThread (WafRuleResource s) Text = s

    metricName =
        lens (_metric_name :: WafRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _metric_name = a } :: WafRuleResource s)

instance HasName (WafRuleResource s) Text where
    type HasNameThread (WafRuleResource s) Text = s

    name =
        lens (_name :: WafRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: WafRuleResource s)

instance HasPredicates (WafRuleResource s) Text where
    type HasPredicatesThread (WafRuleResource s) Text = s

    predicates =
        lens (_predicates :: WafRuleResource s -> TF.Attribute s Text)
            (\s a -> s { _predicates = a } :: WafRuleResource s)

wafRuleResource :: TF.Resource TF.AWS (WafRuleResource s)
wafRuleResource =
    TF.newResource "aws_waf_rule" $
        WafRuleResource {
              _metric_name = TF.Nil
            , _name = TF.Nil
            , _predicates = TF.Nil
            }

{- | The @aws_waf_size_constraint_set@ AWS resource.

Provides a WAF Size Constraint Set Resource
-}
data WafSizeConstraintSetResource s = WafSizeConstraintSetResource {
      _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name or description of the Size Constraint Set. -}
    , _size_constraints :: !(TF.Attribute s Text)
    {- ^ (Optional) Specifies the parts of web requests that you want to inspect the size of. -}
    } deriving (Show, Eq)

instance TF.ToHCL (WafSizeConstraintSetResource s) where
    toHCL WafSizeConstraintSetResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.attribute _name
        , TF.assign "size_constraints" <$> TF.attribute _size_constraints
        ]

instance HasName (WafSizeConstraintSetResource s) Text where
    type HasNameThread (WafSizeConstraintSetResource s) Text = s

    name =
        lens (_name :: WafSizeConstraintSetResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: WafSizeConstraintSetResource s)

instance HasSizeConstraints (WafSizeConstraintSetResource s) Text where
    type HasSizeConstraintsThread (WafSizeConstraintSetResource s) Text = s

    sizeConstraints =
        lens (_size_constraints :: WafSizeConstraintSetResource s -> TF.Attribute s Text)
            (\s a -> s { _size_constraints = a } :: WafSizeConstraintSetResource s)

wafSizeConstraintSetResource :: TF.Resource TF.AWS (WafSizeConstraintSetResource s)
wafSizeConstraintSetResource =
    TF.newResource "aws_waf_size_constraint_set" $
        WafSizeConstraintSetResource {
              _name = TF.Nil
            , _size_constraints = TF.Nil
            }

{- | The @aws_waf_sql_injection_match_set@ AWS resource.

Provides a WAF SQL Injection Match Set Resource
-}
data WafSqlInjectionMatchSetResource s = WafSqlInjectionMatchSetResource {
      _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name or description of the SizeConstraintSet. -}
    , _sql_injection_match_tuples :: !(TF.Attribute s Text)
    {- ^ (Optional) The parts of web requests that you want AWS WAF to inspect for malicious SQL code and, if you want AWS WAF to inspect a header, the name of the header. -}
    } deriving (Show, Eq)

instance TF.ToHCL (WafSqlInjectionMatchSetResource s) where
    toHCL WafSqlInjectionMatchSetResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.attribute _name
        , TF.assign "sql_injection_match_tuples" <$> TF.attribute _sql_injection_match_tuples
        ]

instance HasName (WafSqlInjectionMatchSetResource s) Text where
    type HasNameThread (WafSqlInjectionMatchSetResource s) Text = s

    name =
        lens (_name :: WafSqlInjectionMatchSetResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: WafSqlInjectionMatchSetResource s)

instance HasSqlInjectionMatchTuples (WafSqlInjectionMatchSetResource s) Text where
    type HasSqlInjectionMatchTuplesThread (WafSqlInjectionMatchSetResource s) Text = s

    sqlInjectionMatchTuples =
        lens (_sql_injection_match_tuples :: WafSqlInjectionMatchSetResource s -> TF.Attribute s Text)
            (\s a -> s { _sql_injection_match_tuples = a } :: WafSqlInjectionMatchSetResource s)

wafSqlInjectionMatchSetResource :: TF.Resource TF.AWS (WafSqlInjectionMatchSetResource s)
wafSqlInjectionMatchSetResource =
    TF.newResource "aws_waf_sql_injection_match_set" $
        WafSqlInjectionMatchSetResource {
              _name = TF.Nil
            , _sql_injection_match_tuples = TF.Nil
            }

{- | The @aws_waf_web_acl@ AWS resource.

Provides a WAF Web ACL Resource
-}
data WafWebAclResource s = WafWebAclResource {
      _default_action :: !(TF.Attribute s Text)
    {- ^ (Required) The action that you want AWS WAF to take when a request doesn't match the criteria in any of the rules that are associated with the web ACL. -}
    , _metric_name :: !(TF.Attribute s Text)
    {- ^ (Required) The name or description for the Amazon CloudWatch metric of this web ACL. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name or description of the web ACL. -}
    , _rules :: !(TF.Attribute s Text)
    {- ^ (Required) The rules to associate with the web ACL and the settings for each rule. -}
    } deriving (Show, Eq)

instance TF.ToHCL (WafWebAclResource s) where
    toHCL WafWebAclResource{..} = TF.block $ catMaybes
        [ TF.assign "default_action" <$> TF.attribute _default_action
        , TF.assign "metric_name" <$> TF.attribute _metric_name
        , TF.assign "name" <$> TF.attribute _name
        , TF.assign "rules" <$> TF.attribute _rules
        ]

instance HasDefaultAction (WafWebAclResource s) Text where
    type HasDefaultActionThread (WafWebAclResource s) Text = s

    defaultAction =
        lens (_default_action :: WafWebAclResource s -> TF.Attribute s Text)
            (\s a -> s { _default_action = a } :: WafWebAclResource s)

instance HasMetricName (WafWebAclResource s) Text where
    type HasMetricNameThread (WafWebAclResource s) Text = s

    metricName =
        lens (_metric_name :: WafWebAclResource s -> TF.Attribute s Text)
            (\s a -> s { _metric_name = a } :: WafWebAclResource s)

instance HasName (WafWebAclResource s) Text where
    type HasNameThread (WafWebAclResource s) Text = s

    name =
        lens (_name :: WafWebAclResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: WafWebAclResource s)

instance HasRules (WafWebAclResource s) Text where
    type HasRulesThread (WafWebAclResource s) Text = s

    rules =
        lens (_rules :: WafWebAclResource s -> TF.Attribute s Text)
            (\s a -> s { _rules = a } :: WafWebAclResource s)

wafWebAclResource :: TF.Resource TF.AWS (WafWebAclResource s)
wafWebAclResource =
    TF.newResource "aws_waf_web_acl" $
        WafWebAclResource {
              _default_action = TF.Nil
            , _metric_name = TF.Nil
            , _name = TF.Nil
            , _rules = TF.Nil
            }

{- | The @aws_waf_xss_match_set@ AWS resource.

Provides a WAF XSS Match Set Resource
-}
data WafXssMatchSetResource s = WafXssMatchSetResource {
      _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name or description of the SizeConstraintSet. -}
    , _xss_match_tuples :: !(TF.Attribute s Text)
    {- ^ (Optional) The parts of web requests that you want to inspect for cross-site scripting attacks. -}
    } deriving (Show, Eq)

instance TF.ToHCL (WafXssMatchSetResource s) where
    toHCL WafXssMatchSetResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.attribute _name
        , TF.assign "xss_match_tuples" <$> TF.attribute _xss_match_tuples
        ]

instance HasName (WafXssMatchSetResource s) Text where
    type HasNameThread (WafXssMatchSetResource s) Text = s

    name =
        lens (_name :: WafXssMatchSetResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: WafXssMatchSetResource s)

instance HasXssMatchTuples (WafXssMatchSetResource s) Text where
    type HasXssMatchTuplesThread (WafXssMatchSetResource s) Text = s

    xssMatchTuples =
        lens (_xss_match_tuples :: WafXssMatchSetResource s -> TF.Attribute s Text)
            (\s a -> s { _xss_match_tuples = a } :: WafXssMatchSetResource s)

wafXssMatchSetResource :: TF.Resource TF.AWS (WafXssMatchSetResource s)
wafXssMatchSetResource =
    TF.newResource "aws_waf_xss_match_set" $
        WafXssMatchSetResource {
              _name = TF.Nil
            , _xss_match_tuples = TF.Nil
            }

{- | The @aws_wafregional_byte_match_set@ AWS resource.

Provides a WAF Regional Byte Match Set Resource for use with Application
Load Balancer.
-}
data WafregionalByteMatchSetResource s = WafregionalByteMatchSetResource {
      _byte_match_tuple :: !(TF.Attribute s Text)
    {- ^ (Optional)Settings for the ByteMatchSet, such as the bytes (typically a string that corresponds with ASCII characters) that you want AWS WAF to search for in web requests. ByteMatchTuple documented below. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name or description of the ByteMatchSet. -}
    } deriving (Show, Eq)

instance TF.ToHCL (WafregionalByteMatchSetResource s) where
    toHCL WafregionalByteMatchSetResource{..} = TF.block $ catMaybes
        [ TF.assign "byte_match_tuple" <$> TF.attribute _byte_match_tuple
        , TF.assign "name" <$> TF.attribute _name
        ]

instance HasByteMatchTuple (WafregionalByteMatchSetResource s) Text where
    type HasByteMatchTupleThread (WafregionalByteMatchSetResource s) Text = s

    byteMatchTuple =
        lens (_byte_match_tuple :: WafregionalByteMatchSetResource s -> TF.Attribute s Text)
            (\s a -> s { _byte_match_tuple = a } :: WafregionalByteMatchSetResource s)

instance HasName (WafregionalByteMatchSetResource s) Text where
    type HasNameThread (WafregionalByteMatchSetResource s) Text = s

    name =
        lens (_name :: WafregionalByteMatchSetResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: WafregionalByteMatchSetResource s)

wafregionalByteMatchSetResource :: TF.Resource TF.AWS (WafregionalByteMatchSetResource s)
wafregionalByteMatchSetResource =
    TF.newResource "aws_wafregional_byte_match_set" $
        WafregionalByteMatchSetResource {
              _byte_match_tuple = TF.Nil
            , _name = TF.Nil
            }

{- | The @aws_wafregional_ipset@ AWS resource.

Provides a WAF Regional IPSet Resource for use with Application Load
Balancer.
-}
data WafregionalIpsetResource s = WafregionalIpsetResource {
      _ip_set_descriptor :: !(TF.Attribute s Text)
    {- ^ (Optional) The IP address type and IP address range (in CIDR notation) from which web requests originate. -}
    , _name :: !(TF.Attribute s Text)
    {- ^ (Required) The name or description of the IPSet. -}
    } deriving (Show, Eq)

instance TF.ToHCL (WafregionalIpsetResource s) where
    toHCL WafregionalIpsetResource{..} = TF.block $ catMaybes
        [ TF.assign "ip_set_descriptor" <$> TF.attribute _ip_set_descriptor
        , TF.assign "name" <$> TF.attribute _name
        ]

instance HasIpSetDescriptor (WafregionalIpsetResource s) Text where
    type HasIpSetDescriptorThread (WafregionalIpsetResource s) Text = s

    ipSetDescriptor =
        lens (_ip_set_descriptor :: WafregionalIpsetResource s -> TF.Attribute s Text)
            (\s a -> s { _ip_set_descriptor = a } :: WafregionalIpsetResource s)

instance HasName (WafregionalIpsetResource s) Text where
    type HasNameThread (WafregionalIpsetResource s) Text = s

    name =
        lens (_name :: WafregionalIpsetResource s -> TF.Attribute s Text)
            (\s a -> s { _name = a } :: WafregionalIpsetResource s)

wafregionalIpsetResource :: TF.Resource TF.AWS (WafregionalIpsetResource s)
wafregionalIpsetResource =
    TF.newResource "aws_wafregional_ipset" $
        WafregionalIpsetResource {
              _ip_set_descriptor = TF.Nil
            , _name = TF.Nil
            }

class HasAccelerationStatus a b | a -> b where
    type HasAccelerationStatusThread a b :: *

    accelerationStatus
        :: Lens' a (TF.Attribute (HasAccelerationStatusThread a b) b)

instance HasAccelerationStatus a b => HasAccelerationStatus (TF.Resource p a) b where
    type HasAccelerationStatusThread (TF.Resource p a) b =
         HasAccelerationStatusThread a b

    accelerationStatus = TF.configuration . accelerationStatus

class HasAccepter a b | a -> b where
    type HasAccepterThread a b :: *

    accepter
        :: Lens' a (TF.Attribute (HasAccepterThread a b) b)

instance HasAccepter a b => HasAccepter (TF.Resource p a) b where
    type HasAccepterThread (TF.Resource p a) b =
         HasAccepterThread a b

    accepter = TF.configuration . accepter

class HasAccessLogs a b | a -> b where
    type HasAccessLogsThread a b :: *

    accessLogs
        :: Lens' a (TF.Attribute (HasAccessLogsThread a b) b)

instance HasAccessLogs a b => HasAccessLogs (TF.Resource p a) b where
    type HasAccessLogsThread (TF.Resource p a) b =
         HasAccessLogsThread a b

    accessLogs = TF.configuration . accessLogs

class HasAccessPolicies a b | a -> b where
    type HasAccessPoliciesThread a b :: *

    accessPolicies
        :: Lens' a (TF.Attribute (HasAccessPoliciesThread a b) b)

instance HasAccessPolicies a b => HasAccessPolicies (TF.Resource p a) b where
    type HasAccessPoliciesThread (TF.Resource p a) b =
         HasAccessPoliciesThread a b

    accessPolicies = TF.configuration . accessPolicies

class HasAccessPolicy a b | a -> b where
    type HasAccessPolicyThread a b :: *

    accessPolicy
        :: Lens' a (TF.Attribute (HasAccessPolicyThread a b) b)

instance HasAccessPolicy a b => HasAccessPolicy (TF.Resource p a) b where
    type HasAccessPolicyThread (TF.Resource p a) b =
         HasAccessPolicyThread a b

    accessPolicy = TF.configuration . accessPolicy

class HasAccountAlias a b | a -> b where
    type HasAccountAliasThread a b :: *

    accountAlias
        :: Lens' a (TF.Attribute (HasAccountAliasThread a b) b)

instance HasAccountAlias a b => HasAccountAlias (TF.Resource p a) b where
    type HasAccountAliasThread (TF.Resource p a) b =
         HasAccountAliasThread a b

    accountAlias = TF.configuration . accountAlias

class HasAccountId a b | a -> b where
    type HasAccountIdThread a b :: *

    accountId
        :: Lens' a (TF.Attribute (HasAccountIdThread a b) b)

instance HasAccountId a b => HasAccountId (TF.Resource p a) b where
    type HasAccountIdThread (TF.Resource p a) b =
         HasAccountIdThread a b

    accountId = TF.configuration . accountId

class HasAcl a b | a -> b where
    type HasAclThread a b :: *

    acl
        :: Lens' a (TF.Attribute (HasAclThread a b) b)

instance HasAcl a b => HasAcl (TF.Resource p a) b where
    type HasAclThread (TF.Resource p a) b =
         HasAclThread a b

    acl = TF.configuration . acl

class HasAction a b | a -> b where
    type HasActionThread a b :: *

    action
        :: Lens' a (TF.Attribute (HasActionThread a b) b)

instance HasAction a b => HasAction (TF.Resource p a) b where
    type HasActionThread (TF.Resource p a) b =
         HasActionThread a b

    action = TF.configuration . action

class HasActionsEnabled a b | a -> b where
    type HasActionsEnabledThread a b :: *

    actionsEnabled
        :: Lens' a (TF.Attribute (HasActionsEnabledThread a b) b)

instance HasActionsEnabled a b => HasActionsEnabled (TF.Resource p a) b where
    type HasActionsEnabledThread (TF.Resource p a) b =
         HasActionsEnabledThread a b

    actionsEnabled = TF.configuration . actionsEnabled

class HasActive a b | a -> b where
    type HasActiveThread a b :: *

    active
        :: Lens' a (TF.Attribute (HasActiveThread a b) b)

instance HasActive a b => HasActive (TF.Resource p a) b where
    type HasActiveThread (TF.Resource p a) b =
         HasActiveThread a b

    active = TF.configuration . active

class HasAddHeaderAction a b | a -> b where
    type HasAddHeaderActionThread a b :: *

    addHeaderAction
        :: Lens' a (TF.Attribute (HasAddHeaderActionThread a b) b)

instance HasAddHeaderAction a b => HasAddHeaderAction (TF.Resource p a) b where
    type HasAddHeaderActionThread (TF.Resource p a) b =
         HasAddHeaderActionThread a b

    addHeaderAction = TF.configuration . addHeaderAction

class HasAdjustmentType a b | a -> b where
    type HasAdjustmentTypeThread a b :: *

    adjustmentType
        :: Lens' a (TF.Attribute (HasAdjustmentTypeThread a b) b)

instance HasAdjustmentType a b => HasAdjustmentType (TF.Resource p a) b where
    type HasAdjustmentTypeThread (TF.Resource p a) b =
         HasAdjustmentTypeThread a b

    adjustmentType = TF.configuration . adjustmentType

class HasAdminCreateUserConfig a b | a -> b where
    type HasAdminCreateUserConfigThread a b :: *

    adminCreateUserConfig
        :: Lens' a (TF.Attribute (HasAdminCreateUserConfigThread a b) b)

instance HasAdminCreateUserConfig a b => HasAdminCreateUserConfig (TF.Resource p a) b where
    type HasAdminCreateUserConfigThread (TF.Resource p a) b =
         HasAdminCreateUserConfigThread a b

    adminCreateUserConfig = TF.configuration . adminCreateUserConfig

class HasAdvancedOptions a b | a -> b where
    type HasAdvancedOptionsThread a b :: *

    advancedOptions
        :: Lens' a (TF.Attribute (HasAdvancedOptionsThread a b) b)

instance HasAdvancedOptions a b => HasAdvancedOptions (TF.Resource p a) b where
    type HasAdvancedOptionsThread (TF.Resource p a) b =
         HasAdvancedOptionsThread a b

    advancedOptions = TF.configuration . advancedOptions

class HasAfter a b | a -> b where
    type HasAfterThread a b :: *

    after
        :: Lens' a (TF.Attribute (HasAfterThread a b) b)

instance HasAfter a b => HasAfter (TF.Resource p a) b where
    type HasAfterThread (TF.Resource p a) b =
         HasAfterThread a b

    after = TF.configuration . after

class HasAgentVersion a b | a -> b where
    type HasAgentVersionThread a b :: *

    agentVersion
        :: Lens' a (TF.Attribute (HasAgentVersionThread a b) b)

instance HasAgentVersion a b => HasAgentVersion (TF.Resource p a) b where
    type HasAgentVersionThread (TF.Resource p a) b =
         HasAgentVersionThread a b

    agentVersion = TF.configuration . agentVersion

class HasAlarmActions a b | a -> b where
    type HasAlarmActionsThread a b :: *

    alarmActions
        :: Lens' a (TF.Attribute (HasAlarmActionsThread a b) b)

instance HasAlarmActions a b => HasAlarmActions (TF.Resource p a) b where
    type HasAlarmActionsThread (TF.Resource p a) b =
         HasAlarmActionsThread a b

    alarmActions = TF.configuration . alarmActions

class HasAlarmConfiguration a b | a -> b where
    type HasAlarmConfigurationThread a b :: *

    alarmConfiguration
        :: Lens' a (TF.Attribute (HasAlarmConfigurationThread a b) b)

instance HasAlarmConfiguration a b => HasAlarmConfiguration (TF.Resource p a) b where
    type HasAlarmConfigurationThread (TF.Resource p a) b =
         HasAlarmConfigurationThread a b

    alarmConfiguration = TF.configuration . alarmConfiguration

class HasAlarmDescription a b | a -> b where
    type HasAlarmDescriptionThread a b :: *

    alarmDescription
        :: Lens' a (TF.Attribute (HasAlarmDescriptionThread a b) b)

instance HasAlarmDescription a b => HasAlarmDescription (TF.Resource p a) b where
    type HasAlarmDescriptionThread (TF.Resource p a) b =
         HasAlarmDescriptionThread a b

    alarmDescription = TF.configuration . alarmDescription

class HasAlarmName a b | a -> b where
    type HasAlarmNameThread a b :: *

    alarmName
        :: Lens' a (TF.Attribute (HasAlarmNameThread a b) b)

instance HasAlarmName a b => HasAlarmName (TF.Resource p a) b where
    type HasAlarmNameThread (TF.Resource p a) b =
         HasAlarmNameThread a b

    alarmName = TF.configuration . alarmName

class HasAlbTargetGroupArn a b | a -> b where
    type HasAlbTargetGroupArnThread a b :: *

    albTargetGroupArn
        :: Lens' a (TF.Attribute (HasAlbTargetGroupArnThread a b) b)

instance HasAlbTargetGroupArn a b => HasAlbTargetGroupArn (TF.Resource p a) b where
    type HasAlbTargetGroupArnThread (TF.Resource p a) b =
         HasAlbTargetGroupArnThread a b

    albTargetGroupArn = TF.configuration . albTargetGroupArn

class HasAlias a b | a -> b where
    type HasAliasThread a b :: *

    alias
        :: Lens' a (TF.Attribute (HasAliasThread a b) b)

instance HasAlias a b => HasAlias (TF.Resource p a) b where
    type HasAliasThread (TF.Resource p a) b =
         HasAliasThread a b

    alias = TF.configuration . alias

class HasAliasAttributes a b | a -> b where
    type HasAliasAttributesThread a b :: *

    aliasAttributes
        :: Lens' a (TF.Attribute (HasAliasAttributesThread a b) b)

instance HasAliasAttributes a b => HasAliasAttributes (TF.Resource p a) b where
    type HasAliasAttributesThread (TF.Resource p a) b =
         HasAliasAttributesThread a b

    aliasAttributes = TF.configuration . aliasAttributes

class HasAliases a b | a -> b where
    type HasAliasesThread a b :: *

    aliases
        :: Lens' a (TF.Attribute (HasAliasesThread a b) b)

instance HasAliases a b => HasAliases (TF.Resource p a) b where
    type HasAliasesThread (TF.Resource p a) b =
         HasAliasesThread a b

    aliases = TF.configuration . aliases

class HasAllocatedMemory a b | a -> b where
    type HasAllocatedMemoryThread a b :: *

    allocatedMemory
        :: Lens' a (TF.Attribute (HasAllocatedMemoryThread a b) b)

instance HasAllocatedMemory a b => HasAllocatedMemory (TF.Resource p a) b where
    type HasAllocatedMemoryThread (TF.Resource p a) b =
         HasAllocatedMemoryThread a b

    allocatedMemory = TF.configuration . allocatedMemory

class HasAllocatedStorage a b | a -> b where
    type HasAllocatedStorageThread a b :: *

    allocatedStorage
        :: Lens' a (TF.Attribute (HasAllocatedStorageThread a b) b)

instance HasAllocatedStorage a b => HasAllocatedStorage (TF.Resource p a) b where
    type HasAllocatedStorageThread (TF.Resource p a) b =
         HasAllocatedStorageThread a b

    allocatedStorage = TF.configuration . allocatedStorage

class HasAllocationId a b | a -> b where
    type HasAllocationIdThread a b :: *

    allocationId
        :: Lens' a (TF.Attribute (HasAllocationIdThread a b) b)

instance HasAllocationId a b => HasAllocationId (TF.Resource p a) b where
    type HasAllocationIdThread (TF.Resource p a) b =
         HasAllocationIdThread a b

    allocationId = TF.configuration . allocationId

class HasAllocationStrategy a b | a -> b where
    type HasAllocationStrategyThread a b :: *

    allocationStrategy
        :: Lens' a (TF.Attribute (HasAllocationStrategyThread a b) b)

instance HasAllocationStrategy a b => HasAllocationStrategy (TF.Resource p a) b where
    type HasAllocationStrategyThread (TF.Resource p a) b =
         HasAllocationStrategyThread a b

    allocationStrategy = TF.configuration . allocationStrategy

class HasAllowMajorVersionUpgrade a b | a -> b where
    type HasAllowMajorVersionUpgradeThread a b :: *

    allowMajorVersionUpgrade
        :: Lens' a (TF.Attribute (HasAllowMajorVersionUpgradeThread a b) b)

instance HasAllowMajorVersionUpgrade a b => HasAllowMajorVersionUpgrade (TF.Resource p a) b where
    type HasAllowMajorVersionUpgradeThread (TF.Resource p a) b =
         HasAllowMajorVersionUpgradeThread a b

    allowMajorVersionUpgrade = TF.configuration . allowMajorVersionUpgrade

class HasAllowReassociation a b | a -> b where
    type HasAllowReassociationThread a b :: *

    allowReassociation
        :: Lens' a (TF.Attribute (HasAllowReassociationThread a b) b)

instance HasAllowReassociation a b => HasAllowReassociation (TF.Resource p a) b where
    type HasAllowReassociationThread (TF.Resource p a) b =
         HasAllowReassociationThread a b

    allowReassociation = TF.configuration . allowReassociation

class HasAllowSelfManagement a b | a -> b where
    type HasAllowSelfManagementThread a b :: *

    allowSelfManagement
        :: Lens' a (TF.Attribute (HasAllowSelfManagementThread a b) b)

instance HasAllowSelfManagement a b => HasAllowSelfManagement (TF.Resource p a) b where
    type HasAllowSelfManagementThread (TF.Resource p a) b =
         HasAllowSelfManagementThread a b

    allowSelfManagement = TF.configuration . allowSelfManagement

class HasAllowSsh a b | a -> b where
    type HasAllowSshThread a b :: *

    allowSsh
        :: Lens' a (TF.Attribute (HasAllowSshThread a b) b)

instance HasAllowSsh a b => HasAllowSsh (TF.Resource p a) b where
    type HasAllowSshThread (TF.Resource p a) b =
         HasAllowSshThread a b

    allowSsh = TF.configuration . allowSsh

class HasAllowSudo a b | a -> b where
    type HasAllowSudoThread a b :: *

    allowSudo
        :: Lens' a (TF.Attribute (HasAllowSudoThread a b) b)

instance HasAllowSudo a b => HasAllowSudo (TF.Resource p a) b where
    type HasAllowSudoThread (TF.Resource p a) b =
         HasAllowSudoThread a b

    allowSudo = TF.configuration . allowSudo

class HasAllowUnassociatedTargets a b | a -> b where
    type HasAllowUnassociatedTargetsThread a b :: *

    allowUnassociatedTargets
        :: Lens' a (TF.Attribute (HasAllowUnassociatedTargetsThread a b) b)

instance HasAllowUnassociatedTargets a b => HasAllowUnassociatedTargets (TF.Resource p a) b where
    type HasAllowUnassociatedTargetsThread (TF.Resource p a) b =
         HasAllowUnassociatedTargetsThread a b

    allowUnassociatedTargets = TF.configuration . allowUnassociatedTargets

class HasAllowUnauthenticatedIdentities a b | a -> b where
    type HasAllowUnauthenticatedIdentitiesThread a b :: *

    allowUnauthenticatedIdentities
        :: Lens' a (TF.Attribute (HasAllowUnauthenticatedIdentitiesThread a b) b)

instance HasAllowUnauthenticatedIdentities a b => HasAllowUnauthenticatedIdentities (TF.Resource p a) b where
    type HasAllowUnauthenticatedIdentitiesThread (TF.Resource p a) b =
         HasAllowUnauthenticatedIdentitiesThread a b

    allowUnauthenticatedIdentities = TF.configuration . allowUnauthenticatedIdentities

class HasAllowUsersToChangePassword a b | a -> b where
    type HasAllowUsersToChangePasswordThread a b :: *

    allowUsersToChangePassword
        :: Lens' a (TF.Attribute (HasAllowUsersToChangePasswordThread a b) b)

instance HasAllowUsersToChangePassword a b => HasAllowUsersToChangePassword (TF.Resource p a) b where
    type HasAllowUsersToChangePasswordThread (TF.Resource p a) b =
         HasAllowUsersToChangePasswordThread a b

    allowUsersToChangePassword = TF.configuration . allowUsersToChangePassword

class HasAllowVersionUpgrade a b | a -> b where
    type HasAllowVersionUpgradeThread a b :: *

    allowVersionUpgrade
        :: Lens' a (TF.Attribute (HasAllowVersionUpgradeThread a b) b)

instance HasAllowVersionUpgrade a b => HasAllowVersionUpgrade (TF.Resource p a) b where
    type HasAllowVersionUpgradeThread (TF.Resource p a) b =
         HasAllowVersionUpgradeThread a b

    allowVersionUpgrade = TF.configuration . allowVersionUpgrade

class HasAllowedOauthFlows a b | a -> b where
    type HasAllowedOauthFlowsThread a b :: *

    allowedOauthFlows
        :: Lens' a (TF.Attribute (HasAllowedOauthFlowsThread a b) b)

instance HasAllowedOauthFlows a b => HasAllowedOauthFlows (TF.Resource p a) b where
    type HasAllowedOauthFlowsThread (TF.Resource p a) b =
         HasAllowedOauthFlowsThread a b

    allowedOauthFlows = TF.configuration . allowedOauthFlows

class HasAllowedOauthFlowsUserPoolClient a b | a -> b where
    type HasAllowedOauthFlowsUserPoolClientThread a b :: *

    allowedOauthFlowsUserPoolClient
        :: Lens' a (TF.Attribute (HasAllowedOauthFlowsUserPoolClientThread a b) b)

instance HasAllowedOauthFlowsUserPoolClient a b => HasAllowedOauthFlowsUserPoolClient (TF.Resource p a) b where
    type HasAllowedOauthFlowsUserPoolClientThread (TF.Resource p a) b =
         HasAllowedOauthFlowsUserPoolClientThread a b

    allowedOauthFlowsUserPoolClient = TF.configuration . allowedOauthFlowsUserPoolClient

class HasAllowedOauthScopes a b | a -> b where
    type HasAllowedOauthScopesThread a b :: *

    allowedOauthScopes
        :: Lens' a (TF.Attribute (HasAllowedOauthScopesThread a b) b)

instance HasAllowedOauthScopes a b => HasAllowedOauthScopes (TF.Resource p a) b where
    type HasAllowedOauthScopesThread (TF.Resource p a) b =
         HasAllowedOauthScopesThread a b

    allowedOauthScopes = TF.configuration . allowedOauthScopes

class HasAmi a b | a -> b where
    type HasAmiThread a b :: *

    ami
        :: Lens' a (TF.Attribute (HasAmiThread a b) b)

instance HasAmi a b => HasAmi (TF.Resource p a) b where
    type HasAmiThread (TF.Resource p a) b =
         HasAmiThread a b

    ami = TF.configuration . ami

class HasAmiId a b | a -> b where
    type HasAmiIdThread a b :: *

    amiId
        :: Lens' a (TF.Attribute (HasAmiIdThread a b) b)

instance HasAmiId a b => HasAmiId (TF.Resource p a) b where
    type HasAmiIdThread (TF.Resource p a) b =
         HasAmiIdThread a b

    amiId = TF.configuration . amiId

class HasApiId a b | a -> b where
    type HasApiIdThread a b :: *

    apiId
        :: Lens' a (TF.Attribute (HasApiIdThread a b) b)

instance HasApiId a b => HasApiId (TF.Resource p a) b where
    type HasApiIdThread (TF.Resource p a) b =
         HasApiIdThread a b

    apiId = TF.configuration . apiId

class HasApiKeyRequired a b | a -> b where
    type HasApiKeyRequiredThread a b :: *

    apiKeyRequired
        :: Lens' a (TF.Attribute (HasApiKeyRequiredThread a b) b)

instance HasApiKeyRequired a b => HasApiKeyRequired (TF.Resource p a) b where
    type HasApiKeyRequiredThread (TF.Resource p a) b =
         HasApiKeyRequiredThread a b

    apiKeyRequired = TF.configuration . apiKeyRequired

class HasApiStages a b | a -> b where
    type HasApiStagesThread a b :: *

    apiStages
        :: Lens' a (TF.Attribute (HasApiStagesThread a b) b)

instance HasApiStages a b => HasApiStages (TF.Resource p a) b where
    type HasApiStagesThread (TF.Resource p a) b =
         HasApiStagesThread a b

    apiStages = TF.configuration . apiStages

class HasAppName a b | a -> b where
    type HasAppNameThread a b :: *

    appName
        :: Lens' a (TF.Attribute (HasAppNameThread a b) b)

instance HasAppName a b => HasAppName (TF.Resource p a) b where
    type HasAppNameThread (TF.Resource p a) b =
         HasAppNameThread a b

    appName = TF.configuration . appName

class HasAppServer a b | a -> b where
    type HasAppServerThread a b :: *

    appServer
        :: Lens' a (TF.Attribute (HasAppServerThread a b) b)

instance HasAppServer a b => HasAppServer (TF.Resource p a) b where
    type HasAppServerThread (TF.Resource p a) b =
         HasAppServerThread a b

    appServer = TF.configuration . appServer

class HasAppServerVersion a b | a -> b where
    type HasAppServerVersionThread a b :: *

    appServerVersion
        :: Lens' a (TF.Attribute (HasAppServerVersionThread a b) b)

instance HasAppServerVersion a b => HasAppServerVersion (TF.Resource p a) b where
    type HasAppServerVersionThread (TF.Resource p a) b =
         HasAppServerVersionThread a b

    appServerVersion = TF.configuration . appServerVersion

class HasAppSource a b | a -> b where
    type HasAppSourceThread a b :: *

    appSource
        :: Lens' a (TF.Attribute (HasAppSourceThread a b) b)

instance HasAppSource a b => HasAppSource (TF.Resource p a) b where
    type HasAppSourceThread (TF.Resource p a) b =
         HasAppSourceThread a b

    appSource = TF.configuration . appSource

class HasApplication a b | a -> b where
    type HasApplicationThread a b :: *

    application
        :: Lens' a (TF.Attribute (HasApplicationThread a b) b)

instance HasApplication a b => HasApplication (TF.Resource p a) b where
    type HasApplicationThread (TF.Resource p a) b =
         HasApplicationThread a b

    application = TF.configuration . application

class HasApplications a b | a -> b where
    type HasApplicationsThread a b :: *

    applications
        :: Lens' a (TF.Attribute (HasApplicationsThread a b) b)

instance HasApplications a b => HasApplications (TF.Resource p a) b where
    type HasApplicationsThread (TF.Resource p a) b =
         HasApplicationsThread a b

    applications = TF.configuration . applications

class HasApplyImmediately a b | a -> b where
    type HasApplyImmediatelyThread a b :: *

    applyImmediately
        :: Lens' a (TF.Attribute (HasApplyImmediatelyThread a b) b)

instance HasApplyImmediately a b => HasApplyImmediately (TF.Resource p a) b where
    type HasApplyImmediatelyThread (TF.Resource p a) b =
         HasApplyImmediatelyThread a b

    applyImmediately = TF.configuration . applyImmediately

class HasApprovalRule a b | a -> b where
    type HasApprovalRuleThread a b :: *

    approvalRule
        :: Lens' a (TF.Attribute (HasApprovalRuleThread a b) b)

instance HasApprovalRule a b => HasApprovalRule (TF.Resource p a) b where
    type HasApprovalRuleThread (TF.Resource p a) b =
         HasApprovalRuleThread a b

    approvalRule = TF.configuration . approvalRule

class HasApprovedPatches a b | a -> b where
    type HasApprovedPatchesThread a b :: *

    approvedPatches
        :: Lens' a (TF.Attribute (HasApprovedPatchesThread a b) b)

instance HasApprovedPatches a b => HasApprovedPatches (TF.Resource p a) b where
    type HasApprovedPatchesThread (TF.Resource p a) b =
         HasApprovedPatchesThread a b

    approvedPatches = TF.configuration . approvedPatches

class HasApprovedPatchesComplianceLevel a b | a -> b where
    type HasApprovedPatchesComplianceLevelThread a b :: *

    approvedPatchesComplianceLevel
        :: Lens' a (TF.Attribute (HasApprovedPatchesComplianceLevelThread a b) b)

instance HasApprovedPatchesComplianceLevel a b => HasApprovedPatchesComplianceLevel (TF.Resource p a) b where
    type HasApprovedPatchesComplianceLevelThread (TF.Resource p a) b =
         HasApprovedPatchesComplianceLevelThread a b

    approvedPatchesComplianceLevel = TF.configuration . approvedPatchesComplianceLevel

class HasArchitecture a b | a -> b where
    type HasArchitectureThread a b :: *

    architecture
        :: Lens' a (TF.Attribute (HasArchitectureThread a b) b)

instance HasArchitecture a b => HasArchitecture (TF.Resource p a) b where
    type HasArchitectureThread (TF.Resource p a) b =
         HasArchitectureThread a b

    architecture = TF.configuration . architecture

class HasArn a b | a -> b where
    type HasArnThread a b :: *

    arn
        :: Lens' a (TF.Attribute (HasArnThread a b) b)

instance HasArn a b => HasArn (TF.Resource p a) b where
    type HasArnThread (TF.Resource p a) b =
         HasArnThread a b

    arn = TF.configuration . arn

class HasArtifactStore a b | a -> b where
    type HasArtifactStoreThread a b :: *

    artifactStore
        :: Lens' a (TF.Attribute (HasArtifactStoreThread a b) b)

instance HasArtifactStore a b => HasArtifactStore (TF.Resource p a) b where
    type HasArtifactStoreThread (TF.Resource p a) b =
         HasArtifactStoreThread a b

    artifactStore = TF.configuration . artifactStore

class HasArtifacts a b | a -> b where
    type HasArtifactsThread a b :: *

    artifacts
        :: Lens' a (TF.Attribute (HasArtifactsThread a b) b)

instance HasArtifacts a b => HasArtifacts (TF.Resource p a) b where
    type HasArtifactsThread (TF.Resource p a) b =
         HasArtifactsThread a b

    artifacts = TF.configuration . artifacts

class HasAssignGeneratedIpv6CidrBlock a b | a -> b where
    type HasAssignGeneratedIpv6CidrBlockThread a b :: *

    assignGeneratedIpv6CidrBlock
        :: Lens' a (TF.Attribute (HasAssignGeneratedIpv6CidrBlockThread a b) b)

instance HasAssignGeneratedIpv6CidrBlock a b => HasAssignGeneratedIpv6CidrBlock (TF.Resource p a) b where
    type HasAssignGeneratedIpv6CidrBlockThread (TF.Resource p a) b =
         HasAssignGeneratedIpv6CidrBlockThread a b

    assignGeneratedIpv6CidrBlock = TF.configuration . assignGeneratedIpv6CidrBlock

class HasAssignIpv6AddressOnCreation a b | a -> b where
    type HasAssignIpv6AddressOnCreationThread a b :: *

    assignIpv6AddressOnCreation
        :: Lens' a (TF.Attribute (HasAssignIpv6AddressOnCreationThread a b) b)

instance HasAssignIpv6AddressOnCreation a b => HasAssignIpv6AddressOnCreation (TF.Resource p a) b where
    type HasAssignIpv6AddressOnCreationThread (TF.Resource p a) b =
         HasAssignIpv6AddressOnCreationThread a b

    assignIpv6AddressOnCreation = TF.configuration . assignIpv6AddressOnCreation

class HasAssociatePublicIpAddress a b | a -> b where
    type HasAssociatePublicIpAddressThread a b :: *

    associatePublicIpAddress
        :: Lens' a (TF.Attribute (HasAssociatePublicIpAddressThread a b) b)

instance HasAssociatePublicIpAddress a b => HasAssociatePublicIpAddress (TF.Resource p a) b where
    type HasAssociatePublicIpAddressThread (TF.Resource p a) b =
         HasAssociatePublicIpAddressThread a b

    associatePublicIpAddress = TF.configuration . associatePublicIpAddress

class HasAssociateWithPrivateIp a b | a -> b where
    type HasAssociateWithPrivateIpThread a b :: *

    associateWithPrivateIp
        :: Lens' a (TF.Attribute (HasAssociateWithPrivateIpThread a b) b)

instance HasAssociateWithPrivateIp a b => HasAssociateWithPrivateIp (TF.Resource p a) b where
    type HasAssociateWithPrivateIpThread (TF.Resource p a) b =
         HasAssociateWithPrivateIpThread a b

    associateWithPrivateIp = TF.configuration . associateWithPrivateIp

class HasAssociationName a b | a -> b where
    type HasAssociationNameThread a b :: *

    associationName
        :: Lens' a (TF.Attribute (HasAssociationNameThread a b) b)

instance HasAssociationName a b => HasAssociationName (TF.Resource p a) b where
    type HasAssociationNameThread (TF.Resource p a) b =
         HasAssociationNameThread a b

    associationName = TF.configuration . associationName

class HasAssumeRolePolicy a b | a -> b where
    type HasAssumeRolePolicyThread a b :: *

    assumeRolePolicy
        :: Lens' a (TF.Attribute (HasAssumeRolePolicyThread a b) b)

instance HasAssumeRolePolicy a b => HasAssumeRolePolicy (TF.Resource p a) b where
    type HasAssumeRolePolicyThread (TF.Resource p a) b =
         HasAssumeRolePolicyThread a b

    assumeRolePolicy = TF.configuration . assumeRolePolicy

class HasAtRestEncryptionEnabled a b | a -> b where
    type HasAtRestEncryptionEnabledThread a b :: *

    atRestEncryptionEnabled
        :: Lens' a (TF.Attribute (HasAtRestEncryptionEnabledThread a b) b)

instance HasAtRestEncryptionEnabled a b => HasAtRestEncryptionEnabled (TF.Resource p a) b where
    type HasAtRestEncryptionEnabledThread (TF.Resource p a) b =
         HasAtRestEncryptionEnabledThread a b

    atRestEncryptionEnabled = TF.configuration . atRestEncryptionEnabled

class HasAttachment a b | a -> b where
    type HasAttachmentThread a b :: *

    attachment
        :: Lens' a (TF.Attribute (HasAttachmentThread a b) b)

instance HasAttachment a b => HasAttachment (TF.Resource p a) b where
    type HasAttachmentThread (TF.Resource p a) b =
         HasAttachmentThread a b

    attachment = TF.configuration . attachment

class HasAttribute a b | a -> b where
    type HasAttributeThread a b :: *

    attribute
        :: Lens' a (TF.Attribute (HasAttributeThread a b) b)

instance HasAttribute a b => HasAttribute (TF.Resource p a) b where
    type HasAttributeThread (TF.Resource p a) b =
         HasAttributeThread a b

    attribute = TF.configuration . attribute

class HasAudio a b | a -> b where
    type HasAudioThread a b :: *

    audio
        :: Lens' a (TF.Attribute (HasAudioThread a b) b)

instance HasAudio a b => HasAudio (TF.Resource p a) b where
    type HasAudioThread (TF.Resource p a) b =
         HasAudioThread a b

    audio = TF.configuration . audio

class HasAudioCodecOptions a b | a -> b where
    type HasAudioCodecOptionsThread a b :: *

    audioCodecOptions
        :: Lens' a (TF.Attribute (HasAudioCodecOptionsThread a b) b)

instance HasAudioCodecOptions a b => HasAudioCodecOptions (TF.Resource p a) b where
    type HasAudioCodecOptionsThread (TF.Resource p a) b =
         HasAudioCodecOptionsThread a b

    audioCodecOptions = TF.configuration . audioCodecOptions

class HasAuthToken a b | a -> b where
    type HasAuthTokenThread a b :: *

    authToken
        :: Lens' a (TF.Attribute (HasAuthTokenThread a b) b)

instance HasAuthToken a b => HasAuthToken (TF.Resource p a) b where
    type HasAuthTokenThread (TF.Resource p a) b =
         HasAuthTokenThread a b

    authToken = TF.configuration . authToken

class HasAuthorization a b | a -> b where
    type HasAuthorizationThread a b :: *

    authorization
        :: Lens' a (TF.Attribute (HasAuthorizationThread a b) b)

instance HasAuthorization a b => HasAuthorization (TF.Resource p a) b where
    type HasAuthorizationThread (TF.Resource p a) b =
         HasAuthorizationThread a b

    authorization = TF.configuration . authorization

class HasAuthorizerCredentials a b | a -> b where
    type HasAuthorizerCredentialsThread a b :: *

    authorizerCredentials
        :: Lens' a (TF.Attribute (HasAuthorizerCredentialsThread a b) b)

instance HasAuthorizerCredentials a b => HasAuthorizerCredentials (TF.Resource p a) b where
    type HasAuthorizerCredentialsThread (TF.Resource p a) b =
         HasAuthorizerCredentialsThread a b

    authorizerCredentials = TF.configuration . authorizerCredentials

class HasAuthorizerId a b | a -> b where
    type HasAuthorizerIdThread a b :: *

    authorizerId
        :: Lens' a (TF.Attribute (HasAuthorizerIdThread a b) b)

instance HasAuthorizerId a b => HasAuthorizerId (TF.Resource p a) b where
    type HasAuthorizerIdThread (TF.Resource p a) b =
         HasAuthorizerIdThread a b

    authorizerId = TF.configuration . authorizerId

class HasAuthorizerResultTtlInSeconds a b | a -> b where
    type HasAuthorizerResultTtlInSecondsThread a b :: *

    authorizerResultTtlInSeconds
        :: Lens' a (TF.Attribute (HasAuthorizerResultTtlInSecondsThread a b) b)

instance HasAuthorizerResultTtlInSeconds a b => HasAuthorizerResultTtlInSeconds (TF.Resource p a) b where
    type HasAuthorizerResultTtlInSecondsThread (TF.Resource p a) b =
         HasAuthorizerResultTtlInSecondsThread a b

    authorizerResultTtlInSeconds = TF.configuration . authorizerResultTtlInSeconds

class HasAuthorizerUri a b | a -> b where
    type HasAuthorizerUriThread a b :: *

    authorizerUri
        :: Lens' a (TF.Attribute (HasAuthorizerUriThread a b) b)

instance HasAuthorizerUri a b => HasAuthorizerUri (TF.Resource p a) b where
    type HasAuthorizerUriThread (TF.Resource p a) b =
         HasAuthorizerUriThread a b

    authorizerUri = TF.configuration . authorizerUri

class HasAutoAccept a b | a -> b where
    type HasAutoAcceptThread a b :: *

    autoAccept
        :: Lens' a (TF.Attribute (HasAutoAcceptThread a b) b)

instance HasAutoAccept a b => HasAutoAccept (TF.Resource p a) b where
    type HasAutoAcceptThread (TF.Resource p a) b =
         HasAutoAcceptThread a b

    autoAccept = TF.configuration . autoAccept

class HasAutoAssignElasticIps a b | a -> b where
    type HasAutoAssignElasticIpsThread a b :: *

    autoAssignElasticIps
        :: Lens' a (TF.Attribute (HasAutoAssignElasticIpsThread a b) b)

instance HasAutoAssignElasticIps a b => HasAutoAssignElasticIps (TF.Resource p a) b where
    type HasAutoAssignElasticIpsThread (TF.Resource p a) b =
         HasAutoAssignElasticIpsThread a b

    autoAssignElasticIps = TF.configuration . autoAssignElasticIps

class HasAutoAssignPublicIps a b | a -> b where
    type HasAutoAssignPublicIpsThread a b :: *

    autoAssignPublicIps
        :: Lens' a (TF.Attribute (HasAutoAssignPublicIpsThread a b) b)

instance HasAutoAssignPublicIps a b => HasAutoAssignPublicIps (TF.Resource p a) b where
    type HasAutoAssignPublicIpsThread (TF.Resource p a) b =
         HasAutoAssignPublicIpsThread a b

    autoAssignPublicIps = TF.configuration . autoAssignPublicIps

class HasAutoBundleOnDeploy a b | a -> b where
    type HasAutoBundleOnDeployThread a b :: *

    autoBundleOnDeploy
        :: Lens' a (TF.Attribute (HasAutoBundleOnDeployThread a b) b)

instance HasAutoBundleOnDeploy a b => HasAutoBundleOnDeploy (TF.Resource p a) b where
    type HasAutoBundleOnDeployThread (TF.Resource p a) b =
         HasAutoBundleOnDeployThread a b

    autoBundleOnDeploy = TF.configuration . autoBundleOnDeploy

class HasAutoHealing a b | a -> b where
    type HasAutoHealingThread a b :: *

    autoHealing
        :: Lens' a (TF.Attribute (HasAutoHealingThread a b) b)

instance HasAutoHealing a b => HasAutoHealing (TF.Resource p a) b where
    type HasAutoHealingThread (TF.Resource p a) b =
         HasAutoHealingThread a b

    autoHealing = TF.configuration . autoHealing

class HasAutoMinorVersionUpgrade a b | a -> b where
    type HasAutoMinorVersionUpgradeThread a b :: *

    autoMinorVersionUpgrade
        :: Lens' a (TF.Attribute (HasAutoMinorVersionUpgradeThread a b) b)

instance HasAutoMinorVersionUpgrade a b => HasAutoMinorVersionUpgrade (TF.Resource p a) b where
    type HasAutoMinorVersionUpgradeThread (TF.Resource p a) b =
         HasAutoMinorVersionUpgradeThread a b

    autoMinorVersionUpgrade = TF.configuration . autoMinorVersionUpgrade

class HasAutoRollbackConfiguration a b | a -> b where
    type HasAutoRollbackConfigurationThread a b :: *

    autoRollbackConfiguration
        :: Lens' a (TF.Attribute (HasAutoRollbackConfigurationThread a b) b)

instance HasAutoRollbackConfiguration a b => HasAutoRollbackConfiguration (TF.Resource p a) b where
    type HasAutoRollbackConfigurationThread (TF.Resource p a) b =
         HasAutoRollbackConfigurationThread a b

    autoRollbackConfiguration = TF.configuration . autoRollbackConfiguration

class HasAutoScalingType a b | a -> b where
    type HasAutoScalingTypeThread a b :: *

    autoScalingType
        :: Lens' a (TF.Attribute (HasAutoScalingTypeThread a b) b)

instance HasAutoScalingType a b => HasAutoScalingType (TF.Resource p a) b where
    type HasAutoScalingTypeThread (TF.Resource p a) b =
         HasAutoScalingTypeThread a b

    autoScalingType = TF.configuration . autoScalingType

class HasAutoVerifiedAttributes a b | a -> b where
    type HasAutoVerifiedAttributesThread a b :: *

    autoVerifiedAttributes
        :: Lens' a (TF.Attribute (HasAutoVerifiedAttributesThread a b) b)

instance HasAutoVerifiedAttributes a b => HasAutoVerifiedAttributes (TF.Resource p a) b where
    type HasAutoVerifiedAttributesThread (TF.Resource p a) b =
         HasAutoVerifiedAttributesThread a b

    autoVerifiedAttributes = TF.configuration . autoVerifiedAttributes

class HasAutomatedSnapshotRetentionPeriod a b | a -> b where
    type HasAutomatedSnapshotRetentionPeriodThread a b :: *

    automatedSnapshotRetentionPeriod
        :: Lens' a (TF.Attribute (HasAutomatedSnapshotRetentionPeriodThread a b) b)

instance HasAutomatedSnapshotRetentionPeriod a b => HasAutomatedSnapshotRetentionPeriod (TF.Resource p a) b where
    type HasAutomatedSnapshotRetentionPeriodThread (TF.Resource p a) b =
         HasAutomatedSnapshotRetentionPeriodThread a b

    automatedSnapshotRetentionPeriod = TF.configuration . automatedSnapshotRetentionPeriod

class HasAutomaticFailoverEnabled a b | a -> b where
    type HasAutomaticFailoverEnabledThread a b :: *

    automaticFailoverEnabled
        :: Lens' a (TF.Attribute (HasAutomaticFailoverEnabledThread a b) b)

instance HasAutomaticFailoverEnabled a b => HasAutomaticFailoverEnabled (TF.Resource p a) b where
    type HasAutomaticFailoverEnabledThread (TF.Resource p a) b =
         HasAutomaticFailoverEnabledThread a b

    automaticFailoverEnabled = TF.configuration . automaticFailoverEnabled

class HasAutoscalingGroupName a b | a -> b where
    type HasAutoscalingGroupNameThread a b :: *

    autoscalingGroupName
        :: Lens' a (TF.Attribute (HasAutoscalingGroupNameThread a b) b)

instance HasAutoscalingGroupName a b => HasAutoscalingGroupName (TF.Resource p a) b where
    type HasAutoscalingGroupNameThread (TF.Resource p a) b =
         HasAutoscalingGroupNameThread a b

    autoscalingGroupName = TF.configuration . autoscalingGroupName

class HasAutoscalingGroups a b | a -> b where
    type HasAutoscalingGroupsThread a b :: *

    autoscalingGroups
        :: Lens' a (TF.Attribute (HasAutoscalingGroupsThread a b) b)

instance HasAutoscalingGroups a b => HasAutoscalingGroups (TF.Resource p a) b where
    type HasAutoscalingGroupsThread (TF.Resource p a) b =
         HasAutoscalingGroupsThread a b

    autoscalingGroups = TF.configuration . autoscalingGroups

class HasAutoscalingRole a b | a -> b where
    type HasAutoscalingRoleThread a b :: *

    autoscalingRole
        :: Lens' a (TF.Attribute (HasAutoscalingRoleThread a b) b)

instance HasAutoscalingRole a b => HasAutoscalingRole (TF.Resource p a) b where
    type HasAutoscalingRoleThread (TF.Resource p a) b =
         HasAutoscalingRoleThread a b

    autoscalingRole = TF.configuration . autoscalingRole

class HasAvailabilityZone a b | a -> b where
    type HasAvailabilityZoneThread a b :: *

    availabilityZone
        :: Lens' a (TF.Attribute (HasAvailabilityZoneThread a b) b)

instance HasAvailabilityZone a b => HasAvailabilityZone (TF.Resource p a) b where
    type HasAvailabilityZoneThread (TF.Resource p a) b =
         HasAvailabilityZoneThread a b

    availabilityZone = TF.configuration . availabilityZone

class HasAvailabilityZones a b | a -> b where
    type HasAvailabilityZonesThread a b :: *

    availabilityZones
        :: Lens' a (TF.Attribute (HasAvailabilityZonesThread a b) b)

instance HasAvailabilityZones a b => HasAvailabilityZones (TF.Resource p a) b where
    type HasAvailabilityZonesThread (TF.Resource p a) b =
         HasAvailabilityZonesThread a b

    availabilityZones = TF.configuration . availabilityZones

class HasAwsFlowRubySettings a b | a -> b where
    type HasAwsFlowRubySettingsThread a b :: *

    awsFlowRubySettings
        :: Lens' a (TF.Attribute (HasAwsFlowRubySettingsThread a b) b)

instance HasAwsFlowRubySettings a b => HasAwsFlowRubySettings (TF.Resource p a) b where
    type HasAwsFlowRubySettingsThread (TF.Resource p a) b =
         HasAwsFlowRubySettingsThread a b

    awsFlowRubySettings = TF.configuration . awsFlowRubySettings

class HasAwsKmsKeyArn a b | a -> b where
    type HasAwsKmsKeyArnThread a b :: *

    awsKmsKeyArn
        :: Lens' a (TF.Attribute (HasAwsKmsKeyArnThread a b) b)

instance HasAwsKmsKeyArn a b => HasAwsKmsKeyArn (TF.Resource p a) b where
    type HasAwsKmsKeyArnThread (TF.Resource p a) b =
         HasAwsKmsKeyArnThread a b

    awsKmsKeyArn = TF.configuration . awsKmsKeyArn

class HasAzMode a b | a -> b where
    type HasAzModeThread a b :: *

    azMode
        :: Lens' a (TF.Attribute (HasAzModeThread a b) b)

instance HasAzMode a b => HasAzMode (TF.Resource p a) b where
    type HasAzModeThread (TF.Resource p a) b =
         HasAzModeThread a b

    azMode = TF.configuration . azMode

class HasBackupRetentionPeriod a b | a -> b where
    type HasBackupRetentionPeriodThread a b :: *

    backupRetentionPeriod
        :: Lens' a (TF.Attribute (HasBackupRetentionPeriodThread a b) b)

instance HasBackupRetentionPeriod a b => HasBackupRetentionPeriod (TF.Resource p a) b where
    type HasBackupRetentionPeriodThread (TF.Resource p a) b =
         HasBackupRetentionPeriodThread a b

    backupRetentionPeriod = TF.configuration . backupRetentionPeriod

class HasBackupWindow a b | a -> b where
    type HasBackupWindowThread a b :: *

    backupWindow
        :: Lens' a (TF.Attribute (HasBackupWindowThread a b) b)

instance HasBackupWindow a b => HasBackupWindow (TF.Resource p a) b where
    type HasBackupWindowThread (TF.Resource p a) b =
         HasBackupWindowThread a b

    backupWindow = TF.configuration . backupWindow

class HasBandwidth a b | a -> b where
    type HasBandwidthThread a b :: *

    bandwidth
        :: Lens' a (TF.Attribute (HasBandwidthThread a b) b)

instance HasBandwidth a b => HasBandwidth (TF.Resource p a) b where
    type HasBandwidthThread (TF.Resource p a) b =
         HasBandwidthThread a b

    bandwidth = TF.configuration . bandwidth

class HasBasePath a b | a -> b where
    type HasBasePathThread a b :: *

    basePath
        :: Lens' a (TF.Attribute (HasBasePathThread a b) b)

instance HasBasePath a b => HasBasePath (TF.Resource p a) b where
    type HasBasePathThread (TF.Resource p a) b =
         HasBasePathThread a b

    basePath = TF.configuration . basePath

class HasBaselineId a b | a -> b where
    type HasBaselineIdThread a b :: *

    baselineId
        :: Lens' a (TF.Attribute (HasBaselineIdThread a b) b)

instance HasBaselineId a b => HasBaselineId (TF.Resource p a) b where
    type HasBaselineIdThread (TF.Resource p a) b =
         HasBaselineIdThread a b

    baselineId = TF.configuration . baselineId

class HasBatchSize a b | a -> b where
    type HasBatchSizeThread a b :: *

    batchSize
        :: Lens' a (TF.Attribute (HasBatchSizeThread a b) b)

instance HasBatchSize a b => HasBatchSize (TF.Resource p a) b where
    type HasBatchSizeThread (TF.Resource p a) b =
         HasBatchSizeThread a b

    batchSize = TF.configuration . batchSize

class HasBerkshelfVersion a b | a -> b where
    type HasBerkshelfVersionThread a b :: *

    berkshelfVersion
        :: Lens' a (TF.Attribute (HasBerkshelfVersionThread a b) b)

instance HasBerkshelfVersion a b => HasBerkshelfVersion (TF.Resource p a) b where
    type HasBerkshelfVersionThread (TF.Resource p a) b =
         HasBerkshelfVersionThread a b

    berkshelfVersion = TF.configuration . berkshelfVersion

class HasBgpAsn a b | a -> b where
    type HasBgpAsnThread a b :: *

    bgpAsn
        :: Lens' a (TF.Attribute (HasBgpAsnThread a b) b)

instance HasBgpAsn a b => HasBgpAsn (TF.Resource p a) b where
    type HasBgpAsnThread (TF.Resource p a) b =
         HasBgpAsnThread a b

    bgpAsn = TF.configuration . bgpAsn

class HasBinaryMediaTypes a b | a -> b where
    type HasBinaryMediaTypesThread a b :: *

    binaryMediaTypes
        :: Lens' a (TF.Attribute (HasBinaryMediaTypesThread a b) b)

instance HasBinaryMediaTypes a b => HasBinaryMediaTypes (TF.Resource p a) b where
    type HasBinaryMediaTypesThread (TF.Resource p a) b =
         HasBinaryMediaTypesThread a b

    binaryMediaTypes = TF.configuration . binaryMediaTypes

class HasBlockDurationMinutes a b | a -> b where
    type HasBlockDurationMinutesThread a b :: *

    blockDurationMinutes
        :: Lens' a (TF.Attribute (HasBlockDurationMinutesThread a b) b)

instance HasBlockDurationMinutes a b => HasBlockDurationMinutes (TF.Resource p a) b where
    type HasBlockDurationMinutesThread (TF.Resource p a) b =
         HasBlockDurationMinutesThread a b

    blockDurationMinutes = TF.configuration . blockDurationMinutes

class HasBlueGreenDeploymentConfig a b | a -> b where
    type HasBlueGreenDeploymentConfigThread a b :: *

    blueGreenDeploymentConfig
        :: Lens' a (TF.Attribute (HasBlueGreenDeploymentConfigThread a b) b)

instance HasBlueGreenDeploymentConfig a b => HasBlueGreenDeploymentConfig (TF.Resource p a) b where
    type HasBlueGreenDeploymentConfigThread (TF.Resource p a) b =
         HasBlueGreenDeploymentConfigThread a b

    blueGreenDeploymentConfig = TF.configuration . blueGreenDeploymentConfig

class HasBlueprintId a b | a -> b where
    type HasBlueprintIdThread a b :: *

    blueprintId
        :: Lens' a (TF.Attribute (HasBlueprintIdThread a b) b)

instance HasBlueprintId a b => HasBlueprintId (TF.Resource p a) b where
    type HasBlueprintIdThread (TF.Resource p a) b =
         HasBlueprintIdThread a b

    blueprintId = TF.configuration . blueprintId

class HasBody a b | a -> b where
    type HasBodyThread a b :: *

    body
        :: Lens' a (TF.Attribute (HasBodyThread a b) b)

instance HasBody a b => HasBody (TF.Resource p a) b where
    type HasBodyThread (TF.Resource p a) b =
         HasBodyThread a b

    body = TF.configuration . body

class HasBootstrapAction a b | a -> b where
    type HasBootstrapActionThread a b :: *

    bootstrapAction
        :: Lens' a (TF.Attribute (HasBootstrapActionThread a b) b)

instance HasBootstrapAction a b => HasBootstrapAction (TF.Resource p a) b where
    type HasBootstrapActionThread (TF.Resource p a) b =
         HasBootstrapActionThread a b

    bootstrapAction = TF.configuration . bootstrapAction

class HasBounceAction a b | a -> b where
    type HasBounceActionThread a b :: *

    bounceAction
        :: Lens' a (TF.Attribute (HasBounceActionThread a b) b)

instance HasBounceAction a b => HasBounceAction (TF.Resource p a) b where
    type HasBounceActionThread (TF.Resource p a) b =
         HasBounceActionThread a b

    bounceAction = TF.configuration . bounceAction

class HasBranches a b | a -> b where
    type HasBranchesThread a b :: *

    branches
        :: Lens' a (TF.Attribute (HasBranchesThread a b) b)

instance HasBranches a b => HasBranches (TF.Resource p a) b where
    type HasBranchesThread (TF.Resource p a) b =
         HasBranchesThread a b

    branches = TF.configuration . branches

class HasBrokerName a b | a -> b where
    type HasBrokerNameThread a b :: *

    brokerName
        :: Lens' a (TF.Attribute (HasBrokerNameThread a b) b)

instance HasBrokerName a b => HasBrokerName (TF.Resource p a) b where
    type HasBrokerNameThread (TF.Resource p a) b =
         HasBrokerNameThread a b

    brokerName = TF.configuration . brokerName

class HasBucket a b | a -> b where
    type HasBucketThread a b :: *

    bucket
        :: Lens' a (TF.Attribute (HasBucketThread a b) b)

instance HasBucket a b => HasBucket (TF.Resource p a) b where
    type HasBucketThread (TF.Resource p a) b =
         HasBucketThread a b

    bucket = TF.configuration . bucket

class HasBucketPrefix a b | a -> b where
    type HasBucketPrefixThread a b :: *

    bucketPrefix
        :: Lens' a (TF.Attribute (HasBucketPrefixThread a b) b)

instance HasBucketPrefix a b => HasBucketPrefix (TF.Resource p a) b where
    type HasBucketPrefixThread (TF.Resource p a) b =
         HasBucketPrefixThread a b

    bucketPrefix = TF.configuration . bucketPrefix

class HasBuildTimeout a b | a -> b where
    type HasBuildTimeoutThread a b :: *

    buildTimeout
        :: Lens' a (TF.Attribute (HasBuildTimeoutThread a b) b)

instance HasBuildTimeout a b => HasBuildTimeout (TF.Resource p a) b where
    type HasBuildTimeoutThread (TF.Resource p a) b =
         HasBuildTimeoutThread a b

    buildTimeout = TF.configuration . buildTimeout

class HasBundleId a b | a -> b where
    type HasBundleIdThread a b :: *

    bundleId
        :: Lens' a (TF.Attribute (HasBundleIdThread a b) b)

instance HasBundleId a b => HasBundleId (TF.Resource p a) b where
    type HasBundleIdThread (TF.Resource p a) b =
         HasBundleIdThread a b

    bundleId = TF.configuration . bundleId

class HasBundlerVersion a b | a -> b where
    type HasBundlerVersionThread a b :: *

    bundlerVersion
        :: Lens' a (TF.Attribute (HasBundlerVersionThread a b) b)

instance HasBundlerVersion a b => HasBundlerVersion (TF.Resource p a) b where
    type HasBundlerVersionThread (TF.Resource p a) b =
         HasBundlerVersionThread a b

    bundlerVersion = TF.configuration . bundlerVersion

class HasByteMatchTuple a b | a -> b where
    type HasByteMatchTupleThread a b :: *

    byteMatchTuple
        :: Lens' a (TF.Attribute (HasByteMatchTupleThread a b) b)

instance HasByteMatchTuple a b => HasByteMatchTuple (TF.Resource p a) b where
    type HasByteMatchTupleThread (TF.Resource p a) b =
         HasByteMatchTupleThread a b

    byteMatchTuple = TF.configuration . byteMatchTuple

class HasByteMatchTuples a b | a -> b where
    type HasByteMatchTuplesThread a b :: *

    byteMatchTuples
        :: Lens' a (TF.Attribute (HasByteMatchTuplesThread a b) b)

instance HasByteMatchTuples a b => HasByteMatchTuples (TF.Resource p a) b where
    type HasByteMatchTuplesThread (TF.Resource p a) b =
         HasByteMatchTuplesThread a b

    byteMatchTuples = TF.configuration . byteMatchTuples

class HasCacheBehavior a b | a -> b where
    type HasCacheBehaviorThread a b :: *

    cacheBehavior
        :: Lens' a (TF.Attribute (HasCacheBehaviorThread a b) b)

instance HasCacheBehavior a b => HasCacheBehavior (TF.Resource p a) b where
    type HasCacheBehaviorThread (TF.Resource p a) b =
         HasCacheBehaviorThread a b

    cacheBehavior = TF.configuration . cacheBehavior

class HasCacheClusterEnabled a b | a -> b where
    type HasCacheClusterEnabledThread a b :: *

    cacheClusterEnabled
        :: Lens' a (TF.Attribute (HasCacheClusterEnabledThread a b) b)

instance HasCacheClusterEnabled a b => HasCacheClusterEnabled (TF.Resource p a) b where
    type HasCacheClusterEnabledThread (TF.Resource p a) b =
         HasCacheClusterEnabledThread a b

    cacheClusterEnabled = TF.configuration . cacheClusterEnabled

class HasCacheClusterSize a b | a -> b where
    type HasCacheClusterSizeThread a b :: *

    cacheClusterSize
        :: Lens' a (TF.Attribute (HasCacheClusterSizeThread a b) b)

instance HasCacheClusterSize a b => HasCacheClusterSize (TF.Resource p a) b where
    type HasCacheClusterSizeThread (TF.Resource p a) b =
         HasCacheClusterSizeThread a b

    cacheClusterSize = TF.configuration . cacheClusterSize

class HasCacheControl a b | a -> b where
    type HasCacheControlThread a b :: *

    cacheControl
        :: Lens' a (TF.Attribute (HasCacheControlThread a b) b)

instance HasCacheControl a b => HasCacheControl (TF.Resource p a) b where
    type HasCacheControlThread (TF.Resource p a) b =
         HasCacheControlThread a b

    cacheControl = TF.configuration . cacheControl

class HasCacheKeyNamespace a b | a -> b where
    type HasCacheKeyNamespaceThread a b :: *

    cacheKeyNamespace
        :: Lens' a (TF.Attribute (HasCacheKeyNamespaceThread a b) b)

instance HasCacheKeyNamespace a b => HasCacheKeyNamespace (TF.Resource p a) b where
    type HasCacheKeyNamespaceThread (TF.Resource p a) b =
         HasCacheKeyNamespaceThread a b

    cacheKeyNamespace = TF.configuration . cacheKeyNamespace

class HasCacheKeyParameters a b | a -> b where
    type HasCacheKeyParametersThread a b :: *

    cacheKeyParameters
        :: Lens' a (TF.Attribute (HasCacheKeyParametersThread a b) b)

instance HasCacheKeyParameters a b => HasCacheKeyParameters (TF.Resource p a) b where
    type HasCacheKeyParametersThread (TF.Resource p a) b =
         HasCacheKeyParametersThread a b

    cacheKeyParameters = TF.configuration . cacheKeyParameters

class HasCallbackUrls a b | a -> b where
    type HasCallbackUrlsThread a b :: *

    callbackUrls
        :: Lens' a (TF.Attribute (HasCallbackUrlsThread a b) b)

instance HasCallbackUrls a b => HasCallbackUrls (TF.Resource p a) b where
    type HasCallbackUrlsThread (TF.Resource p a) b =
         HasCallbackUrlsThread a b

    callbackUrls = TF.configuration . callbackUrls

class HasCapabilities a b | a -> b where
    type HasCapabilitiesThread a b :: *

    capabilities
        :: Lens' a (TF.Attribute (HasCapabilitiesThread a b) b)

instance HasCapabilities a b => HasCapabilities (TF.Resource p a) b where
    type HasCapabilitiesThread (TF.Resource p a) b =
         HasCapabilitiesThread a b

    capabilities = TF.configuration . capabilities

class HasCatalogId a b | a -> b where
    type HasCatalogIdThread a b :: *

    catalogId
        :: Lens' a (TF.Attribute (HasCatalogIdThread a b) b)

instance HasCatalogId a b => HasCatalogId (TF.Resource p a) b where
    type HasCatalogIdThread (TF.Resource p a) b =
         HasCatalogIdThread a b

    catalogId = TF.configuration . catalogId

class HasCdcStartTime a b | a -> b where
    type HasCdcStartTimeThread a b :: *

    cdcStartTime
        :: Lens' a (TF.Attribute (HasCdcStartTimeThread a b) b)

instance HasCdcStartTime a b => HasCdcStartTime (TF.Resource p a) b where
    type HasCdcStartTimeThread (TF.Resource p a) b =
         HasCdcStartTimeThread a b

    cdcStartTime = TF.configuration . cdcStartTime

class HasCertificateArn a b | a -> b where
    type HasCertificateArnThread a b :: *

    certificateArn
        :: Lens' a (TF.Attribute (HasCertificateArnThread a b) b)

instance HasCertificateArn a b => HasCertificateArn (TF.Resource p a) b where
    type HasCertificateArnThread (TF.Resource p a) b =
         HasCertificateArnThread a b

    certificateArn = TF.configuration . certificateArn

class HasCertificateBody a b | a -> b where
    type HasCertificateBodyThread a b :: *

    certificateBody
        :: Lens' a (TF.Attribute (HasCertificateBodyThread a b) b)

instance HasCertificateBody a b => HasCertificateBody (TF.Resource p a) b where
    type HasCertificateBodyThread (TF.Resource p a) b =
         HasCertificateBodyThread a b

    certificateBody = TF.configuration . certificateBody

class HasCertificateChain a b | a -> b where
    type HasCertificateChainThread a b :: *

    certificateChain
        :: Lens' a (TF.Attribute (HasCertificateChainThread a b) b)

instance HasCertificateChain a b => HasCertificateChain (TF.Resource p a) b where
    type HasCertificateChainThread (TF.Resource p a) b =
         HasCertificateChainThread a b

    certificateChain = TF.configuration . certificateChain

class HasCertificateId a b | a -> b where
    type HasCertificateIdThread a b :: *

    certificateId
        :: Lens' a (TF.Attribute (HasCertificateIdThread a b) b)

instance HasCertificateId a b => HasCertificateId (TF.Resource p a) b where
    type HasCertificateIdThread (TF.Resource p a) b =
         HasCertificateIdThread a b

    certificateId = TF.configuration . certificateId

class HasCertificateName a b | a -> b where
    type HasCertificateNameThread a b :: *

    certificateName
        :: Lens' a (TF.Attribute (HasCertificateNameThread a b) b)

instance HasCertificateName a b => HasCertificateName (TF.Resource p a) b where
    type HasCertificateNameThread (TF.Resource p a) b =
         HasCertificateNameThread a b

    certificateName = TF.configuration . certificateName

class HasCertificatePem a b | a -> b where
    type HasCertificatePemThread a b :: *

    certificatePem
        :: Lens' a (TF.Attribute (HasCertificatePemThread a b) b)

instance HasCertificatePem a b => HasCertificatePem (TF.Resource p a) b where
    type HasCertificatePemThread (TF.Resource p a) b =
         HasCertificatePemThread a b

    certificatePem = TF.configuration . certificatePem

class HasCertificatePrivateKey a b | a -> b where
    type HasCertificatePrivateKeyThread a b :: *

    certificatePrivateKey
        :: Lens' a (TF.Attribute (HasCertificatePrivateKeyThread a b) b)

instance HasCertificatePrivateKey a b => HasCertificatePrivateKey (TF.Resource p a) b where
    type HasCertificatePrivateKeyThread (TF.Resource p a) b =
         HasCertificatePrivateKeyThread a b

    certificatePrivateKey = TF.configuration . certificatePrivateKey

class HasCertificateWallet a b | a -> b where
    type HasCertificateWalletThread a b :: *

    certificateWallet
        :: Lens' a (TF.Attribute (HasCertificateWalletThread a b) b)

instance HasCertificateWallet a b => HasCertificateWallet (TF.Resource p a) b where
    type HasCertificateWalletThread (TF.Resource p a) b =
         HasCertificateWalletThread a b

    certificateWallet = TF.configuration . certificateWallet

class HasCharacterSetName a b | a -> b where
    type HasCharacterSetNameThread a b :: *

    characterSetName
        :: Lens' a (TF.Attribute (HasCharacterSetNameThread a b) b)

instance HasCharacterSetName a b => HasCharacterSetName (TF.Resource p a) b where
    type HasCharacterSetNameThread (TF.Resource p a) b =
         HasCharacterSetNameThread a b

    characterSetName = TF.configuration . characterSetName

class HasChildHealthThreshold a b | a -> b where
    type HasChildHealthThresholdThread a b :: *

    childHealthThreshold
        :: Lens' a (TF.Attribute (HasChildHealthThresholdThread a b) b)

instance HasChildHealthThreshold a b => HasChildHealthThreshold (TF.Resource p a) b where
    type HasChildHealthThresholdThread (TF.Resource p a) b =
         HasChildHealthThresholdThread a b

    childHealthThreshold = TF.configuration . childHealthThreshold

class HasChildHealthchecks a b | a -> b where
    type HasChildHealthchecksThread a b :: *

    childHealthchecks
        :: Lens' a (TF.Attribute (HasChildHealthchecksThread a b) b)

instance HasChildHealthchecks a b => HasChildHealthchecks (TF.Resource p a) b where
    type HasChildHealthchecksThread (TF.Resource p a) b =
         HasChildHealthchecksThread a b

    childHealthchecks = TF.configuration . childHealthchecks

class HasCidr a b | a -> b where
    type HasCidrThread a b :: *

    cidr
        :: Lens' a (TF.Attribute (HasCidrThread a b) b)

instance HasCidr a b => HasCidr (TF.Resource p a) b where
    type HasCidrThread (TF.Resource p a) b =
         HasCidrThread a b

    cidr = TF.configuration . cidr

class HasCidrBlock a b | a -> b where
    type HasCidrBlockThread a b :: *

    cidrBlock
        :: Lens' a (TF.Attribute (HasCidrBlockThread a b) b)

instance HasCidrBlock a b => HasCidrBlock (TF.Resource p a) b where
    type HasCidrBlockThread (TF.Resource p a) b =
         HasCidrBlockThread a b

    cidrBlock = TF.configuration . cidrBlock

class HasCidrBlocks a b | a -> b where
    type HasCidrBlocksThread a b :: *

    cidrBlocks
        :: Lens' a (TF.Attribute (HasCidrBlocksThread a b) b)

instance HasCidrBlocks a b => HasCidrBlocks (TF.Resource p a) b where
    type HasCidrBlocksThread (TF.Resource p a) b =
         HasCidrBlocksThread a b

    cidrBlocks = TF.configuration . cidrBlocks

class HasClientCertificateId a b | a -> b where
    type HasClientCertificateIdThread a b :: *

    clientCertificateId
        :: Lens' a (TF.Attribute (HasClientCertificateIdThread a b) b)

instance HasClientCertificateId a b => HasClientCertificateId (TF.Resource p a) b where
    type HasClientCertificateIdThread (TF.Resource p a) b =
         HasClientCertificateIdThread a b

    clientCertificateId = TF.configuration . clientCertificateId

class HasClientIdList a b | a -> b where
    type HasClientIdListThread a b :: *

    clientIdList
        :: Lens' a (TF.Attribute (HasClientIdListThread a b) b)

instance HasClientIdList a b => HasClientIdList (TF.Resource p a) b where
    type HasClientIdListThread (TF.Resource p a) b =
         HasClientIdListThread a b

    clientIdList = TF.configuration . clientIdList

class HasCloudWatchLogsGroupArn a b | a -> b where
    type HasCloudWatchLogsGroupArnThread a b :: *

    cloudWatchLogsGroupArn
        :: Lens' a (TF.Attribute (HasCloudWatchLogsGroupArnThread a b) b)

instance HasCloudWatchLogsGroupArn a b => HasCloudWatchLogsGroupArn (TF.Resource p a) b where
    type HasCloudWatchLogsGroupArnThread (TF.Resource p a) b =
         HasCloudWatchLogsGroupArnThread a b

    cloudWatchLogsGroupArn = TF.configuration . cloudWatchLogsGroupArn

class HasCloudWatchLogsRoleArn a b | a -> b where
    type HasCloudWatchLogsRoleArnThread a b :: *

    cloudWatchLogsRoleArn
        :: Lens' a (TF.Attribute (HasCloudWatchLogsRoleArnThread a b) b)

instance HasCloudWatchLogsRoleArn a b => HasCloudWatchLogsRoleArn (TF.Resource p a) b where
    type HasCloudWatchLogsRoleArnThread (TF.Resource p a) b =
         HasCloudWatchLogsRoleArnThread a b

    cloudWatchLogsRoleArn = TF.configuration . cloudWatchLogsRoleArn

class HasCloudwatchAlarmName a b | a -> b where
    type HasCloudwatchAlarmNameThread a b :: *

    cloudwatchAlarmName
        :: Lens' a (TF.Attribute (HasCloudwatchAlarmNameThread a b) b)

instance HasCloudwatchAlarmName a b => HasCloudwatchAlarmName (TF.Resource p a) b where
    type HasCloudwatchAlarmNameThread (TF.Resource p a) b =
         HasCloudwatchAlarmNameThread a b

    cloudwatchAlarmName = TF.configuration . cloudwatchAlarmName

class HasCloudwatchAlarmRegion a b | a -> b where
    type HasCloudwatchAlarmRegionThread a b :: *

    cloudwatchAlarmRegion
        :: Lens' a (TF.Attribute (HasCloudwatchAlarmRegionThread a b) b)

instance HasCloudwatchAlarmRegion a b => HasCloudwatchAlarmRegion (TF.Resource p a) b where
    type HasCloudwatchAlarmRegionThread (TF.Resource p a) b =
         HasCloudwatchAlarmRegionThread a b

    cloudwatchAlarmRegion = TF.configuration . cloudwatchAlarmRegion

class HasCloudwatchDestination a b | a -> b where
    type HasCloudwatchDestinationThread a b :: *

    cloudwatchDestination
        :: Lens' a (TF.Attribute (HasCloudwatchDestinationThread a b) b)

instance HasCloudwatchDestination a b => HasCloudwatchDestination (TF.Resource p a) b where
    type HasCloudwatchDestinationThread (TF.Resource p a) b =
         HasCloudwatchDestinationThread a b

    cloudwatchDestination = TF.configuration . cloudwatchDestination

class HasCloudwatchLogGroupArn a b | a -> b where
    type HasCloudwatchLogGroupArnThread a b :: *

    cloudwatchLogGroupArn
        :: Lens' a (TF.Attribute (HasCloudwatchLogGroupArnThread a b) b)

instance HasCloudwatchLogGroupArn a b => HasCloudwatchLogGroupArn (TF.Resource p a) b where
    type HasCloudwatchLogGroupArnThread (TF.Resource p a) b =
         HasCloudwatchLogGroupArnThread a b

    cloudwatchLogGroupArn = TF.configuration . cloudwatchLogGroupArn

class HasCloudwatchRoleArn a b | a -> b where
    type HasCloudwatchRoleArnThread a b :: *

    cloudwatchRoleArn
        :: Lens' a (TF.Attribute (HasCloudwatchRoleArnThread a b) b)

instance HasCloudwatchRoleArn a b => HasCloudwatchRoleArn (TF.Resource p a) b where
    type HasCloudwatchRoleArnThread (TF.Resource p a) b =
         HasCloudwatchRoleArnThread a b

    cloudwatchRoleArn = TF.configuration . cloudwatchRoleArn

class HasCluster a b | a -> b where
    type HasClusterThread a b :: *

    cluster
        :: Lens' a (TF.Attribute (HasClusterThread a b) b)

instance HasCluster a b => HasCluster (TF.Resource p a) b where
    type HasClusterThread (TF.Resource p a) b =
         HasClusterThread a b

    cluster = TF.configuration . cluster

class HasClusterConfig a b | a -> b where
    type HasClusterConfigThread a b :: *

    clusterConfig
        :: Lens' a (TF.Attribute (HasClusterConfigThread a b) b)

instance HasClusterConfig a b => HasClusterConfig (TF.Resource p a) b where
    type HasClusterConfigThread (TF.Resource p a) b =
         HasClusterConfigThread a b

    clusterConfig = TF.configuration . clusterConfig

class HasClusterId a b | a -> b where
    type HasClusterIdThread a b :: *

    clusterId
        :: Lens' a (TF.Attribute (HasClusterIdThread a b) b)

instance HasClusterId a b => HasClusterId (TF.Resource p a) b where
    type HasClusterIdThread (TF.Resource p a) b =
         HasClusterIdThread a b

    clusterId = TF.configuration . clusterId

class HasClusterIdentifier a b | a -> b where
    type HasClusterIdentifierThread a b :: *

    clusterIdentifier
        :: Lens' a (TF.Attribute (HasClusterIdentifierThread a b) b)

instance HasClusterIdentifier a b => HasClusterIdentifier (TF.Resource p a) b where
    type HasClusterIdentifierThread (TF.Resource p a) b =
         HasClusterIdentifierThread a b

    clusterIdentifier = TF.configuration . clusterIdentifier

class HasClusterIdentifierPrefix a b | a -> b where
    type HasClusterIdentifierPrefixThread a b :: *

    clusterIdentifierPrefix
        :: Lens' a (TF.Attribute (HasClusterIdentifierPrefixThread a b) b)

instance HasClusterIdentifierPrefix a b => HasClusterIdentifierPrefix (TF.Resource p a) b where
    type HasClusterIdentifierPrefixThread (TF.Resource p a) b =
         HasClusterIdentifierPrefixThread a b

    clusterIdentifierPrefix = TF.configuration . clusterIdentifierPrefix

class HasClusterMode a b | a -> b where
    type HasClusterModeThread a b :: *

    clusterMode
        :: Lens' a (TF.Attribute (HasClusterModeThread a b) b)

instance HasClusterMode a b => HasClusterMode (TF.Resource p a) b where
    type HasClusterModeThread (TF.Resource p a) b =
         HasClusterModeThread a b

    clusterMode = TF.configuration . clusterMode

class HasClusterParameterGroupName a b | a -> b where
    type HasClusterParameterGroupNameThread a b :: *

    clusterParameterGroupName
        :: Lens' a (TF.Attribute (HasClusterParameterGroupNameThread a b) b)

instance HasClusterParameterGroupName a b => HasClusterParameterGroupName (TF.Resource p a) b where
    type HasClusterParameterGroupNameThread (TF.Resource p a) b =
         HasClusterParameterGroupNameThread a b

    clusterParameterGroupName = TF.configuration . clusterParameterGroupName

class HasClusterSecurityGroups a b | a -> b where
    type HasClusterSecurityGroupsThread a b :: *

    clusterSecurityGroups
        :: Lens' a (TF.Attribute (HasClusterSecurityGroupsThread a b) b)

instance HasClusterSecurityGroups a b => HasClusterSecurityGroups (TF.Resource p a) b where
    type HasClusterSecurityGroupsThread (TF.Resource p a) b =
         HasClusterSecurityGroupsThread a b

    clusterSecurityGroups = TF.configuration . clusterSecurityGroups

class HasClusterSubnetGroupName a b | a -> b where
    type HasClusterSubnetGroupNameThread a b :: *

    clusterSubnetGroupName
        :: Lens' a (TF.Attribute (HasClusterSubnetGroupNameThread a b) b)

instance HasClusterSubnetGroupName a b => HasClusterSubnetGroupName (TF.Resource p a) b where
    type HasClusterSubnetGroupNameThread (TF.Resource p a) b =
         HasClusterSubnetGroupNameThread a b

    clusterSubnetGroupName = TF.configuration . clusterSubnetGroupName

class HasClusterType a b | a -> b where
    type HasClusterTypeThread a b :: *

    clusterType
        :: Lens' a (TF.Attribute (HasClusterTypeThread a b) b)

instance HasClusterType a b => HasClusterType (TF.Resource p a) b where
    type HasClusterTypeThread (TF.Resource p a) b =
         HasClusterTypeThread a b

    clusterType = TF.configuration . clusterType

class HasClusterVersion a b | a -> b where
    type HasClusterVersionThread a b :: *

    clusterVersion
        :: Lens' a (TF.Attribute (HasClusterVersionThread a b) b)

instance HasClusterVersion a b => HasClusterVersion (TF.Resource p a) b where
    type HasClusterVersionThread (TF.Resource p a) b =
         HasClusterVersionThread a b

    clusterVersion = TF.configuration . clusterVersion

class HasCnamePrefix a b | a -> b where
    type HasCnamePrefixThread a b :: *

    cnamePrefix
        :: Lens' a (TF.Attribute (HasCnamePrefixThread a b) b)

instance HasCnamePrefix a b => HasCnamePrefix (TF.Resource p a) b where
    type HasCnamePrefixThread (TF.Resource p a) b =
         HasCnamePrefixThread a b

    cnamePrefix = TF.configuration . cnamePrefix

class HasCognitoIdentityProviders a b | a -> b where
    type HasCognitoIdentityProvidersThread a b :: *

    cognitoIdentityProviders
        :: Lens' a (TF.Attribute (HasCognitoIdentityProvidersThread a b) b)

instance HasCognitoIdentityProviders a b => HasCognitoIdentityProviders (TF.Resource p a) b where
    type HasCognitoIdentityProvidersThread (TF.Resource p a) b =
         HasCognitoIdentityProvidersThread a b

    cognitoIdentityProviders = TF.configuration . cognitoIdentityProviders

class HasColor a b | a -> b where
    type HasColorThread a b :: *

    color
        :: Lens' a (TF.Attribute (HasColorThread a b) b)

instance HasColor a b => HasColor (TF.Resource p a) b where
    type HasColorThread (TF.Resource p a) b =
         HasColorThread a b

    color = TF.configuration . color

class HasComment a b | a -> b where
    type HasCommentThread a b :: *

    comment
        :: Lens' a (TF.Attribute (HasCommentThread a b) b)

instance HasComment a b => HasComment (TF.Resource p a) b where
    type HasCommentThread (TF.Resource p a) b =
         HasCommentThread a b

    comment = TF.configuration . comment

class HasComparisonOperator a b | a -> b where
    type HasComparisonOperatorThread a b :: *

    comparisonOperator
        :: Lens' a (TF.Attribute (HasComparisonOperatorThread a b) b)

instance HasComparisonOperator a b => HasComparisonOperator (TF.Resource p a) b where
    type HasComparisonOperatorThread (TF.Resource p a) b =
         HasComparisonOperatorThread a b

    comparisonOperator = TF.configuration . comparisonOperator

class HasComputeEnvironmentName a b | a -> b where
    type HasComputeEnvironmentNameThread a b :: *

    computeEnvironmentName
        :: Lens' a (TF.Attribute (HasComputeEnvironmentNameThread a b) b)

instance HasComputeEnvironmentName a b => HasComputeEnvironmentName (TF.Resource p a) b where
    type HasComputeEnvironmentNameThread (TF.Resource p a) b =
         HasComputeEnvironmentNameThread a b

    computeEnvironmentName = TF.configuration . computeEnvironmentName

class HasComputeEnvironments a b | a -> b where
    type HasComputeEnvironmentsThread a b :: *

    computeEnvironments
        :: Lens' a (TF.Attribute (HasComputeEnvironmentsThread a b) b)

instance HasComputeEnvironments a b => HasComputeEnvironments (TF.Resource p a) b where
    type HasComputeEnvironmentsThread (TF.Resource p a) b =
         HasComputeEnvironmentsThread a b

    computeEnvironments = TF.configuration . computeEnvironments

class HasComputeResources a b | a -> b where
    type HasComputeResourcesThread a b :: *

    computeResources
        :: Lens' a (TF.Attribute (HasComputeResourcesThread a b) b)

instance HasComputeResources a b => HasComputeResources (TF.Resource p a) b where
    type HasComputeResourcesThread (TF.Resource p a) b =
         HasComputeResourcesThread a b

    computeResources = TF.configuration . computeResources

class HasCondition a b | a -> b where
    type HasConditionThread a b :: *

    condition
        :: Lens' a (TF.Attribute (HasConditionThread a b) b)

instance HasCondition a b => HasCondition (TF.Resource p a) b where
    type HasConditionThread (TF.Resource p a) b =
         HasConditionThread a b

    condition = TF.configuration . condition

class HasConfiguration a b | a -> b where
    type HasConfigurationThread a b :: *

    configuration
        :: Lens' a (TF.Attribute (HasConfigurationThread a b) b)

instance HasConfiguration a b => HasConfiguration (TF.Resource p a) b where
    type HasConfigurationThread (TF.Resource p a) b =
         HasConfigurationThread a b

    configuration = TF.configuration . configuration

class HasConfigurationManagerName a b | a -> b where
    type HasConfigurationManagerNameThread a b :: *

    configurationManagerName
        :: Lens' a (TF.Attribute (HasConfigurationManagerNameThread a b) b)

instance HasConfigurationManagerName a b => HasConfigurationManagerName (TF.Resource p a) b where
    type HasConfigurationManagerNameThread (TF.Resource p a) b =
         HasConfigurationManagerNameThread a b

    configurationManagerName = TF.configuration . configurationManagerName

class HasConfigurationManagerVersion a b | a -> b where
    type HasConfigurationManagerVersionThread a b :: *

    configurationManagerVersion
        :: Lens' a (TF.Attribute (HasConfigurationManagerVersionThread a b) b)

instance HasConfigurationManagerVersion a b => HasConfigurationManagerVersion (TF.Resource p a) b where
    type HasConfigurationManagerVersionThread (TF.Resource p a) b =
         HasConfigurationManagerVersionThread a b

    configurationManagerVersion = TF.configuration . configurationManagerVersion

class HasConfigurationSetName a b | a -> b where
    type HasConfigurationSetNameThread a b :: *

    configurationSetName
        :: Lens' a (TF.Attribute (HasConfigurationSetNameThread a b) b)

instance HasConfigurationSetName a b => HasConfigurationSetName (TF.Resource p a) b where
    type HasConfigurationSetNameThread (TF.Resource p a) b =
         HasConfigurationSetNameThread a b

    configurationSetName = TF.configuration . configurationSetName

class HasConfigurations a b | a -> b where
    type HasConfigurationsThread a b :: *

    configurations
        :: Lens' a (TF.Attribute (HasConfigurationsThread a b) b)

instance HasConfigurations a b => HasConfigurations (TF.Resource p a) b where
    type HasConfigurationsThread (TF.Resource p a) b =
         HasConfigurationsThread a b

    configurations = TF.configuration . configurations

class HasConfirmationTimeoutInMinutes a b | a -> b where
    type HasConfirmationTimeoutInMinutesThread a b :: *

    confirmationTimeoutInMinutes
        :: Lens' a (TF.Attribute (HasConfirmationTimeoutInMinutesThread a b) b)

instance HasConfirmationTimeoutInMinutes a b => HasConfirmationTimeoutInMinutes (TF.Resource p a) b where
    type HasConfirmationTimeoutInMinutesThread (TF.Resource p a) b =
         HasConfirmationTimeoutInMinutesThread a b

    confirmationTimeoutInMinutes = TF.configuration . confirmationTimeoutInMinutes

class HasConnectSettings a b | a -> b where
    type HasConnectSettingsThread a b :: *

    connectSettings
        :: Lens' a (TF.Attribute (HasConnectSettingsThread a b) b)

instance HasConnectSettings a b => HasConnectSettings (TF.Resource p a) b where
    type HasConnectSettingsThread (TF.Resource p a) b =
         HasConnectSettingsThread a b

    connectSettings = TF.configuration . connectSettings

class HasConnectionDraining a b | a -> b where
    type HasConnectionDrainingThread a b :: *

    connectionDraining
        :: Lens' a (TF.Attribute (HasConnectionDrainingThread a b) b)

instance HasConnectionDraining a b => HasConnectionDraining (TF.Resource p a) b where
    type HasConnectionDrainingThread (TF.Resource p a) b =
         HasConnectionDrainingThread a b

    connectionDraining = TF.configuration . connectionDraining

class HasConnectionDrainingTimeout a b | a -> b where
    type HasConnectionDrainingTimeoutThread a b :: *

    connectionDrainingTimeout
        :: Lens' a (TF.Attribute (HasConnectionDrainingTimeoutThread a b) b)

instance HasConnectionDrainingTimeout a b => HasConnectionDrainingTimeout (TF.Resource p a) b where
    type HasConnectionDrainingTimeoutThread (TF.Resource p a) b =
         HasConnectionDrainingTimeoutThread a b

    connectionDrainingTimeout = TF.configuration . connectionDrainingTimeout

class HasConnectionId a b | a -> b where
    type HasConnectionIdThread a b :: *

    connectionId
        :: Lens' a (TF.Attribute (HasConnectionIdThread a b) b)

instance HasConnectionId a b => HasConnectionId (TF.Resource p a) b where
    type HasConnectionIdThread (TF.Resource p a) b =
         HasConnectionIdThread a b

    connectionId = TF.configuration . connectionId

class HasConnectionsBandwidth a b | a -> b where
    type HasConnectionsBandwidthThread a b :: *

    connectionsBandwidth
        :: Lens' a (TF.Attribute (HasConnectionsBandwidthThread a b) b)

instance HasConnectionsBandwidth a b => HasConnectionsBandwidth (TF.Resource p a) b where
    type HasConnectionsBandwidthThread (TF.Resource p a) b =
         HasConnectionsBandwidthThread a b

    connectionsBandwidth = TF.configuration . connectionsBandwidth

class HasContainer a b | a -> b where
    type HasContainerThread a b :: *

    container
        :: Lens' a (TF.Attribute (HasContainerThread a b) b)

instance HasContainer a b => HasContainer (TF.Resource p a) b where
    type HasContainerThread (TF.Resource p a) b =
         HasContainerThread a b

    container = TF.configuration . container

class HasContainerDefinitions a b | a -> b where
    type HasContainerDefinitionsThread a b :: *

    containerDefinitions
        :: Lens' a (TF.Attribute (HasContainerDefinitionsThread a b) b)

instance HasContainerDefinitions a b => HasContainerDefinitions (TF.Resource p a) b where
    type HasContainerDefinitionsThread (TF.Resource p a) b =
         HasContainerDefinitionsThread a b

    containerDefinitions = TF.configuration . containerDefinitions

class HasContainerProperties a b | a -> b where
    type HasContainerPropertiesThread a b :: *

    containerProperties
        :: Lens' a (TF.Attribute (HasContainerPropertiesThread a b) b)

instance HasContainerProperties a b => HasContainerProperties (TF.Resource p a) b where
    type HasContainerPropertiesThread (TF.Resource p a) b =
         HasContainerPropertiesThread a b

    containerProperties = TF.configuration . containerProperties

class HasContent a b | a -> b where
    type HasContentThread a b :: *

    content
        :: Lens' a (TF.Attribute (HasContentThread a b) b)

instance HasContent a b => HasContent (TF.Resource p a) b where
    type HasContentThread (TF.Resource p a) b =
         HasContentThread a b

    content = TF.configuration . content

class HasContentBasedDeduplication a b | a -> b where
    type HasContentBasedDeduplicationThread a b :: *

    contentBasedDeduplication
        :: Lens' a (TF.Attribute (HasContentBasedDeduplicationThread a b) b)

instance HasContentBasedDeduplication a b => HasContentBasedDeduplication (TF.Resource p a) b where
    type HasContentBasedDeduplicationThread (TF.Resource p a) b =
         HasContentBasedDeduplicationThread a b

    contentBasedDeduplication = TF.configuration . contentBasedDeduplication

class HasContentConfig a b | a -> b where
    type HasContentConfigThread a b :: *

    contentConfig
        :: Lens' a (TF.Attribute (HasContentConfigThread a b) b)

instance HasContentConfig a b => HasContentConfig (TF.Resource p a) b where
    type HasContentConfigThread (TF.Resource p a) b =
         HasContentConfigThread a b

    contentConfig = TF.configuration . contentConfig

class HasContentConfigPermissions a b | a -> b where
    type HasContentConfigPermissionsThread a b :: *

    contentConfigPermissions
        :: Lens' a (TF.Attribute (HasContentConfigPermissionsThread a b) b)

instance HasContentConfigPermissions a b => HasContentConfigPermissions (TF.Resource p a) b where
    type HasContentConfigPermissionsThread (TF.Resource p a) b =
         HasContentConfigPermissionsThread a b

    contentConfigPermissions = TF.configuration . contentConfigPermissions

class HasContentDisposition a b | a -> b where
    type HasContentDispositionThread a b :: *

    contentDisposition
        :: Lens' a (TF.Attribute (HasContentDispositionThread a b) b)

instance HasContentDisposition a b => HasContentDisposition (TF.Resource p a) b where
    type HasContentDispositionThread (TF.Resource p a) b =
         HasContentDispositionThread a b

    contentDisposition = TF.configuration . contentDisposition

class HasContentEncoding a b | a -> b where
    type HasContentEncodingThread a b :: *

    contentEncoding
        :: Lens' a (TF.Attribute (HasContentEncodingThread a b) b)

instance HasContentEncoding a b => HasContentEncoding (TF.Resource p a) b where
    type HasContentEncodingThread (TF.Resource p a) b =
         HasContentEncodingThread a b

    contentEncoding = TF.configuration . contentEncoding

class HasContentHandling a b | a -> b where
    type HasContentHandlingThread a b :: *

    contentHandling
        :: Lens' a (TF.Attribute (HasContentHandlingThread a b) b)

instance HasContentHandling a b => HasContentHandling (TF.Resource p a) b where
    type HasContentHandlingThread (TF.Resource p a) b =
         HasContentHandlingThread a b

    contentHandling = TF.configuration . contentHandling

class HasContentLanguage a b | a -> b where
    type HasContentLanguageThread a b :: *

    contentLanguage
        :: Lens' a (TF.Attribute (HasContentLanguageThread a b) b)

instance HasContentLanguage a b => HasContentLanguage (TF.Resource p a) b where
    type HasContentLanguageThread (TF.Resource p a) b =
         HasContentLanguageThread a b

    contentLanguage = TF.configuration . contentLanguage

class HasContentType a b | a -> b where
    type HasContentTypeThread a b :: *

    contentType
        :: Lens' a (TF.Attribute (HasContentTypeThread a b) b)

instance HasContentType a b => HasContentType (TF.Resource p a) b where
    type HasContentTypeThread (TF.Resource p a) b =
         HasContentTypeThread a b

    contentType = TF.configuration . contentType

class HasCookieExpirationPeriod a b | a -> b where
    type HasCookieExpirationPeriodThread a b :: *

    cookieExpirationPeriod
        :: Lens' a (TF.Attribute (HasCookieExpirationPeriodThread a b) b)

instance HasCookieExpirationPeriod a b => HasCookieExpirationPeriod (TF.Resource p a) b where
    type HasCookieExpirationPeriodThread (TF.Resource p a) b =
         HasCookieExpirationPeriodThread a b

    cookieExpirationPeriod = TF.configuration . cookieExpirationPeriod

class HasCookieName a b | a -> b where
    type HasCookieNameThread a b :: *

    cookieName
        :: Lens' a (TF.Attribute (HasCookieNameThread a b) b)

instance HasCookieName a b => HasCookieName (TF.Resource p a) b where
    type HasCookieNameThread (TF.Resource p a) b =
         HasCookieNameThread a b

    cookieName = TF.configuration . cookieName

class HasCopyTagsToSnapshot a b | a -> b where
    type HasCopyTagsToSnapshotThread a b :: *

    copyTagsToSnapshot
        :: Lens' a (TF.Attribute (HasCopyTagsToSnapshotThread a b) b)

instance HasCopyTagsToSnapshot a b => HasCopyTagsToSnapshot (TF.Resource p a) b where
    type HasCopyTagsToSnapshotThread (TF.Resource p a) b =
         HasCopyTagsToSnapshotThread a b

    copyTagsToSnapshot = TF.configuration . copyTagsToSnapshot

class HasCoreInstanceCount a b | a -> b where
    type HasCoreInstanceCountThread a b :: *

    coreInstanceCount
        :: Lens' a (TF.Attribute (HasCoreInstanceCountThread a b) b)

instance HasCoreInstanceCount a b => HasCoreInstanceCount (TF.Resource p a) b where
    type HasCoreInstanceCountThread (TF.Resource p a) b =
         HasCoreInstanceCountThread a b

    coreInstanceCount = TF.configuration . coreInstanceCount

class HasCoreInstanceType a b | a -> b where
    type HasCoreInstanceTypeThread a b :: *

    coreInstanceType
        :: Lens' a (TF.Attribute (HasCoreInstanceTypeThread a b) b)

instance HasCoreInstanceType a b => HasCoreInstanceType (TF.Resource p a) b where
    type HasCoreInstanceTypeThread (TF.Resource p a) b =
         HasCoreInstanceTypeThread a b

    coreInstanceType = TF.configuration . coreInstanceType

class HasCorsRule a b | a -> b where
    type HasCorsRuleThread a b :: *

    corsRule
        :: Lens' a (TF.Attribute (HasCorsRuleThread a b) b)

instance HasCorsRule a b => HasCorsRule (TF.Resource p a) b where
    type HasCorsRuleThread (TF.Resource p a) b =
         HasCorsRuleThread a b

    corsRule = TF.configuration . corsRule

class HasCreationToken a b | a -> b where
    type HasCreationTokenThread a b :: *

    creationToken
        :: Lens' a (TF.Attribute (HasCreationTokenThread a b) b)

instance HasCreationToken a b => HasCreationToken (TF.Resource p a) b where
    type HasCreationTokenThread (TF.Resource p a) b =
         HasCreationTokenThread a b

    creationToken = TF.configuration . creationToken

class HasCredentials a b | a -> b where
    type HasCredentialsThread a b :: *

    credentials
        :: Lens' a (TF.Attribute (HasCredentialsThread a b) b)

instance HasCredentials a b => HasCredentials (TF.Resource p a) b where
    type HasCredentialsThread (TF.Resource p a) b =
         HasCredentialsThread a b

    credentials = TF.configuration . credentials

class HasCrossZoneLoadBalancing a b | a -> b where
    type HasCrossZoneLoadBalancingThread a b :: *

    crossZoneLoadBalancing
        :: Lens' a (TF.Attribute (HasCrossZoneLoadBalancingThread a b) b)

instance HasCrossZoneLoadBalancing a b => HasCrossZoneLoadBalancing (TF.Resource p a) b where
    type HasCrossZoneLoadBalancingThread (TF.Resource p a) b =
         HasCrossZoneLoadBalancingThread a b

    crossZoneLoadBalancing = TF.configuration . crossZoneLoadBalancing

class HasCsr a b | a -> b where
    type HasCsrThread a b :: *

    csr
        :: Lens' a (TF.Attribute (HasCsrThread a b) b)

instance HasCsr a b => HasCsr (TF.Resource p a) b where
    type HasCsrThread (TF.Resource p a) b =
         HasCsrThread a b

    csr = TF.configuration . csr

class HasCustomCookbooksSource a b | a -> b where
    type HasCustomCookbooksSourceThread a b :: *

    customCookbooksSource
        :: Lens' a (TF.Attribute (HasCustomCookbooksSourceThread a b) b)

instance HasCustomCookbooksSource a b => HasCustomCookbooksSource (TF.Resource p a) b where
    type HasCustomCookbooksSourceThread (TF.Resource p a) b =
         HasCustomCookbooksSourceThread a b

    customCookbooksSource = TF.configuration . customCookbooksSource

class HasCustomData a b | a -> b where
    type HasCustomDataThread a b :: *

    customData
        :: Lens' a (TF.Attribute (HasCustomDataThread a b) b)

instance HasCustomData a b => HasCustomData (TF.Resource p a) b where
    type HasCustomDataThread (TF.Resource p a) b =
         HasCustomDataThread a b

    customData = TF.configuration . customData

class HasCustomErrorResponse a b | a -> b where
    type HasCustomErrorResponseThread a b :: *

    customErrorResponse
        :: Lens' a (TF.Attribute (HasCustomErrorResponseThread a b) b)

instance HasCustomErrorResponse a b => HasCustomErrorResponse (TF.Resource p a) b where
    type HasCustomErrorResponseThread (TF.Resource p a) b =
         HasCustomErrorResponseThread a b

    customErrorResponse = TF.configuration . customErrorResponse

class HasCustomInstanceProfileArn a b | a -> b where
    type HasCustomInstanceProfileArnThread a b :: *

    customInstanceProfileArn
        :: Lens' a (TF.Attribute (HasCustomInstanceProfileArnThread a b) b)

instance HasCustomInstanceProfileArn a b => HasCustomInstanceProfileArn (TF.Resource p a) b where
    type HasCustomInstanceProfileArnThread (TF.Resource p a) b =
         HasCustomInstanceProfileArnThread a b

    customInstanceProfileArn = TF.configuration . customInstanceProfileArn

class HasCustomJson a b | a -> b where
    type HasCustomJsonThread a b :: *

    customJson
        :: Lens' a (TF.Attribute (HasCustomJsonThread a b) b)

instance HasCustomJson a b => HasCustomJson (TF.Resource p a) b where
    type HasCustomJsonThread (TF.Resource p a) b =
         HasCustomJsonThread a b

    customJson = TF.configuration . customJson

class HasCustomSecurityGroupIds a b | a -> b where
    type HasCustomSecurityGroupIdsThread a b :: *

    customSecurityGroupIds
        :: Lens' a (TF.Attribute (HasCustomSecurityGroupIdsThread a b) b)

instance HasCustomSecurityGroupIds a b => HasCustomSecurityGroupIds (TF.Resource p a) b where
    type HasCustomSecurityGroupIdsThread (TF.Resource p a) b =
         HasCustomSecurityGroupIdsThread a b

    customSecurityGroupIds = TF.configuration . customSecurityGroupIds

class HasCustomerGatewayId a b | a -> b where
    type HasCustomerGatewayIdThread a b :: *

    customerGatewayId
        :: Lens' a (TF.Attribute (HasCustomerGatewayIdThread a b) b)

instance HasCustomerGatewayId a b => HasCustomerGatewayId (TF.Resource p a) b where
    type HasCustomerGatewayIdThread (TF.Resource p a) b =
         HasCustomerGatewayIdThread a b

    customerGatewayId = TF.configuration . customerGatewayId

class HasCutoff a b | a -> b where
    type HasCutoffThread a b :: *

    cutoff
        :: Lens' a (TF.Attribute (HasCutoffThread a b) b)

instance HasCutoff a b => HasCutoff (TF.Resource p a) b where
    type HasCutoffThread (TF.Resource p a) b =
         HasCutoffThread a b

    cutoff = TF.configuration . cutoff

class HasDashboardBody a b | a -> b where
    type HasDashboardBodyThread a b :: *

    dashboardBody
        :: Lens' a (TF.Attribute (HasDashboardBodyThread a b) b)

instance HasDashboardBody a b => HasDashboardBody (TF.Resource p a) b where
    type HasDashboardBodyThread (TF.Resource p a) b =
         HasDashboardBodyThread a b

    dashboardBody = TF.configuration . dashboardBody

class HasDashboardName a b | a -> b where
    type HasDashboardNameThread a b :: *

    dashboardName
        :: Lens' a (TF.Attribute (HasDashboardNameThread a b) b)

instance HasDashboardName a b => HasDashboardName (TF.Resource p a) b where
    type HasDashboardNameThread (TF.Resource p a) b =
         HasDashboardNameThread a b

    dashboardName = TF.configuration . dashboardName

class HasData' a b | a -> b where
    type HasData'Thread a b :: *

    data'
        :: Lens' a (TF.Attribute (HasData'Thread a b) b)

instance HasData' a b => HasData' (TF.Resource p a) b where
    type HasData'Thread (TF.Resource p a) b =
         HasData'Thread a b

    data' = TF.configuration . data'

class HasDataSourceArn a b | a -> b where
    type HasDataSourceArnThread a b :: *

    dataSourceArn
        :: Lens' a (TF.Attribute (HasDataSourceArnThread a b) b)

instance HasDataSourceArn a b => HasDataSourceArn (TF.Resource p a) b where
    type HasDataSourceArnThread (TF.Resource p a) b =
         HasDataSourceArnThread a b

    dataSourceArn = TF.configuration . dataSourceArn

class HasDataSourceDatabaseName a b | a -> b where
    type HasDataSourceDatabaseNameThread a b :: *

    dataSourceDatabaseName
        :: Lens' a (TF.Attribute (HasDataSourceDatabaseNameThread a b) b)

instance HasDataSourceDatabaseName a b => HasDataSourceDatabaseName (TF.Resource p a) b where
    type HasDataSourceDatabaseNameThread (TF.Resource p a) b =
         HasDataSourceDatabaseNameThread a b

    dataSourceDatabaseName = TF.configuration . dataSourceDatabaseName

class HasDataSourceType a b | a -> b where
    type HasDataSourceTypeThread a b :: *

    dataSourceType
        :: Lens' a (TF.Attribute (HasDataSourceTypeThread a b) b)

instance HasDataSourceType a b => HasDataSourceType (TF.Resource p a) b where
    type HasDataSourceTypeThread (TF.Resource p a) b =
         HasDataSourceTypeThread a b

    dataSourceType = TF.configuration . dataSourceType

class HasDatabase a b | a -> b where
    type HasDatabaseThread a b :: *

    database
        :: Lens' a (TF.Attribute (HasDatabaseThread a b) b)

instance HasDatabase a b => HasDatabase (TF.Resource p a) b where
    type HasDatabaseThread (TF.Resource p a) b =
         HasDatabaseThread a b

    database = TF.configuration . database

class HasDatabaseName a b | a -> b where
    type HasDatabaseNameThread a b :: *

    databaseName
        :: Lens' a (TF.Attribute (HasDatabaseNameThread a b) b)

instance HasDatabaseName a b => HasDatabaseName (TF.Resource p a) b where
    type HasDatabaseNameThread (TF.Resource p a) b =
         HasDatabaseNameThread a b

    databaseName = TF.configuration . databaseName

class HasDatapointsToAlarm a b | a -> b where
    type HasDatapointsToAlarmThread a b :: *

    datapointsToAlarm
        :: Lens' a (TF.Attribute (HasDatapointsToAlarmThread a b) b)

instance HasDatapointsToAlarm a b => HasDatapointsToAlarm (TF.Resource p a) b where
    type HasDatapointsToAlarmThread (TF.Resource p a) b =
         HasDatapointsToAlarmThread a b

    datapointsToAlarm = TF.configuration . datapointsToAlarm

class HasDbClusterParameterGroupName a b | a -> b where
    type HasDbClusterParameterGroupNameThread a b :: *

    dbClusterParameterGroupName
        :: Lens' a (TF.Attribute (HasDbClusterParameterGroupNameThread a b) b)

instance HasDbClusterParameterGroupName a b => HasDbClusterParameterGroupName (TF.Resource p a) b where
    type HasDbClusterParameterGroupNameThread (TF.Resource p a) b =
         HasDbClusterParameterGroupNameThread a b

    dbClusterParameterGroupName = TF.configuration . dbClusterParameterGroupName

class HasDbInstanceIdentifier a b | a -> b where
    type HasDbInstanceIdentifierThread a b :: *

    dbInstanceIdentifier
        :: Lens' a (TF.Attribute (HasDbInstanceIdentifierThread a b) b)

instance HasDbInstanceIdentifier a b => HasDbInstanceIdentifier (TF.Resource p a) b where
    type HasDbInstanceIdentifierThread (TF.Resource p a) b =
         HasDbInstanceIdentifierThread a b

    dbInstanceIdentifier = TF.configuration . dbInstanceIdentifier

class HasDbParameterGroupName a b | a -> b where
    type HasDbParameterGroupNameThread a b :: *

    dbParameterGroupName
        :: Lens' a (TF.Attribute (HasDbParameterGroupNameThread a b) b)

instance HasDbParameterGroupName a b => HasDbParameterGroupName (TF.Resource p a) b where
    type HasDbParameterGroupNameThread (TF.Resource p a) b =
         HasDbParameterGroupNameThread a b

    dbParameterGroupName = TF.configuration . dbParameterGroupName

class HasDbPassword a b | a -> b where
    type HasDbPasswordThread a b :: *

    dbPassword
        :: Lens' a (TF.Attribute (HasDbPasswordThread a b) b)

instance HasDbPassword a b => HasDbPassword (TF.Resource p a) b where
    type HasDbPasswordThread (TF.Resource p a) b =
         HasDbPasswordThread a b

    dbPassword = TF.configuration . dbPassword

class HasDbSnapshotIdentifier a b | a -> b where
    type HasDbSnapshotIdentifierThread a b :: *

    dbSnapshotIdentifier
        :: Lens' a (TF.Attribute (HasDbSnapshotIdentifierThread a b) b)

instance HasDbSnapshotIdentifier a b => HasDbSnapshotIdentifier (TF.Resource p a) b where
    type HasDbSnapshotIdentifierThread (TF.Resource p a) b =
         HasDbSnapshotIdentifierThread a b

    dbSnapshotIdentifier = TF.configuration . dbSnapshotIdentifier

class HasDbSubnetGroupName a b | a -> b where
    type HasDbSubnetGroupNameThread a b :: *

    dbSubnetGroupName
        :: Lens' a (TF.Attribute (HasDbSubnetGroupNameThread a b) b)

instance HasDbSubnetGroupName a b => HasDbSubnetGroupName (TF.Resource p a) b where
    type HasDbSubnetGroupNameThread (TF.Resource p a) b =
         HasDbSubnetGroupNameThread a b

    dbSubnetGroupName = TF.configuration . dbSubnetGroupName

class HasDbUser a b | a -> b where
    type HasDbUserThread a b :: *

    dbUser
        :: Lens' a (TF.Attribute (HasDbUserThread a b) b)

instance HasDbUser a b => HasDbUser (TF.Resource p a) b where
    type HasDbUserThread (TF.Resource p a) b =
         HasDbUserThread a b

    dbUser = TF.configuration . dbUser

class HasDeadLetterConfig a b | a -> b where
    type HasDeadLetterConfigThread a b :: *

    deadLetterConfig
        :: Lens' a (TF.Attribute (HasDeadLetterConfigThread a b) b)

instance HasDeadLetterConfig a b => HasDeadLetterConfig (TF.Resource p a) b where
    type HasDeadLetterConfigThread (TF.Resource p a) b =
         HasDeadLetterConfigThread a b

    deadLetterConfig = TF.configuration . deadLetterConfig

class HasDefaultAction a b | a -> b where
    type HasDefaultActionThread a b :: *

    defaultAction
        :: Lens' a (TF.Attribute (HasDefaultActionThread a b) b)

instance HasDefaultAction a b => HasDefaultAction (TF.Resource p a) b where
    type HasDefaultActionThread (TF.Resource p a) b =
         HasDefaultActionThread a b

    defaultAction = TF.configuration . defaultAction

class HasDefaultAvailabilityZone a b | a -> b where
    type HasDefaultAvailabilityZoneThread a b :: *

    defaultAvailabilityZone
        :: Lens' a (TF.Attribute (HasDefaultAvailabilityZoneThread a b) b)

instance HasDefaultAvailabilityZone a b => HasDefaultAvailabilityZone (TF.Resource p a) b where
    type HasDefaultAvailabilityZoneThread (TF.Resource p a) b =
         HasDefaultAvailabilityZoneThread a b

    defaultAvailabilityZone = TF.configuration . defaultAvailabilityZone

class HasDefaultBranch a b | a -> b where
    type HasDefaultBranchThread a b :: *

    defaultBranch
        :: Lens' a (TF.Attribute (HasDefaultBranchThread a b) b)

instance HasDefaultBranch a b => HasDefaultBranch (TF.Resource p a) b where
    type HasDefaultBranchThread (TF.Resource p a) b =
         HasDefaultBranchThread a b

    defaultBranch = TF.configuration . defaultBranch

class HasDefaultCacheBehavior a b | a -> b where
    type HasDefaultCacheBehaviorThread a b :: *

    defaultCacheBehavior
        :: Lens' a (TF.Attribute (HasDefaultCacheBehaviorThread a b) b)

instance HasDefaultCacheBehavior a b => HasDefaultCacheBehavior (TF.Resource p a) b where
    type HasDefaultCacheBehaviorThread (TF.Resource p a) b =
         HasDefaultCacheBehaviorThread a b

    defaultCacheBehavior = TF.configuration . defaultCacheBehavior

class HasDefaultCooldown a b | a -> b where
    type HasDefaultCooldownThread a b :: *

    defaultCooldown
        :: Lens' a (TF.Attribute (HasDefaultCooldownThread a b) b)

instance HasDefaultCooldown a b => HasDefaultCooldown (TF.Resource p a) b where
    type HasDefaultCooldownThread (TF.Resource p a) b =
         HasDefaultCooldownThread a b

    defaultCooldown = TF.configuration . defaultCooldown

class HasDefaultInstanceProfileArn a b | a -> b where
    type HasDefaultInstanceProfileArnThread a b :: *

    defaultInstanceProfileArn
        :: Lens' a (TF.Attribute (HasDefaultInstanceProfileArnThread a b) b)

instance HasDefaultInstanceProfileArn a b => HasDefaultInstanceProfileArn (TF.Resource p a) b where
    type HasDefaultInstanceProfileArnThread (TF.Resource p a) b =
         HasDefaultInstanceProfileArnThread a b

    defaultInstanceProfileArn = TF.configuration . defaultInstanceProfileArn

class HasDefaultNetworkAclId a b | a -> b where
    type HasDefaultNetworkAclIdThread a b :: *

    defaultNetworkAclId
        :: Lens' a (TF.Attribute (HasDefaultNetworkAclIdThread a b) b)

instance HasDefaultNetworkAclId a b => HasDefaultNetworkAclId (TF.Resource p a) b where
    type HasDefaultNetworkAclIdThread (TF.Resource p a) b =
         HasDefaultNetworkAclIdThread a b

    defaultNetworkAclId = TF.configuration . defaultNetworkAclId

class HasDefaultOs a b | a -> b where
    type HasDefaultOsThread a b :: *

    defaultOs
        :: Lens' a (TF.Attribute (HasDefaultOsThread a b) b)

instance HasDefaultOs a b => HasDefaultOs (TF.Resource p a) b where
    type HasDefaultOsThread (TF.Resource p a) b =
         HasDefaultOsThread a b

    defaultOs = TF.configuration . defaultOs

class HasDefaultRedirectUri a b | a -> b where
    type HasDefaultRedirectUriThread a b :: *

    defaultRedirectUri
        :: Lens' a (TF.Attribute (HasDefaultRedirectUriThread a b) b)

instance HasDefaultRedirectUri a b => HasDefaultRedirectUri (TF.Resource p a) b where
    type HasDefaultRedirectUriThread (TF.Resource p a) b =
         HasDefaultRedirectUriThread a b

    defaultRedirectUri = TF.configuration . defaultRedirectUri

class HasDefaultResult a b | a -> b where
    type HasDefaultResultThread a b :: *

    defaultResult
        :: Lens' a (TF.Attribute (HasDefaultResultThread a b) b)

instance HasDefaultResult a b => HasDefaultResult (TF.Resource p a) b where
    type HasDefaultResultThread (TF.Resource p a) b =
         HasDefaultResultThread a b

    defaultResult = TF.configuration . defaultResult

class HasDefaultRootDeviceType a b | a -> b where
    type HasDefaultRootDeviceTypeThread a b :: *

    defaultRootDeviceType
        :: Lens' a (TF.Attribute (HasDefaultRootDeviceTypeThread a b) b)

instance HasDefaultRootDeviceType a b => HasDefaultRootDeviceType (TF.Resource p a) b where
    type HasDefaultRootDeviceTypeThread (TF.Resource p a) b =
         HasDefaultRootDeviceTypeThread a b

    defaultRootDeviceType = TF.configuration . defaultRootDeviceType

class HasDefaultRootObject a b | a -> b where
    type HasDefaultRootObjectThread a b :: *

    defaultRootObject
        :: Lens' a (TF.Attribute (HasDefaultRootObjectThread a b) b)

instance HasDefaultRootObject a b => HasDefaultRootObject (TF.Resource p a) b where
    type HasDefaultRootObjectThread (TF.Resource p a) b =
         HasDefaultRootObjectThread a b

    defaultRootObject = TF.configuration . defaultRootObject

class HasDefaultRouteTableId a b | a -> b where
    type HasDefaultRouteTableIdThread a b :: *

    defaultRouteTableId
        :: Lens' a (TF.Attribute (HasDefaultRouteTableIdThread a b) b)

instance HasDefaultRouteTableId a b => HasDefaultRouteTableId (TF.Resource p a) b where
    type HasDefaultRouteTableIdThread (TF.Resource p a) b =
         HasDefaultRouteTableIdThread a b

    defaultRouteTableId = TF.configuration . defaultRouteTableId

class HasDefaultSshKeyName a b | a -> b where
    type HasDefaultSshKeyNameThread a b :: *

    defaultSshKeyName
        :: Lens' a (TF.Attribute (HasDefaultSshKeyNameThread a b) b)

instance HasDefaultSshKeyName a b => HasDefaultSshKeyName (TF.Resource p a) b where
    type HasDefaultSshKeyNameThread (TF.Resource p a) b =
         HasDefaultSshKeyNameThread a b

    defaultSshKeyName = TF.configuration . defaultSshKeyName

class HasDefaultSubnetId a b | a -> b where
    type HasDefaultSubnetIdThread a b :: *

    defaultSubnetId
        :: Lens' a (TF.Attribute (HasDefaultSubnetIdThread a b) b)

instance HasDefaultSubnetId a b => HasDefaultSubnetId (TF.Resource p a) b where
    type HasDefaultSubnetIdThread (TF.Resource p a) b =
         HasDefaultSubnetIdThread a b

    defaultSubnetId = TF.configuration . defaultSubnetId

class HasDefinition a b | a -> b where
    type HasDefinitionThread a b :: *

    definition
        :: Lens' a (TF.Attribute (HasDefinitionThread a b) b)

instance HasDefinition a b => HasDefinition (TF.Resource p a) b where
    type HasDefinitionThread (TF.Resource p a) b =
         HasDefinitionThread a b

    definition = TF.configuration . definition

class HasDelaySeconds a b | a -> b where
    type HasDelaySecondsThread a b :: *

    delaySeconds
        :: Lens' a (TF.Attribute (HasDelaySecondsThread a b) b)

instance HasDelaySeconds a b => HasDelaySeconds (TF.Resource p a) b where
    type HasDelaySecondsThread (TF.Resource p a) b =
         HasDelaySecondsThread a b

    delaySeconds = TF.configuration . delaySeconds

class HasDelegationSetId a b | a -> b where
    type HasDelegationSetIdThread a b :: *

    delegationSetId
        :: Lens' a (TF.Attribute (HasDelegationSetIdThread a b) b)

instance HasDelegationSetId a b => HasDelegationSetId (TF.Resource p a) b where
    type HasDelegationSetIdThread (TF.Resource p a) b =
         HasDelegationSetIdThread a b

    delegationSetId = TF.configuration . delegationSetId

class HasDeletionWindowInDays a b | a -> b where
    type HasDeletionWindowInDaysThread a b :: *

    deletionWindowInDays
        :: Lens' a (TF.Attribute (HasDeletionWindowInDaysThread a b) b)

instance HasDeletionWindowInDays a b => HasDeletionWindowInDays (TF.Resource p a) b where
    type HasDeletionWindowInDaysThread (TF.Resource p a) b =
         HasDeletionWindowInDaysThread a b

    deletionWindowInDays = TF.configuration . deletionWindowInDays

class HasDeliveryPolicy a b | a -> b where
    type HasDeliveryPolicyThread a b :: *

    deliveryPolicy
        :: Lens' a (TF.Attribute (HasDeliveryPolicyThread a b) b)

instance HasDeliveryPolicy a b => HasDeliveryPolicy (TF.Resource p a) b where
    type HasDeliveryPolicyThread (TF.Resource p a) b =
         HasDeliveryPolicyThread a b

    deliveryPolicy = TF.configuration . deliveryPolicy

class HasDeploymentConfigName a b | a -> b where
    type HasDeploymentConfigNameThread a b :: *

    deploymentConfigName
        :: Lens' a (TF.Attribute (HasDeploymentConfigNameThread a b) b)

instance HasDeploymentConfigName a b => HasDeploymentConfigName (TF.Resource p a) b where
    type HasDeploymentConfigNameThread (TF.Resource p a) b =
         HasDeploymentConfigNameThread a b

    deploymentConfigName = TF.configuration . deploymentConfigName

class HasDeploymentGroupName a b | a -> b where
    type HasDeploymentGroupNameThread a b :: *

    deploymentGroupName
        :: Lens' a (TF.Attribute (HasDeploymentGroupNameThread a b) b)

instance HasDeploymentGroupName a b => HasDeploymentGroupName (TF.Resource p a) b where
    type HasDeploymentGroupNameThread (TF.Resource p a) b =
         HasDeploymentGroupNameThread a b

    deploymentGroupName = TF.configuration . deploymentGroupName

class HasDeploymentId a b | a -> b where
    type HasDeploymentIdThread a b :: *

    deploymentId
        :: Lens' a (TF.Attribute (HasDeploymentIdThread a b) b)

instance HasDeploymentId a b => HasDeploymentId (TF.Resource p a) b where
    type HasDeploymentIdThread (TF.Resource p a) b =
         HasDeploymentIdThread a b

    deploymentId = TF.configuration . deploymentId

class HasDeploymentMaximumPercent a b | a -> b where
    type HasDeploymentMaximumPercentThread a b :: *

    deploymentMaximumPercent
        :: Lens' a (TF.Attribute (HasDeploymentMaximumPercentThread a b) b)

instance HasDeploymentMaximumPercent a b => HasDeploymentMaximumPercent (TF.Resource p a) b where
    type HasDeploymentMaximumPercentThread (TF.Resource p a) b =
         HasDeploymentMaximumPercentThread a b

    deploymentMaximumPercent = TF.configuration . deploymentMaximumPercent

class HasDeploymentMinimumHealthyPercent a b | a -> b where
    type HasDeploymentMinimumHealthyPercentThread a b :: *

    deploymentMinimumHealthyPercent
        :: Lens' a (TF.Attribute (HasDeploymentMinimumHealthyPercentThread a b) b)

instance HasDeploymentMinimumHealthyPercent a b => HasDeploymentMinimumHealthyPercent (TF.Resource p a) b where
    type HasDeploymentMinimumHealthyPercentThread (TF.Resource p a) b =
         HasDeploymentMinimumHealthyPercentThread a b

    deploymentMinimumHealthyPercent = TF.configuration . deploymentMinimumHealthyPercent

class HasDeploymentMode a b | a -> b where
    type HasDeploymentModeThread a b :: *

    deploymentMode
        :: Lens' a (TF.Attribute (HasDeploymentModeThread a b) b)

instance HasDeploymentMode a b => HasDeploymentMode (TF.Resource p a) b where
    type HasDeploymentModeThread (TF.Resource p a) b =
         HasDeploymentModeThread a b

    deploymentMode = TF.configuration . deploymentMode

class HasDeploymentStyle a b | a -> b where
    type HasDeploymentStyleThread a b :: *

    deploymentStyle
        :: Lens' a (TF.Attribute (HasDeploymentStyleThread a b) b)

instance HasDeploymentStyle a b => HasDeploymentStyle (TF.Resource p a) b where
    type HasDeploymentStyleThread (TF.Resource p a) b =
         HasDeploymentStyleThread a b

    deploymentStyle = TF.configuration . deploymentStyle

class HasDeregistrationDelay a b | a -> b where
    type HasDeregistrationDelayThread a b :: *

    deregistrationDelay
        :: Lens' a (TF.Attribute (HasDeregistrationDelayThread a b) b)

instance HasDeregistrationDelay a b => HasDeregistrationDelay (TF.Resource p a) b where
    type HasDeregistrationDelayThread (TF.Resource p a) b =
         HasDeregistrationDelayThread a b

    deregistrationDelay = TF.configuration . deregistrationDelay

class HasDescription a b | a -> b where
    type HasDescriptionThread a b :: *

    description
        :: Lens' a (TF.Attribute (HasDescriptionThread a b) b)

instance HasDescription a b => HasDescription (TF.Resource p a) b where
    type HasDescriptionThread (TF.Resource p a) b =
         HasDescriptionThread a b

    description = TF.configuration . description

class HasDesiredCapacity a b | a -> b where
    type HasDesiredCapacityThread a b :: *

    desiredCapacity
        :: Lens' a (TF.Attribute (HasDesiredCapacityThread a b) b)

instance HasDesiredCapacity a b => HasDesiredCapacity (TF.Resource p a) b where
    type HasDesiredCapacityThread (TF.Resource p a) b =
         HasDesiredCapacityThread a b

    desiredCapacity = TF.configuration . desiredCapacity

class HasDesiredCount a b | a -> b where
    type HasDesiredCountThread a b :: *

    desiredCount
        :: Lens' a (TF.Attribute (HasDesiredCountThread a b) b)

instance HasDesiredCount a b => HasDesiredCount (TF.Resource p a) b where
    type HasDesiredCountThread (TF.Resource p a) b =
         HasDesiredCountThread a b

    desiredCount = TF.configuration . desiredCount

class HasDestination a b | a -> b where
    type HasDestinationThread a b :: *

    destination
        :: Lens' a (TF.Attribute (HasDestinationThread a b) b)

instance HasDestination a b => HasDestination (TF.Resource p a) b where
    type HasDestinationThread (TF.Resource p a) b =
         HasDestinationThread a b

    destination = TF.configuration . destination

class HasDestinationArn a b | a -> b where
    type HasDestinationArnThread a b :: *

    destinationArn
        :: Lens' a (TF.Attribute (HasDestinationArnThread a b) b)

instance HasDestinationArn a b => HasDestinationArn (TF.Resource p a) b where
    type HasDestinationArnThread (TF.Resource p a) b =
         HasDestinationArnThread a b

    destinationArn = TF.configuration . destinationArn

class HasDestinationCidrBlock a b | a -> b where
    type HasDestinationCidrBlockThread a b :: *

    destinationCidrBlock
        :: Lens' a (TF.Attribute (HasDestinationCidrBlockThread a b) b)

instance HasDestinationCidrBlock a b => HasDestinationCidrBlock (TF.Resource p a) b where
    type HasDestinationCidrBlockThread (TF.Resource p a) b =
         HasDestinationCidrBlockThread a b

    destinationCidrBlock = TF.configuration . destinationCidrBlock

class HasDestinationIpv6CidrBlock a b | a -> b where
    type HasDestinationIpv6CidrBlockThread a b :: *

    destinationIpv6CidrBlock
        :: Lens' a (TF.Attribute (HasDestinationIpv6CidrBlockThread a b) b)

instance HasDestinationIpv6CidrBlock a b => HasDestinationIpv6CidrBlock (TF.Resource p a) b where
    type HasDestinationIpv6CidrBlockThread (TF.Resource p a) b =
         HasDestinationIpv6CidrBlockThread a b

    destinationIpv6CidrBlock = TF.configuration . destinationIpv6CidrBlock

class HasDestinationName a b | a -> b where
    type HasDestinationNameThread a b :: *

    destinationName
        :: Lens' a (TF.Attribute (HasDestinationNameThread a b) b)

instance HasDestinationName a b => HasDestinationName (TF.Resource p a) b where
    type HasDestinationNameThread (TF.Resource p a) b =
         HasDestinationNameThread a b

    destinationName = TF.configuration . destinationName

class HasDetectorId a b | a -> b where
    type HasDetectorIdThread a b :: *

    detectorId
        :: Lens' a (TF.Attribute (HasDetectorIdThread a b) b)

instance HasDetectorId a b => HasDetectorId (TF.Resource p a) b where
    type HasDetectorIdThread (TF.Resource p a) b =
         HasDetectorIdThread a b

    detectorId = TF.configuration . detectorId

class HasDeveloperProviderName a b | a -> b where
    type HasDeveloperProviderNameThread a b :: *

    developerProviderName
        :: Lens' a (TF.Attribute (HasDeveloperProviderNameThread a b) b)

instance HasDeveloperProviderName a b => HasDeveloperProviderName (TF.Resource p a) b where
    type HasDeveloperProviderNameThread (TF.Resource p a) b =
         HasDeveloperProviderNameThread a b

    developerProviderName = TF.configuration . developerProviderName

class HasDeviceConfiguration a b | a -> b where
    type HasDeviceConfigurationThread a b :: *

    deviceConfiguration
        :: Lens' a (TF.Attribute (HasDeviceConfigurationThread a b) b)

instance HasDeviceConfiguration a b => HasDeviceConfiguration (TF.Resource p a) b where
    type HasDeviceConfigurationThread (TF.Resource p a) b =
         HasDeviceConfigurationThread a b

    deviceConfiguration = TF.configuration . deviceConfiguration

class HasDeviceIndex a b | a -> b where
    type HasDeviceIndexThread a b :: *

    deviceIndex
        :: Lens' a (TF.Attribute (HasDeviceIndexThread a b) b)

instance HasDeviceIndex a b => HasDeviceIndex (TF.Resource p a) b where
    type HasDeviceIndexThread (TF.Resource p a) b =
         HasDeviceIndexThread a b

    deviceIndex = TF.configuration . deviceIndex

class HasDeviceName a b | a -> b where
    type HasDeviceNameThread a b :: *

    deviceName
        :: Lens' a (TF.Attribute (HasDeviceNameThread a b) b)

instance HasDeviceName a b => HasDeviceName (TF.Resource p a) b where
    type HasDeviceNameThread (TF.Resource p a) b =
         HasDeviceNameThread a b

    deviceName = TF.configuration . deviceName

class HasDhcpOptionsId a b | a -> b where
    type HasDhcpOptionsIdThread a b :: *

    dhcpOptionsId
        :: Lens' a (TF.Attribute (HasDhcpOptionsIdThread a b) b)

instance HasDhcpOptionsId a b => HasDhcpOptionsId (TF.Resource p a) b where
    type HasDhcpOptionsIdThread (TF.Resource p a) b =
         HasDhcpOptionsIdThread a b

    dhcpOptionsId = TF.configuration . dhcpOptionsId

class HasDimensions a b | a -> b where
    type HasDimensionsThread a b :: *

    dimensions
        :: Lens' a (TF.Attribute (HasDimensionsThread a b) b)

instance HasDimensions a b => HasDimensions (TF.Resource p a) b where
    type HasDimensionsThread (TF.Resource p a) b =
         HasDimensionsThread a b

    dimensions = TF.configuration . dimensions

class HasDisableApiTermination a b | a -> b where
    type HasDisableApiTerminationThread a b :: *

    disableApiTermination
        :: Lens' a (TF.Attribute (HasDisableApiTerminationThread a b) b)

instance HasDisableApiTermination a b => HasDisableApiTermination (TF.Resource p a) b where
    type HasDisableApiTerminationThread (TF.Resource p a) b =
         HasDisableApiTerminationThread a b

    disableApiTermination = TF.configuration . disableApiTermination

class HasDisableRollback a b | a -> b where
    type HasDisableRollbackThread a b :: *

    disableRollback
        :: Lens' a (TF.Attribute (HasDisableRollbackThread a b) b)

instance HasDisableRollback a b => HasDisableRollback (TF.Resource p a) b where
    type HasDisableRollbackThread (TF.Resource p a) b =
         HasDisableRollbackThread a b

    disableRollback = TF.configuration . disableRollback

class HasDisplayName a b | a -> b where
    type HasDisplayNameThread a b :: *

    displayName
        :: Lens' a (TF.Attribute (HasDisplayNameThread a b) b)

instance HasDisplayName a b => HasDisplayName (TF.Resource p a) b where
    type HasDisplayNameThread (TF.Resource p a) b =
         HasDisplayNameThread a b

    displayName = TF.configuration . displayName

class HasDnsConfig a b | a -> b where
    type HasDnsConfigThread a b :: *

    dnsConfig
        :: Lens' a (TF.Attribute (HasDnsConfigThread a b) b)

instance HasDnsConfig a b => HasDnsConfig (TF.Resource p a) b where
    type HasDnsConfigThread (TF.Resource p a) b =
         HasDnsConfigThread a b

    dnsConfig = TF.configuration . dnsConfig

class HasDocumentRoot a b | a -> b where
    type HasDocumentRootThread a b :: *

    documentRoot
        :: Lens' a (TF.Attribute (HasDocumentRootThread a b) b)

instance HasDocumentRoot a b => HasDocumentRoot (TF.Resource p a) b where
    type HasDocumentRootThread (TF.Resource p a) b =
         HasDocumentRootThread a b

    documentRoot = TF.configuration . documentRoot

class HasDocumentType a b | a -> b where
    type HasDocumentTypeThread a b :: *

    documentType
        :: Lens' a (TF.Attribute (HasDocumentTypeThread a b) b)

instance HasDocumentType a b => HasDocumentType (TF.Resource p a) b where
    type HasDocumentTypeThread (TF.Resource p a) b =
         HasDocumentTypeThread a b

    documentType = TF.configuration . documentType

class HasDocumentVersion a b | a -> b where
    type HasDocumentVersionThread a b :: *

    documentVersion
        :: Lens' a (TF.Attribute (HasDocumentVersionThread a b) b)

instance HasDocumentVersion a b => HasDocumentVersion (TF.Resource p a) b where
    type HasDocumentVersionThread (TF.Resource p a) b =
         HasDocumentVersionThread a b

    documentVersion = TF.configuration . documentVersion

class HasDocumentationVersion a b | a -> b where
    type HasDocumentationVersionThread a b :: *

    documentationVersion
        :: Lens' a (TF.Attribute (HasDocumentationVersionThread a b) b)

instance HasDocumentationVersion a b => HasDocumentationVersion (TF.Resource p a) b where
    type HasDocumentationVersionThread (TF.Resource p a) b =
         HasDocumentationVersionThread a b

    documentationVersion = TF.configuration . documentationVersion

class HasDomain a b | a -> b where
    type HasDomainThread a b :: *

    domain
        :: Lens' a (TF.Attribute (HasDomainThread a b) b)

instance HasDomain a b => HasDomain (TF.Resource p a) b where
    type HasDomainThread (TF.Resource p a) b =
         HasDomainThread a b

    domain = TF.configuration . domain

class HasDomainName a b | a -> b where
    type HasDomainNameThread a b :: *

    domainName
        :: Lens' a (TF.Attribute (HasDomainNameThread a b) b)

instance HasDomainName a b => HasDomainName (TF.Resource p a) b where
    type HasDomainNameThread (TF.Resource p a) b =
         HasDomainNameThread a b

    domainName = TF.configuration . domainName

class HasDomainNameServers a b | a -> b where
    type HasDomainNameServersThread a b :: *

    domainNameServers
        :: Lens' a (TF.Attribute (HasDomainNameServersThread a b) b)

instance HasDomainNameServers a b => HasDomainNameServers (TF.Resource p a) b where
    type HasDomainNameServersThread (TF.Resource p a) b =
         HasDomainNameServersThread a b

    domainNameServers = TF.configuration . domainNameServers

class HasDomains a b | a -> b where
    type HasDomainsThread a b :: *

    domains
        :: Lens' a (TF.Attribute (HasDomainsThread a b) b)

instance HasDomains a b => HasDomains (TF.Resource p a) b where
    type HasDomainsThread (TF.Resource p a) b =
         HasDomainsThread a b

    domains = TF.configuration . domains

class HasDrainElbOnShutdown a b | a -> b where
    type HasDrainElbOnShutdownThread a b :: *

    drainElbOnShutdown
        :: Lens' a (TF.Attribute (HasDrainElbOnShutdownThread a b) b)

instance HasDrainElbOnShutdown a b => HasDrainElbOnShutdown (TF.Resource p a) b where
    type HasDrainElbOnShutdownThread (TF.Resource p a) b =
         HasDrainElbOnShutdownThread a b

    drainElbOnShutdown = TF.configuration . drainElbOnShutdown

class HasDuration a b | a -> b where
    type HasDurationThread a b :: *

    duration
        :: Lens' a (TF.Attribute (HasDurationThread a b) b)

instance HasDuration a b => HasDuration (TF.Resource p a) b where
    type HasDurationThread (TF.Resource p a) b =
         HasDurationThread a b

    duration = TF.configuration . duration

class HasEbsBlockDevice a b | a -> b where
    type HasEbsBlockDeviceThread a b :: *

    ebsBlockDevice
        :: Lens' a (TF.Attribute (HasEbsBlockDeviceThread a b) b)

instance HasEbsBlockDevice a b => HasEbsBlockDevice (TF.Resource p a) b where
    type HasEbsBlockDeviceThread (TF.Resource p a) b =
         HasEbsBlockDeviceThread a b

    ebsBlockDevice = TF.configuration . ebsBlockDevice

class HasEbsConfig a b | a -> b where
    type HasEbsConfigThread a b :: *

    ebsConfig
        :: Lens' a (TF.Attribute (HasEbsConfigThread a b) b)

instance HasEbsConfig a b => HasEbsConfig (TF.Resource p a) b where
    type HasEbsConfigThread (TF.Resource p a) b =
         HasEbsConfigThread a b

    ebsConfig = TF.configuration . ebsConfig

class HasEbsOptimized a b | a -> b where
    type HasEbsOptimizedThread a b :: *

    ebsOptimized
        :: Lens' a (TF.Attribute (HasEbsOptimizedThread a b) b)

instance HasEbsOptimized a b => HasEbsOptimized (TF.Resource p a) b where
    type HasEbsOptimizedThread (TF.Resource p a) b =
         HasEbsOptimizedThread a b

    ebsOptimized = TF.configuration . ebsOptimized

class HasEbsOptions a b | a -> b where
    type HasEbsOptionsThread a b :: *

    ebsOptions
        :: Lens' a (TF.Attribute (HasEbsOptionsThread a b) b)

instance HasEbsOptions a b => HasEbsOptions (TF.Resource p a) b where
    type HasEbsOptionsThread (TF.Resource p a) b =
         HasEbsOptionsThread a b

    ebsOptions = TF.configuration . ebsOptions

class HasEbsRootVolumeSize a b | a -> b where
    type HasEbsRootVolumeSizeThread a b :: *

    ebsRootVolumeSize
        :: Lens' a (TF.Attribute (HasEbsRootVolumeSizeThread a b) b)

instance HasEbsRootVolumeSize a b => HasEbsRootVolumeSize (TF.Resource p a) b where
    type HasEbsRootVolumeSizeThread (TF.Resource p a) b =
         HasEbsRootVolumeSizeThread a b

    ebsRootVolumeSize = TF.configuration . ebsRootVolumeSize

class HasEbsVolume a b | a -> b where
    type HasEbsVolumeThread a b :: *

    ebsVolume
        :: Lens' a (TF.Attribute (HasEbsVolumeThread a b) b)

instance HasEbsVolume a b => HasEbsVolume (TF.Resource p a) b where
    type HasEbsVolumeThread (TF.Resource p a) b =
         HasEbsVolumeThread a b

    ebsVolume = TF.configuration . ebsVolume

class HasEc2Attributes a b | a -> b where
    type HasEc2AttributesThread a b :: *

    ec2Attributes
        :: Lens' a (TF.Attribute (HasEc2AttributesThread a b) b)

instance HasEc2Attributes a b => HasEc2Attributes (TF.Resource p a) b where
    type HasEc2AttributesThread (TF.Resource p a) b =
         HasEc2AttributesThread a b

    ec2Attributes = TF.configuration . ec2Attributes

class HasEc2TagFilter a b | a -> b where
    type HasEc2TagFilterThread a b :: *

    ec2TagFilter
        :: Lens' a (TF.Attribute (HasEc2TagFilterThread a b) b)

instance HasEc2TagFilter a b => HasEc2TagFilter (TF.Resource p a) b where
    type HasEc2TagFilterThread (TF.Resource p a) b =
         HasEc2TagFilterThread a b

    ec2TagFilter = TF.configuration . ec2TagFilter

class HasEcsTarget a b | a -> b where
    type HasEcsTargetThread a b :: *

    ecsTarget
        :: Lens' a (TF.Attribute (HasEcsTargetThread a b) b)

instance HasEcsTarget a b => HasEcsTarget (TF.Resource p a) b where
    type HasEcsTargetThread (TF.Resource p a) b =
         HasEcsTargetThread a b

    ecsTarget = TF.configuration . ecsTarget

class HasEgress a b | a -> b where
    type HasEgressThread a b :: *

    egress
        :: Lens' a (TF.Attribute (HasEgressThread a b) b)

instance HasEgress a b => HasEgress (TF.Resource p a) b where
    type HasEgressThread (TF.Resource p a) b =
         HasEgressThread a b

    egress = TF.configuration . egress

class HasEgressOnlyGatewayId a b | a -> b where
    type HasEgressOnlyGatewayIdThread a b :: *

    egressOnlyGatewayId
        :: Lens' a (TF.Attribute (HasEgressOnlyGatewayIdThread a b) b)

instance HasEgressOnlyGatewayId a b => HasEgressOnlyGatewayId (TF.Resource p a) b where
    type HasEgressOnlyGatewayIdThread (TF.Resource p a) b =
         HasEgressOnlyGatewayIdThread a b

    egressOnlyGatewayId = TF.configuration . egressOnlyGatewayId

class HasElasticIp a b | a -> b where
    type HasElasticIpThread a b :: *

    elasticIp
        :: Lens' a (TF.Attribute (HasElasticIpThread a b) b)

instance HasElasticIp a b => HasElasticIp (TF.Resource p a) b where
    type HasElasticIpThread (TF.Resource p a) b =
         HasElasticIpThread a b

    elasticIp = TF.configuration . elasticIp

class HasElasticLoadBalancer a b | a -> b where
    type HasElasticLoadBalancerThread a b :: *

    elasticLoadBalancer
        :: Lens' a (TF.Attribute (HasElasticLoadBalancerThread a b) b)

instance HasElasticLoadBalancer a b => HasElasticLoadBalancer (TF.Resource p a) b where
    type HasElasticLoadBalancerThread (TF.Resource p a) b =
         HasElasticLoadBalancerThread a b

    elasticLoadBalancer = TF.configuration . elasticLoadBalancer

class HasElasticsearchVersion a b | a -> b where
    type HasElasticsearchVersionThread a b :: *

    elasticsearchVersion
        :: Lens' a (TF.Attribute (HasElasticsearchVersionThread a b) b)

instance HasElasticsearchVersion a b => HasElasticsearchVersion (TF.Resource p a) b where
    type HasElasticsearchVersionThread (TF.Resource p a) b =
         HasElasticsearchVersionThread a b

    elasticsearchVersion = TF.configuration . elasticsearchVersion

class HasElb a b | a -> b where
    type HasElbThread a b :: *

    elb
        :: Lens' a (TF.Attribute (HasElbThread a b) b)

instance HasElb a b => HasElb (TF.Resource p a) b where
    type HasElbThread (TF.Resource p a) b =
         HasElbThread a b

    elb = TF.configuration . elb

class HasEmail a b | a -> b where
    type HasEmailThread a b :: *

    email
        :: Lens' a (TF.Attribute (HasEmailThread a b) b)

instance HasEmail a b => HasEmail (TF.Resource p a) b where
    type HasEmailThread (TF.Resource p a) b =
         HasEmailThread a b

    email = TF.configuration . email

class HasEmailConfiguration a b | a -> b where
    type HasEmailConfigurationThread a b :: *

    emailConfiguration
        :: Lens' a (TF.Attribute (HasEmailConfigurationThread a b) b)

instance HasEmailConfiguration a b => HasEmailConfiguration (TF.Resource p a) b where
    type HasEmailConfigurationThread (TF.Resource p a) b =
         HasEmailConfigurationThread a b

    emailConfiguration = TF.configuration . emailConfiguration

class HasEmailVerificationMessage a b | a -> b where
    type HasEmailVerificationMessageThread a b :: *

    emailVerificationMessage
        :: Lens' a (TF.Attribute (HasEmailVerificationMessageThread a b) b)

instance HasEmailVerificationMessage a b => HasEmailVerificationMessage (TF.Resource p a) b where
    type HasEmailVerificationMessageThread (TF.Resource p a) b =
         HasEmailVerificationMessageThread a b

    emailVerificationMessage = TF.configuration . emailVerificationMessage

class HasEmailVerificationSubject a b | a -> b where
    type HasEmailVerificationSubjectThread a b :: *

    emailVerificationSubject
        :: Lens' a (TF.Attribute (HasEmailVerificationSubjectThread a b) b)

instance HasEmailVerificationSubject a b => HasEmailVerificationSubject (TF.Resource p a) b where
    type HasEmailVerificationSubjectThread (TF.Resource p a) b =
         HasEmailVerificationSubjectThread a b

    emailVerificationSubject = TF.configuration . emailVerificationSubject

class HasEnable a b | a -> b where
    type HasEnableThread a b :: *

    enable
        :: Lens' a (TF.Attribute (HasEnableThread a b) b)

instance HasEnable a b => HasEnable (TF.Resource p a) b where
    type HasEnableThread (TF.Resource p a) b =
         HasEnableThread a b

    enable = TF.configuration . enable

class HasEnableClassiclink a b | a -> b where
    type HasEnableClassiclinkThread a b :: *

    enableClassiclink
        :: Lens' a (TF.Attribute (HasEnableClassiclinkThread a b) b)

instance HasEnableClassiclink a b => HasEnableClassiclink (TF.Resource p a) b where
    type HasEnableClassiclinkThread (TF.Resource p a) b =
         HasEnableClassiclinkThread a b

    enableClassiclink = TF.configuration . enableClassiclink

class HasEnableClassiclinkDnsSupport a b | a -> b where
    type HasEnableClassiclinkDnsSupportThread a b :: *

    enableClassiclinkDnsSupport
        :: Lens' a (TF.Attribute (HasEnableClassiclinkDnsSupportThread a b) b)

instance HasEnableClassiclinkDnsSupport a b => HasEnableClassiclinkDnsSupport (TF.Resource p a) b where
    type HasEnableClassiclinkDnsSupportThread (TF.Resource p a) b =
         HasEnableClassiclinkDnsSupportThread a b

    enableClassiclinkDnsSupport = TF.configuration . enableClassiclinkDnsSupport

class HasEnableDeletionProtection a b | a -> b where
    type HasEnableDeletionProtectionThread a b :: *

    enableDeletionProtection
        :: Lens' a (TF.Attribute (HasEnableDeletionProtectionThread a b) b)

instance HasEnableDeletionProtection a b => HasEnableDeletionProtection (TF.Resource p a) b where
    type HasEnableDeletionProtectionThread (TF.Resource p a) b =
         HasEnableDeletionProtectionThread a b

    enableDeletionProtection = TF.configuration . enableDeletionProtection

class HasEnableDnsHostnames a b | a -> b where
    type HasEnableDnsHostnamesThread a b :: *

    enableDnsHostnames
        :: Lens' a (TF.Attribute (HasEnableDnsHostnamesThread a b) b)

instance HasEnableDnsHostnames a b => HasEnableDnsHostnames (TF.Resource p a) b where
    type HasEnableDnsHostnamesThread (TF.Resource p a) b =
         HasEnableDnsHostnamesThread a b

    enableDnsHostnames = TF.configuration . enableDnsHostnames

class HasEnableDnsSupport a b | a -> b where
    type HasEnableDnsSupportThread a b :: *

    enableDnsSupport
        :: Lens' a (TF.Attribute (HasEnableDnsSupportThread a b) b)

instance HasEnableDnsSupport a b => HasEnableDnsSupport (TF.Resource p a) b where
    type HasEnableDnsSupportThread (TF.Resource p a) b =
         HasEnableDnsSupportThread a b

    enableDnsSupport = TF.configuration . enableDnsSupport

class HasEnableKeyRotation a b | a -> b where
    type HasEnableKeyRotationThread a b :: *

    enableKeyRotation
        :: Lens' a (TF.Attribute (HasEnableKeyRotationThread a b) b)

instance HasEnableKeyRotation a b => HasEnableKeyRotation (TF.Resource p a) b where
    type HasEnableKeyRotationThread (TF.Resource p a) b =
         HasEnableKeyRotationThread a b

    enableKeyRotation = TF.configuration . enableKeyRotation

class HasEnableLogFileValidation a b | a -> b where
    type HasEnableLogFileValidationThread a b :: *

    enableLogFileValidation
        :: Lens' a (TF.Attribute (HasEnableLogFileValidationThread a b) b)

instance HasEnableLogFileValidation a b => HasEnableLogFileValidation (TF.Resource p a) b where
    type HasEnableLogFileValidationThread (TF.Resource p a) b =
         HasEnableLogFileValidationThread a b

    enableLogFileValidation = TF.configuration . enableLogFileValidation

class HasEnableLogging a b | a -> b where
    type HasEnableLoggingThread a b :: *

    enableLogging
        :: Lens' a (TF.Attribute (HasEnableLoggingThread a b) b)

instance HasEnableLogging a b => HasEnableLogging (TF.Resource p a) b where
    type HasEnableLoggingThread (TF.Resource p a) b =
         HasEnableLoggingThread a b

    enableLogging = TF.configuration . enableLogging

class HasEnableMonitoring a b | a -> b where
    type HasEnableMonitoringThread a b :: *

    enableMonitoring
        :: Lens' a (TF.Attribute (HasEnableMonitoringThread a b) b)

instance HasEnableMonitoring a b => HasEnableMonitoring (TF.Resource p a) b where
    type HasEnableMonitoringThread (TF.Resource p a) b =
         HasEnableMonitoringThread a b

    enableMonitoring = TF.configuration . enableMonitoring

class HasEnableSni a b | a -> b where
    type HasEnableSniThread a b :: *

    enableSni
        :: Lens' a (TF.Attribute (HasEnableSniThread a b) b)

instance HasEnableSni a b => HasEnableSni (TF.Resource p a) b where
    type HasEnableSniThread (TF.Resource p a) b =
         HasEnableSniThread a b

    enableSni = TF.configuration . enableSni

class HasEnableSsl a b | a -> b where
    type HasEnableSslThread a b :: *

    enableSsl
        :: Lens' a (TF.Attribute (HasEnableSslThread a b) b)

instance HasEnableSsl a b => HasEnableSsl (TF.Resource p a) b where
    type HasEnableSslThread (TF.Resource p a) b =
         HasEnableSslThread a b

    enableSsl = TF.configuration . enableSsl

class HasEnableSso a b | a -> b where
    type HasEnableSsoThread a b :: *

    enableSso
        :: Lens' a (TF.Attribute (HasEnableSsoThread a b) b)

instance HasEnableSso a b => HasEnableSso (TF.Resource p a) b where
    type HasEnableSsoThread (TF.Resource p a) b =
         HasEnableSsoThread a b

    enableSso = TF.configuration . enableSso

class HasEnabled a b | a -> b where
    type HasEnabledThread a b :: *

    enabled
        :: Lens' a (TF.Attribute (HasEnabledThread a b) b)

instance HasEnabled a b => HasEnabled (TF.Resource p a) b where
    type HasEnabledThread (TF.Resource p a) b =
         HasEnabledThread a b

    enabled = TF.configuration . enabled

class HasEnabledMetrics a b | a -> b where
    type HasEnabledMetricsThread a b :: *

    enabledMetrics
        :: Lens' a (TF.Attribute (HasEnabledMetricsThread a b) b)

instance HasEnabledMetrics a b => HasEnabledMetrics (TF.Resource p a) b where
    type HasEnabledMetricsThread (TF.Resource p a) b =
         HasEnabledMetricsThread a b

    enabledMetrics = TF.configuration . enabledMetrics

class HasEncoding a b | a -> b where
    type HasEncodingThread a b :: *

    encoding
        :: Lens' a (TF.Attribute (HasEncodingThread a b) b)

instance HasEncoding a b => HasEncoding (TF.Resource p a) b where
    type HasEncodingThread (TF.Resource p a) b =
         HasEncodingThread a b

    encoding = TF.configuration . encoding

class HasEncryptAtRest a b | a -> b where
    type HasEncryptAtRestThread a b :: *

    encryptAtRest
        :: Lens' a (TF.Attribute (HasEncryptAtRestThread a b) b)

instance HasEncryptAtRest a b => HasEncryptAtRest (TF.Resource p a) b where
    type HasEncryptAtRestThread (TF.Resource p a) b =
         HasEncryptAtRestThread a b

    encryptAtRest = TF.configuration . encryptAtRest

class HasEncrypted a b | a -> b where
    type HasEncryptedThread a b :: *

    encrypted
        :: Lens' a (TF.Attribute (HasEncryptedThread a b) b)

instance HasEncrypted a b => HasEncrypted (TF.Resource p a) b where
    type HasEncryptedThread (TF.Resource p a) b =
         HasEncryptedThread a b

    encrypted = TF.configuration . encrypted

class HasEncryptionKey a b | a -> b where
    type HasEncryptionKeyThread a b :: *

    encryptionKey
        :: Lens' a (TF.Attribute (HasEncryptionKeyThread a b) b)

instance HasEncryptionKey a b => HasEncryptionKey (TF.Resource p a) b where
    type HasEncryptionKeyThread (TF.Resource p a) b =
         HasEncryptionKeyThread a b

    encryptionKey = TF.configuration . encryptionKey

class HasEncryptionType a b | a -> b where
    type HasEncryptionTypeThread a b :: *

    encryptionType
        :: Lens' a (TF.Attribute (HasEncryptionTypeThread a b) b)

instance HasEncryptionType a b => HasEncryptionType (TF.Resource p a) b where
    type HasEncryptionTypeThread (TF.Resource p a) b =
         HasEncryptionTypeThread a b

    encryptionType = TF.configuration . encryptionType

class HasEndTime a b | a -> b where
    type HasEndTimeThread a b :: *

    endTime
        :: Lens' a (TF.Attribute (HasEndTimeThread a b) b)

instance HasEndTime a b => HasEndTime (TF.Resource p a) b where
    type HasEndTimeThread (TF.Resource p a) b =
         HasEndTimeThread a b

    endTime = TF.configuration . endTime

class HasEndpoint a b | a -> b where
    type HasEndpointThread a b :: *

    endpoint
        :: Lens' a (TF.Attribute (HasEndpointThread a b) b)

instance HasEndpoint a b => HasEndpoint (TF.Resource p a) b where
    type HasEndpointThread (TF.Resource p a) b =
         HasEndpointThread a b

    endpoint = TF.configuration . endpoint

class HasEndpointAutoConfirms a b | a -> b where
    type HasEndpointAutoConfirmsThread a b :: *

    endpointAutoConfirms
        :: Lens' a (TF.Attribute (HasEndpointAutoConfirmsThread a b) b)

instance HasEndpointAutoConfirms a b => HasEndpointAutoConfirms (TF.Resource p a) b where
    type HasEndpointAutoConfirmsThread (TF.Resource p a) b =
         HasEndpointAutoConfirmsThread a b

    endpointAutoConfirms = TF.configuration . endpointAutoConfirms

class HasEndpointId a b | a -> b where
    type HasEndpointIdThread a b :: *

    endpointId
        :: Lens' a (TF.Attribute (HasEndpointIdThread a b) b)

instance HasEndpointId a b => HasEndpointId (TF.Resource p a) b where
    type HasEndpointIdThread (TF.Resource p a) b =
         HasEndpointIdThread a b

    endpointId = TF.configuration . endpointId

class HasEndpointType a b | a -> b where
    type HasEndpointTypeThread a b :: *

    endpointType
        :: Lens' a (TF.Attribute (HasEndpointTypeThread a b) b)

instance HasEndpointType a b => HasEndpointType (TF.Resource p a) b where
    type HasEndpointTypeThread (TF.Resource p a) b =
         HasEndpointTypeThread a b

    endpointType = TF.configuration . endpointType

class HasEngine a b | a -> b where
    type HasEngineThread a b :: *

    engine
        :: Lens' a (TF.Attribute (HasEngineThread a b) b)

instance HasEngine a b => HasEngine (TF.Resource p a) b where
    type HasEngineThread (TF.Resource p a) b =
         HasEngineThread a b

    engine = TF.configuration . engine

class HasEngineName a b | a -> b where
    type HasEngineNameThread a b :: *

    engineName
        :: Lens' a (TF.Attribute (HasEngineNameThread a b) b)

instance HasEngineName a b => HasEngineName (TF.Resource p a) b where
    type HasEngineNameThread (TF.Resource p a) b =
         HasEngineNameThread a b

    engineName = TF.configuration . engineName

class HasEngineType a b | a -> b where
    type HasEngineTypeThread a b :: *

    engineType
        :: Lens' a (TF.Attribute (HasEngineTypeThread a b) b)

instance HasEngineType a b => HasEngineType (TF.Resource p a) b where
    type HasEngineTypeThread (TF.Resource p a) b =
         HasEngineTypeThread a b

    engineType = TF.configuration . engineType

class HasEngineVersion a b | a -> b where
    type HasEngineVersionThread a b :: *

    engineVersion
        :: Lens' a (TF.Attribute (HasEngineVersionThread a b) b)

instance HasEngineVersion a b => HasEngineVersion (TF.Resource p a) b where
    type HasEngineVersionThread (TF.Resource p a) b =
         HasEngineVersionThread a b

    engineVersion = TF.configuration . engineVersion

class HasEnhancedVpcRouting a b | a -> b where
    type HasEnhancedVpcRoutingThread a b :: *

    enhancedVpcRouting
        :: Lens' a (TF.Attribute (HasEnhancedVpcRoutingThread a b) b)

instance HasEnhancedVpcRouting a b => HasEnhancedVpcRouting (TF.Resource p a) b where
    type HasEnhancedVpcRoutingThread (TF.Resource p a) b =
         HasEnhancedVpcRoutingThread a b

    enhancedVpcRouting = TF.configuration . enhancedVpcRouting

class HasEniId a b | a -> b where
    type HasEniIdThread a b :: *

    eniId
        :: Lens' a (TF.Attribute (HasEniIdThread a b) b)

instance HasEniId a b => HasEniId (TF.Resource p a) b where
    type HasEniIdThread (TF.Resource p a) b =
         HasEniIdThread a b

    eniId = TF.configuration . eniId

class HasEnvironment a b | a -> b where
    type HasEnvironmentThread a b :: *

    environment
        :: Lens' a (TF.Attribute (HasEnvironmentThread a b) b)

instance HasEnvironment a b => HasEnvironment (TF.Resource p a) b where
    type HasEnvironmentThread (TF.Resource p a) b =
         HasEnvironmentThread a b

    environment = TF.configuration . environment

class HasEnvironmentId a b | a -> b where
    type HasEnvironmentIdThread a b :: *

    environmentId
        :: Lens' a (TF.Attribute (HasEnvironmentIdThread a b) b)

instance HasEnvironmentId a b => HasEnvironmentId (TF.Resource p a) b where
    type HasEnvironmentIdThread (TF.Resource p a) b =
         HasEnvironmentIdThread a b

    environmentId = TF.configuration . environmentId

class HasEphemeralBlockDevice a b | a -> b where
    type HasEphemeralBlockDeviceThread a b :: *

    ephemeralBlockDevice
        :: Lens' a (TF.Attribute (HasEphemeralBlockDeviceThread a b) b)

instance HasEphemeralBlockDevice a b => HasEphemeralBlockDevice (TF.Resource p a) b where
    type HasEphemeralBlockDeviceThread (TF.Resource p a) b =
         HasEphemeralBlockDeviceThread a b

    ephemeralBlockDevice = TF.configuration . ephemeralBlockDevice

class HasEtag a b | a -> b where
    type HasEtagThread a b :: *

    etag
        :: Lens' a (TF.Attribute (HasEtagThread a b) b)

instance HasEtag a b => HasEtag (TF.Resource p a) b where
    type HasEtagThread (TF.Resource p a) b =
         HasEtagThread a b

    etag = TF.configuration . etag

class HasEvaluateLowSampleCountPercentiles a b | a -> b where
    type HasEvaluateLowSampleCountPercentilesThread a b :: *

    evaluateLowSampleCountPercentiles
        :: Lens' a (TF.Attribute (HasEvaluateLowSampleCountPercentilesThread a b) b)

instance HasEvaluateLowSampleCountPercentiles a b => HasEvaluateLowSampleCountPercentiles (TF.Resource p a) b where
    type HasEvaluateLowSampleCountPercentilesThread (TF.Resource p a) b =
         HasEvaluateLowSampleCountPercentilesThread a b

    evaluateLowSampleCountPercentiles = TF.configuration . evaluateLowSampleCountPercentiles

class HasEvaluationPeriods a b | a -> b where
    type HasEvaluationPeriodsThread a b :: *

    evaluationPeriods
        :: Lens' a (TF.Attribute (HasEvaluationPeriodsThread a b) b)

instance HasEvaluationPeriods a b => HasEvaluationPeriods (TF.Resource p a) b where
    type HasEvaluationPeriodsThread (TF.Resource p a) b =
         HasEvaluationPeriodsThread a b

    evaluationPeriods = TF.configuration . evaluationPeriods

class HasEventCategories a b | a -> b where
    type HasEventCategoriesThread a b :: *

    eventCategories
        :: Lens' a (TF.Attribute (HasEventCategoriesThread a b) b)

instance HasEventCategories a b => HasEventCategories (TF.Resource p a) b where
    type HasEventCategoriesThread (TF.Resource p a) b =
         HasEventCategoriesThread a b

    eventCategories = TF.configuration . eventCategories

class HasEventPattern a b | a -> b where
    type HasEventPatternThread a b :: *

    eventPattern
        :: Lens' a (TF.Attribute (HasEventPatternThread a b) b)

instance HasEventPattern a b => HasEventPattern (TF.Resource p a) b where
    type HasEventPatternThread (TF.Resource p a) b =
         HasEventPatternThread a b

    eventPattern = TF.configuration . eventPattern

class HasEventSourceArn a b | a -> b where
    type HasEventSourceArnThread a b :: *

    eventSourceArn
        :: Lens' a (TF.Attribute (HasEventSourceArnThread a b) b)

instance HasEventSourceArn a b => HasEventSourceArn (TF.Resource p a) b where
    type HasEventSourceArnThread (TF.Resource p a) b =
         HasEventSourceArnThread a b

    eventSourceArn = TF.configuration . eventSourceArn

class HasEvents a b | a -> b where
    type HasEventsThread a b :: *

    events
        :: Lens' a (TF.Attribute (HasEventsThread a b) b)

instance HasEvents a b => HasEvents (TF.Resource p a) b where
    type HasEventsThread (TF.Resource p a) b =
         HasEventsThread a b

    events = TF.configuration . events

class HasExcessCapacityTerminationPolicy a b | a -> b where
    type HasExcessCapacityTerminationPolicyThread a b :: *

    excessCapacityTerminationPolicy
        :: Lens' a (TF.Attribute (HasExcessCapacityTerminationPolicyThread a b) b)

instance HasExcessCapacityTerminationPolicy a b => HasExcessCapacityTerminationPolicy (TF.Resource p a) b where
    type HasExcessCapacityTerminationPolicyThread (TF.Resource p a) b =
         HasExcessCapacityTerminationPolicyThread a b

    excessCapacityTerminationPolicy = TF.configuration . excessCapacityTerminationPolicy

class HasExpirationDate a b | a -> b where
    type HasExpirationDateThread a b :: *

    expirationDate
        :: Lens' a (TF.Attribute (HasExpirationDateThread a b) b)

instance HasExpirationDate a b => HasExpirationDate (TF.Resource p a) b where
    type HasExpirationDateThread (TF.Resource p a) b =
         HasExpirationDateThread a b

    expirationDate = TF.configuration . expirationDate

class HasExplicitAuthFlows a b | a -> b where
    type HasExplicitAuthFlowsThread a b :: *

    explicitAuthFlows
        :: Lens' a (TF.Attribute (HasExplicitAuthFlowsThread a b) b)

instance HasExplicitAuthFlows a b => HasExplicitAuthFlows (TF.Resource p a) b where
    type HasExplicitAuthFlowsThread (TF.Resource p a) b =
         HasExplicitAuthFlowsThread a b

    explicitAuthFlows = TF.configuration . explicitAuthFlows

class HasExtendedS3Configuration a b | a -> b where
    type HasExtendedS3ConfigurationThread a b :: *

    extendedS3Configuration
        :: Lens' a (TF.Attribute (HasExtendedS3ConfigurationThread a b) b)

instance HasExtendedS3Configuration a b => HasExtendedS3Configuration (TF.Resource p a) b where
    type HasExtendedS3ConfigurationThread (TF.Resource p a) b =
         HasExtendedS3ConfigurationThread a b

    extendedS3Configuration = TF.configuration . extendedS3Configuration

class HasExtendedStatistic a b | a -> b where
    type HasExtendedStatisticThread a b :: *

    extendedStatistic
        :: Lens' a (TF.Attribute (HasExtendedStatisticThread a b) b)

instance HasExtendedStatistic a b => HasExtendedStatistic (TF.Resource p a) b where
    type HasExtendedStatisticThread (TF.Resource p a) b =
         HasExtendedStatisticThread a b

    extendedStatistic = TF.configuration . extendedStatistic

class HasExtraConnectionAttributes a b | a -> b where
    type HasExtraConnectionAttributesThread a b :: *

    extraConnectionAttributes
        :: Lens' a (TF.Attribute (HasExtraConnectionAttributesThread a b) b)

instance HasExtraConnectionAttributes a b => HasExtraConnectionAttributes (TF.Resource p a) b where
    type HasExtraConnectionAttributesThread (TF.Resource p a) b =
         HasExtraConnectionAttributesThread a b

    extraConnectionAttributes = TF.configuration . extraConnectionAttributes

class HasFailoverRoutingPolicy a b | a -> b where
    type HasFailoverRoutingPolicyThread a b :: *

    failoverRoutingPolicy
        :: Lens' a (TF.Attribute (HasFailoverRoutingPolicyThread a b) b)

instance HasFailoverRoutingPolicy a b => HasFailoverRoutingPolicy (TF.Resource p a) b where
    type HasFailoverRoutingPolicyThread (TF.Resource p a) b =
         HasFailoverRoutingPolicyThread a b

    failoverRoutingPolicy = TF.configuration . failoverRoutingPolicy

class HasFailureThreshold a b | a -> b where
    type HasFailureThresholdThread a b :: *

    failureThreshold
        :: Lens' a (TF.Attribute (HasFailureThresholdThread a b) b)

instance HasFailureThreshold a b => HasFailureThreshold (TF.Resource p a) b where
    type HasFailureThresholdThread (TF.Resource p a) b =
         HasFailureThresholdThread a b

    failureThreshold = TF.configuration . failureThreshold

class HasFamily' a b | a -> b where
    type HasFamily'Thread a b :: *

    family'
        :: Lens' a (TF.Attribute (HasFamily'Thread a b) b)

instance HasFamily' a b => HasFamily' (TF.Resource p a) b where
    type HasFamily'Thread (TF.Resource p a) b =
         HasFamily'Thread a b

    family' = TF.configuration . family'

class HasFifoQueue a b | a -> b where
    type HasFifoQueueThread a b :: *

    fifoQueue
        :: Lens' a (TF.Attribute (HasFifoQueueThread a b) b)

instance HasFifoQueue a b => HasFifoQueue (TF.Resource p a) b where
    type HasFifoQueueThread (TF.Resource p a) b =
         HasFifoQueueThread a b

    fifoQueue = TF.configuration . fifoQueue

class HasFileSystemId a b | a -> b where
    type HasFileSystemIdThread a b :: *

    fileSystemId
        :: Lens' a (TF.Attribute (HasFileSystemIdThread a b) b)

instance HasFileSystemId a b => HasFileSystemId (TF.Resource p a) b where
    type HasFileSystemIdThread (TF.Resource p a) b =
         HasFileSystemIdThread a b

    fileSystemId = TF.configuration . fileSystemId

class HasFilename a b | a -> b where
    type HasFilenameThread a b :: *

    filename
        :: Lens' a (TF.Attribute (HasFilenameThread a b) b)

instance HasFilename a b => HasFilename (TF.Resource p a) b where
    type HasFilenameThread (TF.Resource p a) b =
         HasFilenameThread a b

    filename = TF.configuration . filename

class HasFilterPattern a b | a -> b where
    type HasFilterPatternThread a b :: *

    filterPattern
        :: Lens' a (TF.Attribute (HasFilterPatternThread a b) b)

instance HasFilterPattern a b => HasFilterPattern (TF.Resource p a) b where
    type HasFilterPatternThread (TF.Resource p a) b =
         HasFilterPatternThread a b

    filterPattern = TF.configuration . filterPattern

class HasFinalSnapshotIdentifier a b | a -> b where
    type HasFinalSnapshotIdentifierThread a b :: *

    finalSnapshotIdentifier
        :: Lens' a (TF.Attribute (HasFinalSnapshotIdentifierThread a b) b)

instance HasFinalSnapshotIdentifier a b => HasFinalSnapshotIdentifier (TF.Resource p a) b where
    type HasFinalSnapshotIdentifierThread (TF.Resource p a) b =
         HasFinalSnapshotIdentifierThread a b

    finalSnapshotIdentifier = TF.configuration . finalSnapshotIdentifier

class HasForceDelete a b | a -> b where
    type HasForceDeleteThread a b :: *

    forceDelete
        :: Lens' a (TF.Attribute (HasForceDeleteThread a b) b)

instance HasForceDelete a b => HasForceDelete (TF.Resource p a) b where
    type HasForceDeleteThread (TF.Resource p a) b =
         HasForceDeleteThread a b

    forceDelete = TF.configuration . forceDelete

class HasForceDestroy a b | a -> b where
    type HasForceDestroyThread a b :: *

    forceDestroy
        :: Lens' a (TF.Attribute (HasForceDestroyThread a b) b)

instance HasForceDestroy a b => HasForceDestroy (TF.Resource p a) b where
    type HasForceDestroyThread (TF.Resource p a) b =
         HasForceDestroyThread a b

    forceDestroy = TF.configuration . forceDestroy

class HasForceDetach a b | a -> b where
    type HasForceDetachThread a b :: *

    forceDetach
        :: Lens' a (TF.Attribute (HasForceDetachThread a b) b)

instance HasForceDetach a b => HasForceDetach (TF.Resource p a) b where
    type HasForceDetachThread (TF.Resource p a) b =
         HasForceDetachThread a b

    forceDetach = TF.configuration . forceDetach

class HasFqdn a b | a -> b where
    type HasFqdnThread a b :: *

    fqdn
        :: Lens' a (TF.Attribute (HasFqdnThread a b) b)

instance HasFqdn a b => HasFqdn (TF.Resource p a) b where
    type HasFqdnThread (TF.Resource p a) b =
         HasFqdnThread a b

    fqdn = TF.configuration . fqdn

class HasFromPort a b | a -> b where
    type HasFromPortThread a b :: *

    fromPort
        :: Lens' a (TF.Attribute (HasFromPortThread a b) b)

instance HasFromPort a b => HasFromPort (TF.Resource p a) b where
    type HasFromPortThread (TF.Resource p a) b =
         HasFromPortThread a b

    fromPort = TF.configuration . fromPort

class HasFunctionName a b | a -> b where
    type HasFunctionNameThread a b :: *

    functionName
        :: Lens' a (TF.Attribute (HasFunctionNameThread a b) b)

instance HasFunctionName a b => HasFunctionName (TF.Resource p a) b where
    type HasFunctionNameThread (TF.Resource p a) b =
         HasFunctionNameThread a b

    functionName = TF.configuration . functionName

class HasFunctionVersion a b | a -> b where
    type HasFunctionVersionThread a b :: *

    functionVersion
        :: Lens' a (TF.Attribute (HasFunctionVersionThread a b) b)

instance HasFunctionVersion a b => HasFunctionVersion (TF.Resource p a) b where
    type HasFunctionVersionThread (TF.Resource p a) b =
         HasFunctionVersionThread a b

    functionVersion = TF.configuration . functionVersion

class HasGatewayId a b | a -> b where
    type HasGatewayIdThread a b :: *

    gatewayId
        :: Lens' a (TF.Attribute (HasGatewayIdThread a b) b)

instance HasGatewayId a b => HasGatewayId (TF.Resource p a) b where
    type HasGatewayIdThread (TF.Resource p a) b =
         HasGatewayIdThread a b

    gatewayId = TF.configuration . gatewayId

class HasGenerateSecret a b | a -> b where
    type HasGenerateSecretThread a b :: *

    generateSecret
        :: Lens' a (TF.Attribute (HasGenerateSecretThread a b) b)

instance HasGenerateSecret a b => HasGenerateSecret (TF.Resource p a) b where
    type HasGenerateSecretThread (TF.Resource p a) b =
         HasGenerateSecretThread a b

    generateSecret = TF.configuration . generateSecret

class HasGeolocationRoutingPolicy a b | a -> b where
    type HasGeolocationRoutingPolicyThread a b :: *

    geolocationRoutingPolicy
        :: Lens' a (TF.Attribute (HasGeolocationRoutingPolicyThread a b) b)

instance HasGeolocationRoutingPolicy a b => HasGeolocationRoutingPolicy (TF.Resource p a) b where
    type HasGeolocationRoutingPolicyThread (TF.Resource p a) b =
         HasGeolocationRoutingPolicyThread a b

    geolocationRoutingPolicy = TF.configuration . geolocationRoutingPolicy

class HasGlobalFilter a b | a -> b where
    type HasGlobalFilterThread a b :: *

    globalFilter
        :: Lens' a (TF.Attribute (HasGlobalFilterThread a b) b)

instance HasGlobalFilter a b => HasGlobalFilter (TF.Resource p a) b where
    type HasGlobalFilterThread (TF.Resource p a) b =
         HasGlobalFilterThread a b

    globalFilter = TF.configuration . globalFilter

class HasGlobalSecondaryIndex a b | a -> b where
    type HasGlobalSecondaryIndexThread a b :: *

    globalSecondaryIndex
        :: Lens' a (TF.Attribute (HasGlobalSecondaryIndexThread a b) b)

instance HasGlobalSecondaryIndex a b => HasGlobalSecondaryIndex (TF.Resource p a) b where
    type HasGlobalSecondaryIndexThread (TF.Resource p a) b =
         HasGlobalSecondaryIndexThread a b

    globalSecondaryIndex = TF.configuration . globalSecondaryIndex

class HasGroup a b | a -> b where
    type HasGroupThread a b :: *

    group
        :: Lens' a (TF.Attribute (HasGroupThread a b) b)

instance HasGroup a b => HasGroup (TF.Resource p a) b where
    type HasGroupThread (TF.Resource p a) b =
         HasGroupThread a b

    group = TF.configuration . group

class HasGroupNames a b | a -> b where
    type HasGroupNamesThread a b :: *

    groupNames
        :: Lens' a (TF.Attribute (HasGroupNamesThread a b) b)

instance HasGroupNames a b => HasGroupNames (TF.Resource p a) b where
    type HasGroupNamesThread (TF.Resource p a) b =
         HasGroupNamesThread a b

    groupNames = TF.configuration . groupNames

class HasGroups a b | a -> b where
    type HasGroupsThread a b :: *

    groups
        :: Lens' a (TF.Attribute (HasGroupsThread a b) b)

instance HasGroups a b => HasGroups (TF.Resource p a) b where
    type HasGroupsThread (TF.Resource p a) b =
         HasGroupsThread a b

    groups = TF.configuration . groups

class HasHandler a b | a -> b where
    type HasHandlerThread a b :: *

    handler
        :: Lens' a (TF.Attribute (HasHandlerThread a b) b)

instance HasHandler a b => HasHandler (TF.Resource p a) b where
    type HasHandlerThread (TF.Resource p a) b =
         HasHandlerThread a b

    handler = TF.configuration . handler

class HasHardExpiry a b | a -> b where
    type HasHardExpiryThread a b :: *

    hardExpiry
        :: Lens' a (TF.Attribute (HasHardExpiryThread a b) b)

instance HasHardExpiry a b => HasHardExpiry (TF.Resource p a) b where
    type HasHardExpiryThread (TF.Resource p a) b =
         HasHardExpiryThread a b

    hardExpiry = TF.configuration . hardExpiry

class HasHashKey a b | a -> b where
    type HasHashKeyThread a b :: *

    hashKey
        :: Lens' a (TF.Attribute (HasHashKeyThread a b) b)

instance HasHashKey a b => HasHashKey (TF.Resource p a) b where
    type HasHashKeyThread (TF.Resource p a) b =
         HasHashKeyThread a b

    hashKey = TF.configuration . hashKey

class HasHealthCheck a b | a -> b where
    type HasHealthCheckThread a b :: *

    healthCheck
        :: Lens' a (TF.Attribute (HasHealthCheckThread a b) b)

instance HasHealthCheck a b => HasHealthCheck (TF.Resource p a) b where
    type HasHealthCheckThread (TF.Resource p a) b =
         HasHealthCheckThread a b

    healthCheck = TF.configuration . healthCheck

class HasHealthCheckConfig a b | a -> b where
    type HasHealthCheckConfigThread a b :: *

    healthCheckConfig
        :: Lens' a (TF.Attribute (HasHealthCheckConfigThread a b) b)

instance HasHealthCheckConfig a b => HasHealthCheckConfig (TF.Resource p a) b where
    type HasHealthCheckConfigThread (TF.Resource p a) b =
         HasHealthCheckConfigThread a b

    healthCheckConfig = TF.configuration . healthCheckConfig

class HasHealthCheckGracePeriod a b | a -> b where
    type HasHealthCheckGracePeriodThread a b :: *

    healthCheckGracePeriod
        :: Lens' a (TF.Attribute (HasHealthCheckGracePeriodThread a b) b)

instance HasHealthCheckGracePeriod a b => HasHealthCheckGracePeriod (TF.Resource p a) b where
    type HasHealthCheckGracePeriodThread (TF.Resource p a) b =
         HasHealthCheckGracePeriodThread a b

    healthCheckGracePeriod = TF.configuration . healthCheckGracePeriod

class HasHealthCheckGracePeriodSeconds a b | a -> b where
    type HasHealthCheckGracePeriodSecondsThread a b :: *

    healthCheckGracePeriodSeconds
        :: Lens' a (TF.Attribute (HasHealthCheckGracePeriodSecondsThread a b) b)

instance HasHealthCheckGracePeriodSeconds a b => HasHealthCheckGracePeriodSeconds (TF.Resource p a) b where
    type HasHealthCheckGracePeriodSecondsThread (TF.Resource p a) b =
         HasHealthCheckGracePeriodSecondsThread a b

    healthCheckGracePeriodSeconds = TF.configuration . healthCheckGracePeriodSeconds

class HasHealthCheckId a b | a -> b where
    type HasHealthCheckIdThread a b :: *

    healthCheckId
        :: Lens' a (TF.Attribute (HasHealthCheckIdThread a b) b)

instance HasHealthCheckId a b => HasHealthCheckId (TF.Resource p a) b where
    type HasHealthCheckIdThread (TF.Resource p a) b =
         HasHealthCheckIdThread a b

    healthCheckId = TF.configuration . healthCheckId

class HasHealthCheckType a b | a -> b where
    type HasHealthCheckTypeThread a b :: *

    healthCheckType
        :: Lens' a (TF.Attribute (HasHealthCheckTypeThread a b) b)

instance HasHealthCheckType a b => HasHealthCheckType (TF.Resource p a) b where
    type HasHealthCheckTypeThread (TF.Resource p a) b =
         HasHealthCheckTypeThread a b

    healthCheckType = TF.configuration . healthCheckType

class HasHealthcheckMethod a b | a -> b where
    type HasHealthcheckMethodThread a b :: *

    healthcheckMethod
        :: Lens' a (TF.Attribute (HasHealthcheckMethodThread a b) b)

instance HasHealthcheckMethod a b => HasHealthcheckMethod (TF.Resource p a) b where
    type HasHealthcheckMethodThread (TF.Resource p a) b =
         HasHealthcheckMethodThread a b

    healthcheckMethod = TF.configuration . healthcheckMethod

class HasHealthcheckUrl a b | a -> b where
    type HasHealthcheckUrlThread a b :: *

    healthcheckUrl
        :: Lens' a (TF.Attribute (HasHealthcheckUrlThread a b) b)

instance HasHealthcheckUrl a b => HasHealthcheckUrl (TF.Resource p a) b where
    type HasHealthcheckUrlThread (TF.Resource p a) b =
         HasHealthcheckUrlThread a b

    healthcheckUrl = TF.configuration . healthcheckUrl

class HasHeartbeatTimeout a b | a -> b where
    type HasHeartbeatTimeoutThread a b :: *

    heartbeatTimeout
        :: Lens' a (TF.Attribute (HasHeartbeatTimeoutThread a b) b)

instance HasHeartbeatTimeout a b => HasHeartbeatTimeout (TF.Resource p a) b where
    type HasHeartbeatTimeoutThread (TF.Resource p a) b =
         HasHeartbeatTimeoutThread a b

    heartbeatTimeout = TF.configuration . heartbeatTimeout

class HasHostInstanceType a b | a -> b where
    type HasHostInstanceTypeThread a b :: *

    hostInstanceType
        :: Lens' a (TF.Attribute (HasHostInstanceTypeThread a b) b)

instance HasHostInstanceType a b => HasHostInstanceType (TF.Resource p a) b where
    type HasHostInstanceTypeThread (TF.Resource p a) b =
         HasHostInstanceTypeThread a b

    hostInstanceType = TF.configuration . hostInstanceType

class HasHostname a b | a -> b where
    type HasHostnameThread a b :: *

    hostname
        :: Lens' a (TF.Attribute (HasHostnameThread a b) b)

instance HasHostname a b => HasHostname (TF.Resource p a) b where
    type HasHostnameThread (TF.Resource p a) b =
         HasHostnameThread a b

    hostname = TF.configuration . hostname

class HasHostnameTheme a b | a -> b where
    type HasHostnameThemeThread a b :: *

    hostnameTheme
        :: Lens' a (TF.Attribute (HasHostnameThemeThread a b) b)

instance HasHostnameTheme a b => HasHostnameTheme (TF.Resource p a) b where
    type HasHostnameThemeThread (TF.Resource p a) b =
         HasHostnameThemeThread a b

    hostnameTheme = TF.configuration . hostnameTheme

class HasHtml a b | a -> b where
    type HasHtmlThread a b :: *

    html
        :: Lens' a (TF.Attribute (HasHtmlThread a b) b)

instance HasHtml a b => HasHtml (TF.Resource p a) b where
    type HasHtmlThread (TF.Resource p a) b =
         HasHtmlThread a b

    html = TF.configuration . html

class HasHttpMethod a b | a -> b where
    type HasHttpMethodThread a b :: *

    httpMethod
        :: Lens' a (TF.Attribute (HasHttpMethodThread a b) b)

instance HasHttpMethod a b => HasHttpMethod (TF.Resource p a) b where
    type HasHttpMethodThread (TF.Resource p a) b =
         HasHttpMethodThread a b

    httpMethod = TF.configuration . httpMethod

class HasHttpVersion a b | a -> b where
    type HasHttpVersionThread a b :: *

    httpVersion
        :: Lens' a (TF.Attribute (HasHttpVersionThread a b) b)

instance HasHttpVersion a b => HasHttpVersion (TF.Resource p a) b where
    type HasHttpVersionThread (TF.Resource p a) b =
         HasHttpVersionThread a b

    httpVersion = TF.configuration . httpVersion

class HasIamDatabaseAuthenticationEnabled a b | a -> b where
    type HasIamDatabaseAuthenticationEnabledThread a b :: *

    iamDatabaseAuthenticationEnabled
        :: Lens' a (TF.Attribute (HasIamDatabaseAuthenticationEnabledThread a b) b)

instance HasIamDatabaseAuthenticationEnabled a b => HasIamDatabaseAuthenticationEnabled (TF.Resource p a) b where
    type HasIamDatabaseAuthenticationEnabledThread (TF.Resource p a) b =
         HasIamDatabaseAuthenticationEnabledThread a b

    iamDatabaseAuthenticationEnabled = TF.configuration . iamDatabaseAuthenticationEnabled

class HasIamFleetRole a b | a -> b where
    type HasIamFleetRoleThread a b :: *

    iamFleetRole
        :: Lens' a (TF.Attribute (HasIamFleetRoleThread a b) b)

instance HasIamFleetRole a b => HasIamFleetRole (TF.Resource p a) b where
    type HasIamFleetRoleThread (TF.Resource p a) b =
         HasIamFleetRoleThread a b

    iamFleetRole = TF.configuration . iamFleetRole

class HasIamInstanceProfile a b | a -> b where
    type HasIamInstanceProfileThread a b :: *

    iamInstanceProfile
        :: Lens' a (TF.Attribute (HasIamInstanceProfileThread a b) b)

instance HasIamInstanceProfile a b => HasIamInstanceProfile (TF.Resource p a) b where
    type HasIamInstanceProfileThread (TF.Resource p a) b =
         HasIamInstanceProfileThread a b

    iamInstanceProfile = TF.configuration . iamInstanceProfile

class HasIamRole a b | a -> b where
    type HasIamRoleThread a b :: *

    iamRole
        :: Lens' a (TF.Attribute (HasIamRoleThread a b) b)

instance HasIamRole a b => HasIamRole (TF.Resource p a) b where
    type HasIamRoleThread (TF.Resource p a) b =
         HasIamRoleThread a b

    iamRole = TF.configuration . iamRole

class HasIamRoleArn a b | a -> b where
    type HasIamRoleArnThread a b :: *

    iamRoleArn
        :: Lens' a (TF.Attribute (HasIamRoleArnThread a b) b)

instance HasIamRoleArn a b => HasIamRoleArn (TF.Resource p a) b where
    type HasIamRoleArnThread (TF.Resource p a) b =
         HasIamRoleArnThread a b

    iamRoleArn = TF.configuration . iamRoleArn

class HasIamRoles a b | a -> b where
    type HasIamRolesThread a b :: *

    iamRoles
        :: Lens' a (TF.Attribute (HasIamRolesThread a b) b)

instance HasIamRoles a b => HasIamRoles (TF.Resource p a) b where
    type HasIamRolesThread (TF.Resource p a) b =
         HasIamRolesThread a b

    iamRoles = TF.configuration . iamRoles

class HasIcmpCode a b | a -> b where
    type HasIcmpCodeThread a b :: *

    icmpCode
        :: Lens' a (TF.Attribute (HasIcmpCodeThread a b) b)

instance HasIcmpCode a b => HasIcmpCode (TF.Resource p a) b where
    type HasIcmpCodeThread (TF.Resource p a) b =
         HasIcmpCodeThread a b

    icmpCode = TF.configuration . icmpCode

class HasIcmpType a b | a -> b where
    type HasIcmpTypeThread a b :: *

    icmpType
        :: Lens' a (TF.Attribute (HasIcmpTypeThread a b) b)

instance HasIcmpType a b => HasIcmpType (TF.Resource p a) b where
    type HasIcmpTypeThread (TF.Resource p a) b =
         HasIcmpTypeThread a b

    icmpType = TF.configuration . icmpType

class HasIdentifier a b | a -> b where
    type HasIdentifierThread a b :: *

    identifier
        :: Lens' a (TF.Attribute (HasIdentifierThread a b) b)

instance HasIdentifier a b => HasIdentifier (TF.Resource p a) b where
    type HasIdentifierThread (TF.Resource p a) b =
         HasIdentifierThread a b

    identifier = TF.configuration . identifier

class HasIdentifierPrefix a b | a -> b where
    type HasIdentifierPrefixThread a b :: *

    identifierPrefix
        :: Lens' a (TF.Attribute (HasIdentifierPrefixThread a b) b)

instance HasIdentifierPrefix a b => HasIdentifierPrefix (TF.Resource p a) b where
    type HasIdentifierPrefixThread (TF.Resource p a) b =
         HasIdentifierPrefixThread a b

    identifierPrefix = TF.configuration . identifierPrefix

class HasIdentityPoolId a b | a -> b where
    type HasIdentityPoolIdThread a b :: *

    identityPoolId
        :: Lens' a (TF.Attribute (HasIdentityPoolIdThread a b) b)

instance HasIdentityPoolId a b => HasIdentityPoolId (TF.Resource p a) b where
    type HasIdentityPoolIdThread (TF.Resource p a) b =
         HasIdentityPoolIdThread a b

    identityPoolId = TF.configuration . identityPoolId

class HasIdentityPoolName a b | a -> b where
    type HasIdentityPoolNameThread a b :: *

    identityPoolName
        :: Lens' a (TF.Attribute (HasIdentityPoolNameThread a b) b)

instance HasIdentityPoolName a b => HasIdentityPoolName (TF.Resource p a) b where
    type HasIdentityPoolNameThread (TF.Resource p a) b =
         HasIdentityPoolNameThread a b

    identityPoolName = TF.configuration . identityPoolName

class HasIdentitySource a b | a -> b where
    type HasIdentitySourceThread a b :: *

    identitySource
        :: Lens' a (TF.Attribute (HasIdentitySourceThread a b) b)

instance HasIdentitySource a b => HasIdentitySource (TF.Resource p a) b where
    type HasIdentitySourceThread (TF.Resource p a) b =
         HasIdentitySourceThread a b

    identitySource = TF.configuration . identitySource

class HasIdentityValidationExpression a b | a -> b where
    type HasIdentityValidationExpressionThread a b :: *

    identityValidationExpression
        :: Lens' a (TF.Attribute (HasIdentityValidationExpressionThread a b) b)

instance HasIdentityValidationExpression a b => HasIdentityValidationExpression (TF.Resource p a) b where
    type HasIdentityValidationExpressionThread (TF.Resource p a) b =
         HasIdentityValidationExpressionThread a b

    identityValidationExpression = TF.configuration . identityValidationExpression

class HasIdleTimeout a b | a -> b where
    type HasIdleTimeoutThread a b :: *

    idleTimeout
        :: Lens' a (TF.Attribute (HasIdleTimeoutThread a b) b)

instance HasIdleTimeout a b => HasIdleTimeout (TF.Resource p a) b where
    type HasIdleTimeoutThread (TF.Resource p a) b =
         HasIdleTimeoutThread a b

    idleTimeout = TF.configuration . idleTimeout

class HasImageId a b | a -> b where
    type HasImageIdThread a b :: *

    imageId
        :: Lens' a (TF.Attribute (HasImageIdThread a b) b)

instance HasImageId a b => HasImageId (TF.Resource p a) b where
    type HasImageIdThread (TF.Resource p a) b =
         HasImageIdThread a b

    imageId = TF.configuration . imageId

class HasIncludeGlobalServiceEvents a b | a -> b where
    type HasIncludeGlobalServiceEventsThread a b :: *

    includeGlobalServiceEvents
        :: Lens' a (TF.Attribute (HasIncludeGlobalServiceEventsThread a b) b)

instance HasIncludeGlobalServiceEvents a b => HasIncludeGlobalServiceEvents (TF.Resource p a) b where
    type HasIncludeGlobalServiceEventsThread (TF.Resource p a) b =
         HasIncludeGlobalServiceEventsThread a b

    includeGlobalServiceEvents = TF.configuration . includeGlobalServiceEvents

class HasIngress a b | a -> b where
    type HasIngressThread a b :: *

    ingress
        :: Lens' a (TF.Attribute (HasIngressThread a b) b)

instance HasIngress a b => HasIngress (TF.Resource p a) b where
    type HasIngressThread (TF.Resource p a) b =
         HasIngressThread a b

    ingress = TF.configuration . ingress

class HasInitialLifecycleHook a b | a -> b where
    type HasInitialLifecycleHookThread a b :: *

    initialLifecycleHook
        :: Lens' a (TF.Attribute (HasInitialLifecycleHookThread a b) b)

instance HasInitialLifecycleHook a b => HasInitialLifecycleHook (TF.Resource p a) b where
    type HasInitialLifecycleHookThread (TF.Resource p a) b =
         HasInitialLifecycleHookThread a b

    initialLifecycleHook = TF.configuration . initialLifecycleHook

class HasInput a b | a -> b where
    type HasInputThread a b :: *

    input
        :: Lens' a (TF.Attribute (HasInputThread a b) b)

instance HasInput a b => HasInput (TF.Resource p a) b where
    type HasInputThread (TF.Resource p a) b =
         HasInputThread a b

    input = TF.configuration . input

class HasInputBucket a b | a -> b where
    type HasInputBucketThread a b :: *

    inputBucket
        :: Lens' a (TF.Attribute (HasInputBucketThread a b) b)

instance HasInputBucket a b => HasInputBucket (TF.Resource p a) b where
    type HasInputBucketThread (TF.Resource p a) b =
         HasInputBucketThread a b

    inputBucket = TF.configuration . inputBucket

class HasInputParameters a b | a -> b where
    type HasInputParametersThread a b :: *

    inputParameters
        :: Lens' a (TF.Attribute (HasInputParametersThread a b) b)

instance HasInputParameters a b => HasInputParameters (TF.Resource p a) b where
    type HasInputParametersThread (TF.Resource p a) b =
         HasInputParametersThread a b

    inputParameters = TF.configuration . inputParameters

class HasInputPath a b | a -> b where
    type HasInputPathThread a b :: *

    inputPath
        :: Lens' a (TF.Attribute (HasInputPathThread a b) b)

instance HasInputPath a b => HasInputPath (TF.Resource p a) b where
    type HasInputPathThread (TF.Resource p a) b =
         HasInputPathThread a b

    inputPath = TF.configuration . inputPath

class HasInputTransformer a b | a -> b where
    type HasInputTransformerThread a b :: *

    inputTransformer
        :: Lens' a (TF.Attribute (HasInputTransformerThread a b) b)

instance HasInputTransformer a b => HasInputTransformer (TF.Resource p a) b where
    type HasInputTransformerThread (TF.Resource p a) b =
         HasInputTransformerThread a b

    inputTransformer = TF.configuration . inputTransformer

class HasInstallUpdatesOnBoot a b | a -> b where
    type HasInstallUpdatesOnBootThread a b :: *

    installUpdatesOnBoot
        :: Lens' a (TF.Attribute (HasInstallUpdatesOnBootThread a b) b)

instance HasInstallUpdatesOnBoot a b => HasInstallUpdatesOnBoot (TF.Resource p a) b where
    type HasInstallUpdatesOnBootThread (TF.Resource p a) b =
         HasInstallUpdatesOnBootThread a b

    installUpdatesOnBoot = TF.configuration . installUpdatesOnBoot

class HasInstance' a b | a -> b where
    type HasInstance'Thread a b :: *

    instance'
        :: Lens' a (TF.Attribute (HasInstance'Thread a b) b)

instance HasInstance' a b => HasInstance' (TF.Resource p a) b where
    type HasInstance'Thread (TF.Resource p a) b =
         HasInstance'Thread a b

    instance' = TF.configuration . instance'

class HasInstanceClass a b | a -> b where
    type HasInstanceClassThread a b :: *

    instanceClass
        :: Lens' a (TF.Attribute (HasInstanceClassThread a b) b)

instance HasInstanceClass a b => HasInstanceClass (TF.Resource p a) b where
    type HasInstanceClassThread (TF.Resource p a) b =
         HasInstanceClassThread a b

    instanceClass = TF.configuration . instanceClass

class HasInstanceCount a b | a -> b where
    type HasInstanceCountThread a b :: *

    instanceCount
        :: Lens' a (TF.Attribute (HasInstanceCountThread a b) b)

instance HasInstanceCount a b => HasInstanceCount (TF.Resource p a) b where
    type HasInstanceCountThread (TF.Resource p a) b =
         HasInstanceCountThread a b

    instanceCount = TF.configuration . instanceCount

class HasInstanceGroup a b | a -> b where
    type HasInstanceGroupThread a b :: *

    instanceGroup
        :: Lens' a (TF.Attribute (HasInstanceGroupThread a b) b)

instance HasInstanceGroup a b => HasInstanceGroup (TF.Resource p a) b where
    type HasInstanceGroupThread (TF.Resource p a) b =
         HasInstanceGroupThread a b

    instanceGroup = TF.configuration . instanceGroup

class HasInstanceId a b | a -> b where
    type HasInstanceIdThread a b :: *

    instanceId
        :: Lens' a (TF.Attribute (HasInstanceIdThread a b) b)

instance HasInstanceId a b => HasInstanceId (TF.Resource p a) b where
    type HasInstanceIdThread (TF.Resource p a) b =
         HasInstanceIdThread a b

    instanceId = TF.configuration . instanceId

class HasInstanceInitiatedShutdownBehavior a b | a -> b where
    type HasInstanceInitiatedShutdownBehaviorThread a b :: *

    instanceInitiatedShutdownBehavior
        :: Lens' a (TF.Attribute (HasInstanceInitiatedShutdownBehaviorThread a b) b)

instance HasInstanceInitiatedShutdownBehavior a b => HasInstanceInitiatedShutdownBehavior (TF.Resource p a) b where
    type HasInstanceInitiatedShutdownBehaviorThread (TF.Resource p a) b =
         HasInstanceInitiatedShutdownBehaviorThread a b

    instanceInitiatedShutdownBehavior = TF.configuration . instanceInitiatedShutdownBehavior

class HasInstanceInterruptionBehavior a b | a -> b where
    type HasInstanceInterruptionBehaviorThread a b :: *

    instanceInterruptionBehavior
        :: Lens' a (TF.Attribute (HasInstanceInterruptionBehaviorThread a b) b)

instance HasInstanceInterruptionBehavior a b => HasInstanceInterruptionBehavior (TF.Resource p a) b where
    type HasInstanceInterruptionBehaviorThread (TF.Resource p a) b =
         HasInstanceInterruptionBehaviorThread a b

    instanceInterruptionBehavior = TF.configuration . instanceInterruptionBehavior

class HasInstanceName a b | a -> b where
    type HasInstanceNameThread a b :: *

    instanceName
        :: Lens' a (TF.Attribute (HasInstanceNameThread a b) b)

instance HasInstanceName a b => HasInstanceName (TF.Resource p a) b where
    type HasInstanceNameThread (TF.Resource p a) b =
         HasInstanceNameThread a b

    instanceName = TF.configuration . instanceName

class HasInstancePort a b | a -> b where
    type HasInstancePortThread a b :: *

    instancePort
        :: Lens' a (TF.Attribute (HasInstancePortThread a b) b)

instance HasInstancePort a b => HasInstancePort (TF.Resource p a) b where
    type HasInstancePortThread (TF.Resource p a) b =
         HasInstancePortThread a b

    instancePort = TF.configuration . instancePort

class HasInstancePorts a b | a -> b where
    type HasInstancePortsThread a b :: *

    instancePorts
        :: Lens' a (TF.Attribute (HasInstancePortsThread a b) b)

instance HasInstancePorts a b => HasInstancePorts (TF.Resource p a) b where
    type HasInstancePortsThread (TF.Resource p a) b =
         HasInstancePortsThread a b

    instancePorts = TF.configuration . instancePorts

class HasInstanceShutdownTimeout a b | a -> b where
    type HasInstanceShutdownTimeoutThread a b :: *

    instanceShutdownTimeout
        :: Lens' a (TF.Attribute (HasInstanceShutdownTimeoutThread a b) b)

instance HasInstanceShutdownTimeout a b => HasInstanceShutdownTimeout (TF.Resource p a) b where
    type HasInstanceShutdownTimeoutThread (TF.Resource p a) b =
         HasInstanceShutdownTimeoutThread a b

    instanceShutdownTimeout = TF.configuration . instanceShutdownTimeout

class HasInstanceTenancy a b | a -> b where
    type HasInstanceTenancyThread a b :: *

    instanceTenancy
        :: Lens' a (TF.Attribute (HasInstanceTenancyThread a b) b)

instance HasInstanceTenancy a b => HasInstanceTenancy (TF.Resource p a) b where
    type HasInstanceTenancyThread (TF.Resource p a) b =
         HasInstanceTenancyThread a b

    instanceTenancy = TF.configuration . instanceTenancy

class HasInstanceType a b | a -> b where
    type HasInstanceTypeThread a b :: *

    instanceType
        :: Lens' a (TF.Attribute (HasInstanceTypeThread a b) b)

instance HasInstanceType a b => HasInstanceType (TF.Resource p a) b where
    type HasInstanceTypeThread (TF.Resource p a) b =
         HasInstanceTypeThread a b

    instanceType = TF.configuration . instanceType

class HasInstances a b | a -> b where
    type HasInstancesThread a b :: *

    instances
        :: Lens' a (TF.Attribute (HasInstancesThread a b) b)

instance HasInstances a b => HasInstances (TF.Resource p a) b where
    type HasInstancesThread (TF.Resource p a) b =
         HasInstancesThread a b

    instances = TF.configuration . instances

class HasInsufficientDataActions a b | a -> b where
    type HasInsufficientDataActionsThread a b :: *

    insufficientDataActions
        :: Lens' a (TF.Attribute (HasInsufficientDataActionsThread a b) b)

instance HasInsufficientDataActions a b => HasInsufficientDataActions (TF.Resource p a) b where
    type HasInsufficientDataActionsThread (TF.Resource p a) b =
         HasInsufficientDataActionsThread a b

    insufficientDataActions = TF.configuration . insufficientDataActions

class HasInsufficientDataHealthStatus a b | a -> b where
    type HasInsufficientDataHealthStatusThread a b :: *

    insufficientDataHealthStatus
        :: Lens' a (TF.Attribute (HasInsufficientDataHealthStatusThread a b) b)

instance HasInsufficientDataHealthStatus a b => HasInsufficientDataHealthStatus (TF.Resource p a) b where
    type HasInsufficientDataHealthStatusThread (TF.Resource p a) b =
         HasInsufficientDataHealthStatusThread a b

    insufficientDataHealthStatus = TF.configuration . insufficientDataHealthStatus

class HasIntegrationHttpMethod a b | a -> b where
    type HasIntegrationHttpMethodThread a b :: *

    integrationHttpMethod
        :: Lens' a (TF.Attribute (HasIntegrationHttpMethodThread a b) b)

instance HasIntegrationHttpMethod a b => HasIntegrationHttpMethod (TF.Resource p a) b where
    type HasIntegrationHttpMethodThread (TF.Resource p a) b =
         HasIntegrationHttpMethodThread a b

    integrationHttpMethod = TF.configuration . integrationHttpMethod

class HasInternal a b | a -> b where
    type HasInternalThread a b :: *

    internal
        :: Lens' a (TF.Attribute (HasInternalThread a b) b)

instance HasInternal a b => HasInternal (TF.Resource p a) b where
    type HasInternalThread (TF.Resource p a) b =
         HasInternalThread a b

    internal = TF.configuration . internal

class HasInvertHealthcheck a b | a -> b where
    type HasInvertHealthcheckThread a b :: *

    invertHealthcheck
        :: Lens' a (TF.Attribute (HasInvertHealthcheckThread a b) b)

instance HasInvertHealthcheck a b => HasInvertHealthcheck (TF.Resource p a) b where
    type HasInvertHealthcheckThread (TF.Resource p a) b =
         HasInvertHealthcheckThread a b

    invertHealthcheck = TF.configuration . invertHealthcheck

class HasIops a b | a -> b where
    type HasIopsThread a b :: *

    iops
        :: Lens' a (TF.Attribute (HasIopsThread a b) b)

instance HasIops a b => HasIops (TF.Resource p a) b where
    type HasIopsThread (TF.Resource p a) b =
         HasIopsThread a b

    iops = TF.configuration . iops

class HasIpAddress a b | a -> b where
    type HasIpAddressThread a b :: *

    ipAddress
        :: Lens' a (TF.Attribute (HasIpAddressThread a b) b)

instance HasIpAddress a b => HasIpAddress (TF.Resource p a) b where
    type HasIpAddressThread (TF.Resource p a) b =
         HasIpAddressThread a b

    ipAddress = TF.configuration . ipAddress

class HasIpAddressType a b | a -> b where
    type HasIpAddressTypeThread a b :: *

    ipAddressType
        :: Lens' a (TF.Attribute (HasIpAddressTypeThread a b) b)

instance HasIpAddressType a b => HasIpAddressType (TF.Resource p a) b where
    type HasIpAddressTypeThread (TF.Resource p a) b =
         HasIpAddressTypeThread a b

    ipAddressType = TF.configuration . ipAddressType

class HasIpSetDescriptor a b | a -> b where
    type HasIpSetDescriptorThread a b :: *

    ipSetDescriptor
        :: Lens' a (TF.Attribute (HasIpSetDescriptorThread a b) b)

instance HasIpSetDescriptor a b => HasIpSetDescriptor (TF.Resource p a) b where
    type HasIpSetDescriptorThread (TF.Resource p a) b =
         HasIpSetDescriptorThread a b

    ipSetDescriptor = TF.configuration . ipSetDescriptor

class HasIpSetDescriptors a b | a -> b where
    type HasIpSetDescriptorsThread a b :: *

    ipSetDescriptors
        :: Lens' a (TF.Attribute (HasIpSetDescriptorsThread a b) b)

instance HasIpSetDescriptors a b => HasIpSetDescriptors (TF.Resource p a) b where
    type HasIpSetDescriptorsThread (TF.Resource p a) b =
         HasIpSetDescriptorsThread a b

    ipSetDescriptors = TF.configuration . ipSetDescriptors

class HasIpv6AddressCount a b | a -> b where
    type HasIpv6AddressCountThread a b :: *

    ipv6AddressCount
        :: Lens' a (TF.Attribute (HasIpv6AddressCountThread a b) b)

instance HasIpv6AddressCount a b => HasIpv6AddressCount (TF.Resource p a) b where
    type HasIpv6AddressCountThread (TF.Resource p a) b =
         HasIpv6AddressCountThread a b

    ipv6AddressCount = TF.configuration . ipv6AddressCount

class HasIpv6Addresses a b | a -> b where
    type HasIpv6AddressesThread a b :: *

    ipv6Addresses
        :: Lens' a (TF.Attribute (HasIpv6AddressesThread a b) b)

instance HasIpv6Addresses a b => HasIpv6Addresses (TF.Resource p a) b where
    type HasIpv6AddressesThread (TF.Resource p a) b =
         HasIpv6AddressesThread a b

    ipv6Addresses = TF.configuration . ipv6Addresses

class HasIpv6CidrBlock a b | a -> b where
    type HasIpv6CidrBlockThread a b :: *

    ipv6CidrBlock
        :: Lens' a (TF.Attribute (HasIpv6CidrBlockThread a b) b)

instance HasIpv6CidrBlock a b => HasIpv6CidrBlock (TF.Resource p a) b where
    type HasIpv6CidrBlockThread (TF.Resource p a) b =
         HasIpv6CidrBlockThread a b

    ipv6CidrBlock = TF.configuration . ipv6CidrBlock

class HasIpv6CidrBlocks a b | a -> b where
    type HasIpv6CidrBlocksThread a b :: *

    ipv6CidrBlocks
        :: Lens' a (TF.Attribute (HasIpv6CidrBlocksThread a b) b)

instance HasIpv6CidrBlocks a b => HasIpv6CidrBlocks (TF.Resource p a) b where
    type HasIpv6CidrBlocksThread (TF.Resource p a) b =
         HasIpv6CidrBlocksThread a b

    ipv6CidrBlocks = TF.configuration . ipv6CidrBlocks

class HasIsEnabled a b | a -> b where
    type HasIsEnabledThread a b :: *

    isEnabled
        :: Lens' a (TF.Attribute (HasIsEnabledThread a b) b)

instance HasIsEnabled a b => HasIsEnabled (TF.Resource p a) b where
    type HasIsEnabledThread (TF.Resource p a) b =
         HasIsEnabledThread a b

    isEnabled = TF.configuration . isEnabled

class HasIsIpv6Enabled a b | a -> b where
    type HasIsIpv6EnabledThread a b :: *

    isIpv6Enabled
        :: Lens' a (TF.Attribute (HasIsIpv6EnabledThread a b) b)

instance HasIsIpv6Enabled a b => HasIsIpv6Enabled (TF.Resource p a) b where
    type HasIsIpv6EnabledThread (TF.Resource p a) b =
         HasIsIpv6EnabledThread a b

    isIpv6Enabled = TF.configuration . isIpv6Enabled

class HasIsMultiRegionTrail a b | a -> b where
    type HasIsMultiRegionTrailThread a b :: *

    isMultiRegionTrail
        :: Lens' a (TF.Attribute (HasIsMultiRegionTrailThread a b) b)

instance HasIsMultiRegionTrail a b => HasIsMultiRegionTrail (TF.Resource p a) b where
    type HasIsMultiRegionTrailThread (TF.Resource p a) b =
         HasIsMultiRegionTrailThread a b

    isMultiRegionTrail = TF.configuration . isMultiRegionTrail

class HasJvmOptions a b | a -> b where
    type HasJvmOptionsThread a b :: *

    jvmOptions
        :: Lens' a (TF.Attribute (HasJvmOptionsThread a b) b)

instance HasJvmOptions a b => HasJvmOptions (TF.Resource p a) b where
    type HasJvmOptionsThread (TF.Resource p a) b =
         HasJvmOptionsThread a b

    jvmOptions = TF.configuration . jvmOptions

class HasJvmType a b | a -> b where
    type HasJvmTypeThread a b :: *

    jvmType
        :: Lens' a (TF.Attribute (HasJvmTypeThread a b) b)

instance HasJvmType a b => HasJvmType (TF.Resource p a) b where
    type HasJvmTypeThread (TF.Resource p a) b =
         HasJvmTypeThread a b

    jvmType = TF.configuration . jvmType

class HasJvmVersion a b | a -> b where
    type HasJvmVersionThread a b :: *

    jvmVersion
        :: Lens' a (TF.Attribute (HasJvmVersionThread a b) b)

instance HasJvmVersion a b => HasJvmVersion (TF.Resource p a) b where
    type HasJvmVersionThread (TF.Resource p a) b =
         HasJvmVersionThread a b

    jvmVersion = TF.configuration . jvmVersion

class HasKeepJobFlowAliveWhenNoSteps a b | a -> b where
    type HasKeepJobFlowAliveWhenNoStepsThread a b :: *

    keepJobFlowAliveWhenNoSteps
        :: Lens' a (TF.Attribute (HasKeepJobFlowAliveWhenNoStepsThread a b) b)

instance HasKeepJobFlowAliveWhenNoSteps a b => HasKeepJobFlowAliveWhenNoSteps (TF.Resource p a) b where
    type HasKeepJobFlowAliveWhenNoStepsThread (TF.Resource p a) b =
         HasKeepJobFlowAliveWhenNoStepsThread a b

    keepJobFlowAliveWhenNoSteps = TF.configuration . keepJobFlowAliveWhenNoSteps

class HasKey a b | a -> b where
    type HasKeyThread a b :: *

    key
        :: Lens' a (TF.Attribute (HasKeyThread a b) b)

instance HasKey a b => HasKey (TF.Resource p a) b where
    type HasKeyThread (TF.Resource p a) b =
         HasKeyThread a b

    key = TF.configuration . key

class HasKeyId a b | a -> b where
    type HasKeyIdThread a b :: *

    keyId
        :: Lens' a (TF.Attribute (HasKeyIdThread a b) b)

instance HasKeyId a b => HasKeyId (TF.Resource p a) b where
    type HasKeyIdThread (TF.Resource p a) b =
         HasKeyIdThread a b

    keyId = TF.configuration . keyId

class HasKeyName a b | a -> b where
    type HasKeyNameThread a b :: *

    keyName
        :: Lens' a (TF.Attribute (HasKeyNameThread a b) b)

instance HasKeyName a b => HasKeyName (TF.Resource p a) b where
    type HasKeyNameThread (TF.Resource p a) b =
         HasKeyNameThread a b

    keyName = TF.configuration . keyName

class HasKeyNamePrefix a b | a -> b where
    type HasKeyNamePrefixThread a b :: *

    keyNamePrefix
        :: Lens' a (TF.Attribute (HasKeyNamePrefixThread a b) b)

instance HasKeyNamePrefix a b => HasKeyNamePrefix (TF.Resource p a) b where
    type HasKeyNamePrefixThread (TF.Resource p a) b =
         HasKeyNamePrefixThread a b

    keyNamePrefix = TF.configuration . keyNamePrefix

class HasKeyPairName a b | a -> b where
    type HasKeyPairNameThread a b :: *

    keyPairName
        :: Lens' a (TF.Attribute (HasKeyPairNameThread a b) b)

instance HasKeyPairName a b => HasKeyPairName (TF.Resource p a) b where
    type HasKeyPairNameThread (TF.Resource p a) b =
         HasKeyPairNameThread a b

    keyPairName = TF.configuration . keyPairName

class HasKeyType a b | a -> b where
    type HasKeyTypeThread a b :: *

    keyType
        :: Lens' a (TF.Attribute (HasKeyTypeThread a b) b)

instance HasKeyType a b => HasKeyType (TF.Resource p a) b where
    type HasKeyTypeThread (TF.Resource p a) b =
         HasKeyTypeThread a b

    keyType = TF.configuration . keyType

class HasKeyUsage a b | a -> b where
    type HasKeyUsageThread a b :: *

    keyUsage
        :: Lens' a (TF.Attribute (HasKeyUsageThread a b) b)

instance HasKeyUsage a b => HasKeyUsage (TF.Resource p a) b where
    type HasKeyUsageThread (TF.Resource p a) b =
         HasKeyUsageThread a b

    keyUsage = TF.configuration . keyUsage

class HasKinesisDestination a b | a -> b where
    type HasKinesisDestinationThread a b :: *

    kinesisDestination
        :: Lens' a (TF.Attribute (HasKinesisDestinationThread a b) b)

instance HasKinesisDestination a b => HasKinesisDestination (TF.Resource p a) b where
    type HasKinesisDestinationThread (TF.Resource p a) b =
         HasKinesisDestinationThread a b

    kinesisDestination = TF.configuration . kinesisDestination

class HasKinesisSourceConfiguration a b | a -> b where
    type HasKinesisSourceConfigurationThread a b :: *

    kinesisSourceConfiguration
        :: Lens' a (TF.Attribute (HasKinesisSourceConfigurationThread a b) b)

instance HasKinesisSourceConfiguration a b => HasKinesisSourceConfiguration (TF.Resource p a) b where
    type HasKinesisSourceConfigurationThread (TF.Resource p a) b =
         HasKinesisSourceConfigurationThread a b

    kinesisSourceConfiguration = TF.configuration . kinesisSourceConfiguration

class HasKmsDataKeyReusePeriodSeconds a b | a -> b where
    type HasKmsDataKeyReusePeriodSecondsThread a b :: *

    kmsDataKeyReusePeriodSeconds
        :: Lens' a (TF.Attribute (HasKmsDataKeyReusePeriodSecondsThread a b) b)

instance HasKmsDataKeyReusePeriodSeconds a b => HasKmsDataKeyReusePeriodSeconds (TF.Resource p a) b where
    type HasKmsDataKeyReusePeriodSecondsThread (TF.Resource p a) b =
         HasKmsDataKeyReusePeriodSecondsThread a b

    kmsDataKeyReusePeriodSeconds = TF.configuration . kmsDataKeyReusePeriodSeconds

class HasKmsKeyArn a b | a -> b where
    type HasKmsKeyArnThread a b :: *

    kmsKeyArn
        :: Lens' a (TF.Attribute (HasKmsKeyArnThread a b) b)

instance HasKmsKeyArn a b => HasKmsKeyArn (TF.Resource p a) b where
    type HasKmsKeyArnThread (TF.Resource p a) b =
         HasKmsKeyArnThread a b

    kmsKeyArn = TF.configuration . kmsKeyArn

class HasKmsKeyId a b | a -> b where
    type HasKmsKeyIdThread a b :: *

    kmsKeyId
        :: Lens' a (TF.Attribute (HasKmsKeyIdThread a b) b)

instance HasKmsKeyId a b => HasKmsKeyId (TF.Resource p a) b where
    type HasKmsKeyIdThread (TF.Resource p a) b =
         HasKmsKeyIdThread a b

    kmsKeyId = TF.configuration . kmsKeyId

class HasKmsMasterKeyId a b | a -> b where
    type HasKmsMasterKeyIdThread a b :: *

    kmsMasterKeyId
        :: Lens' a (TF.Attribute (HasKmsMasterKeyIdThread a b) b)

instance HasKmsMasterKeyId a b => HasKmsMasterKeyId (TF.Resource p a) b where
    type HasKmsMasterKeyIdThread (TF.Resource p a) b =
         HasKmsMasterKeyIdThread a b

    kmsMasterKeyId = TF.configuration . kmsMasterKeyId

class HasLagId a b | a -> b where
    type HasLagIdThread a b :: *

    lagId
        :: Lens' a (TF.Attribute (HasLagIdThread a b) b)

instance HasLagId a b => HasLagId (TF.Resource p a) b where
    type HasLagIdThread (TF.Resource p a) b =
         HasLagIdThread a b

    lagId = TF.configuration . lagId

class HasLambdaAction a b | a -> b where
    type HasLambdaActionThread a b :: *

    lambdaAction
        :: Lens' a (TF.Attribute (HasLambdaActionThread a b) b)

instance HasLambdaAction a b => HasLambdaAction (TF.Resource p a) b where
    type HasLambdaActionThread (TF.Resource p a) b =
         HasLambdaActionThread a b

    lambdaAction = TF.configuration . lambdaAction

class HasLambdaConfig a b | a -> b where
    type HasLambdaConfigThread a b :: *

    lambdaConfig
        :: Lens' a (TF.Attribute (HasLambdaConfigThread a b) b)

instance HasLambdaConfig a b => HasLambdaConfig (TF.Resource p a) b where
    type HasLambdaConfigThread (TF.Resource p a) b =
         HasLambdaConfigThread a b

    lambdaConfig = TF.configuration . lambdaConfig

class HasLambdaFunction a b | a -> b where
    type HasLambdaFunctionThread a b :: *

    lambdaFunction
        :: Lens' a (TF.Attribute (HasLambdaFunctionThread a b) b)

instance HasLambdaFunction a b => HasLambdaFunction (TF.Resource p a) b where
    type HasLambdaFunctionThread (TF.Resource p a) b =
         HasLambdaFunctionThread a b

    lambdaFunction = TF.configuration . lambdaFunction

class HasLatencyRoutingPolicy a b | a -> b where
    type HasLatencyRoutingPolicyThread a b :: *

    latencyRoutingPolicy
        :: Lens' a (TF.Attribute (HasLatencyRoutingPolicyThread a b) b)

instance HasLatencyRoutingPolicy a b => HasLatencyRoutingPolicy (TF.Resource p a) b where
    type HasLatencyRoutingPolicyThread (TF.Resource p a) b =
         HasLatencyRoutingPolicyThread a b

    latencyRoutingPolicy = TF.configuration . latencyRoutingPolicy

class HasLaunchConfiguration a b | a -> b where
    type HasLaunchConfigurationThread a b :: *

    launchConfiguration
        :: Lens' a (TF.Attribute (HasLaunchConfigurationThread a b) b)

instance HasLaunchConfiguration a b => HasLaunchConfiguration (TF.Resource p a) b where
    type HasLaunchConfigurationThread (TF.Resource p a) b =
         HasLaunchConfigurationThread a b

    launchConfiguration = TF.configuration . launchConfiguration

class HasLaunchGroup a b | a -> b where
    type HasLaunchGroupThread a b :: *

    launchGroup
        :: Lens' a (TF.Attribute (HasLaunchGroupThread a b) b)

instance HasLaunchGroup a b => HasLaunchGroup (TF.Resource p a) b where
    type HasLaunchGroupThread (TF.Resource p a) b =
         HasLaunchGroupThread a b

    launchGroup = TF.configuration . launchGroup

class HasLaunchSpecification a b | a -> b where
    type HasLaunchSpecificationThread a b :: *

    launchSpecification
        :: Lens' a (TF.Attribute (HasLaunchSpecificationThread a b) b)

instance HasLaunchSpecification a b => HasLaunchSpecification (TF.Resource p a) b where
    type HasLaunchSpecificationThread (TF.Resource p a) b =
         HasLaunchSpecificationThread a b

    launchSpecification = TF.configuration . launchSpecification

class HasLaunchType a b | a -> b where
    type HasLaunchTypeThread a b :: *

    launchType
        :: Lens' a (TF.Attribute (HasLaunchTypeThread a b) b)

instance HasLaunchType a b => HasLaunchType (TF.Resource p a) b where
    type HasLaunchTypeThread (TF.Resource p a) b =
         HasLaunchTypeThread a b

    launchType = TF.configuration . launchType

class HasLayerIds a b | a -> b where
    type HasLayerIdsThread a b :: *

    layerIds
        :: Lens' a (TF.Attribute (HasLayerIdsThread a b) b)

instance HasLayerIds a b => HasLayerIds (TF.Resource p a) b where
    type HasLayerIdsThread (TF.Resource p a) b =
         HasLayerIdsThread a b

    layerIds = TF.configuration . layerIds

class HasLbPort a b | a -> b where
    type HasLbPortThread a b :: *

    lbPort
        :: Lens' a (TF.Attribute (HasLbPortThread a b) b)

instance HasLbPort a b => HasLbPort (TF.Resource p a) b where
    type HasLbPortThread (TF.Resource p a) b =
         HasLbPortThread a b

    lbPort = TF.configuration . lbPort

class HasLevel a b | a -> b where
    type HasLevelThread a b :: *

    level
        :: Lens' a (TF.Attribute (HasLevelThread a b) b)

instance HasLevel a b => HasLevel (TF.Resource p a) b where
    type HasLevelThread (TF.Resource p a) b =
         HasLevelThread a b

    level = TF.configuration . level

class HasLicenseModel a b | a -> b where
    type HasLicenseModelThread a b :: *

    licenseModel
        :: Lens' a (TF.Attribute (HasLicenseModelThread a b) b)

instance HasLicenseModel a b => HasLicenseModel (TF.Resource p a) b where
    type HasLicenseModelThread (TF.Resource p a) b =
         HasLicenseModelThread a b

    licenseModel = TF.configuration . licenseModel

class HasLifecycleRule a b | a -> b where
    type HasLifecycleRuleThread a b :: *

    lifecycleRule
        :: Lens' a (TF.Attribute (HasLifecycleRuleThread a b) b)

instance HasLifecycleRule a b => HasLifecycleRule (TF.Resource p a) b where
    type HasLifecycleRuleThread (TF.Resource p a) b =
         HasLifecycleRuleThread a b

    lifecycleRule = TF.configuration . lifecycleRule

class HasLifecycleTransition a b | a -> b where
    type HasLifecycleTransitionThread a b :: *

    lifecycleTransition
        :: Lens' a (TF.Attribute (HasLifecycleTransitionThread a b) b)

instance HasLifecycleTransition a b => HasLifecycleTransition (TF.Resource p a) b where
    type HasLifecycleTransitionThread (TF.Resource p a) b =
         HasLifecycleTransitionThread a b

    lifecycleTransition = TF.configuration . lifecycleTransition

class HasListener a b | a -> b where
    type HasListenerThread a b :: *

    listener
        :: Lens' a (TF.Attribute (HasListenerThread a b) b)

instance HasListener a b => HasListener (TF.Resource p a) b where
    type HasListenerThread (TF.Resource p a) b =
         HasListenerThread a b

    listener = TF.configuration . listener

class HasListenerArn a b | a -> b where
    type HasListenerArnThread a b :: *

    listenerArn
        :: Lens' a (TF.Attribute (HasListenerArnThread a b) b)

instance HasListenerArn a b => HasListenerArn (TF.Resource p a) b where
    type HasListenerArnThread (TF.Resource p a) b =
         HasListenerArnThread a b

    listenerArn = TF.configuration . listenerArn

class HasLoadBalancer a b | a -> b where
    type HasLoadBalancerThread a b :: *

    loadBalancer
        :: Lens' a (TF.Attribute (HasLoadBalancerThread a b) b)

instance HasLoadBalancer a b => HasLoadBalancer (TF.Resource p a) b where
    type HasLoadBalancerThread (TF.Resource p a) b =
         HasLoadBalancerThread a b

    loadBalancer = TF.configuration . loadBalancer

class HasLoadBalancerArn a b | a -> b where
    type HasLoadBalancerArnThread a b :: *

    loadBalancerArn
        :: Lens' a (TF.Attribute (HasLoadBalancerArnThread a b) b)

instance HasLoadBalancerArn a b => HasLoadBalancerArn (TF.Resource p a) b where
    type HasLoadBalancerArnThread (TF.Resource p a) b =
         HasLoadBalancerArnThread a b

    loadBalancerArn = TF.configuration . loadBalancerArn

class HasLoadBalancerInfo a b | a -> b where
    type HasLoadBalancerInfoThread a b :: *

    loadBalancerInfo
        :: Lens' a (TF.Attribute (HasLoadBalancerInfoThread a b) b)

instance HasLoadBalancerInfo a b => HasLoadBalancerInfo (TF.Resource p a) b where
    type HasLoadBalancerInfoThread (TF.Resource p a) b =
         HasLoadBalancerInfoThread a b

    loadBalancerInfo = TF.configuration . loadBalancerInfo

class HasLoadBalancerName a b | a -> b where
    type HasLoadBalancerNameThread a b :: *

    loadBalancerName
        :: Lens' a (TF.Attribute (HasLoadBalancerNameThread a b) b)

instance HasLoadBalancerName a b => HasLoadBalancerName (TF.Resource p a) b where
    type HasLoadBalancerNameThread (TF.Resource p a) b =
         HasLoadBalancerNameThread a b

    loadBalancerName = TF.configuration . loadBalancerName

class HasLoadBalancerPort a b | a -> b where
    type HasLoadBalancerPortThread a b :: *

    loadBalancerPort
        :: Lens' a (TF.Attribute (HasLoadBalancerPortThread a b) b)

instance HasLoadBalancerPort a b => HasLoadBalancerPort (TF.Resource p a) b where
    type HasLoadBalancerPortThread (TF.Resource p a) b =
         HasLoadBalancerPortThread a b

    loadBalancerPort = TF.configuration . loadBalancerPort

class HasLoadBalancerType a b | a -> b where
    type HasLoadBalancerTypeThread a b :: *

    loadBalancerType
        :: Lens' a (TF.Attribute (HasLoadBalancerTypeThread a b) b)

instance HasLoadBalancerType a b => HasLoadBalancerType (TF.Resource p a) b where
    type HasLoadBalancerTypeThread (TF.Resource p a) b =
         HasLoadBalancerTypeThread a b

    loadBalancerType = TF.configuration . loadBalancerType

class HasLoadBalancers a b | a -> b where
    type HasLoadBalancersThread a b :: *

    loadBalancers
        :: Lens' a (TF.Attribute (HasLoadBalancersThread a b) b)

instance HasLoadBalancers a b => HasLoadBalancers (TF.Resource p a) b where
    type HasLoadBalancersThread (TF.Resource p a) b =
         HasLoadBalancersThread a b

    loadBalancers = TF.configuration . loadBalancers

class HasLocalSecondaryIndex a b | a -> b where
    type HasLocalSecondaryIndexThread a b :: *

    localSecondaryIndex
        :: Lens' a (TF.Attribute (HasLocalSecondaryIndexThread a b) b)

instance HasLocalSecondaryIndex a b => HasLocalSecondaryIndex (TF.Resource p a) b where
    type HasLocalSecondaryIndexThread (TF.Resource p a) b =
         HasLocalSecondaryIndexThread a b

    localSecondaryIndex = TF.configuration . localSecondaryIndex

class HasLocation a b | a -> b where
    type HasLocationThread a b :: *

    location
        :: Lens' a (TF.Attribute (HasLocationThread a b) b)

instance HasLocation a b => HasLocation (TF.Resource p a) b where
    type HasLocationThread (TF.Resource p a) b =
         HasLocationThread a b

    location = TF.configuration . location

class HasLocationUri a b | a -> b where
    type HasLocationUriThread a b :: *

    locationUri
        :: Lens' a (TF.Attribute (HasLocationUriThread a b) b)

instance HasLocationUri a b => HasLocationUri (TF.Resource p a) b where
    type HasLocationUriThread (TF.Resource p a) b =
         HasLocationUriThread a b

    locationUri = TF.configuration . locationUri

class HasLogGroupName a b | a -> b where
    type HasLogGroupNameThread a b :: *

    logGroupName
        :: Lens' a (TF.Attribute (HasLogGroupNameThread a b) b)

instance HasLogGroupName a b => HasLogGroupName (TF.Resource p a) b where
    type HasLogGroupNameThread (TF.Resource p a) b =
         HasLogGroupNameThread a b

    logGroupName = TF.configuration . logGroupName

class HasLogPublishingOptions a b | a -> b where
    type HasLogPublishingOptionsThread a b :: *

    logPublishingOptions
        :: Lens' a (TF.Attribute (HasLogPublishingOptionsThread a b) b)

instance HasLogPublishingOptions a b => HasLogPublishingOptions (TF.Resource p a) b where
    type HasLogPublishingOptionsThread (TF.Resource p a) b =
         HasLogPublishingOptionsThread a b

    logPublishingOptions = TF.configuration . logPublishingOptions

class HasLogUri a b | a -> b where
    type HasLogUriThread a b :: *

    logUri
        :: Lens' a (TF.Attribute (HasLogUriThread a b) b)

instance HasLogUri a b => HasLogUri (TF.Resource p a) b where
    type HasLogUriThread (TF.Resource p a) b =
         HasLogUriThread a b

    logUri = TF.configuration . logUri

class HasLogging a b | a -> b where
    type HasLoggingThread a b :: *

    logging
        :: Lens' a (TF.Attribute (HasLoggingThread a b) b)

instance HasLogging a b => HasLogging (TF.Resource p a) b where
    type HasLoggingThread (TF.Resource p a) b =
         HasLoggingThread a b

    logging = TF.configuration . logging

class HasLoggingConfig a b | a -> b where
    type HasLoggingConfigThread a b :: *

    loggingConfig
        :: Lens' a (TF.Attribute (HasLoggingConfigThread a b) b)

instance HasLoggingConfig a b => HasLoggingConfig (TF.Resource p a) b where
    type HasLoggingConfigThread (TF.Resource p a) b =
         HasLoggingConfigThread a b

    loggingConfig = TF.configuration . loggingConfig

class HasLoggingInfo a b | a -> b where
    type HasLoggingInfoThread a b :: *

    loggingInfo
        :: Lens' a (TF.Attribute (HasLoggingInfoThread a b) b)

instance HasLoggingInfo a b => HasLoggingInfo (TF.Resource p a) b where
    type HasLoggingInfoThread (TF.Resource p a) b =
         HasLoggingInfoThread a b

    loggingInfo = TF.configuration . loggingInfo

class HasLogoutUrls a b | a -> b where
    type HasLogoutUrlsThread a b :: *

    logoutUrls
        :: Lens' a (TF.Attribute (HasLogoutUrlsThread a b) b)

instance HasLogoutUrls a b => HasLogoutUrls (TF.Resource p a) b where
    type HasLogoutUrlsThread (TF.Resource p a) b =
         HasLogoutUrlsThread a b

    logoutUrls = TF.configuration . logoutUrls

class HasMaintenanceWindow a b | a -> b where
    type HasMaintenanceWindowThread a b :: *

    maintenanceWindow
        :: Lens' a (TF.Attribute (HasMaintenanceWindowThread a b) b)

instance HasMaintenanceWindow a b => HasMaintenanceWindow (TF.Resource p a) b where
    type HasMaintenanceWindowThread (TF.Resource p a) b =
         HasMaintenanceWindowThread a b

    maintenanceWindow = TF.configuration . maintenanceWindow

class HasMaintenanceWindowStartTime a b | a -> b where
    type HasMaintenanceWindowStartTimeThread a b :: *

    maintenanceWindowStartTime
        :: Lens' a (TF.Attribute (HasMaintenanceWindowStartTimeThread a b) b)

instance HasMaintenanceWindowStartTime a b => HasMaintenanceWindowStartTime (TF.Resource p a) b where
    type HasMaintenanceWindowStartTimeThread (TF.Resource p a) b =
         HasMaintenanceWindowStartTimeThread a b

    maintenanceWindowStartTime = TF.configuration . maintenanceWindowStartTime

class HasMajorEngineVersion a b | a -> b where
    type HasMajorEngineVersionThread a b :: *

    majorEngineVersion
        :: Lens' a (TF.Attribute (HasMajorEngineVersionThread a b) b)

instance HasMajorEngineVersion a b => HasMajorEngineVersion (TF.Resource p a) b where
    type HasMajorEngineVersionThread (TF.Resource p a) b =
         HasMajorEngineVersionThread a b

    majorEngineVersion = TF.configuration . majorEngineVersion

class HasManageBerkshelf a b | a -> b where
    type HasManageBerkshelfThread a b :: *

    manageBerkshelf
        :: Lens' a (TF.Attribute (HasManageBerkshelfThread a b) b)

instance HasManageBerkshelf a b => HasManageBerkshelf (TF.Resource p a) b where
    type HasManageBerkshelfThread (TF.Resource p a) b =
         HasManageBerkshelfThread a b

    manageBerkshelf = TF.configuration . manageBerkshelf

class HasManageBundler a b | a -> b where
    type HasManageBundlerThread a b :: *

    manageBundler
        :: Lens' a (TF.Attribute (HasManageBundlerThread a b) b)

instance HasManageBundler a b => HasManageBundler (TF.Resource p a) b where
    type HasManageBundlerThread (TF.Resource p a) b =
         HasManageBundlerThread a b

    manageBundler = TF.configuration . manageBundler

class HasMapPublicIpOnLaunch a b | a -> b where
    type HasMapPublicIpOnLaunchThread a b :: *

    mapPublicIpOnLaunch
        :: Lens' a (TF.Attribute (HasMapPublicIpOnLaunchThread a b) b)

instance HasMapPublicIpOnLaunch a b => HasMapPublicIpOnLaunch (TF.Resource p a) b where
    type HasMapPublicIpOnLaunchThread (TF.Resource p a) b =
         HasMapPublicIpOnLaunchThread a b

    mapPublicIpOnLaunch = TF.configuration . mapPublicIpOnLaunch

class HasMasterInstanceType a b | a -> b where
    type HasMasterInstanceTypeThread a b :: *

    masterInstanceType
        :: Lens' a (TF.Attribute (HasMasterInstanceTypeThread a b) b)

instance HasMasterInstanceType a b => HasMasterInstanceType (TF.Resource p a) b where
    type HasMasterInstanceTypeThread (TF.Resource p a) b =
         HasMasterInstanceTypeThread a b

    masterInstanceType = TF.configuration . masterInstanceType

class HasMasterPassword a b | a -> b where
    type HasMasterPasswordThread a b :: *

    masterPassword
        :: Lens' a (TF.Attribute (HasMasterPasswordThread a b) b)

instance HasMasterPassword a b => HasMasterPassword (TF.Resource p a) b where
    type HasMasterPasswordThread (TF.Resource p a) b =
         HasMasterPasswordThread a b

    masterPassword = TF.configuration . masterPassword

class HasMasterUsername a b | a -> b where
    type HasMasterUsernameThread a b :: *

    masterUsername
        :: Lens' a (TF.Attribute (HasMasterUsernameThread a b) b)

instance HasMasterUsername a b => HasMasterUsername (TF.Resource p a) b where
    type HasMasterUsernameThread (TF.Resource p a) b =
         HasMasterUsernameThread a b

    masterUsername = TF.configuration . masterUsername

class HasMatchingTypes a b | a -> b where
    type HasMatchingTypesThread a b :: *

    matchingTypes
        :: Lens' a (TF.Attribute (HasMatchingTypesThread a b) b)

instance HasMatchingTypes a b => HasMatchingTypes (TF.Resource p a) b where
    type HasMatchingTypesThread (TF.Resource p a) b =
         HasMatchingTypesThread a b

    matchingTypes = TF.configuration . matchingTypes

class HasMaxCapacity a b | a -> b where
    type HasMaxCapacityThread a b :: *

    maxCapacity
        :: Lens' a (TF.Attribute (HasMaxCapacityThread a b) b)

instance HasMaxCapacity a b => HasMaxCapacity (TF.Resource p a) b where
    type HasMaxCapacityThread (TF.Resource p a) b =
         HasMaxCapacityThread a b

    maxCapacity = TF.configuration . maxCapacity

class HasMaxConcurrency a b | a -> b where
    type HasMaxConcurrencyThread a b :: *

    maxConcurrency
        :: Lens' a (TF.Attribute (HasMaxConcurrencyThread a b) b)

instance HasMaxConcurrency a b => HasMaxConcurrency (TF.Resource p a) b where
    type HasMaxConcurrencyThread (TF.Resource p a) b =
         HasMaxConcurrencyThread a b

    maxConcurrency = TF.configuration . maxConcurrency

class HasMaxErrors a b | a -> b where
    type HasMaxErrorsThread a b :: *

    maxErrors
        :: Lens' a (TF.Attribute (HasMaxErrorsThread a b) b)

instance HasMaxErrors a b => HasMaxErrors (TF.Resource p a) b where
    type HasMaxErrorsThread (TF.Resource p a) b =
         HasMaxErrorsThread a b

    maxErrors = TF.configuration . maxErrors

class HasMaxMessageSize a b | a -> b where
    type HasMaxMessageSizeThread a b :: *

    maxMessageSize
        :: Lens' a (TF.Attribute (HasMaxMessageSizeThread a b) b)

instance HasMaxMessageSize a b => HasMaxMessageSize (TF.Resource p a) b where
    type HasMaxMessageSizeThread (TF.Resource p a) b =
         HasMaxMessageSizeThread a b

    maxMessageSize = TF.configuration . maxMessageSize

class HasMaxPasswordAge a b | a -> b where
    type HasMaxPasswordAgeThread a b :: *

    maxPasswordAge
        :: Lens' a (TF.Attribute (HasMaxPasswordAgeThread a b) b)

instance HasMaxPasswordAge a b => HasMaxPasswordAge (TF.Resource p a) b where
    type HasMaxPasswordAgeThread (TF.Resource p a) b =
         HasMaxPasswordAgeThread a b

    maxPasswordAge = TF.configuration . maxPasswordAge

class HasMaxSize a b | a -> b where
    type HasMaxSizeThread a b :: *

    maxSize
        :: Lens' a (TF.Attribute (HasMaxSizeThread a b) b)

instance HasMaxSize a b => HasMaxSize (TF.Resource p a) b where
    type HasMaxSizeThread (TF.Resource p a) b =
         HasMaxSizeThread a b

    maxSize = TF.configuration . maxSize

class HasMaximumExecutionFrequency a b | a -> b where
    type HasMaximumExecutionFrequencyThread a b :: *

    maximumExecutionFrequency
        :: Lens' a (TF.Attribute (HasMaximumExecutionFrequencyThread a b) b)

instance HasMaximumExecutionFrequency a b => HasMaximumExecutionFrequency (TF.Resource p a) b where
    type HasMaximumExecutionFrequencyThread (TF.Resource p a) b =
         HasMaximumExecutionFrequencyThread a b

    maximumExecutionFrequency = TF.configuration . maximumExecutionFrequency

class HasMeasureLatency a b | a -> b where
    type HasMeasureLatencyThread a b :: *

    measureLatency
        :: Lens' a (TF.Attribute (HasMeasureLatencyThread a b) b)

instance HasMeasureLatency a b => HasMeasureLatency (TF.Resource p a) b where
    type HasMeasureLatencyThread (TF.Resource p a) b =
         HasMeasureLatencyThread a b

    measureLatency = TF.configuration . measureLatency

class HasMemorySize a b | a -> b where
    type HasMemorySizeThread a b :: *

    memorySize
        :: Lens' a (TF.Attribute (HasMemorySizeThread a b) b)

instance HasMemorySize a b => HasMemorySize (TF.Resource p a) b where
    type HasMemorySizeThread (TF.Resource p a) b =
         HasMemorySizeThread a b

    memorySize = TF.configuration . memorySize

class HasMessageRetentionSeconds a b | a -> b where
    type HasMessageRetentionSecondsThread a b :: *

    messageRetentionSeconds
        :: Lens' a (TF.Attribute (HasMessageRetentionSecondsThread a b) b)

instance HasMessageRetentionSeconds a b => HasMessageRetentionSeconds (TF.Resource p a) b where
    type HasMessageRetentionSecondsThread (TF.Resource p a) b =
         HasMessageRetentionSecondsThread a b

    messageRetentionSeconds = TF.configuration . messageRetentionSeconds

class HasMethodPath a b | a -> b where
    type HasMethodPathThread a b :: *

    methodPath
        :: Lens' a (TF.Attribute (HasMethodPathThread a b) b)

instance HasMethodPath a b => HasMethodPath (TF.Resource p a) b where
    type HasMethodPathThread (TF.Resource p a) b =
         HasMethodPathThread a b

    methodPath = TF.configuration . methodPath

class HasMetricName a b | a -> b where
    type HasMetricNameThread a b :: *

    metricName
        :: Lens' a (TF.Attribute (HasMetricNameThread a b) b)

instance HasMetricName a b => HasMetricName (TF.Resource p a) b where
    type HasMetricNameThread (TF.Resource p a) b =
         HasMetricNameThread a b

    metricName = TF.configuration . metricName

class HasMetricTransformation a b | a -> b where
    type HasMetricTransformationThread a b :: *

    metricTransformation
        :: Lens' a (TF.Attribute (HasMetricTransformationThread a b) b)

instance HasMetricTransformation a b => HasMetricTransformation (TF.Resource p a) b where
    type HasMetricTransformationThread (TF.Resource p a) b =
         HasMetricTransformationThread a b

    metricTransformation = TF.configuration . metricTransformation

class HasMetricsGranularity a b | a -> b where
    type HasMetricsGranularityThread a b :: *

    metricsGranularity
        :: Lens' a (TF.Attribute (HasMetricsGranularityThread a b) b)

instance HasMetricsGranularity a b => HasMetricsGranularity (TF.Resource p a) b where
    type HasMetricsGranularityThread (TF.Resource p a) b =
         HasMetricsGranularityThread a b

    metricsGranularity = TF.configuration . metricsGranularity

class HasMfaConfiguration a b | a -> b where
    type HasMfaConfigurationThread a b :: *

    mfaConfiguration
        :: Lens' a (TF.Attribute (HasMfaConfigurationThread a b) b)

instance HasMfaConfiguration a b => HasMfaConfiguration (TF.Resource p a) b where
    type HasMfaConfigurationThread (TF.Resource p a) b =
         HasMfaConfigurationThread a b

    mfaConfiguration = TF.configuration . mfaConfiguration

class HasMigrationType a b | a -> b where
    type HasMigrationTypeThread a b :: *

    migrationType
        :: Lens' a (TF.Attribute (HasMigrationTypeThread a b) b)

instance HasMigrationType a b => HasMigrationType (TF.Resource p a) b where
    type HasMigrationTypeThread (TF.Resource p a) b =
         HasMigrationTypeThread a b

    migrationType = TF.configuration . migrationType

class HasMinCapacity a b | a -> b where
    type HasMinCapacityThread a b :: *

    minCapacity
        :: Lens' a (TF.Attribute (HasMinCapacityThread a b) b)

instance HasMinCapacity a b => HasMinCapacity (TF.Resource p a) b where
    type HasMinCapacityThread (TF.Resource p a) b =
         HasMinCapacityThread a b

    minCapacity = TF.configuration . minCapacity

class HasMinElbCapacity a b | a -> b where
    type HasMinElbCapacityThread a b :: *

    minElbCapacity
        :: Lens' a (TF.Attribute (HasMinElbCapacityThread a b) b)

instance HasMinElbCapacity a b => HasMinElbCapacity (TF.Resource p a) b where
    type HasMinElbCapacityThread (TF.Resource p a) b =
         HasMinElbCapacityThread a b

    minElbCapacity = TF.configuration . minElbCapacity

class HasMinSize a b | a -> b where
    type HasMinSizeThread a b :: *

    minSize
        :: Lens' a (TF.Attribute (HasMinSizeThread a b) b)

instance HasMinSize a b => HasMinSize (TF.Resource p a) b where
    type HasMinSizeThread (TF.Resource p a) b =
         HasMinSizeThread a b

    minSize = TF.configuration . minSize

class HasMinimumHealthyHosts a b | a -> b where
    type HasMinimumHealthyHostsThread a b :: *

    minimumHealthyHosts
        :: Lens' a (TF.Attribute (HasMinimumHealthyHostsThread a b) b)

instance HasMinimumHealthyHosts a b => HasMinimumHealthyHosts (TF.Resource p a) b where
    type HasMinimumHealthyHostsThread (TF.Resource p a) b =
         HasMinimumHealthyHostsThread a b

    minimumHealthyHosts = TF.configuration . minimumHealthyHosts

class HasMinimumPasswordLength a b | a -> b where
    type HasMinimumPasswordLengthThread a b :: *

    minimumPasswordLength
        :: Lens' a (TF.Attribute (HasMinimumPasswordLengthThread a b) b)

instance HasMinimumPasswordLength a b => HasMinimumPasswordLength (TF.Resource p a) b where
    type HasMinimumPasswordLengthThread (TF.Resource p a) b =
         HasMinimumPasswordLengthThread a b

    minimumPasswordLength = TF.configuration . minimumPasswordLength

class HasMonitoring a b | a -> b where
    type HasMonitoringThread a b :: *

    monitoring
        :: Lens' a (TF.Attribute (HasMonitoringThread a b) b)

instance HasMonitoring a b => HasMonitoring (TF.Resource p a) b where
    type HasMonitoringThread (TF.Resource p a) b =
         HasMonitoringThread a b

    monitoring = TF.configuration . monitoring

class HasMonitoringInterval a b | a -> b where
    type HasMonitoringIntervalThread a b :: *

    monitoringInterval
        :: Lens' a (TF.Attribute (HasMonitoringIntervalThread a b) b)

instance HasMonitoringInterval a b => HasMonitoringInterval (TF.Resource p a) b where
    type HasMonitoringIntervalThread (TF.Resource p a) b =
         HasMonitoringIntervalThread a b

    monitoringInterval = TF.configuration . monitoringInterval

class HasMonitoringRoleArn a b | a -> b where
    type HasMonitoringRoleArnThread a b :: *

    monitoringRoleArn
        :: Lens' a (TF.Attribute (HasMonitoringRoleArnThread a b) b)

instance HasMonitoringRoleArn a b => HasMonitoringRoleArn (TF.Resource p a) b where
    type HasMonitoringRoleArnThread (TF.Resource p a) b =
         HasMonitoringRoleArnThread a b

    monitoringRoleArn = TF.configuration . monitoringRoleArn

class HasMultiAz a b | a -> b where
    type HasMultiAzThread a b :: *

    multiAz
        :: Lens' a (TF.Attribute (HasMultiAzThread a b) b)

instance HasMultiAz a b => HasMultiAz (TF.Resource p a) b where
    type HasMultiAzThread (TF.Resource p a) b =
         HasMultiAzThread a b

    multiAz = TF.configuration . multiAz

class HasMultivalueAnswerRoutingPolicy a b | a -> b where
    type HasMultivalueAnswerRoutingPolicyThread a b :: *

    multivalueAnswerRoutingPolicy
        :: Lens' a (TF.Attribute (HasMultivalueAnswerRoutingPolicyThread a b) b)

instance HasMultivalueAnswerRoutingPolicy a b => HasMultivalueAnswerRoutingPolicy (TF.Resource p a) b where
    type HasMultivalueAnswerRoutingPolicyThread (TF.Resource p a) b =
         HasMultivalueAnswerRoutingPolicyThread a b

    multivalueAnswerRoutingPolicy = TF.configuration . multivalueAnswerRoutingPolicy

class HasName a b | a -> b where
    type HasNameThread a b :: *

    name
        :: Lens' a (TF.Attribute (HasNameThread a b) b)

instance HasName a b => HasName (TF.Resource p a) b where
    type HasNameThread (TF.Resource p a) b =
         HasNameThread a b

    name = TF.configuration . name

class HasNamePrefix a b | a -> b where
    type HasNamePrefixThread a b :: *

    namePrefix
        :: Lens' a (TF.Attribute (HasNamePrefixThread a b) b)

instance HasNamePrefix a b => HasNamePrefix (TF.Resource p a) b where
    type HasNamePrefixThread (TF.Resource p a) b =
         HasNamePrefixThread a b

    namePrefix = TF.configuration . namePrefix

class HasNamespace a b | a -> b where
    type HasNamespaceThread a b :: *

    namespace
        :: Lens' a (TF.Attribute (HasNamespaceThread a b) b)

instance HasNamespace a b => HasNamespace (TF.Resource p a) b where
    type HasNamespaceThread (TF.Resource p a) b =
         HasNamespaceThread a b

    namespace = TF.configuration . namespace

class HasNatGatewayId a b | a -> b where
    type HasNatGatewayIdThread a b :: *

    natGatewayId
        :: Lens' a (TF.Attribute (HasNatGatewayIdThread a b) b)

instance HasNatGatewayId a b => HasNatGatewayId (TF.Resource p a) b where
    type HasNatGatewayIdThread (TF.Resource p a) b =
         HasNatGatewayIdThread a b

    natGatewayId = TF.configuration . natGatewayId

class HasNetbiosNameServers a b | a -> b where
    type HasNetbiosNameServersThread a b :: *

    netbiosNameServers
        :: Lens' a (TF.Attribute (HasNetbiosNameServersThread a b) b)

instance HasNetbiosNameServers a b => HasNetbiosNameServers (TF.Resource p a) b where
    type HasNetbiosNameServersThread (TF.Resource p a) b =
         HasNetbiosNameServersThread a b

    netbiosNameServers = TF.configuration . netbiosNameServers

class HasNetbiosNodeType a b | a -> b where
    type HasNetbiosNodeTypeThread a b :: *

    netbiosNodeType
        :: Lens' a (TF.Attribute (HasNetbiosNodeTypeThread a b) b)

instance HasNetbiosNodeType a b => HasNetbiosNodeType (TF.Resource p a) b where
    type HasNetbiosNodeTypeThread (TF.Resource p a) b =
         HasNetbiosNodeTypeThread a b

    netbiosNodeType = TF.configuration . netbiosNodeType

class HasNetworkAclId a b | a -> b where
    type HasNetworkAclIdThread a b :: *

    networkAclId
        :: Lens' a (TF.Attribute (HasNetworkAclIdThread a b) b)

instance HasNetworkAclId a b => HasNetworkAclId (TF.Resource p a) b where
    type HasNetworkAclIdThread (TF.Resource p a) b =
         HasNetworkAclIdThread a b

    networkAclId = TF.configuration . networkAclId

class HasNetworkConfiguration a b | a -> b where
    type HasNetworkConfigurationThread a b :: *

    networkConfiguration
        :: Lens' a (TF.Attribute (HasNetworkConfigurationThread a b) b)

instance HasNetworkConfiguration a b => HasNetworkConfiguration (TF.Resource p a) b where
    type HasNetworkConfigurationThread (TF.Resource p a) b =
         HasNetworkConfigurationThread a b

    networkConfiguration = TF.configuration . networkConfiguration

class HasNetworkInterface a b | a -> b where
    type HasNetworkInterfaceThread a b :: *

    networkInterface
        :: Lens' a (TF.Attribute (HasNetworkInterfaceThread a b) b)

instance HasNetworkInterface a b => HasNetworkInterface (TF.Resource p a) b where
    type HasNetworkInterfaceThread (TF.Resource p a) b =
         HasNetworkInterfaceThread a b

    networkInterface = TF.configuration . networkInterface

class HasNetworkInterfaceId a b | a -> b where
    type HasNetworkInterfaceIdThread a b :: *

    networkInterfaceId
        :: Lens' a (TF.Attribute (HasNetworkInterfaceIdThread a b) b)

instance HasNetworkInterfaceId a b => HasNetworkInterfaceId (TF.Resource p a) b where
    type HasNetworkInterfaceIdThread (TF.Resource p a) b =
         HasNetworkInterfaceIdThread a b

    networkInterfaceId = TF.configuration . networkInterfaceId

class HasNodeType a b | a -> b where
    type HasNodeTypeThread a b :: *

    nodeType
        :: Lens' a (TF.Attribute (HasNodeTypeThread a b) b)

instance HasNodeType a b => HasNodeType (TF.Resource p a) b where
    type HasNodeTypeThread (TF.Resource p a) b =
         HasNodeTypeThread a b

    nodeType = TF.configuration . nodeType

class HasNodejsVersion a b | a -> b where
    type HasNodejsVersionThread a b :: *

    nodejsVersion
        :: Lens' a (TF.Attribute (HasNodejsVersionThread a b) b)

instance HasNodejsVersion a b => HasNodejsVersion (TF.Resource p a) b where
    type HasNodejsVersionThread (TF.Resource p a) b =
         HasNodejsVersionThread a b

    nodejsVersion = TF.configuration . nodejsVersion

class HasNotification a b | a -> b where
    type HasNotificationThread a b :: *

    notification
        :: Lens' a (TF.Attribute (HasNotificationThread a b) b)

instance HasNotification a b => HasNotification (TF.Resource p a) b where
    type HasNotificationThread (TF.Resource p a) b =
         HasNotificationThread a b

    notification = TF.configuration . notification

class HasNotificationArns a b | a -> b where
    type HasNotificationArnsThread a b :: *

    notificationArns
        :: Lens' a (TF.Attribute (HasNotificationArnsThread a b) b)

instance HasNotificationArns a b => HasNotificationArns (TF.Resource p a) b where
    type HasNotificationArnsThread (TF.Resource p a) b =
         HasNotificationArnsThread a b

    notificationArns = TF.configuration . notificationArns

class HasNotificationMetadata a b | a -> b where
    type HasNotificationMetadataThread a b :: *

    notificationMetadata
        :: Lens' a (TF.Attribute (HasNotificationMetadataThread a b) b)

instance HasNotificationMetadata a b => HasNotificationMetadata (TF.Resource p a) b where
    type HasNotificationMetadataThread (TF.Resource p a) b =
         HasNotificationMetadataThread a b

    notificationMetadata = TF.configuration . notificationMetadata

class HasNotificationTargetArn a b | a -> b where
    type HasNotificationTargetArnThread a b :: *

    notificationTargetArn
        :: Lens' a (TF.Attribute (HasNotificationTargetArnThread a b) b)

instance HasNotificationTargetArn a b => HasNotificationTargetArn (TF.Resource p a) b where
    type HasNotificationTargetArnThread (TF.Resource p a) b =
         HasNotificationTargetArnThread a b

    notificationTargetArn = TF.configuration . notificationTargetArn

class HasNotificationTopicArn a b | a -> b where
    type HasNotificationTopicArnThread a b :: *

    notificationTopicArn
        :: Lens' a (TF.Attribute (HasNotificationTopicArnThread a b) b)

instance HasNotificationTopicArn a b => HasNotificationTopicArn (TF.Resource p a) b where
    type HasNotificationTopicArnThread (TF.Resource p a) b =
         HasNotificationTopicArnThread a b

    notificationTopicArn = TF.configuration . notificationTopicArn

class HasNotifications a b | a -> b where
    type HasNotificationsThread a b :: *

    notifications
        :: Lens' a (TF.Attribute (HasNotificationsThread a b) b)

instance HasNotifications a b => HasNotifications (TF.Resource p a) b where
    type HasNotificationsThread (TF.Resource p a) b =
         HasNotificationsThread a b

    notifications = TF.configuration . notifications

class HasNtpServers a b | a -> b where
    type HasNtpServersThread a b :: *

    ntpServers
        :: Lens' a (TF.Attribute (HasNtpServersThread a b) b)

instance HasNtpServers a b => HasNtpServers (TF.Resource p a) b where
    type HasNtpServersThread (TF.Resource p a) b =
         HasNtpServersThread a b

    ntpServers = TF.configuration . ntpServers

class HasNumCacheNodes a b | a -> b where
    type HasNumCacheNodesThread a b :: *

    numCacheNodes
        :: Lens' a (TF.Attribute (HasNumCacheNodesThread a b) b)

instance HasNumCacheNodes a b => HasNumCacheNodes (TF.Resource p a) b where
    type HasNumCacheNodesThread (TF.Resource p a) b =
         HasNumCacheNodesThread a b

    numCacheNodes = TF.configuration . numCacheNodes

class HasNumberCacheClusters a b | a -> b where
    type HasNumberCacheClustersThread a b :: *

    numberCacheClusters
        :: Lens' a (TF.Attribute (HasNumberCacheClustersThread a b) b)

instance HasNumberCacheClusters a b => HasNumberCacheClusters (TF.Resource p a) b where
    type HasNumberCacheClustersThread (TF.Resource p a) b =
         HasNumberCacheClustersThread a b

    numberCacheClusters = TF.configuration . numberCacheClusters

class HasNumberOfConnections a b | a -> b where
    type HasNumberOfConnectionsThread a b :: *

    numberOfConnections
        :: Lens' a (TF.Attribute (HasNumberOfConnectionsThread a b) b)

instance HasNumberOfConnections a b => HasNumberOfConnections (TF.Resource p a) b where
    type HasNumberOfConnectionsThread (TF.Resource p a) b =
         HasNumberOfConnectionsThread a b

    numberOfConnections = TF.configuration . numberOfConnections

class HasNumberOfNodes a b | a -> b where
    type HasNumberOfNodesThread a b :: *

    numberOfNodes
        :: Lens' a (TF.Attribute (HasNumberOfNodesThread a b) b)

instance HasNumberOfNodes a b => HasNumberOfNodes (TF.Resource p a) b where
    type HasNumberOfNodesThread (TF.Resource p a) b =
         HasNumberOfNodesThread a b

    numberOfNodes = TF.configuration . numberOfNodes

class HasOkActions a b | a -> b where
    type HasOkActionsThread a b :: *

    okActions
        :: Lens' a (TF.Attribute (HasOkActionsThread a b) b)

instance HasOkActions a b => HasOkActions (TF.Resource p a) b where
    type HasOkActionsThread (TF.Resource p a) b =
         HasOkActionsThread a b

    okActions = TF.configuration . okActions

class HasOnFailure a b | a -> b where
    type HasOnFailureThread a b :: *

    onFailure
        :: Lens' a (TF.Attribute (HasOnFailureThread a b) b)

instance HasOnFailure a b => HasOnFailure (TF.Resource p a) b where
    type HasOnFailureThread (TF.Resource p a) b =
         HasOnFailureThread a b

    onFailure = TF.configuration . onFailure

class HasOnPremisesInstanceTagFilter a b | a -> b where
    type HasOnPremisesInstanceTagFilterThread a b :: *

    onPremisesInstanceTagFilter
        :: Lens' a (TF.Attribute (HasOnPremisesInstanceTagFilterThread a b) b)

instance HasOnPremisesInstanceTagFilter a b => HasOnPremisesInstanceTagFilter (TF.Resource p a) b where
    type HasOnPremisesInstanceTagFilterThread (TF.Resource p a) b =
         HasOnPremisesInstanceTagFilterThread a b

    onPremisesInstanceTagFilter = TF.configuration . onPremisesInstanceTagFilter

class HasOpenidConnectProviderArns a b | a -> b where
    type HasOpenidConnectProviderArnsThread a b :: *

    openidConnectProviderArns
        :: Lens' a (TF.Attribute (HasOpenidConnectProviderArnsThread a b) b)

instance HasOpenidConnectProviderArns a b => HasOpenidConnectProviderArns (TF.Resource p a) b where
    type HasOpenidConnectProviderArnsThread (TF.Resource p a) b =
         HasOpenidConnectProviderArnsThread a b

    openidConnectProviderArns = TF.configuration . openidConnectProviderArns

class HasOperatingSystem a b | a -> b where
    type HasOperatingSystemThread a b :: *

    operatingSystem
        :: Lens' a (TF.Attribute (HasOperatingSystemThread a b) b)

instance HasOperatingSystem a b => HasOperatingSystem (TF.Resource p a) b where
    type HasOperatingSystemThread (TF.Resource p a) b =
         HasOperatingSystemThread a b

    operatingSystem = TF.configuration . operatingSystem

class HasOption a b | a -> b where
    type HasOptionThread a b :: *

    option
        :: Lens' a (TF.Attribute (HasOptionThread a b) b)

instance HasOption a b => HasOption (TF.Resource p a) b where
    type HasOptionThread (TF.Resource p a) b =
         HasOptionThread a b

    option = TF.configuration . option

class HasOptionGroupDescription a b | a -> b where
    type HasOptionGroupDescriptionThread a b :: *

    optionGroupDescription
        :: Lens' a (TF.Attribute (HasOptionGroupDescriptionThread a b) b)

instance HasOptionGroupDescription a b => HasOptionGroupDescription (TF.Resource p a) b where
    type HasOptionGroupDescriptionThread (TF.Resource p a) b =
         HasOptionGroupDescriptionThread a b

    optionGroupDescription = TF.configuration . optionGroupDescription

class HasOptionGroupName a b | a -> b where
    type HasOptionGroupNameThread a b :: *

    optionGroupName
        :: Lens' a (TF.Attribute (HasOptionGroupNameThread a b) b)

instance HasOptionGroupName a b => HasOptionGroupName (TF.Resource p a) b where
    type HasOptionGroupNameThread (TF.Resource p a) b =
         HasOptionGroupNameThread a b

    optionGroupName = TF.configuration . optionGroupName

class HasOrigin a b | a -> b where
    type HasOriginThread a b :: *

    origin
        :: Lens' a (TF.Attribute (HasOriginThread a b) b)

instance HasOrigin a b => HasOrigin (TF.Resource p a) b where
    type HasOriginThread (TF.Resource p a) b =
         HasOriginThread a b

    origin = TF.configuration . origin

class HasOs a b | a -> b where
    type HasOsThread a b :: *

    os
        :: Lens' a (TF.Attribute (HasOsThread a b) b)

instance HasOs a b => HasOs (TF.Resource p a) b where
    type HasOsThread (TF.Resource p a) b =
         HasOsThread a b

    os = TF.configuration . os

class HasOutputBucket a b | a -> b where
    type HasOutputBucketThread a b :: *

    outputBucket
        :: Lens' a (TF.Attribute (HasOutputBucketThread a b) b)

instance HasOutputBucket a b => HasOutputBucket (TF.Resource p a) b where
    type HasOutputBucketThread (TF.Resource p a) b =
         HasOutputBucketThread a b

    outputBucket = TF.configuration . outputBucket

class HasOutputLocation a b | a -> b where
    type HasOutputLocationThread a b :: *

    outputLocation
        :: Lens' a (TF.Attribute (HasOutputLocationThread a b) b)

instance HasOutputLocation a b => HasOutputLocation (TF.Resource p a) b where
    type HasOutputLocationThread (TF.Resource p a) b =
         HasOutputLocationThread a b

    outputLocation = TF.configuration . outputLocation

class HasOverwrite a b | a -> b where
    type HasOverwriteThread a b :: *

    overwrite
        :: Lens' a (TF.Attribute (HasOverwriteThread a b) b)

instance HasOverwrite a b => HasOverwrite (TF.Resource p a) b where
    type HasOverwriteThread (TF.Resource p a) b =
         HasOverwriteThread a b

    overwrite = TF.configuration . overwrite

class HasOwnerAccount a b | a -> b where
    type HasOwnerAccountThread a b :: *

    ownerAccount
        :: Lens' a (TF.Attribute (HasOwnerAccountThread a b) b)

instance HasOwnerAccount a b => HasOwnerAccount (TF.Resource p a) b where
    type HasOwnerAccountThread (TF.Resource p a) b =
         HasOwnerAccountThread a b

    ownerAccount = TF.configuration . ownerAccount

class HasOwnerInformation a b | a -> b where
    type HasOwnerInformationThread a b :: *

    ownerInformation
        :: Lens' a (TF.Attribute (HasOwnerInformationThread a b) b)

instance HasOwnerInformation a b => HasOwnerInformation (TF.Resource p a) b where
    type HasOwnerInformationThread (TF.Resource p a) b =
         HasOwnerInformationThread a b

    ownerInformation = TF.configuration . ownerInformation

class HasParameter a b | a -> b where
    type HasParameterThread a b :: *

    parameter
        :: Lens' a (TF.Attribute (HasParameterThread a b) b)

instance HasParameter a b => HasParameter (TF.Resource p a) b where
    type HasParameterThread (TF.Resource p a) b =
         HasParameterThread a b

    parameter = TF.configuration . parameter

class HasParameterGroupName a b | a -> b where
    type HasParameterGroupNameThread a b :: *

    parameterGroupName
        :: Lens' a (TF.Attribute (HasParameterGroupNameThread a b) b)

instance HasParameterGroupName a b => HasParameterGroupName (TF.Resource p a) b where
    type HasParameterGroupNameThread (TF.Resource p a) b =
         HasParameterGroupNameThread a b

    parameterGroupName = TF.configuration . parameterGroupName

class HasParameters a b | a -> b where
    type HasParametersThread a b :: *

    parameters
        :: Lens' a (TF.Attribute (HasParametersThread a b) b)

instance HasParameters a b => HasParameters (TF.Resource p a) b where
    type HasParametersThread (TF.Resource p a) b =
         HasParametersThread a b

    parameters = TF.configuration . parameters

class HasParentId a b | a -> b where
    type HasParentIdThread a b :: *

    parentId
        :: Lens' a (TF.Attribute (HasParentIdThread a b) b)

instance HasParentId a b => HasParentId (TF.Resource p a) b where
    type HasParentIdThread (TF.Resource p a) b =
         HasParentIdThread a b

    parentId = TF.configuration . parentId

class HasPassengerVersion a b | a -> b where
    type HasPassengerVersionThread a b :: *

    passengerVersion
        :: Lens' a (TF.Attribute (HasPassengerVersionThread a b) b)

instance HasPassengerVersion a b => HasPassengerVersion (TF.Resource p a) b where
    type HasPassengerVersionThread (TF.Resource p a) b =
         HasPassengerVersionThread a b

    passengerVersion = TF.configuration . passengerVersion

class HasPassthroughBehavior a b | a -> b where
    type HasPassthroughBehaviorThread a b :: *

    passthroughBehavior
        :: Lens' a (TF.Attribute (HasPassthroughBehaviorThread a b) b)

instance HasPassthroughBehavior a b => HasPassthroughBehavior (TF.Resource p a) b where
    type HasPassthroughBehaviorThread (TF.Resource p a) b =
         HasPassthroughBehaviorThread a b

    passthroughBehavior = TF.configuration . passthroughBehavior

class HasPassword a b | a -> b where
    type HasPasswordThread a b :: *

    password
        :: Lens' a (TF.Attribute (HasPasswordThread a b) b)

instance HasPassword a b => HasPassword (TF.Resource p a) b where
    type HasPasswordThread (TF.Resource p a) b =
         HasPasswordThread a b

    password = TF.configuration . password

class HasPasswordLength a b | a -> b where
    type HasPasswordLengthThread a b :: *

    passwordLength
        :: Lens' a (TF.Attribute (HasPasswordLengthThread a b) b)

instance HasPasswordLength a b => HasPasswordLength (TF.Resource p a) b where
    type HasPasswordLengthThread (TF.Resource p a) b =
         HasPasswordLengthThread a b

    passwordLength = TF.configuration . passwordLength

class HasPasswordPolicy a b | a -> b where
    type HasPasswordPolicyThread a b :: *

    passwordPolicy
        :: Lens' a (TF.Attribute (HasPasswordPolicyThread a b) b)

instance HasPasswordPolicy a b => HasPasswordPolicy (TF.Resource p a) b where
    type HasPasswordPolicyThread (TF.Resource p a) b =
         HasPasswordPolicyThread a b

    passwordPolicy = TF.configuration . passwordPolicy

class HasPasswordResetRequired a b | a -> b where
    type HasPasswordResetRequiredThread a b :: *

    passwordResetRequired
        :: Lens' a (TF.Attribute (HasPasswordResetRequiredThread a b) b)

instance HasPasswordResetRequired a b => HasPasswordResetRequired (TF.Resource p a) b where
    type HasPasswordResetRequiredThread (TF.Resource p a) b =
         HasPasswordResetRequiredThread a b

    passwordResetRequired = TF.configuration . passwordResetRequired

class HasPasswordReusePrevention a b | a -> b where
    type HasPasswordReusePreventionThread a b :: *

    passwordReusePrevention
        :: Lens' a (TF.Attribute (HasPasswordReusePreventionThread a b) b)

instance HasPasswordReusePrevention a b => HasPasswordReusePrevention (TF.Resource p a) b where
    type HasPasswordReusePreventionThread (TF.Resource p a) b =
         HasPasswordReusePreventionThread a b

    passwordReusePrevention = TF.configuration . passwordReusePrevention

class HasPatchGroup a b | a -> b where
    type HasPatchGroupThread a b :: *

    patchGroup
        :: Lens' a (TF.Attribute (HasPatchGroupThread a b) b)

instance HasPatchGroup a b => HasPatchGroup (TF.Resource p a) b where
    type HasPatchGroupThread (TF.Resource p a) b =
         HasPatchGroupThread a b

    patchGroup = TF.configuration . patchGroup

class HasPath a b | a -> b where
    type HasPathThread a b :: *

    path
        :: Lens' a (TF.Attribute (HasPathThread a b) b)

instance HasPath a b => HasPath (TF.Resource p a) b where
    type HasPathThread (TF.Resource p a) b =
         HasPathThread a b

    path = TF.configuration . path

class HasPathPart a b | a -> b where
    type HasPathPartThread a b :: *

    pathPart
        :: Lens' a (TF.Attribute (HasPathPartThread a b) b)

instance HasPathPart a b => HasPathPart (TF.Resource p a) b where
    type HasPathPartThread (TF.Resource p a) b =
         HasPathPartThread a b

    pathPart = TF.configuration . pathPart

class HasPattern a b | a -> b where
    type HasPatternThread a b :: *

    pattern
        :: Lens' a (TF.Attribute (HasPatternThread a b) b)

instance HasPattern a b => HasPattern (TF.Resource p a) b where
    type HasPatternThread (TF.Resource p a) b =
         HasPatternThread a b

    pattern = TF.configuration . pattern

class HasPeerOwnerId a b | a -> b where
    type HasPeerOwnerIdThread a b :: *

    peerOwnerId
        :: Lens' a (TF.Attribute (HasPeerOwnerIdThread a b) b)

instance HasPeerOwnerId a b => HasPeerOwnerId (TF.Resource p a) b where
    type HasPeerOwnerIdThread (TF.Resource p a) b =
         HasPeerOwnerIdThread a b

    peerOwnerId = TF.configuration . peerOwnerId

class HasPeerRegion a b | a -> b where
    type HasPeerRegionThread a b :: *

    peerRegion
        :: Lens' a (TF.Attribute (HasPeerRegionThread a b) b)

instance HasPeerRegion a b => HasPeerRegion (TF.Resource p a) b where
    type HasPeerRegionThread (TF.Resource p a) b =
         HasPeerRegionThread a b

    peerRegion = TF.configuration . peerRegion

class HasPeerVpcId a b | a -> b where
    type HasPeerVpcIdThread a b :: *

    peerVpcId
        :: Lens' a (TF.Attribute (HasPeerVpcIdThread a b) b)

instance HasPeerVpcId a b => HasPeerVpcId (TF.Resource p a) b where
    type HasPeerVpcIdThread (TF.Resource p a) b =
         HasPeerVpcIdThread a b

    peerVpcId = TF.configuration . peerVpcId

class HasPerformanceInsightsEnabled a b | a -> b where
    type HasPerformanceInsightsEnabledThread a b :: *

    performanceInsightsEnabled
        :: Lens' a (TF.Attribute (HasPerformanceInsightsEnabledThread a b) b)

instance HasPerformanceInsightsEnabled a b => HasPerformanceInsightsEnabled (TF.Resource p a) b where
    type HasPerformanceInsightsEnabledThread (TF.Resource p a) b =
         HasPerformanceInsightsEnabledThread a b

    performanceInsightsEnabled = TF.configuration . performanceInsightsEnabled

class HasPerformanceInsightsKmsKeyId a b | a -> b where
    type HasPerformanceInsightsKmsKeyIdThread a b :: *

    performanceInsightsKmsKeyId
        :: Lens' a (TF.Attribute (HasPerformanceInsightsKmsKeyIdThread a b) b)

instance HasPerformanceInsightsKmsKeyId a b => HasPerformanceInsightsKmsKeyId (TF.Resource p a) b where
    type HasPerformanceInsightsKmsKeyIdThread (TF.Resource p a) b =
         HasPerformanceInsightsKmsKeyIdThread a b

    performanceInsightsKmsKeyId = TF.configuration . performanceInsightsKmsKeyId

class HasPerformanceMode a b | a -> b where
    type HasPerformanceModeThread a b :: *

    performanceMode
        :: Lens' a (TF.Attribute (HasPerformanceModeThread a b) b)

instance HasPerformanceMode a b => HasPerformanceMode (TF.Resource p a) b where
    type HasPerformanceModeThread (TF.Resource p a) b =
         HasPerformanceModeThread a b

    performanceMode = TF.configuration . performanceMode

class HasPeriod a b | a -> b where
    type HasPeriodThread a b :: *

    period
        :: Lens' a (TF.Attribute (HasPeriodThread a b) b)

instance HasPeriod a b => HasPeriod (TF.Resource p a) b where
    type HasPeriodThread (TF.Resource p a) b =
         HasPeriodThread a b

    period = TF.configuration . period

class HasPermissions a b | a -> b where
    type HasPermissionsThread a b :: *

    permissions
        :: Lens' a (TF.Attribute (HasPermissionsThread a b) b)

instance HasPermissions a b => HasPermissions (TF.Resource p a) b where
    type HasPermissionsThread (TF.Resource p a) b =
         HasPermissionsThread a b

    permissions = TF.configuration . permissions

class HasPgpKey a b | a -> b where
    type HasPgpKeyThread a b :: *

    pgpKey
        :: Lens' a (TF.Attribute (HasPgpKeyThread a b) b)

instance HasPgpKey a b => HasPgpKey (TF.Resource p a) b where
    type HasPgpKeyThread (TF.Resource p a) b =
         HasPgpKeyThread a b

    pgpKey = TF.configuration . pgpKey

class HasPlacementConstraints a b | a -> b where
    type HasPlacementConstraintsThread a b :: *

    placementConstraints
        :: Lens' a (TF.Attribute (HasPlacementConstraintsThread a b) b)

instance HasPlacementConstraints a b => HasPlacementConstraints (TF.Resource p a) b where
    type HasPlacementConstraintsThread (TF.Resource p a) b =
         HasPlacementConstraintsThread a b

    placementConstraints = TF.configuration . placementConstraints

class HasPlacementGroup a b | a -> b where
    type HasPlacementGroupThread a b :: *

    placementGroup
        :: Lens' a (TF.Attribute (HasPlacementGroupThread a b) b)

instance HasPlacementGroup a b => HasPlacementGroup (TF.Resource p a) b where
    type HasPlacementGroupThread (TF.Resource p a) b =
         HasPlacementGroupThread a b

    placementGroup = TF.configuration . placementGroup

class HasPlacementStrategy a b | a -> b where
    type HasPlacementStrategyThread a b :: *

    placementStrategy
        :: Lens' a (TF.Attribute (HasPlacementStrategyThread a b) b)

instance HasPlacementStrategy a b => HasPlacementStrategy (TF.Resource p a) b where
    type HasPlacementStrategyThread (TF.Resource p a) b =
         HasPlacementStrategyThread a b

    placementStrategy = TF.configuration . placementStrategy

class HasPlacementTenancy a b | a -> b where
    type HasPlacementTenancyThread a b :: *

    placementTenancy
        :: Lens' a (TF.Attribute (HasPlacementTenancyThread a b) b)

instance HasPlacementTenancy a b => HasPlacementTenancy (TF.Resource p a) b where
    type HasPlacementTenancyThread (TF.Resource p a) b =
         HasPlacementTenancyThread a b

    placementTenancy = TF.configuration . placementTenancy

class HasPolicy a b | a -> b where
    type HasPolicyThread a b :: *

    policy
        :: Lens' a (TF.Attribute (HasPolicyThread a b) b)

instance HasPolicy a b => HasPolicy (TF.Resource p a) b where
    type HasPolicyThread (TF.Resource p a) b =
         HasPolicyThread a b

    policy = TF.configuration . policy

class HasPolicyArn a b | a -> b where
    type HasPolicyArnThread a b :: *

    policyArn
        :: Lens' a (TF.Attribute (HasPolicyArnThread a b) b)

instance HasPolicyArn a b => HasPolicyArn (TF.Resource p a) b where
    type HasPolicyArnThread (TF.Resource p a) b =
         HasPolicyArnThread a b

    policyArn = TF.configuration . policyArn

class HasPolicyAttribute a b | a -> b where
    type HasPolicyAttributeThread a b :: *

    policyAttribute
        :: Lens' a (TF.Attribute (HasPolicyAttributeThread a b) b)

instance HasPolicyAttribute a b => HasPolicyAttribute (TF.Resource p a) b where
    type HasPolicyAttributeThread (TF.Resource p a) b =
         HasPolicyAttributeThread a b

    policyAttribute = TF.configuration . policyAttribute

class HasPolicyBody a b | a -> b where
    type HasPolicyBodyThread a b :: *

    policyBody
        :: Lens' a (TF.Attribute (HasPolicyBodyThread a b) b)

instance HasPolicyBody a b => HasPolicyBody (TF.Resource p a) b where
    type HasPolicyBodyThread (TF.Resource p a) b =
         HasPolicyBodyThread a b

    policyBody = TF.configuration . policyBody

class HasPolicyDocument a b | a -> b where
    type HasPolicyDocumentThread a b :: *

    policyDocument
        :: Lens' a (TF.Attribute (HasPolicyDocumentThread a b) b)

instance HasPolicyDocument a b => HasPolicyDocument (TF.Resource p a) b where
    type HasPolicyDocumentThread (TF.Resource p a) b =
         HasPolicyDocumentThread a b

    policyDocument = TF.configuration . policyDocument

class HasPolicyName a b | a -> b where
    type HasPolicyNameThread a b :: *

    policyName
        :: Lens' a (TF.Attribute (HasPolicyNameThread a b) b)

instance HasPolicyName a b => HasPolicyName (TF.Resource p a) b where
    type HasPolicyNameThread (TF.Resource p a) b =
         HasPolicyNameThread a b

    policyName = TF.configuration . policyName

class HasPolicyNames a b | a -> b where
    type HasPolicyNamesThread a b :: *

    policyNames
        :: Lens' a (TF.Attribute (HasPolicyNamesThread a b) b)

instance HasPolicyNames a b => HasPolicyNames (TF.Resource p a) b where
    type HasPolicyNamesThread (TF.Resource p a) b =
         HasPolicyNamesThread a b

    policyNames = TF.configuration . policyNames

class HasPolicyType a b | a -> b where
    type HasPolicyTypeThread a b :: *

    policyType
        :: Lens' a (TF.Attribute (HasPolicyTypeThread a b) b)

instance HasPolicyType a b => HasPolicyType (TF.Resource p a) b where
    type HasPolicyTypeThread (TF.Resource p a) b =
         HasPolicyTypeThread a b

    policyType = TF.configuration . policyType

class HasPolicyTypeName a b | a -> b where
    type HasPolicyTypeNameThread a b :: *

    policyTypeName
        :: Lens' a (TF.Attribute (HasPolicyTypeNameThread a b) b)

instance HasPolicyTypeName a b => HasPolicyTypeName (TF.Resource p a) b where
    type HasPolicyTypeNameThread (TF.Resource p a) b =
         HasPolicyTypeNameThread a b

    policyTypeName = TF.configuration . policyTypeName

class HasPolicyUrl a b | a -> b where
    type HasPolicyUrlThread a b :: *

    policyUrl
        :: Lens' a (TF.Attribute (HasPolicyUrlThread a b) b)

instance HasPolicyUrl a b => HasPolicyUrl (TF.Resource p a) b where
    type HasPolicyUrlThread (TF.Resource p a) b =
         HasPolicyUrlThread a b

    policyUrl = TF.configuration . policyUrl

class HasPollInterval a b | a -> b where
    type HasPollIntervalThread a b :: *

    pollInterval
        :: Lens' a (TF.Attribute (HasPollIntervalThread a b) b)

instance HasPollInterval a b => HasPollInterval (TF.Resource p a) b where
    type HasPollIntervalThread (TF.Resource p a) b =
         HasPollIntervalThread a b

    pollInterval = TF.configuration . pollInterval

class HasPort a b | a -> b where
    type HasPortThread a b :: *

    port
        :: Lens' a (TF.Attribute (HasPortThread a b) b)

instance HasPort a b => HasPort (TF.Resource p a) b where
    type HasPortThread (TF.Resource p a) b =
         HasPortThread a b

    port = TF.configuration . port

class HasPredicates a b | a -> b where
    type HasPredicatesThread a b :: *

    predicates
        :: Lens' a (TF.Attribute (HasPredicatesThread a b) b)

instance HasPredicates a b => HasPredicates (TF.Resource p a) b where
    type HasPredicatesThread (TF.Resource p a) b =
         HasPredicatesThread a b

    predicates = TF.configuration . predicates

class HasPreferredBackupWindow a b | a -> b where
    type HasPreferredBackupWindowThread a b :: *

    preferredBackupWindow
        :: Lens' a (TF.Attribute (HasPreferredBackupWindowThread a b) b)

instance HasPreferredBackupWindow a b => HasPreferredBackupWindow (TF.Resource p a) b where
    type HasPreferredBackupWindowThread (TF.Resource p a) b =
         HasPreferredBackupWindowThread a b

    preferredBackupWindow = TF.configuration . preferredBackupWindow

class HasPreferredMaintenanceWindow a b | a -> b where
    type HasPreferredMaintenanceWindowThread a b :: *

    preferredMaintenanceWindow
        :: Lens' a (TF.Attribute (HasPreferredMaintenanceWindowThread a b) b)

instance HasPreferredMaintenanceWindow a b => HasPreferredMaintenanceWindow (TF.Resource p a) b where
    type HasPreferredMaintenanceWindowThread (TF.Resource p a) b =
         HasPreferredMaintenanceWindowThread a b

    preferredMaintenanceWindow = TF.configuration . preferredMaintenanceWindow

class HasPrefix a b | a -> b where
    type HasPrefixThread a b :: *

    prefix
        :: Lens' a (TF.Attribute (HasPrefixThread a b) b)

instance HasPrefix a b => HasPrefix (TF.Resource p a) b where
    type HasPrefixThread (TF.Resource p a) b =
         HasPrefixThread a b

    prefix = TF.configuration . prefix

class HasPrefixListIds a b | a -> b where
    type HasPrefixListIdsThread a b :: *

    prefixListIds
        :: Lens' a (TF.Attribute (HasPrefixListIdsThread a b) b)

instance HasPrefixListIds a b => HasPrefixListIds (TF.Resource p a) b where
    type HasPrefixListIdsThread (TF.Resource p a) b =
         HasPrefixListIdsThread a b

    prefixListIds = TF.configuration . prefixListIds

class HasPriceClass a b | a -> b where
    type HasPriceClassThread a b :: *

    priceClass
        :: Lens' a (TF.Attribute (HasPriceClassThread a b) b)

instance HasPriceClass a b => HasPriceClass (TF.Resource p a) b where
    type HasPriceClassThread (TF.Resource p a) b =
         HasPriceClassThread a b

    priceClass = TF.configuration . priceClass

class HasPrincipal a b | a -> b where
    type HasPrincipalThread a b :: *

    principal
        :: Lens' a (TF.Attribute (HasPrincipalThread a b) b)

instance HasPrincipal a b => HasPrincipal (TF.Resource p a) b where
    type HasPrincipalThread (TF.Resource p a) b =
         HasPrincipalThread a b

    principal = TF.configuration . principal

class HasPriority a b | a -> b where
    type HasPriorityThread a b :: *

    priority
        :: Lens' a (TF.Attribute (HasPriorityThread a b) b)

instance HasPriority a b => HasPriority (TF.Resource p a) b where
    type HasPriorityThread (TF.Resource p a) b =
         HasPriorityThread a b

    priority = TF.configuration . priority

class HasPrivateIp a b | a -> b where
    type HasPrivateIpThread a b :: *

    privateIp
        :: Lens' a (TF.Attribute (HasPrivateIpThread a b) b)

instance HasPrivateIp a b => HasPrivateIp (TF.Resource p a) b where
    type HasPrivateIpThread (TF.Resource p a) b =
         HasPrivateIpThread a b

    privateIp = TF.configuration . privateIp

class HasPrivateIpAddress a b | a -> b where
    type HasPrivateIpAddressThread a b :: *

    privateIpAddress
        :: Lens' a (TF.Attribute (HasPrivateIpAddressThread a b) b)

instance HasPrivateIpAddress a b => HasPrivateIpAddress (TF.Resource p a) b where
    type HasPrivateIpAddressThread (TF.Resource p a) b =
         HasPrivateIpAddressThread a b

    privateIpAddress = TF.configuration . privateIpAddress

class HasPrivateIps a b | a -> b where
    type HasPrivateIpsThread a b :: *

    privateIps
        :: Lens' a (TF.Attribute (HasPrivateIpsThread a b) b)

instance HasPrivateIps a b => HasPrivateIps (TF.Resource p a) b where
    type HasPrivateIpsThread (TF.Resource p a) b =
         HasPrivateIpsThread a b

    privateIps = TF.configuration . privateIps

class HasPrivateIpsCount a b | a -> b where
    type HasPrivateIpsCountThread a b :: *

    privateIpsCount
        :: Lens' a (TF.Attribute (HasPrivateIpsCountThread a b) b)

instance HasPrivateIpsCount a b => HasPrivateIpsCount (TF.Resource p a) b where
    type HasPrivateIpsCountThread (TF.Resource p a) b =
         HasPrivateIpsCountThread a b

    privateIpsCount = TF.configuration . privateIpsCount

class HasPrivateKey a b | a -> b where
    type HasPrivateKeyThread a b :: *

    privateKey
        :: Lens' a (TF.Attribute (HasPrivateKeyThread a b) b)

instance HasPrivateKey a b => HasPrivateKey (TF.Resource p a) b where
    type HasPrivateKeyThread (TF.Resource p a) b =
         HasPrivateKeyThread a b

    privateKey = TF.configuration . privateKey

class HasProductCode a b | a -> b where
    type HasProductCodeThread a b :: *

    productCode
        :: Lens' a (TF.Attribute (HasProductCodeThread a b) b)

instance HasProductCode a b => HasProductCode (TF.Resource p a) b where
    type HasProductCodeThread (TF.Resource p a) b =
         HasProductCodeThread a b

    productCode = TF.configuration . productCode

class HasPromotionTier a b | a -> b where
    type HasPromotionTierThread a b :: *

    promotionTier
        :: Lens' a (TF.Attribute (HasPromotionTierThread a b) b)

instance HasPromotionTier a b => HasPromotionTier (TF.Resource p a) b where
    type HasPromotionTierThread (TF.Resource p a) b =
         HasPromotionTierThread a b

    promotionTier = TF.configuration . promotionTier

class HasPropagatingVgws a b | a -> b where
    type HasPropagatingVgwsThread a b :: *

    propagatingVgws
        :: Lens' a (TF.Attribute (HasPropagatingVgwsThread a b) b)

instance HasPropagatingVgws a b => HasPropagatingVgws (TF.Resource p a) b where
    type HasPropagatingVgwsThread (TF.Resource p a) b =
         HasPropagatingVgwsThread a b

    propagatingVgws = TF.configuration . propagatingVgws

class HasProperties a b | a -> b where
    type HasPropertiesThread a b :: *

    properties
        :: Lens' a (TF.Attribute (HasPropertiesThread a b) b)

instance HasProperties a b => HasProperties (TF.Resource p a) b where
    type HasPropertiesThread (TF.Resource p a) b =
         HasPropertiesThread a b

    properties = TF.configuration . properties

class HasProtectFromScaleIn a b | a -> b where
    type HasProtectFromScaleInThread a b :: *

    protectFromScaleIn
        :: Lens' a (TF.Attribute (HasProtectFromScaleInThread a b) b)

instance HasProtectFromScaleIn a b => HasProtectFromScaleIn (TF.Resource p a) b where
    type HasProtectFromScaleInThread (TF.Resource p a) b =
         HasProtectFromScaleInThread a b

    protectFromScaleIn = TF.configuration . protectFromScaleIn

class HasProtocol a b | a -> b where
    type HasProtocolThread a b :: *

    protocol
        :: Lens' a (TF.Attribute (HasProtocolThread a b) b)

instance HasProtocol a b => HasProtocol (TF.Resource p a) b where
    type HasProtocolThread (TF.Resource p a) b =
         HasProtocolThread a b

    protocol = TF.configuration . protocol

class HasProviderName a b | a -> b where
    type HasProviderNameThread a b :: *

    providerName
        :: Lens' a (TF.Attribute (HasProviderNameThread a b) b)

instance HasProviderName a b => HasProviderName (TF.Resource p a) b where
    type HasProviderNameThread (TF.Resource p a) b =
         HasProviderNameThread a b

    providerName = TF.configuration . providerName

class HasPublicIp a b | a -> b where
    type HasPublicIpThread a b :: *

    publicIp
        :: Lens' a (TF.Attribute (HasPublicIpThread a b) b)

instance HasPublicIp a b => HasPublicIp (TF.Resource p a) b where
    type HasPublicIpThread (TF.Resource p a) b =
         HasPublicIpThread a b

    publicIp = TF.configuration . publicIp

class HasPublicKey a b | a -> b where
    type HasPublicKeyThread a b :: *

    publicKey
        :: Lens' a (TF.Attribute (HasPublicKeyThread a b) b)

instance HasPublicKey a b => HasPublicKey (TF.Resource p a) b where
    type HasPublicKeyThread (TF.Resource p a) b =
         HasPublicKeyThread a b

    publicKey = TF.configuration . publicKey

class HasPubliclyAccessible a b | a -> b where
    type HasPubliclyAccessibleThread a b :: *

    publiclyAccessible
        :: Lens' a (TF.Attribute (HasPubliclyAccessibleThread a b) b)

instance HasPubliclyAccessible a b => HasPubliclyAccessible (TF.Resource p a) b where
    type HasPubliclyAccessibleThread (TF.Resource p a) b =
         HasPubliclyAccessibleThread a b

    publiclyAccessible = TF.configuration . publiclyAccessible

class HasPublish a b | a -> b where
    type HasPublishThread a b :: *

    publish
        :: Lens' a (TF.Attribute (HasPublishThread a b) b)

instance HasPublish a b => HasPublish (TF.Resource p a) b where
    type HasPublishThread (TF.Resource p a) b =
         HasPublishThread a b

    publish = TF.configuration . publish

class HasQualifier a b | a -> b where
    type HasQualifierThread a b :: *

    qualifier
        :: Lens' a (TF.Attribute (HasQualifierThread a b) b)

instance HasQualifier a b => HasQualifier (TF.Resource p a) b where
    type HasQualifierThread (TF.Resource p a) b =
         HasQualifierThread a b

    qualifier = TF.configuration . qualifier

class HasQuery a b | a -> b where
    type HasQueryThread a b :: *

    query
        :: Lens' a (TF.Attribute (HasQueryThread a b) b)

instance HasQuery a b => HasQuery (TF.Resource p a) b where
    type HasQueryThread (TF.Resource p a) b =
         HasQueryThread a b

    query = TF.configuration . query

class HasQueue a b | a -> b where
    type HasQueueThread a b :: *

    queue
        :: Lens' a (TF.Attribute (HasQueueThread a b) b)

instance HasQueue a b => HasQueue (TF.Resource p a) b where
    type HasQueueThread (TF.Resource p a) b =
         HasQueueThread a b

    queue = TF.configuration . queue

class HasQueueUrl a b | a -> b where
    type HasQueueUrlThread a b :: *

    queueUrl
        :: Lens' a (TF.Attribute (HasQueueUrlThread a b) b)

instance HasQueueUrl a b => HasQueueUrl (TF.Resource p a) b where
    type HasQueueUrlThread (TF.Resource p a) b =
         HasQueueUrlThread a b

    queueUrl = TF.configuration . queueUrl

class HasQuotaSettings a b | a -> b where
    type HasQuotaSettingsThread a b :: *

    quotaSettings
        :: Lens' a (TF.Attribute (HasQuotaSettingsThread a b) b)

instance HasQuotaSettings a b => HasQuotaSettings (TF.Resource p a) b where
    type HasQuotaSettingsThread (TF.Resource p a) b =
         HasQuotaSettingsThread a b

    quotaSettings = TF.configuration . quotaSettings

class HasRailsEnv a b | a -> b where
    type HasRailsEnvThread a b :: *

    railsEnv
        :: Lens' a (TF.Attribute (HasRailsEnvThread a b) b)

instance HasRailsEnv a b => HasRailsEnv (TF.Resource p a) b where
    type HasRailsEnvThread (TF.Resource p a) b =
         HasRailsEnvThread a b

    railsEnv = TF.configuration . railsEnv

class HasRangeKey a b | a -> b where
    type HasRangeKeyThread a b :: *

    rangeKey
        :: Lens' a (TF.Attribute (HasRangeKeyThread a b) b)

instance HasRangeKey a b => HasRangeKey (TF.Resource p a) b where
    type HasRangeKeyThread (TF.Resource p a) b =
         HasRangeKeyThread a b

    rangeKey = TF.configuration . rangeKey

class HasRateKey a b | a -> b where
    type HasRateKeyThread a b :: *

    rateKey
        :: Lens' a (TF.Attribute (HasRateKeyThread a b) b)

instance HasRateKey a b => HasRateKey (TF.Resource p a) b where
    type HasRateKeyThread (TF.Resource p a) b =
         HasRateKeyThread a b

    rateKey = TF.configuration . rateKey

class HasRateLimit a b | a -> b where
    type HasRateLimitThread a b :: *

    rateLimit
        :: Lens' a (TF.Attribute (HasRateLimitThread a b) b)

instance HasRateLimit a b => HasRateLimit (TF.Resource p a) b where
    type HasRateLimitThread (TF.Resource p a) b =
         HasRateLimitThread a b

    rateLimit = TF.configuration . rateLimit

class HasRawMessageDelivery a b | a -> b where
    type HasRawMessageDeliveryThread a b :: *

    rawMessageDelivery
        :: Lens' a (TF.Attribute (HasRawMessageDeliveryThread a b) b)

instance HasRawMessageDelivery a b => HasRawMessageDelivery (TF.Resource p a) b where
    type HasRawMessageDeliveryThread (TF.Resource p a) b =
         HasRawMessageDeliveryThread a b

    rawMessageDelivery = TF.configuration . rawMessageDelivery

class HasRdsDbInstanceArn a b | a -> b where
    type HasRdsDbInstanceArnThread a b :: *

    rdsDbInstanceArn
        :: Lens' a (TF.Attribute (HasRdsDbInstanceArnThread a b) b)

instance HasRdsDbInstanceArn a b => HasRdsDbInstanceArn (TF.Resource p a) b where
    type HasRdsDbInstanceArnThread (TF.Resource p a) b =
         HasRdsDbInstanceArnThread a b

    rdsDbInstanceArn = TF.configuration . rdsDbInstanceArn

class HasReadAttributes a b | a -> b where
    type HasReadAttributesThread a b :: *

    readAttributes
        :: Lens' a (TF.Attribute (HasReadAttributesThread a b) b)

instance HasReadAttributes a b => HasReadAttributes (TF.Resource p a) b where
    type HasReadAttributesThread (TF.Resource p a) b =
         HasReadAttributesThread a b

    readAttributes = TF.configuration . readAttributes

class HasReadCapacity a b | a -> b where
    type HasReadCapacityThread a b :: *

    readCapacity
        :: Lens' a (TF.Attribute (HasReadCapacityThread a b) b)

instance HasReadCapacity a b => HasReadCapacity (TF.Resource p a) b where
    type HasReadCapacityThread (TF.Resource p a) b =
         HasReadCapacityThread a b

    readCapacity = TF.configuration . readCapacity

class HasReceiveWaitTimeSeconds a b | a -> b where
    type HasReceiveWaitTimeSecondsThread a b :: *

    receiveWaitTimeSeconds
        :: Lens' a (TF.Attribute (HasReceiveWaitTimeSecondsThread a b) b)

instance HasReceiveWaitTimeSeconds a b => HasReceiveWaitTimeSeconds (TF.Resource p a) b where
    type HasReceiveWaitTimeSecondsThread (TF.Resource p a) b =
         HasReceiveWaitTimeSecondsThread a b

    receiveWaitTimeSeconds = TF.configuration . receiveWaitTimeSeconds

class HasRecipients a b | a -> b where
    type HasRecipientsThread a b :: *

    recipients
        :: Lens' a (TF.Attribute (HasRecipientsThread a b) b)

instance HasRecipients a b => HasRecipients (TF.Resource p a) b where
    type HasRecipientsThread (TF.Resource p a) b =
         HasRecipientsThread a b

    recipients = TF.configuration . recipients

class HasRecordingGroup a b | a -> b where
    type HasRecordingGroupThread a b :: *

    recordingGroup
        :: Lens' a (TF.Attribute (HasRecordingGroupThread a b) b)

instance HasRecordingGroup a b => HasRecordingGroup (TF.Resource p a) b where
    type HasRecordingGroupThread (TF.Resource p a) b =
         HasRecordingGroupThread a b

    recordingGroup = TF.configuration . recordingGroup

class HasRecords a b | a -> b where
    type HasRecordsThread a b :: *

    records
        :: Lens' a (TF.Attribute (HasRecordsThread a b) b)

instance HasRecords a b => HasRecords (TF.Resource p a) b where
    type HasRecordsThread (TF.Resource p a) b =
         HasRecordsThread a b

    records = TF.configuration . records

class HasRecurrence a b | a -> b where
    type HasRecurrenceThread a b :: *

    recurrence
        :: Lens' a (TF.Attribute (HasRecurrenceThread a b) b)

instance HasRecurrence a b => HasRecurrence (TF.Resource p a) b where
    type HasRecurrenceThread (TF.Resource p a) b =
         HasRecurrenceThread a b

    recurrence = TF.configuration . recurrence

class HasRedrivePolicy a b | a -> b where
    type HasRedrivePolicyThread a b :: *

    redrivePolicy
        :: Lens' a (TF.Attribute (HasRedrivePolicyThread a b) b)

instance HasRedrivePolicy a b => HasRedrivePolicy (TF.Resource p a) b where
    type HasRedrivePolicyThread (TF.Resource p a) b =
         HasRedrivePolicyThread a b

    redrivePolicy = TF.configuration . redrivePolicy

class HasRedshiftConfiguration a b | a -> b where
    type HasRedshiftConfigurationThread a b :: *

    redshiftConfiguration
        :: Lens' a (TF.Attribute (HasRedshiftConfigurationThread a b) b)

instance HasRedshiftConfiguration a b => HasRedshiftConfiguration (TF.Resource p a) b where
    type HasRedshiftConfigurationThread (TF.Resource p a) b =
         HasRedshiftConfigurationThread a b

    redshiftConfiguration = TF.configuration . redshiftConfiguration

class HasReferenceName a b | a -> b where
    type HasReferenceNameThread a b :: *

    referenceName
        :: Lens' a (TF.Attribute (HasReferenceNameThread a b) b)

instance HasReferenceName a b => HasReferenceName (TF.Resource p a) b where
    type HasReferenceNameThread (TF.Resource p a) b =
         HasReferenceNameThread a b

    referenceName = TF.configuration . referenceName

class HasRefreshTokenValidity a b | a -> b where
    type HasRefreshTokenValidityThread a b :: *

    refreshTokenValidity
        :: Lens' a (TF.Attribute (HasRefreshTokenValidityThread a b) b)

instance HasRefreshTokenValidity a b => HasRefreshTokenValidity (TF.Resource p a) b where
    type HasRefreshTokenValidityThread (TF.Resource p a) b =
         HasRefreshTokenValidityThread a b

    refreshTokenValidity = TF.configuration . refreshTokenValidity

class HasRegion a b | a -> b where
    type HasRegionThread a b :: *

    region
        :: Lens' a (TF.Attribute (HasRegionThread a b) b)

instance HasRegion a b => HasRegion (TF.Resource p a) b where
    type HasRegionThread (TF.Resource p a) b =
         HasRegionThread a b

    region = TF.configuration . region

class HasRegions a b | a -> b where
    type HasRegionsThread a b :: *

    regions
        :: Lens' a (TF.Attribute (HasRegionsThread a b) b)

instance HasRegions a b => HasRegions (TF.Resource p a) b where
    type HasRegionsThread (TF.Resource p a) b =
         HasRegionsThread a b

    regions = TF.configuration . regions

class HasRegistrationLimit a b | a -> b where
    type HasRegistrationLimitThread a b :: *

    registrationLimit
        :: Lens' a (TF.Attribute (HasRegistrationLimitThread a b) b)

instance HasRegistrationLimit a b => HasRegistrationLimit (TF.Resource p a) b where
    type HasRegistrationLimitThread (TF.Resource p a) b =
         HasRegistrationLimitThread a b

    registrationLimit = TF.configuration . registrationLimit

class HasRejectedPatches a b | a -> b where
    type HasRejectedPatchesThread a b :: *

    rejectedPatches
        :: Lens' a (TF.Attribute (HasRejectedPatchesThread a b) b)

instance HasRejectedPatches a b => HasRejectedPatches (TF.Resource p a) b where
    type HasRejectedPatchesThread (TF.Resource p a) b =
         HasRejectedPatchesThread a b

    rejectedPatches = TF.configuration . rejectedPatches

class HasReleaseLabel a b | a -> b where
    type HasReleaseLabelThread a b :: *

    releaseLabel
        :: Lens' a (TF.Attribute (HasReleaseLabelThread a b) b)

instance HasReleaseLabel a b => HasReleaseLabel (TF.Resource p a) b where
    type HasReleaseLabelThread (TF.Resource p a) b =
         HasReleaseLabelThread a b

    releaseLabel = TF.configuration . releaseLabel

class HasReplaceUnhealthyInstances a b | a -> b where
    type HasReplaceUnhealthyInstancesThread a b :: *

    replaceUnhealthyInstances
        :: Lens' a (TF.Attribute (HasReplaceUnhealthyInstancesThread a b) b)

instance HasReplaceUnhealthyInstances a b => HasReplaceUnhealthyInstances (TF.Resource p a) b where
    type HasReplaceUnhealthyInstancesThread (TF.Resource p a) b =
         HasReplaceUnhealthyInstancesThread a b

    replaceUnhealthyInstances = TF.configuration . replaceUnhealthyInstances

class HasReplicateSourceDb a b | a -> b where
    type HasReplicateSourceDbThread a b :: *

    replicateSourceDb
        :: Lens' a (TF.Attribute (HasReplicateSourceDbThread a b) b)

instance HasReplicateSourceDb a b => HasReplicateSourceDb (TF.Resource p a) b where
    type HasReplicateSourceDbThread (TF.Resource p a) b =
         HasReplicateSourceDbThread a b

    replicateSourceDb = TF.configuration . replicateSourceDb

class HasReplicationConfiguration a b | a -> b where
    type HasReplicationConfigurationThread a b :: *

    replicationConfiguration
        :: Lens' a (TF.Attribute (HasReplicationConfigurationThread a b) b)

instance HasReplicationConfiguration a b => HasReplicationConfiguration (TF.Resource p a) b where
    type HasReplicationConfigurationThread (TF.Resource p a) b =
         HasReplicationConfigurationThread a b

    replicationConfiguration = TF.configuration . replicationConfiguration

class HasReplicationGroupDescription a b | a -> b where
    type HasReplicationGroupDescriptionThread a b :: *

    replicationGroupDescription
        :: Lens' a (TF.Attribute (HasReplicationGroupDescriptionThread a b) b)

instance HasReplicationGroupDescription a b => HasReplicationGroupDescription (TF.Resource p a) b where
    type HasReplicationGroupDescriptionThread (TF.Resource p a) b =
         HasReplicationGroupDescriptionThread a b

    replicationGroupDescription = TF.configuration . replicationGroupDescription

class HasReplicationGroupId a b | a -> b where
    type HasReplicationGroupIdThread a b :: *

    replicationGroupId
        :: Lens' a (TF.Attribute (HasReplicationGroupIdThread a b) b)

instance HasReplicationGroupId a b => HasReplicationGroupId (TF.Resource p a) b where
    type HasReplicationGroupIdThread (TF.Resource p a) b =
         HasReplicationGroupIdThread a b

    replicationGroupId = TF.configuration . replicationGroupId

class HasReplicationInstanceArn a b | a -> b where
    type HasReplicationInstanceArnThread a b :: *

    replicationInstanceArn
        :: Lens' a (TF.Attribute (HasReplicationInstanceArnThread a b) b)

instance HasReplicationInstanceArn a b => HasReplicationInstanceArn (TF.Resource p a) b where
    type HasReplicationInstanceArnThread (TF.Resource p a) b =
         HasReplicationInstanceArnThread a b

    replicationInstanceArn = TF.configuration . replicationInstanceArn

class HasReplicationInstanceClass a b | a -> b where
    type HasReplicationInstanceClassThread a b :: *

    replicationInstanceClass
        :: Lens' a (TF.Attribute (HasReplicationInstanceClassThread a b) b)

instance HasReplicationInstanceClass a b => HasReplicationInstanceClass (TF.Resource p a) b where
    type HasReplicationInstanceClassThread (TF.Resource p a) b =
         HasReplicationInstanceClassThread a b

    replicationInstanceClass = TF.configuration . replicationInstanceClass

class HasReplicationInstanceId a b | a -> b where
    type HasReplicationInstanceIdThread a b :: *

    replicationInstanceId
        :: Lens' a (TF.Attribute (HasReplicationInstanceIdThread a b) b)

instance HasReplicationInstanceId a b => HasReplicationInstanceId (TF.Resource p a) b where
    type HasReplicationInstanceIdThread (TF.Resource p a) b =
         HasReplicationInstanceIdThread a b

    replicationInstanceId = TF.configuration . replicationInstanceId

class HasReplicationSubnetGroupDescription a b | a -> b where
    type HasReplicationSubnetGroupDescriptionThread a b :: *

    replicationSubnetGroupDescription
        :: Lens' a (TF.Attribute (HasReplicationSubnetGroupDescriptionThread a b) b)

instance HasReplicationSubnetGroupDescription a b => HasReplicationSubnetGroupDescription (TF.Resource p a) b where
    type HasReplicationSubnetGroupDescriptionThread (TF.Resource p a) b =
         HasReplicationSubnetGroupDescriptionThread a b

    replicationSubnetGroupDescription = TF.configuration . replicationSubnetGroupDescription

class HasReplicationSubnetGroupId a b | a -> b where
    type HasReplicationSubnetGroupIdThread a b :: *

    replicationSubnetGroupId
        :: Lens' a (TF.Attribute (HasReplicationSubnetGroupIdThread a b) b)

instance HasReplicationSubnetGroupId a b => HasReplicationSubnetGroupId (TF.Resource p a) b where
    type HasReplicationSubnetGroupIdThread (TF.Resource p a) b =
         HasReplicationSubnetGroupIdThread a b

    replicationSubnetGroupId = TF.configuration . replicationSubnetGroupId

class HasReplicationTaskId a b | a -> b where
    type HasReplicationTaskIdThread a b :: *

    replicationTaskId
        :: Lens' a (TF.Attribute (HasReplicationTaskIdThread a b) b)

instance HasReplicationTaskId a b => HasReplicationTaskId (TF.Resource p a) b where
    type HasReplicationTaskIdThread (TF.Resource p a) b =
         HasReplicationTaskIdThread a b

    replicationTaskId = TF.configuration . replicationTaskId

class HasReplicationTaskSettings a b | a -> b where
    type HasReplicationTaskSettingsThread a b :: *

    replicationTaskSettings
        :: Lens' a (TF.Attribute (HasReplicationTaskSettingsThread a b) b)

instance HasReplicationTaskSettings a b => HasReplicationTaskSettings (TF.Resource p a) b where
    type HasReplicationTaskSettingsThread (TF.Resource p a) b =
         HasReplicationTaskSettingsThread a b

    replicationTaskSettings = TF.configuration . replicationTaskSettings

class HasRepository a b | a -> b where
    type HasRepositoryThread a b :: *

    repository
        :: Lens' a (TF.Attribute (HasRepositoryThread a b) b)

instance HasRepository a b => HasRepository (TF.Resource p a) b where
    type HasRepositoryThread (TF.Resource p a) b =
         HasRepositoryThread a b

    repository = TF.configuration . repository

class HasRepositoryName a b | a -> b where
    type HasRepositoryNameThread a b :: *

    repositoryName
        :: Lens' a (TF.Attribute (HasRepositoryNameThread a b) b)

instance HasRepositoryName a b => HasRepositoryName (TF.Resource p a) b where
    type HasRepositoryNameThread (TF.Resource p a) b =
         HasRepositoryNameThread a b

    repositoryName = TF.configuration . repositoryName

class HasRequestInterval a b | a -> b where
    type HasRequestIntervalThread a b :: *

    requestInterval
        :: Lens' a (TF.Attribute (HasRequestIntervalThread a b) b)

instance HasRequestInterval a b => HasRequestInterval (TF.Resource p a) b where
    type HasRequestIntervalThread (TF.Resource p a) b =
         HasRequestIntervalThread a b

    requestInterval = TF.configuration . requestInterval

class HasRequestModels a b | a -> b where
    type HasRequestModelsThread a b :: *

    requestModels
        :: Lens' a (TF.Attribute (HasRequestModelsThread a b) b)

instance HasRequestModels a b => HasRequestModels (TF.Resource p a) b where
    type HasRequestModelsThread (TF.Resource p a) b =
         HasRequestModelsThread a b

    requestModels = TF.configuration . requestModels

class HasRequestParameters a b | a -> b where
    type HasRequestParametersThread a b :: *

    requestParameters
        :: Lens' a (TF.Attribute (HasRequestParametersThread a b) b)

instance HasRequestParameters a b => HasRequestParameters (TF.Resource p a) b where
    type HasRequestParametersThread (TF.Resource p a) b =
         HasRequestParametersThread a b

    requestParameters = TF.configuration . requestParameters

class HasRequestParametersInJson a b | a -> b where
    type HasRequestParametersInJsonThread a b :: *

    requestParametersInJson
        :: Lens' a (TF.Attribute (HasRequestParametersInJsonThread a b) b)

instance HasRequestParametersInJson a b => HasRequestParametersInJson (TF.Resource p a) b where
    type HasRequestParametersInJsonThread (TF.Resource p a) b =
         HasRequestParametersInJsonThread a b

    requestParametersInJson = TF.configuration . requestParametersInJson

class HasRequestPayer a b | a -> b where
    type HasRequestPayerThread a b :: *

    requestPayer
        :: Lens' a (TF.Attribute (HasRequestPayerThread a b) b)

instance HasRequestPayer a b => HasRequestPayer (TF.Resource p a) b where
    type HasRequestPayerThread (TF.Resource p a) b =
         HasRequestPayerThread a b

    requestPayer = TF.configuration . requestPayer

class HasRequestTemplates a b | a -> b where
    type HasRequestTemplatesThread a b :: *

    requestTemplates
        :: Lens' a (TF.Attribute (HasRequestTemplatesThread a b) b)

instance HasRequestTemplates a b => HasRequestTemplates (TF.Resource p a) b where
    type HasRequestTemplatesThread (TF.Resource p a) b =
         HasRequestTemplatesThread a b

    requestTemplates = TF.configuration . requestTemplates

class HasRequestValidatorId a b | a -> b where
    type HasRequestValidatorIdThread a b :: *

    requestValidatorId
        :: Lens' a (TF.Attribute (HasRequestValidatorIdThread a b) b)

instance HasRequestValidatorId a b => HasRequestValidatorId (TF.Resource p a) b where
    type HasRequestValidatorIdThread (TF.Resource p a) b =
         HasRequestValidatorIdThread a b

    requestValidatorId = TF.configuration . requestValidatorId

class HasRequester a b | a -> b where
    type HasRequesterThread a b :: *

    requester
        :: Lens' a (TF.Attribute (HasRequesterThread a b) b)

instance HasRequester a b => HasRequester (TF.Resource p a) b where
    type HasRequesterThread (TF.Resource p a) b =
         HasRequesterThread a b

    requester = TF.configuration . requester

class HasRequireLowercaseCharacters a b | a -> b where
    type HasRequireLowercaseCharactersThread a b :: *

    requireLowercaseCharacters
        :: Lens' a (TF.Attribute (HasRequireLowercaseCharactersThread a b) b)

instance HasRequireLowercaseCharacters a b => HasRequireLowercaseCharacters (TF.Resource p a) b where
    type HasRequireLowercaseCharactersThread (TF.Resource p a) b =
         HasRequireLowercaseCharactersThread a b

    requireLowercaseCharacters = TF.configuration . requireLowercaseCharacters

class HasRequireNumbers a b | a -> b where
    type HasRequireNumbersThread a b :: *

    requireNumbers
        :: Lens' a (TF.Attribute (HasRequireNumbersThread a b) b)

instance HasRequireNumbers a b => HasRequireNumbers (TF.Resource p a) b where
    type HasRequireNumbersThread (TF.Resource p a) b =
         HasRequireNumbersThread a b

    requireNumbers = TF.configuration . requireNumbers

class HasRequireSymbols a b | a -> b where
    type HasRequireSymbolsThread a b :: *

    requireSymbols
        :: Lens' a (TF.Attribute (HasRequireSymbolsThread a b) b)

instance HasRequireSymbols a b => HasRequireSymbols (TF.Resource p a) b where
    type HasRequireSymbolsThread (TF.Resource p a) b =
         HasRequireSymbolsThread a b

    requireSymbols = TF.configuration . requireSymbols

class HasRequireUppercaseCharacters a b | a -> b where
    type HasRequireUppercaseCharactersThread a b :: *

    requireUppercaseCharacters
        :: Lens' a (TF.Attribute (HasRequireUppercaseCharactersThread a b) b)

instance HasRequireUppercaseCharacters a b => HasRequireUppercaseCharacters (TF.Resource p a) b where
    type HasRequireUppercaseCharactersThread (TF.Resource p a) b =
         HasRequireUppercaseCharactersThread a b

    requireUppercaseCharacters = TF.configuration . requireUppercaseCharacters

class HasReservedConcurrentExecutions a b | a -> b where
    type HasReservedConcurrentExecutionsThread a b :: *

    reservedConcurrentExecutions
        :: Lens' a (TF.Attribute (HasReservedConcurrentExecutionsThread a b) b)

instance HasReservedConcurrentExecutions a b => HasReservedConcurrentExecutions (TF.Resource p a) b where
    type HasReservedConcurrentExecutionsThread (TF.Resource p a) b =
         HasReservedConcurrentExecutionsThread a b

    reservedConcurrentExecutions = TF.configuration . reservedConcurrentExecutions

class HasResourceGroupArn a b | a -> b where
    type HasResourceGroupArnThread a b :: *

    resourceGroupArn
        :: Lens' a (TF.Attribute (HasResourceGroupArnThread a b) b)

instance HasResourceGroupArn a b => HasResourceGroupArn (TF.Resource p a) b where
    type HasResourceGroupArnThread (TF.Resource p a) b =
         HasResourceGroupArnThread a b

    resourceGroupArn = TF.configuration . resourceGroupArn

class HasResourceId a b | a -> b where
    type HasResourceIdThread a b :: *

    resourceId
        :: Lens' a (TF.Attribute (HasResourceIdThread a b) b)

instance HasResourceId a b => HasResourceId (TF.Resource p a) b where
    type HasResourceIdThread (TF.Resource p a) b =
         HasResourceIdThread a b

    resourceId = TF.configuration . resourceId

class HasResourcePath a b | a -> b where
    type HasResourcePathThread a b :: *

    resourcePath
        :: Lens' a (TF.Attribute (HasResourcePathThread a b) b)

instance HasResourcePath a b => HasResourcePath (TF.Resource p a) b where
    type HasResourcePathThread (TF.Resource p a) b =
         HasResourcePathThread a b

    resourcePath = TF.configuration . resourcePath

class HasResourceType a b | a -> b where
    type HasResourceTypeThread a b :: *

    resourceType
        :: Lens' a (TF.Attribute (HasResourceTypeThread a b) b)

instance HasResourceType a b => HasResourceType (TF.Resource p a) b where
    type HasResourceTypeThread (TF.Resource p a) b =
         HasResourceTypeThread a b

    resourceType = TF.configuration . resourceType

class HasResponseModels a b | a -> b where
    type HasResponseModelsThread a b :: *

    responseModels
        :: Lens' a (TF.Attribute (HasResponseModelsThread a b) b)

instance HasResponseModels a b => HasResponseModels (TF.Resource p a) b where
    type HasResponseModelsThread (TF.Resource p a) b =
         HasResponseModelsThread a b

    responseModels = TF.configuration . responseModels

class HasResponseParameters a b | a -> b where
    type HasResponseParametersThread a b :: *

    responseParameters
        :: Lens' a (TF.Attribute (HasResponseParametersThread a b) b)

instance HasResponseParameters a b => HasResponseParameters (TF.Resource p a) b where
    type HasResponseParametersThread (TF.Resource p a) b =
         HasResponseParametersThread a b

    responseParameters = TF.configuration . responseParameters

class HasResponseParametersInJson a b | a -> b where
    type HasResponseParametersInJsonThread a b :: *

    responseParametersInJson
        :: Lens' a (TF.Attribute (HasResponseParametersInJsonThread a b) b)

instance HasResponseParametersInJson a b => HasResponseParametersInJson (TF.Resource p a) b where
    type HasResponseParametersInJsonThread (TF.Resource p a) b =
         HasResponseParametersInJsonThread a b

    responseParametersInJson = TF.configuration . responseParametersInJson

class HasResponseTemplates a b | a -> b where
    type HasResponseTemplatesThread a b :: *

    responseTemplates
        :: Lens' a (TF.Attribute (HasResponseTemplatesThread a b) b)

instance HasResponseTemplates a b => HasResponseTemplates (TF.Resource p a) b where
    type HasResponseTemplatesThread (TF.Resource p a) b =
         HasResponseTemplatesThread a b

    responseTemplates = TF.configuration . responseTemplates

class HasResponseType a b | a -> b where
    type HasResponseTypeThread a b :: *

    responseType
        :: Lens' a (TF.Attribute (HasResponseTypeThread a b) b)

instance HasResponseType a b => HasResponseType (TF.Resource p a) b where
    type HasResponseTypeThread (TF.Resource p a) b =
         HasResponseTypeThread a b

    responseType = TF.configuration . responseType

class HasRestApiId a b | a -> b where
    type HasRestApiIdThread a b :: *

    restApiId
        :: Lens' a (TF.Attribute (HasRestApiIdThread a b) b)

instance HasRestApiId a b => HasRestApiId (TF.Resource p a) b where
    type HasRestApiIdThread (TF.Resource p a) b =
         HasRestApiIdThread a b

    restApiId = TF.configuration . restApiId

class HasRestrictions a b | a -> b where
    type HasRestrictionsThread a b :: *

    restrictions
        :: Lens' a (TF.Attribute (HasRestrictionsThread a b) b)

instance HasRestrictions a b => HasRestrictions (TF.Resource p a) b where
    type HasRestrictionsThread (TF.Resource p a) b =
         HasRestrictionsThread a b

    restrictions = TF.configuration . restrictions

class HasRetainOnDelete a b | a -> b where
    type HasRetainOnDeleteThread a b :: *

    retainOnDelete
        :: Lens' a (TF.Attribute (HasRetainOnDeleteThread a b) b)

instance HasRetainOnDelete a b => HasRetainOnDelete (TF.Resource p a) b where
    type HasRetainOnDeleteThread (TF.Resource p a) b =
         HasRetainOnDeleteThread a b

    retainOnDelete = TF.configuration . retainOnDelete

class HasRetentionInDays a b | a -> b where
    type HasRetentionInDaysThread a b :: *

    retentionInDays
        :: Lens' a (TF.Attribute (HasRetentionInDaysThread a b) b)

instance HasRetentionInDays a b => HasRetentionInDays (TF.Resource p a) b where
    type HasRetentionInDaysThread (TF.Resource p a) b =
         HasRetentionInDaysThread a b

    retentionInDays = TF.configuration . retentionInDays

class HasRetentionPeriod a b | a -> b where
    type HasRetentionPeriodThread a b :: *

    retentionPeriod
        :: Lens' a (TF.Attribute (HasRetentionPeriodThread a b) b)

instance HasRetentionPeriod a b => HasRetentionPeriod (TF.Resource p a) b where
    type HasRetentionPeriodThread (TF.Resource p a) b =
         HasRetentionPeriodThread a b

    retentionPeriod = TF.configuration . retentionPeriod

class HasRetryStrategy a b | a -> b where
    type HasRetryStrategyThread a b :: *

    retryStrategy
        :: Lens' a (TF.Attribute (HasRetryStrategyThread a b) b)

instance HasRetryStrategy a b => HasRetryStrategy (TF.Resource p a) b where
    type HasRetryStrategyThread (TF.Resource p a) b =
         HasRetryStrategyThread a b

    retryStrategy = TF.configuration . retryStrategy

class HasRevokeRulesOnDelete a b | a -> b where
    type HasRevokeRulesOnDeleteThread a b :: *

    revokeRulesOnDelete
        :: Lens' a (TF.Attribute (HasRevokeRulesOnDeleteThread a b) b)

instance HasRevokeRulesOnDelete a b => HasRevokeRulesOnDelete (TF.Resource p a) b where
    type HasRevokeRulesOnDeleteThread (TF.Resource p a) b =
         HasRevokeRulesOnDeleteThread a b

    revokeRulesOnDelete = TF.configuration . revokeRulesOnDelete

class HasRole a b | a -> b where
    type HasRoleThread a b :: *

    role
        :: Lens' a (TF.Attribute (HasRoleThread a b) b)

instance HasRole a b => HasRole (TF.Resource p a) b where
    type HasRoleThread (TF.Resource p a) b =
         HasRoleThread a b

    role = TF.configuration . role

class HasRoleArn a b | a -> b where
    type HasRoleArnThread a b :: *

    roleArn
        :: Lens' a (TF.Attribute (HasRoleArnThread a b) b)

instance HasRoleArn a b => HasRoleArn (TF.Resource p a) b where
    type HasRoleArnThread (TF.Resource p a) b =
         HasRoleArnThread a b

    roleArn = TF.configuration . roleArn

class HasRoleMapping a b | a -> b where
    type HasRoleMappingThread a b :: *

    roleMapping
        :: Lens' a (TF.Attribute (HasRoleMappingThread a b) b)

instance HasRoleMapping a b => HasRoleMapping (TF.Resource p a) b where
    type HasRoleMappingThread (TF.Resource p a) b =
         HasRoleMappingThread a b

    roleMapping = TF.configuration . roleMapping

class HasRoles a b | a -> b where
    type HasRolesThread a b :: *

    roles
        :: Lens' a (TF.Attribute (HasRolesThread a b) b)

instance HasRoles a b => HasRoles (TF.Resource p a) b where
    type HasRolesThread (TF.Resource p a) b =
         HasRolesThread a b

    roles = TF.configuration . roles

class HasRootBlockDevice a b | a -> b where
    type HasRootBlockDeviceThread a b :: *

    rootBlockDevice
        :: Lens' a (TF.Attribute (HasRootBlockDeviceThread a b) b)

instance HasRootBlockDevice a b => HasRootBlockDevice (TF.Resource p a) b where
    type HasRootBlockDeviceThread (TF.Resource p a) b =
         HasRootBlockDeviceThread a b

    rootBlockDevice = TF.configuration . rootBlockDevice

class HasRootDeviceName a b | a -> b where
    type HasRootDeviceNameThread a b :: *

    rootDeviceName
        :: Lens' a (TF.Attribute (HasRootDeviceNameThread a b) b)

instance HasRootDeviceName a b => HasRootDeviceName (TF.Resource p a) b where
    type HasRootDeviceNameThread (TF.Resource p a) b =
         HasRootDeviceNameThread a b

    rootDeviceName = TF.configuration . rootDeviceName

class HasRootDeviceType a b | a -> b where
    type HasRootDeviceTypeThread a b :: *

    rootDeviceType
        :: Lens' a (TF.Attribute (HasRootDeviceTypeThread a b) b)

instance HasRootDeviceType a b => HasRootDeviceType (TF.Resource p a) b where
    type HasRootDeviceTypeThread (TF.Resource p a) b =
         HasRootDeviceTypeThread a b

    rootDeviceType = TF.configuration . rootDeviceType

class HasRootPassword a b | a -> b where
    type HasRootPasswordThread a b :: *

    rootPassword
        :: Lens' a (TF.Attribute (HasRootPasswordThread a b) b)

instance HasRootPassword a b => HasRootPassword (TF.Resource p a) b where
    type HasRootPasswordThread (TF.Resource p a) b =
         HasRootPasswordThread a b

    rootPassword = TF.configuration . rootPassword

class HasRootPasswordOnAllInstances a b | a -> b where
    type HasRootPasswordOnAllInstancesThread a b :: *

    rootPasswordOnAllInstances
        :: Lens' a (TF.Attribute (HasRootPasswordOnAllInstancesThread a b) b)

instance HasRootPasswordOnAllInstances a b => HasRootPasswordOnAllInstances (TF.Resource p a) b where
    type HasRootPasswordOnAllInstancesThread (TF.Resource p a) b =
         HasRootPasswordOnAllInstancesThread a b

    rootPasswordOnAllInstances = TF.configuration . rootPasswordOnAllInstances

class HasRoute a b | a -> b where
    type HasRouteThread a b :: *

    route
        :: Lens' a (TF.Attribute (HasRouteThread a b) b)

instance HasRoute a b => HasRoute (TF.Resource p a) b where
    type HasRouteThread (TF.Resource p a) b =
         HasRouteThread a b

    route = TF.configuration . route

class HasRouteTableId a b | a -> b where
    type HasRouteTableIdThread a b :: *

    routeTableId
        :: Lens' a (TF.Attribute (HasRouteTableIdThread a b) b)

instance HasRouteTableId a b => HasRouteTableId (TF.Resource p a) b where
    type HasRouteTableIdThread (TF.Resource p a) b =
         HasRouteTableIdThread a b

    routeTableId = TF.configuration . routeTableId

class HasRouteTableIds a b | a -> b where
    type HasRouteTableIdsThread a b :: *

    routeTableIds
        :: Lens' a (TF.Attribute (HasRouteTableIdsThread a b) b)

instance HasRouteTableIds a b => HasRouteTableIds (TF.Resource p a) b where
    type HasRouteTableIdsThread (TF.Resource p a) b =
         HasRouteTableIdsThread a b

    routeTableIds = TF.configuration . routeTableIds

class HasRubyVersion a b | a -> b where
    type HasRubyVersionThread a b :: *

    rubyVersion
        :: Lens' a (TF.Attribute (HasRubyVersionThread a b) b)

instance HasRubyVersion a b => HasRubyVersion (TF.Resource p a) b where
    type HasRubyVersionThread (TF.Resource p a) b =
         HasRubyVersionThread a b

    rubyVersion = TF.configuration . rubyVersion

class HasRubygemsVersion a b | a -> b where
    type HasRubygemsVersionThread a b :: *

    rubygemsVersion
        :: Lens' a (TF.Attribute (HasRubygemsVersionThread a b) b)

instance HasRubygemsVersion a b => HasRubygemsVersion (TF.Resource p a) b where
    type HasRubygemsVersionThread (TF.Resource p a) b =
         HasRubygemsVersionThread a b

    rubygemsVersion = TF.configuration . rubygemsVersion

class HasRule a b | a -> b where
    type HasRuleThread a b :: *

    rule
        :: Lens' a (TF.Attribute (HasRuleThread a b) b)

instance HasRule a b => HasRule (TF.Resource p a) b where
    type HasRuleThread (TF.Resource p a) b =
         HasRuleThread a b

    rule = TF.configuration . rule

class HasRuleAction a b | a -> b where
    type HasRuleActionThread a b :: *

    ruleAction
        :: Lens' a (TF.Attribute (HasRuleActionThread a b) b)

instance HasRuleAction a b => HasRuleAction (TF.Resource p a) b where
    type HasRuleActionThread (TF.Resource p a) b =
         HasRuleActionThread a b

    ruleAction = TF.configuration . ruleAction

class HasRuleNumber a b | a -> b where
    type HasRuleNumberThread a b :: *

    ruleNumber
        :: Lens' a (TF.Attribute (HasRuleNumberThread a b) b)

instance HasRuleNumber a b => HasRuleNumber (TF.Resource p a) b where
    type HasRuleNumberThread (TF.Resource p a) b =
         HasRuleNumberThread a b

    ruleNumber = TF.configuration . ruleNumber

class HasRuleSetName a b | a -> b where
    type HasRuleSetNameThread a b :: *

    ruleSetName
        :: Lens' a (TF.Attribute (HasRuleSetNameThread a b) b)

instance HasRuleSetName a b => HasRuleSetName (TF.Resource p a) b where
    type HasRuleSetNameThread (TF.Resource p a) b =
         HasRuleSetNameThread a b

    ruleSetName = TF.configuration . ruleSetName

class HasRules a b | a -> b where
    type HasRulesThread a b :: *

    rules
        :: Lens' a (TF.Attribute (HasRulesThread a b) b)

instance HasRules a b => HasRules (TF.Resource p a) b where
    type HasRulesThread (TF.Resource p a) b =
         HasRulesThread a b

    rules = TF.configuration . rules

class HasRulesPackageArns a b | a -> b where
    type HasRulesPackageArnsThread a b :: *

    rulesPackageArns
        :: Lens' a (TF.Attribute (HasRulesPackageArnsThread a b) b)

instance HasRulesPackageArns a b => HasRulesPackageArns (TF.Resource p a) b where
    type HasRulesPackageArnsThread (TF.Resource p a) b =
         HasRulesPackageArnsThread a b

    rulesPackageArns = TF.configuration . rulesPackageArns

class HasRunCommandTargets a b | a -> b where
    type HasRunCommandTargetsThread a b :: *

    runCommandTargets
        :: Lens' a (TF.Attribute (HasRunCommandTargetsThread a b) b)

instance HasRunCommandTargets a b => HasRunCommandTargets (TF.Resource p a) b where
    type HasRunCommandTargetsThread (TF.Resource p a) b =
         HasRunCommandTargetsThread a b

    runCommandTargets = TF.configuration . runCommandTargets

class HasRuntime a b | a -> b where
    type HasRuntimeThread a b :: *

    runtime
        :: Lens' a (TF.Attribute (HasRuntimeThread a b) b)

instance HasRuntime a b => HasRuntime (TF.Resource p a) b where
    type HasRuntimeThread (TF.Resource p a) b =
         HasRuntimeThread a b

    runtime = TF.configuration . runtime

class HasS3Action a b | a -> b where
    type HasS3ActionThread a b :: *

    s3Action
        :: Lens' a (TF.Attribute (HasS3ActionThread a b) b)

instance HasS3Action a b => HasS3Action (TF.Resource p a) b where
    type HasS3ActionThread (TF.Resource p a) b =
         HasS3ActionThread a b

    s3Action = TF.configuration . s3Action

class HasS3Bucket a b | a -> b where
    type HasS3BucketThread a b :: *

    s3Bucket
        :: Lens' a (TF.Attribute (HasS3BucketThread a b) b)

instance HasS3Bucket a b => HasS3Bucket (TF.Resource p a) b where
    type HasS3BucketThread (TF.Resource p a) b =
         HasS3BucketThread a b

    s3Bucket = TF.configuration . s3Bucket

class HasS3BucketName a b | a -> b where
    type HasS3BucketNameThread a b :: *

    s3BucketName
        :: Lens' a (TF.Attribute (HasS3BucketNameThread a b) b)

instance HasS3BucketName a b => HasS3BucketName (TF.Resource p a) b where
    type HasS3BucketNameThread (TF.Resource p a) b =
         HasS3BucketNameThread a b

    s3BucketName = TF.configuration . s3BucketName

class HasS3Configuration a b | a -> b where
    type HasS3ConfigurationThread a b :: *

    s3Configuration
        :: Lens' a (TF.Attribute (HasS3ConfigurationThread a b) b)

instance HasS3Configuration a b => HasS3Configuration (TF.Resource p a) b where
    type HasS3ConfigurationThread (TF.Resource p a) b =
         HasS3ConfigurationThread a b

    s3Configuration = TF.configuration . s3Configuration

class HasS3Destination a b | a -> b where
    type HasS3DestinationThread a b :: *

    s3Destination
        :: Lens' a (TF.Attribute (HasS3DestinationThread a b) b)

instance HasS3Destination a b => HasS3Destination (TF.Resource p a) b where
    type HasS3DestinationThread (TF.Resource p a) b =
         HasS3DestinationThread a b

    s3Destination = TF.configuration . s3Destination

class HasS3Key a b | a -> b where
    type HasS3KeyThread a b :: *

    s3Key
        :: Lens' a (TF.Attribute (HasS3KeyThread a b) b)

instance HasS3Key a b => HasS3Key (TF.Resource p a) b where
    type HasS3KeyThread (TF.Resource p a) b =
         HasS3KeyThread a b

    s3Key = TF.configuration . s3Key

class HasS3KeyPrefix a b | a -> b where
    type HasS3KeyPrefixThread a b :: *

    s3KeyPrefix
        :: Lens' a (TF.Attribute (HasS3KeyPrefixThread a b) b)

instance HasS3KeyPrefix a b => HasS3KeyPrefix (TF.Resource p a) b where
    type HasS3KeyPrefixThread (TF.Resource p a) b =
         HasS3KeyPrefixThread a b

    s3KeyPrefix = TF.configuration . s3KeyPrefix

class HasS3ObjectVersion a b | a -> b where
    type HasS3ObjectVersionThread a b :: *

    s3ObjectVersion
        :: Lens' a (TF.Attribute (HasS3ObjectVersionThread a b) b)

instance HasS3ObjectVersion a b => HasS3ObjectVersion (TF.Resource p a) b where
    type HasS3ObjectVersionThread (TF.Resource p a) b =
         HasS3ObjectVersionThread a b

    s3ObjectVersion = TF.configuration . s3ObjectVersion

class HasSamlMetadataDocument a b | a -> b where
    type HasSamlMetadataDocumentThread a b :: *

    samlMetadataDocument
        :: Lens' a (TF.Attribute (HasSamlMetadataDocumentThread a b) b)

instance HasSamlMetadataDocument a b => HasSamlMetadataDocument (TF.Resource p a) b where
    type HasSamlMetadataDocumentThread (TF.Resource p a) b =
         HasSamlMetadataDocumentThread a b

    samlMetadataDocument = TF.configuration . samlMetadataDocument

class HasSamlProviderArns a b | a -> b where
    type HasSamlProviderArnsThread a b :: *

    samlProviderArns
        :: Lens' a (TF.Attribute (HasSamlProviderArnsThread a b) b)

instance HasSamlProviderArns a b => HasSamlProviderArns (TF.Resource p a) b where
    type HasSamlProviderArnsThread (TF.Resource p a) b =
         HasSamlProviderArnsThread a b

    samlProviderArns = TF.configuration . samlProviderArns

class HasScalableDimension a b | a -> b where
    type HasScalableDimensionThread a b :: *

    scalableDimension
        :: Lens' a (TF.Attribute (HasScalableDimensionThread a b) b)

instance HasScalableDimension a b => HasScalableDimension (TF.Resource p a) b where
    type HasScalableDimensionThread (TF.Resource p a) b =
         HasScalableDimensionThread a b

    scalableDimension = TF.configuration . scalableDimension

class HasScalableTargetAction a b | a -> b where
    type HasScalableTargetActionThread a b :: *

    scalableTargetAction
        :: Lens' a (TF.Attribute (HasScalableTargetActionThread a b) b)

instance HasScalableTargetAction a b => HasScalableTargetAction (TF.Resource p a) b where
    type HasScalableTargetActionThread (TF.Resource p a) b =
         HasScalableTargetActionThread a b

    scalableTargetAction = TF.configuration . scalableTargetAction

class HasScanEnabled a b | a -> b where
    type HasScanEnabledThread a b :: *

    scanEnabled
        :: Lens' a (TF.Attribute (HasScanEnabledThread a b) b)

instance HasScanEnabled a b => HasScanEnabled (TF.Resource p a) b where
    type HasScanEnabledThread (TF.Resource p a) b =
         HasScanEnabledThread a b

    scanEnabled = TF.configuration . scanEnabled

class HasSchedule a b | a -> b where
    type HasScheduleThread a b :: *

    schedule
        :: Lens' a (TF.Attribute (HasScheduleThread a b) b)

instance HasSchedule a b => HasSchedule (TF.Resource p a) b where
    type HasScheduleThread (TF.Resource p a) b =
         HasScheduleThread a b

    schedule = TF.configuration . schedule

class HasScheduleExpression a b | a -> b where
    type HasScheduleExpressionThread a b :: *

    scheduleExpression
        :: Lens' a (TF.Attribute (HasScheduleExpressionThread a b) b)

instance HasScheduleExpression a b => HasScheduleExpression (TF.Resource p a) b where
    type HasScheduleExpressionThread (TF.Resource p a) b =
         HasScheduleExpressionThread a b

    scheduleExpression = TF.configuration . scheduleExpression

class HasScheduledActionName a b | a -> b where
    type HasScheduledActionNameThread a b :: *

    scheduledActionName
        :: Lens' a (TF.Attribute (HasScheduledActionNameThread a b) b)

instance HasScheduledActionName a b => HasScheduledActionName (TF.Resource p a) b where
    type HasScheduledActionNameThread (TF.Resource p a) b =
         HasScheduledActionNameThread a b

    scheduledActionName = TF.configuration . scheduledActionName

class HasSchema a b | a -> b where
    type HasSchemaThread a b :: *

    schema
        :: Lens' a (TF.Attribute (HasSchemaThread a b) b)

instance HasSchema a b => HasSchema (TF.Resource p a) b where
    type HasSchemaThread (TF.Resource p a) b =
         HasSchemaThread a b

    schema = TF.configuration . schema

class HasScope a b | a -> b where
    type HasScopeThread a b :: *

    scope
        :: Lens' a (TF.Attribute (HasScopeThread a b) b)

instance HasScope a b => HasScope (TF.Resource p a) b where
    type HasScopeThread (TF.Resource p a) b =
         HasScopeThread a b

    scope = TF.configuration . scope

class HasSearchString a b | a -> b where
    type HasSearchStringThread a b :: *

    searchString
        :: Lens' a (TF.Attribute (HasSearchStringThread a b) b)

instance HasSearchString a b => HasSearchString (TF.Resource p a) b where
    type HasSearchStringThread (TF.Resource p a) b =
         HasSearchStringThread a b

    searchString = TF.configuration . searchString

class HasSecurityConfiguration a b | a -> b where
    type HasSecurityConfigurationThread a b :: *

    securityConfiguration
        :: Lens' a (TF.Attribute (HasSecurityConfigurationThread a b) b)

instance HasSecurityConfiguration a b => HasSecurityConfiguration (TF.Resource p a) b where
    type HasSecurityConfigurationThread (TF.Resource p a) b =
         HasSecurityConfigurationThread a b

    securityConfiguration = TF.configuration . securityConfiguration

class HasSecurityGroupId a b | a -> b where
    type HasSecurityGroupIdThread a b :: *

    securityGroupId
        :: Lens' a (TF.Attribute (HasSecurityGroupIdThread a b) b)

instance HasSecurityGroupId a b => HasSecurityGroupId (TF.Resource p a) b where
    type HasSecurityGroupIdThread (TF.Resource p a) b =
         HasSecurityGroupIdThread a b

    securityGroupId = TF.configuration . securityGroupId

class HasSecurityGroupIds a b | a -> b where
    type HasSecurityGroupIdsThread a b :: *

    securityGroupIds
        :: Lens' a (TF.Attribute (HasSecurityGroupIdsThread a b) b)

instance HasSecurityGroupIds a b => HasSecurityGroupIds (TF.Resource p a) b where
    type HasSecurityGroupIdsThread (TF.Resource p a) b =
         HasSecurityGroupIdsThread a b

    securityGroupIds = TF.configuration . securityGroupIds

class HasSecurityGroupNames a b | a -> b where
    type HasSecurityGroupNamesThread a b :: *

    securityGroupNames
        :: Lens' a (TF.Attribute (HasSecurityGroupNamesThread a b) b)

instance HasSecurityGroupNames a b => HasSecurityGroupNames (TF.Resource p a) b where
    type HasSecurityGroupNamesThread (TF.Resource p a) b =
         HasSecurityGroupNamesThread a b

    securityGroupNames = TF.configuration . securityGroupNames

class HasSecurityGroups a b | a -> b where
    type HasSecurityGroupsThread a b :: *

    securityGroups
        :: Lens' a (TF.Attribute (HasSecurityGroupsThread a b) b)

instance HasSecurityGroups a b => HasSecurityGroups (TF.Resource p a) b where
    type HasSecurityGroupsThread (TF.Resource p a) b =
         HasSecurityGroupsThread a b

    securityGroups = TF.configuration . securityGroups

class HasSelectionPattern a b | a -> b where
    type HasSelectionPatternThread a b :: *

    selectionPattern
        :: Lens' a (TF.Attribute (HasSelectionPatternThread a b) b)

instance HasSelectionPattern a b => HasSelectionPattern (TF.Resource p a) b where
    type HasSelectionPatternThread (TF.Resource p a) b =
         HasSelectionPatternThread a b

    selectionPattern = TF.configuration . selectionPattern

class HasSelf a b | a -> b where
    type HasSelfThread a b :: *

    self
        :: Lens' a (TF.Attribute (HasSelfThread a b) b)

instance HasSelf a b => HasSelf (TF.Resource p a) b where
    type HasSelfThread (TF.Resource p a) b =
         HasSelfThread a b

    self = TF.configuration . self

class HasServerName a b | a -> b where
    type HasServerNameThread a b :: *

    serverName
        :: Lens' a (TF.Attribute (HasServerNameThread a b) b)

instance HasServerName a b => HasServerName (TF.Resource p a) b where
    type HasServerNameThread (TF.Resource p a) b =
         HasServerNameThread a b

    serverName = TF.configuration . serverName

class HasServerSideEncryption a b | a -> b where
    type HasServerSideEncryptionThread a b :: *

    serverSideEncryption
        :: Lens' a (TF.Attribute (HasServerSideEncryptionThread a b) b)

instance HasServerSideEncryption a b => HasServerSideEncryption (TF.Resource p a) b where
    type HasServerSideEncryptionThread (TF.Resource p a) b =
         HasServerSideEncryptionThread a b

    serverSideEncryption = TF.configuration . serverSideEncryption

class HasServerSideEncryptionConfiguration a b | a -> b where
    type HasServerSideEncryptionConfigurationThread a b :: *

    serverSideEncryptionConfiguration
        :: Lens' a (TF.Attribute (HasServerSideEncryptionConfigurationThread a b) b)

instance HasServerSideEncryptionConfiguration a b => HasServerSideEncryptionConfiguration (TF.Resource p a) b where
    type HasServerSideEncryptionConfigurationThread (TF.Resource p a) b =
         HasServerSideEncryptionConfigurationThread a b

    serverSideEncryptionConfiguration = TF.configuration . serverSideEncryptionConfiguration

class HasServiceAccessRole a b | a -> b where
    type HasServiceAccessRoleThread a b :: *

    serviceAccessRole
        :: Lens' a (TF.Attribute (HasServiceAccessRoleThread a b) b)

instance HasServiceAccessRole a b => HasServiceAccessRole (TF.Resource p a) b where
    type HasServiceAccessRoleThread (TF.Resource p a) b =
         HasServiceAccessRoleThread a b

    serviceAccessRole = TF.configuration . serviceAccessRole

class HasServiceName a b | a -> b where
    type HasServiceNameThread a b :: *

    serviceName
        :: Lens' a (TF.Attribute (HasServiceNameThread a b) b)

instance HasServiceName a b => HasServiceName (TF.Resource p a) b where
    type HasServiceNameThread (TF.Resource p a) b =
         HasServiceNameThread a b

    serviceName = TF.configuration . serviceName

class HasServiceNamespace a b | a -> b where
    type HasServiceNamespaceThread a b :: *

    serviceNamespace
        :: Lens' a (TF.Attribute (HasServiceNamespaceThread a b) b)

instance HasServiceNamespace a b => HasServiceNamespace (TF.Resource p a) b where
    type HasServiceNamespaceThread (TF.Resource p a) b =
         HasServiceNamespaceThread a b

    serviceNamespace = TF.configuration . serviceNamespace

class HasServiceRole a b | a -> b where
    type HasServiceRoleThread a b :: *

    serviceRole
        :: Lens' a (TF.Attribute (HasServiceRoleThread a b) b)

instance HasServiceRole a b => HasServiceRole (TF.Resource p a) b where
    type HasServiceRoleThread (TF.Resource p a) b =
         HasServiceRoleThread a b

    serviceRole = TF.configuration . serviceRole

class HasServiceRoleArn a b | a -> b where
    type HasServiceRoleArnThread a b :: *

    serviceRoleArn
        :: Lens' a (TF.Attribute (HasServiceRoleArnThread a b) b)

instance HasServiceRoleArn a b => HasServiceRoleArn (TF.Resource p a) b where
    type HasServiceRoleArnThread (TF.Resource p a) b =
         HasServiceRoleArnThread a b

    serviceRoleArn = TF.configuration . serviceRoleArn

class HasSetIdentifier a b | a -> b where
    type HasSetIdentifierThread a b :: *

    setIdentifier
        :: Lens' a (TF.Attribute (HasSetIdentifierThread a b) b)

instance HasSetIdentifier a b => HasSetIdentifier (TF.Resource p a) b where
    type HasSetIdentifierThread (TF.Resource p a) b =
         HasSetIdentifierThread a b

    setIdentifier = TF.configuration . setIdentifier

class HasSetting a b | a -> b where
    type HasSettingThread a b :: *

    setting
        :: Lens' a (TF.Attribute (HasSettingThread a b) b)

instance HasSetting a b => HasSetting (TF.Resource p a) b where
    type HasSettingThread (TF.Resource p a) b =
         HasSettingThread a b

    setting = TF.configuration . setting

class HasSettings a b | a -> b where
    type HasSettingsThread a b :: *

    settings
        :: Lens' a (TF.Attribute (HasSettingsThread a b) b)

instance HasSettings a b => HasSettings (TF.Resource p a) b where
    type HasSettingsThread (TF.Resource p a) b =
         HasSettingsThread a b

    settings = TF.configuration . settings

class HasShardCount a b | a -> b where
    type HasShardCountThread a b :: *

    shardCount
        :: Lens' a (TF.Attribute (HasShardCountThread a b) b)

instance HasShardCount a b => HasShardCount (TF.Resource p a) b where
    type HasShardCountThread (TF.Resource p a) b =
         HasShardCountThread a b

    shardCount = TF.configuration . shardCount

class HasShardLevelMetrics a b | a -> b where
    type HasShardLevelMetricsThread a b :: *

    shardLevelMetrics
        :: Lens' a (TF.Attribute (HasShardLevelMetricsThread a b) b)

instance HasShardLevelMetrics a b => HasShardLevelMetrics (TF.Resource p a) b where
    type HasShardLevelMetricsThread (TF.Resource p a) b =
         HasShardLevelMetricsThread a b

    shardLevelMetrics = TF.configuration . shardLevelMetrics

class HasShortName a b | a -> b where
    type HasShortNameThread a b :: *

    shortName
        :: Lens' a (TF.Attribute (HasShortNameThread a b) b)

instance HasShortName a b => HasShortName (TF.Resource p a) b where
    type HasShortNameThread (TF.Resource p a) b =
         HasShortNameThread a b

    shortName = TF.configuration . shortName

class HasSize a b | a -> b where
    type HasSizeThread a b :: *

    size
        :: Lens' a (TF.Attribute (HasSizeThread a b) b)

instance HasSize a b => HasSize (TF.Resource p a) b where
    type HasSizeThread (TF.Resource p a) b =
         HasSizeThread a b

    size = TF.configuration . size

class HasSizeConstraints a b | a -> b where
    type HasSizeConstraintsThread a b :: *

    sizeConstraints
        :: Lens' a (TF.Attribute (HasSizeConstraintsThread a b) b)

instance HasSizeConstraints a b => HasSizeConstraints (TF.Resource p a) b where
    type HasSizeConstraintsThread (TF.Resource p a) b =
         HasSizeConstraintsThread a b

    sizeConstraints = TF.configuration . sizeConstraints

class HasSkipDestroy a b | a -> b where
    type HasSkipDestroyThread a b :: *

    skipDestroy
        :: Lens' a (TF.Attribute (HasSkipDestroyThread a b) b)

instance HasSkipDestroy a b => HasSkipDestroy (TF.Resource p a) b where
    type HasSkipDestroyThread (TF.Resource p a) b =
         HasSkipDestroyThread a b

    skipDestroy = TF.configuration . skipDestroy

class HasSkipFinalSnapshot a b | a -> b where
    type HasSkipFinalSnapshotThread a b :: *

    skipFinalSnapshot
        :: Lens' a (TF.Attribute (HasSkipFinalSnapshotThread a b) b)

instance HasSkipFinalSnapshot a b => HasSkipFinalSnapshot (TF.Resource p a) b where
    type HasSkipFinalSnapshotThread (TF.Resource p a) b =
         HasSkipFinalSnapshotThread a b

    skipFinalSnapshot = TF.configuration . skipFinalSnapshot

class HasSmsAuthenticationMessage a b | a -> b where
    type HasSmsAuthenticationMessageThread a b :: *

    smsAuthenticationMessage
        :: Lens' a (TF.Attribute (HasSmsAuthenticationMessageThread a b) b)

instance HasSmsAuthenticationMessage a b => HasSmsAuthenticationMessage (TF.Resource p a) b where
    type HasSmsAuthenticationMessageThread (TF.Resource p a) b =
         HasSmsAuthenticationMessageThread a b

    smsAuthenticationMessage = TF.configuration . smsAuthenticationMessage

class HasSmsConfiguration a b | a -> b where
    type HasSmsConfigurationThread a b :: *

    smsConfiguration
        :: Lens' a (TF.Attribute (HasSmsConfigurationThread a b) b)

instance HasSmsConfiguration a b => HasSmsConfiguration (TF.Resource p a) b where
    type HasSmsConfigurationThread (TF.Resource p a) b =
         HasSmsConfigurationThread a b

    smsConfiguration = TF.configuration . smsConfiguration

class HasSmsVerificationMessage a b | a -> b where
    type HasSmsVerificationMessageThread a b :: *

    smsVerificationMessage
        :: Lens' a (TF.Attribute (HasSmsVerificationMessageThread a b) b)

instance HasSmsVerificationMessage a b => HasSmsVerificationMessage (TF.Resource p a) b where
    type HasSmsVerificationMessageThread (TF.Resource p a) b =
         HasSmsVerificationMessageThread a b

    smsVerificationMessage = TF.configuration . smsVerificationMessage

class HasSnapshotArns a b | a -> b where
    type HasSnapshotArnsThread a b :: *

    snapshotArns
        :: Lens' a (TF.Attribute (HasSnapshotArnsThread a b) b)

instance HasSnapshotArns a b => HasSnapshotArns (TF.Resource p a) b where
    type HasSnapshotArnsThread (TF.Resource p a) b =
         HasSnapshotArnsThread a b

    snapshotArns = TF.configuration . snapshotArns

class HasSnapshotClusterIdentifier a b | a -> b where
    type HasSnapshotClusterIdentifierThread a b :: *

    snapshotClusterIdentifier
        :: Lens' a (TF.Attribute (HasSnapshotClusterIdentifierThread a b) b)

instance HasSnapshotClusterIdentifier a b => HasSnapshotClusterIdentifier (TF.Resource p a) b where
    type HasSnapshotClusterIdentifierThread (TF.Resource p a) b =
         HasSnapshotClusterIdentifierThread a b

    snapshotClusterIdentifier = TF.configuration . snapshotClusterIdentifier

class HasSnapshotCopy a b | a -> b where
    type HasSnapshotCopyThread a b :: *

    snapshotCopy
        :: Lens' a (TF.Attribute (HasSnapshotCopyThread a b) b)

instance HasSnapshotCopy a b => HasSnapshotCopy (TF.Resource p a) b where
    type HasSnapshotCopyThread (TF.Resource p a) b =
         HasSnapshotCopyThread a b

    snapshotCopy = TF.configuration . snapshotCopy

class HasSnapshotDeliveryProperties a b | a -> b where
    type HasSnapshotDeliveryPropertiesThread a b :: *

    snapshotDeliveryProperties
        :: Lens' a (TF.Attribute (HasSnapshotDeliveryPropertiesThread a b) b)

instance HasSnapshotDeliveryProperties a b => HasSnapshotDeliveryProperties (TF.Resource p a) b where
    type HasSnapshotDeliveryPropertiesThread (TF.Resource p a) b =
         HasSnapshotDeliveryPropertiesThread a b

    snapshotDeliveryProperties = TF.configuration . snapshotDeliveryProperties

class HasSnapshotId a b | a -> b where
    type HasSnapshotIdThread a b :: *

    snapshotId
        :: Lens' a (TF.Attribute (HasSnapshotIdThread a b) b)

instance HasSnapshotId a b => HasSnapshotId (TF.Resource p a) b where
    type HasSnapshotIdThread (TF.Resource p a) b =
         HasSnapshotIdThread a b

    snapshotId = TF.configuration . snapshotId

class HasSnapshotIdentifier a b | a -> b where
    type HasSnapshotIdentifierThread a b :: *

    snapshotIdentifier
        :: Lens' a (TF.Attribute (HasSnapshotIdentifierThread a b) b)

instance HasSnapshotIdentifier a b => HasSnapshotIdentifier (TF.Resource p a) b where
    type HasSnapshotIdentifierThread (TF.Resource p a) b =
         HasSnapshotIdentifierThread a b

    snapshotIdentifier = TF.configuration . snapshotIdentifier

class HasSnapshotName a b | a -> b where
    type HasSnapshotNameThread a b :: *

    snapshotName
        :: Lens' a (TF.Attribute (HasSnapshotNameThread a b) b)

instance HasSnapshotName a b => HasSnapshotName (TF.Resource p a) b where
    type HasSnapshotNameThread (TF.Resource p a) b =
         HasSnapshotNameThread a b

    snapshotName = TF.configuration . snapshotName

class HasSnapshotOptions a b | a -> b where
    type HasSnapshotOptionsThread a b :: *

    snapshotOptions
        :: Lens' a (TF.Attribute (HasSnapshotOptionsThread a b) b)

instance HasSnapshotOptions a b => HasSnapshotOptions (TF.Resource p a) b where
    type HasSnapshotOptionsThread (TF.Resource p a) b =
         HasSnapshotOptionsThread a b

    snapshotOptions = TF.configuration . snapshotOptions

class HasSnapshotRetentionLimit a b | a -> b where
    type HasSnapshotRetentionLimitThread a b :: *

    snapshotRetentionLimit
        :: Lens' a (TF.Attribute (HasSnapshotRetentionLimitThread a b) b)

instance HasSnapshotRetentionLimit a b => HasSnapshotRetentionLimit (TF.Resource p a) b where
    type HasSnapshotRetentionLimitThread (TF.Resource p a) b =
         HasSnapshotRetentionLimitThread a b

    snapshotRetentionLimit = TF.configuration . snapshotRetentionLimit

class HasSnapshotWindow a b | a -> b where
    type HasSnapshotWindowThread a b :: *

    snapshotWindow
        :: Lens' a (TF.Attribute (HasSnapshotWindowThread a b) b)

instance HasSnapshotWindow a b => HasSnapshotWindow (TF.Resource p a) b where
    type HasSnapshotWindowThread (TF.Resource p a) b =
         HasSnapshotWindowThread a b

    snapshotWindow = TF.configuration . snapshotWindow

class HasSnapshotWithoutReboot a b | a -> b where
    type HasSnapshotWithoutRebootThread a b :: *

    snapshotWithoutReboot
        :: Lens' a (TF.Attribute (HasSnapshotWithoutRebootThread a b) b)

instance HasSnapshotWithoutReboot a b => HasSnapshotWithoutReboot (TF.Resource p a) b where
    type HasSnapshotWithoutRebootThread (TF.Resource p a) b =
         HasSnapshotWithoutRebootThread a b

    snapshotWithoutReboot = TF.configuration . snapshotWithoutReboot

class HasSnsAction a b | a -> b where
    type HasSnsActionThread a b :: *

    snsAction
        :: Lens' a (TF.Attribute (HasSnsActionThread a b) b)

instance HasSnsAction a b => HasSnsAction (TF.Resource p a) b where
    type HasSnsActionThread (TF.Resource p a) b =
         HasSnsActionThread a b

    snsAction = TF.configuration . snsAction

class HasSnsDestination a b | a -> b where
    type HasSnsDestinationThread a b :: *

    snsDestination
        :: Lens' a (TF.Attribute (HasSnsDestinationThread a b) b)

instance HasSnsDestination a b => HasSnsDestination (TF.Resource p a) b where
    type HasSnsDestinationThread (TF.Resource p a) b =
         HasSnsDestinationThread a b

    snsDestination = TF.configuration . snsDestination

class HasSnsTopic a b | a -> b where
    type HasSnsTopicThread a b :: *

    snsTopic
        :: Lens' a (TF.Attribute (HasSnsTopicThread a b) b)

instance HasSnsTopic a b => HasSnsTopic (TF.Resource p a) b where
    type HasSnsTopicThread (TF.Resource p a) b =
         HasSnsTopicThread a b

    snsTopic = TF.configuration . snsTopic

class HasSnsTopicArn a b | a -> b where
    type HasSnsTopicArnThread a b :: *

    snsTopicArn
        :: Lens' a (TF.Attribute (HasSnsTopicArnThread a b) b)

instance HasSnsTopicArn a b => HasSnsTopicArn (TF.Resource p a) b where
    type HasSnsTopicArnThread (TF.Resource p a) b =
         HasSnsTopicArnThread a b

    snsTopicArn = TF.configuration . snsTopicArn

class HasSnsTopicName a b | a -> b where
    type HasSnsTopicNameThread a b :: *

    snsTopicName
        :: Lens' a (TF.Attribute (HasSnsTopicNameThread a b) b)

instance HasSnsTopicName a b => HasSnsTopicName (TF.Resource p a) b where
    type HasSnsTopicNameThread (TF.Resource p a) b =
         HasSnsTopicNameThread a b

    snsTopicName = TF.configuration . snsTopicName

class HasSolutionStackName a b | a -> b where
    type HasSolutionStackNameThread a b :: *

    solutionStackName
        :: Lens' a (TF.Attribute (HasSolutionStackNameThread a b) b)

instance HasSolutionStackName a b => HasSolutionStackName (TF.Resource p a) b where
    type HasSolutionStackNameThread (TF.Resource p a) b =
         HasSolutionStackNameThread a b

    solutionStackName = TF.configuration . solutionStackName

class HasSource a b | a -> b where
    type HasSourceThread a b :: *

    source
        :: Lens' a (TF.Attribute (HasSourceThread a b) b)

instance HasSource a b => HasSource (TF.Resource p a) b where
    type HasSourceThread (TF.Resource p a) b =
         HasSourceThread a b

    source = TF.configuration . source

class HasSourceAccount a b | a -> b where
    type HasSourceAccountThread a b :: *

    sourceAccount
        :: Lens' a (TF.Attribute (HasSourceAccountThread a b) b)

instance HasSourceAccount a b => HasSourceAccount (TF.Resource p a) b where
    type HasSourceAccountThread (TF.Resource p a) b =
         HasSourceAccountThread a b

    sourceAccount = TF.configuration . sourceAccount

class HasSourceAmiId a b | a -> b where
    type HasSourceAmiIdThread a b :: *

    sourceAmiId
        :: Lens' a (TF.Attribute (HasSourceAmiIdThread a b) b)

instance HasSourceAmiId a b => HasSourceAmiId (TF.Resource p a) b where
    type HasSourceAmiIdThread (TF.Resource p a) b =
         HasSourceAmiIdThread a b

    sourceAmiId = TF.configuration . sourceAmiId

class HasSourceAmiRegion a b | a -> b where
    type HasSourceAmiRegionThread a b :: *

    sourceAmiRegion
        :: Lens' a (TF.Attribute (HasSourceAmiRegionThread a b) b)

instance HasSourceAmiRegion a b => HasSourceAmiRegion (TF.Resource p a) b where
    type HasSourceAmiRegionThread (TF.Resource p a) b =
         HasSourceAmiRegionThread a b

    sourceAmiRegion = TF.configuration . sourceAmiRegion

class HasSourceArn a b | a -> b where
    type HasSourceArnThread a b :: *

    sourceArn
        :: Lens' a (TF.Attribute (HasSourceArnThread a b) b)

instance HasSourceArn a b => HasSourceArn (TF.Resource p a) b where
    type HasSourceArnThread (TF.Resource p a) b =
         HasSourceArnThread a b

    sourceArn = TF.configuration . sourceArn

class HasSourceCodeHash a b | a -> b where
    type HasSourceCodeHashThread a b :: *

    sourceCodeHash
        :: Lens' a (TF.Attribute (HasSourceCodeHashThread a b) b)

instance HasSourceCodeHash a b => HasSourceCodeHash (TF.Resource p a) b where
    type HasSourceCodeHashThread (TF.Resource p a) b =
         HasSourceCodeHashThread a b

    sourceCodeHash = TF.configuration . sourceCodeHash

class HasSourceDestCheck a b | a -> b where
    type HasSourceDestCheckThread a b :: *

    sourceDestCheck
        :: Lens' a (TF.Attribute (HasSourceDestCheckThread a b) b)

instance HasSourceDestCheck a b => HasSourceDestCheck (TF.Resource p a) b where
    type HasSourceDestCheckThread (TF.Resource p a) b =
         HasSourceDestCheckThread a b

    sourceDestCheck = TF.configuration . sourceDestCheck

class HasSourceEndpointArn a b | a -> b where
    type HasSourceEndpointArnThread a b :: *

    sourceEndpointArn
        :: Lens' a (TF.Attribute (HasSourceEndpointArnThread a b) b)

instance HasSourceEndpointArn a b => HasSourceEndpointArn (TF.Resource p a) b where
    type HasSourceEndpointArnThread (TF.Resource p a) b =
         HasSourceEndpointArnThread a b

    sourceEndpointArn = TF.configuration . sourceEndpointArn

class HasSourceIds a b | a -> b where
    type HasSourceIdsThread a b :: *

    sourceIds
        :: Lens' a (TF.Attribute (HasSourceIdsThread a b) b)

instance HasSourceIds a b => HasSourceIds (TF.Resource p a) b where
    type HasSourceIdsThread (TF.Resource p a) b =
         HasSourceIdsThread a b

    sourceIds = TF.configuration . sourceIds

class HasSourceInstanceId a b | a -> b where
    type HasSourceInstanceIdThread a b :: *

    sourceInstanceId
        :: Lens' a (TF.Attribute (HasSourceInstanceIdThread a b) b)

instance HasSourceInstanceId a b => HasSourceInstanceId (TF.Resource p a) b where
    type HasSourceInstanceIdThread (TF.Resource p a) b =
         HasSourceInstanceIdThread a b

    sourceInstanceId = TF.configuration . sourceInstanceId

class HasSourceSecurityGroupId a b | a -> b where
    type HasSourceSecurityGroupIdThread a b :: *

    sourceSecurityGroupId
        :: Lens' a (TF.Attribute (HasSourceSecurityGroupIdThread a b) b)

instance HasSourceSecurityGroupId a b => HasSourceSecurityGroupId (TF.Resource p a) b where
    type HasSourceSecurityGroupIdThread (TF.Resource p a) b =
         HasSourceSecurityGroupIdThread a b

    sourceSecurityGroupId = TF.configuration . sourceSecurityGroupId

class HasSourceType a b | a -> b where
    type HasSourceTypeThread a b :: *

    sourceType
        :: Lens' a (TF.Attribute (HasSourceTypeThread a b) b)

instance HasSourceType a b => HasSourceType (TF.Resource p a) b where
    type HasSourceTypeThread (TF.Resource p a) b =
         HasSourceTypeThread a b

    sourceType = TF.configuration . sourceType

class HasSpotPrice a b | a -> b where
    type HasSpotPriceThread a b :: *

    spotPrice
        :: Lens' a (TF.Attribute (HasSpotPriceThread a b) b)

instance HasSpotPrice a b => HasSpotPrice (TF.Resource p a) b where
    type HasSpotPriceThread (TF.Resource p a) b =
         HasSpotPriceThread a b

    spotPrice = TF.configuration . spotPrice

class HasSpotType a b | a -> b where
    type HasSpotTypeThread a b :: *

    spotType
        :: Lens' a (TF.Attribute (HasSpotTypeThread a b) b)

instance HasSpotType a b => HasSpotType (TF.Resource p a) b where
    type HasSpotTypeThread (TF.Resource p a) b =
         HasSpotTypeThread a b

    spotType = TF.configuration . spotType

class HasSqlInjectionMatchTuples a b | a -> b where
    type HasSqlInjectionMatchTuplesThread a b :: *

    sqlInjectionMatchTuples
        :: Lens' a (TF.Attribute (HasSqlInjectionMatchTuplesThread a b) b)

instance HasSqlInjectionMatchTuples a b => HasSqlInjectionMatchTuples (TF.Resource p a) b where
    type HasSqlInjectionMatchTuplesThread (TF.Resource p a) b =
         HasSqlInjectionMatchTuplesThread a b

    sqlInjectionMatchTuples = TF.configuration . sqlInjectionMatchTuples

class HasSshKeyName a b | a -> b where
    type HasSshKeyNameThread a b :: *

    sshKeyName
        :: Lens' a (TF.Attribute (HasSshKeyNameThread a b) b)

instance HasSshKeyName a b => HasSshKeyName (TF.Resource p a) b where
    type HasSshKeyNameThread (TF.Resource p a) b =
         HasSshKeyNameThread a b

    sshKeyName = TF.configuration . sshKeyName

class HasSshPublicKey a b | a -> b where
    type HasSshPublicKeyThread a b :: *

    sshPublicKey
        :: Lens' a (TF.Attribute (HasSshPublicKeyThread a b) b)

instance HasSshPublicKey a b => HasSshPublicKey (TF.Resource p a) b where
    type HasSshPublicKeyThread (TF.Resource p a) b =
         HasSshPublicKeyThread a b

    sshPublicKey = TF.configuration . sshPublicKey

class HasSshUsername a b | a -> b where
    type HasSshUsernameThread a b :: *

    sshUsername
        :: Lens' a (TF.Attribute (HasSshUsernameThread a b) b)

instance HasSshUsername a b => HasSshUsername (TF.Resource p a) b where
    type HasSshUsernameThread (TF.Resource p a) b =
         HasSshUsernameThread a b

    sshUsername = TF.configuration . sshUsername

class HasSslConfiguration a b | a -> b where
    type HasSslConfigurationThread a b :: *

    sslConfiguration
        :: Lens' a (TF.Attribute (HasSslConfigurationThread a b) b)

instance HasSslConfiguration a b => HasSslConfiguration (TF.Resource p a) b where
    type HasSslConfigurationThread (TF.Resource p a) b =
         HasSslConfigurationThread a b

    sslConfiguration = TF.configuration . sslConfiguration

class HasSslMode a b | a -> b where
    type HasSslModeThread a b :: *

    sslMode
        :: Lens' a (TF.Attribute (HasSslModeThread a b) b)

instance HasSslMode a b => HasSslMode (TF.Resource p a) b where
    type HasSslModeThread (TF.Resource p a) b =
         HasSslModeThread a b

    sslMode = TF.configuration . sslMode

class HasSslPolicy a b | a -> b where
    type HasSslPolicyThread a b :: *

    sslPolicy
        :: Lens' a (TF.Attribute (HasSslPolicyThread a b) b)

instance HasSslPolicy a b => HasSslPolicy (TF.Resource p a) b where
    type HasSslPolicyThread (TF.Resource p a) b =
         HasSslPolicyThread a b

    sslPolicy = TF.configuration . sslPolicy

class HasStackId a b | a -> b where
    type HasStackIdThread a b :: *

    stackId
        :: Lens' a (TF.Attribute (HasStackIdThread a b) b)

instance HasStackId a b => HasStackId (TF.Resource p a) b where
    type HasStackIdThread (TF.Resource p a) b =
         HasStackIdThread a b

    stackId = TF.configuration . stackId

class HasStage a b | a -> b where
    type HasStageThread a b :: *

    stage
        :: Lens' a (TF.Attribute (HasStageThread a b) b)

instance HasStage a b => HasStage (TF.Resource p a) b where
    type HasStageThread (TF.Resource p a) b =
         HasStageThread a b

    stage = TF.configuration . stage

class HasStageDescription a b | a -> b where
    type HasStageDescriptionThread a b :: *

    stageDescription
        :: Lens' a (TF.Attribute (HasStageDescriptionThread a b) b)

instance HasStageDescription a b => HasStageDescription (TF.Resource p a) b where
    type HasStageDescriptionThread (TF.Resource p a) b =
         HasStageDescriptionThread a b

    stageDescription = TF.configuration . stageDescription

class HasStageKey a b | a -> b where
    type HasStageKeyThread a b :: *

    stageKey
        :: Lens' a (TF.Attribute (HasStageKeyThread a b) b)

instance HasStageKey a b => HasStageKey (TF.Resource p a) b where
    type HasStageKeyThread (TF.Resource p a) b =
         HasStageKeyThread a b

    stageKey = TF.configuration . stageKey

class HasStageName a b | a -> b where
    type HasStageNameThread a b :: *

    stageName
        :: Lens' a (TF.Attribute (HasStageNameThread a b) b)

instance HasStageName a b => HasStageName (TF.Resource p a) b where
    type HasStageNameThread (TF.Resource p a) b =
         HasStageNameThread a b

    stageName = TF.configuration . stageName

class HasStartTime a b | a -> b where
    type HasStartTimeThread a b :: *

    startTime
        :: Lens' a (TF.Attribute (HasStartTimeThread a b) b)

instance HasStartTime a b => HasStartTime (TF.Resource p a) b where
    type HasStartTimeThread (TF.Resource p a) b =
         HasStartTimeThread a b

    startTime = TF.configuration . startTime

class HasStartingPosition a b | a -> b where
    type HasStartingPositionThread a b :: *

    startingPosition
        :: Lens' a (TF.Attribute (HasStartingPositionThread a b) b)

instance HasStartingPosition a b => HasStartingPosition (TF.Resource p a) b where
    type HasStartingPositionThread (TF.Resource p a) b =
         HasStartingPositionThread a b

    startingPosition = TF.configuration . startingPosition

class HasState a b | a -> b where
    type HasStateThread a b :: *

    state
        :: Lens' a (TF.Attribute (HasStateThread a b) b)

instance HasState a b => HasState (TF.Resource p a) b where
    type HasStateThread (TF.Resource p a) b =
         HasStateThread a b

    state = TF.configuration . state

class HasStatementId a b | a -> b where
    type HasStatementIdThread a b :: *

    statementId
        :: Lens' a (TF.Attribute (HasStatementIdThread a b) b)

instance HasStatementId a b => HasStatementId (TF.Resource p a) b where
    type HasStatementIdThread (TF.Resource p a) b =
         HasStatementIdThread a b

    statementId = TF.configuration . statementId

class HasStaticIpName a b | a -> b where
    type HasStaticIpNameThread a b :: *

    staticIpName
        :: Lens' a (TF.Attribute (HasStaticIpNameThread a b) b)

instance HasStaticIpName a b => HasStaticIpName (TF.Resource p a) b where
    type HasStaticIpNameThread (TF.Resource p a) b =
         HasStaticIpNameThread a b

    staticIpName = TF.configuration . staticIpName

class HasStaticRoutesOnly a b | a -> b where
    type HasStaticRoutesOnlyThread a b :: *

    staticRoutesOnly
        :: Lens' a (TF.Attribute (HasStaticRoutesOnlyThread a b) b)

instance HasStaticRoutesOnly a b => HasStaticRoutesOnly (TF.Resource p a) b where
    type HasStaticRoutesOnlyThread (TF.Resource p a) b =
         HasStaticRoutesOnlyThread a b

    staticRoutesOnly = TF.configuration . staticRoutesOnly

class HasStatistic a b | a -> b where
    type HasStatisticThread a b :: *

    statistic
        :: Lens' a (TF.Attribute (HasStatisticThread a b) b)

instance HasStatistic a b => HasStatistic (TF.Resource p a) b where
    type HasStatisticThread (TF.Resource p a) b =
         HasStatisticThread a b

    statistic = TF.configuration . statistic

class HasStatsEnabled a b | a -> b where
    type HasStatsEnabledThread a b :: *

    statsEnabled
        :: Lens' a (TF.Attribute (HasStatsEnabledThread a b) b)

instance HasStatsEnabled a b => HasStatsEnabled (TF.Resource p a) b where
    type HasStatsEnabledThread (TF.Resource p a) b =
         HasStatsEnabledThread a b

    statsEnabled = TF.configuration . statsEnabled

class HasStatsPassword a b | a -> b where
    type HasStatsPasswordThread a b :: *

    statsPassword
        :: Lens' a (TF.Attribute (HasStatsPasswordThread a b) b)

instance HasStatsPassword a b => HasStatsPassword (TF.Resource p a) b where
    type HasStatsPasswordThread (TF.Resource p a) b =
         HasStatsPasswordThread a b

    statsPassword = TF.configuration . statsPassword

class HasStatsUrl a b | a -> b where
    type HasStatsUrlThread a b :: *

    statsUrl
        :: Lens' a (TF.Attribute (HasStatsUrlThread a b) b)

instance HasStatsUrl a b => HasStatsUrl (TF.Resource p a) b where
    type HasStatsUrlThread (TF.Resource p a) b =
         HasStatsUrlThread a b

    statsUrl = TF.configuration . statsUrl

class HasStatsUser a b | a -> b where
    type HasStatsUserThread a b :: *

    statsUser
        :: Lens' a (TF.Attribute (HasStatsUserThread a b) b)

instance HasStatsUser a b => HasStatsUser (TF.Resource p a) b where
    type HasStatsUserThread (TF.Resource p a) b =
         HasStatsUserThread a b

    statsUser = TF.configuration . statsUser

class HasStatus a b | a -> b where
    type HasStatusThread a b :: *

    status
        :: Lens' a (TF.Attribute (HasStatusThread a b) b)

instance HasStatus a b => HasStatus (TF.Resource p a) b where
    type HasStatusThread (TF.Resource p a) b =
         HasStatusThread a b

    status = TF.configuration . status

class HasStatusCode a b | a -> b where
    type HasStatusCodeThread a b :: *

    statusCode
        :: Lens' a (TF.Attribute (HasStatusCodeThread a b) b)

instance HasStatusCode a b => HasStatusCode (TF.Resource p a) b where
    type HasStatusCodeThread (TF.Resource p a) b =
         HasStatusCodeThread a b

    statusCode = TF.configuration . statusCode

class HasStepScalingPolicyConfiguration a b | a -> b where
    type HasStepScalingPolicyConfigurationThread a b :: *

    stepScalingPolicyConfiguration
        :: Lens' a (TF.Attribute (HasStepScalingPolicyConfigurationThread a b) b)

instance HasStepScalingPolicyConfiguration a b => HasStepScalingPolicyConfiguration (TF.Resource p a) b where
    type HasStepScalingPolicyConfigurationThread (TF.Resource p a) b =
         HasStepScalingPolicyConfigurationThread a b

    stepScalingPolicyConfiguration = TF.configuration . stepScalingPolicyConfiguration

class HasStickiness a b | a -> b where
    type HasStickinessThread a b :: *

    stickiness
        :: Lens' a (TF.Attribute (HasStickinessThread a b) b)

instance HasStickiness a b => HasStickiness (TF.Resource p a) b where
    type HasStickinessThread (TF.Resource p a) b =
         HasStickinessThread a b

    stickiness = TF.configuration . stickiness

class HasStopAction a b | a -> b where
    type HasStopActionThread a b :: *

    stopAction
        :: Lens' a (TF.Attribute (HasStopActionThread a b) b)

instance HasStopAction a b => HasStopAction (TF.Resource p a) b where
    type HasStopActionThread (TF.Resource p a) b =
         HasStopActionThread a b

    stopAction = TF.configuration . stopAction

class HasStorageClass a b | a -> b where
    type HasStorageClassThread a b :: *

    storageClass
        :: Lens' a (TF.Attribute (HasStorageClassThread a b) b)

instance HasStorageClass a b => HasStorageClass (TF.Resource p a) b where
    type HasStorageClassThread (TF.Resource p a) b =
         HasStorageClassThread a b

    storageClass = TF.configuration . storageClass

class HasStorageEncrypted a b | a -> b where
    type HasStorageEncryptedThread a b :: *

    storageEncrypted
        :: Lens' a (TF.Attribute (HasStorageEncryptedThread a b) b)

instance HasStorageEncrypted a b => HasStorageEncrypted (TF.Resource p a) b where
    type HasStorageEncryptedThread (TF.Resource p a) b =
         HasStorageEncryptedThread a b

    storageEncrypted = TF.configuration . storageEncrypted

class HasStorageType a b | a -> b where
    type HasStorageTypeThread a b :: *

    storageType
        :: Lens' a (TF.Attribute (HasStorageTypeThread a b) b)

instance HasStorageType a b => HasStorageType (TF.Resource p a) b where
    type HasStorageTypeThread (TF.Resource p a) b =
         HasStorageTypeThread a b

    storageType = TF.configuration . storageType

class HasStrategy a b | a -> b where
    type HasStrategyThread a b :: *

    strategy
        :: Lens' a (TF.Attribute (HasStrategyThread a b) b)

instance HasStrategy a b => HasStrategy (TF.Resource p a) b where
    type HasStrategyThread (TF.Resource p a) b =
         HasStrategyThread a b

    strategy = TF.configuration . strategy

class HasStreamEnabled a b | a -> b where
    type HasStreamEnabledThread a b :: *

    streamEnabled
        :: Lens' a (TF.Attribute (HasStreamEnabledThread a b) b)

instance HasStreamEnabled a b => HasStreamEnabled (TF.Resource p a) b where
    type HasStreamEnabledThread (TF.Resource p a) b =
         HasStreamEnabledThread a b

    streamEnabled = TF.configuration . streamEnabled

class HasStreamViewType a b | a -> b where
    type HasStreamViewTypeThread a b :: *

    streamViewType
        :: Lens' a (TF.Attribute (HasStreamViewTypeThread a b) b)

instance HasStreamViewType a b => HasStreamViewType (TF.Resource p a) b where
    type HasStreamViewTypeThread (TF.Resource p a) b =
         HasStreamViewTypeThread a b

    streamViewType = TF.configuration . streamViewType

class HasSubject a b | a -> b where
    type HasSubjectThread a b :: *

    subject
        :: Lens' a (TF.Attribute (HasSubjectThread a b) b)

instance HasSubject a b => HasSubject (TF.Resource p a) b where
    type HasSubjectThread (TF.Resource p a) b =
         HasSubjectThread a b

    subject = TF.configuration . subject

class HasSubnetGroupName a b | a -> b where
    type HasSubnetGroupNameThread a b :: *

    subnetGroupName
        :: Lens' a (TF.Attribute (HasSubnetGroupNameThread a b) b)

instance HasSubnetGroupName a b => HasSubnetGroupName (TF.Resource p a) b where
    type HasSubnetGroupNameThread (TF.Resource p a) b =
         HasSubnetGroupNameThread a b

    subnetGroupName = TF.configuration . subnetGroupName

class HasSubnetId a b | a -> b where
    type HasSubnetIdThread a b :: *

    subnetId
        :: Lens' a (TF.Attribute (HasSubnetIdThread a b) b)

instance HasSubnetId a b => HasSubnetId (TF.Resource p a) b where
    type HasSubnetIdThread (TF.Resource p a) b =
         HasSubnetIdThread a b

    subnetId = TF.configuration . subnetId

class HasSubnetIds a b | a -> b where
    type HasSubnetIdsThread a b :: *

    subnetIds
        :: Lens' a (TF.Attribute (HasSubnetIdsThread a b) b)

instance HasSubnetIds a b => HasSubnetIds (TF.Resource p a) b where
    type HasSubnetIdsThread (TF.Resource p a) b =
         HasSubnetIdsThread a b

    subnetIds = TF.configuration . subnetIds

class HasSubnetMapping a b | a -> b where
    type HasSubnetMappingThread a b :: *

    subnetMapping
        :: Lens' a (TF.Attribute (HasSubnetMappingThread a b) b)

instance HasSubnetMapping a b => HasSubnetMapping (TF.Resource p a) b where
    type HasSubnetMappingThread (TF.Resource p a) b =
         HasSubnetMappingThread a b

    subnetMapping = TF.configuration . subnetMapping

class HasSubnets a b | a -> b where
    type HasSubnetsThread a b :: *

    subnets
        :: Lens' a (TF.Attribute (HasSubnetsThread a b) b)

instance HasSubnets a b => HasSubnets (TF.Resource p a) b where
    type HasSubnetsThread (TF.Resource p a) b =
         HasSubnetsThread a b

    subnets = TF.configuration . subnets

class HasSupportedIdentityProviders a b | a -> b where
    type HasSupportedIdentityProvidersThread a b :: *

    supportedIdentityProviders
        :: Lens' a (TF.Attribute (HasSupportedIdentityProvidersThread a b) b)

instance HasSupportedIdentityProviders a b => HasSupportedIdentityProviders (TF.Resource p a) b where
    type HasSupportedIdentityProvidersThread (TF.Resource p a) b =
         HasSupportedIdentityProvidersThread a b

    supportedIdentityProviders = TF.configuration . supportedIdentityProviders

class HasSupportedLoginProviders a b | a -> b where
    type HasSupportedLoginProvidersThread a b :: *

    supportedLoginProviders
        :: Lens' a (TF.Attribute (HasSupportedLoginProvidersThread a b) b)

instance HasSupportedLoginProviders a b => HasSupportedLoginProviders (TF.Resource p a) b where
    type HasSupportedLoginProvidersThread (TF.Resource p a) b =
         HasSupportedLoginProvidersThread a b

    supportedLoginProviders = TF.configuration . supportedLoginProviders

class HasSuspendedProcesses a b | a -> b where
    type HasSuspendedProcessesThread a b :: *

    suspendedProcesses
        :: Lens' a (TF.Attribute (HasSuspendedProcessesThread a b) b)

instance HasSuspendedProcesses a b => HasSuspendedProcesses (TF.Resource p a) b where
    type HasSuspendedProcessesThread (TF.Resource p a) b =
         HasSuspendedProcessesThread a b

    suspendedProcesses = TF.configuration . suspendedProcesses

class HasSystemPackages a b | a -> b where
    type HasSystemPackagesThread a b :: *

    systemPackages
        :: Lens' a (TF.Attribute (HasSystemPackagesThread a b) b)

instance HasSystemPackages a b => HasSystemPackages (TF.Resource p a) b where
    type HasSystemPackagesThread (TF.Resource p a) b =
         HasSystemPackagesThread a b

    systemPackages = TF.configuration . systemPackages

class HasTableMappings a b | a -> b where
    type HasTableMappingsThread a b :: *

    tableMappings
        :: Lens' a (TF.Attribute (HasTableMappingsThread a b) b)

instance HasTableMappings a b => HasTableMappings (TF.Resource p a) b where
    type HasTableMappingsThread (TF.Resource p a) b =
         HasTableMappingsThread a b

    tableMappings = TF.configuration . tableMappings

class HasTag a b | a -> b where
    type HasTagThread a b :: *

    tag
        :: Lens' a (TF.Attribute (HasTagThread a b) b)

instance HasTag a b => HasTag (TF.Resource p a) b where
    type HasTagThread (TF.Resource p a) b =
         HasTagThread a b

    tag = TF.configuration . tag

class HasTags a b | a -> b where
    type HasTagsThread a b :: *

    tags
        :: Lens' a (TF.Attribute (HasTagsThread a b) b)

instance HasTags a b => HasTags (TF.Resource p a) b where
    type HasTagsThread (TF.Resource p a) b =
         HasTagsThread a b

    tags = TF.configuration . tags

class HasTargetArn a b | a -> b where
    type HasTargetArnThread a b :: *

    targetArn
        :: Lens' a (TF.Attribute (HasTargetArnThread a b) b)

instance HasTargetArn a b => HasTargetArn (TF.Resource p a) b where
    type HasTargetArnThread (TF.Resource p a) b =
         HasTargetArnThread a b

    targetArn = TF.configuration . targetArn

class HasTargetCapacity a b | a -> b where
    type HasTargetCapacityThread a b :: *

    targetCapacity
        :: Lens' a (TF.Attribute (HasTargetCapacityThread a b) b)

instance HasTargetCapacity a b => HasTargetCapacity (TF.Resource p a) b where
    type HasTargetCapacityThread (TF.Resource p a) b =
         HasTargetCapacityThread a b

    targetCapacity = TF.configuration . targetCapacity

class HasTargetEndpointArn a b | a -> b where
    type HasTargetEndpointArnThread a b :: *

    targetEndpointArn
        :: Lens' a (TF.Attribute (HasTargetEndpointArnThread a b) b)

instance HasTargetEndpointArn a b => HasTargetEndpointArn (TF.Resource p a) b where
    type HasTargetEndpointArnThread (TF.Resource p a) b =
         HasTargetEndpointArnThread a b

    targetEndpointArn = TF.configuration . targetEndpointArn

class HasTargetGroupArn a b | a -> b where
    type HasTargetGroupArnThread a b :: *

    targetGroupArn
        :: Lens' a (TF.Attribute (HasTargetGroupArnThread a b) b)

instance HasTargetGroupArn a b => HasTargetGroupArn (TF.Resource p a) b where
    type HasTargetGroupArnThread (TF.Resource p a) b =
         HasTargetGroupArnThread a b

    targetGroupArn = TF.configuration . targetGroupArn

class HasTargetGroupArns a b | a -> b where
    type HasTargetGroupArnsThread a b :: *

    targetGroupArns
        :: Lens' a (TF.Attribute (HasTargetGroupArnsThread a b) b)

instance HasTargetGroupArns a b => HasTargetGroupArns (TF.Resource p a) b where
    type HasTargetGroupArnsThread (TF.Resource p a) b =
         HasTargetGroupArnsThread a b

    targetGroupArns = TF.configuration . targetGroupArns

class HasTargetId a b | a -> b where
    type HasTargetIdThread a b :: *

    targetId
        :: Lens' a (TF.Attribute (HasTargetIdThread a b) b)

instance HasTargetId a b => HasTargetId (TF.Resource p a) b where
    type HasTargetIdThread (TF.Resource p a) b =
         HasTargetIdThread a b

    targetId = TF.configuration . targetId

class HasTargetKeyId a b | a -> b where
    type HasTargetKeyIdThread a b :: *

    targetKeyId
        :: Lens' a (TF.Attribute (HasTargetKeyIdThread a b) b)

instance HasTargetKeyId a b => HasTargetKeyId (TF.Resource p a) b where
    type HasTargetKeyIdThread (TF.Resource p a) b =
         HasTargetKeyIdThread a b

    targetKeyId = TF.configuration . targetKeyId

class HasTargetTrackingScalingPolicyConfiguration a b | a -> b where
    type HasTargetTrackingScalingPolicyConfigurationThread a b :: *

    targetTrackingScalingPolicyConfiguration
        :: Lens' a (TF.Attribute (HasTargetTrackingScalingPolicyConfigurationThread a b) b)

instance HasTargetTrackingScalingPolicyConfiguration a b => HasTargetTrackingScalingPolicyConfiguration (TF.Resource p a) b where
    type HasTargetTrackingScalingPolicyConfigurationThread (TF.Resource p a) b =
         HasTargetTrackingScalingPolicyConfigurationThread a b

    targetTrackingScalingPolicyConfiguration = TF.configuration . targetTrackingScalingPolicyConfiguration

class HasTargetType a b | a -> b where
    type HasTargetTypeThread a b :: *

    targetType
        :: Lens' a (TF.Attribute (HasTargetTypeThread a b) b)

instance HasTargetType a b => HasTargetType (TF.Resource p a) b where
    type HasTargetTypeThread (TF.Resource p a) b =
         HasTargetTypeThread a b

    targetType = TF.configuration . targetType

class HasTargets a b | a -> b where
    type HasTargetsThread a b :: *

    targets
        :: Lens' a (TF.Attribute (HasTargetsThread a b) b)

instance HasTargets a b => HasTargets (TF.Resource p a) b where
    type HasTargetsThread (TF.Resource p a) b =
         HasTargetsThread a b

    targets = TF.configuration . targets

class HasTaskArn a b | a -> b where
    type HasTaskArnThread a b :: *

    taskArn
        :: Lens' a (TF.Attribute (HasTaskArnThread a b) b)

instance HasTaskArn a b => HasTaskArn (TF.Resource p a) b where
    type HasTaskArnThread (TF.Resource p a) b =
         HasTaskArnThread a b

    taskArn = TF.configuration . taskArn

class HasTaskDefinition a b | a -> b where
    type HasTaskDefinitionThread a b :: *

    taskDefinition
        :: Lens' a (TF.Attribute (HasTaskDefinitionThread a b) b)

instance HasTaskDefinition a b => HasTaskDefinition (TF.Resource p a) b where
    type HasTaskDefinitionThread (TF.Resource p a) b =
         HasTaskDefinitionThread a b

    taskDefinition = TF.configuration . taskDefinition

class HasTaskParameters a b | a -> b where
    type HasTaskParametersThread a b :: *

    taskParameters
        :: Lens' a (TF.Attribute (HasTaskParametersThread a b) b)

instance HasTaskParameters a b => HasTaskParameters (TF.Resource p a) b where
    type HasTaskParametersThread (TF.Resource p a) b =
         HasTaskParametersThread a b

    taskParameters = TF.configuration . taskParameters

class HasTaskType a b | a -> b where
    type HasTaskTypeThread a b :: *

    taskType
        :: Lens' a (TF.Attribute (HasTaskTypeThread a b) b)

instance HasTaskType a b => HasTaskType (TF.Resource p a) b where
    type HasTaskTypeThread (TF.Resource p a) b =
         HasTaskTypeThread a b

    taskType = TF.configuration . taskType

class HasTemplateBody a b | a -> b where
    type HasTemplateBodyThread a b :: *

    templateBody
        :: Lens' a (TF.Attribute (HasTemplateBodyThread a b) b)

instance HasTemplateBody a b => HasTemplateBody (TF.Resource p a) b where
    type HasTemplateBodyThread (TF.Resource p a) b =
         HasTemplateBodyThread a b

    templateBody = TF.configuration . templateBody

class HasTemplateName a b | a -> b where
    type HasTemplateNameThread a b :: *

    templateName
        :: Lens' a (TF.Attribute (HasTemplateNameThread a b) b)

instance HasTemplateName a b => HasTemplateName (TF.Resource p a) b where
    type HasTemplateNameThread (TF.Resource p a) b =
         HasTemplateNameThread a b

    templateName = TF.configuration . templateName

class HasTemplateUrl a b | a -> b where
    type HasTemplateUrlThread a b :: *

    templateUrl
        :: Lens' a (TF.Attribute (HasTemplateUrlThread a b) b)

instance HasTemplateUrl a b => HasTemplateUrl (TF.Resource p a) b where
    type HasTemplateUrlThread (TF.Resource p a) b =
         HasTemplateUrlThread a b

    templateUrl = TF.configuration . templateUrl

class HasTenancy a b | a -> b where
    type HasTenancyThread a b :: *

    tenancy
        :: Lens' a (TF.Attribute (HasTenancyThread a b) b)

instance HasTenancy a b => HasTenancy (TF.Resource p a) b where
    type HasTenancyThread (TF.Resource p a) b =
         HasTenancyThread a b

    tenancy = TF.configuration . tenancy

class HasTerminateInstancesWithExpiration a b | a -> b where
    type HasTerminateInstancesWithExpirationThread a b :: *

    terminateInstancesWithExpiration
        :: Lens' a (TF.Attribute (HasTerminateInstancesWithExpirationThread a b) b)

instance HasTerminateInstancesWithExpiration a b => HasTerminateInstancesWithExpiration (TF.Resource p a) b where
    type HasTerminateInstancesWithExpirationThread (TF.Resource p a) b =
         HasTerminateInstancesWithExpirationThread a b

    terminateInstancesWithExpiration = TF.configuration . terminateInstancesWithExpiration

class HasTerminationPolicies a b | a -> b where
    type HasTerminationPoliciesThread a b :: *

    terminationPolicies
        :: Lens' a (TF.Attribute (HasTerminationPoliciesThread a b) b)

instance HasTerminationPolicies a b => HasTerminationPolicies (TF.Resource p a) b where
    type HasTerminationPoliciesThread (TF.Resource p a) b =
         HasTerminationPoliciesThread a b

    terminationPolicies = TF.configuration . terminationPolicies

class HasTerminationProtection a b | a -> b where
    type HasTerminationProtectionThread a b :: *

    terminationProtection
        :: Lens' a (TF.Attribute (HasTerminationProtectionThread a b) b)

instance HasTerminationProtection a b => HasTerminationProtection (TF.Resource p a) b where
    type HasTerminationProtectionThread (TF.Resource p a) b =
         HasTerminationProtectionThread a b

    terminationProtection = TF.configuration . terminationProtection

class HasText a b | a -> b where
    type HasTextThread a b :: *

    text
        :: Lens' a (TF.Attribute (HasTextThread a b) b)

instance HasText a b => HasText (TF.Resource p a) b where
    type HasTextThread (TF.Resource p a) b =
         HasTextThread a b

    text = TF.configuration . text

class HasThreshold a b | a -> b where
    type HasThresholdThread a b :: *

    threshold
        :: Lens' a (TF.Attribute (HasThresholdThread a b) b)

instance HasThreshold a b => HasThreshold (TF.Resource p a) b where
    type HasThresholdThread (TF.Resource p a) b =
         HasThresholdThread a b

    threshold = TF.configuration . threshold

class HasThrottleSettings a b | a -> b where
    type HasThrottleSettingsThread a b :: *

    throttleSettings
        :: Lens' a (TF.Attribute (HasThrottleSettingsThread a b) b)

instance HasThrottleSettings a b => HasThrottleSettings (TF.Resource p a) b where
    type HasThrottleSettingsThread (TF.Resource p a) b =
         HasThrottleSettingsThread a b

    throttleSettings = TF.configuration . throttleSettings

class HasThumbnailConfig a b | a -> b where
    type HasThumbnailConfigThread a b :: *

    thumbnailConfig
        :: Lens' a (TF.Attribute (HasThumbnailConfigThread a b) b)

instance HasThumbnailConfig a b => HasThumbnailConfig (TF.Resource p a) b where
    type HasThumbnailConfigThread (TF.Resource p a) b =
         HasThumbnailConfigThread a b

    thumbnailConfig = TF.configuration . thumbnailConfig

class HasThumbnailConfigPermissions a b | a -> b where
    type HasThumbnailConfigPermissionsThread a b :: *

    thumbnailConfigPermissions
        :: Lens' a (TF.Attribute (HasThumbnailConfigPermissionsThread a b) b)

instance HasThumbnailConfigPermissions a b => HasThumbnailConfigPermissions (TF.Resource p a) b where
    type HasThumbnailConfigPermissionsThread (TF.Resource p a) b =
         HasThumbnailConfigPermissionsThread a b

    thumbnailConfigPermissions = TF.configuration . thumbnailConfigPermissions

class HasThumbnails a b | a -> b where
    type HasThumbnailsThread a b :: *

    thumbnails
        :: Lens' a (TF.Attribute (HasThumbnailsThread a b) b)

instance HasThumbnails a b => HasThumbnails (TF.Resource p a) b where
    type HasThumbnailsThread (TF.Resource p a) b =
         HasThumbnailsThread a b

    thumbnails = TF.configuration . thumbnails

class HasThumbprintList a b | a -> b where
    type HasThumbprintListThread a b :: *

    thumbprintList
        :: Lens' a (TF.Attribute (HasThumbprintListThread a b) b)

instance HasThumbprintList a b => HasThumbprintList (TF.Resource p a) b where
    type HasThumbprintListThread (TF.Resource p a) b =
         HasThumbprintListThread a b

    thumbprintList = TF.configuration . thumbprintList

class HasTier a b | a -> b where
    type HasTierThread a b :: *

    tier
        :: Lens' a (TF.Attribute (HasTierThread a b) b)

instance HasTier a b => HasTier (TF.Resource p a) b where
    type HasTierThread (TF.Resource p a) b =
         HasTierThread a b

    tier = TF.configuration . tier

class HasTimeout a b | a -> b where
    type HasTimeoutThread a b :: *

    timeout
        :: Lens' a (TF.Attribute (HasTimeoutThread a b) b)

instance HasTimeout a b => HasTimeout (TF.Resource p a) b where
    type HasTimeoutThread (TF.Resource p a) b =
         HasTimeoutThread a b

    timeout = TF.configuration . timeout

class HasTimeoutInMinutes a b | a -> b where
    type HasTimeoutInMinutesThread a b :: *

    timeoutInMinutes
        :: Lens' a (TF.Attribute (HasTimeoutInMinutesThread a b) b)

instance HasTimeoutInMinutes a b => HasTimeoutInMinutes (TF.Resource p a) b where
    type HasTimeoutInMinutesThread (TF.Resource p a) b =
         HasTimeoutInMinutesThread a b

    timeoutInMinutes = TF.configuration . timeoutInMinutes

class HasTimezone a b | a -> b where
    type HasTimezoneThread a b :: *

    timezone
        :: Lens' a (TF.Attribute (HasTimezoneThread a b) b)

instance HasTimezone a b => HasTimezone (TF.Resource p a) b where
    type HasTimezoneThread (TF.Resource p a) b =
         HasTimezoneThread a b

    timezone = TF.configuration . timezone

class HasTlsPolicy a b | a -> b where
    type HasTlsPolicyThread a b :: *

    tlsPolicy
        :: Lens' a (TF.Attribute (HasTlsPolicyThread a b) b)

instance HasTlsPolicy a b => HasTlsPolicy (TF.Resource p a) b where
    type HasTlsPolicyThread (TF.Resource p a) b =
         HasTlsPolicyThread a b

    tlsPolicy = TF.configuration . tlsPolicy

class HasToPort a b | a -> b where
    type HasToPortThread a b :: *

    toPort
        :: Lens' a (TF.Attribute (HasToPortThread a b) b)

instance HasToPort a b => HasToPort (TF.Resource p a) b where
    type HasToPortThread (TF.Resource p a) b =
         HasToPortThread a b

    toPort = TF.configuration . toPort

class HasTopic a b | a -> b where
    type HasTopicThread a b :: *

    topic
        :: Lens' a (TF.Attribute (HasTopicThread a b) b)

instance HasTopic a b => HasTopic (TF.Resource p a) b where
    type HasTopicThread (TF.Resource p a) b =
         HasTopicThread a b

    topic = TF.configuration . topic

class HasTopicArn a b | a -> b where
    type HasTopicArnThread a b :: *

    topicArn
        :: Lens' a (TF.Attribute (HasTopicArnThread a b) b)

instance HasTopicArn a b => HasTopicArn (TF.Resource p a) b where
    type HasTopicArnThread (TF.Resource p a) b =
         HasTopicArnThread a b

    topicArn = TF.configuration . topicArn

class HasTrafficType a b | a -> b where
    type HasTrafficTypeThread a b :: *

    trafficType
        :: Lens' a (TF.Attribute (HasTrafficTypeThread a b) b)

instance HasTrafficType a b => HasTrafficType (TF.Resource p a) b where
    type HasTrafficTypeThread (TF.Resource p a) b =
         HasTrafficTypeThread a b

    trafficType = TF.configuration . trafficType

class HasTransitEncryptionEnabled a b | a -> b where
    type HasTransitEncryptionEnabledThread a b :: *

    transitEncryptionEnabled
        :: Lens' a (TF.Attribute (HasTransitEncryptionEnabledThread a b) b)

instance HasTransitEncryptionEnabled a b => HasTransitEncryptionEnabled (TF.Resource p a) b where
    type HasTransitEncryptionEnabledThread (TF.Resource p a) b =
         HasTransitEncryptionEnabledThread a b

    transitEncryptionEnabled = TF.configuration . transitEncryptionEnabled

class HasTreatMissingData a b | a -> b where
    type HasTreatMissingDataThread a b :: *

    treatMissingData
        :: Lens' a (TF.Attribute (HasTreatMissingDataThread a b) b)

instance HasTreatMissingData a b => HasTreatMissingData (TF.Resource p a) b where
    type HasTreatMissingDataThread (TF.Resource p a) b =
         HasTreatMissingDataThread a b

    treatMissingData = TF.configuration . treatMissingData

class HasTriggerConfiguration a b | a -> b where
    type HasTriggerConfigurationThread a b :: *

    triggerConfiguration
        :: Lens' a (TF.Attribute (HasTriggerConfigurationThread a b) b)

instance HasTriggerConfiguration a b => HasTriggerConfiguration (TF.Resource p a) b where
    type HasTriggerConfigurationThread (TF.Resource p a) b =
         HasTriggerConfigurationThread a b

    triggerConfiguration = TF.configuration . triggerConfiguration

class HasTtl a b | a -> b where
    type HasTtlThread a b :: *

    ttl
        :: Lens' a (TF.Attribute (HasTtlThread a b) b)

instance HasTtl a b => HasTtl (TF.Resource p a) b where
    type HasTtlThread (TF.Resource p a) b =
         HasTtlThread a b

    ttl = TF.configuration . ttl

class HasType' a b | a -> b where
    type HasType'Thread a b :: *

    type'
        :: Lens' a (TF.Attribute (HasType'Thread a b) b)

instance HasType' a b => HasType' (TF.Resource p a) b where
    type HasType'Thread (TF.Resource p a) b =
         HasType'Thread a b

    type' = TF.configuration . type'

class HasUnit a b | a -> b where
    type HasUnitThread a b :: *

    unit
        :: Lens' a (TF.Attribute (HasUnitThread a b) b)

instance HasUnit a b => HasUnit (TF.Resource p a) b where
    type HasUnitThread (TF.Resource p a) b =
         HasUnitThread a b

    unit = TF.configuration . unit

class HasUri a b | a -> b where
    type HasUriThread a b :: *

    uri
        :: Lens' a (TF.Attribute (HasUriThread a b) b)

instance HasUri a b => HasUri (TF.Resource p a) b where
    type HasUriThread (TF.Resource p a) b =
         HasUriThread a b

    uri = TF.configuration . uri

class HasUrl a b | a -> b where
    type HasUrlThread a b :: *

    url
        :: Lens' a (TF.Attribute (HasUrlThread a b) b)

instance HasUrl a b => HasUrl (TF.Resource p a) b where
    type HasUrlThread (TF.Resource p a) b =
         HasUrlThread a b

    url = TF.configuration . url

class HasUsagePlanId a b | a -> b where
    type HasUsagePlanIdThread a b :: *

    usagePlanId
        :: Lens' a (TF.Attribute (HasUsagePlanIdThread a b) b)

instance HasUsagePlanId a b => HasUsagePlanId (TF.Resource p a) b where
    type HasUsagePlanIdThread (TF.Resource p a) b =
         HasUsagePlanIdThread a b

    usagePlanId = TF.configuration . usagePlanId

class HasUseCustomCookbooks a b | a -> b where
    type HasUseCustomCookbooksThread a b :: *

    useCustomCookbooks
        :: Lens' a (TF.Attribute (HasUseCustomCookbooksThread a b) b)

instance HasUseCustomCookbooks a b => HasUseCustomCookbooks (TF.Resource p a) b where
    type HasUseCustomCookbooksThread (TF.Resource p a) b =
         HasUseCustomCookbooksThread a b

    useCustomCookbooks = TF.configuration . useCustomCookbooks

class HasUseEbsOptimizedInstances a b | a -> b where
    type HasUseEbsOptimizedInstancesThread a b :: *

    useEbsOptimizedInstances
        :: Lens' a (TF.Attribute (HasUseEbsOptimizedInstancesThread a b) b)

instance HasUseEbsOptimizedInstances a b => HasUseEbsOptimizedInstances (TF.Resource p a) b where
    type HasUseEbsOptimizedInstancesThread (TF.Resource p a) b =
         HasUseEbsOptimizedInstancesThread a b

    useEbsOptimizedInstances = TF.configuration . useEbsOptimizedInstances

class HasUseOpsworksSecurityGroups a b | a -> b where
    type HasUseOpsworksSecurityGroupsThread a b :: *

    useOpsworksSecurityGroups
        :: Lens' a (TF.Attribute (HasUseOpsworksSecurityGroupsThread a b) b)

instance HasUseOpsworksSecurityGroups a b => HasUseOpsworksSecurityGroups (TF.Resource p a) b where
    type HasUseOpsworksSecurityGroupsThread (TF.Resource p a) b =
         HasUseOpsworksSecurityGroupsThread a b

    useOpsworksSecurityGroups = TF.configuration . useOpsworksSecurityGroups

class HasUser a b | a -> b where
    type HasUserThread a b :: *

    user
        :: Lens' a (TF.Attribute (HasUserThread a b) b)

instance HasUser a b => HasUser (TF.Resource p a) b where
    type HasUserThread (TF.Resource p a) b =
         HasUserThread a b

    user = TF.configuration . user

class HasUserArn a b | a -> b where
    type HasUserArnThread a b :: *

    userArn
        :: Lens' a (TF.Attribute (HasUserArnThread a b) b)

instance HasUserArn a b => HasUserArn (TF.Resource p a) b where
    type HasUserArnThread (TF.Resource p a) b =
         HasUserArnThread a b

    userArn = TF.configuration . userArn

class HasUserData a b | a -> b where
    type HasUserDataThread a b :: *

    userData
        :: Lens' a (TF.Attribute (HasUserDataThread a b) b)

instance HasUserData a b => HasUserData (TF.Resource p a) b where
    type HasUserDataThread (TF.Resource p a) b =
         HasUserDataThread a b

    userData = TF.configuration . userData

class HasUserDataBase64 a b | a -> b where
    type HasUserDataBase64Thread a b :: *

    userDataBase64
        :: Lens' a (TF.Attribute (HasUserDataBase64Thread a b) b)

instance HasUserDataBase64 a b => HasUserDataBase64 (TF.Resource p a) b where
    type HasUserDataBase64Thread (TF.Resource p a) b =
         HasUserDataBase64Thread a b

    userDataBase64 = TF.configuration . userDataBase64

class HasUserPoolId a b | a -> b where
    type HasUserPoolIdThread a b :: *

    userPoolId
        :: Lens' a (TF.Attribute (HasUserPoolIdThread a b) b)

instance HasUserPoolId a b => HasUserPoolId (TF.Resource p a) b where
    type HasUserPoolIdThread (TF.Resource p a) b =
         HasUserPoolIdThread a b

    userPoolId = TF.configuration . userPoolId

class HasUsername a b | a -> b where
    type HasUsernameThread a b :: *

    username
        :: Lens' a (TF.Attribute (HasUsernameThread a b) b)

instance HasUsername a b => HasUsername (TF.Resource p a) b where
    type HasUsernameThread (TF.Resource p a) b =
         HasUsernameThread a b

    username = TF.configuration . username

class HasUsernameAttributes a b | a -> b where
    type HasUsernameAttributesThread a b :: *

    usernameAttributes
        :: Lens' a (TF.Attribute (HasUsernameAttributesThread a b) b)

instance HasUsernameAttributes a b => HasUsernameAttributes (TF.Resource p a) b where
    type HasUsernameAttributesThread (TF.Resource p a) b =
         HasUsernameAttributesThread a b

    usernameAttributes = TF.configuration . usernameAttributes

class HasUsers a b | a -> b where
    type HasUsersThread a b :: *

    users
        :: Lens' a (TF.Attribute (HasUsersThread a b) b)

instance HasUsers a b => HasUsers (TF.Resource p a) b where
    type HasUsersThread (TF.Resource p a) b =
         HasUsersThread a b

    users = TF.configuration . users

class HasValidUntil a b | a -> b where
    type HasValidUntilThread a b :: *

    validUntil
        :: Lens' a (TF.Attribute (HasValidUntilThread a b) b)

instance HasValidUntil a b => HasValidUntil (TF.Resource p a) b where
    type HasValidUntilThread (TF.Resource p a) b =
         HasValidUntilThread a b

    validUntil = TF.configuration . validUntil

class HasValue a b | a -> b where
    type HasValueThread a b :: *

    value
        :: Lens' a (TF.Attribute (HasValueThread a b) b)

instance HasValue a b => HasValue (TF.Resource p a) b where
    type HasValueThread (TF.Resource p a) b =
         HasValueThread a b

    value = TF.configuration . value

class HasVariables a b | a -> b where
    type HasVariablesThread a b :: *

    variables
        :: Lens' a (TF.Attribute (HasVariablesThread a b) b)

instance HasVariables a b => HasVariables (TF.Resource p a) b where
    type HasVariablesThread (TF.Resource p a) b =
         HasVariablesThread a b

    variables = TF.configuration . variables

class HasVerificationMessageTemplate a b | a -> b where
    type HasVerificationMessageTemplateThread a b :: *

    verificationMessageTemplate
        :: Lens' a (TF.Attribute (HasVerificationMessageTemplateThread a b) b)

instance HasVerificationMessageTemplate a b => HasVerificationMessageTemplate (TF.Resource p a) b where
    type HasVerificationMessageTemplateThread (TF.Resource p a) b =
         HasVerificationMessageTemplateThread a b

    verificationMessageTemplate = TF.configuration . verificationMessageTemplate

class HasVersionLabel a b | a -> b where
    type HasVersionLabelThread a b :: *

    versionLabel
        :: Lens' a (TF.Attribute (HasVersionLabelThread a b) b)

instance HasVersionLabel a b => HasVersionLabel (TF.Resource p a) b where
    type HasVersionLabelThread (TF.Resource p a) b =
         HasVersionLabelThread a b

    versionLabel = TF.configuration . versionLabel

class HasVersioning a b | a -> b where
    type HasVersioningThread a b :: *

    versioning
        :: Lens' a (TF.Attribute (HasVersioningThread a b) b)

instance HasVersioning a b => HasVersioning (TF.Resource p a) b where
    type HasVersioningThread (TF.Resource p a) b =
         HasVersioningThread a b

    versioning = TF.configuration . versioning

class HasVideo a b | a -> b where
    type HasVideoThread a b :: *

    video
        :: Lens' a (TF.Attribute (HasVideoThread a b) b)

instance HasVideo a b => HasVideo (TF.Resource p a) b where
    type HasVideoThread (TF.Resource p a) b =
         HasVideoThread a b

    video = TF.configuration . video

class HasVideoCodecOptions a b | a -> b where
    type HasVideoCodecOptionsThread a b :: *

    videoCodecOptions
        :: Lens' a (TF.Attribute (HasVideoCodecOptionsThread a b) b)

instance HasVideoCodecOptions a b => HasVideoCodecOptions (TF.Resource p a) b where
    type HasVideoCodecOptionsThread (TF.Resource p a) b =
         HasVideoCodecOptionsThread a b

    videoCodecOptions = TF.configuration . videoCodecOptions

class HasVideoWatermarks a b | a -> b where
    type HasVideoWatermarksThread a b :: *

    videoWatermarks
        :: Lens' a (TF.Attribute (HasVideoWatermarksThread a b) b)

instance HasVideoWatermarks a b => HasVideoWatermarks (TF.Resource p a) b where
    type HasVideoWatermarksThread (TF.Resource p a) b =
         HasVideoWatermarksThread a b

    videoWatermarks = TF.configuration . videoWatermarks

class HasViewerCertificate a b | a -> b where
    type HasViewerCertificateThread a b :: *

    viewerCertificate
        :: Lens' a (TF.Attribute (HasViewerCertificateThread a b) b)

instance HasViewerCertificate a b => HasViewerCertificate (TF.Resource p a) b where
    type HasViewerCertificateThread (TF.Resource p a) b =
         HasViewerCertificateThread a b

    viewerCertificate = TF.configuration . viewerCertificate

class HasVirtualizationType a b | a -> b where
    type HasVirtualizationTypeThread a b :: *

    virtualizationType
        :: Lens' a (TF.Attribute (HasVirtualizationTypeThread a b) b)

instance HasVirtualizationType a b => HasVirtualizationType (TF.Resource p a) b where
    type HasVirtualizationTypeThread (TF.Resource p a) b =
         HasVirtualizationTypeThread a b

    virtualizationType = TF.configuration . virtualizationType

class HasVisibilityTimeoutSeconds a b | a -> b where
    type HasVisibilityTimeoutSecondsThread a b :: *

    visibilityTimeoutSeconds
        :: Lens' a (TF.Attribute (HasVisibilityTimeoutSecondsThread a b) b)

instance HasVisibilityTimeoutSeconds a b => HasVisibilityTimeoutSeconds (TF.Resource p a) b where
    type HasVisibilityTimeoutSecondsThread (TF.Resource p a) b =
         HasVisibilityTimeoutSecondsThread a b

    visibilityTimeoutSeconds = TF.configuration . visibilityTimeoutSeconds

class HasVisibleToAllUsers a b | a -> b where
    type HasVisibleToAllUsersThread a b :: *

    visibleToAllUsers
        :: Lens' a (TF.Attribute (HasVisibleToAllUsersThread a b) b)

instance HasVisibleToAllUsers a b => HasVisibleToAllUsers (TF.Resource p a) b where
    type HasVisibleToAllUsersThread (TF.Resource p a) b =
         HasVisibleToAllUsersThread a b

    visibleToAllUsers = TF.configuration . visibleToAllUsers

class HasVolumeId a b | a -> b where
    type HasVolumeIdThread a b :: *

    volumeId
        :: Lens' a (TF.Attribute (HasVolumeIdThread a b) b)

instance HasVolumeId a b => HasVolumeId (TF.Resource p a) b where
    type HasVolumeIdThread (TF.Resource p a) b =
         HasVolumeIdThread a b

    volumeId = TF.configuration . volumeId

class HasVolumeTags a b | a -> b where
    type HasVolumeTagsThread a b :: *

    volumeTags
        :: Lens' a (TF.Attribute (HasVolumeTagsThread a b) b)

instance HasVolumeTags a b => HasVolumeTags (TF.Resource p a) b where
    type HasVolumeTagsThread (TF.Resource p a) b =
         HasVolumeTagsThread a b

    volumeTags = TF.configuration . volumeTags

class HasVpc a b | a -> b where
    type HasVpcThread a b :: *

    vpc
        :: Lens' a (TF.Attribute (HasVpcThread a b) b)

instance HasVpc a b => HasVpc (TF.Resource p a) b where
    type HasVpcThread (TF.Resource p a) b =
         HasVpcThread a b

    vpc = TF.configuration . vpc

class HasVpcClassicLinkId a b | a -> b where
    type HasVpcClassicLinkIdThread a b :: *

    vpcClassicLinkId
        :: Lens' a (TF.Attribute (HasVpcClassicLinkIdThread a b) b)

instance HasVpcClassicLinkId a b => HasVpcClassicLinkId (TF.Resource p a) b where
    type HasVpcClassicLinkIdThread (TF.Resource p a) b =
         HasVpcClassicLinkIdThread a b

    vpcClassicLinkId = TF.configuration . vpcClassicLinkId

class HasVpcClassicLinkSecurityGroups a b | a -> b where
    type HasVpcClassicLinkSecurityGroupsThread a b :: *

    vpcClassicLinkSecurityGroups
        :: Lens' a (TF.Attribute (HasVpcClassicLinkSecurityGroupsThread a b) b)

instance HasVpcClassicLinkSecurityGroups a b => HasVpcClassicLinkSecurityGroups (TF.Resource p a) b where
    type HasVpcClassicLinkSecurityGroupsThread (TF.Resource p a) b =
         HasVpcClassicLinkSecurityGroupsThread a b

    vpcClassicLinkSecurityGroups = TF.configuration . vpcClassicLinkSecurityGroups

class HasVpcConfig a b | a -> b where
    type HasVpcConfigThread a b :: *

    vpcConfig
        :: Lens' a (TF.Attribute (HasVpcConfigThread a b) b)

instance HasVpcConfig a b => HasVpcConfig (TF.Resource p a) b where
    type HasVpcConfigThread (TF.Resource p a) b =
         HasVpcConfigThread a b

    vpcConfig = TF.configuration . vpcConfig

class HasVpcEndpointId a b | a -> b where
    type HasVpcEndpointIdThread a b :: *

    vpcEndpointId
        :: Lens' a (TF.Attribute (HasVpcEndpointIdThread a b) b)

instance HasVpcEndpointId a b => HasVpcEndpointId (TF.Resource p a) b where
    type HasVpcEndpointIdThread (TF.Resource p a) b =
         HasVpcEndpointIdThread a b

    vpcEndpointId = TF.configuration . vpcEndpointId

class HasVpcId a b | a -> b where
    type HasVpcIdThread a b :: *

    vpcId
        :: Lens' a (TF.Attribute (HasVpcIdThread a b) b)

instance HasVpcId a b => HasVpcId (TF.Resource p a) b where
    type HasVpcIdThread (TF.Resource p a) b =
         HasVpcIdThread a b

    vpcId = TF.configuration . vpcId

class HasVpcOptions a b | a -> b where
    type HasVpcOptionsThread a b :: *

    vpcOptions
        :: Lens' a (TF.Attribute (HasVpcOptionsThread a b) b)

instance HasVpcOptions a b => HasVpcOptions (TF.Resource p a) b where
    type HasVpcOptionsThread (TF.Resource p a) b =
         HasVpcOptionsThread a b

    vpcOptions = TF.configuration . vpcOptions

class HasVpcPeeringConnectionId a b | a -> b where
    type HasVpcPeeringConnectionIdThread a b :: *

    vpcPeeringConnectionId
        :: Lens' a (TF.Attribute (HasVpcPeeringConnectionIdThread a b) b)

instance HasVpcPeeringConnectionId a b => HasVpcPeeringConnectionId (TF.Resource p a) b where
    type HasVpcPeeringConnectionIdThread (TF.Resource p a) b =
         HasVpcPeeringConnectionIdThread a b

    vpcPeeringConnectionId = TF.configuration . vpcPeeringConnectionId

class HasVpcRegion a b | a -> b where
    type HasVpcRegionThread a b :: *

    vpcRegion
        :: Lens' a (TF.Attribute (HasVpcRegionThread a b) b)

instance HasVpcRegion a b => HasVpcRegion (TF.Resource p a) b where
    type HasVpcRegionThread (TF.Resource p a) b =
         HasVpcRegionThread a b

    vpcRegion = TF.configuration . vpcRegion

class HasVpcSecurityGroupIds a b | a -> b where
    type HasVpcSecurityGroupIdsThread a b :: *

    vpcSecurityGroupIds
        :: Lens' a (TF.Attribute (HasVpcSecurityGroupIdsThread a b) b)

instance HasVpcSecurityGroupIds a b => HasVpcSecurityGroupIds (TF.Resource p a) b where
    type HasVpcSecurityGroupIdsThread (TF.Resource p a) b =
         HasVpcSecurityGroupIdsThread a b

    vpcSecurityGroupIds = TF.configuration . vpcSecurityGroupIds

class HasVpcSettings a b | a -> b where
    type HasVpcSettingsThread a b :: *

    vpcSettings
        :: Lens' a (TF.Attribute (HasVpcSettingsThread a b) b)

instance HasVpcSettings a b => HasVpcSettings (TF.Resource p a) b where
    type HasVpcSettingsThread (TF.Resource p a) b =
         HasVpcSettingsThread a b

    vpcSettings = TF.configuration . vpcSettings

class HasVpcZoneIdentifier a b | a -> b where
    type HasVpcZoneIdentifierThread a b :: *

    vpcZoneIdentifier
        :: Lens' a (TF.Attribute (HasVpcZoneIdentifierThread a b) b)

instance HasVpcZoneIdentifier a b => HasVpcZoneIdentifier (TF.Resource p a) b where
    type HasVpcZoneIdentifierThread (TF.Resource p a) b =
         HasVpcZoneIdentifierThread a b

    vpcZoneIdentifier = TF.configuration . vpcZoneIdentifier

class HasVpnConnectionId a b | a -> b where
    type HasVpnConnectionIdThread a b :: *

    vpnConnectionId
        :: Lens' a (TF.Attribute (HasVpnConnectionIdThread a b) b)

instance HasVpnConnectionId a b => HasVpnConnectionId (TF.Resource p a) b where
    type HasVpnConnectionIdThread (TF.Resource p a) b =
         HasVpnConnectionIdThread a b

    vpnConnectionId = TF.configuration . vpnConnectionId

class HasVpnGatewayId a b | a -> b where
    type HasVpnGatewayIdThread a b :: *

    vpnGatewayId
        :: Lens' a (TF.Attribute (HasVpnGatewayIdThread a b) b)

instance HasVpnGatewayId a b => HasVpnGatewayId (TF.Resource p a) b where
    type HasVpnGatewayIdThread (TF.Resource p a) b =
         HasVpnGatewayIdThread a b

    vpnGatewayId = TF.configuration . vpnGatewayId

class HasWaitForCapacityTimeout a b | a -> b where
    type HasWaitForCapacityTimeoutThread a b :: *

    waitForCapacityTimeout
        :: Lens' a (TF.Attribute (HasWaitForCapacityTimeoutThread a b) b)

instance HasWaitForCapacityTimeout a b => HasWaitForCapacityTimeout (TF.Resource p a) b where
    type HasWaitForCapacityTimeoutThread (TF.Resource p a) b =
         HasWaitForCapacityTimeoutThread a b

    waitForCapacityTimeout = TF.configuration . waitForCapacityTimeout

class HasWaitForElbCapacity a b | a -> b where
    type HasWaitForElbCapacityThread a b :: *

    waitForElbCapacity
        :: Lens' a (TF.Attribute (HasWaitForElbCapacityThread a b) b)

instance HasWaitForElbCapacity a b => HasWaitForElbCapacity (TF.Resource p a) b where
    type HasWaitForElbCapacityThread (TF.Resource p a) b =
         HasWaitForElbCapacityThread a b

    waitForElbCapacity = TF.configuration . waitForElbCapacity

class HasWaitForFulfillment a b | a -> b where
    type HasWaitForFulfillmentThread a b :: *

    waitForFulfillment
        :: Lens' a (TF.Attribute (HasWaitForFulfillmentThread a b) b)

instance HasWaitForFulfillment a b => HasWaitForFulfillment (TF.Resource p a) b where
    type HasWaitForFulfillmentThread (TF.Resource p a) b =
         HasWaitForFulfillmentThread a b

    waitForFulfillment = TF.configuration . waitForFulfillment

class HasWaitForReadyTimeout a b | a -> b where
    type HasWaitForReadyTimeoutThread a b :: *

    waitForReadyTimeout
        :: Lens' a (TF.Attribute (HasWaitForReadyTimeoutThread a b) b)

instance HasWaitForReadyTimeout a b => HasWaitForReadyTimeout (TF.Resource p a) b where
    type HasWaitForReadyTimeoutThread (TF.Resource p a) b =
         HasWaitForReadyTimeoutThread a b

    waitForReadyTimeout = TF.configuration . waitForReadyTimeout

class HasWebAclId a b | a -> b where
    type HasWebAclIdThread a b :: *

    webAclId
        :: Lens' a (TF.Attribute (HasWebAclIdThread a b) b)

instance HasWebAclId a b => HasWebAclId (TF.Resource p a) b where
    type HasWebAclIdThread (TF.Resource p a) b =
         HasWebAclIdThread a b

    webAclId = TF.configuration . webAclId

class HasWebsite a b | a -> b where
    type HasWebsiteThread a b :: *

    website
        :: Lens' a (TF.Attribute (HasWebsiteThread a b) b)

instance HasWebsite a b => HasWebsite (TF.Resource p a) b where
    type HasWebsiteThread (TF.Resource p a) b =
         HasWebsiteThread a b

    website = TF.configuration . website

class HasWebsiteRedirect a b | a -> b where
    type HasWebsiteRedirectThread a b :: *

    websiteRedirect
        :: Lens' a (TF.Attribute (HasWebsiteRedirectThread a b) b)

instance HasWebsiteRedirect a b => HasWebsiteRedirect (TF.Resource p a) b where
    type HasWebsiteRedirectThread (TF.Resource p a) b =
         HasWebsiteRedirectThread a b

    websiteRedirect = TF.configuration . websiteRedirect

class HasWeightedRoutingPolicy a b | a -> b where
    type HasWeightedRoutingPolicyThread a b :: *

    weightedRoutingPolicy
        :: Lens' a (TF.Attribute (HasWeightedRoutingPolicyThread a b) b)

instance HasWeightedRoutingPolicy a b => HasWeightedRoutingPolicy (TF.Resource p a) b where
    type HasWeightedRoutingPolicyThread (TF.Resource p a) b =
         HasWeightedRoutingPolicyThread a b

    weightedRoutingPolicy = TF.configuration . weightedRoutingPolicy

class HasWindowId a b | a -> b where
    type HasWindowIdThread a b :: *

    windowId
        :: Lens' a (TF.Attribute (HasWindowIdThread a b) b)

instance HasWindowId a b => HasWindowId (TF.Resource p a) b where
    type HasWindowIdThread (TF.Resource p a) b =
         HasWindowIdThread a b

    windowId = TF.configuration . windowId

class HasWorkmailAction a b | a -> b where
    type HasWorkmailActionThread a b :: *

    workmailAction
        :: Lens' a (TF.Attribute (HasWorkmailActionThread a b) b)

instance HasWorkmailAction a b => HasWorkmailAction (TF.Resource p a) b where
    type HasWorkmailActionThread (TF.Resource p a) b =
         HasWorkmailActionThread a b

    workmailAction = TF.configuration . workmailAction

class HasWriteAttributes a b | a -> b where
    type HasWriteAttributesThread a b :: *

    writeAttributes
        :: Lens' a (TF.Attribute (HasWriteAttributesThread a b) b)

instance HasWriteAttributes a b => HasWriteAttributes (TF.Resource p a) b where
    type HasWriteAttributesThread (TF.Resource p a) b =
         HasWriteAttributesThread a b

    writeAttributes = TF.configuration . writeAttributes

class HasWriteCapacity a b | a -> b where
    type HasWriteCapacityThread a b :: *

    writeCapacity
        :: Lens' a (TF.Attribute (HasWriteCapacityThread a b) b)

instance HasWriteCapacity a b => HasWriteCapacity (TF.Resource p a) b where
    type HasWriteCapacityThread (TF.Resource p a) b =
         HasWriteCapacityThread a b

    writeCapacity = TF.configuration . writeCapacity

class HasXssMatchTuples a b | a -> b where
    type HasXssMatchTuplesThread a b :: *

    xssMatchTuples
        :: Lens' a (TF.Attribute (HasXssMatchTuplesThread a b) b)

instance HasXssMatchTuples a b => HasXssMatchTuples (TF.Resource p a) b where
    type HasXssMatchTuplesThread (TF.Resource p a) b =
         HasXssMatchTuplesThread a b

    xssMatchTuples = TF.configuration . xssMatchTuples

class HasZoneId a b | a -> b where
    type HasZoneIdThread a b :: *

    zoneId
        :: Lens' a (TF.Attribute (HasZoneIdThread a b) b)

instance HasZoneId a b => HasZoneId (TF.Resource p a) b where
    type HasZoneIdThread (TF.Resource p a) b =
         HasZoneIdThread a b

    zoneId = TF.configuration . zoneId

class HasComputedAccessUrl a b | a -> b where
    computedAccessUrl
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedAccessUrl =
        to (\x -> TF.Computed (TF.referenceKey x) "access_url")

class HasComputedAccountId a b | a -> b where
    computedAccountId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedAccountId =
        to (\x -> TF.Computed (TF.referenceKey x) "account_id")

class HasComputedActivationCode a b | a -> b where
    computedActivationCode
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedActivationCode =
        to (\x -> TF.Computed (TF.referenceKey x) "activation_code")

class HasComputedAdjustmentType a b | a -> b where
    computedAdjustmentType
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedAdjustmentType =
        to (\x -> TF.Computed (TF.referenceKey x) "adjustment_type")

class HasComputedAllocatedStorage a b | a -> b where
    computedAllocatedStorage
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedAllocatedStorage =
        to (\x -> TF.Computed (TF.referenceKey x) "allocated_storage")

class HasComputedAllocationId a b | a -> b where
    computedAllocationId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedAllocationId =
        to (\x -> TF.Computed (TF.referenceKey x) "allocation_id")

class HasComputedArn a b | a -> b where
    computedArn
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedArn =
        to (\x -> TF.Computed (TF.referenceKey x) "arn")

class HasComputedArnSuffix a b | a -> b where
    computedArnSuffix
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedArnSuffix =
        to (\x -> TF.Computed (TF.referenceKey x) "arn_suffix")

class HasComputedAssociateWithPrivateIp a b | a -> b where
    computedAssociateWithPrivateIp
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedAssociateWithPrivateIp =
        to (\x -> TF.Computed (TF.referenceKey x) "associate_with_private_ip")

class HasComputedAssociationId a b | a -> b where
    computedAssociationId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedAssociationId =
        to (\x -> TF.Computed (TF.referenceKey x) "association_id")

class HasComputedAttachment a b | a -> b where
    computedAttachment
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedAttachment =
        to (\x -> TF.Computed (TF.referenceKey x) "attachment")

class HasComputedAttachmentId a b | a -> b where
    computedAttachmentId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedAttachmentId =
        to (\x -> TF.Computed (TF.referenceKey x) "attachment_id")

class HasComputedAttribute a b | a -> b where
    computedAttribute
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedAttribute =
        to (\x -> TF.Computed (TF.referenceKey x) "attribute")

class HasComputedAutoscalingGroupName a b | a -> b where
    computedAutoscalingGroupName
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedAutoscalingGroupName =
        to (\x -> TF.Computed (TF.referenceKey x) "autoscaling_group_name")

class HasComputedAvailabilityZone a b | a -> b where
    computedAvailabilityZone
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedAvailabilityZone =
        to (\x -> TF.Computed (TF.referenceKey x) "availability_zone")

class HasComputedAvailabilityZones a b | a -> b where
    computedAvailabilityZones
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedAvailabilityZones =
        to (\x -> TF.Computed (TF.referenceKey x) "availability_zones")

class HasComputedAwsAccountId a b | a -> b where
    computedAwsAccountId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedAwsAccountId =
        to (\x -> TF.Computed (TF.referenceKey x) "aws_account_id")

class HasComputedBackupRetentionPeriod a b | a -> b where
    computedBackupRetentionPeriod
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedBackupRetentionPeriod =
        to (\x -> TF.Computed (TF.referenceKey x) "backup_retention_period")

class HasComputedBgpAsn a b | a -> b where
    computedBgpAsn
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedBgpAsn =
        to (\x -> TF.Computed (TF.referenceKey x) "bgp_asn")

class HasComputedBucketDomainName a b | a -> b where
    computedBucketDomainName
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedBucketDomainName =
        to (\x -> TF.Computed (TF.referenceKey x) "bucket_domain_name")

class HasComputedCacheNodes a b | a -> b where
    computedCacheNodes
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedCacheNodes =
        to (\x -> TF.Computed (TF.referenceKey x) "cache_nodes")

class HasComputedCallerReference a b | a -> b where
    computedCallerReference
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedCallerReference =
        to (\x -> TF.Computed (TF.referenceKey x) "caller_reference")

class HasComputedCanonicalHostedZoneId a b | a -> b where
    computedCanonicalHostedZoneId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedCanonicalHostedZoneId =
        to (\x -> TF.Computed (TF.referenceKey x) "canonical_hosted_zone_id")

class HasComputedCertificateArn a b | a -> b where
    computedCertificateArn
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedCertificateArn =
        to (\x -> TF.Computed (TF.referenceKey x) "certificate_arn")

class HasComputedCertificateUploadDate a b | a -> b where
    computedCertificateUploadDate
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedCertificateUploadDate =
        to (\x -> TF.Computed (TF.referenceKey x) "certificate_upload_date")

class HasComputedCidrBlock a b | a -> b where
    computedCidrBlock
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedCidrBlock =
        to (\x -> TF.Computed (TF.referenceKey x) "cidr_block")

class HasComputedCidrBlocks a b | a -> b where
    computedCidrBlocks
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedCidrBlocks =
        to (\x -> TF.Computed (TF.referenceKey x) "cidr_blocks")

class HasComputedClientSecret a b | a -> b where
    computedClientSecret
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedClientSecret =
        to (\x -> TF.Computed (TF.referenceKey x) "client_secret")

class HasComputedCloneUrlHttp a b | a -> b where
    computedCloneUrlHttp
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedCloneUrlHttp =
        to (\x -> TF.Computed (TF.referenceKey x) "clone_url_http")

class HasComputedCloneUrlSsh a b | a -> b where
    computedCloneUrlSsh
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedCloneUrlSsh =
        to (\x -> TF.Computed (TF.referenceKey x) "clone_url_ssh")

class HasComputedCloudfrontAccessIdentityPath a b | a -> b where
    computedCloudfrontAccessIdentityPath
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedCloudfrontAccessIdentityPath =
        to (\x -> TF.Computed (TF.referenceKey x) "cloudfront_access_identity_path")

class HasComputedCloudfrontDistributionArn a b | a -> b where
    computedCloudfrontDistributionArn
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedCloudfrontDistributionArn =
        to (\x -> TF.Computed (TF.referenceKey x) "cloudfront_distribution_arn")

class HasComputedCloudfrontDomainName a b | a -> b where
    computedCloudfrontDomainName
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedCloudfrontDomainName =
        to (\x -> TF.Computed (TF.referenceKey x) "cloudfront_domain_name")

class HasComputedCloudfrontZoneId a b | a -> b where
    computedCloudfrontZoneId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedCloudfrontZoneId =
        to (\x -> TF.Computed (TF.referenceKey x) "cloudfront_zone_id")

class HasComputedClusterAddress a b | a -> b where
    computedClusterAddress
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedClusterAddress =
        to (\x -> TF.Computed (TF.referenceKey x) "cluster_address")

class HasComputedClusterIdentifier a b | a -> b where
    computedClusterIdentifier
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedClusterIdentifier =
        to (\x -> TF.Computed (TF.referenceKey x) "cluster_identifier")

class HasComputedClusterMembers a b | a -> b where
    computedClusterMembers
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedClusterMembers =
        to (\x -> TF.Computed (TF.referenceKey x) "cluster_members")

class HasComputedClusterResourceId a b | a -> b where
    computedClusterResourceId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedClusterResourceId =
        to (\x -> TF.Computed (TF.referenceKey x) "cluster_resource_id")

class HasComputedConfiguration a b | a -> b where
    computedConfiguration
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedConfiguration =
        to (\x -> TF.Computed (TF.referenceKey x) "configuration")

class HasComputedConfigurationEndpoint a b | a -> b where
    computedConfigurationEndpoint
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedConfigurationEndpoint =
        to (\x -> TF.Computed (TF.referenceKey x) "configuration_endpoint")

class HasComputedConfigurationEndpointAddress a b | a -> b where
    computedConfigurationEndpointAddress
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedConfigurationEndpointAddress =
        to (\x -> TF.Computed (TF.referenceKey x) "configuration_endpoint_address")

class HasComputedContent a b | a -> b where
    computedContent
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedContent =
        to (\x -> TF.Computed (TF.referenceKey x) "content")

class HasComputedCookieExpirationPeriod a b | a -> b where
    computedCookieExpirationPeriod
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedCookieExpirationPeriod =
        to (\x -> TF.Computed (TF.referenceKey x) "cookie_expiration_period")

class HasComputedCookieName a b | a -> b where
    computedCookieName
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedCookieName =
        to (\x -> TF.Computed (TF.referenceKey x) "cookie_name")

class HasComputedCreateDate a b | a -> b where
    computedCreateDate
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedCreateDate =
        to (\x -> TF.Computed (TF.referenceKey x) "create_date")

class HasComputedCreatedDate a b | a -> b where
    computedCreatedDate
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedCreatedDate =
        to (\x -> TF.Computed (TF.referenceKey x) "created_date")

class HasComputedCreationDate a b | a -> b where
    computedCreationDate
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedCreationDate =
        to (\x -> TF.Computed (TF.referenceKey x) "creation_date")

class HasComputedCustomerGatewayConfiguration a b | a -> b where
    computedCustomerGatewayConfiguration
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedCustomerGatewayConfiguration =
        to (\x -> TF.Computed (TF.referenceKey x) "customer_gateway_configuration")

class HasComputedCustomerGatewayId a b | a -> b where
    computedCustomerGatewayId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedCustomerGatewayId =
        to (\x -> TF.Computed (TF.referenceKey x) "customer_gateway_id")

class HasComputedDashboardArn a b | a -> b where
    computedDashboardArn
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedDashboardArn =
        to (\x -> TF.Computed (TF.referenceKey x) "dashboard_arn")

class HasComputedDataEncryptionKeyId a b | a -> b where
    computedDataEncryptionKeyId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedDataEncryptionKeyId =
        to (\x -> TF.Computed (TF.referenceKey x) "data_encryption_key_id")

class HasComputedDatabaseName a b | a -> b where
    computedDatabaseName
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedDatabaseName =
        to (\x -> TF.Computed (TF.referenceKey x) "database_name")

class HasComputedDbSnapshotArn a b | a -> b where
    computedDbSnapshotArn
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedDbSnapshotArn =
        to (\x -> TF.Computed (TF.referenceKey x) "db_snapshot_arn")

class HasComputedDbiResourceId a b | a -> b where
    computedDbiResourceId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedDbiResourceId =
        to (\x -> TF.Computed (TF.referenceKey x) "dbi_resource_id")

class HasComputedDefaultCooldown a b | a -> b where
    computedDefaultCooldown
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedDefaultCooldown =
        to (\x -> TF.Computed (TF.referenceKey x) "default_cooldown")

class HasComputedDefaultNetworkAclId a b | a -> b where
    computedDefaultNetworkAclId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedDefaultNetworkAclId =
        to (\x -> TF.Computed (TF.referenceKey x) "default_network_acl_id")

class HasComputedDefaultRouteTableId a b | a -> b where
    computedDefaultRouteTableId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedDefaultRouteTableId =
        to (\x -> TF.Computed (TF.referenceKey x) "default_route_table_id")

class HasComputedDefaultSecurityGroupId a b | a -> b where
    computedDefaultSecurityGroupId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedDefaultSecurityGroupId =
        to (\x -> TF.Computed (TF.referenceKey x) "default_security_group_id")

class HasComputedDefaultVersion a b | a -> b where
    computedDefaultVersion
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedDefaultVersion =
        to (\x -> TF.Computed (TF.referenceKey x) "default_version")

class HasComputedDefaultVersionId a b | a -> b where
    computedDefaultVersionId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedDefaultVersionId =
        to (\x -> TF.Computed (TF.referenceKey x) "default_version_id")

class HasComputedDeploymentConfigId a b | a -> b where
    computedDeploymentConfigId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedDeploymentConfigId =
        to (\x -> TF.Computed (TF.referenceKey x) "deployment_config_id")

class HasComputedDescription a b | a -> b where
    computedDescription
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedDescription =
        to (\x -> TF.Computed (TF.referenceKey x) "description")

class HasComputedDesiredCapacity a b | a -> b where
    computedDesiredCapacity
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedDesiredCapacity =
        to (\x -> TF.Computed (TF.referenceKey x) "desired_capacity")

class HasComputedDestinationCidrBlock a b | a -> b where
    computedDestinationCidrBlock
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedDestinationCidrBlock =
        to (\x -> TF.Computed (TF.referenceKey x) "destination_cidr_block")

class HasComputedDestinationIpv6CidrBlock a b | a -> b where
    computedDestinationIpv6CidrBlock
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedDestinationIpv6CidrBlock =
        to (\x -> TF.Computed (TF.referenceKey x) "destination_ipv6_cidr_block")

class HasComputedDeviceName a b | a -> b where
    computedDeviceName
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedDeviceName =
        to (\x -> TF.Computed (TF.referenceKey x) "device_name")

class HasComputedDkimTokens a b | a -> b where
    computedDkimTokens
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedDkimTokens =
        to (\x -> TF.Computed (TF.referenceKey x) "dkim_tokens")

class HasComputedDnsIpAddresses a b | a -> b where
    computedDnsIpAddresses
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedDnsIpAddresses =
        to (\x -> TF.Computed (TF.referenceKey x) "dns_ip_addresses")

class HasComputedDnsName a b | a -> b where
    computedDnsName
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedDnsName =
        to (\x -> TF.Computed (TF.referenceKey x) "dns_name")

class HasComputedDocumentType a b | a -> b where
    computedDocumentType
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedDocumentType =
        to (\x -> TF.Computed (TF.referenceKey x) "document_type")

class HasComputedDomainId a b | a -> b where
    computedDomainId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedDomainId =
        to (\x -> TF.Computed (TF.referenceKey x) "domain_id")

class HasComputedEcsClusterArn a b | a -> b where
    computedEcsClusterArn
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedEcsClusterArn =
        to (\x -> TF.Computed (TF.referenceKey x) "ecs_cluster_arn")

class HasComputedEgressOnlyGatewayId a b | a -> b where
    computedEgressOnlyGatewayId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedEgressOnlyGatewayId =
        to (\x -> TF.Computed (TF.referenceKey x) "egress_only_gateway_id")

class HasComputedEnableClassiclink a b | a -> b where
    computedEnableClassiclink
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedEnableClassiclink =
        to (\x -> TF.Computed (TF.referenceKey x) "enable_classiclink")

class HasComputedEnableDnsHostnames a b | a -> b where
    computedEnableDnsHostnames
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedEnableDnsHostnames =
        to (\x -> TF.Computed (TF.referenceKey x) "enable_dns_hostnames")

class HasComputedEnableDnsSupport a b | a -> b where
    computedEnableDnsSupport
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedEnableDnsSupport =
        to (\x -> TF.Computed (TF.referenceKey x) "enable_dns_support")

class HasComputedEncrypted a b | a -> b where
    computedEncrypted
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedEncrypted =
        to (\x -> TF.Computed (TF.referenceKey x) "encrypted")

class HasComputedEncryptedFingerprint a b | a -> b where
    computedEncryptedFingerprint
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedEncryptedFingerprint =
        to (\x -> TF.Computed (TF.referenceKey x) "encrypted_fingerprint")

class HasComputedEncryptedPassword a b | a -> b where
    computedEncryptedPassword
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedEncryptedPassword =
        to (\x -> TF.Computed (TF.referenceKey x) "encrypted_password")

class HasComputedEncryptedPrivateKey a b | a -> b where
    computedEncryptedPrivateKey
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedEncryptedPrivateKey =
        to (\x -> TF.Computed (TF.referenceKey x) "encrypted_private_key")

class HasComputedEncryptedSecret a b | a -> b where
    computedEncryptedSecret
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedEncryptedSecret =
        to (\x -> TF.Computed (TF.referenceKey x) "encrypted_secret")

class HasComputedEncryptionKey a b | a -> b where
    computedEncryptionKey
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedEncryptionKey =
        to (\x -> TF.Computed (TF.referenceKey x) "encryption_key")

class HasComputedEndpoint a b | a -> b where
    computedEndpoint
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedEndpoint =
        to (\x -> TF.Computed (TF.referenceKey x) "endpoint")

class HasComputedEndpointArn a b | a -> b where
    computedEndpointArn
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedEndpointArn =
        to (\x -> TF.Computed (TF.referenceKey x) "endpoint_arn")

class HasComputedEngine a b | a -> b where
    computedEngine
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedEngine =
        to (\x -> TF.Computed (TF.referenceKey x) "engine")

class HasComputedEngineVersion a b | a -> b where
    computedEngineVersion
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedEngineVersion =
        to (\x -> TF.Computed (TF.referenceKey x) "engine_version")

class HasComputedEtag a b | a -> b where
    computedEtag
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedEtag =
        to (\x -> TF.Computed (TF.referenceKey x) "etag")

class HasComputedExecutionArn a b | a -> b where
    computedExecutionArn
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedExecutionArn =
        to (\x -> TF.Computed (TF.referenceKey x) "execution_arn")

class HasComputedExpirationDate a b | a -> b where
    computedExpirationDate
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedExpirationDate =
        to (\x -> TF.Computed (TF.referenceKey x) "expiration_date")

class HasComputedExpirePasswords a b | a -> b where
    computedExpirePasswords
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedExpirePasswords =
        to (\x -> TF.Computed (TF.referenceKey x) "expire_passwords")

class HasComputedExpired a b | a -> b where
    computedExpired
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedExpired =
        to (\x -> TF.Computed (TF.referenceKey x) "expired")

class HasComputedFingerprint a b | a -> b where
    computedFingerprint
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedFingerprint =
        to (\x -> TF.Computed (TF.referenceKey x) "fingerprint")

class HasComputedFqdn a b | a -> b where
    computedFqdn
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedFqdn =
        to (\x -> TF.Computed (TF.referenceKey x) "fqdn")

class HasComputedFunctionArn a b | a -> b where
    computedFunctionArn
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedFunctionArn =
        to (\x -> TF.Computed (TF.referenceKey x) "function_arn")

class HasComputedGatewayId a b | a -> b where
    computedGatewayId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedGatewayId =
        to (\x -> TF.Computed (TF.referenceKey x) "gateway_id")

class HasComputedGroup a b | a -> b where
    computedGroup
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedGroup =
        to (\x -> TF.Computed (TF.referenceKey x) "group")

class HasComputedHash a b | a -> b where
    computedHash
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedHash =
        to (\x -> TF.Computed (TF.referenceKey x) "hash")

class HasComputedHashType a b | a -> b where
    computedHashType
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedHashType =
        to (\x -> TF.Computed (TF.referenceKey x) "hash_type")

class HasComputedHealthCheckGracePeriod a b | a -> b where
    computedHealthCheckGracePeriod
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedHealthCheckGracePeriod =
        to (\x -> TF.Computed (TF.referenceKey x) "health_check_grace_period")

class HasComputedHealthCheckType a b | a -> b where
    computedHealthCheckType
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedHealthCheckType =
        to (\x -> TF.Computed (TF.referenceKey x) "health_check_type")

class HasComputedHomeRegion a b | a -> b where
    computedHomeRegion
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedHomeRegion =
        to (\x -> TF.Computed (TF.referenceKey x) "home_region")

class HasComputedHostedZone a b | a -> b where
    computedHostedZone
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedHostedZone =
        to (\x -> TF.Computed (TF.referenceKey x) "hosted_zone")

class HasComputedHostedZoneId a b | a -> b where
    computedHostedZoneId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedHostedZoneId =
        to (\x -> TF.Computed (TF.referenceKey x) "hosted_zone_id")

class HasComputedIamArn a b | a -> b where
    computedIamArn
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedIamArn =
        to (\x -> TF.Computed (TF.referenceKey x) "iam_arn")

class HasComputedIamRole a b | a -> b where
    computedIamRole
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedIamRole =
        to (\x -> TF.Computed (TF.referenceKey x) "iam_role")

class HasComputedId a b | a -> b where
    computedId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedId =
        to (\x -> TF.Computed (TF.referenceKey x) "id")

class HasComputedIdentifier a b | a -> b where
    computedIdentifier
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedIdentifier =
        to (\x -> TF.Computed (TF.referenceKey x) "identifier")

class HasComputedInstance' a b | a -> b where
    computedInstance'
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedInstance' =
        to (\x -> TF.Computed (TF.referenceKey x) "instance")

class HasComputedInstanceId a b | a -> b where
    computedInstanceId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedInstanceId =
        to (\x -> TF.Computed (TF.referenceKey x) "instance_id")

class HasComputedInstanceIds a b | a -> b where
    computedInstanceIds
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedInstanceIds =
        to (\x -> TF.Computed (TF.referenceKey x) "instance_ids")

class HasComputedInstancePort a b | a -> b where
    computedInstancePort
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedInstancePort =
        to (\x -> TF.Computed (TF.referenceKey x) "instance_port")

class HasComputedInstanceTenancy a b | a -> b where
    computedInstanceTenancy
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedInstanceTenancy =
        to (\x -> TF.Computed (TF.referenceKey x) "instance_tenancy")

class HasComputedInvokeArn a b | a -> b where
    computedInvokeArn
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedInvokeArn =
        to (\x -> TF.Computed (TF.referenceKey x) "invoke_arn")

class HasComputedInvokeUrl a b | a -> b where
    computedInvokeUrl
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedInvokeUrl =
        to (\x -> TF.Computed (TF.referenceKey x) "invoke_url")

class HasComputedIops a b | a -> b where
    computedIops
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedIops =
        to (\x -> TF.Computed (TF.referenceKey x) "iops")

class HasComputedIpAddress a b | a -> b where
    computedIpAddress
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedIpAddress =
        to (\x -> TF.Computed (TF.referenceKey x) "ip_address")

class HasComputedIpv6AssociationId a b | a -> b where
    computedIpv6AssociationId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedIpv6AssociationId =
        to (\x -> TF.Computed (TF.referenceKey x) "ipv6_association_id")

class HasComputedIpv6CidrBlock a b | a -> b where
    computedIpv6CidrBlock
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedIpv6CidrBlock =
        to (\x -> TF.Computed (TF.referenceKey x) "ipv6_cidr_block")

class HasComputedKeyFingerprint a b | a -> b where
    computedKeyFingerprint
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedKeyFingerprint =
        to (\x -> TF.Computed (TF.referenceKey x) "key_fingerprint")

class HasComputedKeyId a b | a -> b where
    computedKeyId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedKeyId =
        to (\x -> TF.Computed (TF.referenceKey x) "key_id")

class HasComputedKeyName a b | a -> b where
    computedKeyName
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedKeyName =
        to (\x -> TF.Computed (TF.referenceKey x) "key_name")

class HasComputedKeyType a b | a -> b where
    computedKeyType
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedKeyType =
        to (\x -> TF.Computed (TF.referenceKey x) "key_type")

class HasComputedKibanaEndpoint a b | a -> b where
    computedKibanaEndpoint
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedKibanaEndpoint =
        to (\x -> TF.Computed (TF.referenceKey x) "kibana_endpoint")

class HasComputedKmsKeyArn a b | a -> b where
    computedKmsKeyArn
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedKmsKeyArn =
        to (\x -> TF.Computed (TF.referenceKey x) "kms_key_arn")

class HasComputedKmsKeyId a b | a -> b where
    computedKmsKeyId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedKmsKeyId =
        to (\x -> TF.Computed (TF.referenceKey x) "kms_key_id")

class HasComputedLastModified a b | a -> b where
    computedLastModified
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedLastModified =
        to (\x -> TF.Computed (TF.referenceKey x) "last_modified")

class HasComputedLastProcessingResult a b | a -> b where
    computedLastProcessingResult
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedLastProcessingResult =
        to (\x -> TF.Computed (TF.referenceKey x) "last_processing_result")

class HasComputedLastUpdatedDate a b | a -> b where
    computedLastUpdatedDate
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedLastUpdatedDate =
        to (\x -> TF.Computed (TF.referenceKey x) "last_updated_date")

class HasComputedLatestRevision a b | a -> b where
    computedLatestRevision
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedLatestRevision =
        to (\x -> TF.Computed (TF.referenceKey x) "latest_revision")

class HasComputedLatestVersion a b | a -> b where
    computedLatestVersion
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedLatestVersion =
        to (\x -> TF.Computed (TF.referenceKey x) "latest_version")

class HasComputedLaunchConfiguration a b | a -> b where
    computedLaunchConfiguration
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedLaunchConfiguration =
        to (\x -> TF.Computed (TF.referenceKey x) "launch_configuration")

class HasComputedLbPort a b | a -> b where
    computedLbPort
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedLbPort =
        to (\x -> TF.Computed (TF.referenceKey x) "lb_port")

class HasComputedLicenseModel a b | a -> b where
    computedLicenseModel
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedLicenseModel =
        to (\x -> TF.Computed (TF.referenceKey x) "license_model")

class HasComputedLoadBalancer a b | a -> b where
    computedLoadBalancer
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedLoadBalancer =
        to (\x -> TF.Computed (TF.referenceKey x) "load_balancer")

class HasComputedLoadBalancerName a b | a -> b where
    computedLoadBalancerName
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedLoadBalancerName =
        to (\x -> TF.Computed (TF.referenceKey x) "load_balancer_name")

class HasComputedLoadBalancerPort a b | a -> b where
    computedLoadBalancerPort
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedLoadBalancerPort =
        to (\x -> TF.Computed (TF.referenceKey x) "load_balancer_port")

class HasComputedLoadBalancers a b | a -> b where
    computedLoadBalancers
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedLoadBalancers =
        to (\x -> TF.Computed (TF.referenceKey x) "load_balancers")

class HasComputedLocation a b | a -> b where
    computedLocation
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedLocation =
        to (\x -> TF.Computed (TF.referenceKey x) "location")

class HasComputedMainRouteTableId a b | a -> b where
    computedMainRouteTableId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedMainRouteTableId =
        to (\x -> TF.Computed (TF.referenceKey x) "main_route_table_id")

class HasComputedMaintenanceWindow a b | a -> b where
    computedMaintenanceWindow
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedMaintenanceWindow =
        to (\x -> TF.Computed (TF.referenceKey x) "maintenance_window")

class HasComputedMasterUsername a b | a -> b where
    computedMasterUsername
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedMasterUsername =
        to (\x -> TF.Computed (TF.referenceKey x) "master_username")

class HasComputedMaxSize a b | a -> b where
    computedMaxSize
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedMaxSize =
        to (\x -> TF.Computed (TF.referenceKey x) "max_size")

class HasComputedMinSize a b | a -> b where
    computedMinSize
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedMinSize =
        to (\x -> TF.Computed (TF.referenceKey x) "min_size")

class HasComputedName a b | a -> b where
    computedName
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedName =
        to (\x -> TF.Computed (TF.referenceKey x) "name")

class HasComputedNameServers a b | a -> b where
    computedNameServers
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedNameServers =
        to (\x -> TF.Computed (TF.referenceKey x) "name_servers")

class HasComputedNatGatewayId a b | a -> b where
    computedNatGatewayId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedNatGatewayId =
        to (\x -> TF.Computed (TF.referenceKey x) "nat_gateway_id")

class HasComputedNetworkInterface a b | a -> b where
    computedNetworkInterface
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedNetworkInterface =
        to (\x -> TF.Computed (TF.referenceKey x) "network_interface")

class HasComputedNetworkInterfaceId a b | a -> b where
    computedNetworkInterfaceId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedNetworkInterfaceId =
        to (\x -> TF.Computed (TF.referenceKey x) "network_interface_id")

class HasComputedOptionGroupName a b | a -> b where
    computedOptionGroupName
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedOptionGroupName =
        to (\x -> TF.Computed (TF.referenceKey x) "option_group_name")

class HasComputedOriginalRouteTableId a b | a -> b where
    computedOriginalRouteTableId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedOriginalRouteTableId =
        to (\x -> TF.Computed (TF.referenceKey x) "original_route_table_id")

class HasComputedOutputs a b | a -> b where
    computedOutputs
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedOutputs =
        to (\x -> TF.Computed (TF.referenceKey x) "outputs")

class HasComputedOwner a b | a -> b where
    computedOwner
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedOwner =
        to (\x -> TF.Computed (TF.referenceKey x) "owner")

class HasComputedOwnerAlias a b | a -> b where
    computedOwnerAlias
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedOwnerAlias =
        to (\x -> TF.Computed (TF.referenceKey x) "owner_alias")

class HasComputedOwnerId a b | a -> b where
    computedOwnerId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedOwnerId =
        to (\x -> TF.Computed (TF.referenceKey x) "owner_id")

class HasComputedParameter a b | a -> b where
    computedParameter
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedParameter =
        to (\x -> TF.Computed (TF.referenceKey x) "parameter")

class HasComputedParameters a b | a -> b where
    computedParameters
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedParameters =
        to (\x -> TF.Computed (TF.referenceKey x) "parameters")

class HasComputedPath a b | a -> b where
    computedPath
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedPath =
        to (\x -> TF.Computed (TF.referenceKey x) "path")

class HasComputedPemEncodedCertificate a b | a -> b where
    computedPemEncodedCertificate
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedPemEncodedCertificate =
        to (\x -> TF.Computed (TF.referenceKey x) "pem_encoded_certificate")

class HasComputedPerformanceInsightsEnabled a b | a -> b where
    computedPerformanceInsightsEnabled
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedPerformanceInsightsEnabled =
        to (\x -> TF.Computed (TF.referenceKey x) "performance_insights_enabled")

class HasComputedPerformanceInsightsKmsKeyId a b | a -> b where
    computedPerformanceInsightsKmsKeyId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedPerformanceInsightsKmsKeyId =
        to (\x -> TF.Computed (TF.referenceKey x) "performance_insights_kms_key_id")

class HasComputedPermissions a b | a -> b where
    computedPermissions
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedPermissions =
        to (\x -> TF.Computed (TF.referenceKey x) "permissions")

class HasComputedPlatformTypes a b | a -> b where
    computedPlatformTypes
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedPlatformTypes =
        to (\x -> TF.Computed (TF.referenceKey x) "platform_types")

class HasComputedPolicy a b | a -> b where
    computedPolicy
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedPolicy =
        to (\x -> TF.Computed (TF.referenceKey x) "policy")

class HasComputedPolicyName a b | a -> b where
    computedPolicyName
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedPolicyName =
        to (\x -> TF.Computed (TF.referenceKey x) "policy_name")

class HasComputedPolicyType a b | a -> b where
    computedPolicyType
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedPolicyType =
        to (\x -> TF.Computed (TF.referenceKey x) "policy_type")

class HasComputedPolicyTypeName a b | a -> b where
    computedPolicyTypeName
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedPolicyTypeName =
        to (\x -> TF.Computed (TF.referenceKey x) "policy_type_name")

class HasComputedPort a b | a -> b where
    computedPort
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedPort =
        to (\x -> TF.Computed (TF.referenceKey x) "port")

class HasComputedPreferredBackupWindow a b | a -> b where
    computedPreferredBackupWindow
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedPreferredBackupWindow =
        to (\x -> TF.Computed (TF.referenceKey x) "preferred_backup_window")

class HasComputedPreferredMaintenanceWindow a b | a -> b where
    computedPreferredMaintenanceWindow
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedPreferredMaintenanceWindow =
        to (\x -> TF.Computed (TF.referenceKey x) "preferred_maintenance_window")

class HasComputedPrefixListId a b | a -> b where
    computedPrefixListId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedPrefixListId =
        to (\x -> TF.Computed (TF.referenceKey x) "prefix_list_id")

class HasComputedPrimaryEndpointAddress a b | a -> b where
    computedPrimaryEndpointAddress
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedPrimaryEndpointAddress =
        to (\x -> TF.Computed (TF.referenceKey x) "primary_endpoint_address")

class HasComputedPrivateIp a b | a -> b where
    computedPrivateIp
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedPrivateIp =
        to (\x -> TF.Computed (TF.referenceKey x) "private_ip")

class HasComputedPrivateIpAddress a b | a -> b where
    computedPrivateIpAddress
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedPrivateIpAddress =
        to (\x -> TF.Computed (TF.referenceKey x) "private_ip_address")

class HasComputedPrivateIps a b | a -> b where
    computedPrivateIps
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedPrivateIps =
        to (\x -> TF.Computed (TF.referenceKey x) "private_ips")

class HasComputedPrivateKey a b | a -> b where
    computedPrivateKey
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedPrivateKey =
        to (\x -> TF.Computed (TF.referenceKey x) "private_key")

class HasComputedPublicIp a b | a -> b where
    computedPublicIp
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedPublicIp =
        to (\x -> TF.Computed (TF.referenceKey x) "public_ip")

class HasComputedPublicKey a b | a -> b where
    computedPublicKey
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedPublicKey =
        to (\x -> TF.Computed (TF.referenceKey x) "public_key")

class HasComputedQualifiedArn a b | a -> b where
    computedQualifiedArn
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedQualifiedArn =
        to (\x -> TF.Computed (TF.referenceKey x) "qualified_arn")

class HasComputedReaderEndpoint a b | a -> b where
    computedReaderEndpoint
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedReaderEndpoint =
        to (\x -> TF.Computed (TF.referenceKey x) "reader_endpoint")

class HasComputedRegion a b | a -> b where
    computedRegion
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedRegion =
        to (\x -> TF.Computed (TF.referenceKey x) "region")

class HasComputedRegistrationCount a b | a -> b where
    computedRegistrationCount
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedRegistrationCount =
        to (\x -> TF.Computed (TF.referenceKey x) "registration_count")

class HasComputedRegistrationLimit a b | a -> b where
    computedRegistrationLimit
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedRegistrationLimit =
        to (\x -> TF.Computed (TF.referenceKey x) "registration_limit")

class HasComputedRegistryId a b | a -> b where
    computedRegistryId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedRegistryId =
        to (\x -> TF.Computed (TF.referenceKey x) "registry_id")

class HasComputedReplicationInstanceArn a b | a -> b where
    computedReplicationInstanceArn
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedReplicationInstanceArn =
        to (\x -> TF.Computed (TF.referenceKey x) "replication_instance_arn")

class HasComputedReplicationInstancePrivateIps a b | a -> b where
    computedReplicationInstancePrivateIps
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedReplicationInstancePrivateIps =
        to (\x -> TF.Computed (TF.referenceKey x) "replication_instance_private_ips")

class HasComputedReplicationInstancePublicIps a b | a -> b where
    computedReplicationInstancePublicIps
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedReplicationInstancePublicIps =
        to (\x -> TF.Computed (TF.referenceKey x) "replication_instance_public_ips")

class HasComputedReplicationSourceIdentifier a b | a -> b where
    computedReplicationSourceIdentifier
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedReplicationSourceIdentifier =
        to (\x -> TF.Computed (TF.referenceKey x) "replication_source_identifier")

class HasComputedReplicationTaskArn a b | a -> b where
    computedReplicationTaskArn
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedReplicationTaskArn =
        to (\x -> TF.Computed (TF.referenceKey x) "replication_task_arn")

class HasComputedRepository a b | a -> b where
    computedRepository
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedRepository =
        to (\x -> TF.Computed (TF.referenceKey x) "repository")

class HasComputedRepositoryId a b | a -> b where
    computedRepositoryId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedRepositoryId =
        to (\x -> TF.Computed (TF.referenceKey x) "repository_id")

class HasComputedRepositoryUrl a b | a -> b where
    computedRepositoryUrl
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedRepositoryUrl =
        to (\x -> TF.Computed (TF.referenceKey x) "repository_url")

class HasComputedRole a b | a -> b where
    computedRole
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedRole =
        to (\x -> TF.Computed (TF.referenceKey x) "role")

class HasComputedRoles a b | a -> b where
    computedRoles
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedRoles =
        to (\x -> TF.Computed (TF.referenceKey x) "roles")

class HasComputedRootResourceId a b | a -> b where
    computedRootResourceId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedRootResourceId =
        to (\x -> TF.Computed (TF.referenceKey x) "root_resource_id")

class HasComputedRouteTableId a b | a -> b where
    computedRouteTableId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedRouteTableId =
        to (\x -> TF.Computed (TF.referenceKey x) "route_table_id")

class HasComputedRunningInstanceCount a b | a -> b where
    computedRunningInstanceCount
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedRunningInstanceCount =
        to (\x -> TF.Computed (TF.referenceKey x) "running_instance_count")

class HasComputedS3Bucket a b | a -> b where
    computedS3Bucket
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedS3Bucket =
        to (\x -> TF.Computed (TF.referenceKey x) "s3_bucket")

class HasComputedS3CanonicalUserId a b | a -> b where
    computedS3CanonicalUserId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedS3CanonicalUserId =
        to (\x -> TF.Computed (TF.referenceKey x) "s3_canonical_user_id")

class HasComputedSchemaVersion a b | a -> b where
    computedSchemaVersion
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedSchemaVersion =
        to (\x -> TF.Computed (TF.referenceKey x) "schema_version")

class HasComputedSecret a b | a -> b where
    computedSecret
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedSecret =
        to (\x -> TF.Computed (TF.referenceKey x) "secret")

class HasComputedSecurityGroupId a b | a -> b where
    computedSecurityGroupId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedSecurityGroupId =
        to (\x -> TF.Computed (TF.referenceKey x) "security_group_id")

class HasComputedSecurityGroups a b | a -> b where
    computedSecurityGroups
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedSecurityGroups =
        to (\x -> TF.Computed (TF.referenceKey x) "security_groups")

class HasComputedServiceRole a b | a -> b where
    computedServiceRole
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedServiceRole =
        to (\x -> TF.Computed (TF.referenceKey x) "service_role")

class HasComputedSesSmtpPassword a b | a -> b where
    computedSesSmtpPassword
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedSesSmtpPassword =
        to (\x -> TF.Computed (TF.referenceKey x) "ses_smtp_password")

class HasComputedShardCount a b | a -> b where
    computedShardCount
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedShardCount =
        to (\x -> TF.Computed (TF.referenceKey x) "shard_count")

class HasComputedSourceCodeHash a b | a -> b where
    computedSourceCodeHash
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedSourceCodeHash =
        to (\x -> TF.Computed (TF.referenceKey x) "source_code_hash")

class HasComputedSourceDbSnapshotIdentifier a b | a -> b where
    computedSourceDbSnapshotIdentifier
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedSourceDbSnapshotIdentifier =
        to (\x -> TF.Computed (TF.referenceKey x) "source_db_snapshot_identifier")

class HasComputedSourceDestCheck a b | a -> b where
    computedSourceDestCheck
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedSourceDestCheck =
        to (\x -> TF.Computed (TF.referenceKey x) "source_dest_check")

class HasComputedSourceRegion a b | a -> b where
    computedSourceRegion
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedSourceRegion =
        to (\x -> TF.Computed (TF.referenceKey x) "source_region")

class HasComputedSshPublicKeyId a b | a -> b where
    computedSshPublicKeyId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedSshPublicKeyId =
        to (\x -> TF.Computed (TF.referenceKey x) "ssh_public_key_id")

class HasComputedState a b | a -> b where
    computedState
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedState =
        to (\x -> TF.Computed (TF.referenceKey x) "state")

class HasComputedStateTransitionReason a b | a -> b where
    computedStateTransitionReason
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedStateTransitionReason =
        to (\x -> TF.Computed (TF.referenceKey x) "state_transition_reason")

class HasComputedStaticRoutesOnly a b | a -> b where
    computedStaticRoutesOnly
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedStaticRoutesOnly =
        to (\x -> TF.Computed (TF.referenceKey x) "static_routes_only")

class HasComputedStatus a b | a -> b where
    computedStatus
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedStatus =
        to (\x -> TF.Computed (TF.referenceKey x) "status")

class HasComputedStatusReason a b | a -> b where
    computedStatusReason
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedStatusReason =
        to (\x -> TF.Computed (TF.referenceKey x) "status_reason")

class HasComputedStorageEncrypted a b | a -> b where
    computedStorageEncrypted
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedStorageEncrypted =
        to (\x -> TF.Computed (TF.referenceKey x) "storage_encrypted")

class HasComputedStorageType a b | a -> b where
    computedStorageType
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedStorageType =
        to (\x -> TF.Computed (TF.referenceKey x) "storage_type")

class HasComputedSubnetId a b | a -> b where
    computedSubnetId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedSubnetId =
        to (\x -> TF.Computed (TF.referenceKey x) "subnet_id")

class HasComputedSupportCode a b | a -> b where
    computedSupportCode
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedSupportCode =
        to (\x -> TF.Computed (TF.referenceKey x) "support_code")

class HasComputedTags a b | a -> b where
    computedTags
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedTags =
        to (\x -> TF.Computed (TF.referenceKey x) "tags")

class HasComputedTargetGroupArns a b | a -> b where
    computedTargetGroupArns
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedTargetGroupArns =
        to (\x -> TF.Computed (TF.referenceKey x) "target_group_arns")

class HasComputedThrottleSettings a b | a -> b where
    computedThrottleSettings
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedThrottleSettings =
        to (\x -> TF.Computed (TF.referenceKey x) "throttle_settings")

class HasComputedTunnel1Address a b | a -> b where
    computedTunnel1Address
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedTunnel1Address =
        to (\x -> TF.Computed (TF.referenceKey x) "tunnel1_address")

class HasComputedTunnel1BgpAsn a b | a -> b where
    computedTunnel1BgpAsn
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedTunnel1BgpAsn =
        to (\x -> TF.Computed (TF.referenceKey x) "tunnel1_bgp_asn")

class HasComputedTunnel1BgpHoldtime a b | a -> b where
    computedTunnel1BgpHoldtime
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedTunnel1BgpHoldtime =
        to (\x -> TF.Computed (TF.referenceKey x) "tunnel1_bgp_holdtime")

class HasComputedTunnel1CgwInsideAddress a b | a -> b where
    computedTunnel1CgwInsideAddress
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedTunnel1CgwInsideAddress =
        to (\x -> TF.Computed (TF.referenceKey x) "tunnel1_cgw_inside_address")

class HasComputedTunnel1PresharedKey a b | a -> b where
    computedTunnel1PresharedKey
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedTunnel1PresharedKey =
        to (\x -> TF.Computed (TF.referenceKey x) "tunnel1_preshared_key")

class HasComputedTunnel1VgwInsideAddress a b | a -> b where
    computedTunnel1VgwInsideAddress
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedTunnel1VgwInsideAddress =
        to (\x -> TF.Computed (TF.referenceKey x) "tunnel1_vgw_inside_address")

class HasComputedTunnel2Address a b | a -> b where
    computedTunnel2Address
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedTunnel2Address =
        to (\x -> TF.Computed (TF.referenceKey x) "tunnel2_address")

class HasComputedTunnel2BgpAsn a b | a -> b where
    computedTunnel2BgpAsn
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedTunnel2BgpAsn =
        to (\x -> TF.Computed (TF.referenceKey x) "tunnel2_bgp_asn")

class HasComputedTunnel2BgpHoldtime a b | a -> b where
    computedTunnel2BgpHoldtime
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedTunnel2BgpHoldtime =
        to (\x -> TF.Computed (TF.referenceKey x) "tunnel2_bgp_holdtime")

class HasComputedTunnel2CgwInsideAddress a b | a -> b where
    computedTunnel2CgwInsideAddress
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedTunnel2CgwInsideAddress =
        to (\x -> TF.Computed (TF.referenceKey x) "tunnel2_cgw_inside_address")

class HasComputedTunnel2PresharedKey a b | a -> b where
    computedTunnel2PresharedKey
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedTunnel2PresharedKey =
        to (\x -> TF.Computed (TF.referenceKey x) "tunnel2_preshared_key")

class HasComputedTunnel2VgwInsideAddress a b | a -> b where
    computedTunnel2VgwInsideAddress
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedTunnel2VgwInsideAddress =
        to (\x -> TF.Computed (TF.referenceKey x) "tunnel2_vgw_inside_address")

class HasComputedType' a b | a -> b where
    computedType'
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedType' =
        to (\x -> TF.Computed (TF.referenceKey x) "type")

class HasComputedUniqueId a b | a -> b where
    computedUniqueId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedUniqueId =
        to (\x -> TF.Computed (TF.referenceKey x) "unique_id")

class HasComputedUsagePlanId a b | a -> b where
    computedUsagePlanId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedUsagePlanId =
        to (\x -> TF.Computed (TF.referenceKey x) "usage_plan_id")

class HasComputedUser a b | a -> b where
    computedUser
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedUser =
        to (\x -> TF.Computed (TF.referenceKey x) "user")

class HasComputedUsers a b | a -> b where
    computedUsers
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedUsers =
        to (\x -> TF.Computed (TF.referenceKey x) "users")

class HasComputedUuid a b | a -> b where
    computedUuid
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedUuid =
        to (\x -> TF.Computed (TF.referenceKey x) "uuid")

class HasComputedValidUntil a b | a -> b where
    computedValidUntil
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedValidUntil =
        to (\x -> TF.Computed (TF.referenceKey x) "valid_until")

class HasComputedValue a b | a -> b where
    computedValue
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedValue =
        to (\x -> TF.Computed (TF.referenceKey x) "value")

class HasComputedVerificationToken a b | a -> b where
    computedVerificationToken
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedVerificationToken =
        to (\x -> TF.Computed (TF.referenceKey x) "verification_token")

class HasComputedVersion a b | a -> b where
    computedVersion
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedVersion =
        to (\x -> TF.Computed (TF.referenceKey x) "version")

class HasComputedVersionId a b | a -> b where
    computedVersionId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedVersionId =
        to (\x -> TF.Computed (TF.referenceKey x) "version_id")

class HasComputedVolumeId a b | a -> b where
    computedVolumeId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedVolumeId =
        to (\x -> TF.Computed (TF.referenceKey x) "volume_id")

class HasComputedVolumeSize a b | a -> b where
    computedVolumeSize
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedVolumeSize =
        to (\x -> TF.Computed (TF.referenceKey x) "volume_size")

class HasComputedVpcId a b | a -> b where
    computedVpcId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedVpcId =
        to (\x -> TF.Computed (TF.referenceKey x) "vpc_id")

class HasComputedVpcOptions0AvailabilityZones a b | a -> b where
    computedVpcOptions0AvailabilityZones
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedVpcOptions0AvailabilityZones =
        to (\x -> TF.Computed (TF.referenceKey x) "vpc_options.0.availability_zones")

class HasComputedVpcOptions0VpcId a b | a -> b where
    computedVpcOptions0VpcId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedVpcOptions0VpcId =
        to (\x -> TF.Computed (TF.referenceKey x) "vpc_options.0.vpc_id")

class HasComputedVpcPeeringConnectionId a b | a -> b where
    computedVpcPeeringConnectionId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedVpcPeeringConnectionId =
        to (\x -> TF.Computed (TF.referenceKey x) "vpc_peering_connection_id")

class HasComputedVpcRegion a b | a -> b where
    computedVpcRegion
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedVpcRegion =
        to (\x -> TF.Computed (TF.referenceKey x) "vpc_region")

class HasComputedVpcZoneIdentifier a b | a -> b where
    computedVpcZoneIdentifier
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedVpcZoneIdentifier =
        to (\x -> TF.Computed (TF.referenceKey x) "vpc_zone_identifier")

class HasComputedVpnConnectionId a b | a -> b where
    computedVpnConnectionId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedVpnConnectionId =
        to (\x -> TF.Computed (TF.referenceKey x) "vpn_connection_id")

class HasComputedVpnGatewayId a b | a -> b where
    computedVpnGatewayId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedVpnGatewayId =
        to (\x -> TF.Computed (TF.referenceKey x) "vpn_gateway_id")

class HasComputedWebsiteDomain a b | a -> b where
    computedWebsiteDomain
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedWebsiteDomain =
        to (\x -> TF.Computed (TF.referenceKey x) "website_domain")

class HasComputedWebsiteEndpoint a b | a -> b where
    computedWebsiteEndpoint
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedWebsiteEndpoint =
        to (\x -> TF.Computed (TF.referenceKey x) "website_endpoint")

class HasComputedWriter a b | a -> b where
    computedWriter
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedWriter =
        to (\x -> TF.Computed (TF.referenceKey x) "writer")

class HasComputedZoneId a b | a -> b where
    computedZoneId
        :: forall r s. Getting r (TF.Reference s a) (TF.Attribute s b)
    computedZoneId =
        to (\x -> TF.Computed (TF.referenceKey x) "zone_id")
