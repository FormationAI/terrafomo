-- This module is auto-generated.

{-# LANGUAGE DuplicateRecordFields  #-}
{-# LANGUAGE FlexibleInstances      #-}
{-# LANGUAGE FunctionalDependencies #-}
{-# LANGUAGE MultiParamTypeClasses  #-}
{-# LANGUAGE NoImplicitPrelude      #-}
{-# LANGUAGE OverloadedStrings      #-}
{-# LANGUAGE RecordWildCards        #-}
{-# LANGUAGE UndecidableInstances   #-}

{-# OPTIONS_GHC -fno-warn-unused-imports #-}

-- |
-- Module      : Terrafomo.AWS.Resource
-- Copyright   : (c) 2017 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+terrafomo@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
module Terrafomo.AWS.Resource
    (
    -- * Types
      ActivityResource (..)
    , activityResource

    , AmiCopyResource (..)
    , amiCopyResource

    , AmiFromInstanceResource (..)
    , amiFromInstanceResource

    , AmiLaunchPermissionResource (..)
    , amiLaunchPermissionResource

    , AmiResource (..)
    , amiResource

    , ApiGatewayAccountResource (..)
    , apiGatewayAccountResource

    , ApiGatewayApiKeyResource (..)
    , apiGatewayApiKeyResource

    , ApiGatewayAuthorizerResource (..)
    , apiGatewayAuthorizerResource

    , ApiGatewayBasePathMappingResource (..)
    , apiGatewayBasePathMappingResource

    , ApiGatewayClientCertificateResource (..)
    , apiGatewayClientCertificateResource

    , ApiGatewayDeploymentResource (..)
    , apiGatewayDeploymentResource

    , ApiGatewayDocumentationPartResource (..)
    , apiGatewayDocumentationPartResource

    , ApiGatewayDomainNameResource (..)
    , apiGatewayDomainNameResource

    , ApiGatewayGatewayResponseResource (..)
    , apiGatewayGatewayResponseResource

    , ApiGatewayIntegrationResource (..)
    , apiGatewayIntegrationResource

    , ApiGatewayIntegrationResponseResource (..)
    , apiGatewayIntegrationResponseResource

    , ApiGatewayMethodResource (..)
    , apiGatewayMethodResource

    , ApiGatewayMethodResponseResource (..)
    , apiGatewayMethodResponseResource

    , ApiGatewayMethodSettingsResource (..)
    , apiGatewayMethodSettingsResource

    , ApiGatewayModelResource (..)
    , apiGatewayModelResource

    , ApiGatewayResourceResource (..)
    , apiGatewayResourceResource

    , ApiGatewayRestApiResource (..)
    , apiGatewayRestApiResource

    , ApiGatewayStageResource (..)
    , apiGatewayStageResource

    , ApiGatewayUsagePlanKeyResource (..)
    , apiGatewayUsagePlanKeyResource

    , ApiGatewayUsagePlanResource (..)
    , apiGatewayUsagePlanResource

    , AppCookieStickinessPolicyResource (..)
    , appCookieStickinessPolicyResource

    , AppautoscalingPolicyResource (..)
    , appautoscalingPolicyResource

    , AppautoscalingScheduledActionResource (..)
    , appautoscalingScheduledActionResource

    , AppautoscalingTargetResource (..)
    , appautoscalingTargetResource

    , AthenaDatabaseResource (..)
    , athenaDatabaseResource

    , AthenaNamedQueryResource (..)
    , athenaNamedQueryResource

    , AutoscalingAttachmentResource (..)
    , autoscalingAttachmentResource

    , AutoscalingGroupResource (..)
    , autoscalingGroupResource

    , AutoscalingLifecycleHookResource (..)
    , autoscalingLifecycleHookResource

    , AutoscalingNotificationResource (..)
    , autoscalingNotificationResource

    , AutoscalingPolicyResource (..)
    , autoscalingPolicyResource

    , AutoscalingScheduleResource (..)
    , autoscalingScheduleResource

    , BatchComputeEnvironmentResource (..)
    , batchComputeEnvironmentResource

    , BatchJobDefinitionResource (..)
    , batchJobDefinitionResource

    , BatchJobQueueResource (..)
    , batchJobQueueResource

    , CloudformationStackResource (..)
    , cloudformationStackResource

    , CloudfrontDistributionResource (..)
    , cloudfrontDistributionResource

    , CloudfrontOriginAccessIdentityResource (..)
    , cloudfrontOriginAccessIdentityResource

    , CloudtrailResource (..)
    , cloudtrailResource

    , CloudwatchDashboardResource (..)
    , cloudwatchDashboardResource

    , CloudwatchEventPermissionResource (..)
    , cloudwatchEventPermissionResource

    , CloudwatchEventRuleResource (..)
    , cloudwatchEventRuleResource

    , CloudwatchEventTargetResource (..)
    , cloudwatchEventTargetResource

    , CloudwatchLogDestinationPolicyResource (..)
    , cloudwatchLogDestinationPolicyResource

    , CloudwatchLogDestinationResource (..)
    , cloudwatchLogDestinationResource

    , CloudwatchLogGroupResource (..)
    , cloudwatchLogGroupResource

    , CloudwatchLogMetricFilterResource (..)
    , cloudwatchLogMetricFilterResource

    , CloudwatchLogResourcePolicyResource (..)
    , cloudwatchLogResourcePolicyResource

    , CloudwatchLogStreamResource (..)
    , cloudwatchLogStreamResource

    , CloudwatchLogSubscriptionFilterResource (..)
    , cloudwatchLogSubscriptionFilterResource

    , CloudwatchMetricAlarmResource (..)
    , cloudwatchMetricAlarmResource

    , CodebuildProjectResource (..)
    , codebuildProjectResource

    , CodecommitRepositoryResource (..)
    , codecommitRepositoryResource

    , CodecommitTriggerResource (..)
    , codecommitTriggerResource

    , CodedeployAppResource (..)
    , codedeployAppResource

    , CodedeployDeploymentConfigResource (..)
    , codedeployDeploymentConfigResource

    , CodedeployDeploymentGroupResource (..)
    , codedeployDeploymentGroupResource

    , CodepipelineResource (..)
    , codepipelineResource

    , CognitoIdentityPoolResource (..)
    , cognitoIdentityPoolResource

    , CognitoIdentityPoolRolesAttachmentResource (..)
    , cognitoIdentityPoolRolesAttachmentResource

    , CognitoUserPoolClientResource (..)
    , cognitoUserPoolClientResource

    , CognitoUserPoolDomainResource (..)
    , cognitoUserPoolDomainResource

    , CognitoUserPoolResource (..)
    , cognitoUserPoolResource

    , ConfigConfigRuleResource (..)
    , configConfigRuleResource

    , ConfigConfigurationRecorderResource (..)
    , configConfigurationRecorderResource

    , ConfigConfigurationRecorderStatusResource (..)
    , configConfigurationRecorderStatusResource

    , ConfigDeliveryChannelResource (..)
    , configDeliveryChannelResource

    , CustomerGatewayResource (..)
    , customerGatewayResource

    , DbEventSubscriptionResource (..)
    , dbEventSubscriptionResource

    , DbInstanceResource (..)
    , dbInstanceResource

    , DbOptionGroupResource (..)
    , dbOptionGroupResource

    , DbParameterGroupResource (..)
    , dbParameterGroupResource

    , DbSecurityGroupResource (..)
    , dbSecurityGroupResource

    , DbSnapshotResource (..)
    , dbSnapshotResource

    , DbSubnetGroupResource (..)
    , dbSubnetGroupResource

    , DefaultNetworkAclResource (..)
    , defaultNetworkAclResource

    , DefaultRouteTableResource (..)
    , defaultRouteTableResource

    , DefaultSecurityGroupResource (..)
    , defaultSecurityGroupResource

    , DefaultSubnetResource (..)
    , defaultSubnetResource

    , DefaultVpcDhcpOptionsResource (..)
    , defaultVpcDhcpOptionsResource

    , DefaultVpcResource (..)
    , defaultVpcResource

    , DevicefarmProjectResource (..)
    , devicefarmProjectResource

    , DirectoryServiceDirectoryResource (..)
    , directoryServiceDirectoryResource

    , DmsCertificateResource (..)
    , dmsCertificateResource

    , DmsEndpointResource (..)
    , dmsEndpointResource

    , DmsReplicationInstanceResource (..)
    , dmsReplicationInstanceResource

    , DmsReplicationSubnetGroupResource (..)
    , dmsReplicationSubnetGroupResource

    , DmsReplicationTaskResource (..)
    , dmsReplicationTaskResource

    , DxConnectionAssociationResource (..)
    , dxConnectionAssociationResource

    , DxConnectionResource (..)
    , dxConnectionResource

    , DxLagResource (..)
    , dxLagResource

    , DynamodbTableResource (..)
    , dynamodbTableResource

    , EbsSnapshotResource (..)
    , ebsSnapshotResource

    , EbsVolumeResource (..)
    , ebsVolumeResource

    , EcrLifecyclePolicyResource (..)
    , ecrLifecyclePolicyResource

    , EcrRepositoryPolicyResource (..)
    , ecrRepositoryPolicyResource

    , EcrRepositoryResource (..)
    , ecrRepositoryResource

    , EcsClusterResource (..)
    , ecsClusterResource

    , EcsServiceResource (..)
    , ecsServiceResource

    , EcsTaskDefinitionResource (..)
    , ecsTaskDefinitionResource

    , EfsFileSystemResource (..)
    , efsFileSystemResource

    , EfsMountTargetResource (..)
    , efsMountTargetResource

    , EgressOnlyInternetGatewayResource (..)
    , egressOnlyInternetGatewayResource

    , EipAssociationResource (..)
    , eipAssociationResource

    , EipResource (..)
    , eipResource

    , ElasticBeanstalkApplicationResource (..)
    , elasticBeanstalkApplicationResource

    , ElasticBeanstalkApplicationVersionResource (..)
    , elasticBeanstalkApplicationVersionResource

    , ElasticBeanstalkConfigurationTemplateResource (..)
    , elasticBeanstalkConfigurationTemplateResource

    , ElasticBeanstalkEnvironmentResource (..)
    , elasticBeanstalkEnvironmentResource

    , ElasticacheClusterResource (..)
    , elasticacheClusterResource

    , ElasticacheParameterGroupResource (..)
    , elasticacheParameterGroupResource

    , ElasticacheReplicationGroupResource (..)
    , elasticacheReplicationGroupResource

    , ElasticacheSecurityGroupResource (..)
    , elasticacheSecurityGroupResource

    , ElasticacheSubnetGroupResource (..)
    , elasticacheSubnetGroupResource

    , ElasticsearchDomainPolicyResource (..)
    , elasticsearchDomainPolicyResource

    , ElasticsearchDomainResource (..)
    , elasticsearchDomainResource

    , ElastictranscoderPipelineResource (..)
    , elastictranscoderPipelineResource

    , ElastictranscoderPresetResource (..)
    , elastictranscoderPresetResource

    , ElbAttachmentResource (..)
    , elbAttachmentResource

    , ElbLoadBalancerBackendServerPolicyResource (..)
    , elbLoadBalancerBackendServerPolicyResource

    , ElbLoadBalancerListenerPolicyResource (..)
    , elbLoadBalancerListenerPolicyResource

    , ElbLoadBalancerPolicyResource (..)
    , elbLoadBalancerPolicyResource

    , ElbResource (..)
    , elbResource

    , EmrClusterResource (..)
    , emrClusterResource

    , EmrInstanceGroupResource (..)
    , emrInstanceGroupResource

    , EmrSecurityConfigurationResource (..)
    , emrSecurityConfigurationResource

    , FlowLogResource (..)
    , flowLogResource

    , GlacierVaultResource (..)
    , glacierVaultResource

    , GlueCatalogDatabaseResource (..)
    , glueCatalogDatabaseResource

    , GuarddutyDetectorResource (..)
    , guarddutyDetectorResource

    , GuarddutyMemberResource (..)
    , guarddutyMemberResource

    , IamAccessKeyResource (..)
    , iamAccessKeyResource

    , IamAccountAliasResource (..)
    , iamAccountAliasResource

    , IamAccountPasswordPolicyResource (..)
    , iamAccountPasswordPolicyResource

    , IamGroupMembershipResource (..)
    , iamGroupMembershipResource

    , IamGroupPolicyAttachmentResource (..)
    , iamGroupPolicyAttachmentResource

    , IamGroupPolicyResource (..)
    , iamGroupPolicyResource

    , IamGroupResource (..)
    , iamGroupResource

    , IamInstanceProfileResource (..)
    , iamInstanceProfileResource

    , IamOpenidConnectProviderResource (..)
    , iamOpenidConnectProviderResource

    , IamPolicyAttachmentResource (..)
    , iamPolicyAttachmentResource

    , IamPolicyResource (..)
    , iamPolicyResource

    , IamRolePolicyAttachmentResource (..)
    , iamRolePolicyAttachmentResource

    , IamRolePolicyResource (..)
    , iamRolePolicyResource

    , IamRoleResource (..)
    , iamRoleResource

    , IamSamlProviderResource (..)
    , iamSamlProviderResource

    , IamServerCertificateResource (..)
    , iamServerCertificateResource

    , IamUserLoginProfileResource (..)
    , iamUserLoginProfileResource

    , IamUserPolicyAttachmentResource (..)
    , iamUserPolicyAttachmentResource

    , IamUserPolicyResource (..)
    , iamUserPolicyResource

    , IamUserResource (..)
    , iamUserResource

    , IamUserSshKeyResource (..)
    , iamUserSshKeyResource

    , InspectorAssessmentTargetResource (..)
    , inspectorAssessmentTargetResource

    , InspectorAssessmentTemplateResource (..)
    , inspectorAssessmentTemplateResource

    , InspectorResourceGroupResource (..)
    , inspectorResourceGroupResource

    , InstanceResource (..)
    , instanceResource

    , InternetGatewayResource (..)
    , internetGatewayResource

    , IotCertificateResource (..)
    , iotCertificateResource

    , IotPolicyResource (..)
    , iotPolicyResource

    , KeyPairResource (..)
    , keyPairResource

    , KinesisFirehoseDeliveryStreamResource (..)
    , kinesisFirehoseDeliveryStreamResource

    , KinesisStreamResource (..)
    , kinesisStreamResource

    , KmsAliasResource (..)
    , kmsAliasResource

    , KmsKeyResource (..)
    , kmsKeyResource

    , LambdaAliasResource (..)
    , lambdaAliasResource

    , LambdaEventSourceMappingResource (..)
    , lambdaEventSourceMappingResource

    , LambdaFunctionResource (..)
    , lambdaFunctionResource

    , LambdaPermissionResource (..)
    , lambdaPermissionResource

    , LaunchConfigurationResource (..)
    , launchConfigurationResource

    , LbCookieStickinessPolicyResource (..)
    , lbCookieStickinessPolicyResource

    , LbListenerResource (..)
    , lbListenerResource

    , LbListenerRuleResource (..)
    , lbListenerRuleResource

    , LbResource (..)
    , lbResource

    , LbSslNegotiationPolicyResource (..)
    , lbSslNegotiationPolicyResource

    , LbTargetGroupAttachmentResource (..)
    , lbTargetGroupAttachmentResource

    , LbTargetGroupResource (..)
    , lbTargetGroupResource

    , LightsailDomainResource (..)
    , lightsailDomainResource

    , LightsailInstanceResource (..)
    , lightsailInstanceResource

    , LightsailKeyPairResource (..)
    , lightsailKeyPairResource

    , LightsailStaticIpAttachmentResource (..)
    , lightsailStaticIpAttachmentResource

    , LightsailStaticIpResource (..)
    , lightsailStaticIpResource

    , MainRouteTableAssociationResource (..)
    , mainRouteTableAssociationResource

    , MediaStoreContainerResource (..)
    , mediaStoreContainerResource

    , MqBrokerResource (..)
    , mqBrokerResource

    , MqConfigurationResource (..)
    , mqConfigurationResource

    , NatGatewayResource (..)
    , natGatewayResource

    , NetworkAclResource (..)
    , networkAclResource

    , NetworkAclRuleResource (..)
    , networkAclRuleResource

    , NetworkInterfaceAttachmentResource (..)
    , networkInterfaceAttachmentResource

    , NetworkInterfaceResource (..)
    , networkInterfaceResource

    , NetworkInterfaceSgAttachmentResource (..)
    , networkInterfaceSgAttachmentResource

    , OpsworksApplicationResource (..)
    , opsworksApplicationResource

    , OpsworksCustomLayerResource (..)
    , opsworksCustomLayerResource

    , OpsworksGangliaLayerResource (..)
    , opsworksGangliaLayerResource

    , OpsworksHaproxyLayerResource (..)
    , opsworksHaproxyLayerResource

    , OpsworksInstanceResource (..)
    , opsworksInstanceResource

    , OpsworksJavaAppLayerResource (..)
    , opsworksJavaAppLayerResource

    , OpsworksMemcachedLayerResource (..)
    , opsworksMemcachedLayerResource

    , OpsworksMysqlLayerResource (..)
    , opsworksMysqlLayerResource

    , OpsworksNodejsAppLayerResource (..)
    , opsworksNodejsAppLayerResource

    , OpsworksPermissionResource (..)
    , opsworksPermissionResource

    , OpsworksPhpAppLayerResource (..)
    , opsworksPhpAppLayerResource

    , OpsworksRailsAppLayerResource (..)
    , opsworksRailsAppLayerResource

    , OpsworksRdsDbInstanceResource (..)
    , opsworksRdsDbInstanceResource

    , OpsworksStackResource (..)
    , opsworksStackResource

    , OpsworksStaticWebLayerResource (..)
    , opsworksStaticWebLayerResource

    , OpsworksUserProfileResource (..)
    , opsworksUserProfileResource

    , PlacementGroupResource (..)
    , placementGroupResource

    , ProxyProtocolPolicyResource (..)
    , proxyProtocolPolicyResource

    , RdsClusterInstanceResource (..)
    , rdsClusterInstanceResource

    , RdsClusterParameterGroupResource (..)
    , rdsClusterParameterGroupResource

    , RdsClusterResource (..)
    , rdsClusterResource

    , RedshiftClusterResource (..)
    , redshiftClusterResource

    , RedshiftParameterGroupResource (..)
    , redshiftParameterGroupResource

    , RedshiftSecurityGroupResource (..)
    , redshiftSecurityGroupResource

    , RedshiftSubnetGroupResource (..)
    , redshiftSubnetGroupResource

    , Route53DelegationSetResource (..)
    , route53DelegationSetResource

    , Route53HealthCheckResource (..)
    , route53HealthCheckResource

    , Route53QueryLogResource (..)
    , route53QueryLogResource

    , Route53RecordResource (..)
    , route53RecordResource

    , Route53ZoneAssociationResource (..)
    , route53ZoneAssociationResource

    , Route53ZoneResource (..)
    , route53ZoneResource

    , RouteResource (..)
    , routeResource

    , RouteTableAssociationResource (..)
    , routeTableAssociationResource

    , RouteTableResource (..)
    , routeTableResource

    , S3BucketNotificationResource (..)
    , s3BucketNotificationResource

    , S3BucketObjectResource (..)
    , s3BucketObjectResource

    , S3BucketPolicyResource (..)
    , s3BucketPolicyResource

    , S3BucketResource (..)
    , s3BucketResource

    , SecurityGroupResource (..)
    , securityGroupResource

    , SecurityGroupRuleResource (..)
    , securityGroupRuleResource

    , ServiceDiscoveryPrivateDnsNamespaceResource (..)
    , serviceDiscoveryPrivateDnsNamespaceResource

    , ServiceDiscoveryPublicDnsNamespaceResource (..)
    , serviceDiscoveryPublicDnsNamespaceResource

    , ServiceDiscoveryServiceResource (..)
    , serviceDiscoveryServiceResource

    , ServicecatalogPortfolioResource (..)
    , servicecatalogPortfolioResource

    , SesActiveReceiptRuleSetResource (..)
    , sesActiveReceiptRuleSetResource

    , SesConfigurationSetResource (..)
    , sesConfigurationSetResource

    , SesDomainDkimResource (..)
    , sesDomainDkimResource

    , SesDomainIdentityResource (..)
    , sesDomainIdentityResource

    , SesEventDestinationResource (..)
    , sesEventDestinationResource

    , SesReceiptFilterResource (..)
    , sesReceiptFilterResource

    , SesReceiptRuleResource (..)
    , sesReceiptRuleResource

    , SesReceiptRuleSetResource (..)
    , sesReceiptRuleSetResource

    , SesTemplateResource (..)
    , sesTemplateResource

    , SimpledbDomainResource (..)
    , simpledbDomainResource

    , SnapshotCreateVolumePermissionResource (..)
    , snapshotCreateVolumePermissionResource

    , SnsTopicPolicyResource (..)
    , snsTopicPolicyResource

    , SnsTopicResource (..)
    , snsTopicResource

    , SnsTopicSubscriptionResource (..)
    , snsTopicSubscriptionResource

    , SpotDatafeedSubscriptionResource (..)
    , spotDatafeedSubscriptionResource

    , SpotFleetRequestResource (..)
    , spotFleetRequestResource

    , SpotInstanceRequestResource (..)
    , spotInstanceRequestResource

    , SqsQueuePolicyResource (..)
    , sqsQueuePolicyResource

    , SqsQueueResource (..)
    , sqsQueueResource

    , SsmActivationResource (..)
    , ssmActivationResource

    , SsmAssociationResource (..)
    , ssmAssociationResource

    , SsmDocumentResource (..)
    , ssmDocumentResource

    , SsmMaintenanceWindowResource (..)
    , ssmMaintenanceWindowResource

    , SsmMaintenanceWindowTargetResource (..)
    , ssmMaintenanceWindowTargetResource

    , SsmMaintenanceWindowTaskResource (..)
    , ssmMaintenanceWindowTaskResource

    , SsmParameterResource (..)
    , ssmParameterResource

    , SsmPatchBaselineResource (..)
    , ssmPatchBaselineResource

    , SsmPatchGroupResource (..)
    , ssmPatchGroupResource

    , StateMachineResource (..)
    , stateMachineResource

    , SubnetResource (..)
    , subnetResource

    , VolumeAttachmentResource (..)
    , volumeAttachmentResource

    , VpcDhcpOptionsAssociationResource (..)
    , vpcDhcpOptionsAssociationResource

    , VpcDhcpOptionsResource (..)
    , vpcDhcpOptionsResource

    , VpcEndpointResource (..)
    , vpcEndpointResource

    , VpcEndpointRouteTableAssociationResource (..)
    , vpcEndpointRouteTableAssociationResource

    , VpcPeeringConnectionAccepterResource (..)
    , vpcPeeringConnectionAccepterResource

    , VpcPeeringConnectionResource (..)
    , vpcPeeringConnectionResource

    , VpcResource (..)
    , vpcResource

    , VpnConnectionResource (..)
    , vpnConnectionResource

    , VpnConnectionRouteResource (..)
    , vpnConnectionRouteResource

    , VpnGatewayAttachmentResource (..)
    , vpnGatewayAttachmentResource

    , VpnGatewayResource (..)
    , vpnGatewayResource

    , VpnGatewayRoutePropagationResource (..)
    , vpnGatewayRoutePropagationResource

    , WafByteMatchSetResource (..)
    , wafByteMatchSetResource

    , WafIpsetResource (..)
    , wafIpsetResource

    , WafRateBasedRuleResource (..)
    , wafRateBasedRuleResource

    , WafRuleResource (..)
    , wafRuleResource

    , WafSizeConstraintSetResource (..)
    , wafSizeConstraintSetResource

    , WafSqlInjectionMatchSetResource (..)
    , wafSqlInjectionMatchSetResource

    , WafWebAclResource (..)
    , wafWebAclResource

    , WafXssMatchSetResource (..)
    , wafXssMatchSetResource

    , WafregionalByteMatchSetResource (..)
    , wafregionalByteMatchSetResource

    , WafregionalIpsetResource (..)
    , wafregionalIpsetResource

    -- * Overloaded Fields
    , HasAccelerationStatus (..)
    , HasAccepter (..)
    , HasAccessLogs (..)
    , HasAccessPolicies (..)
    , HasAccessPolicy (..)
    , HasAccountAlias (..)
    , HasAccountId (..)
    , HasAcl (..)
    , HasAction (..)
    , HasActionsEnabled (..)
    , HasActive (..)
    , HasAddHeaderAction (..)
    , HasAdjustmentType (..)
    , HasAdminCreateUserConfig (..)
    , HasAdvancedOptions (..)
    , HasAfter (..)
    , HasAgentVersion (..)
    , HasAlarmActions (..)
    , HasAlarmConfiguration (..)
    , HasAlarmDescription (..)
    , HasAlarmName (..)
    , HasAlbTargetGroupArn (..)
    , HasAlias (..)
    , HasAliasAttributes (..)
    , HasAliases (..)
    , HasAllocatedMemory (..)
    , HasAllocatedStorage (..)
    , HasAllocationId (..)
    , HasAllocationStrategy (..)
    , HasAllowMajorVersionUpgrade (..)
    , HasAllowReassociation (..)
    , HasAllowSelfManagement (..)
    , HasAllowSsh (..)
    , HasAllowSudo (..)
    , HasAllowUnassociatedTargets (..)
    , HasAllowUnauthenticatedIdentities (..)
    , HasAllowUsersToChangePassword (..)
    , HasAllowVersionUpgrade (..)
    , HasAllowedOauthFlows (..)
    , HasAllowedOauthFlowsUserPoolClient (..)
    , HasAllowedOauthScopes (..)
    , HasAmi (..)
    , HasAmiId (..)
    , HasApiId (..)
    , HasApiKeyRequired (..)
    , HasApiStages (..)
    , HasAppName (..)
    , HasAppServer (..)
    , HasAppServerVersion (..)
    , HasAppSource (..)
    , HasApplication (..)
    , HasApplications (..)
    , HasApplyImmediately (..)
    , HasApprovalRule (..)
    , HasApprovedPatches (..)
    , HasApprovedPatchesComplianceLevel (..)
    , HasArchitecture (..)
    , HasArn (..)
    , HasArtifactStore (..)
    , HasArtifacts (..)
    , HasAssignGeneratedIpv6CidrBlock (..)
    , HasAssignIpv6AddressOnCreation (..)
    , HasAssociatePublicIpAddress (..)
    , HasAssociateWithPrivateIp (..)
    , HasAssociationName (..)
    , HasAssumeRolePolicy (..)
    , HasAtRestEncryptionEnabled (..)
    , HasAttachment (..)
    , HasAttribute (..)
    , HasAudio (..)
    , HasAudioCodecOptions (..)
    , HasAuthToken (..)
    , HasAuthorization (..)
    , HasAuthorizerCredentials (..)
    , HasAuthorizerId (..)
    , HasAuthorizerResultTtlInSeconds (..)
    , HasAuthorizerUri (..)
    , HasAutoAccept (..)
    , HasAutoAssignElasticIps (..)
    , HasAutoAssignPublicIps (..)
    , HasAutoBundleOnDeploy (..)
    , HasAutoHealing (..)
    , HasAutoMinorVersionUpgrade (..)
    , HasAutoRollbackConfiguration (..)
    , HasAutoScalingType (..)
    , HasAutoVerifiedAttributes (..)
    , HasAutomatedSnapshotRetentionPeriod (..)
    , HasAutomaticFailoverEnabled (..)
    , HasAutoscalingGroupName (..)
    , HasAutoscalingGroups (..)
    , HasAutoscalingRole (..)
    , HasAvailabilityZone (..)
    , HasAvailabilityZones (..)
    , HasAwsFlowRubySettings (..)
    , HasAwsKmsKeyArn (..)
    , HasAzMode (..)
    , HasBackupRetentionPeriod (..)
    , HasBackupWindow (..)
    , HasBandwidth (..)
    , HasBasePath (..)
    , HasBaselineId (..)
    , HasBatchSize (..)
    , HasBerkshelfVersion (..)
    , HasBgpAsn (..)
    , HasBinaryMediaTypes (..)
    , HasBlockDurationMinutes (..)
    , HasBlueGreenDeploymentConfig (..)
    , HasBlueprintId (..)
    , HasBody (..)
    , HasBootstrapAction (..)
    , HasBounceAction (..)
    , HasBranches (..)
    , HasBrokerName (..)
    , HasBucket (..)
    , HasBucketPrefix (..)
    , HasBuildTimeout (..)
    , HasBundleId (..)
    , HasBundlerVersion (..)
    , HasByteMatchTuple (..)
    , HasByteMatchTuples (..)
    , HasCacheBehavior (..)
    , HasCacheClusterEnabled (..)
    , HasCacheClusterSize (..)
    , HasCacheControl (..)
    , HasCacheKeyNamespace (..)
    , HasCacheKeyParameters (..)
    , HasCallbackUrls (..)
    , HasCapabilities (..)
    , HasCatalogId (..)
    , HasCdcStartTime (..)
    , HasCertificateArn (..)
    , HasCertificateBody (..)
    , HasCertificateChain (..)
    , HasCertificateId (..)
    , HasCertificateName (..)
    , HasCertificatePem (..)
    , HasCertificatePrivateKey (..)
    , HasCertificateWallet (..)
    , HasCharacterSetName (..)
    , HasChildHealthThreshold (..)
    , HasChildHealthchecks (..)
    , HasCidr (..)
    , HasCidrBlock (..)
    , HasCidrBlocks (..)
    , HasClientCertificateId (..)
    , HasClientIdList (..)
    , HasCloudWatchLogsGroupArn (..)
    , HasCloudWatchLogsRoleArn (..)
    , HasCloudwatchAlarmName (..)
    , HasCloudwatchAlarmRegion (..)
    , HasCloudwatchDestination (..)
    , HasCloudwatchLogGroupArn (..)
    , HasCloudwatchRoleArn (..)
    , HasCluster (..)
    , HasClusterConfig (..)
    , HasClusterId (..)
    , HasClusterIdentifier (..)
    , HasClusterIdentifierPrefix (..)
    , HasClusterMode (..)
    , HasClusterParameterGroupName (..)
    , HasClusterSecurityGroups (..)
    , HasClusterSubnetGroupName (..)
    , HasClusterType (..)
    , HasClusterVersion (..)
    , HasCnamePrefix (..)
    , HasCognitoIdentityProviders (..)
    , HasColor (..)
    , HasComment (..)
    , HasComparisonOperator (..)
    , HasComputeEnvironmentName (..)
    , HasComputeEnvironments (..)
    , HasComputeResources (..)
    , HasComputedAccessUrl (..)
    , HasComputedAccountId (..)
    , HasComputedActivationCode (..)
    , HasComputedAddress (..)
    , HasComputedAdjustmentType (..)
    , HasComputedAllocatedStorage (..)
    , HasComputedAllocationId (..)
    , HasComputedArn (..)
    , HasComputedArnSuffix (..)
    , HasComputedAssociateWithPrivateIp (..)
    , HasComputedAssociationId (..)
    , HasComputedAttachment (..)
    , HasComputedAttachmentId (..)
    , HasComputedAttribute (..)
    , HasComputedAutoscalingGroupName (..)
    , HasComputedAvailabilityZone (..)
    , HasComputedAvailabilityZones (..)
    , HasComputedAwsAccountId (..)
    , HasComputedBackupRetentionPeriod (..)
    , HasComputedBackupWindow (..)
    , HasComputedBgpAsn (..)
    , HasComputedBucketDomainName (..)
    , HasComputedCaCertIdentifier (..)
    , HasComputedCacheNodes (..)
    , HasComputedCallerReference (..)
    , HasComputedCanonicalHostedZoneId (..)
    , HasComputedCertificateArn (..)
    , HasComputedCertificateUploadDate (..)
    , HasComputedCidrBlock (..)
    , HasComputedCidrBlocks (..)
    , HasComputedClientSecret (..)
    , HasComputedCloneUrlHttp (..)
    , HasComputedCloneUrlSsh (..)
    , HasComputedCloudfrontAccessIdentityPath (..)
    , HasComputedCloudfrontDistributionArn (..)
    , HasComputedCloudfrontDomainName (..)
    , HasComputedCloudfrontZoneId (..)
    , HasComputedClusterAddress (..)
    , HasComputedClusterIdentifier (..)
    , HasComputedClusterMembers (..)
    , HasComputedClusterResourceId (..)
    , HasComputedConfiguration (..)
    , HasComputedConfigurationEndpoint (..)
    , HasComputedConfigurationEndpointAddress (..)
    , HasComputedContent (..)
    , HasComputedCookieExpirationPeriod (..)
    , HasComputedCookieName (..)
    , HasComputedCreateDate (..)
    , HasComputedCreatedDate (..)
    , HasComputedCreationDate (..)
    , HasComputedCustomerGatewayConfiguration (..)
    , HasComputedCustomerGatewayId (..)
    , HasComputedDashboardArn (..)
    , HasComputedDataEncryptionKeyId (..)
    , HasComputedDatabaseName (..)
    , HasComputedDbSnapshotArn (..)
    , HasComputedDbiResourceId (..)
    , HasComputedDefaultCooldown (..)
    , HasComputedDefaultNetworkAclId (..)
    , HasComputedDefaultRouteTableId (..)
    , HasComputedDefaultSecurityGroupId (..)
    , HasComputedDefaultVersion (..)
    , HasComputedDefaultVersionId (..)
    , HasComputedDeploymentConfigId (..)
    , HasComputedDescription (..)
    , HasComputedDesiredCapacity (..)
    , HasComputedDestinationCidrBlock (..)
    , HasComputedDestinationIpv6CidrBlock (..)
    , HasComputedDeviceName (..)
    , HasComputedDkimTokens (..)
    , HasComputedDnsIpAddresses (..)
    , HasComputedDnsName (..)
    , HasComputedDocumentType (..)
    , HasComputedDomainId (..)
    , HasComputedEcsClusterArn (..)
    , HasComputedEgressOnlyGatewayId (..)
    , HasComputedEnableClassiclink (..)
    , HasComputedEnableDnsHostnames (..)
    , HasComputedEnableDnsSupport (..)
    , HasComputedEncrypted (..)
    , HasComputedEncryptedFingerprint (..)
    , HasComputedEncryptedPassword (..)
    , HasComputedEncryptedPrivateKey (..)
    , HasComputedEncryptedSecret (..)
    , HasComputedEncryptionKey (..)
    , HasComputedEndpoint (..)
    , HasComputedEndpointArn (..)
    , HasComputedEngine (..)
    , HasComputedEngineVersion (..)
    , HasComputedEtag (..)
    , HasComputedExecutionArn (..)
    , HasComputedExpirationDate (..)
    , HasComputedExpirePasswords (..)
    , HasComputedExpired (..)
    , HasComputedFingerprint (..)
    , HasComputedFqdn (..)
    , HasComputedFunctionArn (..)
    , HasComputedGatewayId (..)
    , HasComputedGroup (..)
    , HasComputedHash (..)
    , HasComputedHashType (..)
    , HasComputedHealthCheckGracePeriod (..)
    , HasComputedHealthCheckType (..)
    , HasComputedHomeRegion (..)
    , HasComputedHostedZone (..)
    , HasComputedHostedZoneId (..)
    , HasComputedIamArn (..)
    , HasComputedIamRole (..)
    , HasComputedId (..)
    , HasComputedIdentifier (..)
    , HasComputedInstance' (..)
    , HasComputedInstanceClass (..)
    , HasComputedInstanceId (..)
    , HasComputedInstanceIds (..)
    , HasComputedInstancePort (..)
    , HasComputedInstanceTenancy (..)
    , HasComputedInvokeArn (..)
    , HasComputedInvokeUrl (..)
    , HasComputedIops (..)
    , HasComputedIpAddress (..)
    , HasComputedIpv6AssociationId (..)
    , HasComputedIpv6CidrBlock (..)
    , HasComputedKeyFingerprint (..)
    , HasComputedKeyId (..)
    , HasComputedKeyName (..)
    , HasComputedKeyType (..)
    , HasComputedKibanaEndpoint (..)
    , HasComputedKmsKeyArn (..)
    , HasComputedKmsKeyId (..)
    , HasComputedLastModified (..)
    , HasComputedLastProcessingResult (..)
    , HasComputedLastUpdatedDate (..)
    , HasComputedLatestRevision (..)
    , HasComputedLatestVersion (..)
    , HasComputedLaunchConfiguration (..)
    , HasComputedLbPort (..)
    , HasComputedLicenseModel (..)
    , HasComputedLoadBalancer (..)
    , HasComputedLoadBalancerName (..)
    , HasComputedLoadBalancerPort (..)
    , HasComputedLoadBalancers (..)
    , HasComputedLocation (..)
    , HasComputedMainRouteTableId (..)
    , HasComputedMaintenanceWindow (..)
    , HasComputedMasterUsername (..)
    , HasComputedMaxSize (..)
    , HasComputedMinSize (..)
    , HasComputedMultiAz (..)
    , HasComputedName (..)
    , HasComputedNameServers (..)
    , HasComputedNatGatewayId (..)
    , HasComputedNetworkInterface (..)
    , HasComputedNetworkInterfaceId (..)
    , HasComputedOptionGroupName (..)
    , HasComputedOriginalRouteTableId (..)
    , HasComputedOutputs (..)
    , HasComputedOwner (..)
    , HasComputedOwnerAlias (..)
    , HasComputedOwnerId (..)
    , HasComputedParameter (..)
    , HasComputedParameters (..)
    , HasComputedPath (..)
    , HasComputedPemEncodedCertificate (..)
    , HasComputedPerformanceInsightsEnabled (..)
    , HasComputedPerformanceInsightsKmsKeyId (..)
    , HasComputedPermissions (..)
    , HasComputedPlatformTypes (..)
    , HasComputedPolicy (..)
    , HasComputedPolicyName (..)
    , HasComputedPolicyType (..)
    , HasComputedPolicyTypeName (..)
    , HasComputedPort (..)
    , HasComputedPreferredBackupWindow (..)
    , HasComputedPreferredMaintenanceWindow (..)
    , HasComputedPrefixListId (..)
    , HasComputedPrimaryEndpointAddress (..)
    , HasComputedPrivateIp (..)
    , HasComputedPrivateIpAddress (..)
    , HasComputedPrivateIps (..)
    , HasComputedPrivateKey (..)
    , HasComputedPublicIp (..)
    , HasComputedPublicKey (..)
    , HasComputedQualifiedArn (..)
    , HasComputedReaderEndpoint (..)
    , HasComputedRegion (..)
    , HasComputedRegistrationCount (..)
    , HasComputedRegistrationLimit (..)
    , HasComputedRegistryId (..)
    , HasComputedReplicationInstanceArn (..)
    , HasComputedReplicationInstancePrivateIps (..)
    , HasComputedReplicationInstancePublicIps (..)
    , HasComputedReplicationSourceIdentifier (..)
    , HasComputedReplicationTaskArn (..)
    , HasComputedRepository (..)
    , HasComputedRepositoryId (..)
    , HasComputedRepositoryUrl (..)
    , HasComputedResourceId (..)
    , HasComputedRole (..)
    , HasComputedRoles (..)
    , HasComputedRootResourceId (..)
    , HasComputedRouteTableId (..)
    , HasComputedRunningInstanceCount (..)
    , HasComputedS3Bucket (..)
    , HasComputedS3CanonicalUserId (..)
    , HasComputedSchemaVersion (..)
    , HasComputedSecret (..)
    , HasComputedSecurityGroupId (..)
    , HasComputedSecurityGroups (..)
    , HasComputedServiceRole (..)
    , HasComputedSesSmtpPassword (..)
    , HasComputedShardCount (..)
    , HasComputedSourceCodeHash (..)
    , HasComputedSourceDbSnapshotIdentifier (..)
    , HasComputedSourceDestCheck (..)
    , HasComputedSourceRegion (..)
    , HasComputedSshPublicKeyId (..)
    , HasComputedState (..)
    , HasComputedStateTransitionReason (..)
    , HasComputedStaticRoutesOnly (..)
    , HasComputedStatus (..)
    , HasComputedStatusReason (..)
    , HasComputedStorageEncrypted (..)
    , HasComputedStorageType (..)
    , HasComputedSubnetId (..)
    , HasComputedSupportCode (..)
    , HasComputedTags (..)
    , HasComputedTargetGroupArns (..)
    , HasComputedThrottleSettings (..)
    , HasComputedTunnel1Address (..)
    , HasComputedTunnel1BgpAsn (..)
    , HasComputedTunnel1BgpHoldtime (..)
    , HasComputedTunnel1CgwInsideAddress (..)
    , HasComputedTunnel1PresharedKey (..)
    , HasComputedTunnel1VgwInsideAddress (..)
    , HasComputedTunnel2Address (..)
    , HasComputedTunnel2BgpAsn (..)
    , HasComputedTunnel2BgpHoldtime (..)
    , HasComputedTunnel2CgwInsideAddress (..)
    , HasComputedTunnel2PresharedKey (..)
    , HasComputedTunnel2VgwInsideAddress (..)
    , HasComputedType' (..)
    , HasComputedUniqueId (..)
    , HasComputedUsagePlanId (..)
    , HasComputedUser (..)
    , HasComputedUsername (..)
    , HasComputedUsers (..)
    , HasComputedUuid (..)
    , HasComputedValidUntil (..)
    , HasComputedValue (..)
    , HasComputedVerificationToken (..)
    , HasComputedVersion (..)
    , HasComputedVersionId (..)
    , HasComputedVolumeId (..)
    , HasComputedVolumeSize (..)
    , HasComputedVpcId (..)
    , HasComputedVpcOptions0AvailabilityZones (..)
    , HasComputedVpcOptions0VpcId (..)
    , HasComputedVpcPeeringConnectionId (..)
    , HasComputedVpcRegion (..)
    , HasComputedVpcZoneIdentifier (..)
    , HasComputedVpnConnectionId (..)
    , HasComputedVpnGatewayId (..)
    , HasComputedWebsiteDomain (..)
    , HasComputedWebsiteEndpoint (..)
    , HasComputedWriter (..)
    , HasComputedZoneId (..)
    , HasCondition (..)
    , HasConfiguration (..)
    , HasConfigurationManagerName (..)
    , HasConfigurationManagerVersion (..)
    , HasConfigurationSetName (..)
    , HasConfigurations (..)
    , HasConfirmationTimeoutInMinutes (..)
    , HasConnectSettings (..)
    , HasConnectionDraining (..)
    , HasConnectionDrainingTimeout (..)
    , HasConnectionId (..)
    , HasConnectionsBandwidth (..)
    , HasContainer (..)
    , HasContainerDefinitions (..)
    , HasContainerProperties (..)
    , HasContent (..)
    , HasContentBasedDeduplication (..)
    , HasContentConfig (..)
    , HasContentConfigPermissions (..)
    , HasContentDisposition (..)
    , HasContentEncoding (..)
    , HasContentHandling (..)
    , HasContentLanguage (..)
    , HasContentType (..)
    , HasCookieExpirationPeriod (..)
    , HasCookieName (..)
    , HasCopyTagsToSnapshot (..)
    , HasCoreInstanceCount (..)
    , HasCoreInstanceType (..)
    , HasCorsRule (..)
    , HasCreationToken (..)
    , HasCredentials (..)
    , HasCrossZoneLoadBalancing (..)
    , HasCsr (..)
    , HasCustomCookbooksSource (..)
    , HasCustomData (..)
    , HasCustomErrorResponse (..)
    , HasCustomInstanceProfileArn (..)
    , HasCustomJson (..)
    , HasCustomSecurityGroupIds (..)
    , HasCustomerGatewayId (..)
    , HasCutoff (..)
    , HasDashboardBody (..)
    , HasDashboardName (..)
    , HasData' (..)
    , HasDataSourceArn (..)
    , HasDataSourceDatabaseName (..)
    , HasDataSourceType (..)
    , HasDatabase (..)
    , HasDatabaseName (..)
    , HasDatapointsToAlarm (..)
    , HasDbClusterParameterGroupName (..)
    , HasDbInstanceIdentifier (..)
    , HasDbParameterGroupName (..)
    , HasDbPassword (..)
    , HasDbSnapshotIdentifier (..)
    , HasDbSubnetGroupName (..)
    , HasDbUser (..)
    , HasDeadLetterConfig (..)
    , HasDefaultAction (..)
    , HasDefaultAvailabilityZone (..)
    , HasDefaultBranch (..)
    , HasDefaultCacheBehavior (..)
    , HasDefaultCooldown (..)
    , HasDefaultInstanceProfileArn (..)
    , HasDefaultNetworkAclId (..)
    , HasDefaultOs (..)
    , HasDefaultRedirectUri (..)
    , HasDefaultResult (..)
    , HasDefaultRootDeviceType (..)
    , HasDefaultRootObject (..)
    , HasDefaultRouteTableId (..)
    , HasDefaultSshKeyName (..)
    , HasDefaultSubnetId (..)
    , HasDefinition (..)
    , HasDelaySeconds (..)
    , HasDelegationSetId (..)
    , HasDeletionWindowInDays (..)
    , HasDeliveryPolicy (..)
    , HasDeploymentConfigName (..)
    , HasDeploymentGroupName (..)
    , HasDeploymentId (..)
    , HasDeploymentMaximumPercent (..)
    , HasDeploymentMinimumHealthyPercent (..)
    , HasDeploymentMode (..)
    , HasDeploymentStyle (..)
    , HasDeregistrationDelay (..)
    , HasDescription (..)
    , HasDesiredCapacity (..)
    , HasDesiredCount (..)
    , HasDestination (..)
    , HasDestinationArn (..)
    , HasDestinationCidrBlock (..)
    , HasDestinationIpv6CidrBlock (..)
    , HasDestinationName (..)
    , HasDetectorId (..)
    , HasDeveloperProviderName (..)
    , HasDeviceConfiguration (..)
    , HasDeviceIndex (..)
    , HasDeviceName (..)
    , HasDhcpOptionsId (..)
    , HasDimensions (..)
    , HasDisableApiTermination (..)
    , HasDisableRollback (..)
    , HasDisplayName (..)
    , HasDnsConfig (..)
    , HasDocumentRoot (..)
    , HasDocumentType (..)
    , HasDocumentVersion (..)
    , HasDocumentationVersion (..)
    , HasDomain (..)
    , HasDomainName (..)
    , HasDomainNameServers (..)
    , HasDomains (..)
    , HasDrainElbOnShutdown (..)
    , HasDuration (..)
    , HasEbsBlockDevice (..)
    , HasEbsConfig (..)
    , HasEbsOptimized (..)
    , HasEbsOptions (..)
    , HasEbsRootVolumeSize (..)
    , HasEbsVolume (..)
    , HasEc2Attributes (..)
    , HasEc2TagFilter (..)
    , HasEcsTarget (..)
    , HasEgress (..)
    , HasEgressOnlyGatewayId (..)
    , HasElasticIp (..)
    , HasElasticLoadBalancer (..)
    , HasElasticsearchVersion (..)
    , HasElb (..)
    , HasEmail (..)
    , HasEmailConfiguration (..)
    , HasEmailVerificationMessage (..)
    , HasEmailVerificationSubject (..)
    , HasEnable (..)
    , HasEnableClassiclink (..)
    , HasEnableClassiclinkDnsSupport (..)
    , HasEnableDeletionProtection (..)
    , HasEnableDnsHostnames (..)
    , HasEnableDnsSupport (..)
    , HasEnableKeyRotation (..)
    , HasEnableLogFileValidation (..)
    , HasEnableLogging (..)
    , HasEnableMonitoring (..)
    , HasEnableSni (..)
    , HasEnableSsl (..)
    , HasEnableSso (..)
    , HasEnabled (..)
    , HasEnabledMetrics (..)
    , HasEncoding (..)
    , HasEncrypted (..)
    , HasEncryptionKey (..)
    , HasEncryptionType (..)
    , HasEndTime (..)
    , HasEndpoint (..)
    , HasEndpointAutoConfirms (..)
    , HasEndpointId (..)
    , HasEndpointType (..)
    , HasEngine (..)
    , HasEngineName (..)
    , HasEngineType (..)
    , HasEngineVersion (..)
    , HasEnhancedVpcRouting (..)
    , HasEniId (..)
    , HasEnvironment (..)
    , HasEnvironmentId (..)
    , HasEphemeralBlockDevice (..)
    , HasEtag (..)
    , HasEvaluateLowSampleCountPercentiles (..)
    , HasEvaluationPeriods (..)
    , HasEventCategories (..)
    , HasEventPattern (..)
    , HasEventSourceArn (..)
    , HasEvents (..)
    , HasExcessCapacityTerminationPolicy (..)
    , HasExpirationDate (..)
    , HasExplicitAuthFlows (..)
    , HasExtendedS3Configuration (..)
    , HasExtendedStatistic (..)
    , HasExtraConnectionAttributes (..)
    , HasFailoverRoutingPolicy (..)
    , HasFailureThreshold (..)
    , HasFamily' (..)
    , HasFifoQueue (..)
    , HasFileSystemId (..)
    , HasFilename (..)
    , HasFilterPattern (..)
    , HasFinalSnapshotIdentifier (..)
    , HasForceDelete (..)
    , HasForceDestroy (..)
    , HasForceDetach (..)
    , HasFqdn (..)
    , HasFromPort (..)
    , HasFunctionName (..)
    , HasFunctionVersion (..)
    , HasGatewayId (..)
    , HasGenerateSecret (..)
    , HasGeolocationRoutingPolicy (..)
    , HasGlobalFilter (..)
    , HasGlobalSecondaryIndex (..)
    , HasGroup (..)
    , HasGroupNames (..)
    , HasGroups (..)
    , HasHandler (..)
    , HasHardExpiry (..)
    , HasHashKey (..)
    , HasHealthCheck (..)
    , HasHealthCheckConfig (..)
    , HasHealthCheckGracePeriod (..)
    , HasHealthCheckGracePeriodSeconds (..)
    , HasHealthCheckId (..)
    , HasHealthCheckType (..)
    , HasHealthcheckMethod (..)
    , HasHealthcheckUrl (..)
    , HasHeartbeatTimeout (..)
    , HasHostInstanceType (..)
    , HasHostname (..)
    , HasHostnameTheme (..)
    , HasHtml (..)
    , HasHttpMethod (..)
    , HasHttpVersion (..)
    , HasIamDatabaseAuthenticationEnabled (..)
    , HasIamFleetRole (..)
    , HasIamInstanceProfile (..)
    , HasIamRole (..)
    , HasIamRoleArn (..)
    , HasIamRoles (..)
    , HasIcmpCode (..)
    , HasIcmpType (..)
    , HasIdentifier (..)
    , HasIdentifierPrefix (..)
    , HasIdentityPoolId (..)
    , HasIdentityPoolName (..)
    , HasIdentitySource (..)
    , HasIdentityValidationExpression (..)
    , HasIdleTimeout (..)
    , HasImageId (..)
    , HasIncludeGlobalServiceEvents (..)
    , HasIngress (..)
    , HasInitialLifecycleHook (..)
    , HasInput (..)
    , HasInputBucket (..)
    , HasInputParameters (..)
    , HasInputPath (..)
    , HasInputTransformer (..)
    , HasInstallUpdatesOnBoot (..)
    , HasInstance' (..)
    , HasInstanceClass (..)
    , HasInstanceCount (..)
    , HasInstanceGroup (..)
    , HasInstanceId (..)
    , HasInstanceInitiatedShutdownBehavior (..)
    , HasInstanceInterruptionBehavior (..)
    , HasInstanceName (..)
    , HasInstancePort (..)
    , HasInstancePorts (..)
    , HasInstanceShutdownTimeout (..)
    , HasInstanceTenancy (..)
    , HasInstanceType (..)
    , HasInstances (..)
    , HasInsufficientDataActions (..)
    , HasInsufficientDataHealthStatus (..)
    , HasIntegrationHttpMethod (..)
    , HasInternal (..)
    , HasInvertHealthcheck (..)
    , HasIops (..)
    , HasIpAddress (..)
    , HasIpAddressType (..)
    , HasIpSetDescriptor (..)
    , HasIpSetDescriptors (..)
    , HasIpv6AddressCount (..)
    , HasIpv6Addresses (..)
    , HasIpv6CidrBlock (..)
    , HasIpv6CidrBlocks (..)
    , HasIsEnabled (..)
    , HasIsIpv6Enabled (..)
    , HasIsMultiRegionTrail (..)
    , HasJvmOptions (..)
    , HasJvmType (..)
    , HasJvmVersion (..)
    , HasKeepJobFlowAliveWhenNoSteps (..)
    , HasKey (..)
    , HasKeyId (..)
    , HasKeyName (..)
    , HasKeyNamePrefix (..)
    , HasKeyPairName (..)
    , HasKeyType (..)
    , HasKeyUsage (..)
    , HasKinesisDestination (..)
    , HasKinesisSourceConfiguration (..)
    , HasKmsDataKeyReusePeriodSeconds (..)
    , HasKmsKeyArn (..)
    , HasKmsKeyId (..)
    , HasKmsMasterKeyId (..)
    , HasLagId (..)
    , HasLambdaAction (..)
    , HasLambdaConfig (..)
    , HasLambdaFunction (..)
    , HasLatencyRoutingPolicy (..)
    , HasLaunchConfiguration (..)
    , HasLaunchGroup (..)
    , HasLaunchSpecification (..)
    , HasLaunchType (..)
    , HasLayerIds (..)
    , HasLbPort (..)
    , HasLevel (..)
    , HasLicenseModel (..)
    , HasLifecycleRule (..)
    , HasLifecycleTransition (..)
    , HasListener (..)
    , HasListenerArn (..)
    , HasLoadBalancer (..)
    , HasLoadBalancerArn (..)
    , HasLoadBalancerInfo (..)
    , HasLoadBalancerName (..)
    , HasLoadBalancerPort (..)
    , HasLoadBalancerType (..)
    , HasLoadBalancers (..)
    , HasLocalSecondaryIndex (..)
    , HasLocation (..)
    , HasLocationUri (..)
    , HasLogGroupName (..)
    , HasLogPublishingOptions (..)
    , HasLogUri (..)
    , HasLogging (..)
    , HasLoggingConfig (..)
    , HasLoggingInfo (..)
    , HasLogoutUrls (..)
    , HasMaintenanceWindow (..)
    , HasMaintenanceWindowStartTime (..)
    , HasMajorEngineVersion (..)
    , HasManageBerkshelf (..)
    , HasManageBundler (..)
    , HasMapPublicIpOnLaunch (..)
    , HasMasterInstanceType (..)
    , HasMasterPassword (..)
    , HasMasterUsername (..)
    , HasMatchingTypes (..)
    , HasMaxCapacity (..)
    , HasMaxConcurrency (..)
    , HasMaxErrors (..)
    , HasMaxMessageSize (..)
    , HasMaxPasswordAge (..)
    , HasMaxSize (..)
    , HasMaximumExecutionFrequency (..)
    , HasMeasureLatency (..)
    , HasMemorySize (..)
    , HasMessageRetentionSeconds (..)
    , HasMethodPath (..)
    , HasMetricName (..)
    , HasMetricTransformation (..)
    , HasMetricsGranularity (..)
    , HasMfaConfiguration (..)
    , HasMigrationType (..)
    , HasMinCapacity (..)
    , HasMinElbCapacity (..)
    , HasMinSize (..)
    , HasMinimumHealthyHosts (..)
    , HasMinimumPasswordLength (..)
    , HasMonitoring (..)
    , HasMonitoringInterval (..)
    , HasMonitoringRoleArn (..)
    , HasMultiAz (..)
    , HasMultivalueAnswerRoutingPolicy (..)
    , HasName (..)
    , HasNamePrefix (..)
    , HasNamespace (..)
    , HasNatGatewayId (..)
    , HasNetbiosNameServers (..)
    , HasNetbiosNodeType (..)
    , HasNetworkAclId (..)
    , HasNetworkConfiguration (..)
    , HasNetworkInterface (..)
    , HasNetworkInterfaceId (..)
    , HasNodeType (..)
    , HasNodejsVersion (..)
    , HasNotification (..)
    , HasNotificationArns (..)
    , HasNotificationMetadata (..)
    , HasNotificationTargetArn (..)
    , HasNotificationTopicArn (..)
    , HasNotifications (..)
    , HasNtpServers (..)
    , HasNumCacheNodes (..)
    , HasNumberCacheClusters (..)
    , HasNumberOfConnections (..)
    , HasNumberOfNodes (..)
    , HasOkActions (..)
    , HasOnFailure (..)
    , HasOnPremisesInstanceTagFilter (..)
    , HasOpenidConnectProviderArns (..)
    , HasOperatingSystem (..)
    , HasOption (..)
    , HasOptionGroupDescription (..)
    , HasOptionGroupName (..)
    , HasOrigin (..)
    , HasOs (..)
    , HasOutputBucket (..)
    , HasOutputLocation (..)
    , HasOverwrite (..)
    , HasOwnerAccount (..)
    , HasOwnerInformation (..)
    , HasParameter (..)
    , HasParameterGroupName (..)
    , HasParameters (..)
    , HasParentId (..)
    , HasPassengerVersion (..)
    , HasPassthroughBehavior (..)
    , HasPassword (..)
    , HasPasswordLength (..)
    , HasPasswordPolicy (..)
    , HasPasswordResetRequired (..)
    , HasPasswordReusePrevention (..)
    , HasPatchGroup (..)
    , HasPath (..)
    , HasPathPart (..)
    , HasPattern (..)
    , HasPeerOwnerId (..)
    , HasPeerRegion (..)
    , HasPeerVpcId (..)
    , HasPerformanceInsightsEnabled (..)
    , HasPerformanceInsightsKmsKeyId (..)
    , HasPerformanceMode (..)
    , HasPeriod (..)
    , HasPermissions (..)
    , HasPgpKey (..)
    , HasPlacementConstraints (..)
    , HasPlacementGroup (..)
    , HasPlacementStrategy (..)
    , HasPlacementTenancy (..)
    , HasPolicy (..)
    , HasPolicyArn (..)
    , HasPolicyAttribute (..)
    , HasPolicyBody (..)
    , HasPolicyDocument (..)
    , HasPolicyName (..)
    , HasPolicyNames (..)
    , HasPolicyType (..)
    , HasPolicyTypeName (..)
    , HasPolicyUrl (..)
    , HasPollInterval (..)
    , HasPort (..)
    , HasPredicates (..)
    , HasPreferredBackupWindow (..)
    , HasPreferredMaintenanceWindow (..)
    , HasPrefix (..)
    , HasPrefixListIds (..)
    , HasPriceClass (..)
    , HasPrincipal (..)
    , HasPriority (..)
    , HasPrivateIp (..)
    , HasPrivateIpAddress (..)
    , HasPrivateIps (..)
    , HasPrivateIpsCount (..)
    , HasPrivateKey (..)
    , HasProductCode (..)
    , HasPromotionTier (..)
    , HasPropagatingVgws (..)
    , HasProperties (..)
    , HasProtectFromScaleIn (..)
    , HasProtocol (..)
    , HasProviderName (..)
    , HasPublicIp (..)
    , HasPublicKey (..)
    , HasPubliclyAccessible (..)
    , HasPublish (..)
    , HasQualifier (..)
    , HasQuery (..)
    , HasQueue (..)
    , HasQueueUrl (..)
    , HasQuotaSettings (..)
    , HasRailsEnv (..)
    , HasRangeKey (..)
    , HasRateKey (..)
    , HasRateLimit (..)
    , HasRawMessageDelivery (..)
    , HasRdsDbInstanceArn (..)
    , HasReadAttributes (..)
    , HasReadCapacity (..)
    , HasReceiveWaitTimeSeconds (..)
    , HasRecipients (..)
    , HasRecordingGroup (..)
    , HasRecords (..)
    , HasRecurrence (..)
    , HasRedrivePolicy (..)
    , HasRedshiftConfiguration (..)
    , HasReferenceName (..)
    , HasRefreshTokenValidity (..)
    , HasRegion (..)
    , HasRegions (..)
    , HasRegistrationLimit (..)
    , HasRejectedPatches (..)
    , HasReleaseLabel (..)
    , HasReplaceUnhealthyInstances (..)
    , HasReplicateSourceDb (..)
    , HasReplicationConfiguration (..)
    , HasReplicationGroupDescription (..)
    , HasReplicationGroupId (..)
    , HasReplicationInstanceArn (..)
    , HasReplicationInstanceClass (..)
    , HasReplicationInstanceId (..)
    , HasReplicationSubnetGroupDescription (..)
    , HasReplicationSubnetGroupId (..)
    , HasReplicationTaskId (..)
    , HasReplicationTaskSettings (..)
    , HasRepository (..)
    , HasRepositoryName (..)
    , HasRequestInterval (..)
    , HasRequestModels (..)
    , HasRequestParameters (..)
    , HasRequestParametersInJson (..)
    , HasRequestPayer (..)
    , HasRequestTemplates (..)
    , HasRequestValidatorId (..)
    , HasRequester (..)
    , HasRequireLowercaseCharacters (..)
    , HasRequireNumbers (..)
    , HasRequireSymbols (..)
    , HasRequireUppercaseCharacters (..)
    , HasReservedConcurrentExecutions (..)
    , HasResourceGroupArn (..)
    , HasResourceId (..)
    , HasResourcePath (..)
    , HasResourceType (..)
    , HasResponseModels (..)
    , HasResponseParameters (..)
    , HasResponseParametersInJson (..)
    , HasResponseTemplates (..)
    , HasResponseType (..)
    , HasRestApiId (..)
    , HasRestrictions (..)
    , HasRetainOnDelete (..)
    , HasRetentionInDays (..)
    , HasRetentionPeriod (..)
    , HasRetryStrategy (..)
    , HasRevokeRulesOnDelete (..)
    , HasRole (..)
    , HasRoleArn (..)
    , HasRoleMapping (..)
    , HasRoles (..)
    , HasRootBlockDevice (..)
    , HasRootDeviceName (..)
    , HasRootDeviceType (..)
    , HasRootPassword (..)
    , HasRootPasswordOnAllInstances (..)
    , HasRoute (..)
    , HasRouteTableId (..)
    , HasRouteTableIds (..)
    , HasRubyVersion (..)
    , HasRubygemsVersion (..)
    , HasRule (..)
    , HasRuleAction (..)
    , HasRuleNumber (..)
    , HasRuleSetName (..)
    , HasRules (..)
    , HasRulesPackageArns (..)
    , HasRunCommandTargets (..)
    , HasRuntime (..)
    , HasS3Action (..)
    , HasS3Bucket (..)
    , HasS3BucketName (..)
    , HasS3Configuration (..)
    , HasS3Destination (..)
    , HasS3Key (..)
    , HasS3KeyPrefix (..)
    , HasS3ObjectVersion (..)
    , HasSamlMetadataDocument (..)
    , HasSamlProviderArns (..)
    , HasScalableDimension (..)
    , HasScalableTargetAction (..)
    , HasScanEnabled (..)
    , HasSchedule (..)
    , HasScheduleExpression (..)
    , HasScheduledActionName (..)
    , HasSchema (..)
    , HasScope (..)
    , HasSearchString (..)
    , HasSecurityConfiguration (..)
    , HasSecurityGroupId (..)
    , HasSecurityGroupIds (..)
    , HasSecurityGroupNames (..)
    , HasSecurityGroups (..)
    , HasSelectionPattern (..)
    , HasSelf (..)
    , HasServerName (..)
    , HasServerSideEncryption (..)
    , HasServerSideEncryptionConfiguration (..)
    , HasServiceAccessRole (..)
    , HasServiceName (..)
    , HasServiceNamespace (..)
    , HasServiceRole (..)
    , HasServiceRoleArn (..)
    , HasSetIdentifier (..)
    , HasSetting (..)
    , HasSettings (..)
    , HasShardCount (..)
    , HasShardLevelMetrics (..)
    , HasShortName (..)
    , HasSize (..)
    , HasSizeConstraints (..)
    , HasSkipDestroy (..)
    , HasSkipFinalSnapshot (..)
    , HasSmsAuthenticationMessage (..)
    , HasSmsConfiguration (..)
    , HasSmsVerificationMessage (..)
    , HasSnapshotArns (..)
    , HasSnapshotClusterIdentifier (..)
    , HasSnapshotCopy (..)
    , HasSnapshotDeliveryProperties (..)
    , HasSnapshotId (..)
    , HasSnapshotIdentifier (..)
    , HasSnapshotName (..)
    , HasSnapshotOptions (..)
    , HasSnapshotRetentionLimit (..)
    , HasSnapshotWindow (..)
    , HasSnapshotWithoutReboot (..)
    , HasSnsAction (..)
    , HasSnsDestination (..)
    , HasSnsTopic (..)
    , HasSnsTopicArn (..)
    , HasSnsTopicName (..)
    , HasSolutionStackName (..)
    , HasSource (..)
    , HasSourceAccount (..)
    , HasSourceAmiId (..)
    , HasSourceAmiRegion (..)
    , HasSourceArn (..)
    , HasSourceCodeHash (..)
    , HasSourceDestCheck (..)
    , HasSourceEndpointArn (..)
    , HasSourceIds (..)
    , HasSourceInstanceId (..)
    , HasSourceSecurityGroupId (..)
    , HasSourceType (..)
    , HasSpotPrice (..)
    , HasSpotType (..)
    , HasSqlInjectionMatchTuples (..)
    , HasSshKeyName (..)
    , HasSshPublicKey (..)
    , HasSshUsername (..)
    , HasSslConfiguration (..)
    , HasSslMode (..)
    , HasSslPolicy (..)
    , HasStackId (..)
    , HasStage (..)
    , HasStageDescription (..)
    , HasStageKey (..)
    , HasStageName (..)
    , HasStartTime (..)
    , HasStartingPosition (..)
    , HasState (..)
    , HasStatementId (..)
    , HasStaticIpName (..)
    , HasStaticRoutesOnly (..)
    , HasStatistic (..)
    , HasStatsEnabled (..)
    , HasStatsPassword (..)
    , HasStatsUrl (..)
    , HasStatsUser (..)
    , HasStatus (..)
    , HasStatusCode (..)
    , HasStepScalingPolicyConfiguration (..)
    , HasStickiness (..)
    , HasStopAction (..)
    , HasStorageClass (..)
    , HasStorageEncrypted (..)
    , HasStorageType (..)
    , HasStrategy (..)
    , HasStreamEnabled (..)
    , HasStreamViewType (..)
    , HasSubject (..)
    , HasSubnetGroupName (..)
    , HasSubnetId (..)
    , HasSubnetIds (..)
    , HasSubnetMapping (..)
    , HasSubnets (..)
    , HasSupportedIdentityProviders (..)
    , HasSupportedLoginProviders (..)
    , HasSuspendedProcesses (..)
    , HasSystemPackages (..)
    , HasTableMappings (..)
    , HasTag (..)
    , HasTags (..)
    , HasTargetArn (..)
    , HasTargetCapacity (..)
    , HasTargetEndpointArn (..)
    , HasTargetGroupArn (..)
    , HasTargetGroupArns (..)
    , HasTargetId (..)
    , HasTargetKeyId (..)
    , HasTargetTrackingScalingPolicyConfiguration (..)
    , HasTargetType (..)
    , HasTargets (..)
    , HasTaskArn (..)
    , HasTaskDefinition (..)
    , HasTaskParameters (..)
    , HasTaskType (..)
    , HasTemplateBody (..)
    , HasTemplateName (..)
    , HasTemplateUrl (..)
    , HasTenancy (..)
    , HasTerminateInstancesWithExpiration (..)
    , HasTerminationPolicies (..)
    , HasTerminationProtection (..)
    , HasText (..)
    , HasThreshold (..)
    , HasThrottleSettings (..)
    , HasThumbnailConfig (..)
    , HasThumbnailConfigPermissions (..)
    , HasThumbnails (..)
    , HasThumbprintList (..)
    , HasTier (..)
    , HasTimeout (..)
    , HasTimeoutInMinutes (..)
    , HasTimezone (..)
    , HasTlsPolicy (..)
    , HasToPort (..)
    , HasTopic (..)
    , HasTopicArn (..)
    , HasTrafficType (..)
    , HasTransitEncryptionEnabled (..)
    , HasTreatMissingData (..)
    , HasTriggerConfiguration (..)
    , HasTtl (..)
    , HasType' (..)
    , HasUnit (..)
    , HasUri (..)
    , HasUrl (..)
    , HasUsagePlanId (..)
    , HasUseCustomCookbooks (..)
    , HasUseEbsOptimizedInstances (..)
    , HasUseOpsworksSecurityGroups (..)
    , HasUser (..)
    , HasUserArn (..)
    , HasUserData (..)
    , HasUserDataBase64 (..)
    , HasUserPoolId (..)
    , HasUsername (..)
    , HasUsernameAttributes (..)
    , HasUsers (..)
    , HasValidUntil (..)
    , HasValue (..)
    , HasVariables (..)
    , HasVerificationMessageTemplate (..)
    , HasVersionLabel (..)
    , HasVersioning (..)
    , HasVideo (..)
    , HasVideoCodecOptions (..)
    , HasVideoWatermarks (..)
    , HasViewerCertificate (..)
    , HasVirtualizationType (..)
    , HasVisibilityTimeoutSeconds (..)
    , HasVisibleToAllUsers (..)
    , HasVolumeId (..)
    , HasVolumeTags (..)
    , HasVpc (..)
    , HasVpcClassicLinkId (..)
    , HasVpcClassicLinkSecurityGroups (..)
    , HasVpcConfig (..)
    , HasVpcEndpointId (..)
    , HasVpcId (..)
    , HasVpcOptions (..)
    , HasVpcPeeringConnectionId (..)
    , HasVpcRegion (..)
    , HasVpcSecurityGroupIds (..)
    , HasVpcSettings (..)
    , HasVpcZoneIdentifier (..)
    , HasVpnConnectionId (..)
    , HasVpnGatewayId (..)
    , HasWaitForCapacityTimeout (..)
    , HasWaitForElbCapacity (..)
    , HasWaitForFulfillment (..)
    , HasWaitForReadyTimeout (..)
    , HasWebAclId (..)
    , HasWebsite (..)
    , HasWebsiteRedirect (..)
    , HasWeightedRoutingPolicy (..)
    , HasWindowId (..)
    , HasWorkmailAction (..)
    , HasWriteAttributes (..)
    , HasWriteCapacity (..)
    , HasXssMatchTuples (..)
    , HasZoneId (..)
    ) where

import Data.Functor (Functor, (<$>))
import Data.Maybe   (catMaybes)
import Data.Text    (Text)

import GHC.Base (Eq, ($), (.))
import GHC.Show (Show)

import qualified Terrafomo.AWS.Provider    as TF
import qualified Terrafomo.AWS.Types       as TF
import qualified Terrafomo.Syntax.HCL      as TF
import qualified Terrafomo.Syntax.Meta     as TF (configuration)
import qualified Terrafomo.Syntax.Resource as TF
import qualified Terrafomo.Syntax.Resource as TF
import qualified Terrafomo.Syntax.Variable as TF

{- | The @sfn_activity@ AWS resource.

Provides a Step Function Activity resource
-}
data ActivityResource = ActivityResource {
      _name                   :: !(TF.Argument Text)
    {- ^ (Required) The name of the activity to create. -}
    , _computed_creation_date :: !(TF.Attribute Text)
    {- ^ - The date the activity was created. -}
    , _computed_id            :: !(TF.Attribute Text)
    {- ^ - The Amazon Resource Name (ARN) that identifies the created activity. -}
    , _computed_name          :: !(TF.Attribute Text)
    {- ^ - The name of the activity. -}
    } deriving (Show, Eq)

instance TF.ToHCL ActivityResource where
    toHCL ActivityResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.argument _name
        ]

instance HasName ActivityResource (TF.Argument Text) where
    name f s@ActivityResource{..} =
        (\a -> s { _name = a } :: ActivityResource)
             <$> f _name

instance HasComputedCreationDate ActivityResource (TF.Attribute Text) where
    computedCreationDate f s@ActivityResource{..} =
        (\a -> s { _computed_creation_date = a } :: ActivityResource)
             <$> f _computed_creation_date

instance HasComputedId ActivityResource (TF.Attribute Text) where
    computedId f s@ActivityResource{..} =
        (\a -> s { _computed_id = a } :: ActivityResource)
             <$> f _computed_id

instance HasComputedName ActivityResource (TF.Attribute Text) where
    computedName f s@ActivityResource{..} =
        (\a -> s { _computed_name = a } :: ActivityResource)
             <$> f _computed_name

activityResource :: TF.Resource TF.AWS ActivityResource
activityResource =
    TF.newResource "sfn_activity" $
        ActivityResource {
            _name = TF.Nil
            , _computed_creation_date = TF.Compute "creation_date"
            , _computed_id = TF.Compute "id"
            , _computed_name = TF.Compute "name"
            }

{- | The @aws_ami_copy@ AWS resource.

The "AMI copy" resource allows duplication of an Amazon Machine Image (AMI),
including cross-region copies. If the source AMI has associated EBS
snapshots, those will also be duplicated along with the AMI. This is useful
for taking a single AMI provisioned in one region and making it available in
another for a multi-region deployment. Copying an AMI can take several
minutes. The creation of this resource will block until the new AMI is
available for use on new instances.
-}
data AmiCopyResource = AmiCopyResource {
      _encrypted         :: !(TF.Argument Text)
    {- ^ (Optional) Specifies whether the destination snapshots of the copied image should be encrypted. Defaults to @false@ -}
    , _kms_key_id        :: !(TF.Argument Text)
    {- ^ (Optional) The full ARN of the KMS Key to use when encrypting the snapshots of an image during a copy operation. If not specified, then the default AWS KMS Key will be used -}
    , _name              :: !(TF.Argument Text)
    {- ^ (Required) A region-unique name for the AMI. -}
    , _source_ami_id     :: !(TF.Argument Text)
    {- ^ (Required) The id of the AMI to copy. This id must be valid in the region given by @source_ami_region@ . -}
    , _source_ami_region :: !(TF.Argument Text)
    {- ^ (Required) The region from which the AMI will be copied. This may be the same as the AWS provider region in order to create a copy within the same region. -}
    } deriving (Show, Eq)

instance TF.ToHCL AmiCopyResource where
    toHCL AmiCopyResource{..} = TF.block $ catMaybes
        [ TF.assign "encrypted" <$> TF.argument _encrypted
        , TF.assign "kms_key_id" <$> TF.argument _kms_key_id
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "source_ami_id" <$> TF.argument _source_ami_id
        , TF.assign "source_ami_region" <$> TF.argument _source_ami_region
        ]

instance HasEncrypted AmiCopyResource (TF.Argument Text) where
    encrypted f s@AmiCopyResource{..} =
        (\a -> s { _encrypted = a } :: AmiCopyResource)
             <$> f _encrypted

instance HasKmsKeyId AmiCopyResource (TF.Argument Text) where
    kmsKeyId f s@AmiCopyResource{..} =
        (\a -> s { _kms_key_id = a } :: AmiCopyResource)
             <$> f _kms_key_id

instance HasName AmiCopyResource (TF.Argument Text) where
    name f s@AmiCopyResource{..} =
        (\a -> s { _name = a } :: AmiCopyResource)
             <$> f _name

instance HasSourceAmiId AmiCopyResource (TF.Argument Text) where
    sourceAmiId f s@AmiCopyResource{..} =
        (\a -> s { _source_ami_id = a } :: AmiCopyResource)
             <$> f _source_ami_id

instance HasSourceAmiRegion AmiCopyResource (TF.Argument Text) where
    sourceAmiRegion f s@AmiCopyResource{..} =
        (\a -> s { _source_ami_region = a } :: AmiCopyResource)
             <$> f _source_ami_region

amiCopyResource :: TF.Resource TF.AWS AmiCopyResource
amiCopyResource =
    TF.newResource "aws_ami_copy" $
        AmiCopyResource {
            _encrypted = TF.Nil
            , _kms_key_id = TF.Nil
            , _name = TF.Nil
            , _source_ami_id = TF.Nil
            , _source_ami_region = TF.Nil
            }

{- | The @aws_ami_from_instance@ AWS resource.

The "AMI from instance" resource allows the creation of an Amazon Machine
Image (AMI) modelled after an existing EBS-backed EC2 instance. The created
AMI will refer to implicitly-created snapshots of the instance's EBS volumes
and mimick its assigned block device configuration at the time the resource
is created. This resource is best applied to an instance that is stopped
when this instance is created, so that the contents of the created image are
predictable. When applied to an instance that is running, the instance will
be stopped before taking the snapshots and then started back up again ,
resulting in a period of downtime. Note that the source instance is
inspected only at the initial creation of this resource. Ongoing updates to
the referenced instance will not be propagated into the generated AMI. Users
may taint or otherwise recreate the resource in order to produce a fresh
snapshot.
-}
data AmiFromInstanceResource = AmiFromInstanceResource {
      _name                    :: !(TF.Argument Text)
    {- ^ (Required) A region-unique name for the AMI. -}
    , _snapshot_without_reboot :: !(TF.Argument Text)
    {- ^ (Optional) Boolean that overrides the behavior of stopping the instance before snapshotting. This is risky since it may cause a snapshot of an inconsistent filesystem state, but can be used to avoid downtime if the user otherwise guarantees that no filesystem writes will be underway at the time of snapshot. -}
    , _source_instance_id      :: !(TF.Argument Text)
    {- ^ (Required) The id of the instance to use as the basis of the AMI. -}
    } deriving (Show, Eq)

instance TF.ToHCL AmiFromInstanceResource where
    toHCL AmiFromInstanceResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.argument _name
        , TF.assign "snapshot_without_reboot" <$> TF.argument _snapshot_without_reboot
        , TF.assign "source_instance_id" <$> TF.argument _source_instance_id
        ]

instance HasName AmiFromInstanceResource (TF.Argument Text) where
    name f s@AmiFromInstanceResource{..} =
        (\a -> s { _name = a } :: AmiFromInstanceResource)
             <$> f _name

instance HasSnapshotWithoutReboot AmiFromInstanceResource (TF.Argument Text) where
    snapshotWithoutReboot f s@AmiFromInstanceResource{..} =
        (\a -> s { _snapshot_without_reboot = a } :: AmiFromInstanceResource)
             <$> f _snapshot_without_reboot

instance HasSourceInstanceId AmiFromInstanceResource (TF.Argument Text) where
    sourceInstanceId f s@AmiFromInstanceResource{..} =
        (\a -> s { _source_instance_id = a } :: AmiFromInstanceResource)
             <$> f _source_instance_id

amiFromInstanceResource :: TF.Resource TF.AWS AmiFromInstanceResource
amiFromInstanceResource =
    TF.newResource "aws_ami_from_instance" $
        AmiFromInstanceResource {
            _name = TF.Nil
            , _snapshot_without_reboot = TF.Nil
            , _source_instance_id = TF.Nil
            }

{- | The @aws_ami_launch_permission@ AWS resource.

Adds launch permission to Amazon Machine Image (AMI) from another AWS
account.
-}
data AmiLaunchPermissionResource = AmiLaunchPermissionResource {
      _account_id  :: !(TF.Argument Text)
    {- ^ - (required) An AWS Account ID to add launch permissions. -}
    , _image_id    :: !(TF.Argument Text)
    {- ^ - (required) A region-unique name for the AMI. -}
    , _computed_id :: !(TF.Attribute Text)
    {- ^ - A combination of " @image_id@ - @account_id@ ". -}
    } deriving (Show, Eq)

instance TF.ToHCL AmiLaunchPermissionResource where
    toHCL AmiLaunchPermissionResource{..} = TF.block $ catMaybes
        [ TF.assign "account_id" <$> TF.argument _account_id
        , TF.assign "image_id" <$> TF.argument _image_id
        ]

instance HasAccountId AmiLaunchPermissionResource (TF.Argument Text) where
    accountId f s@AmiLaunchPermissionResource{..} =
        (\a -> s { _account_id = a } :: AmiLaunchPermissionResource)
             <$> f _account_id

instance HasImageId AmiLaunchPermissionResource (TF.Argument Text) where
    imageId f s@AmiLaunchPermissionResource{..} =
        (\a -> s { _image_id = a } :: AmiLaunchPermissionResource)
             <$> f _image_id

instance HasComputedId AmiLaunchPermissionResource (TF.Attribute Text) where
    computedId f s@AmiLaunchPermissionResource{..} =
        (\a -> s { _computed_id = a } :: AmiLaunchPermissionResource)
             <$> f _computed_id

amiLaunchPermissionResource :: TF.Resource TF.AWS AmiLaunchPermissionResource
amiLaunchPermissionResource =
    TF.newResource "aws_ami_launch_permission" $
        AmiLaunchPermissionResource {
            _account_id = TF.Nil
            , _image_id = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_ami@ AWS resource.

The AMI resource allows the creation and management of a completely-custom
Amazon Machine Image (AMI). If you just want to duplicate an existing AMI,
possibly copying it to another region, it's better to use @aws_ami_copy@
instead. If you just want to share an existing AMI with another AWS account,
it's better to use @aws_ami_launch_permission@ instead.
-}
data AmiResource = AmiResource {
      _architecture           :: !(TF.Argument Text)
    {- ^ (Optional) Machine architecture for created instances. Defaults to "x86_64". -}
    , _description            :: !(TF.Argument Text)
    {- ^ (Optional) A longer, human-readable description for the AMI. -}
    , _ebs_block_device       :: !(TF.Argument Text)
    {- ^ (Optional) Nested block describing an EBS block device that should be attached to created instances. The structure of this block is described below. -}
    , _ephemeral_block_device :: !(TF.Argument Text)
    {- ^ (Optional) Nested block describing an ephemeral block device that should be attached to created instances. The structure of this block is described below. -}
    , _name                   :: !(TF.Argument Text)
    {- ^ (Required) A region-unique name for the AMI. -}
    , _root_device_name       :: !(TF.Argument Text)
    {- ^ (Optional) The name of the root device (for example, @/dev/sda1@ , or @/dev/xvda@ ). -}
    , _virtualization_type    :: !(TF.Argument Text)
    {- ^ (Optional) Keyword to choose what virtualization mode created instances will use. Can be either "paravirtual" (the default) or "hvm". The choice of virtualization type changes the set of further arguments that are required, as described below. -}
    } deriving (Show, Eq)

instance TF.ToHCL AmiResource where
    toHCL AmiResource{..} = TF.block $ catMaybes
        [ TF.assign "architecture" <$> TF.argument _architecture
        , TF.assign "description" <$> TF.argument _description
        , TF.assign "ebs_block_device" <$> TF.argument _ebs_block_device
        , TF.assign "ephemeral_block_device" <$> TF.argument _ephemeral_block_device
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "root_device_name" <$> TF.argument _root_device_name
        , TF.assign "virtualization_type" <$> TF.argument _virtualization_type
        ]

instance HasArchitecture AmiResource (TF.Argument Text) where
    architecture f s@AmiResource{..} =
        (\a -> s { _architecture = a } :: AmiResource)
             <$> f _architecture

instance HasDescription AmiResource (TF.Argument Text) where
    description f s@AmiResource{..} =
        (\a -> s { _description = a } :: AmiResource)
             <$> f _description

instance HasEbsBlockDevice AmiResource (TF.Argument Text) where
    ebsBlockDevice f s@AmiResource{..} =
        (\a -> s { _ebs_block_device = a } :: AmiResource)
             <$> f _ebs_block_device

instance HasEphemeralBlockDevice AmiResource (TF.Argument Text) where
    ephemeralBlockDevice f s@AmiResource{..} =
        (\a -> s { _ephemeral_block_device = a } :: AmiResource)
             <$> f _ephemeral_block_device

instance HasName AmiResource (TF.Argument Text) where
    name f s@AmiResource{..} =
        (\a -> s { _name = a } :: AmiResource)
             <$> f _name

instance HasRootDeviceName AmiResource (TF.Argument Text) where
    rootDeviceName f s@AmiResource{..} =
        (\a -> s { _root_device_name = a } :: AmiResource)
             <$> f _root_device_name

instance HasVirtualizationType AmiResource (TF.Argument Text) where
    virtualizationType f s@AmiResource{..} =
        (\a -> s { _virtualization_type = a } :: AmiResource)
             <$> f _virtualization_type

amiResource :: TF.Resource TF.AWS AmiResource
amiResource =
    TF.newResource "aws_ami" $
        AmiResource {
            _architecture = TF.Nil
            , _description = TF.Nil
            , _ebs_block_device = TF.Nil
            , _ephemeral_block_device = TF.Nil
            , _name = TF.Nil
            , _root_device_name = TF.Nil
            , _virtualization_type = TF.Nil
            }

{- | The @aws_api_gateway_account@ AWS resource.

Provides a settings of an API Gateway Account. Settings is applied
region-wide per @provider@ block. -> Note: As there is no API method for
deleting account settings or resetting it to defaults, destroying this
resource will keep your account settings intact
-}
data ApiGatewayAccountResource = ApiGatewayAccountResource {
      _cloudwatch_role_arn        :: !(TF.Argument Text)
    {- ^ (Optional) The ARN of an IAM role for CloudWatch (to allow logging & monitoring). See more <https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-stage-settings.html#how-to-stage-settings-console> . Logging & monitoring can be enabled/disabled and otherwise tuned on the API Gateway Stage level. -}
    , _computed_throttle_settings :: !(TF.Attribute Text)
    {- ^ - Account-Level throttle settings. See exported fields below. -}
    } deriving (Show, Eq)

instance TF.ToHCL ApiGatewayAccountResource where
    toHCL ApiGatewayAccountResource{..} = TF.block $ catMaybes
        [ TF.assign "cloudwatch_role_arn" <$> TF.argument _cloudwatch_role_arn
        ]

instance HasCloudwatchRoleArn ApiGatewayAccountResource (TF.Argument Text) where
    cloudwatchRoleArn f s@ApiGatewayAccountResource{..} =
        (\a -> s { _cloudwatch_role_arn = a } :: ApiGatewayAccountResource)
             <$> f _cloudwatch_role_arn

instance HasComputedThrottleSettings ApiGatewayAccountResource (TF.Attribute Text) where
    computedThrottleSettings f s@ApiGatewayAccountResource{..} =
        (\a -> s { _computed_throttle_settings = a } :: ApiGatewayAccountResource)
             <$> f _computed_throttle_settings

apiGatewayAccountResource :: TF.Resource TF.AWS ApiGatewayAccountResource
apiGatewayAccountResource =
    TF.newResource "aws_api_gateway_account" $
        ApiGatewayAccountResource {
            _cloudwatch_role_arn = TF.Nil
            , _computed_throttle_settings = TF.Compute "throttle_settings"
            }

{- | The @aws_api_gateway_api_key@ AWS resource.

Provides an API Gateway API Key. ~> Warning: Since the API Gateway usage
plans feature was launched on August 11, 2016, usage plans are now required
to associate an API key with an API stage.
-}
data ApiGatewayApiKeyResource = ApiGatewayApiKeyResource {
      _description                :: !(TF.Argument Text)
    {- ^ (Optional) The API key description. Defaults to "Managed by Terraform". -}
    , _enabled                    :: !(TF.Argument TF.Bool)
    {- ^ (Optional) Specifies whether the API key can be used by callers. Defaults to @true@ . -}
    , _name                       :: !(TF.Argument Text)
    {- ^ (Required) The name of the API key -}
    , _stage_key                  :: !(TF.Argument Text)
    {- ^ (Optional) A list of stage keys associated with the API key - see below -}
    , _value                      :: !(TF.Argument Text)
    {- ^ (Optional) The value of the API key. If not specified, it will be automatically generated by AWS on creation. -}
    , _computed_created_date      :: !(TF.Attribute Text)
    {- ^ - The creation date of the API key -}
    , _computed_id                :: !(TF.Attribute Text)
    {- ^ - The ID of the API key -}
    , _computed_last_updated_date :: !(TF.Attribute Text)
    {- ^ - The last update date of the API key -}
    , _computed_value             :: !(TF.Attribute Text)
    {- ^ - The value of the API key -}
    } deriving (Show, Eq)

instance TF.ToHCL ApiGatewayApiKeyResource where
    toHCL ApiGatewayApiKeyResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.argument _description
        , TF.assign "enabled" <$> TF.argument _enabled
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "stage_key" <$> TF.argument _stage_key
        , TF.assign "value" <$> TF.argument _value
        ]

instance HasDescription ApiGatewayApiKeyResource (TF.Argument Text) where
    description f s@ApiGatewayApiKeyResource{..} =
        (\a -> s { _description = a } :: ApiGatewayApiKeyResource)
             <$> f _description

instance HasEnabled ApiGatewayApiKeyResource (TF.Argument TF.Bool) where
    enabled f s@ApiGatewayApiKeyResource{..} =
        (\a -> s { _enabled = a } :: ApiGatewayApiKeyResource)
             <$> f _enabled

instance HasName ApiGatewayApiKeyResource (TF.Argument Text) where
    name f s@ApiGatewayApiKeyResource{..} =
        (\a -> s { _name = a } :: ApiGatewayApiKeyResource)
             <$> f _name

instance HasStageKey ApiGatewayApiKeyResource (TF.Argument Text) where
    stageKey f s@ApiGatewayApiKeyResource{..} =
        (\a -> s { _stage_key = a } :: ApiGatewayApiKeyResource)
             <$> f _stage_key

instance HasValue ApiGatewayApiKeyResource (TF.Argument Text) where
    value f s@ApiGatewayApiKeyResource{..} =
        (\a -> s { _value = a } :: ApiGatewayApiKeyResource)
             <$> f _value

instance HasComputedCreatedDate ApiGatewayApiKeyResource (TF.Attribute Text) where
    computedCreatedDate f s@ApiGatewayApiKeyResource{..} =
        (\a -> s { _computed_created_date = a } :: ApiGatewayApiKeyResource)
             <$> f _computed_created_date

instance HasComputedId ApiGatewayApiKeyResource (TF.Attribute Text) where
    computedId f s@ApiGatewayApiKeyResource{..} =
        (\a -> s { _computed_id = a } :: ApiGatewayApiKeyResource)
             <$> f _computed_id

instance HasComputedLastUpdatedDate ApiGatewayApiKeyResource (TF.Attribute Text) where
    computedLastUpdatedDate f s@ApiGatewayApiKeyResource{..} =
        (\a -> s { _computed_last_updated_date = a } :: ApiGatewayApiKeyResource)
             <$> f _computed_last_updated_date

instance HasComputedValue ApiGatewayApiKeyResource (TF.Attribute Text) where
    computedValue f s@ApiGatewayApiKeyResource{..} =
        (\a -> s { _computed_value = a } :: ApiGatewayApiKeyResource)
             <$> f _computed_value

apiGatewayApiKeyResource :: TF.Resource TF.AWS ApiGatewayApiKeyResource
apiGatewayApiKeyResource =
    TF.newResource "aws_api_gateway_api_key" $
        ApiGatewayApiKeyResource {
            _description = TF.Nil
            , _enabled = TF.Nil
            , _name = TF.Nil
            , _stage_key = TF.Nil
            , _value = TF.Nil
            , _computed_created_date = TF.Compute "created_date"
            , _computed_id = TF.Compute "id"
            , _computed_last_updated_date = TF.Compute "last_updated_date"
            , _computed_value = TF.Compute "value"
            }

{- | The @aws_api_gateway_authorizer@ AWS resource.

Provides an API Gateway Authorizer.
-}
data ApiGatewayAuthorizerResource = ApiGatewayAuthorizerResource {
      _authorizer_credentials           :: !(TF.Argument Text)
    {- ^ (Optional) The credentials required for the authorizer. To specify an IAM Role for API Gateway to assume, use the IAM Role ARN. -}
    , _authorizer_result_ttl_in_seconds :: !(TF.Argument Text)
    {- ^ (Optional) The TTL of cached authorizer results in seconds. Defaults to @300@ . -}
    , _authorizer_uri                   :: !(TF.Argument Text)
    {- ^ (Required) The authorizer's Uniform Resource Identifier (URI). For @TOKEN@ type, this must be a well-formed Lambda function URI in the form of @arn:aws:apigateway:{region}:lambda:path/{service_api}@ . e.g. @arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:012345678912:function:my-function/invocations@ -}
    , _identity_source                  :: !(TF.Argument Text)
    {- ^ (Optional) The source of the identity in an incoming request. Defaults to @method.request.header.Authorization@ . For @REQUEST@ type, this may be a comma-separated list of values, including headers, query string parameters and stage variables - e.g. @"method.request.header.SomeHeaderName,method.request.querystring.SomeQueryStringName,stageVariables.SomeStageVariableName"@ -}
    , _identity_validation_expression   :: !(TF.Argument Text)
    {- ^ (Optional) A validation expression for the incoming identity. For @TOKEN@ type, this value should be a regular expression. The incoming token from the client is matched against this expression, and will proceed if the token matches. If the token doesn't match, the client receives a 401 Unauthorized response. -}
    , _name                             :: !(TF.Argument Text)
    {- ^ (Required) The name of the authorizer -}
    , _rest_api_id                      :: !(TF.Argument Text)
    {- ^ (Required) The ID of the associated REST API -}
    , _type'                            :: !(TF.Argument Text)
    {- ^ (Optional) The type of the authorizer. Possible values are @TOKEN@ and @REQUEST@ . Defaults to @TOKEN@ . -}
    } deriving (Show, Eq)

instance TF.ToHCL ApiGatewayAuthorizerResource where
    toHCL ApiGatewayAuthorizerResource{..} = TF.block $ catMaybes
        [ TF.assign "authorizer_credentials" <$> TF.argument _authorizer_credentials
        , TF.assign "authorizer_result_ttl_in_seconds" <$> TF.argument _authorizer_result_ttl_in_seconds
        , TF.assign "authorizer_uri" <$> TF.argument _authorizer_uri
        , TF.assign "identity_source" <$> TF.argument _identity_source
        , TF.assign "identity_validation_expression" <$> TF.argument _identity_validation_expression
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "rest_api_id" <$> TF.argument _rest_api_id
        , TF.assign "type" <$> TF.argument _type'
        ]

instance HasAuthorizerCredentials ApiGatewayAuthorizerResource (TF.Argument Text) where
    authorizerCredentials f s@ApiGatewayAuthorizerResource{..} =
        (\a -> s { _authorizer_credentials = a } :: ApiGatewayAuthorizerResource)
             <$> f _authorizer_credentials

instance HasAuthorizerResultTtlInSeconds ApiGatewayAuthorizerResource (TF.Argument Text) where
    authorizerResultTtlInSeconds f s@ApiGatewayAuthorizerResource{..} =
        (\a -> s { _authorizer_result_ttl_in_seconds = a } :: ApiGatewayAuthorizerResource)
             <$> f _authorizer_result_ttl_in_seconds

instance HasAuthorizerUri ApiGatewayAuthorizerResource (TF.Argument Text) where
    authorizerUri f s@ApiGatewayAuthorizerResource{..} =
        (\a -> s { _authorizer_uri = a } :: ApiGatewayAuthorizerResource)
             <$> f _authorizer_uri

instance HasIdentitySource ApiGatewayAuthorizerResource (TF.Argument Text) where
    identitySource f s@ApiGatewayAuthorizerResource{..} =
        (\a -> s { _identity_source = a } :: ApiGatewayAuthorizerResource)
             <$> f _identity_source

instance HasIdentityValidationExpression ApiGatewayAuthorizerResource (TF.Argument Text) where
    identityValidationExpression f s@ApiGatewayAuthorizerResource{..} =
        (\a -> s { _identity_validation_expression = a } :: ApiGatewayAuthorizerResource)
             <$> f _identity_validation_expression

instance HasName ApiGatewayAuthorizerResource (TF.Argument Text) where
    name f s@ApiGatewayAuthorizerResource{..} =
        (\a -> s { _name = a } :: ApiGatewayAuthorizerResource)
             <$> f _name

instance HasRestApiId ApiGatewayAuthorizerResource (TF.Argument Text) where
    restApiId f s@ApiGatewayAuthorizerResource{..} =
        (\a -> s { _rest_api_id = a } :: ApiGatewayAuthorizerResource)
             <$> f _rest_api_id

instance HasType' ApiGatewayAuthorizerResource (TF.Argument Text) where
    type' f s@ApiGatewayAuthorizerResource{..} =
        (\a -> s { _type' = a } :: ApiGatewayAuthorizerResource)
             <$> f _type'

apiGatewayAuthorizerResource :: TF.Resource TF.AWS ApiGatewayAuthorizerResource
apiGatewayAuthorizerResource =
    TF.newResource "aws_api_gateway_authorizer" $
        ApiGatewayAuthorizerResource {
            _authorizer_credentials = TF.Nil
            , _authorizer_result_ttl_in_seconds = TF.Nil
            , _authorizer_uri = TF.Nil
            , _identity_source = TF.Nil
            , _identity_validation_expression = TF.Nil
            , _name = TF.Nil
            , _rest_api_id = TF.Nil
            , _type' = TF.Nil
            }

{- | The @aws_api_gateway_base_path_mapping@ AWS resource.

Connects a custom domain name registered via @aws_api_gateway_domain_name@
with a deployed API so that its methods can be called via the custom domain
name.
-}
data ApiGatewayBasePathMappingResource = ApiGatewayBasePathMappingResource {
      _api_id      :: !(TF.Argument Text)
    {- ^ (Required) The id of the API to connect. -}
    , _base_path   :: !(TF.Argument Text)
    {- ^ (Optional) Path segment that must be prepended to the path when accessing the API via this mapping. If omitted, the API is exposed at the root of the given domain. -}
    , _domain_name :: !(TF.Argument Text)
    {- ^ (Required) The already-registered domain name to connect the API to. -}
    , _stage_name  :: !(TF.Argument Text)
    {- ^ (Optional) The name of a specific deployment stage to expose at the given path. If omitted, callers may select any stage by including its name as a path element after the base path. -}
    } deriving (Show, Eq)

instance TF.ToHCL ApiGatewayBasePathMappingResource where
    toHCL ApiGatewayBasePathMappingResource{..} = TF.block $ catMaybes
        [ TF.assign "api_id" <$> TF.argument _api_id
        , TF.assign "base_path" <$> TF.argument _base_path
        , TF.assign "domain_name" <$> TF.argument _domain_name
        , TF.assign "stage_name" <$> TF.argument _stage_name
        ]

instance HasApiId ApiGatewayBasePathMappingResource (TF.Argument Text) where
    apiId f s@ApiGatewayBasePathMappingResource{..} =
        (\a -> s { _api_id = a } :: ApiGatewayBasePathMappingResource)
             <$> f _api_id

instance HasBasePath ApiGatewayBasePathMappingResource (TF.Argument Text) where
    basePath f s@ApiGatewayBasePathMappingResource{..} =
        (\a -> s { _base_path = a } :: ApiGatewayBasePathMappingResource)
             <$> f _base_path

instance HasDomainName ApiGatewayBasePathMappingResource (TF.Argument Text) where
    domainName f s@ApiGatewayBasePathMappingResource{..} =
        (\a -> s { _domain_name = a } :: ApiGatewayBasePathMappingResource)
             <$> f _domain_name

instance HasStageName ApiGatewayBasePathMappingResource (TF.Argument Text) where
    stageName f s@ApiGatewayBasePathMappingResource{..} =
        (\a -> s { _stage_name = a } :: ApiGatewayBasePathMappingResource)
             <$> f _stage_name

apiGatewayBasePathMappingResource :: TF.Resource TF.AWS ApiGatewayBasePathMappingResource
apiGatewayBasePathMappingResource =
    TF.newResource "aws_api_gateway_base_path_mapping" $
        ApiGatewayBasePathMappingResource {
            _api_id = TF.Nil
            , _base_path = TF.Nil
            , _domain_name = TF.Nil
            , _stage_name = TF.Nil
            }

{- | The @aws_api_gateway_client_certificate@ AWS resource.

Provides an API Gateway Client Certificate.
-}
data ApiGatewayClientCertificateResource = ApiGatewayClientCertificateResource {
      _description                      :: !(TF.Argument Text)
    {- ^ (Optional) The description of the client certificate. -}
    , _computed_created_date            :: !(TF.Attribute Text)
    {- ^ - The date when the client certificate was created. -}
    , _computed_expiration_date         :: !(TF.Attribute Text)
    {- ^ - The date when the client certificate will expire. -}
    , _computed_id                      :: !(TF.Attribute Text)
    {- ^ - The identifier of the client certificate. -}
    , _computed_pem_encoded_certificate :: !(TF.Attribute Text)
    {- ^ - The PEM-encoded public key of the client certificate. -}
    } deriving (Show, Eq)

instance TF.ToHCL ApiGatewayClientCertificateResource where
    toHCL ApiGatewayClientCertificateResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.argument _description
        ]

instance HasDescription ApiGatewayClientCertificateResource (TF.Argument Text) where
    description f s@ApiGatewayClientCertificateResource{..} =
        (\a -> s { _description = a } :: ApiGatewayClientCertificateResource)
             <$> f _description

instance HasComputedCreatedDate ApiGatewayClientCertificateResource (TF.Attribute Text) where
    computedCreatedDate f s@ApiGatewayClientCertificateResource{..} =
        (\a -> s { _computed_created_date = a } :: ApiGatewayClientCertificateResource)
             <$> f _computed_created_date

instance HasComputedExpirationDate ApiGatewayClientCertificateResource (TF.Attribute Text) where
    computedExpirationDate f s@ApiGatewayClientCertificateResource{..} =
        (\a -> s { _computed_expiration_date = a } :: ApiGatewayClientCertificateResource)
             <$> f _computed_expiration_date

instance HasComputedId ApiGatewayClientCertificateResource (TF.Attribute Text) where
    computedId f s@ApiGatewayClientCertificateResource{..} =
        (\a -> s { _computed_id = a } :: ApiGatewayClientCertificateResource)
             <$> f _computed_id

instance HasComputedPemEncodedCertificate ApiGatewayClientCertificateResource (TF.Attribute Text) where
    computedPemEncodedCertificate f s@ApiGatewayClientCertificateResource{..} =
        (\a -> s { _computed_pem_encoded_certificate = a } :: ApiGatewayClientCertificateResource)
             <$> f _computed_pem_encoded_certificate

apiGatewayClientCertificateResource :: TF.Resource TF.AWS ApiGatewayClientCertificateResource
apiGatewayClientCertificateResource =
    TF.newResource "aws_api_gateway_client_certificate" $
        ApiGatewayClientCertificateResource {
            _description = TF.Nil
            , _computed_created_date = TF.Compute "created_date"
            , _computed_expiration_date = TF.Compute "expiration_date"
            , _computed_id = TF.Compute "id"
            , _computed_pem_encoded_certificate = TF.Compute "pem_encoded_certificate"
            }

{- | The @aws_api_gateway_deployment@ AWS resource.

Provides an API Gateway Deployment. -> Note: Depends on having
@aws_api_gateway_integration@ inside your rest api (which in turn depends on
@aws_api_gateway_method@ ). To avoid race conditions you might need to add
an explicit @depends_on = ["aws_api_gateway_integration.name"]@ .
-}
data ApiGatewayDeploymentResource = ApiGatewayDeploymentResource {
      _description            :: !(TF.Argument Text)
    {- ^ (Optional) The description of the deployment -}
    , _rest_api_id            :: !(TF.Argument Text)
    {- ^ (Required) The ID of the associated REST API -}
    , _stage_description      :: !(TF.Argument Text)
    {- ^ (Optional) The description of the stage -}
    , _stage_name             :: !(TF.Argument Text)
    {- ^ (Required) The name of the stage -}
    , _variables              :: !(TF.Argument Text)
    {- ^ (Optional) A map that defines variables for the stage -}
    , _computed_created_date  :: !(TF.Attribute Text)
    {- ^ - The creation date of the deployment -}
    , _computed_execution_arn :: !(TF.Attribute Text)
    {- ^ - The execution ARN to be used in </docs/providers/aws/r/lambda_permission.html> 's @source_arn@ when allowing API Gateway to invoke a Lambda function, e.g. @arn:aws:execute-api:eu-west-2:123456789012:z4675bid1j/prod@ -}
    , _computed_id            :: !(TF.Attribute Text)
    {- ^ - The ID of the deployment -}
    , _computed_invoke_url    :: !(TF.Attribute Text)
    {- ^ - The URL to invoke the API pointing to the stage, e.g. @https://z4675bid1j.execute-api.eu-west-2.amazonaws.com/prod@ -}
    } deriving (Show, Eq)

instance TF.ToHCL ApiGatewayDeploymentResource where
    toHCL ApiGatewayDeploymentResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.argument _description
        , TF.assign "rest_api_id" <$> TF.argument _rest_api_id
        , TF.assign "stage_description" <$> TF.argument _stage_description
        , TF.assign "stage_name" <$> TF.argument _stage_name
        , TF.assign "variables" <$> TF.argument _variables
        ]

instance HasDescription ApiGatewayDeploymentResource (TF.Argument Text) where
    description f s@ApiGatewayDeploymentResource{..} =
        (\a -> s { _description = a } :: ApiGatewayDeploymentResource)
             <$> f _description

instance HasRestApiId ApiGatewayDeploymentResource (TF.Argument Text) where
    restApiId f s@ApiGatewayDeploymentResource{..} =
        (\a -> s { _rest_api_id = a } :: ApiGatewayDeploymentResource)
             <$> f _rest_api_id

instance HasStageDescription ApiGatewayDeploymentResource (TF.Argument Text) where
    stageDescription f s@ApiGatewayDeploymentResource{..} =
        (\a -> s { _stage_description = a } :: ApiGatewayDeploymentResource)
             <$> f _stage_description

instance HasStageName ApiGatewayDeploymentResource (TF.Argument Text) where
    stageName f s@ApiGatewayDeploymentResource{..} =
        (\a -> s { _stage_name = a } :: ApiGatewayDeploymentResource)
             <$> f _stage_name

instance HasVariables ApiGatewayDeploymentResource (TF.Argument Text) where
    variables f s@ApiGatewayDeploymentResource{..} =
        (\a -> s { _variables = a } :: ApiGatewayDeploymentResource)
             <$> f _variables

instance HasComputedCreatedDate ApiGatewayDeploymentResource (TF.Attribute Text) where
    computedCreatedDate f s@ApiGatewayDeploymentResource{..} =
        (\a -> s { _computed_created_date = a } :: ApiGatewayDeploymentResource)
             <$> f _computed_created_date

instance HasComputedExecutionArn ApiGatewayDeploymentResource (TF.Attribute Text) where
    computedExecutionArn f s@ApiGatewayDeploymentResource{..} =
        (\a -> s { _computed_execution_arn = a } :: ApiGatewayDeploymentResource)
             <$> f _computed_execution_arn

instance HasComputedId ApiGatewayDeploymentResource (TF.Attribute Text) where
    computedId f s@ApiGatewayDeploymentResource{..} =
        (\a -> s { _computed_id = a } :: ApiGatewayDeploymentResource)
             <$> f _computed_id

instance HasComputedInvokeUrl ApiGatewayDeploymentResource (TF.Attribute Text) where
    computedInvokeUrl f s@ApiGatewayDeploymentResource{..} =
        (\a -> s { _computed_invoke_url = a } :: ApiGatewayDeploymentResource)
             <$> f _computed_invoke_url

apiGatewayDeploymentResource :: TF.Resource TF.AWS ApiGatewayDeploymentResource
apiGatewayDeploymentResource =
    TF.newResource "aws_api_gateway_deployment" $
        ApiGatewayDeploymentResource {
            _description = TF.Nil
            , _rest_api_id = TF.Nil
            , _stage_description = TF.Nil
            , _stage_name = TF.Nil
            , _variables = TF.Nil
            , _computed_created_date = TF.Compute "created_date"
            , _computed_execution_arn = TF.Compute "execution_arn"
            , _computed_id = TF.Compute "id"
            , _computed_invoke_url = TF.Compute "invoke_url"
            }

{- | The @aws_api_gateway_documentation_part@ AWS resource.

Provides a settings of an API Gateway Documentation Part.
-}
data ApiGatewayDocumentationPartResource = ApiGatewayDocumentationPartResource {
      _location    :: !(TF.Argument Text)
    {- ^ (Required) The location of the targeted API entity of the to-be-created documentation part. See below. -}
    , _properties  :: !(TF.Argument Text)
    {- ^ (Required) A content map of API-specific key-value pairs describing the targeted API entity. The map must be encoded as a JSON string, e.g., "{ "description": "The API does ..." }". Only Swagger-compliant key-value pairs can be exported and, hence, published. -}
    , _rest_api_id :: !(TF.Argument Text)
    {- ^ (Required) The ID of the associated Rest API -}
    } deriving (Show, Eq)

instance TF.ToHCL ApiGatewayDocumentationPartResource where
    toHCL ApiGatewayDocumentationPartResource{..} = TF.block $ catMaybes
        [ TF.assign "location" <$> TF.argument _location
        , TF.assign "properties" <$> TF.argument _properties
        , TF.assign "rest_api_id" <$> TF.argument _rest_api_id
        ]

instance HasLocation ApiGatewayDocumentationPartResource (TF.Argument Text) where
    location f s@ApiGatewayDocumentationPartResource{..} =
        (\a -> s { _location = a } :: ApiGatewayDocumentationPartResource)
             <$> f _location

instance HasProperties ApiGatewayDocumentationPartResource (TF.Argument Text) where
    properties f s@ApiGatewayDocumentationPartResource{..} =
        (\a -> s { _properties = a } :: ApiGatewayDocumentationPartResource)
             <$> f _properties

instance HasRestApiId ApiGatewayDocumentationPartResource (TF.Argument Text) where
    restApiId f s@ApiGatewayDocumentationPartResource{..} =
        (\a -> s { _rest_api_id = a } :: ApiGatewayDocumentationPartResource)
             <$> f _rest_api_id

apiGatewayDocumentationPartResource :: TF.Resource TF.AWS ApiGatewayDocumentationPartResource
apiGatewayDocumentationPartResource =
    TF.newResource "aws_api_gateway_documentation_part" $
        ApiGatewayDocumentationPartResource {
            _location = TF.Nil
            , _properties = TF.Nil
            , _rest_api_id = TF.Nil
            }

{- | The @aws_api_gateway_domain_name@ AWS resource.

Registers a custom domain name for use with AWS API Gateway. This resource
just establishes ownership of and the TLS settings for a particular domain
name. An API can be attached to a particular path under the registered
domain name using <api_gateway_base_path_mapping.html> . Internally API
Gateway creates a CloudFront distribution to route requests on the given
hostname. In addition to this resource it's necessary to create a DNS record
corresponding to the given domain name which is an alias (either Route53
alias or traditional CNAME) to the Cloudfront domain name exported in the
@cloudfront_domain_name@ attribute. ~> Note: All arguments including the
private key will be stored in the raw state as plain-text.
</docs/state/sensitive-data.html> .
-}
data ApiGatewayDomainNameResource = ApiGatewayDomainNameResource {
      _certificate_arn                  :: !(TF.Argument Text)
    {- ^ (Optional) The ARN for an AWS-managed certificate. Conflicts with @certificate_name@ , @certificate_body@ , @certificate_chain@ and @certificate_private_key@ . -}
    , _certificate_body                 :: !(TF.Argument Text)
    {- ^ (Optional) The certificate issued for the domain name being registered, in PEM format. Conflicts with @certificate_arn@ . -}
    , _certificate_chain                :: !(TF.Argument Text)
    {- ^ (Optional) The certificate for the CA that issued the certificate, along with any intermediate CA certificates required to create an unbroken chain to a certificate trusted by the intended API clients. Conflicts with @certificate_arn@ . -}
    , _certificate_name                 :: !(TF.Argument Text)
    {- ^ (Optional) The unique name to use when registering this cert as an IAM server certificate. Conflicts with @certificate_arn@ . Required if @certificate_arn@ is not set. -}
    , _certificate_private_key          :: !(TF.Argument Text)
    {- ^ (Optional) The private key associated with the domain certificate given in @certificate_body@ . Conflicts with @certificate_arn@ . -}
    , _domain_name                      :: !(TF.Argument Text)
    {- ^ (Required) The fully-qualified domain name to register -}
    , _computed_certificate_upload_date :: !(TF.Attribute Text)
    {- ^ - The upload date associated with the domain certificate. -}
    , _computed_cloudfront_domain_name  :: !(TF.Attribute Text)
    {- ^ - The hostname created by Cloudfront to represent the distribution that implements this domain name mapping. -}
    , _computed_cloudfront_zone_id      :: !(TF.Attribute Text)
    {- ^ - For convenience, the hosted zone id ( @Z2FDTNDATAQYW2@ ) that can be used to create a Route53 alias record for the distribution. -}
    , _computed_id                      :: !(TF.Attribute Text)
    {- ^ - The internal id assigned to this domain name by API Gateway. -}
    } deriving (Show, Eq)

instance TF.ToHCL ApiGatewayDomainNameResource where
    toHCL ApiGatewayDomainNameResource{..} = TF.block $ catMaybes
        [ TF.assign "certificate_arn" <$> TF.argument _certificate_arn
        , TF.assign "certificate_body" <$> TF.argument _certificate_body
        , TF.assign "certificate_chain" <$> TF.argument _certificate_chain
        , TF.assign "certificate_name" <$> TF.argument _certificate_name
        , TF.assign "certificate_private_key" <$> TF.argument _certificate_private_key
        , TF.assign "domain_name" <$> TF.argument _domain_name
        ]

instance HasCertificateArn ApiGatewayDomainNameResource (TF.Argument Text) where
    certificateArn f s@ApiGatewayDomainNameResource{..} =
        (\a -> s { _certificate_arn = a } :: ApiGatewayDomainNameResource)
             <$> f _certificate_arn

instance HasCertificateBody ApiGatewayDomainNameResource (TF.Argument Text) where
    certificateBody f s@ApiGatewayDomainNameResource{..} =
        (\a -> s { _certificate_body = a } :: ApiGatewayDomainNameResource)
             <$> f _certificate_body

instance HasCertificateChain ApiGatewayDomainNameResource (TF.Argument Text) where
    certificateChain f s@ApiGatewayDomainNameResource{..} =
        (\a -> s { _certificate_chain = a } :: ApiGatewayDomainNameResource)
             <$> f _certificate_chain

instance HasCertificateName ApiGatewayDomainNameResource (TF.Argument Text) where
    certificateName f s@ApiGatewayDomainNameResource{..} =
        (\a -> s { _certificate_name = a } :: ApiGatewayDomainNameResource)
             <$> f _certificate_name

instance HasCertificatePrivateKey ApiGatewayDomainNameResource (TF.Argument Text) where
    certificatePrivateKey f s@ApiGatewayDomainNameResource{..} =
        (\a -> s { _certificate_private_key = a } :: ApiGatewayDomainNameResource)
             <$> f _certificate_private_key

instance HasDomainName ApiGatewayDomainNameResource (TF.Argument Text) where
    domainName f s@ApiGatewayDomainNameResource{..} =
        (\a -> s { _domain_name = a } :: ApiGatewayDomainNameResource)
             <$> f _domain_name

instance HasComputedCertificateUploadDate ApiGatewayDomainNameResource (TF.Attribute Text) where
    computedCertificateUploadDate f s@ApiGatewayDomainNameResource{..} =
        (\a -> s { _computed_certificate_upload_date = a } :: ApiGatewayDomainNameResource)
             <$> f _computed_certificate_upload_date

instance HasComputedCloudfrontDomainName ApiGatewayDomainNameResource (TF.Attribute Text) where
    computedCloudfrontDomainName f s@ApiGatewayDomainNameResource{..} =
        (\a -> s { _computed_cloudfront_domain_name = a } :: ApiGatewayDomainNameResource)
             <$> f _computed_cloudfront_domain_name

instance HasComputedCloudfrontZoneId ApiGatewayDomainNameResource (TF.Attribute Text) where
    computedCloudfrontZoneId f s@ApiGatewayDomainNameResource{..} =
        (\a -> s { _computed_cloudfront_zone_id = a } :: ApiGatewayDomainNameResource)
             <$> f _computed_cloudfront_zone_id

instance HasComputedId ApiGatewayDomainNameResource (TF.Attribute Text) where
    computedId f s@ApiGatewayDomainNameResource{..} =
        (\a -> s { _computed_id = a } :: ApiGatewayDomainNameResource)
             <$> f _computed_id

apiGatewayDomainNameResource :: TF.Resource TF.AWS ApiGatewayDomainNameResource
apiGatewayDomainNameResource =
    TF.newResource "aws_api_gateway_domain_name" $
        ApiGatewayDomainNameResource {
            _certificate_arn = TF.Nil
            , _certificate_body = TF.Nil
            , _certificate_chain = TF.Nil
            , _certificate_name = TF.Nil
            , _certificate_private_key = TF.Nil
            , _domain_name = TF.Nil
            , _computed_certificate_upload_date = TF.Compute "certificate_upload_date"
            , _computed_cloudfront_domain_name = TF.Compute "cloudfront_domain_name"
            , _computed_cloudfront_zone_id = TF.Compute "cloudfront_zone_id"
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_api_gateway_gateway_response@ AWS resource.

Provides an API Gateway Gateway Response for a REST API Gateway.
-}
data ApiGatewayGatewayResponseResource = ApiGatewayGatewayResponseResource {
      _response_parameters :: !(TF.Argument Text)
    {- ^ (Optional) A map specifying the templates used to transform the response body. -}
    , _response_templates  :: !(TF.Argument Text)
    {- ^ (Optional) A map specifying the parameters (paths, query strings and headers) of the Gateway Response. -}
    , _response_type       :: !(TF.Argument Text)
    {- ^ (Required) The response type of the associated GatewayResponse. -}
    , _rest_api_id         :: !(TF.Argument Text)
    {- ^ (Required) The string identifier of the associated REST API. -}
    , _status_code         :: !(TF.Argument Text)
    {- ^ (Optional) The HTTP status code of the Gateway Response. -}
    } deriving (Show, Eq)

instance TF.ToHCL ApiGatewayGatewayResponseResource where
    toHCL ApiGatewayGatewayResponseResource{..} = TF.block $ catMaybes
        [ TF.assign "response_parameters" <$> TF.argument _response_parameters
        , TF.assign "response_templates" <$> TF.argument _response_templates
        , TF.assign "response_type" <$> TF.argument _response_type
        , TF.assign "rest_api_id" <$> TF.argument _rest_api_id
        , TF.assign "status_code" <$> TF.argument _status_code
        ]

instance HasResponseParameters ApiGatewayGatewayResponseResource (TF.Argument Text) where
    responseParameters f s@ApiGatewayGatewayResponseResource{..} =
        (\a -> s { _response_parameters = a } :: ApiGatewayGatewayResponseResource)
             <$> f _response_parameters

instance HasResponseTemplates ApiGatewayGatewayResponseResource (TF.Argument Text) where
    responseTemplates f s@ApiGatewayGatewayResponseResource{..} =
        (\a -> s { _response_templates = a } :: ApiGatewayGatewayResponseResource)
             <$> f _response_templates

instance HasResponseType ApiGatewayGatewayResponseResource (TF.Argument Text) where
    responseType f s@ApiGatewayGatewayResponseResource{..} =
        (\a -> s { _response_type = a } :: ApiGatewayGatewayResponseResource)
             <$> f _response_type

instance HasRestApiId ApiGatewayGatewayResponseResource (TF.Argument Text) where
    restApiId f s@ApiGatewayGatewayResponseResource{..} =
        (\a -> s { _rest_api_id = a } :: ApiGatewayGatewayResponseResource)
             <$> f _rest_api_id

instance HasStatusCode ApiGatewayGatewayResponseResource (TF.Argument Text) where
    statusCode f s@ApiGatewayGatewayResponseResource{..} =
        (\a -> s { _status_code = a } :: ApiGatewayGatewayResponseResource)
             <$> f _status_code

apiGatewayGatewayResponseResource :: TF.Resource TF.AWS ApiGatewayGatewayResponseResource
apiGatewayGatewayResponseResource =
    TF.newResource "aws_api_gateway_gateway_response" $
        ApiGatewayGatewayResponseResource {
            _response_parameters = TF.Nil
            , _response_templates = TF.Nil
            , _response_type = TF.Nil
            , _rest_api_id = TF.Nil
            , _status_code = TF.Nil
            }

{- | The @aws_api_gateway_integration@ AWS resource.

Provides an HTTP Method Integration for an API Gateway Integration.
-}
data ApiGatewayIntegrationResource = ApiGatewayIntegrationResource {
      _cache_key_namespace        :: !(TF.Argument Text)
    {- ^ (Optional) The integration's cache namespace. -}
    , _cache_key_parameters       :: !(TF.Argument Text)
    {- ^ (Optional) A list of cache key parameters for the integration. -}
    , _content_handling           :: !(TF.Argument Text)
    {- ^ (Optional) Specifies how to handle request payload content type conversions. Supported values are @CONVERT_TO_BINARY@ and @CONVERT_TO_TEXT@ . If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the passthroughBehaviors is configured to support payload pass-through. -}
    , _credentials                :: !(TF.Argument Text)
    {- ^ (Optional) The credentials required for the integration. For @AWS@ integrations, 2 options are available. To specify an IAM Role for Amazon API Gateway to assume, use the role's ARN. To require that the caller's identity be passed through from the request, specify the string @arn:aws:iam::\*:user/\*@ . -}
    , _http_method                :: !(TF.Argument Text)
    {- ^ (Required) The HTTP method ( @GET@ , @POST@ , @PUT@ , @DELETE@ , @HEAD@ , @OPTION@ , @ANY@ ) when calling the associated resource. -}
    , _integration_http_method    :: !(TF.Argument Text)
    {- ^ (Optional) The integration HTTP method ( @GET@ , @POST@ , @PUT@ , @DELETE@ , @HEAD@ , @OPTION@ ) specifying how API Gateway will interact with the back end. Required if @type@ is @AWS@ , @AWS_PROXY@ , @HTTP@ or @HTTP_PROXY@ . Not all methods are compatible with all @AWS@ integrations. e.g. Lambda function <https://github.com/awslabs/aws-apigateway-importer/issues/9#issuecomment-129651005> via @POST@ . -}
    , _passthrough_behavior       :: !(TF.Argument Text)
    {- ^ (Optional) The integration passthrough behavior ( @WHEN_NO_MATCH@ , @WHEN_NO_TEMPLATES@ , @NEVER@ ). Required if @request_templates@ is used. -}
    , _request_parameters         :: !(TF.Argument Text)
    {- ^ (Optional) A map of request query string parameters and headers that should be passed to the backend responder. For example: @request_parameters = { "integration.request.header.X-Some-Other-Header" = "method.request.header.X-Some-Header" }@ -}
    , _request_parameters_in_json :: !(TF.Argument Text)
    {- ^ - Deprecated , use @request_parameters@ instead. -}
    , _request_templates          :: !(TF.Argument Text)
    {- ^ (Optional) A map of the integration's request templates. -}
    , _resource_id                :: !(TF.Argument Text)
    {- ^ (Required) The API resource ID. -}
    , _rest_api_id                :: !(TF.Argument Text)
    {- ^ (Required) The ID of the associated REST API. -}
    , _type'                      :: !(TF.Argument Text)
    {- ^ (Required) The integration input's <https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/> . Valid values are @HTTP@ (for HTTP backends), @MOCK@ (not calling any real backend), @AWS@ (for AWS services), @AWS_PROXY@ (for Lambda proxy integration) and @HTTP_PROXY@ (for HTTP proxy integration). -}
    , _uri                        :: !(TF.Argument Text)
    {- ^ (Optional) The input's URI (HTTP, AWS). Required if @type@ is @HTTP@ or @AWS@ . For HTTP integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification . For AWS integrations, the URI should be of the form @arn:aws:apigateway:{region}:{subdomain.service|service}:{path|action}/{service_api}@ . @region@ , @subdomain@ and @service@ are used to determine the right endpoint. e.g. @arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:012345678901:function:my-func/invocations@ -}
    } deriving (Show, Eq)

instance TF.ToHCL ApiGatewayIntegrationResource where
    toHCL ApiGatewayIntegrationResource{..} = TF.block $ catMaybes
        [ TF.assign "cache_key_namespace" <$> TF.argument _cache_key_namespace
        , TF.assign "cache_key_parameters" <$> TF.argument _cache_key_parameters
        , TF.assign "content_handling" <$> TF.argument _content_handling
        , TF.assign "credentials" <$> TF.argument _credentials
        , TF.assign "http_method" <$> TF.argument _http_method
        , TF.assign "integration_http_method" <$> TF.argument _integration_http_method
        , TF.assign "passthrough_behavior" <$> TF.argument _passthrough_behavior
        , TF.assign "request_parameters" <$> TF.argument _request_parameters
        , TF.assign "request_parameters_in_json" <$> TF.argument _request_parameters_in_json
        , TF.assign "request_templates" <$> TF.argument _request_templates
        , TF.assign "resource_id" <$> TF.argument _resource_id
        , TF.assign "rest_api_id" <$> TF.argument _rest_api_id
        , TF.assign "type" <$> TF.argument _type'
        , TF.assign "uri" <$> TF.argument _uri
        ]

instance HasCacheKeyNamespace ApiGatewayIntegrationResource (TF.Argument Text) where
    cacheKeyNamespace f s@ApiGatewayIntegrationResource{..} =
        (\a -> s { _cache_key_namespace = a } :: ApiGatewayIntegrationResource)
             <$> f _cache_key_namespace

instance HasCacheKeyParameters ApiGatewayIntegrationResource (TF.Argument Text) where
    cacheKeyParameters f s@ApiGatewayIntegrationResource{..} =
        (\a -> s { _cache_key_parameters = a } :: ApiGatewayIntegrationResource)
             <$> f _cache_key_parameters

instance HasContentHandling ApiGatewayIntegrationResource (TF.Argument Text) where
    contentHandling f s@ApiGatewayIntegrationResource{..} =
        (\a -> s { _content_handling = a } :: ApiGatewayIntegrationResource)
             <$> f _content_handling

instance HasCredentials ApiGatewayIntegrationResource (TF.Argument Text) where
    credentials f s@ApiGatewayIntegrationResource{..} =
        (\a -> s { _credentials = a } :: ApiGatewayIntegrationResource)
             <$> f _credentials

instance HasHttpMethod ApiGatewayIntegrationResource (TF.Argument Text) where
    httpMethod f s@ApiGatewayIntegrationResource{..} =
        (\a -> s { _http_method = a } :: ApiGatewayIntegrationResource)
             <$> f _http_method

instance HasIntegrationHttpMethod ApiGatewayIntegrationResource (TF.Argument Text) where
    integrationHttpMethod f s@ApiGatewayIntegrationResource{..} =
        (\a -> s { _integration_http_method = a } :: ApiGatewayIntegrationResource)
             <$> f _integration_http_method

instance HasPassthroughBehavior ApiGatewayIntegrationResource (TF.Argument Text) where
    passthroughBehavior f s@ApiGatewayIntegrationResource{..} =
        (\a -> s { _passthrough_behavior = a } :: ApiGatewayIntegrationResource)
             <$> f _passthrough_behavior

instance HasRequestParameters ApiGatewayIntegrationResource (TF.Argument Text) where
    requestParameters f s@ApiGatewayIntegrationResource{..} =
        (\a -> s { _request_parameters = a } :: ApiGatewayIntegrationResource)
             <$> f _request_parameters

instance HasRequestParametersInJson ApiGatewayIntegrationResource (TF.Argument Text) where
    requestParametersInJson f s@ApiGatewayIntegrationResource{..} =
        (\a -> s { _request_parameters_in_json = a } :: ApiGatewayIntegrationResource)
             <$> f _request_parameters_in_json

instance HasRequestTemplates ApiGatewayIntegrationResource (TF.Argument Text) where
    requestTemplates f s@ApiGatewayIntegrationResource{..} =
        (\a -> s { _request_templates = a } :: ApiGatewayIntegrationResource)
             <$> f _request_templates

instance HasResourceId ApiGatewayIntegrationResource (TF.Argument Text) where
    resourceId f s@ApiGatewayIntegrationResource{..} =
        (\a -> s { _resource_id = a } :: ApiGatewayIntegrationResource)
             <$> f _resource_id

instance HasRestApiId ApiGatewayIntegrationResource (TF.Argument Text) where
    restApiId f s@ApiGatewayIntegrationResource{..} =
        (\a -> s { _rest_api_id = a } :: ApiGatewayIntegrationResource)
             <$> f _rest_api_id

instance HasType' ApiGatewayIntegrationResource (TF.Argument Text) where
    type' f s@ApiGatewayIntegrationResource{..} =
        (\a -> s { _type' = a } :: ApiGatewayIntegrationResource)
             <$> f _type'

instance HasUri ApiGatewayIntegrationResource (TF.Argument Text) where
    uri f s@ApiGatewayIntegrationResource{..} =
        (\a -> s { _uri = a } :: ApiGatewayIntegrationResource)
             <$> f _uri

apiGatewayIntegrationResource :: TF.Resource TF.AWS ApiGatewayIntegrationResource
apiGatewayIntegrationResource =
    TF.newResource "aws_api_gateway_integration" $
        ApiGatewayIntegrationResource {
            _cache_key_namespace = TF.Nil
            , _cache_key_parameters = TF.Nil
            , _content_handling = TF.Nil
            , _credentials = TF.Nil
            , _http_method = TF.Nil
            , _integration_http_method = TF.Nil
            , _passthrough_behavior = TF.Nil
            , _request_parameters = TF.Nil
            , _request_parameters_in_json = TF.Nil
            , _request_templates = TF.Nil
            , _resource_id = TF.Nil
            , _rest_api_id = TF.Nil
            , _type' = TF.Nil
            , _uri = TF.Nil
            }

{- | The @aws_api_gateway_integration_response@ AWS resource.

Provides an HTTP Method Integration Response for an API Gateway Resource. ->
Note: Depends on having @aws_api_gateway_integration@ inside your rest api.
To ensure this you might need to add an explicit @depends_on@ for clean
runs.
-}
data ApiGatewayIntegrationResponseResource = ApiGatewayIntegrationResponseResource {
      _content_handling            :: !(TF.Argument Text)
    {- ^ (Optional) Specifies how to handle request payload content type conversions. Supported values are @CONVERT_TO_BINARY@ and @CONVERT_TO_TEXT@ . If this property is not defined, the response payload will be passed through from the integration response to the method response without modification. -}
    , _http_method                 :: !(TF.Argument Text)
    {- ^ (Required) The HTTP method ( @GET@ , @POST@ , @PUT@ , @DELETE@ , @HEAD@ , @OPTIONS@ , @ANY@ ) -}
    , _resource_id                 :: !(TF.Argument Text)
    {- ^ (Required) The API resource ID -}
    , _response_parameters         :: !(TF.Argument Text)
    {- ^ (Optional) A map of response parameters that can be read from the backend response. For example: @response_parameters = { "method.response.header.X-Some-Header" = "integration.response.header.X-Some-Other-Header" }@ , -}
    , _response_parameters_in_json :: !(TF.Argument Text)
    {- ^ - Deprecated , use @response_parameters@ instead. -}
    , _response_templates          :: !(TF.Argument Text)
    {- ^ (Optional) A map specifying the templates used to transform the integration response body -}
    , _rest_api_id                 :: !(TF.Argument Text)
    {- ^ (Required) The ID of the associated REST API -}
    , _selection_pattern           :: !(TF.Argument Text)
    {- ^ (Optional) Specifies the regular expression pattern used to choose an integration response based on the response from the backend. Setting this to @-@ makes the integration the default one. If the backend is an @AWS@ Lambda function, the AWS Lambda function error header is matched. For all other @HTTP@ and @AWS@ backends, the HTTP status code is matched. -}
    , _status_code                 :: !(TF.Argument Text)
    {- ^ (Required) The HTTP status code -}
    } deriving (Show, Eq)

instance TF.ToHCL ApiGatewayIntegrationResponseResource where
    toHCL ApiGatewayIntegrationResponseResource{..} = TF.block $ catMaybes
        [ TF.assign "content_handling" <$> TF.argument _content_handling
        , TF.assign "http_method" <$> TF.argument _http_method
        , TF.assign "resource_id" <$> TF.argument _resource_id
        , TF.assign "response_parameters" <$> TF.argument _response_parameters
        , TF.assign "response_parameters_in_json" <$> TF.argument _response_parameters_in_json
        , TF.assign "response_templates" <$> TF.argument _response_templates
        , TF.assign "rest_api_id" <$> TF.argument _rest_api_id
        , TF.assign "selection_pattern" <$> TF.argument _selection_pattern
        , TF.assign "status_code" <$> TF.argument _status_code
        ]

instance HasContentHandling ApiGatewayIntegrationResponseResource (TF.Argument Text) where
    contentHandling f s@ApiGatewayIntegrationResponseResource{..} =
        (\a -> s { _content_handling = a } :: ApiGatewayIntegrationResponseResource)
             <$> f _content_handling

instance HasHttpMethod ApiGatewayIntegrationResponseResource (TF.Argument Text) where
    httpMethod f s@ApiGatewayIntegrationResponseResource{..} =
        (\a -> s { _http_method = a } :: ApiGatewayIntegrationResponseResource)
             <$> f _http_method

instance HasResourceId ApiGatewayIntegrationResponseResource (TF.Argument Text) where
    resourceId f s@ApiGatewayIntegrationResponseResource{..} =
        (\a -> s { _resource_id = a } :: ApiGatewayIntegrationResponseResource)
             <$> f _resource_id

instance HasResponseParameters ApiGatewayIntegrationResponseResource (TF.Argument Text) where
    responseParameters f s@ApiGatewayIntegrationResponseResource{..} =
        (\a -> s { _response_parameters = a } :: ApiGatewayIntegrationResponseResource)
             <$> f _response_parameters

instance HasResponseParametersInJson ApiGatewayIntegrationResponseResource (TF.Argument Text) where
    responseParametersInJson f s@ApiGatewayIntegrationResponseResource{..} =
        (\a -> s { _response_parameters_in_json = a } :: ApiGatewayIntegrationResponseResource)
             <$> f _response_parameters_in_json

instance HasResponseTemplates ApiGatewayIntegrationResponseResource (TF.Argument Text) where
    responseTemplates f s@ApiGatewayIntegrationResponseResource{..} =
        (\a -> s { _response_templates = a } :: ApiGatewayIntegrationResponseResource)
             <$> f _response_templates

instance HasRestApiId ApiGatewayIntegrationResponseResource (TF.Argument Text) where
    restApiId f s@ApiGatewayIntegrationResponseResource{..} =
        (\a -> s { _rest_api_id = a } :: ApiGatewayIntegrationResponseResource)
             <$> f _rest_api_id

instance HasSelectionPattern ApiGatewayIntegrationResponseResource (TF.Argument Text) where
    selectionPattern f s@ApiGatewayIntegrationResponseResource{..} =
        (\a -> s { _selection_pattern = a } :: ApiGatewayIntegrationResponseResource)
             <$> f _selection_pattern

instance HasStatusCode ApiGatewayIntegrationResponseResource (TF.Argument Text) where
    statusCode f s@ApiGatewayIntegrationResponseResource{..} =
        (\a -> s { _status_code = a } :: ApiGatewayIntegrationResponseResource)
             <$> f _status_code

apiGatewayIntegrationResponseResource :: TF.Resource TF.AWS ApiGatewayIntegrationResponseResource
apiGatewayIntegrationResponseResource =
    TF.newResource "aws_api_gateway_integration_response" $
        ApiGatewayIntegrationResponseResource {
            _content_handling = TF.Nil
            , _http_method = TF.Nil
            , _resource_id = TF.Nil
            , _response_parameters = TF.Nil
            , _response_parameters_in_json = TF.Nil
            , _response_templates = TF.Nil
            , _rest_api_id = TF.Nil
            , _selection_pattern = TF.Nil
            , _status_code = TF.Nil
            }

{- | The @aws_api_gateway_method@ AWS resource.

Provides a HTTP Method for an API Gateway Resource.
-}
data ApiGatewayMethodResource = ApiGatewayMethodResource {
      _api_key_required     :: !(TF.Argument Text)
    {- ^ (Optional) Specify if the method requires an API key -}
    , _authorization        :: !(TF.Argument Text)
    {- ^ (Required) The type of authorization used for the method ( @NONE@ , @CUSTOM@ , @AWS_IAM@ ) -}
    , _authorizer_id        :: !(TF.Argument Text)
    {- ^ (Optional) The authorizer id to be used when the authorization is @CUSTOM@ -}
    , _http_method          :: !(TF.Argument Text)
    {- ^ (Required) The HTTP Method ( @GET@ , @POST@ , @PUT@ , @DELETE@ , @HEAD@ , @OPTIONS@ , @ANY@ ) -}
    , _request_models       :: !(TF.Argument Text)
    {- ^ (Optional) A map of the API models used for the request's content type where key is the content type (e.g. @application/json@ ) and value is either @Error@ , @Empty@ (built-in models) or @aws_api_gateway_model@ 's @name@ . -}
    , _request_parameters   :: !(TF.Argument Text)
    {- ^ (Optional) A map of request query string parameters and headers that should be passed to the integration. For example: -}
    , _request_validator_id :: !(TF.Argument Text)
    {- ^ (Optional) The ID of a @aws_api_gateway_request_validator@ -}
    , _resource_id          :: !(TF.Argument Text)
    {- ^ (Required) The API resource ID -}
    , _rest_api_id          :: !(TF.Argument Text)
    {- ^ (Required) The ID of the associated REST API -}
    } deriving (Show, Eq)

instance TF.ToHCL ApiGatewayMethodResource where
    toHCL ApiGatewayMethodResource{..} = TF.block $ catMaybes
        [ TF.assign "api_key_required" <$> TF.argument _api_key_required
        , TF.assign "authorization" <$> TF.argument _authorization
        , TF.assign "authorizer_id" <$> TF.argument _authorizer_id
        , TF.assign "http_method" <$> TF.argument _http_method
        , TF.assign "request_models" <$> TF.argument _request_models
        , TF.assign "request_parameters" <$> TF.argument _request_parameters
        , TF.assign "request_validator_id" <$> TF.argument _request_validator_id
        , TF.assign "resource_id" <$> TF.argument _resource_id
        , TF.assign "rest_api_id" <$> TF.argument _rest_api_id
        ]

instance HasApiKeyRequired ApiGatewayMethodResource (TF.Argument Text) where
    apiKeyRequired f s@ApiGatewayMethodResource{..} =
        (\a -> s { _api_key_required = a } :: ApiGatewayMethodResource)
             <$> f _api_key_required

instance HasAuthorization ApiGatewayMethodResource (TF.Argument Text) where
    authorization f s@ApiGatewayMethodResource{..} =
        (\a -> s { _authorization = a } :: ApiGatewayMethodResource)
             <$> f _authorization

instance HasAuthorizerId ApiGatewayMethodResource (TF.Argument Text) where
    authorizerId f s@ApiGatewayMethodResource{..} =
        (\a -> s { _authorizer_id = a } :: ApiGatewayMethodResource)
             <$> f _authorizer_id

instance HasHttpMethod ApiGatewayMethodResource (TF.Argument Text) where
    httpMethod f s@ApiGatewayMethodResource{..} =
        (\a -> s { _http_method = a } :: ApiGatewayMethodResource)
             <$> f _http_method

instance HasRequestModels ApiGatewayMethodResource (TF.Argument Text) where
    requestModels f s@ApiGatewayMethodResource{..} =
        (\a -> s { _request_models = a } :: ApiGatewayMethodResource)
             <$> f _request_models

instance HasRequestParameters ApiGatewayMethodResource (TF.Argument Text) where
    requestParameters f s@ApiGatewayMethodResource{..} =
        (\a -> s { _request_parameters = a } :: ApiGatewayMethodResource)
             <$> f _request_parameters

instance HasRequestValidatorId ApiGatewayMethodResource (TF.Argument Text) where
    requestValidatorId f s@ApiGatewayMethodResource{..} =
        (\a -> s { _request_validator_id = a } :: ApiGatewayMethodResource)
             <$> f _request_validator_id

instance HasResourceId ApiGatewayMethodResource (TF.Argument Text) where
    resourceId f s@ApiGatewayMethodResource{..} =
        (\a -> s { _resource_id = a } :: ApiGatewayMethodResource)
             <$> f _resource_id

instance HasRestApiId ApiGatewayMethodResource (TF.Argument Text) where
    restApiId f s@ApiGatewayMethodResource{..} =
        (\a -> s { _rest_api_id = a } :: ApiGatewayMethodResource)
             <$> f _rest_api_id

apiGatewayMethodResource :: TF.Resource TF.AWS ApiGatewayMethodResource
apiGatewayMethodResource =
    TF.newResource "aws_api_gateway_method" $
        ApiGatewayMethodResource {
            _api_key_required = TF.Nil
            , _authorization = TF.Nil
            , _authorizer_id = TF.Nil
            , _http_method = TF.Nil
            , _request_models = TF.Nil
            , _request_parameters = TF.Nil
            , _request_validator_id = TF.Nil
            , _resource_id = TF.Nil
            , _rest_api_id = TF.Nil
            }

{- | The @aws_api_gateway_method_response@ AWS resource.

Provides an HTTP Method Response for an API Gateway Resource.
-}
data ApiGatewayMethodResponseResource = ApiGatewayMethodResponseResource {
      _http_method                 :: !(TF.Argument Text)
    {- ^ (Required) The HTTP Method ( @GET@ , @POST@ , @PUT@ , @DELETE@ , @HEAD@ , @OPTIONS@ , @ANY@ ) -}
    , _resource_id                 :: !(TF.Argument Text)
    {- ^ (Required) The API resource ID -}
    , _response_models             :: !(TF.Argument Text)
    {- ^ (Optional) A map of the API models used for the response's content type -}
    , _response_parameters         :: !(TF.Argument Text)
    {- ^ (Optional) A map of response parameters that can be sent to the caller. For example: @response_parameters = { "method.response.header.X-Some-Header" = true }@ would define that the header @X-Some-Header@ can be provided on the response. -}
    , _response_parameters_in_json :: !(TF.Argument Text)
    {- ^ - Deprecated , use @response_parameters@ instead. -}
    , _rest_api_id                 :: !(TF.Argument Text)
    {- ^ (Required) The ID of the associated REST API -}
    , _status_code                 :: !(TF.Argument Text)
    {- ^ (Required) The HTTP status code -}
    } deriving (Show, Eq)

instance TF.ToHCL ApiGatewayMethodResponseResource where
    toHCL ApiGatewayMethodResponseResource{..} = TF.block $ catMaybes
        [ TF.assign "http_method" <$> TF.argument _http_method
        , TF.assign "resource_id" <$> TF.argument _resource_id
        , TF.assign "response_models" <$> TF.argument _response_models
        , TF.assign "response_parameters" <$> TF.argument _response_parameters
        , TF.assign "response_parameters_in_json" <$> TF.argument _response_parameters_in_json
        , TF.assign "rest_api_id" <$> TF.argument _rest_api_id
        , TF.assign "status_code" <$> TF.argument _status_code
        ]

instance HasHttpMethod ApiGatewayMethodResponseResource (TF.Argument Text) where
    httpMethod f s@ApiGatewayMethodResponseResource{..} =
        (\a -> s { _http_method = a } :: ApiGatewayMethodResponseResource)
             <$> f _http_method

instance HasResourceId ApiGatewayMethodResponseResource (TF.Argument Text) where
    resourceId f s@ApiGatewayMethodResponseResource{..} =
        (\a -> s { _resource_id = a } :: ApiGatewayMethodResponseResource)
             <$> f _resource_id

instance HasResponseModels ApiGatewayMethodResponseResource (TF.Argument Text) where
    responseModels f s@ApiGatewayMethodResponseResource{..} =
        (\a -> s { _response_models = a } :: ApiGatewayMethodResponseResource)
             <$> f _response_models

instance HasResponseParameters ApiGatewayMethodResponseResource (TF.Argument Text) where
    responseParameters f s@ApiGatewayMethodResponseResource{..} =
        (\a -> s { _response_parameters = a } :: ApiGatewayMethodResponseResource)
             <$> f _response_parameters

instance HasResponseParametersInJson ApiGatewayMethodResponseResource (TF.Argument Text) where
    responseParametersInJson f s@ApiGatewayMethodResponseResource{..} =
        (\a -> s { _response_parameters_in_json = a } :: ApiGatewayMethodResponseResource)
             <$> f _response_parameters_in_json

instance HasRestApiId ApiGatewayMethodResponseResource (TF.Argument Text) where
    restApiId f s@ApiGatewayMethodResponseResource{..} =
        (\a -> s { _rest_api_id = a } :: ApiGatewayMethodResponseResource)
             <$> f _rest_api_id

instance HasStatusCode ApiGatewayMethodResponseResource (TF.Argument Text) where
    statusCode f s@ApiGatewayMethodResponseResource{..} =
        (\a -> s { _status_code = a } :: ApiGatewayMethodResponseResource)
             <$> f _status_code

apiGatewayMethodResponseResource :: TF.Resource TF.AWS ApiGatewayMethodResponseResource
apiGatewayMethodResponseResource =
    TF.newResource "aws_api_gateway_method_response" $
        ApiGatewayMethodResponseResource {
            _http_method = TF.Nil
            , _resource_id = TF.Nil
            , _response_models = TF.Nil
            , _response_parameters = TF.Nil
            , _response_parameters_in_json = TF.Nil
            , _rest_api_id = TF.Nil
            , _status_code = TF.Nil
            }

{- | The @aws_api_gateway_method_settings@ AWS resource.

Provides an API Gateway Method Settings, e.g. logging or monitoring.
-}
data ApiGatewayMethodSettingsResource = ApiGatewayMethodSettingsResource {
      _method_path :: !(TF.Argument Text)
    {- ^ (Required) Method path defined as @{resource_path}/{http_method}@ for an individual method override, or @*/*@ for overriding all methods in the stage. -}
    , _rest_api_id :: !(TF.Argument Text)
    {- ^ (Required) The ID of the REST API -}
    , _settings    :: !(TF.Argument Text)
    {- ^ (Required) The settings block, see below. -}
    , _stage_name  :: !(TF.Argument Text)
    {- ^ (Required) The name of the stage -}
    } deriving (Show, Eq)

instance TF.ToHCL ApiGatewayMethodSettingsResource where
    toHCL ApiGatewayMethodSettingsResource{..} = TF.block $ catMaybes
        [ TF.assign "method_path" <$> TF.argument _method_path
        , TF.assign "rest_api_id" <$> TF.argument _rest_api_id
        , TF.assign "settings" <$> TF.argument _settings
        , TF.assign "stage_name" <$> TF.argument _stage_name
        ]

instance HasMethodPath ApiGatewayMethodSettingsResource (TF.Argument Text) where
    methodPath f s@ApiGatewayMethodSettingsResource{..} =
        (\a -> s { _method_path = a } :: ApiGatewayMethodSettingsResource)
             <$> f _method_path

instance HasRestApiId ApiGatewayMethodSettingsResource (TF.Argument Text) where
    restApiId f s@ApiGatewayMethodSettingsResource{..} =
        (\a -> s { _rest_api_id = a } :: ApiGatewayMethodSettingsResource)
             <$> f _rest_api_id

instance HasSettings ApiGatewayMethodSettingsResource (TF.Argument Text) where
    settings f s@ApiGatewayMethodSettingsResource{..} =
        (\a -> s { _settings = a } :: ApiGatewayMethodSettingsResource)
             <$> f _settings

instance HasStageName ApiGatewayMethodSettingsResource (TF.Argument Text) where
    stageName f s@ApiGatewayMethodSettingsResource{..} =
        (\a -> s { _stage_name = a } :: ApiGatewayMethodSettingsResource)
             <$> f _stage_name

apiGatewayMethodSettingsResource :: TF.Resource TF.AWS ApiGatewayMethodSettingsResource
apiGatewayMethodSettingsResource =
    TF.newResource "aws_api_gateway_method_settings" $
        ApiGatewayMethodSettingsResource {
            _method_path = TF.Nil
            , _rest_api_id = TF.Nil
            , _settings = TF.Nil
            , _stage_name = TF.Nil
            }

{- | The @aws_api_gateway_model@ AWS resource.

Provides a Model for a API Gateway.
-}
data ApiGatewayModelResource = ApiGatewayModelResource {
      _content_type :: !(TF.Argument Text)
    {- ^ (Required) The content type of the model -}
    , _description  :: !(TF.Argument Text)
    {- ^ (Optional) The description of the model -}
    , _name         :: !(TF.Argument Text)
    {- ^ (Required) The name of the model -}
    , _rest_api_id  :: !(TF.Argument Text)
    {- ^ (Required) The ID of the associated REST API -}
    , _schema       :: !(TF.Argument Text)
    {- ^ (Required) The schema of the model in a JSON form -}
    , _computed_id  :: !(TF.Attribute Text)
    {- ^ - The ID of the model -}
    } deriving (Show, Eq)

instance TF.ToHCL ApiGatewayModelResource where
    toHCL ApiGatewayModelResource{..} = TF.block $ catMaybes
        [ TF.assign "content_type" <$> TF.argument _content_type
        , TF.assign "description" <$> TF.argument _description
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "rest_api_id" <$> TF.argument _rest_api_id
        , TF.assign "schema" <$> TF.argument _schema
        ]

instance HasContentType ApiGatewayModelResource (TF.Argument Text) where
    contentType f s@ApiGatewayModelResource{..} =
        (\a -> s { _content_type = a } :: ApiGatewayModelResource)
             <$> f _content_type

instance HasDescription ApiGatewayModelResource (TF.Argument Text) where
    description f s@ApiGatewayModelResource{..} =
        (\a -> s { _description = a } :: ApiGatewayModelResource)
             <$> f _description

instance HasName ApiGatewayModelResource (TF.Argument Text) where
    name f s@ApiGatewayModelResource{..} =
        (\a -> s { _name = a } :: ApiGatewayModelResource)
             <$> f _name

instance HasRestApiId ApiGatewayModelResource (TF.Argument Text) where
    restApiId f s@ApiGatewayModelResource{..} =
        (\a -> s { _rest_api_id = a } :: ApiGatewayModelResource)
             <$> f _rest_api_id

instance HasSchema ApiGatewayModelResource (TF.Argument Text) where
    schema f s@ApiGatewayModelResource{..} =
        (\a -> s { _schema = a } :: ApiGatewayModelResource)
             <$> f _schema

instance HasComputedId ApiGatewayModelResource (TF.Attribute Text) where
    computedId f s@ApiGatewayModelResource{..} =
        (\a -> s { _computed_id = a } :: ApiGatewayModelResource)
             <$> f _computed_id

apiGatewayModelResource :: TF.Resource TF.AWS ApiGatewayModelResource
apiGatewayModelResource =
    TF.newResource "aws_api_gateway_model" $
        ApiGatewayModelResource {
            _content_type = TF.Nil
            , _description = TF.Nil
            , _name = TF.Nil
            , _rest_api_id = TF.Nil
            , _schema = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_api_gateway_resource@ AWS resource.

Provides an API Gateway Resource.
-}
data ApiGatewayResourceResource = ApiGatewayResourceResource {
      _parent_id     :: !(TF.Argument Text)
    {- ^ (Required) The ID of the parent API resource -}
    , _path_part     :: !(TF.Argument Text)
    {- ^ (Required) The last path segment of this API resource. -}
    , _rest_api_id   :: !(TF.Argument Text)
    {- ^ (Required) The ID of the associated REST API -}
    , _computed_id   :: !(TF.Attribute Text)
    {- ^ - The resource's identifier. -}
    , _computed_path :: !(TF.Attribute Text)
    {- ^ - The complete path for this API resource, including all parent paths. -}
    } deriving (Show, Eq)

instance TF.ToHCL ApiGatewayResourceResource where
    toHCL ApiGatewayResourceResource{..} = TF.block $ catMaybes
        [ TF.assign "parent_id" <$> TF.argument _parent_id
        , TF.assign "path_part" <$> TF.argument _path_part
        , TF.assign "rest_api_id" <$> TF.argument _rest_api_id
        ]

instance HasParentId ApiGatewayResourceResource (TF.Argument Text) where
    parentId f s@ApiGatewayResourceResource{..} =
        (\a -> s { _parent_id = a } :: ApiGatewayResourceResource)
             <$> f _parent_id

instance HasPathPart ApiGatewayResourceResource (TF.Argument Text) where
    pathPart f s@ApiGatewayResourceResource{..} =
        (\a -> s { _path_part = a } :: ApiGatewayResourceResource)
             <$> f _path_part

instance HasRestApiId ApiGatewayResourceResource (TF.Argument Text) where
    restApiId f s@ApiGatewayResourceResource{..} =
        (\a -> s { _rest_api_id = a } :: ApiGatewayResourceResource)
             <$> f _rest_api_id

instance HasComputedId ApiGatewayResourceResource (TF.Attribute Text) where
    computedId f s@ApiGatewayResourceResource{..} =
        (\a -> s { _computed_id = a } :: ApiGatewayResourceResource)
             <$> f _computed_id

instance HasComputedPath ApiGatewayResourceResource (TF.Attribute Text) where
    computedPath f s@ApiGatewayResourceResource{..} =
        (\a -> s { _computed_path = a } :: ApiGatewayResourceResource)
             <$> f _computed_path

apiGatewayResourceResource :: TF.Resource TF.AWS ApiGatewayResourceResource
apiGatewayResourceResource =
    TF.newResource "aws_api_gateway_resource" $
        ApiGatewayResourceResource {
            _parent_id = TF.Nil
            , _path_part = TF.Nil
            , _rest_api_id = TF.Nil
            , _computed_id = TF.Compute "id"
            , _computed_path = TF.Compute "path"
            }

{- | The @aws_api_gateway_rest_api@ AWS resource.

Provides an API Gateway REST API.
-}
data ApiGatewayRestApiResource = ApiGatewayRestApiResource {
      _binary_media_types        :: !(TF.Argument Text)
    {- ^ (Optional) The list of binary media types supported by the RestApi. By default, the RestApi supports only UTF-8-encoded text payloads. -}
    , _body                      :: !(TF.Argument Text)
    {- ^ (Optional) An OpenAPI specification that defines the set of routes and integrations to create as part of the REST API. -}
    , _description               :: !(TF.Argument Text)
    {- ^ (Optional) The description of the REST API -}
    , _name                      :: !(TF.Argument Text)
    {- ^ (Required) The name of the REST API -}
    , _computed_created_date     :: !(TF.Attribute Text)
    {- ^ - The creation date of the REST API -}
    , _computed_id               :: !(TF.Attribute Text)
    {- ^ - The ID of the REST API -}
    , _computed_root_resource_id :: !(TF.Attribute Text)
    {- ^ - The resource ID of the REST API's root -}
    } deriving (Show, Eq)

instance TF.ToHCL ApiGatewayRestApiResource where
    toHCL ApiGatewayRestApiResource{..} = TF.block $ catMaybes
        [ TF.assign "binary_media_types" <$> TF.argument _binary_media_types
        , TF.assign "body" <$> TF.argument _body
        , TF.assign "description" <$> TF.argument _description
        , TF.assign "name" <$> TF.argument _name
        ]

instance HasBinaryMediaTypes ApiGatewayRestApiResource (TF.Argument Text) where
    binaryMediaTypes f s@ApiGatewayRestApiResource{..} =
        (\a -> s { _binary_media_types = a } :: ApiGatewayRestApiResource)
             <$> f _binary_media_types

instance HasBody ApiGatewayRestApiResource (TF.Argument Text) where
    body f s@ApiGatewayRestApiResource{..} =
        (\a -> s { _body = a } :: ApiGatewayRestApiResource)
             <$> f _body

instance HasDescription ApiGatewayRestApiResource (TF.Argument Text) where
    description f s@ApiGatewayRestApiResource{..} =
        (\a -> s { _description = a } :: ApiGatewayRestApiResource)
             <$> f _description

instance HasName ApiGatewayRestApiResource (TF.Argument Text) where
    name f s@ApiGatewayRestApiResource{..} =
        (\a -> s { _name = a } :: ApiGatewayRestApiResource)
             <$> f _name

instance HasComputedCreatedDate ApiGatewayRestApiResource (TF.Attribute Text) where
    computedCreatedDate f s@ApiGatewayRestApiResource{..} =
        (\a -> s { _computed_created_date = a } :: ApiGatewayRestApiResource)
             <$> f _computed_created_date

instance HasComputedId ApiGatewayRestApiResource (TF.Attribute Text) where
    computedId f s@ApiGatewayRestApiResource{..} =
        (\a -> s { _computed_id = a } :: ApiGatewayRestApiResource)
             <$> f _computed_id

instance HasComputedRootResourceId ApiGatewayRestApiResource (TF.Attribute Text) where
    computedRootResourceId f s@ApiGatewayRestApiResource{..} =
        (\a -> s { _computed_root_resource_id = a } :: ApiGatewayRestApiResource)
             <$> f _computed_root_resource_id

apiGatewayRestApiResource :: TF.Resource TF.AWS ApiGatewayRestApiResource
apiGatewayRestApiResource =
    TF.newResource "aws_api_gateway_rest_api" $
        ApiGatewayRestApiResource {
            _binary_media_types = TF.Nil
            , _body = TF.Nil
            , _description = TF.Nil
            , _name = TF.Nil
            , _computed_created_date = TF.Compute "created_date"
            , _computed_id = TF.Compute "id"
            , _computed_root_resource_id = TF.Compute "root_resource_id"
            }

{- | The @aws_api_gateway_stage@ AWS resource.

Provides an API Gateway Stage.
-}
data ApiGatewayStageResource = ApiGatewayStageResource {
      _cache_cluster_enabled :: !(TF.Argument TF.Bool)
    {- ^ (Optional) Specifies whether a cache cluster is enabled for the stage -}
    , _cache_cluster_size    :: !(TF.Argument Text)
    {- ^ (Optional) The size of the cache cluster for the stage, if enabled. Allowed values include @0.5@ , @1.6@ , @6.1@ , @13.5@ , @28.4@ , @58.2@ , @118@ and @237@ . -}
    , _client_certificate_id :: !(TF.Argument Text)
    {- ^ (Optional) The identifier of a client certificate for the stage. -}
    , _deployment_id         :: !(TF.Argument Text)
    {- ^ (Required) The ID of the deployment that the stage points to -}
    , _description           :: !(TF.Argument Text)
    {- ^ (Optional) The description of the stage -}
    , _documentation_version :: !(TF.Argument Text)
    {- ^ (Optional) The version of the associated API documentation -}
    , _rest_api_id           :: !(TF.Argument Text)
    {- ^ (Required) The ID of the associated REST API -}
    , _stage_name            :: !(TF.Argument Text)
    {- ^ (Required) The name of the stage -}
    , _variables             :: !(TF.Argument Text)
    {- ^ (Optional) A map that defines the stage variables -}
    } deriving (Show, Eq)

instance TF.ToHCL ApiGatewayStageResource where
    toHCL ApiGatewayStageResource{..} = TF.block $ catMaybes
        [ TF.assign "cache_cluster_enabled" <$> TF.argument _cache_cluster_enabled
        , TF.assign "cache_cluster_size" <$> TF.argument _cache_cluster_size
        , TF.assign "client_certificate_id" <$> TF.argument _client_certificate_id
        , TF.assign "deployment_id" <$> TF.argument _deployment_id
        , TF.assign "description" <$> TF.argument _description
        , TF.assign "documentation_version" <$> TF.argument _documentation_version
        , TF.assign "rest_api_id" <$> TF.argument _rest_api_id
        , TF.assign "stage_name" <$> TF.argument _stage_name
        , TF.assign "variables" <$> TF.argument _variables
        ]

instance HasCacheClusterEnabled ApiGatewayStageResource (TF.Argument TF.Bool) where
    cacheClusterEnabled f s@ApiGatewayStageResource{..} =
        (\a -> s { _cache_cluster_enabled = a } :: ApiGatewayStageResource)
             <$> f _cache_cluster_enabled

instance HasCacheClusterSize ApiGatewayStageResource (TF.Argument Text) where
    cacheClusterSize f s@ApiGatewayStageResource{..} =
        (\a -> s { _cache_cluster_size = a } :: ApiGatewayStageResource)
             <$> f _cache_cluster_size

instance HasClientCertificateId ApiGatewayStageResource (TF.Argument Text) where
    clientCertificateId f s@ApiGatewayStageResource{..} =
        (\a -> s { _client_certificate_id = a } :: ApiGatewayStageResource)
             <$> f _client_certificate_id

instance HasDeploymentId ApiGatewayStageResource (TF.Argument Text) where
    deploymentId f s@ApiGatewayStageResource{..} =
        (\a -> s { _deployment_id = a } :: ApiGatewayStageResource)
             <$> f _deployment_id

instance HasDescription ApiGatewayStageResource (TF.Argument Text) where
    description f s@ApiGatewayStageResource{..} =
        (\a -> s { _description = a } :: ApiGatewayStageResource)
             <$> f _description

instance HasDocumentationVersion ApiGatewayStageResource (TF.Argument Text) where
    documentationVersion f s@ApiGatewayStageResource{..} =
        (\a -> s { _documentation_version = a } :: ApiGatewayStageResource)
             <$> f _documentation_version

instance HasRestApiId ApiGatewayStageResource (TF.Argument Text) where
    restApiId f s@ApiGatewayStageResource{..} =
        (\a -> s { _rest_api_id = a } :: ApiGatewayStageResource)
             <$> f _rest_api_id

instance HasStageName ApiGatewayStageResource (TF.Argument Text) where
    stageName f s@ApiGatewayStageResource{..} =
        (\a -> s { _stage_name = a } :: ApiGatewayStageResource)
             <$> f _stage_name

instance HasVariables ApiGatewayStageResource (TF.Argument Text) where
    variables f s@ApiGatewayStageResource{..} =
        (\a -> s { _variables = a } :: ApiGatewayStageResource)
             <$> f _variables

apiGatewayStageResource :: TF.Resource TF.AWS ApiGatewayStageResource
apiGatewayStageResource =
    TF.newResource "aws_api_gateway_stage" $
        ApiGatewayStageResource {
            _cache_cluster_enabled = TF.Nil
            , _cache_cluster_size = TF.Nil
            , _client_certificate_id = TF.Nil
            , _deployment_id = TF.Nil
            , _description = TF.Nil
            , _documentation_version = TF.Nil
            , _rest_api_id = TF.Nil
            , _stage_name = TF.Nil
            , _variables = TF.Nil
            }

{- | The @aws_api_gateway_usage_plan_key@ AWS resource.

Provides an API Gateway Usage Plan Key.
-}
data ApiGatewayUsagePlanKeyResource = ApiGatewayUsagePlanKeyResource {
      _key_id                 :: !(TF.Argument Text)
    {- ^ (Required) The identifier of the API key resource. -}
    , _key_type               :: !(TF.Argument Text)
    {- ^ (Required) The type of the API key resource. Currently, the valid key type is API_KEY. -}
    , _usage_plan_id          :: !(TF.Argument Text)
    {- ^ (Required) The Id of the usage plan resource representing to associate the key to. -}
    , _computed_id            :: !(TF.Attribute Text)
    {- ^ - The Id of a usage plan key. -}
    , _computed_key_id        :: !(TF.Attribute Text)
    {- ^ - The identifier of the API gateway key resource. -}
    , _computed_key_type      :: !(TF.Attribute Text)
    {- ^ - The type of a usage plan key. Currently, the valid key type is API_KEY. -}
    , _computed_name          :: !(TF.Attribute Text)
    {- ^ - The name of a usage plan key. -}
    , _computed_usage_plan_id :: !(TF.Attribute Text)
    {- ^ - The ID of the API resource -}
    , _computed_value         :: !(TF.Attribute Text)
    {- ^ - The value of a usage plan key. -}
    } deriving (Show, Eq)

instance TF.ToHCL ApiGatewayUsagePlanKeyResource where
    toHCL ApiGatewayUsagePlanKeyResource{..} = TF.block $ catMaybes
        [ TF.assign "key_id" <$> TF.argument _key_id
        , TF.assign "key_type" <$> TF.argument _key_type
        , TF.assign "usage_plan_id" <$> TF.argument _usage_plan_id
        ]

instance HasKeyId ApiGatewayUsagePlanKeyResource (TF.Argument Text) where
    keyId f s@ApiGatewayUsagePlanKeyResource{..} =
        (\a -> s { _key_id = a } :: ApiGatewayUsagePlanKeyResource)
             <$> f _key_id

instance HasKeyType ApiGatewayUsagePlanKeyResource (TF.Argument Text) where
    keyType f s@ApiGatewayUsagePlanKeyResource{..} =
        (\a -> s { _key_type = a } :: ApiGatewayUsagePlanKeyResource)
             <$> f _key_type

instance HasUsagePlanId ApiGatewayUsagePlanKeyResource (TF.Argument Text) where
    usagePlanId f s@ApiGatewayUsagePlanKeyResource{..} =
        (\a -> s { _usage_plan_id = a } :: ApiGatewayUsagePlanKeyResource)
             <$> f _usage_plan_id

instance HasComputedId ApiGatewayUsagePlanKeyResource (TF.Attribute Text) where
    computedId f s@ApiGatewayUsagePlanKeyResource{..} =
        (\a -> s { _computed_id = a } :: ApiGatewayUsagePlanKeyResource)
             <$> f _computed_id

instance HasComputedKeyId ApiGatewayUsagePlanKeyResource (TF.Attribute Text) where
    computedKeyId f s@ApiGatewayUsagePlanKeyResource{..} =
        (\a -> s { _computed_key_id = a } :: ApiGatewayUsagePlanKeyResource)
             <$> f _computed_key_id

instance HasComputedKeyType ApiGatewayUsagePlanKeyResource (TF.Attribute Text) where
    computedKeyType f s@ApiGatewayUsagePlanKeyResource{..} =
        (\a -> s { _computed_key_type = a } :: ApiGatewayUsagePlanKeyResource)
             <$> f _computed_key_type

instance HasComputedName ApiGatewayUsagePlanKeyResource (TF.Attribute Text) where
    computedName f s@ApiGatewayUsagePlanKeyResource{..} =
        (\a -> s { _computed_name = a } :: ApiGatewayUsagePlanKeyResource)
             <$> f _computed_name

instance HasComputedUsagePlanId ApiGatewayUsagePlanKeyResource (TF.Attribute Text) where
    computedUsagePlanId f s@ApiGatewayUsagePlanKeyResource{..} =
        (\a -> s { _computed_usage_plan_id = a } :: ApiGatewayUsagePlanKeyResource)
             <$> f _computed_usage_plan_id

instance HasComputedValue ApiGatewayUsagePlanKeyResource (TF.Attribute Text) where
    computedValue f s@ApiGatewayUsagePlanKeyResource{..} =
        (\a -> s { _computed_value = a } :: ApiGatewayUsagePlanKeyResource)
             <$> f _computed_value

apiGatewayUsagePlanKeyResource :: TF.Resource TF.AWS ApiGatewayUsagePlanKeyResource
apiGatewayUsagePlanKeyResource =
    TF.newResource "aws_api_gateway_usage_plan_key" $
        ApiGatewayUsagePlanKeyResource {
            _key_id = TF.Nil
            , _key_type = TF.Nil
            , _usage_plan_id = TF.Nil
            , _computed_id = TF.Compute "id"
            , _computed_key_id = TF.Compute "key_id"
            , _computed_key_type = TF.Compute "key_type"
            , _computed_name = TF.Compute "name"
            , _computed_usage_plan_id = TF.Compute "usage_plan_id"
            , _computed_value = TF.Compute "value"
            }

{- | The @aws_api_gateway_usage_plan@ AWS resource.

Provides an API Gateway Usage Plan.
-}
data ApiGatewayUsagePlanResource = ApiGatewayUsagePlanResource {
      _api_stages        :: !(TF.Argument Text)
    {- ^ (Optional) The associated <#api-stages-arguments> of the usage plan. -}
    , _description       :: !(TF.Argument Text)
    {- ^ (Required) The description of a usage plan. -}
    , _name              :: !(TF.Argument Text)
    {- ^ (Required) The name of the usage plan. -}
    , _product_code      :: !(TF.Argument Text)
    {- ^ (Optional) The AWS Markeplace product identifier to associate with the usage plan as a SaaS product on AWS Marketplace. -}
    , _quota_settings    :: !(TF.Argument Text)
    {- ^ (Optional) The <#quota-settings-arguments> of the usage plan. -}
    , _throttle_settings :: !(TF.Argument Text)
    {- ^ (Optional) The <#throttling-settings-arguments> of the usage plan. -}
    } deriving (Show, Eq)

instance TF.ToHCL ApiGatewayUsagePlanResource where
    toHCL ApiGatewayUsagePlanResource{..} = TF.block $ catMaybes
        [ TF.assign "api_stages" <$> TF.argument _api_stages
        , TF.assign "description" <$> TF.argument _description
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "product_code" <$> TF.argument _product_code
        , TF.assign "quota_settings" <$> TF.argument _quota_settings
        , TF.assign "throttle_settings" <$> TF.argument _throttle_settings
        ]

instance HasApiStages ApiGatewayUsagePlanResource (TF.Argument Text) where
    apiStages f s@ApiGatewayUsagePlanResource{..} =
        (\a -> s { _api_stages = a } :: ApiGatewayUsagePlanResource)
             <$> f _api_stages

instance HasDescription ApiGatewayUsagePlanResource (TF.Argument Text) where
    description f s@ApiGatewayUsagePlanResource{..} =
        (\a -> s { _description = a } :: ApiGatewayUsagePlanResource)
             <$> f _description

instance HasName ApiGatewayUsagePlanResource (TF.Argument Text) where
    name f s@ApiGatewayUsagePlanResource{..} =
        (\a -> s { _name = a } :: ApiGatewayUsagePlanResource)
             <$> f _name

instance HasProductCode ApiGatewayUsagePlanResource (TF.Argument Text) where
    productCode f s@ApiGatewayUsagePlanResource{..} =
        (\a -> s { _product_code = a } :: ApiGatewayUsagePlanResource)
             <$> f _product_code

instance HasQuotaSettings ApiGatewayUsagePlanResource (TF.Argument Text) where
    quotaSettings f s@ApiGatewayUsagePlanResource{..} =
        (\a -> s { _quota_settings = a } :: ApiGatewayUsagePlanResource)
             <$> f _quota_settings

instance HasThrottleSettings ApiGatewayUsagePlanResource (TF.Argument Text) where
    throttleSettings f s@ApiGatewayUsagePlanResource{..} =
        (\a -> s { _throttle_settings = a } :: ApiGatewayUsagePlanResource)
             <$> f _throttle_settings

apiGatewayUsagePlanResource :: TF.Resource TF.AWS ApiGatewayUsagePlanResource
apiGatewayUsagePlanResource =
    TF.newResource "aws_api_gateway_usage_plan" $
        ApiGatewayUsagePlanResource {
            _api_stages = TF.Nil
            , _description = TF.Nil
            , _name = TF.Nil
            , _product_code = TF.Nil
            , _quota_settings = TF.Nil
            , _throttle_settings = TF.Nil
            }

{- | The @aws_app_cookie_stickiness_policy@ AWS resource.

Provides an application cookie stickiness policy, which allows an ELB to wed
its sticky cookie's expiration to a cookie generated by your application.
-}
data AppCookieStickinessPolicyResource = AppCookieStickinessPolicyResource {
      _cookie_name            :: !(TF.Argument Text)
    {- ^ (Required) The application cookie whose lifetime the ELB's cookie should follow. -}
    , _lb_port                :: !(TF.Argument TF.Word16)
    {- ^ (Required) The load balancer port to which the policy should be applied. This must be an active listener on the load balancer. -}
    , _load_balancer          :: !(TF.Argument Text)
    {- ^ (Required) The name of load balancer to which the policy should be attached. -}
    , _name                   :: !(TF.Argument Text)
    {- ^ (Required) The name of the stickiness policy. -}
    , _computed_cookie_name   :: !(TF.Attribute Text)
    {- ^ - The application cookie whose lifetime the ELB's cookie should follow. -}
    , _computed_id            :: !(TF.Attribute Text)
    {- ^ - The ID of the policy. -}
    , _computed_lb_port       :: !(TF.Attribute TF.Word16)
    {- ^ - The load balancer port to which the policy is applied. -}
    , _computed_load_balancer :: !(TF.Attribute Text)
    {- ^ - The name of load balancer to which the policy is attached. -}
    , _computed_name          :: !(TF.Attribute Text)
    {- ^ - The name of the stickiness policy. -}
    } deriving (Show, Eq)

instance TF.ToHCL AppCookieStickinessPolicyResource where
    toHCL AppCookieStickinessPolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "cookie_name" <$> TF.argument _cookie_name
        , TF.assign "lb_port" <$> TF.argument _lb_port
        , TF.assign "load_balancer" <$> TF.argument _load_balancer
        , TF.assign "name" <$> TF.argument _name
        ]

instance HasCookieName AppCookieStickinessPolicyResource (TF.Argument Text) where
    cookieName f s@AppCookieStickinessPolicyResource{..} =
        (\a -> s { _cookie_name = a } :: AppCookieStickinessPolicyResource)
             <$> f _cookie_name

instance HasLbPort AppCookieStickinessPolicyResource (TF.Argument TF.Word16) where
    lbPort f s@AppCookieStickinessPolicyResource{..} =
        (\a -> s { _lb_port = a } :: AppCookieStickinessPolicyResource)
             <$> f _lb_port

instance HasLoadBalancer AppCookieStickinessPolicyResource (TF.Argument Text) where
    loadBalancer f s@AppCookieStickinessPolicyResource{..} =
        (\a -> s { _load_balancer = a } :: AppCookieStickinessPolicyResource)
             <$> f _load_balancer

instance HasName AppCookieStickinessPolicyResource (TF.Argument Text) where
    name f s@AppCookieStickinessPolicyResource{..} =
        (\a -> s { _name = a } :: AppCookieStickinessPolicyResource)
             <$> f _name

instance HasComputedCookieName AppCookieStickinessPolicyResource (TF.Attribute Text) where
    computedCookieName f s@AppCookieStickinessPolicyResource{..} =
        (\a -> s { _computed_cookie_name = a } :: AppCookieStickinessPolicyResource)
             <$> f _computed_cookie_name

instance HasComputedId AppCookieStickinessPolicyResource (TF.Attribute Text) where
    computedId f s@AppCookieStickinessPolicyResource{..} =
        (\a -> s { _computed_id = a } :: AppCookieStickinessPolicyResource)
             <$> f _computed_id

instance HasComputedLbPort AppCookieStickinessPolicyResource (TF.Attribute TF.Word16) where
    computedLbPort f s@AppCookieStickinessPolicyResource{..} =
        (\a -> s { _computed_lb_port = a } :: AppCookieStickinessPolicyResource)
             <$> f _computed_lb_port

instance HasComputedLoadBalancer AppCookieStickinessPolicyResource (TF.Attribute Text) where
    computedLoadBalancer f s@AppCookieStickinessPolicyResource{..} =
        (\a -> s { _computed_load_balancer = a } :: AppCookieStickinessPolicyResource)
             <$> f _computed_load_balancer

instance HasComputedName AppCookieStickinessPolicyResource (TF.Attribute Text) where
    computedName f s@AppCookieStickinessPolicyResource{..} =
        (\a -> s { _computed_name = a } :: AppCookieStickinessPolicyResource)
             <$> f _computed_name

appCookieStickinessPolicyResource :: TF.Resource TF.AWS AppCookieStickinessPolicyResource
appCookieStickinessPolicyResource =
    TF.newResource "aws_app_cookie_stickiness_policy" $
        AppCookieStickinessPolicyResource {
            _cookie_name = TF.Nil
            , _lb_port = TF.Nil
            , _load_balancer = TF.Nil
            , _name = TF.Nil
            , _computed_cookie_name = TF.Compute "cookie_name"
            , _computed_id = TF.Compute "id"
            , _computed_lb_port = TF.Compute "lb_port"
            , _computed_load_balancer = TF.Compute "load_balancer"
            , _computed_name = TF.Compute "name"
            }

{- | The @aws_appautoscaling_policy@ AWS resource.

Provides an Application AutoScaling Policy resource.
-}
data AppautoscalingPolicyResource = AppautoscalingPolicyResource {
      _name                                         :: !(TF.Argument Text)
    {- ^ (Required) The name of the policy. -}
    , _policy_type                                  :: !(TF.Argument Text)
    {- ^ (Optional) For DynamoDB, only @TargetTrackingScaling@ is supported. For any other service, only @StepScaling@ is supported. Defaults to @StepScaling@ . -}
    , _resource_id                                  :: !(TF.Argument Text)
    {- ^ (Required) The resource type and unique identifier string for the resource associated with the scaling policy. Documentation can be found in the @ResourceId@ parameter at: <http://docs.aws.amazon.com/ApplicationAutoScaling/latest/APIReference/API_RegisterScalableTarget.html#API_RegisterScalableTarget_RequestParameters> -}
    , _scalable_dimension                           :: !(TF.Argument Text)
    {- ^ (Required) The scalable dimension of the scalable target. Documentation can be found in the @ScalableDimension@ parameter at: <http://docs.aws.amazon.com/ApplicationAutoScaling/latest/APIReference/API_RegisterScalableTarget.html#API_RegisterScalableTarget_RequestParameters> -}
    , _service_namespace                            :: !(TF.Argument Text)
    {- ^ (Required) The AWS service namespace of the scalable target. Documentation can be found in the @ServiceNamespace@ parameter at: <http://docs.aws.amazon.com/ApplicationAutoScaling/latest/APIReference/API_RegisterScalableTarget.html#API_RegisterScalableTarget_RequestParameters> -}
    , _step_scaling_policy_configuration            :: !(TF.Argument Text)
    {- ^ (Optional) Step scaling policy configuration, requires @policy_type = "StepScaling"@ (default). See supported fields below. -}
    , _target_tracking_scaling_policy_configuration :: !(TF.Argument Text)
    {- ^ (Optional) A target tracking policy, requires @policy_type = "TargetTrackingScaling"@ . See supported fields below. -}
    } deriving (Show, Eq)

instance TF.ToHCL AppautoscalingPolicyResource where
    toHCL AppautoscalingPolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.argument _name
        , TF.assign "policy_type" <$> TF.argument _policy_type
        , TF.assign "resource_id" <$> TF.argument _resource_id
        , TF.assign "scalable_dimension" <$> TF.argument _scalable_dimension
        , TF.assign "service_namespace" <$> TF.argument _service_namespace
        , TF.assign "step_scaling_policy_configuration" <$> TF.argument _step_scaling_policy_configuration
        , TF.assign "target_tracking_scaling_policy_configuration" <$> TF.argument _target_tracking_scaling_policy_configuration
        ]

instance HasName AppautoscalingPolicyResource (TF.Argument Text) where
    name f s@AppautoscalingPolicyResource{..} =
        (\a -> s { _name = a } :: AppautoscalingPolicyResource)
             <$> f _name

instance HasPolicyType AppautoscalingPolicyResource (TF.Argument Text) where
    policyType f s@AppautoscalingPolicyResource{..} =
        (\a -> s { _policy_type = a } :: AppautoscalingPolicyResource)
             <$> f _policy_type

instance HasResourceId AppautoscalingPolicyResource (TF.Argument Text) where
    resourceId f s@AppautoscalingPolicyResource{..} =
        (\a -> s { _resource_id = a } :: AppautoscalingPolicyResource)
             <$> f _resource_id

instance HasScalableDimension AppautoscalingPolicyResource (TF.Argument Text) where
    scalableDimension f s@AppautoscalingPolicyResource{..} =
        (\a -> s { _scalable_dimension = a } :: AppautoscalingPolicyResource)
             <$> f _scalable_dimension

instance HasServiceNamespace AppautoscalingPolicyResource (TF.Argument Text) where
    serviceNamespace f s@AppautoscalingPolicyResource{..} =
        (\a -> s { _service_namespace = a } :: AppautoscalingPolicyResource)
             <$> f _service_namespace

instance HasStepScalingPolicyConfiguration AppautoscalingPolicyResource (TF.Argument Text) where
    stepScalingPolicyConfiguration f s@AppautoscalingPolicyResource{..} =
        (\a -> s { _step_scaling_policy_configuration = a } :: AppautoscalingPolicyResource)
             <$> f _step_scaling_policy_configuration

instance HasTargetTrackingScalingPolicyConfiguration AppautoscalingPolicyResource (TF.Argument Text) where
    targetTrackingScalingPolicyConfiguration f s@AppautoscalingPolicyResource{..} =
        (\a -> s { _target_tracking_scaling_policy_configuration = a } :: AppautoscalingPolicyResource)
             <$> f _target_tracking_scaling_policy_configuration

appautoscalingPolicyResource :: TF.Resource TF.AWS AppautoscalingPolicyResource
appautoscalingPolicyResource =
    TF.newResource "aws_appautoscaling_policy" $
        AppautoscalingPolicyResource {
            _name = TF.Nil
            , _policy_type = TF.Nil
            , _resource_id = TF.Nil
            , _scalable_dimension = TF.Nil
            , _service_namespace = TF.Nil
            , _step_scaling_policy_configuration = TF.Nil
            , _target_tracking_scaling_policy_configuration = TF.Nil
            }

{- | The @aws_appautoscaling_scheduled_action@ AWS resource.

Provides an Application AutoScaling ScheduledAction resource.
-}
data AppautoscalingScheduledActionResource = AppautoscalingScheduledActionResource {
      _end_time               :: !(TF.Argument Text)
    {- ^ (Optional) The date and time for the scheduled action to end. Specify the following format: 2006-01-02T15:04:05Z -}
    , _name                   :: !(TF.Argument Text)
    {- ^ (Required) The name of the scheduled action. -}
    , _resource_id            :: !(TF.Argument Text)
    {- ^ (Required) The identifier of the resource associated with the scheduled action. Documentation can be found in the parameter at: <https://docs.aws.amazon.com/ApplicationAutoScaling/latest/APIReference/API_PutScheduledAction.html#ApplicationAutoScaling-PutScheduledAction-request-ResourceId> -}
    , _scalable_dimension     :: !(TF.Argument Text)
    {- ^ (Optional) The scalable dimension. Documentation can be found in the parameter at: <https://docs.aws.amazon.com/ApplicationAutoScaling/latest/APIReference/API_PutScheduledAction.html#ApplicationAutoScaling-PutScheduledAction-request-ScalableDimension> Example: ecs:service:DesiredCount -}
    , _scalable_target_action :: !(TF.Argument Text)
    {- ^ (Optional) The new minimum and maximum capacity. You can set both values or just one. See <#scalable-target-action-arguments> -}
    , _schedule               :: !(TF.Argument Text)
    {- ^ (Optional) The schedule for this action. The following formats are supported: At expressions - at(yyyy-mm-ddThh:mm:ss), Rate expressions - rate(valueunit), Cron expressions - cron(fields). In UTC. Documentation can be found in the parameter at: <https://docs.aws.amazon.com/ApplicationAutoScaling/latest/APIReference/API_PutScheduledAction.html#ApplicationAutoScaling-PutScheduledAction-request-Schedule> -}
    , _service_namespace      :: !(TF.Argument Text)
    {- ^ (Required) The namespace of the AWS service. Documentation can be found in the parameter at: <https://docs.aws.amazon.com/ApplicationAutoScaling/latest/APIReference/API_PutScheduledAction.html#ApplicationAutoScaling-PutScheduledAction-request-ServiceNamespace> Example: ecs -}
    , _start_time             :: !(TF.Argument Text)
    {- ^ (Optional) The date and time for the scheduled action to start. Specify the following format: 2006-01-02T15:04:05Z -}
    } deriving (Show, Eq)

instance TF.ToHCL AppautoscalingScheduledActionResource where
    toHCL AppautoscalingScheduledActionResource{..} = TF.block $ catMaybes
        [ TF.assign "end_time" <$> TF.argument _end_time
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "resource_id" <$> TF.argument _resource_id
        , TF.assign "scalable_dimension" <$> TF.argument _scalable_dimension
        , TF.assign "scalable_target_action" <$> TF.argument _scalable_target_action
        , TF.assign "schedule" <$> TF.argument _schedule
        , TF.assign "service_namespace" <$> TF.argument _service_namespace
        , TF.assign "start_time" <$> TF.argument _start_time
        ]

instance HasEndTime AppautoscalingScheduledActionResource (TF.Argument Text) where
    endTime f s@AppautoscalingScheduledActionResource{..} =
        (\a -> s { _end_time = a } :: AppautoscalingScheduledActionResource)
             <$> f _end_time

instance HasName AppautoscalingScheduledActionResource (TF.Argument Text) where
    name f s@AppautoscalingScheduledActionResource{..} =
        (\a -> s { _name = a } :: AppautoscalingScheduledActionResource)
             <$> f _name

instance HasResourceId AppautoscalingScheduledActionResource (TF.Argument Text) where
    resourceId f s@AppautoscalingScheduledActionResource{..} =
        (\a -> s { _resource_id = a } :: AppautoscalingScheduledActionResource)
             <$> f _resource_id

instance HasScalableDimension AppautoscalingScheduledActionResource (TF.Argument Text) where
    scalableDimension f s@AppautoscalingScheduledActionResource{..} =
        (\a -> s { _scalable_dimension = a } :: AppautoscalingScheduledActionResource)
             <$> f _scalable_dimension

instance HasScalableTargetAction AppautoscalingScheduledActionResource (TF.Argument Text) where
    scalableTargetAction f s@AppautoscalingScheduledActionResource{..} =
        (\a -> s { _scalable_target_action = a } :: AppautoscalingScheduledActionResource)
             <$> f _scalable_target_action

instance HasSchedule AppautoscalingScheduledActionResource (TF.Argument Text) where
    schedule f s@AppautoscalingScheduledActionResource{..} =
        (\a -> s { _schedule = a } :: AppautoscalingScheduledActionResource)
             <$> f _schedule

instance HasServiceNamespace AppautoscalingScheduledActionResource (TF.Argument Text) where
    serviceNamespace f s@AppautoscalingScheduledActionResource{..} =
        (\a -> s { _service_namespace = a } :: AppautoscalingScheduledActionResource)
             <$> f _service_namespace

instance HasStartTime AppautoscalingScheduledActionResource (TF.Argument Text) where
    startTime f s@AppautoscalingScheduledActionResource{..} =
        (\a -> s { _start_time = a } :: AppautoscalingScheduledActionResource)
             <$> f _start_time

appautoscalingScheduledActionResource :: TF.Resource TF.AWS AppautoscalingScheduledActionResource
appautoscalingScheduledActionResource =
    TF.newResource "aws_appautoscaling_scheduled_action" $
        AppautoscalingScheduledActionResource {
            _end_time = TF.Nil
            , _name = TF.Nil
            , _resource_id = TF.Nil
            , _scalable_dimension = TF.Nil
            , _scalable_target_action = TF.Nil
            , _schedule = TF.Nil
            , _service_namespace = TF.Nil
            , _start_time = TF.Nil
            }

{- | The @aws_appautoscaling_target@ AWS resource.

Provides an Application AutoScaling ScalableTarget resource.
-}
data AppautoscalingTargetResource = AppautoscalingTargetResource {
      _max_capacity       :: !(TF.Argument Text)
    {- ^ (Required) The max capacity of the scalable target. -}
    , _min_capacity       :: !(TF.Argument Text)
    {- ^ (Required) The min capacity of the scalable target. -}
    , _resource_id        :: !(TF.Argument Text)
    {- ^ (Required) The resource type and unique identifier string for the resource associated with the scaling policy. Documentation can be found in the @ResourceId@ parameter at: <http://docs.aws.amazon.com/ApplicationAutoScaling/latest/APIReference/API_RegisterScalableTarget.html#API_RegisterScalableTarget_RequestParameters> -}
    , _role_arn           :: !(TF.Argument Text)
    {- ^ (Optional) The ARN of the IAM role that allows Application AutoScaling to modify your scalable target on your behalf. -}
    , _scalable_dimension :: !(TF.Argument Text)
    {- ^ (Required) The scalable dimension of the scalable target. Documentation can be found in the @ScalableDimension@ parameter at: <http://docs.aws.amazon.com/ApplicationAutoScaling/latest/APIReference/API_RegisterScalableTarget.html#API_RegisterScalableTarget_RequestParameters> -}
    , _service_namespace  :: !(TF.Argument Text)
    {- ^ (Required) The AWS service namespace of the scalable target. Documentation can be found in the @ServiceNamespace@ parameter at: <http://docs.aws.amazon.com/ApplicationAutoScaling/latest/APIReference/API_RegisterScalableTarget.html#API_RegisterScalableTarget_RequestParameters> -}
    } deriving (Show, Eq)

instance TF.ToHCL AppautoscalingTargetResource where
    toHCL AppautoscalingTargetResource{..} = TF.block $ catMaybes
        [ TF.assign "max_capacity" <$> TF.argument _max_capacity
        , TF.assign "min_capacity" <$> TF.argument _min_capacity
        , TF.assign "resource_id" <$> TF.argument _resource_id
        , TF.assign "role_arn" <$> TF.argument _role_arn
        , TF.assign "scalable_dimension" <$> TF.argument _scalable_dimension
        , TF.assign "service_namespace" <$> TF.argument _service_namespace
        ]

instance HasMaxCapacity AppautoscalingTargetResource (TF.Argument Text) where
    maxCapacity f s@AppautoscalingTargetResource{..} =
        (\a -> s { _max_capacity = a } :: AppautoscalingTargetResource)
             <$> f _max_capacity

instance HasMinCapacity AppautoscalingTargetResource (TF.Argument Text) where
    minCapacity f s@AppautoscalingTargetResource{..} =
        (\a -> s { _min_capacity = a } :: AppautoscalingTargetResource)
             <$> f _min_capacity

instance HasResourceId AppautoscalingTargetResource (TF.Argument Text) where
    resourceId f s@AppautoscalingTargetResource{..} =
        (\a -> s { _resource_id = a } :: AppautoscalingTargetResource)
             <$> f _resource_id

instance HasRoleArn AppautoscalingTargetResource (TF.Argument Text) where
    roleArn f s@AppautoscalingTargetResource{..} =
        (\a -> s { _role_arn = a } :: AppautoscalingTargetResource)
             <$> f _role_arn

instance HasScalableDimension AppautoscalingTargetResource (TF.Argument Text) where
    scalableDimension f s@AppautoscalingTargetResource{..} =
        (\a -> s { _scalable_dimension = a } :: AppautoscalingTargetResource)
             <$> f _scalable_dimension

instance HasServiceNamespace AppautoscalingTargetResource (TF.Argument Text) where
    serviceNamespace f s@AppautoscalingTargetResource{..} =
        (\a -> s { _service_namespace = a } :: AppautoscalingTargetResource)
             <$> f _service_namespace

appautoscalingTargetResource :: TF.Resource TF.AWS AppautoscalingTargetResource
appautoscalingTargetResource =
    TF.newResource "aws_appautoscaling_target" $
        AppautoscalingTargetResource {
            _max_capacity = TF.Nil
            , _min_capacity = TF.Nil
            , _resource_id = TF.Nil
            , _role_arn = TF.Nil
            , _scalable_dimension = TF.Nil
            , _service_namespace = TF.Nil
            }

{- | The @aws_athena_database@ AWS resource.

Provides a SSM resource data sync.
-}
data AthenaDatabaseResource = AthenaDatabaseResource {
      _name           :: !(TF.Argument Text)
    {- ^ (Required) Name for the configuration. -}
    , _s3_destination :: !(TF.Argument Text)
    {- ^ (Required) Amazon S3 configuration details for the sync. -}
    } deriving (Show, Eq)

instance TF.ToHCL AthenaDatabaseResource where
    toHCL AthenaDatabaseResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.argument _name
        , TF.assign "s3_destination" <$> TF.argument _s3_destination
        ]

instance HasName AthenaDatabaseResource (TF.Argument Text) where
    name f s@AthenaDatabaseResource{..} =
        (\a -> s { _name = a } :: AthenaDatabaseResource)
             <$> f _name

instance HasS3Destination AthenaDatabaseResource (TF.Argument Text) where
    s3Destination f s@AthenaDatabaseResource{..} =
        (\a -> s { _s3_destination = a } :: AthenaDatabaseResource)
             <$> f _s3_destination

athenaDatabaseResource :: TF.Resource TF.AWS AthenaDatabaseResource
athenaDatabaseResource =
    TF.newResource "aws_athena_database" $
        AthenaDatabaseResource {
            _name = TF.Nil
            , _s3_destination = TF.Nil
            }

{- | The @aws_athena_named_query@ AWS resource.

Provides an Athena Named Query resource.
-}
data AthenaNamedQueryResource = AthenaNamedQueryResource {
      _database    :: !(TF.Argument Text)
    {- ^ (Required) The database to which the query belongs. -}
    , _description :: !(TF.Argument Text)
    {- ^ (Optional) A brief explanation of the query. Maximum length of 1024. -}
    , _name        :: !(TF.Argument Text)
    {- ^ (Required) The plain language name for the query. Maximum length of 128. -}
    , _query       :: !(TF.Argument Text)
    {- ^ (Required) The text of the query itself. In other words, all query statements. Maximum length of 262144. -}
    , _computed_id :: !(TF.Attribute Text)
    {- ^ - The unique ID of the query. -}
    } deriving (Show, Eq)

instance TF.ToHCL AthenaNamedQueryResource where
    toHCL AthenaNamedQueryResource{..} = TF.block $ catMaybes
        [ TF.assign "database" <$> TF.argument _database
        , TF.assign "description" <$> TF.argument _description
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "query" <$> TF.argument _query
        ]

instance HasDatabase AthenaNamedQueryResource (TF.Argument Text) where
    database f s@AthenaNamedQueryResource{..} =
        (\a -> s { _database = a } :: AthenaNamedQueryResource)
             <$> f _database

instance HasDescription AthenaNamedQueryResource (TF.Argument Text) where
    description f s@AthenaNamedQueryResource{..} =
        (\a -> s { _description = a } :: AthenaNamedQueryResource)
             <$> f _description

instance HasName AthenaNamedQueryResource (TF.Argument Text) where
    name f s@AthenaNamedQueryResource{..} =
        (\a -> s { _name = a } :: AthenaNamedQueryResource)
             <$> f _name

instance HasQuery AthenaNamedQueryResource (TF.Argument Text) where
    query f s@AthenaNamedQueryResource{..} =
        (\a -> s { _query = a } :: AthenaNamedQueryResource)
             <$> f _query

instance HasComputedId AthenaNamedQueryResource (TF.Attribute Text) where
    computedId f s@AthenaNamedQueryResource{..} =
        (\a -> s { _computed_id = a } :: AthenaNamedQueryResource)
             <$> f _computed_id

athenaNamedQueryResource :: TF.Resource TF.AWS AthenaNamedQueryResource
athenaNamedQueryResource =
    TF.newResource "aws_athena_named_query" $
        AthenaNamedQueryResource {
            _database = TF.Nil
            , _description = TF.Nil
            , _name = TF.Nil
            , _query = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_autoscaling_attachment@ AWS resource.

Provides an AutoScaling Attachment resource. ~> NOTE on AutoScaling Groups
and ASG Attachments: Terraform currently provides both a standalone ASG
Attachment resource (describing an ASG attached to an ELB), and an
<autoscaling_group.html> with @load_balancers@ defined in-line. At this time
you cannot use an ASG with in-line load balancers in conjunction with an ASG
Attachment resource. Doing so will cause a conflict and will overwrite
attachments.
-}
data AutoscalingAttachmentResource = AutoscalingAttachmentResource {
      _alb_target_group_arn   :: !(TF.Argument Text)
    {- ^ (Optional) The ARN of an ALB Target Group. -}
    , _autoscaling_group_name :: !(TF.Argument Text)
    {- ^ (Required) Name of ASG to associate with the ELB. -}
    , _elb                    :: !(TF.Argument Text)
    {- ^ (Optional) The name of the ELB. -}
    } deriving (Show, Eq)

instance TF.ToHCL AutoscalingAttachmentResource where
    toHCL AutoscalingAttachmentResource{..} = TF.block $ catMaybes
        [ TF.assign "alb_target_group_arn" <$> TF.argument _alb_target_group_arn
        , TF.assign "autoscaling_group_name" <$> TF.argument _autoscaling_group_name
        , TF.assign "elb" <$> TF.argument _elb
        ]

instance HasAlbTargetGroupArn AutoscalingAttachmentResource (TF.Argument Text) where
    albTargetGroupArn f s@AutoscalingAttachmentResource{..} =
        (\a -> s { _alb_target_group_arn = a } :: AutoscalingAttachmentResource)
             <$> f _alb_target_group_arn

instance HasAutoscalingGroupName AutoscalingAttachmentResource (TF.Argument Text) where
    autoscalingGroupName f s@AutoscalingAttachmentResource{..} =
        (\a -> s { _autoscaling_group_name = a } :: AutoscalingAttachmentResource)
             <$> f _autoscaling_group_name

instance HasElb AutoscalingAttachmentResource (TF.Argument Text) where
    elb f s@AutoscalingAttachmentResource{..} =
        (\a -> s { _elb = a } :: AutoscalingAttachmentResource)
             <$> f _elb

autoscalingAttachmentResource :: TF.Resource TF.AWS AutoscalingAttachmentResource
autoscalingAttachmentResource =
    TF.newResource "aws_autoscaling_attachment" $
        AutoscalingAttachmentResource {
            _alb_target_group_arn = TF.Nil
            , _autoscaling_group_name = TF.Nil
            , _elb = TF.Nil
            }

{- | The @aws_autoscaling_group@ AWS resource.

Provides an AutoScaling Group resource.
-}
data AutoscalingGroupResource = AutoscalingGroupResource {
      _availability_zones                 :: !(TF.Argument Text)
    {- ^ (Optional) A list of AZs to launch resources in. Required only if you do not specify any @vpc_zone_identifier@ -}
    , _default_cooldown                   :: !(TF.Argument Text)
    {- ^ (Optional) The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. -}
    , _desired_capacity                   :: !(TF.Argument Text)
    {- ^ (Optional) The number of Amazon EC2 instances that should be running in the group. (See also <#waiting-for-capacity> below.) -}
    , _enabled_metrics                    :: !(TF.Argument TF.Bool)
    {- ^ (Optional) A list of metrics to collect. The allowed values are @GroupMinSize@ , @GroupMaxSize@ , @GroupDesiredCapacity@ , @GroupInServiceInstances@ , @GroupPendingInstances@ , @GroupStandbyInstances@ , @GroupTerminatingInstances@ , @GroupTotalInstances@ . -}
    , _force_delete                       :: !(TF.Argument Text)
    {- ^ (Optional) Allows deleting the autoscaling group without waiting for all instances in the pool to terminate.  You can force an autoscaling group to delete even if it's in the process of scaling a resource. Normally, Terraform drains all the instances before deleting the group.  This bypasses that behavior and potentially leaves resources dangling. -}
    , _health_check_grace_period          :: !(TF.Argument Text)
    {- ^ (Optional, Default: 300) Time (in seconds) after instance comes into service before checking health. -}
    , _health_check_type                  :: !(TF.Argument Text)
    {- ^ (Optional) "EC2" or "ELB". Controls how health checking is done. -}
    , _initial_lifecycle_hook             :: !(TF.Argument Text)
    {- ^ (Optional) One or more <http://docs.aws.amazon.com/autoscaling/latest/userguide/lifecycle-hooks.html> to attach to the autoscaling group before instances are launched. The syntax is exactly the same as the separate </docs/providers/aws/r/autoscaling_lifecycle_hooks.html> resource, without the @autoscaling_group_name@ attribute. Please note that this will only work when creating a new autoscaling group. For all other use-cases, please use @aws_autoscaling_lifecycle_hook@ resource. -}
    , _launch_configuration               :: !(TF.Argument Text)
    {- ^ (Required) The name of the launch configuration to use. -}
    , _load_balancers                     :: !(TF.Argument Text)
    {- ^ (Optional) A list of elastic load balancer names to add to the autoscaling group names. -}
    , _max_size                           :: !(TF.Argument Text)
    {- ^ (Required) The maximum size of the auto scale group. -}
    , _metrics_granularity                :: !(TF.Argument Text)
    {- ^ (Optional) The granularity to associate with the metrics to collect. The only valid value is @1Minute@ . Default is @1Minute@ . -}
    , _min_elb_capacity                   :: !(TF.Argument Text)
    {- ^ (Optional) Setting this causes Terraform to wait for this number of instances to show up healthy in the ELB only on creation. Updates will not wait on ELB instance number changes. (See also <#waiting-for-capacity> below.) -}
    , _min_size                           :: !(TF.Argument Text)
    {- ^ (Required) The minimum size of the auto scale group. (See also <#waiting-for-capacity> below.) -}
    , _name                               :: !(TF.Argument Text)
    {- ^ (Optional) The name of the auto scaling group. By default generated by Terraform. -}
    , _name_prefix                        :: !(TF.Argument Text)
    {- ^ (Optional) Creates a unique name beginning with the specified prefix. Conflicts with @name@ . -}
    , _placement_group                    :: !(TF.Argument Text)
    {- ^ (Optional) The name of the placement group into which you'll launch your instances, if any. -}
    , _protect_from_scale_in              :: !(TF.Argument Text)
    {- ^ (Optional) Allows setting instance protection. The autoscaling group will not select instances with this setting for terminination during scale in events. -}
    , _suspended_processes                :: !(TF.Argument Text)
    {- ^ (Optional) A list of processes to suspend for the AutoScaling Group. The allowed values are @Launch@ , @Terminate@ , @HealthCheck@ , @ReplaceUnhealthy@ , @AZRebalance@ , @AlarmNotification@ , @ScheduledActions@ , @AddToLoadBalancer@ . Note that if you suspend either the @Launch@ or @Terminate@ process types, it can prevent your autoscaling group from functioning properly. -}
    , _tag                                :: !(TF.Argument Text)
    {- ^ (Optional) A list of tag blocks. Tags documented below. -}
    , _tags                               :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A list of tag blocks (maps). Tags documented below. -}
    , _target_group_arns                  :: !(TF.Argument Text)
    {- ^ (Optional) A list of @aws_alb_target_group@ ARNs, for use with Application Load Balancing -}
    , _termination_policies               :: !(TF.Argument Text)
    {- ^ (Optional) A list of policies to decide how the instances in the auto scale group should be terminated. The allowed values are @OldestInstance@ , @NewestInstance@ , @OldestLaunchConfiguration@ , @ClosestToNextInstanceHour@ , @Default@ . -}
    , _vpc_zone_identifier                :: !(TF.Argument Text)
    {- ^ (Optional) A list of subnet IDs to launch resources in. -}
    , _wait_for_capacity_timeout          :: !(TF.Argument Text)
    {- ^ (Default: "10m") A maximum <https://golang.org/pkg/time/#ParseDuration> that Terraform should wait for ASG instances to be healthy before timing out.  (See also <#waiting-for-capacity> below.) Setting this to "0" causes Terraform to skip all Capacity Waiting behavior. -}
    , _wait_for_elb_capacity              :: !(TF.Argument Text)
    {- ^ (Optional) Setting this will cause Terraform to wait for exactly this number of healthy instances in all attached load balancers on both create and update operations. (Takes precedence over @min_elb_capacity@ behavior.) (See also <#waiting-for-capacity> below.) -}
    , _computed_arn                       :: !(TF.Attribute Text)
    {- ^ - The ARN for this AutoScaling Group -}
    , _computed_availability_zones        :: !(TF.Attribute Text)
    {- ^ - The availability zones of the autoscale group. -}
    , _computed_default_cooldown          :: !(TF.Attribute Text)
    {- ^ - Time between a scaling activity and the succeeding scaling activity. -}
    , _computed_desired_capacity          :: !(TF.Attribute Text)
    {- ^ -The number of Amazon EC2 instances that should be running in the group. -}
    , _computed_health_check_grace_period :: !(TF.Attribute Text)
    {- ^ - Time after instance comes into service before checking health. -}
    , _computed_health_check_type         :: !(TF.Attribute Text)
    {- ^ - "EC2" or "ELB". Controls how health checking is done. -}
    , _computed_id                        :: !(TF.Attribute Text)
    {- ^ - The autoscaling group id. -}
    , _computed_launch_configuration      :: !(TF.Attribute Text)
    {- ^ - The launch configuration of the autoscale group -}
    , _computed_load_balancers            :: !(TF.Attribute Text)
    {- ^ (Optional) The load balancer names associated with the autoscaling group. -}
    , _computed_max_size                  :: !(TF.Attribute Text)
    {- ^ - The maximum size of the autoscale group -}
    , _computed_min_size                  :: !(TF.Attribute Text)
    {- ^ - The minimum size of the autoscale group -}
    , _computed_name                      :: !(TF.Attribute Text)
    {- ^ - The name of the autoscale group -}
    , _computed_target_group_arns         :: !(TF.Attribute Text)
    {- ^ (Optional) list of Target Group ARNs that apply to this AutoScaling Group -}
    , _computed_vpc_zone_identifier       :: !(TF.Attribute Text)
    {- ^ (Optional) - The VPC zone identifier -}
    } deriving (Show, Eq)

instance TF.ToHCL AutoscalingGroupResource where
    toHCL AutoscalingGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "availability_zones" <$> TF.argument _availability_zones
        , TF.assign "default_cooldown" <$> TF.argument _default_cooldown
        , TF.assign "desired_capacity" <$> TF.argument _desired_capacity
        , TF.assign "enabled_metrics" <$> TF.argument _enabled_metrics
        , TF.assign "force_delete" <$> TF.argument _force_delete
        , TF.assign "health_check_grace_period" <$> TF.argument _health_check_grace_period
        , TF.assign "health_check_type" <$> TF.argument _health_check_type
        , TF.assign "initial_lifecycle_hook" <$> TF.argument _initial_lifecycle_hook
        , TF.assign "launch_configuration" <$> TF.argument _launch_configuration
        , TF.assign "load_balancers" <$> TF.argument _load_balancers
        , TF.assign "max_size" <$> TF.argument _max_size
        , TF.assign "metrics_granularity" <$> TF.argument _metrics_granularity
        , TF.assign "min_elb_capacity" <$> TF.argument _min_elb_capacity
        , TF.assign "min_size" <$> TF.argument _min_size
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "name_prefix" <$> TF.argument _name_prefix
        , TF.assign "placement_group" <$> TF.argument _placement_group
        , TF.assign "protect_from_scale_in" <$> TF.argument _protect_from_scale_in
        , TF.assign "suspended_processes" <$> TF.argument _suspended_processes
        , TF.assign "tag" <$> TF.argument _tag
        , TF.assign "tags" <$> TF.argument _tags
        , TF.assign "target_group_arns" <$> TF.argument _target_group_arns
        , TF.assign "termination_policies" <$> TF.argument _termination_policies
        , TF.assign "vpc_zone_identifier" <$> TF.argument _vpc_zone_identifier
        , TF.assign "wait_for_capacity_timeout" <$> TF.argument _wait_for_capacity_timeout
        , TF.assign "wait_for_elb_capacity" <$> TF.argument _wait_for_elb_capacity
        ]

instance HasAvailabilityZones AutoscalingGroupResource (TF.Argument Text) where
    availabilityZones f s@AutoscalingGroupResource{..} =
        (\a -> s { _availability_zones = a } :: AutoscalingGroupResource)
             <$> f _availability_zones

instance HasDefaultCooldown AutoscalingGroupResource (TF.Argument Text) where
    defaultCooldown f s@AutoscalingGroupResource{..} =
        (\a -> s { _default_cooldown = a } :: AutoscalingGroupResource)
             <$> f _default_cooldown

instance HasDesiredCapacity AutoscalingGroupResource (TF.Argument Text) where
    desiredCapacity f s@AutoscalingGroupResource{..} =
        (\a -> s { _desired_capacity = a } :: AutoscalingGroupResource)
             <$> f _desired_capacity

instance HasEnabledMetrics AutoscalingGroupResource (TF.Argument TF.Bool) where
    enabledMetrics f s@AutoscalingGroupResource{..} =
        (\a -> s { _enabled_metrics = a } :: AutoscalingGroupResource)
             <$> f _enabled_metrics

instance HasForceDelete AutoscalingGroupResource (TF.Argument Text) where
    forceDelete f s@AutoscalingGroupResource{..} =
        (\a -> s { _force_delete = a } :: AutoscalingGroupResource)
             <$> f _force_delete

instance HasHealthCheckGracePeriod AutoscalingGroupResource (TF.Argument Text) where
    healthCheckGracePeriod f s@AutoscalingGroupResource{..} =
        (\a -> s { _health_check_grace_period = a } :: AutoscalingGroupResource)
             <$> f _health_check_grace_period

instance HasHealthCheckType AutoscalingGroupResource (TF.Argument Text) where
    healthCheckType f s@AutoscalingGroupResource{..} =
        (\a -> s { _health_check_type = a } :: AutoscalingGroupResource)
             <$> f _health_check_type

instance HasInitialLifecycleHook AutoscalingGroupResource (TF.Argument Text) where
    initialLifecycleHook f s@AutoscalingGroupResource{..} =
        (\a -> s { _initial_lifecycle_hook = a } :: AutoscalingGroupResource)
             <$> f _initial_lifecycle_hook

instance HasLaunchConfiguration AutoscalingGroupResource (TF.Argument Text) where
    launchConfiguration f s@AutoscalingGroupResource{..} =
        (\a -> s { _launch_configuration = a } :: AutoscalingGroupResource)
             <$> f _launch_configuration

instance HasLoadBalancers AutoscalingGroupResource (TF.Argument Text) where
    loadBalancers f s@AutoscalingGroupResource{..} =
        (\a -> s { _load_balancers = a } :: AutoscalingGroupResource)
             <$> f _load_balancers

instance HasMaxSize AutoscalingGroupResource (TF.Argument Text) where
    maxSize f s@AutoscalingGroupResource{..} =
        (\a -> s { _max_size = a } :: AutoscalingGroupResource)
             <$> f _max_size

instance HasMetricsGranularity AutoscalingGroupResource (TF.Argument Text) where
    metricsGranularity f s@AutoscalingGroupResource{..} =
        (\a -> s { _metrics_granularity = a } :: AutoscalingGroupResource)
             <$> f _metrics_granularity

instance HasMinElbCapacity AutoscalingGroupResource (TF.Argument Text) where
    minElbCapacity f s@AutoscalingGroupResource{..} =
        (\a -> s { _min_elb_capacity = a } :: AutoscalingGroupResource)
             <$> f _min_elb_capacity

instance HasMinSize AutoscalingGroupResource (TF.Argument Text) where
    minSize f s@AutoscalingGroupResource{..} =
        (\a -> s { _min_size = a } :: AutoscalingGroupResource)
             <$> f _min_size

instance HasName AutoscalingGroupResource (TF.Argument Text) where
    name f s@AutoscalingGroupResource{..} =
        (\a -> s { _name = a } :: AutoscalingGroupResource)
             <$> f _name

instance HasNamePrefix AutoscalingGroupResource (TF.Argument Text) where
    namePrefix f s@AutoscalingGroupResource{..} =
        (\a -> s { _name_prefix = a } :: AutoscalingGroupResource)
             <$> f _name_prefix

instance HasPlacementGroup AutoscalingGroupResource (TF.Argument Text) where
    placementGroup f s@AutoscalingGroupResource{..} =
        (\a -> s { _placement_group = a } :: AutoscalingGroupResource)
             <$> f _placement_group

instance HasProtectFromScaleIn AutoscalingGroupResource (TF.Argument Text) where
    protectFromScaleIn f s@AutoscalingGroupResource{..} =
        (\a -> s { _protect_from_scale_in = a } :: AutoscalingGroupResource)
             <$> f _protect_from_scale_in

instance HasSuspendedProcesses AutoscalingGroupResource (TF.Argument Text) where
    suspendedProcesses f s@AutoscalingGroupResource{..} =
        (\a -> s { _suspended_processes = a } :: AutoscalingGroupResource)
             <$> f _suspended_processes

instance HasTag AutoscalingGroupResource (TF.Argument Text) where
    tag f s@AutoscalingGroupResource{..} =
        (\a -> s { _tag = a } :: AutoscalingGroupResource)
             <$> f _tag

instance HasTags AutoscalingGroupResource (TF.Argument TF.Tags) where
    tags f s@AutoscalingGroupResource{..} =
        (\a -> s { _tags = a } :: AutoscalingGroupResource)
             <$> f _tags

instance HasTargetGroupArns AutoscalingGroupResource (TF.Argument Text) where
    targetGroupArns f s@AutoscalingGroupResource{..} =
        (\a -> s { _target_group_arns = a } :: AutoscalingGroupResource)
             <$> f _target_group_arns

instance HasTerminationPolicies AutoscalingGroupResource (TF.Argument Text) where
    terminationPolicies f s@AutoscalingGroupResource{..} =
        (\a -> s { _termination_policies = a } :: AutoscalingGroupResource)
             <$> f _termination_policies

instance HasVpcZoneIdentifier AutoscalingGroupResource (TF.Argument Text) where
    vpcZoneIdentifier f s@AutoscalingGroupResource{..} =
        (\a -> s { _vpc_zone_identifier = a } :: AutoscalingGroupResource)
             <$> f _vpc_zone_identifier

instance HasWaitForCapacityTimeout AutoscalingGroupResource (TF.Argument Text) where
    waitForCapacityTimeout f s@AutoscalingGroupResource{..} =
        (\a -> s { _wait_for_capacity_timeout = a } :: AutoscalingGroupResource)
             <$> f _wait_for_capacity_timeout

instance HasWaitForElbCapacity AutoscalingGroupResource (TF.Argument Text) where
    waitForElbCapacity f s@AutoscalingGroupResource{..} =
        (\a -> s { _wait_for_elb_capacity = a } :: AutoscalingGroupResource)
             <$> f _wait_for_elb_capacity

instance HasComputedArn AutoscalingGroupResource (TF.Attribute Text) where
    computedArn f s@AutoscalingGroupResource{..} =
        (\a -> s { _computed_arn = a } :: AutoscalingGroupResource)
             <$> f _computed_arn

instance HasComputedAvailabilityZones AutoscalingGroupResource (TF.Attribute Text) where
    computedAvailabilityZones f s@AutoscalingGroupResource{..} =
        (\a -> s { _computed_availability_zones = a } :: AutoscalingGroupResource)
             <$> f _computed_availability_zones

instance HasComputedDefaultCooldown AutoscalingGroupResource (TF.Attribute Text) where
    computedDefaultCooldown f s@AutoscalingGroupResource{..} =
        (\a -> s { _computed_default_cooldown = a } :: AutoscalingGroupResource)
             <$> f _computed_default_cooldown

instance HasComputedDesiredCapacity AutoscalingGroupResource (TF.Attribute Text) where
    computedDesiredCapacity f s@AutoscalingGroupResource{..} =
        (\a -> s { _computed_desired_capacity = a } :: AutoscalingGroupResource)
             <$> f _computed_desired_capacity

instance HasComputedHealthCheckGracePeriod AutoscalingGroupResource (TF.Attribute Text) where
    computedHealthCheckGracePeriod f s@AutoscalingGroupResource{..} =
        (\a -> s { _computed_health_check_grace_period = a } :: AutoscalingGroupResource)
             <$> f _computed_health_check_grace_period

instance HasComputedHealthCheckType AutoscalingGroupResource (TF.Attribute Text) where
    computedHealthCheckType f s@AutoscalingGroupResource{..} =
        (\a -> s { _computed_health_check_type = a } :: AutoscalingGroupResource)
             <$> f _computed_health_check_type

instance HasComputedId AutoscalingGroupResource (TF.Attribute Text) where
    computedId f s@AutoscalingGroupResource{..} =
        (\a -> s { _computed_id = a } :: AutoscalingGroupResource)
             <$> f _computed_id

instance HasComputedLaunchConfiguration AutoscalingGroupResource (TF.Attribute Text) where
    computedLaunchConfiguration f s@AutoscalingGroupResource{..} =
        (\a -> s { _computed_launch_configuration = a } :: AutoscalingGroupResource)
             <$> f _computed_launch_configuration

instance HasComputedLoadBalancers AutoscalingGroupResource (TF.Attribute Text) where
    computedLoadBalancers f s@AutoscalingGroupResource{..} =
        (\a -> s { _computed_load_balancers = a } :: AutoscalingGroupResource)
             <$> f _computed_load_balancers

instance HasComputedMaxSize AutoscalingGroupResource (TF.Attribute Text) where
    computedMaxSize f s@AutoscalingGroupResource{..} =
        (\a -> s { _computed_max_size = a } :: AutoscalingGroupResource)
             <$> f _computed_max_size

instance HasComputedMinSize AutoscalingGroupResource (TF.Attribute Text) where
    computedMinSize f s@AutoscalingGroupResource{..} =
        (\a -> s { _computed_min_size = a } :: AutoscalingGroupResource)
             <$> f _computed_min_size

instance HasComputedName AutoscalingGroupResource (TF.Attribute Text) where
    computedName f s@AutoscalingGroupResource{..} =
        (\a -> s { _computed_name = a } :: AutoscalingGroupResource)
             <$> f _computed_name

instance HasComputedTargetGroupArns AutoscalingGroupResource (TF.Attribute Text) where
    computedTargetGroupArns f s@AutoscalingGroupResource{..} =
        (\a -> s { _computed_target_group_arns = a } :: AutoscalingGroupResource)
             <$> f _computed_target_group_arns

instance HasComputedVpcZoneIdentifier AutoscalingGroupResource (TF.Attribute Text) where
    computedVpcZoneIdentifier f s@AutoscalingGroupResource{..} =
        (\a -> s { _computed_vpc_zone_identifier = a } :: AutoscalingGroupResource)
             <$> f _computed_vpc_zone_identifier

autoscalingGroupResource :: TF.Resource TF.AWS AutoscalingGroupResource
autoscalingGroupResource =
    TF.newResource "aws_autoscaling_group" $
        AutoscalingGroupResource {
            _availability_zones = TF.Nil
            , _default_cooldown = TF.Nil
            , _desired_capacity = TF.Nil
            , _enabled_metrics = TF.Nil
            , _force_delete = TF.Nil
            , _health_check_grace_period = TF.Nil
            , _health_check_type = TF.Nil
            , _initial_lifecycle_hook = TF.Nil
            , _launch_configuration = TF.Nil
            , _load_balancers = TF.Nil
            , _max_size = TF.Nil
            , _metrics_granularity = TF.Nil
            , _min_elb_capacity = TF.Nil
            , _min_size = TF.Nil
            , _name = TF.Nil
            , _name_prefix = TF.Nil
            , _placement_group = TF.Nil
            , _protect_from_scale_in = TF.Nil
            , _suspended_processes = TF.Nil
            , _tag = TF.Nil
            , _tags = TF.Nil
            , _target_group_arns = TF.Nil
            , _termination_policies = TF.Nil
            , _vpc_zone_identifier = TF.Nil
            , _wait_for_capacity_timeout = TF.Nil
            , _wait_for_elb_capacity = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_availability_zones = TF.Compute "availability_zones"
            , _computed_default_cooldown = TF.Compute "default_cooldown"
            , _computed_desired_capacity = TF.Compute "desired_capacity"
            , _computed_health_check_grace_period = TF.Compute "health_check_grace_period"
            , _computed_health_check_type = TF.Compute "health_check_type"
            , _computed_id = TF.Compute "id"
            , _computed_launch_configuration = TF.Compute "launch_configuration"
            , _computed_load_balancers = TF.Compute "load_balancers"
            , _computed_max_size = TF.Compute "max_size"
            , _computed_min_size = TF.Compute "min_size"
            , _computed_name = TF.Compute "name"
            , _computed_target_group_arns = TF.Compute "target_group_arns"
            , _computed_vpc_zone_identifier = TF.Compute "vpc_zone_identifier"
            }

{- | The @aws_autoscaling_lifecycle_hook@ AWS resource.

Provides an AutoScaling Lifecycle Hook resource. ~> NOTE: Terraform has two
types of ways you can add lifecycle hooks - via the @initial_lifecycle_hook@
attribute from the </docs/providers/aws/r/autoscaling_group.html> resource,
or via this one. Hooks added via this resource will not be added until the
autoscaling group has been created, and depending on your
</docs/providers/aws/r/autoscaling_group.html#waiting-for-capacity>
settings, after the initial instances have been launched, creating
unintended behavior. If you need hooks to run on all instances, add them
with @initial_lifecycle_hook@ in
</docs/providers/aws/r/autoscaling_group.html> , but take care to not
duplicate those hooks with this resource.
-}
data AutoscalingLifecycleHookResource = AutoscalingLifecycleHookResource {
      _autoscaling_group_name  :: !(TF.Argument Text)
    {- ^ (Required) The name of the Auto Scaling group to which you want to assign the lifecycle hook -}
    , _default_result          :: !(TF.Argument Text)
    {- ^ (Optional) Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. The value for this parameter can be either CONTINUE or ABANDON. The default value for this parameter is ABANDON. -}
    , _heartbeat_timeout       :: !(TF.Argument Text)
    {- ^ (Optional) Defines the amount of time, in seconds, that can elapse before the lifecycle hook times out. When the lifecycle hook times out, Auto Scaling performs the action defined in the DefaultResult parameter -}
    , _lifecycle_transition    :: !(TF.Argument Text)
    {- ^ (Required) The instance state to which you want to attach the lifecycle hook. For a list of lifecycle hook types, see <https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-lifecycle-hook-types.html#examples> -}
    , _name                    :: !(TF.Argument Text)
    {- ^ (Required) The name of the lifecycle hook. -}
    , _notification_metadata   :: !(TF.Argument Text)
    {- ^ (Optional) Contains additional information that you want to include any time Auto Scaling sends a message to the notification target. -}
    , _notification_target_arn :: !(TF.Argument Text)
    {- ^ (Optional) The ARN of the notification target that Auto Scaling will use to notify you when an instance is in the transition state for the lifecycle hook. This ARN target can be either an SQS queue or an SNS topic. -}
    , _role_arn                :: !(TF.Argument Text)
    {- ^ (Optional) The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target. -}
    } deriving (Show, Eq)

instance TF.ToHCL AutoscalingLifecycleHookResource where
    toHCL AutoscalingLifecycleHookResource{..} = TF.block $ catMaybes
        [ TF.assign "autoscaling_group_name" <$> TF.argument _autoscaling_group_name
        , TF.assign "default_result" <$> TF.argument _default_result
        , TF.assign "heartbeat_timeout" <$> TF.argument _heartbeat_timeout
        , TF.assign "lifecycle_transition" <$> TF.argument _lifecycle_transition
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "notification_metadata" <$> TF.argument _notification_metadata
        , TF.assign "notification_target_arn" <$> TF.argument _notification_target_arn
        , TF.assign "role_arn" <$> TF.argument _role_arn
        ]

instance HasAutoscalingGroupName AutoscalingLifecycleHookResource (TF.Argument Text) where
    autoscalingGroupName f s@AutoscalingLifecycleHookResource{..} =
        (\a -> s { _autoscaling_group_name = a } :: AutoscalingLifecycleHookResource)
             <$> f _autoscaling_group_name

instance HasDefaultResult AutoscalingLifecycleHookResource (TF.Argument Text) where
    defaultResult f s@AutoscalingLifecycleHookResource{..} =
        (\a -> s { _default_result = a } :: AutoscalingLifecycleHookResource)
             <$> f _default_result

instance HasHeartbeatTimeout AutoscalingLifecycleHookResource (TF.Argument Text) where
    heartbeatTimeout f s@AutoscalingLifecycleHookResource{..} =
        (\a -> s { _heartbeat_timeout = a } :: AutoscalingLifecycleHookResource)
             <$> f _heartbeat_timeout

instance HasLifecycleTransition AutoscalingLifecycleHookResource (TF.Argument Text) where
    lifecycleTransition f s@AutoscalingLifecycleHookResource{..} =
        (\a -> s { _lifecycle_transition = a } :: AutoscalingLifecycleHookResource)
             <$> f _lifecycle_transition

instance HasName AutoscalingLifecycleHookResource (TF.Argument Text) where
    name f s@AutoscalingLifecycleHookResource{..} =
        (\a -> s { _name = a } :: AutoscalingLifecycleHookResource)
             <$> f _name

instance HasNotificationMetadata AutoscalingLifecycleHookResource (TF.Argument Text) where
    notificationMetadata f s@AutoscalingLifecycleHookResource{..} =
        (\a -> s { _notification_metadata = a } :: AutoscalingLifecycleHookResource)
             <$> f _notification_metadata

instance HasNotificationTargetArn AutoscalingLifecycleHookResource (TF.Argument Text) where
    notificationTargetArn f s@AutoscalingLifecycleHookResource{..} =
        (\a -> s { _notification_target_arn = a } :: AutoscalingLifecycleHookResource)
             <$> f _notification_target_arn

instance HasRoleArn AutoscalingLifecycleHookResource (TF.Argument Text) where
    roleArn f s@AutoscalingLifecycleHookResource{..} =
        (\a -> s { _role_arn = a } :: AutoscalingLifecycleHookResource)
             <$> f _role_arn

autoscalingLifecycleHookResource :: TF.Resource TF.AWS AutoscalingLifecycleHookResource
autoscalingLifecycleHookResource =
    TF.newResource "aws_autoscaling_lifecycle_hook" $
        AutoscalingLifecycleHookResource {
            _autoscaling_group_name = TF.Nil
            , _default_result = TF.Nil
            , _heartbeat_timeout = TF.Nil
            , _lifecycle_transition = TF.Nil
            , _name = TF.Nil
            , _notification_metadata = TF.Nil
            , _notification_target_arn = TF.Nil
            , _role_arn = TF.Nil
            }

{- | The @aws_autoscaling_notification@ AWS resource.

Provides an AutoScaling Group with Notification support, via SNS Topics.
Each of the @notifications@ map to a
<https://docs.aws.amazon.com/AutoScaling/latest/APIReference/API_DescribeNotificationConfigurations.html>
inside Amazon Web Services, and are applied to each AutoScaling Group you
supply.
-}
data AutoscalingNotificationResource = AutoscalingNotificationResource {
      _group_names   :: !(TF.Argument Text)
    {- ^ (Required) A list of AutoScaling Group Names -}
    , _notifications :: !(TF.Argument Text)
    {- ^ (Required) A list of Notification Types that trigger notifications. Acceptable values are documented <https://docs.aws.amazon.com/AutoScaling/latest/APIReference/API_NotificationConfiguration.html> -}
    , _topic_arn     :: !(TF.Argument Text)
    {- ^ (Required) The Topic ARN for notifications to be sent through -}
    } deriving (Show, Eq)

instance TF.ToHCL AutoscalingNotificationResource where
    toHCL AutoscalingNotificationResource{..} = TF.block $ catMaybes
        [ TF.assign "group_names" <$> TF.argument _group_names
        , TF.assign "notifications" <$> TF.argument _notifications
        , TF.assign "topic_arn" <$> TF.argument _topic_arn
        ]

instance HasGroupNames AutoscalingNotificationResource (TF.Argument Text) where
    groupNames f s@AutoscalingNotificationResource{..} =
        (\a -> s { _group_names = a } :: AutoscalingNotificationResource)
             <$> f _group_names

instance HasNotifications AutoscalingNotificationResource (TF.Argument Text) where
    notifications f s@AutoscalingNotificationResource{..} =
        (\a -> s { _notifications = a } :: AutoscalingNotificationResource)
             <$> f _notifications

instance HasTopicArn AutoscalingNotificationResource (TF.Argument Text) where
    topicArn f s@AutoscalingNotificationResource{..} =
        (\a -> s { _topic_arn = a } :: AutoscalingNotificationResource)
             <$> f _topic_arn

autoscalingNotificationResource :: TF.Resource TF.AWS AutoscalingNotificationResource
autoscalingNotificationResource =
    TF.newResource "aws_autoscaling_notification" $
        AutoscalingNotificationResource {
            _group_names = TF.Nil
            , _notifications = TF.Nil
            , _topic_arn = TF.Nil
            }

{- | The @aws_autoscaling_policy@ AWS resource.

Provides an AutoScaling Scaling Policy resource. ~> NOTE: You may want to
omit @desired_capacity@ attribute from attached @aws_autoscaling_group@ when
using autoscaling policies. It's good practice to pick either
<https://docs.aws.amazon.com/AutoScaling/latest/DeveloperGuide/as-manual-scaling.html>
or
<https://docs.aws.amazon.com/AutoScaling/latest/DeveloperGuide/as-scale-based-on-demand.html>
(policy-based) scaling.
-}
data AutoscalingPolicyResource = AutoscalingPolicyResource {
      _adjustment_type                 :: !(TF.Argument Text)
    {- ^ (Required) Specifies whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are @ChangeInCapacity@ , @ExactCapacity@ , and @PercentChangeInCapacity@ . -}
    , _autoscaling_group_name          :: !(TF.Argument Text)
    {- ^ (Required) The name of the autoscaling group. -}
    , _name                            :: !(TF.Argument Text)
    {- ^ (Required) The name of the policy. -}
    , _policy_type                     :: !(TF.Argument Text)
    {- ^ (Optional) The policy type, either "SimpleScaling" or "StepScaling". If this value isn't provided, AWS will default to "SimpleScaling." -}
    , _computed_adjustment_type        :: !(TF.Attribute Text)
    {- ^ - The scaling policy's adjustment type. -}
    , _computed_arn                    :: !(TF.Attribute Text)
    {- ^ - The ARN assigned by AWS to the scaling policy. -}
    , _computed_autoscaling_group_name :: !(TF.Attribute Text)
    {- ^ - The scaling policy's assigned autoscaling group. -}
    , _computed_name                   :: !(TF.Attribute Text)
    {- ^ - The scaling policy's name. -}
    , _computed_policy_type            :: !(TF.Attribute Text)
    {- ^ - The scaling policy's type. -}
    } deriving (Show, Eq)

instance TF.ToHCL AutoscalingPolicyResource where
    toHCL AutoscalingPolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "adjustment_type" <$> TF.argument _adjustment_type
        , TF.assign "autoscaling_group_name" <$> TF.argument _autoscaling_group_name
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "policy_type" <$> TF.argument _policy_type
        ]

instance HasAdjustmentType AutoscalingPolicyResource (TF.Argument Text) where
    adjustmentType f s@AutoscalingPolicyResource{..} =
        (\a -> s { _adjustment_type = a } :: AutoscalingPolicyResource)
             <$> f _adjustment_type

instance HasAutoscalingGroupName AutoscalingPolicyResource (TF.Argument Text) where
    autoscalingGroupName f s@AutoscalingPolicyResource{..} =
        (\a -> s { _autoscaling_group_name = a } :: AutoscalingPolicyResource)
             <$> f _autoscaling_group_name

instance HasName AutoscalingPolicyResource (TF.Argument Text) where
    name f s@AutoscalingPolicyResource{..} =
        (\a -> s { _name = a } :: AutoscalingPolicyResource)
             <$> f _name

instance HasPolicyType AutoscalingPolicyResource (TF.Argument Text) where
    policyType f s@AutoscalingPolicyResource{..} =
        (\a -> s { _policy_type = a } :: AutoscalingPolicyResource)
             <$> f _policy_type

instance HasComputedAdjustmentType AutoscalingPolicyResource (TF.Attribute Text) where
    computedAdjustmentType f s@AutoscalingPolicyResource{..} =
        (\a -> s { _computed_adjustment_type = a } :: AutoscalingPolicyResource)
             <$> f _computed_adjustment_type

instance HasComputedArn AutoscalingPolicyResource (TF.Attribute Text) where
    computedArn f s@AutoscalingPolicyResource{..} =
        (\a -> s { _computed_arn = a } :: AutoscalingPolicyResource)
             <$> f _computed_arn

instance HasComputedAutoscalingGroupName AutoscalingPolicyResource (TF.Attribute Text) where
    computedAutoscalingGroupName f s@AutoscalingPolicyResource{..} =
        (\a -> s { _computed_autoscaling_group_name = a } :: AutoscalingPolicyResource)
             <$> f _computed_autoscaling_group_name

instance HasComputedName AutoscalingPolicyResource (TF.Attribute Text) where
    computedName f s@AutoscalingPolicyResource{..} =
        (\a -> s { _computed_name = a } :: AutoscalingPolicyResource)
             <$> f _computed_name

instance HasComputedPolicyType AutoscalingPolicyResource (TF.Attribute Text) where
    computedPolicyType f s@AutoscalingPolicyResource{..} =
        (\a -> s { _computed_policy_type = a } :: AutoscalingPolicyResource)
             <$> f _computed_policy_type

autoscalingPolicyResource :: TF.Resource TF.AWS AutoscalingPolicyResource
autoscalingPolicyResource =
    TF.newResource "aws_autoscaling_policy" $
        AutoscalingPolicyResource {
            _adjustment_type = TF.Nil
            , _autoscaling_group_name = TF.Nil
            , _name = TF.Nil
            , _policy_type = TF.Nil
            , _computed_adjustment_type = TF.Compute "adjustment_type"
            , _computed_arn = TF.Compute "arn"
            , _computed_autoscaling_group_name = TF.Compute "autoscaling_group_name"
            , _computed_name = TF.Compute "name"
            , _computed_policy_type = TF.Compute "policy_type"
            }

{- | The @aws_autoscaling_schedule@ AWS resource.

Provides an AutoScaling Schedule resource.
-}
data AutoscalingScheduleResource = AutoscalingScheduleResource {
      _autoscaling_group_name :: !(TF.Argument Text)
    {- ^ (Required) The name or Amazon Resource Name (ARN) of the Auto Scaling group. -}
    , _desired_capacity       :: !(TF.Argument Text)
    {- ^ (Optional) The number of EC2 instances that should be running in the group. Default 0.  Set to -1 if you don't want to change the desired capacity at the scheduled time. -}
    , _end_time               :: !(TF.Argument Text)
    {- ^ (Optional) The time for this action to end, in "YYYY-MM-DDThh:mm:ssZ" format in UTC/GMT only (for example, 2014-06-01T00:00:00Z ). If you try to schedule your action in the past, Auto Scaling returns an error message. -}
    , _max_size               :: !(TF.Argument Text)
    {- ^ (Optional) The maximum size for the Auto Scaling group. Default 0. Set to -1 if you don't want to change the maximum size at the scheduled time. -}
    , _min_size               :: !(TF.Argument Text)
    {- ^ (Optional) The minimum size for the Auto Scaling group. Default 0. Set to -1 if you don't want to change the minimum size at the scheduled time. -}
    , _recurrence             :: !(TF.Argument Text)
    {- ^ (Optional) The time when recurring future actions will start. Start time is specified by the user following the Unix cron syntax format. -}
    , _scheduled_action_name  :: !(TF.Argument Text)
    {- ^ (Required) The name of this scaling action. -}
    , _start_time             :: !(TF.Argument Text)
    {- ^ (Optional) The time for this action to start, in "YYYY-MM-DDThh:mm:ssZ" format in UTC/GMT only (for example, 2014-06-01T00:00:00Z ). If you try to schedule your action in the past, Auto Scaling returns an error message. -}
    , _computed_arn           :: !(TF.Attribute Text)
    {- ^ - The ARN assigned by AWS to the autoscaling schedule. -}
    } deriving (Show, Eq)

instance TF.ToHCL AutoscalingScheduleResource where
    toHCL AutoscalingScheduleResource{..} = TF.block $ catMaybes
        [ TF.assign "autoscaling_group_name" <$> TF.argument _autoscaling_group_name
        , TF.assign "desired_capacity" <$> TF.argument _desired_capacity
        , TF.assign "end_time" <$> TF.argument _end_time
        , TF.assign "max_size" <$> TF.argument _max_size
        , TF.assign "min_size" <$> TF.argument _min_size
        , TF.assign "recurrence" <$> TF.argument _recurrence
        , TF.assign "scheduled_action_name" <$> TF.argument _scheduled_action_name
        , TF.assign "start_time" <$> TF.argument _start_time
        ]

instance HasAutoscalingGroupName AutoscalingScheduleResource (TF.Argument Text) where
    autoscalingGroupName f s@AutoscalingScheduleResource{..} =
        (\a -> s { _autoscaling_group_name = a } :: AutoscalingScheduleResource)
             <$> f _autoscaling_group_name

instance HasDesiredCapacity AutoscalingScheduleResource (TF.Argument Text) where
    desiredCapacity f s@AutoscalingScheduleResource{..} =
        (\a -> s { _desired_capacity = a } :: AutoscalingScheduleResource)
             <$> f _desired_capacity

instance HasEndTime AutoscalingScheduleResource (TF.Argument Text) where
    endTime f s@AutoscalingScheduleResource{..} =
        (\a -> s { _end_time = a } :: AutoscalingScheduleResource)
             <$> f _end_time

instance HasMaxSize AutoscalingScheduleResource (TF.Argument Text) where
    maxSize f s@AutoscalingScheduleResource{..} =
        (\a -> s { _max_size = a } :: AutoscalingScheduleResource)
             <$> f _max_size

instance HasMinSize AutoscalingScheduleResource (TF.Argument Text) where
    minSize f s@AutoscalingScheduleResource{..} =
        (\a -> s { _min_size = a } :: AutoscalingScheduleResource)
             <$> f _min_size

instance HasRecurrence AutoscalingScheduleResource (TF.Argument Text) where
    recurrence f s@AutoscalingScheduleResource{..} =
        (\a -> s { _recurrence = a } :: AutoscalingScheduleResource)
             <$> f _recurrence

instance HasScheduledActionName AutoscalingScheduleResource (TF.Argument Text) where
    scheduledActionName f s@AutoscalingScheduleResource{..} =
        (\a -> s { _scheduled_action_name = a } :: AutoscalingScheduleResource)
             <$> f _scheduled_action_name

instance HasStartTime AutoscalingScheduleResource (TF.Argument Text) where
    startTime f s@AutoscalingScheduleResource{..} =
        (\a -> s { _start_time = a } :: AutoscalingScheduleResource)
             <$> f _start_time

instance HasComputedArn AutoscalingScheduleResource (TF.Attribute Text) where
    computedArn f s@AutoscalingScheduleResource{..} =
        (\a -> s { _computed_arn = a } :: AutoscalingScheduleResource)
             <$> f _computed_arn

autoscalingScheduleResource :: TF.Resource TF.AWS AutoscalingScheduleResource
autoscalingScheduleResource =
    TF.newResource "aws_autoscaling_schedule" $
        AutoscalingScheduleResource {
            _autoscaling_group_name = TF.Nil
            , _desired_capacity = TF.Nil
            , _end_time = TF.Nil
            , _max_size = TF.Nil
            , _min_size = TF.Nil
            , _recurrence = TF.Nil
            , _scheduled_action_name = TF.Nil
            , _start_time = TF.Nil
            , _computed_arn = TF.Compute "arn"
            }

{- | The @aws_batch_compute_environment@ AWS resource.

Creates a AWS Batch compute environment. Compute environments contain the
Amazon ECS container instances that are used to run containerized batch
jobs. For information about AWS Batch, see
<http://docs.aws.amazon.com/batch/latest/userguide/what-is-batch.html> . For
information about compute environment, see
<http://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html>
. ~> Note: To prevent a race condition during environment deletion, make
sure to set @depends_on@ to the related @aws_iam_role_policy_attachment@ ;
otherwise, the policy may be destroyed too soon and the compute environment
will then get stuck in the @DELETING@ state, see
<http://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html> .
-}
data BatchComputeEnvironmentResource = BatchComputeEnvironmentResource {
      _compute_environment_name :: !(TF.Argument Text)
    {- ^ (Required) The name for your compute environment. Up to 128 letters (uppercase and lowercase), numbers, and underscores are allowed. -}
    , _compute_resources        :: !(TF.Argument Text)
    {- ^ (Optional) Details of the compute resources managed by the compute environment. This parameter is required for managed compute environments. See details below. -}
    , _service_role             :: !(TF.Argument Text)
    {- ^ (Required) The full Amazon Resource Name (ARN) of the IAM role that allows AWS Batch to make calls to other AWS services on your behalf. -}
    , _state                    :: !(TF.Argument Text)
    {- ^ (Optional) The state of the compute environment. If the state is @ENABLED@ , then the compute environment accepts jobs from a queue and can scale out automatically based on queues. Valid items are @ENABLED@ or @DISABLED@ . Defaults to @ENABLED@ . -}
    , _type'                    :: !(TF.Argument Text)
    {- ^ (Required) The type of the compute environment. Valid items are @MANAGED@ or @UNMANAGED@ . -}
    , _computed_arn             :: !(TF.Attribute Text)
    {- ^ - The Amazon Resource Name (ARN) of the compute environment. -}
    , _computed_ecs_cluster_arn :: !(TF.Attribute Text)
    {- ^ - The Amazon Resource Name (ARN) of the underlying Amazon ECS cluster used by the compute environment. -}
    , _computed_status          :: !(TF.Attribute Text)
    {- ^ - The current status of the compute environment (for example, CREATING or VALID). -}
    , _computed_status_reason   :: !(TF.Attribute Text)
    {- ^ - A short, human-readable string to provide additional details about the current status of the compute environment. -}
    } deriving (Show, Eq)

instance TF.ToHCL BatchComputeEnvironmentResource where
    toHCL BatchComputeEnvironmentResource{..} = TF.block $ catMaybes
        [ TF.assign "compute_environment_name" <$> TF.argument _compute_environment_name
        , TF.assign "compute_resources" <$> TF.argument _compute_resources
        , TF.assign "service_role" <$> TF.argument _service_role
        , TF.assign "state" <$> TF.argument _state
        , TF.assign "type" <$> TF.argument _type'
        ]

instance HasComputeEnvironmentName BatchComputeEnvironmentResource (TF.Argument Text) where
    computeEnvironmentName f s@BatchComputeEnvironmentResource{..} =
        (\a -> s { _compute_environment_name = a } :: BatchComputeEnvironmentResource)
             <$> f _compute_environment_name

instance HasComputeResources BatchComputeEnvironmentResource (TF.Argument Text) where
    computeResources f s@BatchComputeEnvironmentResource{..} =
        (\a -> s { _compute_resources = a } :: BatchComputeEnvironmentResource)
             <$> f _compute_resources

instance HasServiceRole BatchComputeEnvironmentResource (TF.Argument Text) where
    serviceRole f s@BatchComputeEnvironmentResource{..} =
        (\a -> s { _service_role = a } :: BatchComputeEnvironmentResource)
             <$> f _service_role

instance HasState BatchComputeEnvironmentResource (TF.Argument Text) where
    state f s@BatchComputeEnvironmentResource{..} =
        (\a -> s { _state = a } :: BatchComputeEnvironmentResource)
             <$> f _state

instance HasType' BatchComputeEnvironmentResource (TF.Argument Text) where
    type' f s@BatchComputeEnvironmentResource{..} =
        (\a -> s { _type' = a } :: BatchComputeEnvironmentResource)
             <$> f _type'

instance HasComputedArn BatchComputeEnvironmentResource (TF.Attribute Text) where
    computedArn f s@BatchComputeEnvironmentResource{..} =
        (\a -> s { _computed_arn = a } :: BatchComputeEnvironmentResource)
             <$> f _computed_arn

instance HasComputedEcsClusterArn BatchComputeEnvironmentResource (TF.Attribute Text) where
    computedEcsClusterArn f s@BatchComputeEnvironmentResource{..} =
        (\a -> s { _computed_ecs_cluster_arn = a } :: BatchComputeEnvironmentResource)
             <$> f _computed_ecs_cluster_arn

instance HasComputedStatus BatchComputeEnvironmentResource (TF.Attribute Text) where
    computedStatus f s@BatchComputeEnvironmentResource{..} =
        (\a -> s { _computed_status = a } :: BatchComputeEnvironmentResource)
             <$> f _computed_status

instance HasComputedStatusReason BatchComputeEnvironmentResource (TF.Attribute Text) where
    computedStatusReason f s@BatchComputeEnvironmentResource{..} =
        (\a -> s { _computed_status_reason = a } :: BatchComputeEnvironmentResource)
             <$> f _computed_status_reason

batchComputeEnvironmentResource :: TF.Resource TF.AWS BatchComputeEnvironmentResource
batchComputeEnvironmentResource =
    TF.newResource "aws_batch_compute_environment" $
        BatchComputeEnvironmentResource {
            _compute_environment_name = TF.Nil
            , _compute_resources = TF.Nil
            , _service_role = TF.Nil
            , _state = TF.Nil
            , _type' = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_ecs_cluster_arn = TF.Compute "ecs_cluster_arn"
            , _computed_status = TF.Compute "status"
            , _computed_status_reason = TF.Compute "status_reason"
            }

{- | The @aws_batch_job_definition@ AWS resource.

Provides a Batch Job Definition resource.
-}
data BatchJobDefinitionResource = BatchJobDefinitionResource {
      _container_properties :: !(TF.Argument Text)
    {- ^ (Optional) A valid <http://docs.aws.amazon.com/batch/latest/APIReference/API_RegisterJobDefinition.html> provided as a single valid JSON document. This parameter is required if the @type@ parameter is @container@ . -}
    , _name                 :: !(TF.Argument Text)
    {- ^ (Required) Specifies the name of the job definition. -}
    , _parameters           :: !(TF.Argument Text)
    {- ^ (Optional) Specifies the parameter substitution placeholders to set in the job definition. -}
    , _retry_strategy       :: !(TF.Argument Text)
    {- ^ (Optional) Specifies the retry strategy to use for failed jobs that are submitted with this job definition. Maximum number of @retry_strategy@ is @1@ .  Defined below. -}
    , _type'                :: !(TF.Argument Text)
    {- ^ (Required) The type of job definition.  Must be @container@ -}
    } deriving (Show, Eq)

instance TF.ToHCL BatchJobDefinitionResource where
    toHCL BatchJobDefinitionResource{..} = TF.block $ catMaybes
        [ TF.assign "container_properties" <$> TF.argument _container_properties
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "parameters" <$> TF.argument _parameters
        , TF.assign "retry_strategy" <$> TF.argument _retry_strategy
        , TF.assign "type" <$> TF.argument _type'
        ]

instance HasContainerProperties BatchJobDefinitionResource (TF.Argument Text) where
    containerProperties f s@BatchJobDefinitionResource{..} =
        (\a -> s { _container_properties = a } :: BatchJobDefinitionResource)
             <$> f _container_properties

instance HasName BatchJobDefinitionResource (TF.Argument Text) where
    name f s@BatchJobDefinitionResource{..} =
        (\a -> s { _name = a } :: BatchJobDefinitionResource)
             <$> f _name

instance HasParameters BatchJobDefinitionResource (TF.Argument Text) where
    parameters f s@BatchJobDefinitionResource{..} =
        (\a -> s { _parameters = a } :: BatchJobDefinitionResource)
             <$> f _parameters

instance HasRetryStrategy BatchJobDefinitionResource (TF.Argument Text) where
    retryStrategy f s@BatchJobDefinitionResource{..} =
        (\a -> s { _retry_strategy = a } :: BatchJobDefinitionResource)
             <$> f _retry_strategy

instance HasType' BatchJobDefinitionResource (TF.Argument Text) where
    type' f s@BatchJobDefinitionResource{..} =
        (\a -> s { _type' = a } :: BatchJobDefinitionResource)
             <$> f _type'

batchJobDefinitionResource :: TF.Resource TF.AWS BatchJobDefinitionResource
batchJobDefinitionResource =
    TF.newResource "aws_batch_job_definition" $
        BatchJobDefinitionResource {
            _container_properties = TF.Nil
            , _name = TF.Nil
            , _parameters = TF.Nil
            , _retry_strategy = TF.Nil
            , _type' = TF.Nil
            }

{- | The @aws_batch_job_queue@ AWS resource.

Provides a Batch Job Queue resource.
-}
data BatchJobQueueResource = BatchJobQueueResource {
      _compute_environments :: !(TF.Argument Text)
    {- ^ (Required) Specifies the set of compute environments mapped to a job queue and their order.  The position of the compute environments in the list will dictate the order. You can associate up to 3 compute environments with a job queue. -}
    , _name                 :: !(TF.Argument Text)
    {- ^ (Required) Specifies the name of the job queue. -}
    , _priority             :: !(TF.Argument Text)
    {- ^ (Required) The priority of the job queue. Job queues with a higher priority are evaluated first when associated with same compute environment. -}
    , _state                :: !(TF.Argument Text)
    {- ^ (Required) The state of the job queue. Must be one of: @ENABLED@ or @DISABLED@ -}
    , _computed_arn         :: !(TF.Attribute Text)
    {- ^ - The Amazon Resource Name of the job queue. -}
    } deriving (Show, Eq)

instance TF.ToHCL BatchJobQueueResource where
    toHCL BatchJobQueueResource{..} = TF.block $ catMaybes
        [ TF.assign "compute_environments" <$> TF.argument _compute_environments
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "priority" <$> TF.argument _priority
        , TF.assign "state" <$> TF.argument _state
        ]

instance HasComputeEnvironments BatchJobQueueResource (TF.Argument Text) where
    computeEnvironments f s@BatchJobQueueResource{..} =
        (\a -> s { _compute_environments = a } :: BatchJobQueueResource)
             <$> f _compute_environments

instance HasName BatchJobQueueResource (TF.Argument Text) where
    name f s@BatchJobQueueResource{..} =
        (\a -> s { _name = a } :: BatchJobQueueResource)
             <$> f _name

instance HasPriority BatchJobQueueResource (TF.Argument Text) where
    priority f s@BatchJobQueueResource{..} =
        (\a -> s { _priority = a } :: BatchJobQueueResource)
             <$> f _priority

instance HasState BatchJobQueueResource (TF.Argument Text) where
    state f s@BatchJobQueueResource{..} =
        (\a -> s { _state = a } :: BatchJobQueueResource)
             <$> f _state

instance HasComputedArn BatchJobQueueResource (TF.Attribute Text) where
    computedArn f s@BatchJobQueueResource{..} =
        (\a -> s { _computed_arn = a } :: BatchJobQueueResource)
             <$> f _computed_arn

batchJobQueueResource :: TF.Resource TF.AWS BatchJobQueueResource
batchJobQueueResource =
    TF.newResource "aws_batch_job_queue" $
        BatchJobQueueResource {
            _compute_environments = TF.Nil
            , _name = TF.Nil
            , _priority = TF.Nil
            , _state = TF.Nil
            , _computed_arn = TF.Compute "arn"
            }

{- | The @aws_cloudformation_stack@ AWS resource.

Provides a CloudFormation Stack resource.
-}
data CloudformationStackResource = CloudformationStackResource {
      _capabilities       :: !(TF.Argument Text)
    {- ^ (Optional) A list of capabilities. Valid values: @CAPABILITY_IAM@ or @CAPABILITY_NAMED_IAM@ -}
    , _disable_rollback   :: !(TF.Argument Text)
    {- ^ (Optional) Set to true to disable rollback of the stack if stack creation failed. Conflicts with @on_failure@ . -}
    , _iam_role_arn       :: !(TF.Argument Text)
    {- ^ (Optional) The ARN of an IAM role that AWS CloudFormation assumes to create the stack. If you don't specify a value, AWS CloudFormation uses the role that was previously associated with the stack. If no role is available, AWS CloudFormation uses a temporary session that is generated from your user credentials. -}
    , _name               :: !(TF.Argument Text)
    {- ^ (Required) Stack name. -}
    , _notification_arns  :: !(TF.Argument Text)
    {- ^ (Optional) A list of SNS topic ARNs to publish stack related events. -}
    , _on_failure         :: !(TF.Argument Text)
    {- ^ (Optional) Action to be taken if stack creation fails. This must be one of: @DO_NOTHING@ , @ROLLBACK@ , or @DELETE@ . Conflicts with @disable_rollback@ . -}
    , _parameters         :: !(TF.Argument Text)
    {- ^ (Optional) A list of Parameter structures that specify input parameters for the stack. -}
    , _policy_body        :: !(TF.Argument Text)
    {- ^ (Optional) Structure containing the stack policy body. Conflicts w/ @policy_url@ . -}
    , _policy_url         :: !(TF.Argument Text)
    {- ^ (Optional) Location of a file containing the stack policy. Conflicts w/ @policy_body@ . -}
    , _tags               :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A list of tags to associate with this stack. -}
    , _template_body      :: !(TF.Argument Text)
    {- ^ (Optional) Structure containing the template body (max size: 51,200 bytes). -}
    , _template_url       :: !(TF.Argument Text)
    {- ^ (Optional) Location of a file containing the template body (max size: 460,800 bytes). -}
    , _timeout_in_minutes :: !(TF.Argument Text)
    {- ^ (Optional) The amount of time that can pass before the stack status becomes @CREATE_FAILED@ . -}
    , _computed_id        :: !(TF.Attribute Text)
    {- ^ - A unique identifier of the stack. -}
    , _computed_outputs   :: !(TF.Attribute Text)
    {- ^ - A map of outputs from the stack. -}
    } deriving (Show, Eq)

instance TF.ToHCL CloudformationStackResource where
    toHCL CloudformationStackResource{..} = TF.block $ catMaybes
        [ TF.assign "capabilities" <$> TF.argument _capabilities
        , TF.assign "disable_rollback" <$> TF.argument _disable_rollback
        , TF.assign "iam_role_arn" <$> TF.argument _iam_role_arn
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "notification_arns" <$> TF.argument _notification_arns
        , TF.assign "on_failure" <$> TF.argument _on_failure
        , TF.assign "parameters" <$> TF.argument _parameters
        , TF.assign "policy_body" <$> TF.argument _policy_body
        , TF.assign "policy_url" <$> TF.argument _policy_url
        , TF.assign "tags" <$> TF.argument _tags
        , TF.assign "template_body" <$> TF.argument _template_body
        , TF.assign "template_url" <$> TF.argument _template_url
        , TF.assign "timeout_in_minutes" <$> TF.argument _timeout_in_minutes
        ]

instance HasCapabilities CloudformationStackResource (TF.Argument Text) where
    capabilities f s@CloudformationStackResource{..} =
        (\a -> s { _capabilities = a } :: CloudformationStackResource)
             <$> f _capabilities

instance HasDisableRollback CloudformationStackResource (TF.Argument Text) where
    disableRollback f s@CloudformationStackResource{..} =
        (\a -> s { _disable_rollback = a } :: CloudformationStackResource)
             <$> f _disable_rollback

instance HasIamRoleArn CloudformationStackResource (TF.Argument Text) where
    iamRoleArn f s@CloudformationStackResource{..} =
        (\a -> s { _iam_role_arn = a } :: CloudformationStackResource)
             <$> f _iam_role_arn

instance HasName CloudformationStackResource (TF.Argument Text) where
    name f s@CloudformationStackResource{..} =
        (\a -> s { _name = a } :: CloudformationStackResource)
             <$> f _name

instance HasNotificationArns CloudformationStackResource (TF.Argument Text) where
    notificationArns f s@CloudformationStackResource{..} =
        (\a -> s { _notification_arns = a } :: CloudformationStackResource)
             <$> f _notification_arns

instance HasOnFailure CloudformationStackResource (TF.Argument Text) where
    onFailure f s@CloudformationStackResource{..} =
        (\a -> s { _on_failure = a } :: CloudformationStackResource)
             <$> f _on_failure

instance HasParameters CloudformationStackResource (TF.Argument Text) where
    parameters f s@CloudformationStackResource{..} =
        (\a -> s { _parameters = a } :: CloudformationStackResource)
             <$> f _parameters

instance HasPolicyBody CloudformationStackResource (TF.Argument Text) where
    policyBody f s@CloudformationStackResource{..} =
        (\a -> s { _policy_body = a } :: CloudformationStackResource)
             <$> f _policy_body

instance HasPolicyUrl CloudformationStackResource (TF.Argument Text) where
    policyUrl f s@CloudformationStackResource{..} =
        (\a -> s { _policy_url = a } :: CloudformationStackResource)
             <$> f _policy_url

instance HasTags CloudformationStackResource (TF.Argument TF.Tags) where
    tags f s@CloudformationStackResource{..} =
        (\a -> s { _tags = a } :: CloudformationStackResource)
             <$> f _tags

instance HasTemplateBody CloudformationStackResource (TF.Argument Text) where
    templateBody f s@CloudformationStackResource{..} =
        (\a -> s { _template_body = a } :: CloudformationStackResource)
             <$> f _template_body

instance HasTemplateUrl CloudformationStackResource (TF.Argument Text) where
    templateUrl f s@CloudformationStackResource{..} =
        (\a -> s { _template_url = a } :: CloudformationStackResource)
             <$> f _template_url

instance HasTimeoutInMinutes CloudformationStackResource (TF.Argument Text) where
    timeoutInMinutes f s@CloudformationStackResource{..} =
        (\a -> s { _timeout_in_minutes = a } :: CloudformationStackResource)
             <$> f _timeout_in_minutes

instance HasComputedId CloudformationStackResource (TF.Attribute Text) where
    computedId f s@CloudformationStackResource{..} =
        (\a -> s { _computed_id = a } :: CloudformationStackResource)
             <$> f _computed_id

instance HasComputedOutputs CloudformationStackResource (TF.Attribute Text) where
    computedOutputs f s@CloudformationStackResource{..} =
        (\a -> s { _computed_outputs = a } :: CloudformationStackResource)
             <$> f _computed_outputs

cloudformationStackResource :: TF.Resource TF.AWS CloudformationStackResource
cloudformationStackResource =
    TF.newResource "aws_cloudformation_stack" $
        CloudformationStackResource {
            _capabilities = TF.Nil
            , _disable_rollback = TF.Nil
            , _iam_role_arn = TF.Nil
            , _name = TF.Nil
            , _notification_arns = TF.Nil
            , _on_failure = TF.Nil
            , _parameters = TF.Nil
            , _policy_body = TF.Nil
            , _policy_url = TF.Nil
            , _tags = TF.Nil
            , _template_body = TF.Nil
            , _template_url = TF.Nil
            , _timeout_in_minutes = TF.Nil
            , _computed_id = TF.Compute "id"
            , _computed_outputs = TF.Compute "outputs"
            }

{- | The @aws_cloudfront_distribution@ AWS resource.

Creates an Amazon CloudFront web distribution. For information about
CloudFront distributions, see the
<http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Introduction.html>
. For specific information about creating CloudFront web distributions, see
the
<http://docs.aws.amazon.com/AmazonCloudFront/latest/APIReference/CreateDistribution.html>
page in the Amazon CloudFront API Reference. ~> NOTE: CloudFront
distributions take about 15 minutes to a deployed state after creation or
modification. During this time, deletes to resources will be blocked. If you
need to delete a distribution that is enabled and you do not want to wait,
you need to use the @retain_on_delete@ flag.
-}
data CloudfrontDistributionResource = CloudfrontDistributionResource {
      _aliases                :: !(TF.Argument Text)
    {- ^ (Optional) - Extra CNAMEs (alternate domain names), if any, for this distribution. -}
    , _cache_behavior         :: !(TF.Argument Text)
    {- ^ (Optional) - A <#cache-behavior-arguments> resource for this distribution (multiples allowed). -}
    , _comment                :: !(TF.Argument Text)
    {- ^ (Optional) - Any comments you want to include about the distribution. -}
    , _custom_error_response  :: !(TF.Argument Text)
    {- ^ (Optional) - One or more <#custom-error-response-arguments> elements (multiples allowed). -}
    , _default_cache_behavior :: !(TF.Argument Text)
    {- ^ (Required) - The <#default-cache-behavior-arguments> for this distribution (maximum one). -}
    , _default_root_object    :: !(TF.Argument Text)
    {- ^ (Optional) - The object that you want CloudFront to return (for example, index.html) when an end user requests the root URL. -}
    , _enabled                :: !(TF.Argument TF.Bool)
    {- ^ (Required) - Whether the distribution is enabled to accept end user requests for content. -}
    , _http_version           :: !(TF.Argument Text)
    {- ^ (Optional) - The maximum HTTP version to support on the distribution. Allowed values are @http1.1@ and @http2@ . The default is @http2@ . -}
    , _is_ipv6_enabled        :: !(TF.Argument TF.Bool)
    {- ^ (Optional) - Whether the IPv6 is enabled for the distribution. -}
    , _logging_config         :: !(TF.Argument Text)
    {- ^ (Optional) - The <#logging-config-arguments> that controls how logs are written to your distribution (maximum one). -}
    , _origin                 :: !(TF.Argument Text)
    {- ^ (Required) - One or more <#origin-arguments> for this distribution (multiples allowed). -}
    , _price_class            :: !(TF.Argument Text)
    {- ^ (Optional) - The price class for this distribution. One of @PriceClass_All@ , @PriceClass_200@ , @PriceClass_100@ -}
    , _restrictions           :: !(TF.Argument Text)
    {- ^ (Required) - The <#restrictions-arguments> for this distribution (maximum one). -}
    , _retain_on_delete       :: !(TF.Argument Text)
    {- ^ (Optional) - Disables the distribution instead of deleting it when destroying the resource through Terraform. If this is set, the distribution needs to be deleted manually afterwards. Default: @false@ . -}
    , _tags                   :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _viewer_certificate     :: !(TF.Argument Text)
    {- ^ (Required) - The <#viewer-certificate-arguments> for this distribution (maximum one). -}
    , _web_acl_id             :: !(TF.Argument Text)
    {- ^ (Optional) - If you're using AWS WAF to filter CloudFront requests, the Id of the AWS WAF web ACL that is associated with the distribution. -}
    } deriving (Show, Eq)

instance TF.ToHCL CloudfrontDistributionResource where
    toHCL CloudfrontDistributionResource{..} = TF.block $ catMaybes
        [ TF.assign "aliases" <$> TF.argument _aliases
        , TF.assign "cache_behavior" <$> TF.argument _cache_behavior
        , TF.assign "comment" <$> TF.argument _comment
        , TF.assign "custom_error_response" <$> TF.argument _custom_error_response
        , TF.assign "default_cache_behavior" <$> TF.argument _default_cache_behavior
        , TF.assign "default_root_object" <$> TF.argument _default_root_object
        , TF.assign "enabled" <$> TF.argument _enabled
        , TF.assign "http_version" <$> TF.argument _http_version
        , TF.assign "is_ipv6_enabled" <$> TF.argument _is_ipv6_enabled
        , TF.assign "logging_config" <$> TF.argument _logging_config
        , TF.assign "origin" <$> TF.argument _origin
        , TF.assign "price_class" <$> TF.argument _price_class
        , TF.assign "restrictions" <$> TF.argument _restrictions
        , TF.assign "retain_on_delete" <$> TF.argument _retain_on_delete
        , TF.assign "tags" <$> TF.argument _tags
        , TF.assign "viewer_certificate" <$> TF.argument _viewer_certificate
        , TF.assign "web_acl_id" <$> TF.argument _web_acl_id
        ]

instance HasAliases CloudfrontDistributionResource (TF.Argument Text) where
    aliases f s@CloudfrontDistributionResource{..} =
        (\a -> s { _aliases = a } :: CloudfrontDistributionResource)
             <$> f _aliases

instance HasCacheBehavior CloudfrontDistributionResource (TF.Argument Text) where
    cacheBehavior f s@CloudfrontDistributionResource{..} =
        (\a -> s { _cache_behavior = a } :: CloudfrontDistributionResource)
             <$> f _cache_behavior

instance HasComment CloudfrontDistributionResource (TF.Argument Text) where
    comment f s@CloudfrontDistributionResource{..} =
        (\a -> s { _comment = a } :: CloudfrontDistributionResource)
             <$> f _comment

instance HasCustomErrorResponse CloudfrontDistributionResource (TF.Argument Text) where
    customErrorResponse f s@CloudfrontDistributionResource{..} =
        (\a -> s { _custom_error_response = a } :: CloudfrontDistributionResource)
             <$> f _custom_error_response

instance HasDefaultCacheBehavior CloudfrontDistributionResource (TF.Argument Text) where
    defaultCacheBehavior f s@CloudfrontDistributionResource{..} =
        (\a -> s { _default_cache_behavior = a } :: CloudfrontDistributionResource)
             <$> f _default_cache_behavior

instance HasDefaultRootObject CloudfrontDistributionResource (TF.Argument Text) where
    defaultRootObject f s@CloudfrontDistributionResource{..} =
        (\a -> s { _default_root_object = a } :: CloudfrontDistributionResource)
             <$> f _default_root_object

instance HasEnabled CloudfrontDistributionResource (TF.Argument TF.Bool) where
    enabled f s@CloudfrontDistributionResource{..} =
        (\a -> s { _enabled = a } :: CloudfrontDistributionResource)
             <$> f _enabled

instance HasHttpVersion CloudfrontDistributionResource (TF.Argument Text) where
    httpVersion f s@CloudfrontDistributionResource{..} =
        (\a -> s { _http_version = a } :: CloudfrontDistributionResource)
             <$> f _http_version

instance HasIsIpv6Enabled CloudfrontDistributionResource (TF.Argument TF.Bool) where
    isIpv6Enabled f s@CloudfrontDistributionResource{..} =
        (\a -> s { _is_ipv6_enabled = a } :: CloudfrontDistributionResource)
             <$> f _is_ipv6_enabled

instance HasLoggingConfig CloudfrontDistributionResource (TF.Argument Text) where
    loggingConfig f s@CloudfrontDistributionResource{..} =
        (\a -> s { _logging_config = a } :: CloudfrontDistributionResource)
             <$> f _logging_config

instance HasOrigin CloudfrontDistributionResource (TF.Argument Text) where
    origin f s@CloudfrontDistributionResource{..} =
        (\a -> s { _origin = a } :: CloudfrontDistributionResource)
             <$> f _origin

instance HasPriceClass CloudfrontDistributionResource (TF.Argument Text) where
    priceClass f s@CloudfrontDistributionResource{..} =
        (\a -> s { _price_class = a } :: CloudfrontDistributionResource)
             <$> f _price_class

instance HasRestrictions CloudfrontDistributionResource (TF.Argument Text) where
    restrictions f s@CloudfrontDistributionResource{..} =
        (\a -> s { _restrictions = a } :: CloudfrontDistributionResource)
             <$> f _restrictions

instance HasRetainOnDelete CloudfrontDistributionResource (TF.Argument Text) where
    retainOnDelete f s@CloudfrontDistributionResource{..} =
        (\a -> s { _retain_on_delete = a } :: CloudfrontDistributionResource)
             <$> f _retain_on_delete

instance HasTags CloudfrontDistributionResource (TF.Argument TF.Tags) where
    tags f s@CloudfrontDistributionResource{..} =
        (\a -> s { _tags = a } :: CloudfrontDistributionResource)
             <$> f _tags

instance HasViewerCertificate CloudfrontDistributionResource (TF.Argument Text) where
    viewerCertificate f s@CloudfrontDistributionResource{..} =
        (\a -> s { _viewer_certificate = a } :: CloudfrontDistributionResource)
             <$> f _viewer_certificate

instance HasWebAclId CloudfrontDistributionResource (TF.Argument Text) where
    webAclId f s@CloudfrontDistributionResource{..} =
        (\a -> s { _web_acl_id = a } :: CloudfrontDistributionResource)
             <$> f _web_acl_id

cloudfrontDistributionResource :: TF.Resource TF.AWS CloudfrontDistributionResource
cloudfrontDistributionResource =
    TF.newResource "aws_cloudfront_distribution" $
        CloudfrontDistributionResource {
            _aliases = TF.Nil
            , _cache_behavior = TF.Nil
            , _comment = TF.Nil
            , _custom_error_response = TF.Nil
            , _default_cache_behavior = TF.Nil
            , _default_root_object = TF.Nil
            , _enabled = TF.Nil
            , _http_version = TF.Nil
            , _is_ipv6_enabled = TF.Nil
            , _logging_config = TF.Nil
            , _origin = TF.Nil
            , _price_class = TF.Nil
            , _restrictions = TF.Nil
            , _retain_on_delete = TF.Nil
            , _tags = TF.Nil
            , _viewer_certificate = TF.Nil
            , _web_acl_id = TF.Nil
            }

{- | The @aws_cloudfront_origin_access_identity@ AWS resource.

Creates an Amazon CloudFront origin access identity. For information about
CloudFront distributions, see the
<http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Introduction.html>
. For more information on generating origin access identities, see
<http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html>
.
-}
data CloudfrontOriginAccessIdentityResource = CloudfrontOriginAccessIdentityResource {
      _comment                                  :: !(TF.Argument Text)
    {- ^ (Optional) - An optional comment for the origin access identity. -}
    , _computed_caller_reference                :: !(TF.Attribute Text)
    {- ^ - Internal value used by CloudFront to allow future updates to the origin access identity. -}
    , _computed_cloudfront_access_identity_path :: !(TF.Attribute Text)
    {- ^ - A shortcut to the full path for the origin access identity to use in CloudFront, see below. -}
    , _computed_etag                            :: !(TF.Attribute Text)
    {- ^ - The current version of the origin access identity's information. For example: @E2QWRUHAPOMQZL@ . -}
    , _computed_iam_arn                         :: !(TF.Attribute Text)
    {- ^ - A pre-generated ARN for use in S3 bucket policies (see below). Example: @arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity E2QWRUHAPOMQZL@ . -}
    , _computed_id                              :: !(TF.Attribute Text)
    {- ^ - The identifier for the distribution. For example: @EDFDVBD632BHDS5@ . -}
    , _computed_s3_canonical_user_id            :: !(TF.Attribute Text)
    {- ^ - The Amazon S3 canonical user ID for the origin access identity, which you use when giving the origin access identity read permission to an object in Amazon S3. -}
    } deriving (Show, Eq)

instance TF.ToHCL CloudfrontOriginAccessIdentityResource where
    toHCL CloudfrontOriginAccessIdentityResource{..} = TF.block $ catMaybes
        [ TF.assign "comment" <$> TF.argument _comment
        ]

instance HasComment CloudfrontOriginAccessIdentityResource (TF.Argument Text) where
    comment f s@CloudfrontOriginAccessIdentityResource{..} =
        (\a -> s { _comment = a } :: CloudfrontOriginAccessIdentityResource)
             <$> f _comment

instance HasComputedCallerReference CloudfrontOriginAccessIdentityResource (TF.Attribute Text) where
    computedCallerReference f s@CloudfrontOriginAccessIdentityResource{..} =
        (\a -> s { _computed_caller_reference = a } :: CloudfrontOriginAccessIdentityResource)
             <$> f _computed_caller_reference

instance HasComputedCloudfrontAccessIdentityPath CloudfrontOriginAccessIdentityResource (TF.Attribute Text) where
    computedCloudfrontAccessIdentityPath f s@CloudfrontOriginAccessIdentityResource{..} =
        (\a -> s { _computed_cloudfront_access_identity_path = a } :: CloudfrontOriginAccessIdentityResource)
             <$> f _computed_cloudfront_access_identity_path

instance HasComputedEtag CloudfrontOriginAccessIdentityResource (TF.Attribute Text) where
    computedEtag f s@CloudfrontOriginAccessIdentityResource{..} =
        (\a -> s { _computed_etag = a } :: CloudfrontOriginAccessIdentityResource)
             <$> f _computed_etag

instance HasComputedIamArn CloudfrontOriginAccessIdentityResource (TF.Attribute Text) where
    computedIamArn f s@CloudfrontOriginAccessIdentityResource{..} =
        (\a -> s { _computed_iam_arn = a } :: CloudfrontOriginAccessIdentityResource)
             <$> f _computed_iam_arn

instance HasComputedId CloudfrontOriginAccessIdentityResource (TF.Attribute Text) where
    computedId f s@CloudfrontOriginAccessIdentityResource{..} =
        (\a -> s { _computed_id = a } :: CloudfrontOriginAccessIdentityResource)
             <$> f _computed_id

instance HasComputedS3CanonicalUserId CloudfrontOriginAccessIdentityResource (TF.Attribute Text) where
    computedS3CanonicalUserId f s@CloudfrontOriginAccessIdentityResource{..} =
        (\a -> s { _computed_s3_canonical_user_id = a } :: CloudfrontOriginAccessIdentityResource)
             <$> f _computed_s3_canonical_user_id

cloudfrontOriginAccessIdentityResource :: TF.Resource TF.AWS CloudfrontOriginAccessIdentityResource
cloudfrontOriginAccessIdentityResource =
    TF.newResource "aws_cloudfront_origin_access_identity" $
        CloudfrontOriginAccessIdentityResource {
            _comment = TF.Nil
            , _computed_caller_reference = TF.Compute "caller_reference"
            , _computed_cloudfront_access_identity_path = TF.Compute "cloudfront_access_identity_path"
            , _computed_etag = TF.Compute "etag"
            , _computed_iam_arn = TF.Compute "iam_arn"
            , _computed_id = TF.Compute "id"
            , _computed_s3_canonical_user_id = TF.Compute "s3_canonical_user_id"
            }

{- | The @aws_cloudtrail@ AWS resource.

Provides a CloudTrail resource.
-}
data CloudtrailResource = CloudtrailResource {
      _cloud_watch_logs_group_arn    :: !(TF.Argument Text)
    {- ^ (Optional) Specifies a log group name using an Amazon Resource Name (ARN), that represents the log group to which CloudTrail logs will be delivered. -}
    , _cloud_watch_logs_role_arn     :: !(TF.Argument Text)
    {- ^ (Optional) Specifies the role for the CloudWatch Logs endpoint to assume to write to a user’s log group. -}
    , _enable_log_file_validation    :: !(TF.Argument TF.Bool)
    {- ^ (Optional) Specifies whether log file integrity validation is enabled. Defaults to @false@ . -}
    , _enable_logging                :: !(TF.Argument TF.Bool)
    {- ^ (Optional) Enables logging for the trail. Defaults to @true@ . Setting this to @false@ will pause logging. -}
    , _include_global_service_events :: !(TF.Argument Text)
    {- ^ (Optional) Specifies whether the trail is publishing events from global services such as IAM to the log files. Defaults to @true@ . -}
    , _is_multi_region_trail         :: !(TF.Argument Text)
    {- ^ (Optional) Specifies whether the trail is created in the current region or in all regions. Defaults to @false@ . -}
    , _kms_key_id                    :: !(TF.Argument Text)
    {- ^ (Optional) Specifies the KMS key ARN to use to encrypt the logs delivered by CloudTrail. -}
    , _name                          :: !(TF.Argument Text)
    {- ^ (Required) Specifies the name of the trail. -}
    , _s3_bucket_name                :: !(TF.Argument Text)
    {- ^ (Required) Specifies the name of the S3 bucket designated for publishing log files. -}
    , _s3_key_prefix                 :: !(TF.Argument Text)
    {- ^ (Optional) Specifies the S3 key prefix that precedes the name of the bucket you have designated for log file delivery. -}
    , _sns_topic_name                :: !(TF.Argument Text)
    {- ^ (Optional) Specifies the name of the Amazon SNS topic defined for notification of log file delivery. -}
    , _tags                          :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the trail -}
    , _computed_arn                  :: !(TF.Attribute Text)
    {- ^ - The Amazon Resource Name of the trail. -}
    , _computed_home_region          :: !(TF.Attribute Text)
    {- ^ - The region in which the trail was created. -}
    , _computed_id                   :: !(TF.Attribute Text)
    {- ^ - The name of the trail. -}
    } deriving (Show, Eq)

instance TF.ToHCL CloudtrailResource where
    toHCL CloudtrailResource{..} = TF.block $ catMaybes
        [ TF.assign "cloud_watch_logs_group_arn" <$> TF.argument _cloud_watch_logs_group_arn
        , TF.assign "cloud_watch_logs_role_arn" <$> TF.argument _cloud_watch_logs_role_arn
        , TF.assign "enable_log_file_validation" <$> TF.argument _enable_log_file_validation
        , TF.assign "enable_logging" <$> TF.argument _enable_logging
        , TF.assign "include_global_service_events" <$> TF.argument _include_global_service_events
        , TF.assign "is_multi_region_trail" <$> TF.argument _is_multi_region_trail
        , TF.assign "kms_key_id" <$> TF.argument _kms_key_id
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "s3_bucket_name" <$> TF.argument _s3_bucket_name
        , TF.assign "s3_key_prefix" <$> TF.argument _s3_key_prefix
        , TF.assign "sns_topic_name" <$> TF.argument _sns_topic_name
        , TF.assign "tags" <$> TF.argument _tags
        ]

instance HasCloudWatchLogsGroupArn CloudtrailResource (TF.Argument Text) where
    cloudWatchLogsGroupArn f s@CloudtrailResource{..} =
        (\a -> s { _cloud_watch_logs_group_arn = a } :: CloudtrailResource)
             <$> f _cloud_watch_logs_group_arn

instance HasCloudWatchLogsRoleArn CloudtrailResource (TF.Argument Text) where
    cloudWatchLogsRoleArn f s@CloudtrailResource{..} =
        (\a -> s { _cloud_watch_logs_role_arn = a } :: CloudtrailResource)
             <$> f _cloud_watch_logs_role_arn

instance HasEnableLogFileValidation CloudtrailResource (TF.Argument TF.Bool) where
    enableLogFileValidation f s@CloudtrailResource{..} =
        (\a -> s { _enable_log_file_validation = a } :: CloudtrailResource)
             <$> f _enable_log_file_validation

instance HasEnableLogging CloudtrailResource (TF.Argument TF.Bool) where
    enableLogging f s@CloudtrailResource{..} =
        (\a -> s { _enable_logging = a } :: CloudtrailResource)
             <$> f _enable_logging

instance HasIncludeGlobalServiceEvents CloudtrailResource (TF.Argument Text) where
    includeGlobalServiceEvents f s@CloudtrailResource{..} =
        (\a -> s { _include_global_service_events = a } :: CloudtrailResource)
             <$> f _include_global_service_events

instance HasIsMultiRegionTrail CloudtrailResource (TF.Argument Text) where
    isMultiRegionTrail f s@CloudtrailResource{..} =
        (\a -> s { _is_multi_region_trail = a } :: CloudtrailResource)
             <$> f _is_multi_region_trail

instance HasKmsKeyId CloudtrailResource (TF.Argument Text) where
    kmsKeyId f s@CloudtrailResource{..} =
        (\a -> s { _kms_key_id = a } :: CloudtrailResource)
             <$> f _kms_key_id

instance HasName CloudtrailResource (TF.Argument Text) where
    name f s@CloudtrailResource{..} =
        (\a -> s { _name = a } :: CloudtrailResource)
             <$> f _name

instance HasS3BucketName CloudtrailResource (TF.Argument Text) where
    s3BucketName f s@CloudtrailResource{..} =
        (\a -> s { _s3_bucket_name = a } :: CloudtrailResource)
             <$> f _s3_bucket_name

instance HasS3KeyPrefix CloudtrailResource (TF.Argument Text) where
    s3KeyPrefix f s@CloudtrailResource{..} =
        (\a -> s { _s3_key_prefix = a } :: CloudtrailResource)
             <$> f _s3_key_prefix

instance HasSnsTopicName CloudtrailResource (TF.Argument Text) where
    snsTopicName f s@CloudtrailResource{..} =
        (\a -> s { _sns_topic_name = a } :: CloudtrailResource)
             <$> f _sns_topic_name

instance HasTags CloudtrailResource (TF.Argument TF.Tags) where
    tags f s@CloudtrailResource{..} =
        (\a -> s { _tags = a } :: CloudtrailResource)
             <$> f _tags

instance HasComputedArn CloudtrailResource (TF.Attribute Text) where
    computedArn f s@CloudtrailResource{..} =
        (\a -> s { _computed_arn = a } :: CloudtrailResource)
             <$> f _computed_arn

instance HasComputedHomeRegion CloudtrailResource (TF.Attribute Text) where
    computedHomeRegion f s@CloudtrailResource{..} =
        (\a -> s { _computed_home_region = a } :: CloudtrailResource)
             <$> f _computed_home_region

instance HasComputedId CloudtrailResource (TF.Attribute Text) where
    computedId f s@CloudtrailResource{..} =
        (\a -> s { _computed_id = a } :: CloudtrailResource)
             <$> f _computed_id

cloudtrailResource :: TF.Resource TF.AWS CloudtrailResource
cloudtrailResource =
    TF.newResource "aws_cloudtrail" $
        CloudtrailResource {
            _cloud_watch_logs_group_arn = TF.Nil
            , _cloud_watch_logs_role_arn = TF.Nil
            , _enable_log_file_validation = TF.Nil
            , _enable_logging = TF.Nil
            , _include_global_service_events = TF.Nil
            , _is_multi_region_trail = TF.Nil
            , _kms_key_id = TF.Nil
            , _name = TF.Nil
            , _s3_bucket_name = TF.Nil
            , _s3_key_prefix = TF.Nil
            , _sns_topic_name = TF.Nil
            , _tags = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_home_region = TF.Compute "home_region"
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_cloudwatch_dashboard@ AWS resource.

Provides a CloudWatch Dashboard resource.
-}
data CloudwatchDashboardResource = CloudwatchDashboardResource {
      _dashboard_body         :: !(TF.Argument Text)
    {- ^ (Required) The detailed information about the dashboard, including what widgets are included and their location on the dashboard. You can read more about the body structure in the <https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html> . -}
    , _dashboard_name         :: !(TF.Argument Text)
    {- ^ (Required) The name of the dashboard. -}
    , _computed_dashboard_arn :: !(TF.Attribute Text)
    {- ^ - The Amazon Resource Name (ARN) of the dashboard. -}
    } deriving (Show, Eq)

instance TF.ToHCL CloudwatchDashboardResource where
    toHCL CloudwatchDashboardResource{..} = TF.block $ catMaybes
        [ TF.assign "dashboard_body" <$> TF.argument _dashboard_body
        , TF.assign "dashboard_name" <$> TF.argument _dashboard_name
        ]

instance HasDashboardBody CloudwatchDashboardResource (TF.Argument Text) where
    dashboardBody f s@CloudwatchDashboardResource{..} =
        (\a -> s { _dashboard_body = a } :: CloudwatchDashboardResource)
             <$> f _dashboard_body

instance HasDashboardName CloudwatchDashboardResource (TF.Argument Text) where
    dashboardName f s@CloudwatchDashboardResource{..} =
        (\a -> s { _dashboard_name = a } :: CloudwatchDashboardResource)
             <$> f _dashboard_name

instance HasComputedDashboardArn CloudwatchDashboardResource (TF.Attribute Text) where
    computedDashboardArn f s@CloudwatchDashboardResource{..} =
        (\a -> s { _computed_dashboard_arn = a } :: CloudwatchDashboardResource)
             <$> f _computed_dashboard_arn

cloudwatchDashboardResource :: TF.Resource TF.AWS CloudwatchDashboardResource
cloudwatchDashboardResource =
    TF.newResource "aws_cloudwatch_dashboard" $
        CloudwatchDashboardResource {
            _dashboard_body = TF.Nil
            , _dashboard_name = TF.Nil
            , _computed_dashboard_arn = TF.Compute "dashboard_arn"
            }

{- | The @aws_cloudwatch_event_permission@ AWS resource.

Provides a resource to create a CloudWatch Events permission to support
cross-account events in the current account default event bus.
-}
data CloudwatchEventPermissionResource = CloudwatchEventPermissionResource {
      _action       :: !(TF.Argument Text)
    {- ^ (Optional) The action that you are enabling the other account to perform. Defaults to @events:PutEvents@ . -}
    , _principal    :: !(TF.Argument Text)
    {- ^ (Required) The 12-digit AWS account ID that you are permitting to put events to your default event bus. Specify @*@ to permit any account to put events to your default event bus. -}
    , _statement_id :: !(TF.Argument Text)
    {- ^ (Required) An identifier string for the external account that you are granting permissions to. -}
    , _computed_id  :: !(TF.Attribute Text)
    {- ^ - The statement ID of the CloudWatch Events permission. -}
    } deriving (Show, Eq)

instance TF.ToHCL CloudwatchEventPermissionResource where
    toHCL CloudwatchEventPermissionResource{..} = TF.block $ catMaybes
        [ TF.assign "action" <$> TF.argument _action
        , TF.assign "principal" <$> TF.argument _principal
        , TF.assign "statement_id" <$> TF.argument _statement_id
        ]

instance HasAction CloudwatchEventPermissionResource (TF.Argument Text) where
    action f s@CloudwatchEventPermissionResource{..} =
        (\a -> s { _action = a } :: CloudwatchEventPermissionResource)
             <$> f _action

instance HasPrincipal CloudwatchEventPermissionResource (TF.Argument Text) where
    principal f s@CloudwatchEventPermissionResource{..} =
        (\a -> s { _principal = a } :: CloudwatchEventPermissionResource)
             <$> f _principal

instance HasStatementId CloudwatchEventPermissionResource (TF.Argument Text) where
    statementId f s@CloudwatchEventPermissionResource{..} =
        (\a -> s { _statement_id = a } :: CloudwatchEventPermissionResource)
             <$> f _statement_id

instance HasComputedId CloudwatchEventPermissionResource (TF.Attribute Text) where
    computedId f s@CloudwatchEventPermissionResource{..} =
        (\a -> s { _computed_id = a } :: CloudwatchEventPermissionResource)
             <$> f _computed_id

cloudwatchEventPermissionResource :: TF.Resource TF.AWS CloudwatchEventPermissionResource
cloudwatchEventPermissionResource =
    TF.newResource "aws_cloudwatch_event_permission" $
        CloudwatchEventPermissionResource {
            _action = TF.Nil
            , _principal = TF.Nil
            , _statement_id = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_cloudwatch_event_rule@ AWS resource.

Provides a CloudWatch Event Rule resource.
-}
data CloudwatchEventRuleResource = CloudwatchEventRuleResource {
      _description         :: !(TF.Argument Text)
    {- ^ (Optional) The description of the rule. -}
    , _event_pattern       :: !(TF.Argument Text)
    {- ^ (Required, if @schedule_expression@ isn't specified) Event pattern described a JSON object. See full documentation of <http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CloudWatchEventsandEventPatterns.html> for details. -}
    , _is_enabled          :: !(TF.Argument TF.Bool)
    {- ^ (Optional) Whether the rule should be enabled (defaults to @true@ ). -}
    , _name                :: !(TF.Argument Text)
    {- ^ (Required) The rule's name. -}
    , _role_arn            :: !(TF.Argument Text)
    {- ^ (Optional) The Amazon Resource Name (ARN) associated with the role that is used for target invocation. -}
    , _schedule_expression :: !(TF.Argument Text)
    {- ^ (Required, if @event_pattern@ isn't specified) The scheduling expression. For example, @cron(0 20 * * ? *)@ or @rate(5 minutes)@ . -}
    , _computed_arn        :: !(TF.Attribute Text)
    {- ^ - The Amazon Resource Name (ARN) of the rule. -}
    } deriving (Show, Eq)

instance TF.ToHCL CloudwatchEventRuleResource where
    toHCL CloudwatchEventRuleResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.argument _description
        , TF.assign "event_pattern" <$> TF.argument _event_pattern
        , TF.assign "is_enabled" <$> TF.argument _is_enabled
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "role_arn" <$> TF.argument _role_arn
        , TF.assign "schedule_expression" <$> TF.argument _schedule_expression
        ]

instance HasDescription CloudwatchEventRuleResource (TF.Argument Text) where
    description f s@CloudwatchEventRuleResource{..} =
        (\a -> s { _description = a } :: CloudwatchEventRuleResource)
             <$> f _description

instance HasEventPattern CloudwatchEventRuleResource (TF.Argument Text) where
    eventPattern f s@CloudwatchEventRuleResource{..} =
        (\a -> s { _event_pattern = a } :: CloudwatchEventRuleResource)
             <$> f _event_pattern

instance HasIsEnabled CloudwatchEventRuleResource (TF.Argument TF.Bool) where
    isEnabled f s@CloudwatchEventRuleResource{..} =
        (\a -> s { _is_enabled = a } :: CloudwatchEventRuleResource)
             <$> f _is_enabled

instance HasName CloudwatchEventRuleResource (TF.Argument Text) where
    name f s@CloudwatchEventRuleResource{..} =
        (\a -> s { _name = a } :: CloudwatchEventRuleResource)
             <$> f _name

instance HasRoleArn CloudwatchEventRuleResource (TF.Argument Text) where
    roleArn f s@CloudwatchEventRuleResource{..} =
        (\a -> s { _role_arn = a } :: CloudwatchEventRuleResource)
             <$> f _role_arn

instance HasScheduleExpression CloudwatchEventRuleResource (TF.Argument Text) where
    scheduleExpression f s@CloudwatchEventRuleResource{..} =
        (\a -> s { _schedule_expression = a } :: CloudwatchEventRuleResource)
             <$> f _schedule_expression

instance HasComputedArn CloudwatchEventRuleResource (TF.Attribute Text) where
    computedArn f s@CloudwatchEventRuleResource{..} =
        (\a -> s { _computed_arn = a } :: CloudwatchEventRuleResource)
             <$> f _computed_arn

cloudwatchEventRuleResource :: TF.Resource TF.AWS CloudwatchEventRuleResource
cloudwatchEventRuleResource =
    TF.newResource "aws_cloudwatch_event_rule" $
        CloudwatchEventRuleResource {
            _description = TF.Nil
            , _event_pattern = TF.Nil
            , _is_enabled = TF.Nil
            , _name = TF.Nil
            , _role_arn = TF.Nil
            , _schedule_expression = TF.Nil
            , _computed_arn = TF.Compute "arn"
            }

{- | The @aws_cloudwatch_event_target@ AWS resource.

Provides a CloudWatch Event Target resource.
-}
data CloudwatchEventTargetResource = CloudwatchEventTargetResource {
      _arn                 :: !(TF.Argument Text)
    {- ^ (Required) The Amazon Resource Name (ARN) associated of the target. -}
    , _ecs_target          :: !(TF.Argument Text)
    {- ^ (Optional) Parameters used when you are using the rule to invoke Amazon ECS Task. Documented below. A maximum of 1 are allowed. -}
    , _input               :: !(TF.Argument Text)
    {- ^ (Optional) Valid JSON text passed to the target. -}
    , _input_path          :: !(TF.Argument Text)
    {- ^ (Optional) The value of the <http://goessner.net/articles/JsonPath/> that is used for extracting part of the matched event when passing it to the target. -}
    , _input_transformer   :: !(TF.Argument Text)
    {- ^ (Optional) Parameters used when you are providing a custom input to a target based on certain event data. -}
    , _role_arn            :: !(TF.Argument Text)
    {- ^ (Optional) The Amazon Resource Name (ARN) of the IAM role to be used for this target when the rule is triggered. Required if @ecs_target@ is used. -}
    , _rule                :: !(TF.Argument Text)
    {- ^ (Required) The name of the rule you want to add targets to. -}
    , _run_command_targets :: !(TF.Argument Text)
    {- ^ (Optional) Parameters used when you are using the rule to invoke Amazon EC2 Run Command. Documented below. A maximum of 5 are allowed. -}
    , _target_id           :: !(TF.Argument Text)
    {- ^ (Optional) The unique target assignment ID.  If missing, will generate a random, unique id. -}
    } deriving (Show, Eq)

instance TF.ToHCL CloudwatchEventTargetResource where
    toHCL CloudwatchEventTargetResource{..} = TF.block $ catMaybes
        [ TF.assign "arn" <$> TF.argument _arn
        , TF.assign "ecs_target" <$> TF.argument _ecs_target
        , TF.assign "input" <$> TF.argument _input
        , TF.assign "input_path" <$> TF.argument _input_path
        , TF.assign "input_transformer" <$> TF.argument _input_transformer
        , TF.assign "role_arn" <$> TF.argument _role_arn
        , TF.assign "rule" <$> TF.argument _rule
        , TF.assign "run_command_targets" <$> TF.argument _run_command_targets
        , TF.assign "target_id" <$> TF.argument _target_id
        ]

instance HasArn CloudwatchEventTargetResource (TF.Argument Text) where
    arn f s@CloudwatchEventTargetResource{..} =
        (\a -> s { _arn = a } :: CloudwatchEventTargetResource)
             <$> f _arn

instance HasEcsTarget CloudwatchEventTargetResource (TF.Argument Text) where
    ecsTarget f s@CloudwatchEventTargetResource{..} =
        (\a -> s { _ecs_target = a } :: CloudwatchEventTargetResource)
             <$> f _ecs_target

instance HasInput CloudwatchEventTargetResource (TF.Argument Text) where
    input f s@CloudwatchEventTargetResource{..} =
        (\a -> s { _input = a } :: CloudwatchEventTargetResource)
             <$> f _input

instance HasInputPath CloudwatchEventTargetResource (TF.Argument Text) where
    inputPath f s@CloudwatchEventTargetResource{..} =
        (\a -> s { _input_path = a } :: CloudwatchEventTargetResource)
             <$> f _input_path

instance HasInputTransformer CloudwatchEventTargetResource (TF.Argument Text) where
    inputTransformer f s@CloudwatchEventTargetResource{..} =
        (\a -> s { _input_transformer = a } :: CloudwatchEventTargetResource)
             <$> f _input_transformer

instance HasRoleArn CloudwatchEventTargetResource (TF.Argument Text) where
    roleArn f s@CloudwatchEventTargetResource{..} =
        (\a -> s { _role_arn = a } :: CloudwatchEventTargetResource)
             <$> f _role_arn

instance HasRule CloudwatchEventTargetResource (TF.Argument Text) where
    rule f s@CloudwatchEventTargetResource{..} =
        (\a -> s { _rule = a } :: CloudwatchEventTargetResource)
             <$> f _rule

instance HasRunCommandTargets CloudwatchEventTargetResource (TF.Argument Text) where
    runCommandTargets f s@CloudwatchEventTargetResource{..} =
        (\a -> s { _run_command_targets = a } :: CloudwatchEventTargetResource)
             <$> f _run_command_targets

instance HasTargetId CloudwatchEventTargetResource (TF.Argument Text) where
    targetId f s@CloudwatchEventTargetResource{..} =
        (\a -> s { _target_id = a } :: CloudwatchEventTargetResource)
             <$> f _target_id

cloudwatchEventTargetResource :: TF.Resource TF.AWS CloudwatchEventTargetResource
cloudwatchEventTargetResource =
    TF.newResource "aws_cloudwatch_event_target" $
        CloudwatchEventTargetResource {
            _arn = TF.Nil
            , _ecs_target = TF.Nil
            , _input = TF.Nil
            , _input_path = TF.Nil
            , _input_transformer = TF.Nil
            , _role_arn = TF.Nil
            , _rule = TF.Nil
            , _run_command_targets = TF.Nil
            , _target_id = TF.Nil
            }

{- | The @aws_cloudwatch_log_destination_policy@ AWS resource.

Provides a CloudWatch Logs destination policy resource.
-}
data CloudwatchLogDestinationPolicyResource = CloudwatchLogDestinationPolicyResource {
      _access_policy    :: !(TF.Argument Text)
    {- ^ (Required) The policy document. This is a JSON formatted string. -}
    , _destination_name :: !(TF.Argument Text)
    {- ^ (Required) A name for the subscription filter -}
    } deriving (Show, Eq)

instance TF.ToHCL CloudwatchLogDestinationPolicyResource where
    toHCL CloudwatchLogDestinationPolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "access_policy" <$> TF.argument _access_policy
        , TF.assign "destination_name" <$> TF.argument _destination_name
        ]

instance HasAccessPolicy CloudwatchLogDestinationPolicyResource (TF.Argument Text) where
    accessPolicy f s@CloudwatchLogDestinationPolicyResource{..} =
        (\a -> s { _access_policy = a } :: CloudwatchLogDestinationPolicyResource)
             <$> f _access_policy

instance HasDestinationName CloudwatchLogDestinationPolicyResource (TF.Argument Text) where
    destinationName f s@CloudwatchLogDestinationPolicyResource{..} =
        (\a -> s { _destination_name = a } :: CloudwatchLogDestinationPolicyResource)
             <$> f _destination_name

cloudwatchLogDestinationPolicyResource :: TF.Resource TF.AWS CloudwatchLogDestinationPolicyResource
cloudwatchLogDestinationPolicyResource =
    TF.newResource "aws_cloudwatch_log_destination_policy" $
        CloudwatchLogDestinationPolicyResource {
            _access_policy = TF.Nil
            , _destination_name = TF.Nil
            }

{- | The @aws_cloudwatch_log_destination@ AWS resource.

Provides a CloudWatch Logs destination resource.
-}
data CloudwatchLogDestinationResource = CloudwatchLogDestinationResource {
      _name         :: !(TF.Argument Text)
    {- ^ (Required) A name for the log destination -}
    , _role_arn     :: !(TF.Argument Text)
    {- ^ (Required) The ARN of an IAM role that grants Amazon CloudWatch Logs permissions to put data into the target -}
    , _target_arn   :: !(TF.Argument Text)
    {- ^ (Required) The ARN of the target Amazon Kinesis stream or Amazon Lambda resource for the destination -}
    , _computed_arn :: !(TF.Attribute Text)
    {- ^ - The Amazon Resource Name (ARN) specifying the log destination. -}
    } deriving (Show, Eq)

instance TF.ToHCL CloudwatchLogDestinationResource where
    toHCL CloudwatchLogDestinationResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.argument _name
        , TF.assign "role_arn" <$> TF.argument _role_arn
        , TF.assign "target_arn" <$> TF.argument _target_arn
        ]

instance HasName CloudwatchLogDestinationResource (TF.Argument Text) where
    name f s@CloudwatchLogDestinationResource{..} =
        (\a -> s { _name = a } :: CloudwatchLogDestinationResource)
             <$> f _name

instance HasRoleArn CloudwatchLogDestinationResource (TF.Argument Text) where
    roleArn f s@CloudwatchLogDestinationResource{..} =
        (\a -> s { _role_arn = a } :: CloudwatchLogDestinationResource)
             <$> f _role_arn

instance HasTargetArn CloudwatchLogDestinationResource (TF.Argument Text) where
    targetArn f s@CloudwatchLogDestinationResource{..} =
        (\a -> s { _target_arn = a } :: CloudwatchLogDestinationResource)
             <$> f _target_arn

instance HasComputedArn CloudwatchLogDestinationResource (TF.Attribute Text) where
    computedArn f s@CloudwatchLogDestinationResource{..} =
        (\a -> s { _computed_arn = a } :: CloudwatchLogDestinationResource)
             <$> f _computed_arn

cloudwatchLogDestinationResource :: TF.Resource TF.AWS CloudwatchLogDestinationResource
cloudwatchLogDestinationResource =
    TF.newResource "aws_cloudwatch_log_destination" $
        CloudwatchLogDestinationResource {
            _name = TF.Nil
            , _role_arn = TF.Nil
            , _target_arn = TF.Nil
            , _computed_arn = TF.Compute "arn"
            }

{- | The @aws_cloudwatch_log_group@ AWS resource.

Provides a CloudWatch Log Group resource.
-}
data CloudwatchLogGroupResource = CloudwatchLogGroupResource {
      _kms_key_id        :: !(TF.Argument Text)
    {- ^ (Optional) The ARN of the KMS Key to use when encrypting log data. Please note, after the AWS KMS CMK is disassociated from the log group, AWS CloudWatch Logs stops encrypting newly ingested data for the log group. All previously ingested data remains encrypted, and AWS CloudWatch Logs requires permissions for the CMK whenever the encrypted data is requested. -}
    , _name              :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) The name of the log group. If omitted, Terraform will assign a random, unique name. -}
    , _name_prefix       :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) Creates a unique name beginning with the specified prefix. Conflicts with @name@ . -}
    , _retention_in_days :: !(TF.Argument Text)
    {- ^ (Optional) Specifies the number of days you want to retain log events in the specified log group. -}
    , _tags              :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _computed_arn      :: !(TF.Attribute Text)
    {- ^ - The Amazon Resource Name (ARN) specifying the log group. -}
    } deriving (Show, Eq)

instance TF.ToHCL CloudwatchLogGroupResource where
    toHCL CloudwatchLogGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "kms_key_id" <$> TF.argument _kms_key_id
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "name_prefix" <$> TF.argument _name_prefix
        , TF.assign "retention_in_days" <$> TF.argument _retention_in_days
        , TF.assign "tags" <$> TF.argument _tags
        ]

instance HasKmsKeyId CloudwatchLogGroupResource (TF.Argument Text) where
    kmsKeyId f s@CloudwatchLogGroupResource{..} =
        (\a -> s { _kms_key_id = a } :: CloudwatchLogGroupResource)
             <$> f _kms_key_id

instance HasName CloudwatchLogGroupResource (TF.Argument Text) where
    name f s@CloudwatchLogGroupResource{..} =
        (\a -> s { _name = a } :: CloudwatchLogGroupResource)
             <$> f _name

instance HasNamePrefix CloudwatchLogGroupResource (TF.Argument Text) where
    namePrefix f s@CloudwatchLogGroupResource{..} =
        (\a -> s { _name_prefix = a } :: CloudwatchLogGroupResource)
             <$> f _name_prefix

instance HasRetentionInDays CloudwatchLogGroupResource (TF.Argument Text) where
    retentionInDays f s@CloudwatchLogGroupResource{..} =
        (\a -> s { _retention_in_days = a } :: CloudwatchLogGroupResource)
             <$> f _retention_in_days

instance HasTags CloudwatchLogGroupResource (TF.Argument TF.Tags) where
    tags f s@CloudwatchLogGroupResource{..} =
        (\a -> s { _tags = a } :: CloudwatchLogGroupResource)
             <$> f _tags

instance HasComputedArn CloudwatchLogGroupResource (TF.Attribute Text) where
    computedArn f s@CloudwatchLogGroupResource{..} =
        (\a -> s { _computed_arn = a } :: CloudwatchLogGroupResource)
             <$> f _computed_arn

cloudwatchLogGroupResource :: TF.Resource TF.AWS CloudwatchLogGroupResource
cloudwatchLogGroupResource =
    TF.newResource "aws_cloudwatch_log_group" $
        CloudwatchLogGroupResource {
            _kms_key_id = TF.Nil
            , _name = TF.Nil
            , _name_prefix = TF.Nil
            , _retention_in_days = TF.Nil
            , _tags = TF.Nil
            , _computed_arn = TF.Compute "arn"
            }

{- | The @aws_cloudwatch_log_metric_filter@ AWS resource.

Provides a CloudWatch Log Metric Filter resource.
-}
data CloudwatchLogMetricFilterResource = CloudwatchLogMetricFilterResource {
      _log_group_name        :: !(TF.Argument Text)
    {- ^ (Required) The name of the log group to associate the metric filter with. -}
    , _metric_transformation :: !(TF.Argument Text)
    {- ^ (Required) A block defining collection of information needed to define how metric data gets emitted. See below. -}
    , _name                  :: !(TF.Argument Text)
    {- ^ (Required) A name for the metric filter. -}
    , _pattern               :: !(TF.Argument Text)
    {- ^ (Required) A valid <https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/FilterAndPatternSyntax.html> for extracting metric data out of ingested log events. -}
    , _computed_id           :: !(TF.Attribute Text)
    {- ^ - The name of the metric filter. -}
    } deriving (Show, Eq)

instance TF.ToHCL CloudwatchLogMetricFilterResource where
    toHCL CloudwatchLogMetricFilterResource{..} = TF.block $ catMaybes
        [ TF.assign "log_group_name" <$> TF.argument _log_group_name
        , TF.assign "metric_transformation" <$> TF.argument _metric_transformation
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "pattern" <$> TF.argument _pattern
        ]

instance HasLogGroupName CloudwatchLogMetricFilterResource (TF.Argument Text) where
    logGroupName f s@CloudwatchLogMetricFilterResource{..} =
        (\a -> s { _log_group_name = a } :: CloudwatchLogMetricFilterResource)
             <$> f _log_group_name

instance HasMetricTransformation CloudwatchLogMetricFilterResource (TF.Argument Text) where
    metricTransformation f s@CloudwatchLogMetricFilterResource{..} =
        (\a -> s { _metric_transformation = a } :: CloudwatchLogMetricFilterResource)
             <$> f _metric_transformation

instance HasName CloudwatchLogMetricFilterResource (TF.Argument Text) where
    name f s@CloudwatchLogMetricFilterResource{..} =
        (\a -> s { _name = a } :: CloudwatchLogMetricFilterResource)
             <$> f _name

instance HasPattern CloudwatchLogMetricFilterResource (TF.Argument Text) where
    pattern f s@CloudwatchLogMetricFilterResource{..} =
        (\a -> s { _pattern = a } :: CloudwatchLogMetricFilterResource)
             <$> f _pattern

instance HasComputedId CloudwatchLogMetricFilterResource (TF.Attribute Text) where
    computedId f s@CloudwatchLogMetricFilterResource{..} =
        (\a -> s { _computed_id = a } :: CloudwatchLogMetricFilterResource)
             <$> f _computed_id

cloudwatchLogMetricFilterResource :: TF.Resource TF.AWS CloudwatchLogMetricFilterResource
cloudwatchLogMetricFilterResource =
    TF.newResource "aws_cloudwatch_log_metric_filter" $
        CloudwatchLogMetricFilterResource {
            _log_group_name = TF.Nil
            , _metric_transformation = TF.Nil
            , _name = TF.Nil
            , _pattern = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_cloudwatch_log_resource_policy@ AWS resource.

Provides a resource to manage a CloudWatch log resource policy.
-}
data CloudwatchLogResourcePolicyResource = CloudwatchLogResourcePolicyResource {
      _policy_document :: !(TF.Argument Text)
    {- ^ (Required) Details of the resource policy, including the identity of the principal that is enabled to put logs to this account. This is formatted as a JSON string. Maximum length of 5120 characters. -}
    , _policy_name     :: !(TF.Argument Text)
    {- ^ (Required) Name of the resource policy. -}
    , _computed_id     :: !(TF.Attribute Text)
    {- ^ - The name of the CloudWatch log resource policy -}
    } deriving (Show, Eq)

instance TF.ToHCL CloudwatchLogResourcePolicyResource where
    toHCL CloudwatchLogResourcePolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "policy_document" <$> TF.argument _policy_document
        , TF.assign "policy_name" <$> TF.argument _policy_name
        ]

instance HasPolicyDocument CloudwatchLogResourcePolicyResource (TF.Argument Text) where
    policyDocument f s@CloudwatchLogResourcePolicyResource{..} =
        (\a -> s { _policy_document = a } :: CloudwatchLogResourcePolicyResource)
             <$> f _policy_document

instance HasPolicyName CloudwatchLogResourcePolicyResource (TF.Argument Text) where
    policyName f s@CloudwatchLogResourcePolicyResource{..} =
        (\a -> s { _policy_name = a } :: CloudwatchLogResourcePolicyResource)
             <$> f _policy_name

instance HasComputedId CloudwatchLogResourcePolicyResource (TF.Attribute Text) where
    computedId f s@CloudwatchLogResourcePolicyResource{..} =
        (\a -> s { _computed_id = a } :: CloudwatchLogResourcePolicyResource)
             <$> f _computed_id

cloudwatchLogResourcePolicyResource :: TF.Resource TF.AWS CloudwatchLogResourcePolicyResource
cloudwatchLogResourcePolicyResource =
    TF.newResource "aws_cloudwatch_log_resource_policy" $
        CloudwatchLogResourcePolicyResource {
            _policy_document = TF.Nil
            , _policy_name = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_cloudwatch_log_stream@ AWS resource.

Provides a CloudWatch Log Stream resource.
-}
data CloudwatchLogStreamResource = CloudwatchLogStreamResource {
      _log_group_name :: !(TF.Argument Text)
    {- ^ (Required) The name of the log group under which the log stream is to be created. -}
    , _name           :: !(TF.Argument Text)
    {- ^ (Required) The name of the log stream. Must not be longer than 512 characters and must not contain @:@ -}
    , _computed_arn   :: !(TF.Attribute Text)
    {- ^ - The Amazon Resource Name (ARN) specifying the log stream. -}
    } deriving (Show, Eq)

instance TF.ToHCL CloudwatchLogStreamResource where
    toHCL CloudwatchLogStreamResource{..} = TF.block $ catMaybes
        [ TF.assign "log_group_name" <$> TF.argument _log_group_name
        , TF.assign "name" <$> TF.argument _name
        ]

instance HasLogGroupName CloudwatchLogStreamResource (TF.Argument Text) where
    logGroupName f s@CloudwatchLogStreamResource{..} =
        (\a -> s { _log_group_name = a } :: CloudwatchLogStreamResource)
             <$> f _log_group_name

instance HasName CloudwatchLogStreamResource (TF.Argument Text) where
    name f s@CloudwatchLogStreamResource{..} =
        (\a -> s { _name = a } :: CloudwatchLogStreamResource)
             <$> f _name

instance HasComputedArn CloudwatchLogStreamResource (TF.Attribute Text) where
    computedArn f s@CloudwatchLogStreamResource{..} =
        (\a -> s { _computed_arn = a } :: CloudwatchLogStreamResource)
             <$> f _computed_arn

cloudwatchLogStreamResource :: TF.Resource TF.AWS CloudwatchLogStreamResource
cloudwatchLogStreamResource =
    TF.newResource "aws_cloudwatch_log_stream" $
        CloudwatchLogStreamResource {
            _log_group_name = TF.Nil
            , _name = TF.Nil
            , _computed_arn = TF.Compute "arn"
            }

{- | The @aws_cloudwatch_log_subscription_filter@ AWS resource.

Provides a CloudWatch Logs subscription filter resource.
-}
data CloudwatchLogSubscriptionFilterResource = CloudwatchLogSubscriptionFilterResource {
      _destination_arn :: !(TF.Argument Text)
    {- ^ (Required) The ARN of the destination to deliver matching log events to. Kinesis stream or Lambda function ARN. -}
    , _filter_pattern  :: !(TF.Argument Text)
    {- ^ (Required) A valid CloudWatch Logs filter pattern for subscribing to a filtered stream of log events. -}
    , _log_group_name  :: !(TF.Argument Text)
    {- ^ (Required) The name of the log group to associate the subscription filter with -}
    , _name            :: !(TF.Argument Text)
    {- ^ (Required) A name for the subscription filter -}
    , _role_arn        :: !(TF.Argument Text)
    {- ^ (Optional) The ARN of an IAM role that grants Amazon CloudWatch Logs permissions to deliver ingested log events to the destination. If you use Lambda as a destination, you should skip this argument and use @aws_lambda_permission@ resource for granting access from CloudWatch logs to the destination Lambda function. -}
    , _computed_arn    :: !(TF.Attribute Text)
    {- ^ - The Amazon Resource Name (ARN) specifying the log subscription filter. -}
    } deriving (Show, Eq)

instance TF.ToHCL CloudwatchLogSubscriptionFilterResource where
    toHCL CloudwatchLogSubscriptionFilterResource{..} = TF.block $ catMaybes
        [ TF.assign "destination_arn" <$> TF.argument _destination_arn
        , TF.assign "filter_pattern" <$> TF.argument _filter_pattern
        , TF.assign "log_group_name" <$> TF.argument _log_group_name
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "role_arn" <$> TF.argument _role_arn
        ]

instance HasDestinationArn CloudwatchLogSubscriptionFilterResource (TF.Argument Text) where
    destinationArn f s@CloudwatchLogSubscriptionFilterResource{..} =
        (\a -> s { _destination_arn = a } :: CloudwatchLogSubscriptionFilterResource)
             <$> f _destination_arn

instance HasFilterPattern CloudwatchLogSubscriptionFilterResource (TF.Argument Text) where
    filterPattern f s@CloudwatchLogSubscriptionFilterResource{..} =
        (\a -> s { _filter_pattern = a } :: CloudwatchLogSubscriptionFilterResource)
             <$> f _filter_pattern

instance HasLogGroupName CloudwatchLogSubscriptionFilterResource (TF.Argument Text) where
    logGroupName f s@CloudwatchLogSubscriptionFilterResource{..} =
        (\a -> s { _log_group_name = a } :: CloudwatchLogSubscriptionFilterResource)
             <$> f _log_group_name

instance HasName CloudwatchLogSubscriptionFilterResource (TF.Argument Text) where
    name f s@CloudwatchLogSubscriptionFilterResource{..} =
        (\a -> s { _name = a } :: CloudwatchLogSubscriptionFilterResource)
             <$> f _name

instance HasRoleArn CloudwatchLogSubscriptionFilterResource (TF.Argument Text) where
    roleArn f s@CloudwatchLogSubscriptionFilterResource{..} =
        (\a -> s { _role_arn = a } :: CloudwatchLogSubscriptionFilterResource)
             <$> f _role_arn

instance HasComputedArn CloudwatchLogSubscriptionFilterResource (TF.Attribute Text) where
    computedArn f s@CloudwatchLogSubscriptionFilterResource{..} =
        (\a -> s { _computed_arn = a } :: CloudwatchLogSubscriptionFilterResource)
             <$> f _computed_arn

cloudwatchLogSubscriptionFilterResource :: TF.Resource TF.AWS CloudwatchLogSubscriptionFilterResource
cloudwatchLogSubscriptionFilterResource =
    TF.newResource "aws_cloudwatch_log_subscription_filter" $
        CloudwatchLogSubscriptionFilterResource {
            _destination_arn = TF.Nil
            , _filter_pattern = TF.Nil
            , _log_group_name = TF.Nil
            , _name = TF.Nil
            , _role_arn = TF.Nil
            , _computed_arn = TF.Compute "arn"
            }

{- | The @aws_cloudwatch_metric_alarm@ AWS resource.

Provides a CloudWatch Metric Alarm resource.
-}
data CloudwatchMetricAlarmResource = CloudwatchMetricAlarmResource {
      _actions_enabled                       :: !(TF.Argument TF.Bool)
    {- ^ (Optional) Indicates whether or not actions should be executed during any changes to the alarm's state. Defaults to @true@ . -}
    , _alarm_actions                         :: !(TF.Argument Text)
    {- ^ (Optional) The list of actions to execute when this alarm transitions into an ALARM state from any other state. Each action is specified as an Amazon Resource Number (ARN). -}
    , _alarm_description                     :: !(TF.Argument Text)
    {- ^ (Optional) The description for the alarm. -}
    , _alarm_name                            :: !(TF.Argument Text)
    {- ^ (Required) The descriptive name for the alarm. This name must be unique within the user's AWS account -}
    , _comparison_operator                   :: !(TF.Argument Text)
    {- ^ (Required) The arithmetic operation to use when comparing the specified Statistic and Threshold. The specified Statistic value is used as the first operand. Either of the following is supported: @GreaterThanOrEqualToThreshold@ , @GreaterThanThreshold@ , @LessThanThreshold@ , @LessThanOrEqualToThreshold@ . -}
    , _datapoints_to_alarm                   :: !(TF.Argument Text)
    {- ^ (Optional) The number of datapoints that must be breaching to trigger the alarm. -}
    , _dimensions                            :: !(TF.Argument Text)
    {- ^ (Optional) The dimensions for the alarm's associated metric.  For the list of available dimensions see the AWS documentation <http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html> . -}
    , _evaluate_low_sample_count_percentiles :: !(TF.Argument Text)
    {- ^ (Optional) Used only for alarms based on percentiles. If you specify @ignore@ , the alarm state will not change during periods with too few data points to be statistically significant. If you specify @evaluate@ or omit this parameter, the alarm will always be evaluated and possibly change state no matter how many data points are available. The following values are supported: @ignore@ , and @evaluate@ . -}
    , _evaluation_periods                    :: !(TF.Argument Text)
    {- ^ (Required) The number of periods over which data is compared to the specified threshold. -}
    , _extended_statistic                    :: !(TF.Argument Text)
    {- ^ (Optional) The percentile statistic for the metric associated with the alarm. Specify a value between p0.0 and p100. -}
    , _insufficient_data_actions             :: !(TF.Argument Text)
    {- ^ (Optional) The list of actions to execute when this alarm transitions into an INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Number (ARN). -}
    , _metric_name                           :: !(TF.Argument Text)
    {- ^ (Required) The name for the alarm's associated metric. See docs for <https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html> . -}
    , _namespace                             :: !(TF.Argument Text)
    {- ^ (Required) The namespace for the alarm's associated metric. See docs for the <https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/aws-namespaces.html> . See docs for <https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html> . -}
    , _ok_actions                            :: !(TF.Argument Text)
    {- ^ (Optional) The list of actions to execute when this alarm transitions into an OK state from any other state. Each action is specified as an Amazon Resource Number (ARN). -}
    , _period                                :: !(TF.Argument Text)
    {- ^ (Required) The period in seconds over which the specified @statistic@ is applied. -}
    , _statistic                             :: !(TF.Argument Text)
    {- ^ (Optional) The statistic to apply to the alarm's associated metric. Either of the following is supported: @SampleCount@ , @Average@ , @Sum@ , @Minimum@ , @Maximum@ -}
    , _threshold                             :: !(TF.Argument Text)
    {- ^ (Required) The value against which the specified statistic is compared. -}
    , _treat_missing_data                    :: !(TF.Argument Text)
    {- ^ (Optional) Sets how this alarm is to handle missing data points. The following values are supported: @missing@ , @ignore@ , @breaching@ and @notBreaching@ . Defaults to @missing@ . -}
    , _unit                                  :: !(TF.Argument Text)
    {- ^ (Optional) The unit for the alarm's associated metric. -}
    , _computed_id                           :: !(TF.Attribute Text)
    {- ^ - The ID of the health check -}
    } deriving (Show, Eq)

instance TF.ToHCL CloudwatchMetricAlarmResource where
    toHCL CloudwatchMetricAlarmResource{..} = TF.block $ catMaybes
        [ TF.assign "actions_enabled" <$> TF.argument _actions_enabled
        , TF.assign "alarm_actions" <$> TF.argument _alarm_actions
        , TF.assign "alarm_description" <$> TF.argument _alarm_description
        , TF.assign "alarm_name" <$> TF.argument _alarm_name
        , TF.assign "comparison_operator" <$> TF.argument _comparison_operator
        , TF.assign "datapoints_to_alarm" <$> TF.argument _datapoints_to_alarm
        , TF.assign "dimensions" <$> TF.argument _dimensions
        , TF.assign "evaluate_low_sample_count_percentiles" <$> TF.argument _evaluate_low_sample_count_percentiles
        , TF.assign "evaluation_periods" <$> TF.argument _evaluation_periods
        , TF.assign "extended_statistic" <$> TF.argument _extended_statistic
        , TF.assign "insufficient_data_actions" <$> TF.argument _insufficient_data_actions
        , TF.assign "metric_name" <$> TF.argument _metric_name
        , TF.assign "namespace" <$> TF.argument _namespace
        , TF.assign "ok_actions" <$> TF.argument _ok_actions
        , TF.assign "period" <$> TF.argument _period
        , TF.assign "statistic" <$> TF.argument _statistic
        , TF.assign "threshold" <$> TF.argument _threshold
        , TF.assign "treat_missing_data" <$> TF.argument _treat_missing_data
        , TF.assign "unit" <$> TF.argument _unit
        ]

instance HasActionsEnabled CloudwatchMetricAlarmResource (TF.Argument TF.Bool) where
    actionsEnabled f s@CloudwatchMetricAlarmResource{..} =
        (\a -> s { _actions_enabled = a } :: CloudwatchMetricAlarmResource)
             <$> f _actions_enabled

instance HasAlarmActions CloudwatchMetricAlarmResource (TF.Argument Text) where
    alarmActions f s@CloudwatchMetricAlarmResource{..} =
        (\a -> s { _alarm_actions = a } :: CloudwatchMetricAlarmResource)
             <$> f _alarm_actions

instance HasAlarmDescription CloudwatchMetricAlarmResource (TF.Argument Text) where
    alarmDescription f s@CloudwatchMetricAlarmResource{..} =
        (\a -> s { _alarm_description = a } :: CloudwatchMetricAlarmResource)
             <$> f _alarm_description

instance HasAlarmName CloudwatchMetricAlarmResource (TF.Argument Text) where
    alarmName f s@CloudwatchMetricAlarmResource{..} =
        (\a -> s { _alarm_name = a } :: CloudwatchMetricAlarmResource)
             <$> f _alarm_name

instance HasComparisonOperator CloudwatchMetricAlarmResource (TF.Argument Text) where
    comparisonOperator f s@CloudwatchMetricAlarmResource{..} =
        (\a -> s { _comparison_operator = a } :: CloudwatchMetricAlarmResource)
             <$> f _comparison_operator

instance HasDatapointsToAlarm CloudwatchMetricAlarmResource (TF.Argument Text) where
    datapointsToAlarm f s@CloudwatchMetricAlarmResource{..} =
        (\a -> s { _datapoints_to_alarm = a } :: CloudwatchMetricAlarmResource)
             <$> f _datapoints_to_alarm

instance HasDimensions CloudwatchMetricAlarmResource (TF.Argument Text) where
    dimensions f s@CloudwatchMetricAlarmResource{..} =
        (\a -> s { _dimensions = a } :: CloudwatchMetricAlarmResource)
             <$> f _dimensions

instance HasEvaluateLowSampleCountPercentiles CloudwatchMetricAlarmResource (TF.Argument Text) where
    evaluateLowSampleCountPercentiles f s@CloudwatchMetricAlarmResource{..} =
        (\a -> s { _evaluate_low_sample_count_percentiles = a } :: CloudwatchMetricAlarmResource)
             <$> f _evaluate_low_sample_count_percentiles

instance HasEvaluationPeriods CloudwatchMetricAlarmResource (TF.Argument Text) where
    evaluationPeriods f s@CloudwatchMetricAlarmResource{..} =
        (\a -> s { _evaluation_periods = a } :: CloudwatchMetricAlarmResource)
             <$> f _evaluation_periods

instance HasExtendedStatistic CloudwatchMetricAlarmResource (TF.Argument Text) where
    extendedStatistic f s@CloudwatchMetricAlarmResource{..} =
        (\a -> s { _extended_statistic = a } :: CloudwatchMetricAlarmResource)
             <$> f _extended_statistic

instance HasInsufficientDataActions CloudwatchMetricAlarmResource (TF.Argument Text) where
    insufficientDataActions f s@CloudwatchMetricAlarmResource{..} =
        (\a -> s { _insufficient_data_actions = a } :: CloudwatchMetricAlarmResource)
             <$> f _insufficient_data_actions

instance HasMetricName CloudwatchMetricAlarmResource (TF.Argument Text) where
    metricName f s@CloudwatchMetricAlarmResource{..} =
        (\a -> s { _metric_name = a } :: CloudwatchMetricAlarmResource)
             <$> f _metric_name

instance HasNamespace CloudwatchMetricAlarmResource (TF.Argument Text) where
    namespace f s@CloudwatchMetricAlarmResource{..} =
        (\a -> s { _namespace = a } :: CloudwatchMetricAlarmResource)
             <$> f _namespace

instance HasOkActions CloudwatchMetricAlarmResource (TF.Argument Text) where
    okActions f s@CloudwatchMetricAlarmResource{..} =
        (\a -> s { _ok_actions = a } :: CloudwatchMetricAlarmResource)
             <$> f _ok_actions

instance HasPeriod CloudwatchMetricAlarmResource (TF.Argument Text) where
    period f s@CloudwatchMetricAlarmResource{..} =
        (\a -> s { _period = a } :: CloudwatchMetricAlarmResource)
             <$> f _period

instance HasStatistic CloudwatchMetricAlarmResource (TF.Argument Text) where
    statistic f s@CloudwatchMetricAlarmResource{..} =
        (\a -> s { _statistic = a } :: CloudwatchMetricAlarmResource)
             <$> f _statistic

instance HasThreshold CloudwatchMetricAlarmResource (TF.Argument Text) where
    threshold f s@CloudwatchMetricAlarmResource{..} =
        (\a -> s { _threshold = a } :: CloudwatchMetricAlarmResource)
             <$> f _threshold

instance HasTreatMissingData CloudwatchMetricAlarmResource (TF.Argument Text) where
    treatMissingData f s@CloudwatchMetricAlarmResource{..} =
        (\a -> s { _treat_missing_data = a } :: CloudwatchMetricAlarmResource)
             <$> f _treat_missing_data

instance HasUnit CloudwatchMetricAlarmResource (TF.Argument Text) where
    unit f s@CloudwatchMetricAlarmResource{..} =
        (\a -> s { _unit = a } :: CloudwatchMetricAlarmResource)
             <$> f _unit

instance HasComputedId CloudwatchMetricAlarmResource (TF.Attribute Text) where
    computedId f s@CloudwatchMetricAlarmResource{..} =
        (\a -> s { _computed_id = a } :: CloudwatchMetricAlarmResource)
             <$> f _computed_id

cloudwatchMetricAlarmResource :: TF.Resource TF.AWS CloudwatchMetricAlarmResource
cloudwatchMetricAlarmResource =
    TF.newResource "aws_cloudwatch_metric_alarm" $
        CloudwatchMetricAlarmResource {
            _actions_enabled = TF.Nil
            , _alarm_actions = TF.Nil
            , _alarm_description = TF.Nil
            , _alarm_name = TF.Nil
            , _comparison_operator = TF.Nil
            , _datapoints_to_alarm = TF.Nil
            , _dimensions = TF.Nil
            , _evaluate_low_sample_count_percentiles = TF.Nil
            , _evaluation_periods = TF.Nil
            , _extended_statistic = TF.Nil
            , _insufficient_data_actions = TF.Nil
            , _metric_name = TF.Nil
            , _namespace = TF.Nil
            , _ok_actions = TF.Nil
            , _period = TF.Nil
            , _statistic = TF.Nil
            , _threshold = TF.Nil
            , _treat_missing_data = TF.Nil
            , _unit = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_codebuild_project@ AWS resource.

Provides a CodeBuild Project resource.
-}
data CodebuildProjectResource = CodebuildProjectResource {
      _artifacts               :: !(TF.Argument Text)
    {- ^ (Required) Information about the project's build output artifacts. Artifact blocks are documented below. -}
    , _build_timeout           :: !(TF.Argument Text)
    {- ^ (Optional) How long in minutes, from 5 to 480 (8 hours), for AWS CodeBuild to wait until timing out any related build that does not get marked as completed. The default is 60 minutes. -}
    , _description             :: !(TF.Argument Text)
    {- ^ (Optional) A short description of the project. -}
    , _encryption_key          :: !(TF.Argument Text)
    {- ^ (Optional) The AWS Key Management Service (AWS KMS) customer master key (CMK) to be used for encrypting the build project's build output artifacts. -}
    , _environment             :: !(TF.Argument Text)
    {- ^ (Required) Information about the project's build environment. Environment blocks are documented below. -}
    , _name                    :: !(TF.Argument Text)
    {- ^ (Required) The projects name. -}
    , _service_role            :: !(TF.Argument Text)
    {- ^ (Optional) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that enables AWS CodeBuild to interact with dependent AWS services on behalf of the AWS account. -}
    , _source                  :: !(TF.Argument Text)
    {- ^ (Required) Information about the project's input source code. Source blocks are documented below. -}
    , _tags                    :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _computed_description    :: !(TF.Attribute Text)
    {- ^ - A short description of the project. -}
    , _computed_encryption_key :: !(TF.Attribute Text)
    {- ^ - The AWS Key Management Service (AWS KMS) customer master key (CMK) that was used for encrypting the build project's build output artifacts. -}
    , _computed_id             :: !(TF.Attribute Text)
    {- ^ - The ARN of the CodeBuild project. -}
    , _computed_name           :: !(TF.Attribute Text)
    {- ^ - The projects name. -}
    , _computed_service_role   :: !(TF.Attribute Text)
    {- ^ - The ARN of the IAM service role. -}
    } deriving (Show, Eq)

instance TF.ToHCL CodebuildProjectResource where
    toHCL CodebuildProjectResource{..} = TF.block $ catMaybes
        [ TF.assign "artifacts" <$> TF.argument _artifacts
        , TF.assign "build_timeout" <$> TF.argument _build_timeout
        , TF.assign "description" <$> TF.argument _description
        , TF.assign "encryption_key" <$> TF.argument _encryption_key
        , TF.assign "environment" <$> TF.argument _environment
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "service_role" <$> TF.argument _service_role
        , TF.assign "source" <$> TF.argument _source
        , TF.assign "tags" <$> TF.argument _tags
        ]

instance HasArtifacts CodebuildProjectResource (TF.Argument Text) where
    artifacts f s@CodebuildProjectResource{..} =
        (\a -> s { _artifacts = a } :: CodebuildProjectResource)
             <$> f _artifacts

instance HasBuildTimeout CodebuildProjectResource (TF.Argument Text) where
    buildTimeout f s@CodebuildProjectResource{..} =
        (\a -> s { _build_timeout = a } :: CodebuildProjectResource)
             <$> f _build_timeout

instance HasDescription CodebuildProjectResource (TF.Argument Text) where
    description f s@CodebuildProjectResource{..} =
        (\a -> s { _description = a } :: CodebuildProjectResource)
             <$> f _description

instance HasEncryptionKey CodebuildProjectResource (TF.Argument Text) where
    encryptionKey f s@CodebuildProjectResource{..} =
        (\a -> s { _encryption_key = a } :: CodebuildProjectResource)
             <$> f _encryption_key

instance HasEnvironment CodebuildProjectResource (TF.Argument Text) where
    environment f s@CodebuildProjectResource{..} =
        (\a -> s { _environment = a } :: CodebuildProjectResource)
             <$> f _environment

instance HasName CodebuildProjectResource (TF.Argument Text) where
    name f s@CodebuildProjectResource{..} =
        (\a -> s { _name = a } :: CodebuildProjectResource)
             <$> f _name

instance HasServiceRole CodebuildProjectResource (TF.Argument Text) where
    serviceRole f s@CodebuildProjectResource{..} =
        (\a -> s { _service_role = a } :: CodebuildProjectResource)
             <$> f _service_role

instance HasSource CodebuildProjectResource (TF.Argument Text) where
    source f s@CodebuildProjectResource{..} =
        (\a -> s { _source = a } :: CodebuildProjectResource)
             <$> f _source

instance HasTags CodebuildProjectResource (TF.Argument TF.Tags) where
    tags f s@CodebuildProjectResource{..} =
        (\a -> s { _tags = a } :: CodebuildProjectResource)
             <$> f _tags

instance HasComputedDescription CodebuildProjectResource (TF.Attribute Text) where
    computedDescription f s@CodebuildProjectResource{..} =
        (\a -> s { _computed_description = a } :: CodebuildProjectResource)
             <$> f _computed_description

instance HasComputedEncryptionKey CodebuildProjectResource (TF.Attribute Text) where
    computedEncryptionKey f s@CodebuildProjectResource{..} =
        (\a -> s { _computed_encryption_key = a } :: CodebuildProjectResource)
             <$> f _computed_encryption_key

instance HasComputedId CodebuildProjectResource (TF.Attribute Text) where
    computedId f s@CodebuildProjectResource{..} =
        (\a -> s { _computed_id = a } :: CodebuildProjectResource)
             <$> f _computed_id

instance HasComputedName CodebuildProjectResource (TF.Attribute Text) where
    computedName f s@CodebuildProjectResource{..} =
        (\a -> s { _computed_name = a } :: CodebuildProjectResource)
             <$> f _computed_name

instance HasComputedServiceRole CodebuildProjectResource (TF.Attribute Text) where
    computedServiceRole f s@CodebuildProjectResource{..} =
        (\a -> s { _computed_service_role = a } :: CodebuildProjectResource)
             <$> f _computed_service_role

codebuildProjectResource :: TF.Resource TF.AWS CodebuildProjectResource
codebuildProjectResource =
    TF.newResource "aws_codebuild_project" $
        CodebuildProjectResource {
            _artifacts = TF.Nil
            , _build_timeout = TF.Nil
            , _description = TF.Nil
            , _encryption_key = TF.Nil
            , _environment = TF.Nil
            , _name = TF.Nil
            , _service_role = TF.Nil
            , _source = TF.Nil
            , _tags = TF.Nil
            , _computed_description = TF.Compute "description"
            , _computed_encryption_key = TF.Compute "encryption_key"
            , _computed_id = TF.Compute "id"
            , _computed_name = TF.Compute "name"
            , _computed_service_role = TF.Compute "service_role"
            }

{- | The @aws_codecommit_repository@ AWS resource.

Provides a CodeCommit Repository Resource. ~> NOTE on CodeCommit
Availability : The CodeCommit is not yet rolled out in all regions -
available regions are listed
<https://docs.aws.amazon.com/general/latest/gr/rande.html#codecommit_region>
.
-}
data CodecommitRepositoryResource = CodecommitRepositoryResource {
      _default_branch          :: !(TF.Argument Text)
    {- ^ (Optional) The default branch of the repository. The branch specified here needs to exist. -}
    , _description             :: !(TF.Argument Text)
    {- ^ (Optional) The description of the repository. This needs to be less than 1000 characters -}
    , _repository_name         :: !(TF.Argument Text)
    {- ^ (Required) The name for the repository. This needs to be less than 100 characters. -}
    , _computed_arn            :: !(TF.Attribute Text)
    {- ^ - The ARN of the repository -}
    , _computed_clone_url_http :: !(TF.Attribute Text)
    {- ^ - The URL to use for cloning the repository over HTTPS. -}
    , _computed_clone_url_ssh  :: !(TF.Attribute Text)
    {- ^ - The URL to use for cloning the repository over SSH. -}
    , _computed_repository_id  :: !(TF.Attribute Text)
    {- ^ - The ID of the repository -}
    } deriving (Show, Eq)

instance TF.ToHCL CodecommitRepositoryResource where
    toHCL CodecommitRepositoryResource{..} = TF.block $ catMaybes
        [ TF.assign "default_branch" <$> TF.argument _default_branch
        , TF.assign "description" <$> TF.argument _description
        , TF.assign "repository_name" <$> TF.argument _repository_name
        ]

instance HasDefaultBranch CodecommitRepositoryResource (TF.Argument Text) where
    defaultBranch f s@CodecommitRepositoryResource{..} =
        (\a -> s { _default_branch = a } :: CodecommitRepositoryResource)
             <$> f _default_branch

instance HasDescription CodecommitRepositoryResource (TF.Argument Text) where
    description f s@CodecommitRepositoryResource{..} =
        (\a -> s { _description = a } :: CodecommitRepositoryResource)
             <$> f _description

instance HasRepositoryName CodecommitRepositoryResource (TF.Argument Text) where
    repositoryName f s@CodecommitRepositoryResource{..} =
        (\a -> s { _repository_name = a } :: CodecommitRepositoryResource)
             <$> f _repository_name

instance HasComputedArn CodecommitRepositoryResource (TF.Attribute Text) where
    computedArn f s@CodecommitRepositoryResource{..} =
        (\a -> s { _computed_arn = a } :: CodecommitRepositoryResource)
             <$> f _computed_arn

instance HasComputedCloneUrlHttp CodecommitRepositoryResource (TF.Attribute Text) where
    computedCloneUrlHttp f s@CodecommitRepositoryResource{..} =
        (\a -> s { _computed_clone_url_http = a } :: CodecommitRepositoryResource)
             <$> f _computed_clone_url_http

instance HasComputedCloneUrlSsh CodecommitRepositoryResource (TF.Attribute Text) where
    computedCloneUrlSsh f s@CodecommitRepositoryResource{..} =
        (\a -> s { _computed_clone_url_ssh = a } :: CodecommitRepositoryResource)
             <$> f _computed_clone_url_ssh

instance HasComputedRepositoryId CodecommitRepositoryResource (TF.Attribute Text) where
    computedRepositoryId f s@CodecommitRepositoryResource{..} =
        (\a -> s { _computed_repository_id = a } :: CodecommitRepositoryResource)
             <$> f _computed_repository_id

codecommitRepositoryResource :: TF.Resource TF.AWS CodecommitRepositoryResource
codecommitRepositoryResource =
    TF.newResource "aws_codecommit_repository" $
        CodecommitRepositoryResource {
            _default_branch = TF.Nil
            , _description = TF.Nil
            , _repository_name = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_clone_url_http = TF.Compute "clone_url_http"
            , _computed_clone_url_ssh = TF.Compute "clone_url_ssh"
            , _computed_repository_id = TF.Compute "repository_id"
            }

{- | The @aws_codecommit_trigger@ AWS resource.

Provides a CodeCommit Trigger Resource. ~> NOTE on CodeCommit : The
CodeCommit is not yet rolled out in all regions - available regions are
listed
<https://docs.aws.amazon.com/general/latest/gr/rande.html#codecommit_region>
.
-}
data CodecommitTriggerResource = CodecommitTriggerResource {
      _branches        :: !(TF.Argument Text)
    {- ^ (Optional) The branches that will be included in the trigger configuration. If no branches are specified, the trigger will apply to all branches. -}
    , _custom_data     :: !(TF.Argument Text)
    {- ^ (Optional) Any custom data associated with the trigger that will be included in the information sent to the target of the trigger. -}
    , _destination_arn :: !(TF.Argument Text)
    {- ^ (Required) The ARN of the resource that is the target for a trigger. For example, the ARN of a topic in Amazon Simple Notification Service (SNS). -}
    , _events          :: !(TF.Argument Text)
    {- ^ (Required) The repository events that will cause the trigger to run actions in another service, such as sending a notification through Amazon Simple Notification Service (SNS). If no events are specified, the trigger will run for all repository events. Event types include: @all@ , @updateReference@ , @createReference@ , @deleteReference@ . -}
    , _name            :: !(TF.Argument Text)
    {- ^ (Required) The name of the trigger. -}
    , _repository_name :: !(TF.Argument Text)
    {- ^ (Required) The name for the repository. This needs to be less than 100 characters. -}
    } deriving (Show, Eq)

instance TF.ToHCL CodecommitTriggerResource where
    toHCL CodecommitTriggerResource{..} = TF.block $ catMaybes
        [ TF.assign "branches" <$> TF.argument _branches
        , TF.assign "custom_data" <$> TF.argument _custom_data
        , TF.assign "destination_arn" <$> TF.argument _destination_arn
        , TF.assign "events" <$> TF.argument _events
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "repository_name" <$> TF.argument _repository_name
        ]

instance HasBranches CodecommitTriggerResource (TF.Argument Text) where
    branches f s@CodecommitTriggerResource{..} =
        (\a -> s { _branches = a } :: CodecommitTriggerResource)
             <$> f _branches

instance HasCustomData CodecommitTriggerResource (TF.Argument Text) where
    customData f s@CodecommitTriggerResource{..} =
        (\a -> s { _custom_data = a } :: CodecommitTriggerResource)
             <$> f _custom_data

instance HasDestinationArn CodecommitTriggerResource (TF.Argument Text) where
    destinationArn f s@CodecommitTriggerResource{..} =
        (\a -> s { _destination_arn = a } :: CodecommitTriggerResource)
             <$> f _destination_arn

instance HasEvents CodecommitTriggerResource (TF.Argument Text) where
    events f s@CodecommitTriggerResource{..} =
        (\a -> s { _events = a } :: CodecommitTriggerResource)
             <$> f _events

instance HasName CodecommitTriggerResource (TF.Argument Text) where
    name f s@CodecommitTriggerResource{..} =
        (\a -> s { _name = a } :: CodecommitTriggerResource)
             <$> f _name

instance HasRepositoryName CodecommitTriggerResource (TF.Argument Text) where
    repositoryName f s@CodecommitTriggerResource{..} =
        (\a -> s { _repository_name = a } :: CodecommitTriggerResource)
             <$> f _repository_name

codecommitTriggerResource :: TF.Resource TF.AWS CodecommitTriggerResource
codecommitTriggerResource =
    TF.newResource "aws_codecommit_trigger" $
        CodecommitTriggerResource {
            _branches = TF.Nil
            , _custom_data = TF.Nil
            , _destination_arn = TF.Nil
            , _events = TF.Nil
            , _name = TF.Nil
            , _repository_name = TF.Nil
            }

{- | The @aws_codedeploy_app@ AWS resource.

Provides a CodeDeploy application to be used as a basis for deployments
-}
data CodedeployAppResource = CodedeployAppResource {
      _name          :: !(TF.Argument Text)
    {- ^ (Required) The name of the application. -}
    , _computed_id   :: !(TF.Attribute Text)
    {- ^ - Amazon's assigned ID for the application. -}
    , _computed_name :: !(TF.Attribute Text)
    {- ^ - The application's name. -}
    } deriving (Show, Eq)

instance TF.ToHCL CodedeployAppResource where
    toHCL CodedeployAppResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.argument _name
        ]

instance HasName CodedeployAppResource (TF.Argument Text) where
    name f s@CodedeployAppResource{..} =
        (\a -> s { _name = a } :: CodedeployAppResource)
             <$> f _name

instance HasComputedId CodedeployAppResource (TF.Attribute Text) where
    computedId f s@CodedeployAppResource{..} =
        (\a -> s { _computed_id = a } :: CodedeployAppResource)
             <$> f _computed_id

instance HasComputedName CodedeployAppResource (TF.Attribute Text) where
    computedName f s@CodedeployAppResource{..} =
        (\a -> s { _computed_name = a } :: CodedeployAppResource)
             <$> f _computed_name

codedeployAppResource :: TF.Resource TF.AWS CodedeployAppResource
codedeployAppResource =
    TF.newResource "aws_codedeploy_app" $
        CodedeployAppResource {
            _name = TF.Nil
            , _computed_id = TF.Compute "id"
            , _computed_name = TF.Compute "name"
            }

{- | The @aws_codedeploy_deployment_config@ AWS resource.

Provides a CodeDeploy deployment config for an application
-}
data CodedeployDeploymentConfigResource = CodedeployDeploymentConfigResource {
      _deployment_config_name        :: !(TF.Argument Text)
    {- ^ (Required) The name of the deployment config. -}
    , _minimum_healthy_hosts         :: !(TF.Argument Text)
    {- ^ (Optional) A minimum_healthy_hosts block. Minimum Healthy Hosts are documented below. -}
    , _computed_deployment_config_id :: !(TF.Attribute Text)
    {- ^ - The AWS Assigned deployment config id -}
    , _computed_id                   :: !(TF.Attribute Text)
    {- ^ - The deployment group's config name. -}
    } deriving (Show, Eq)

instance TF.ToHCL CodedeployDeploymentConfigResource where
    toHCL CodedeployDeploymentConfigResource{..} = TF.block $ catMaybes
        [ TF.assign "deployment_config_name" <$> TF.argument _deployment_config_name
        , TF.assign "minimum_healthy_hosts" <$> TF.argument _minimum_healthy_hosts
        ]

instance HasDeploymentConfigName CodedeployDeploymentConfigResource (TF.Argument Text) where
    deploymentConfigName f s@CodedeployDeploymentConfigResource{..} =
        (\a -> s { _deployment_config_name = a } :: CodedeployDeploymentConfigResource)
             <$> f _deployment_config_name

instance HasMinimumHealthyHosts CodedeployDeploymentConfigResource (TF.Argument Text) where
    minimumHealthyHosts f s@CodedeployDeploymentConfigResource{..} =
        (\a -> s { _minimum_healthy_hosts = a } :: CodedeployDeploymentConfigResource)
             <$> f _minimum_healthy_hosts

instance HasComputedDeploymentConfigId CodedeployDeploymentConfigResource (TF.Attribute Text) where
    computedDeploymentConfigId f s@CodedeployDeploymentConfigResource{..} =
        (\a -> s { _computed_deployment_config_id = a } :: CodedeployDeploymentConfigResource)
             <$> f _computed_deployment_config_id

instance HasComputedId CodedeployDeploymentConfigResource (TF.Attribute Text) where
    computedId f s@CodedeployDeploymentConfigResource{..} =
        (\a -> s { _computed_id = a } :: CodedeployDeploymentConfigResource)
             <$> f _computed_id

codedeployDeploymentConfigResource :: TF.Resource TF.AWS CodedeployDeploymentConfigResource
codedeployDeploymentConfigResource =
    TF.newResource "aws_codedeploy_deployment_config" $
        CodedeployDeploymentConfigResource {
            _deployment_config_name = TF.Nil
            , _minimum_healthy_hosts = TF.Nil
            , _computed_deployment_config_id = TF.Compute "deployment_config_id"
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_codedeploy_deployment_group@ AWS resource.

Provides a CodeDeploy Deployment Group for a CodeDeploy Application
-}
data CodedeployDeploymentGroupResource = CodedeployDeploymentGroupResource {
      _alarm_configuration             :: !(TF.Argument Text)
    {- ^ (Optional) Information about alarms associated with the deployment group (documented below). -}
    , _app_name                        :: !(TF.Argument Text)
    {- ^ (Required) The name of the application. -}
    , _auto_rollback_configuration     :: !(TF.Argument Text)
    {- ^ (Optional) The automatic rollback configuration associated with the deployment group (documented below). -}
    , _autoscaling_groups              :: !(TF.Argument Text)
    {- ^ (Optional) Autoscaling groups associated with the deployment group. -}
    , _blue_green_deployment_config    :: !(TF.Argument Text)
    {- ^ (Optional) Information about blue/green deployment options for a deployment group (documented below). -}
    , _deployment_config_name          :: !(TF.Argument Text)
    {- ^ (Optional) The name of the group's deployment config. The default is "CodeDeployDefault.OneAtATime". -}
    , _deployment_group_name           :: !(TF.Argument Text)
    {- ^ (Required) The name of the deployment group. -}
    , _deployment_style                :: !(TF.Argument Text)
    {- ^ (Optional) Information about the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer (documented below). -}
    , _ec2_tag_filter                  :: !(TF.Argument Text)
    {- ^ (Optional) Tag filters associated with the group. See the AWS docs for details. -}
    , _load_balancer_info              :: !(TF.Argument Text)
    {- ^ (Optional) Information about the load balancer to use in a blue/green deployment (documented below). -}
    , _on_premises_instance_tag_filter :: !(TF.Argument Text)
    {- ^ (Optional) On premise tag filters associated with the group. See the AWS docs for details. -}
    , _service_role_arn                :: !(TF.Argument Text)
    {- ^ (Required) The service role ARN that allows deployments. -}
    , _trigger_configuration           :: !(TF.Argument Text)
    {- ^ (Optional) Trigger Configurations for the deployment group (documented below). -}
    } deriving (Show, Eq)

instance TF.ToHCL CodedeployDeploymentGroupResource where
    toHCL CodedeployDeploymentGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "alarm_configuration" <$> TF.argument _alarm_configuration
        , TF.assign "app_name" <$> TF.argument _app_name
        , TF.assign "auto_rollback_configuration" <$> TF.argument _auto_rollback_configuration
        , TF.assign "autoscaling_groups" <$> TF.argument _autoscaling_groups
        , TF.assign "blue_green_deployment_config" <$> TF.argument _blue_green_deployment_config
        , TF.assign "deployment_config_name" <$> TF.argument _deployment_config_name
        , TF.assign "deployment_group_name" <$> TF.argument _deployment_group_name
        , TF.assign "deployment_style" <$> TF.argument _deployment_style
        , TF.assign "ec2_tag_filter" <$> TF.argument _ec2_tag_filter
        , TF.assign "load_balancer_info" <$> TF.argument _load_balancer_info
        , TF.assign "on_premises_instance_tag_filter" <$> TF.argument _on_premises_instance_tag_filter
        , TF.assign "service_role_arn" <$> TF.argument _service_role_arn
        , TF.assign "trigger_configuration" <$> TF.argument _trigger_configuration
        ]

instance HasAlarmConfiguration CodedeployDeploymentGroupResource (TF.Argument Text) where
    alarmConfiguration f s@CodedeployDeploymentGroupResource{..} =
        (\a -> s { _alarm_configuration = a } :: CodedeployDeploymentGroupResource)
             <$> f _alarm_configuration

instance HasAppName CodedeployDeploymentGroupResource (TF.Argument Text) where
    appName f s@CodedeployDeploymentGroupResource{..} =
        (\a -> s { _app_name = a } :: CodedeployDeploymentGroupResource)
             <$> f _app_name

instance HasAutoRollbackConfiguration CodedeployDeploymentGroupResource (TF.Argument Text) where
    autoRollbackConfiguration f s@CodedeployDeploymentGroupResource{..} =
        (\a -> s { _auto_rollback_configuration = a } :: CodedeployDeploymentGroupResource)
             <$> f _auto_rollback_configuration

instance HasAutoscalingGroups CodedeployDeploymentGroupResource (TF.Argument Text) where
    autoscalingGroups f s@CodedeployDeploymentGroupResource{..} =
        (\a -> s { _autoscaling_groups = a } :: CodedeployDeploymentGroupResource)
             <$> f _autoscaling_groups

instance HasBlueGreenDeploymentConfig CodedeployDeploymentGroupResource (TF.Argument Text) where
    blueGreenDeploymentConfig f s@CodedeployDeploymentGroupResource{..} =
        (\a -> s { _blue_green_deployment_config = a } :: CodedeployDeploymentGroupResource)
             <$> f _blue_green_deployment_config

instance HasDeploymentConfigName CodedeployDeploymentGroupResource (TF.Argument Text) where
    deploymentConfigName f s@CodedeployDeploymentGroupResource{..} =
        (\a -> s { _deployment_config_name = a } :: CodedeployDeploymentGroupResource)
             <$> f _deployment_config_name

instance HasDeploymentGroupName CodedeployDeploymentGroupResource (TF.Argument Text) where
    deploymentGroupName f s@CodedeployDeploymentGroupResource{..} =
        (\a -> s { _deployment_group_name = a } :: CodedeployDeploymentGroupResource)
             <$> f _deployment_group_name

instance HasDeploymentStyle CodedeployDeploymentGroupResource (TF.Argument Text) where
    deploymentStyle f s@CodedeployDeploymentGroupResource{..} =
        (\a -> s { _deployment_style = a } :: CodedeployDeploymentGroupResource)
             <$> f _deployment_style

instance HasEc2TagFilter CodedeployDeploymentGroupResource (TF.Argument Text) where
    ec2TagFilter f s@CodedeployDeploymentGroupResource{..} =
        (\a -> s { _ec2_tag_filter = a } :: CodedeployDeploymentGroupResource)
             <$> f _ec2_tag_filter

instance HasLoadBalancerInfo CodedeployDeploymentGroupResource (TF.Argument Text) where
    loadBalancerInfo f s@CodedeployDeploymentGroupResource{..} =
        (\a -> s { _load_balancer_info = a } :: CodedeployDeploymentGroupResource)
             <$> f _load_balancer_info

instance HasOnPremisesInstanceTagFilter CodedeployDeploymentGroupResource (TF.Argument Text) where
    onPremisesInstanceTagFilter f s@CodedeployDeploymentGroupResource{..} =
        (\a -> s { _on_premises_instance_tag_filter = a } :: CodedeployDeploymentGroupResource)
             <$> f _on_premises_instance_tag_filter

instance HasServiceRoleArn CodedeployDeploymentGroupResource (TF.Argument Text) where
    serviceRoleArn f s@CodedeployDeploymentGroupResource{..} =
        (\a -> s { _service_role_arn = a } :: CodedeployDeploymentGroupResource)
             <$> f _service_role_arn

instance HasTriggerConfiguration CodedeployDeploymentGroupResource (TF.Argument Text) where
    triggerConfiguration f s@CodedeployDeploymentGroupResource{..} =
        (\a -> s { _trigger_configuration = a } :: CodedeployDeploymentGroupResource)
             <$> f _trigger_configuration

codedeployDeploymentGroupResource :: TF.Resource TF.AWS CodedeployDeploymentGroupResource
codedeployDeploymentGroupResource =
    TF.newResource "aws_codedeploy_deployment_group" $
        CodedeployDeploymentGroupResource {
            _alarm_configuration = TF.Nil
            , _app_name = TF.Nil
            , _auto_rollback_configuration = TF.Nil
            , _autoscaling_groups = TF.Nil
            , _blue_green_deployment_config = TF.Nil
            , _deployment_config_name = TF.Nil
            , _deployment_group_name = TF.Nil
            , _deployment_style = TF.Nil
            , _ec2_tag_filter = TF.Nil
            , _load_balancer_info = TF.Nil
            , _on_premises_instance_tag_filter = TF.Nil
            , _service_role_arn = TF.Nil
            , _trigger_configuration = TF.Nil
            }

{- | The @aws_codepipeline@ AWS resource.

Provides a CodePipeline. ~> NOTE on @aws_codepipeline@ : - the
@GITHUB_TOKEN@ environment variable must be set if the GitHub provider is
specified.
-}
data CodepipelineResource = CodepipelineResource {
      _artifact_store :: !(TF.Argument Text)
    {- ^ (Required) An artifact_store block. Artifact stores are documented below. -}
    , _name           :: !(TF.Argument Text)
    {- ^ (Required) The name of the pipeline. -}
    , _role_arn       :: !(TF.Argument Text)
    {- ^ (Required) A service role Amazon Resource Name (ARN) that grants AWS CodePipeline permission to make calls to AWS services on your behalf. -}
    , _stage          :: !(TF.Argument Text)
    {- ^ (Required) A stage block. Stages are documented below. -}
    , _computed_arn   :: !(TF.Attribute Text)
    {- ^ - The codepipeline ARN. -}
    , _computed_id    :: !(TF.Attribute Text)
    {- ^ - The codepipeline ID. -}
    } deriving (Show, Eq)

instance TF.ToHCL CodepipelineResource where
    toHCL CodepipelineResource{..} = TF.block $ catMaybes
        [ TF.assign "artifact_store" <$> TF.argument _artifact_store
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "role_arn" <$> TF.argument _role_arn
        , TF.assign "stage" <$> TF.argument _stage
        ]

instance HasArtifactStore CodepipelineResource (TF.Argument Text) where
    artifactStore f s@CodepipelineResource{..} =
        (\a -> s { _artifact_store = a } :: CodepipelineResource)
             <$> f _artifact_store

instance HasName CodepipelineResource (TF.Argument Text) where
    name f s@CodepipelineResource{..} =
        (\a -> s { _name = a } :: CodepipelineResource)
             <$> f _name

instance HasRoleArn CodepipelineResource (TF.Argument Text) where
    roleArn f s@CodepipelineResource{..} =
        (\a -> s { _role_arn = a } :: CodepipelineResource)
             <$> f _role_arn

instance HasStage CodepipelineResource (TF.Argument Text) where
    stage f s@CodepipelineResource{..} =
        (\a -> s { _stage = a } :: CodepipelineResource)
             <$> f _stage

instance HasComputedArn CodepipelineResource (TF.Attribute Text) where
    computedArn f s@CodepipelineResource{..} =
        (\a -> s { _computed_arn = a } :: CodepipelineResource)
             <$> f _computed_arn

instance HasComputedId CodepipelineResource (TF.Attribute Text) where
    computedId f s@CodepipelineResource{..} =
        (\a -> s { _computed_id = a } :: CodepipelineResource)
             <$> f _computed_id

codepipelineResource :: TF.Resource TF.AWS CodepipelineResource
codepipelineResource =
    TF.newResource "aws_codepipeline" $
        CodepipelineResource {
            _artifact_store = TF.Nil
            , _name = TF.Nil
            , _role_arn = TF.Nil
            , _stage = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_cognito_identity_pool@ AWS resource.

Provides an AWS Cognito Identity Pool.
-}
data CognitoIdentityPoolResource = CognitoIdentityPoolResource {
      _allow_unauthenticated_identities :: !(TF.Argument Text)
    {- ^ (Required) - Whether the identity pool supports unauthenticated logins or not. -}
    , _cognito_identity_providers       :: !(TF.Argument Text)
    {- ^ (Optional) - An array of <#cognito-identity-providers> and their client IDs. -}
    , _developer_provider_name          :: !(TF.Argument Text)
    {- ^ (Optional) - The "domain" by which Cognito will refer to your users. This name acts as a placeholder that allows your backend and the Cognito service to communicate about the developer provider. -}
    , _identity_pool_name               :: !(TF.Argument Text)
    {- ^ (Required) - The Cognito Identity Pool name. -}
    , _openid_connect_provider_arns     :: !(TF.Argument Text)
    {- ^ (Optional) - A list of OpendID Connect provider ARNs. -}
    , _saml_provider_arns               :: !(TF.Argument Text)
    {- ^ (Optional) - An array of Amazon Resource Names (ARNs) of the SAML provider for your identity. -}
    , _supported_login_providers        :: !(TF.Argument Text)
    {- ^ (Optional) - Key-Value pairs mapping provider names to provider app IDs. -}
    } deriving (Show, Eq)

instance TF.ToHCL CognitoIdentityPoolResource where
    toHCL CognitoIdentityPoolResource{..} = TF.block $ catMaybes
        [ TF.assign "allow_unauthenticated_identities" <$> TF.argument _allow_unauthenticated_identities
        , TF.assign "cognito_identity_providers" <$> TF.argument _cognito_identity_providers
        , TF.assign "developer_provider_name" <$> TF.argument _developer_provider_name
        , TF.assign "identity_pool_name" <$> TF.argument _identity_pool_name
        , TF.assign "openid_connect_provider_arns" <$> TF.argument _openid_connect_provider_arns
        , TF.assign "saml_provider_arns" <$> TF.argument _saml_provider_arns
        , TF.assign "supported_login_providers" <$> TF.argument _supported_login_providers
        ]

instance HasAllowUnauthenticatedIdentities CognitoIdentityPoolResource (TF.Argument Text) where
    allowUnauthenticatedIdentities f s@CognitoIdentityPoolResource{..} =
        (\a -> s { _allow_unauthenticated_identities = a } :: CognitoIdentityPoolResource)
             <$> f _allow_unauthenticated_identities

instance HasCognitoIdentityProviders CognitoIdentityPoolResource (TF.Argument Text) where
    cognitoIdentityProviders f s@CognitoIdentityPoolResource{..} =
        (\a -> s { _cognito_identity_providers = a } :: CognitoIdentityPoolResource)
             <$> f _cognito_identity_providers

instance HasDeveloperProviderName CognitoIdentityPoolResource (TF.Argument Text) where
    developerProviderName f s@CognitoIdentityPoolResource{..} =
        (\a -> s { _developer_provider_name = a } :: CognitoIdentityPoolResource)
             <$> f _developer_provider_name

instance HasIdentityPoolName CognitoIdentityPoolResource (TF.Argument Text) where
    identityPoolName f s@CognitoIdentityPoolResource{..} =
        (\a -> s { _identity_pool_name = a } :: CognitoIdentityPoolResource)
             <$> f _identity_pool_name

instance HasOpenidConnectProviderArns CognitoIdentityPoolResource (TF.Argument Text) where
    openidConnectProviderArns f s@CognitoIdentityPoolResource{..} =
        (\a -> s { _openid_connect_provider_arns = a } :: CognitoIdentityPoolResource)
             <$> f _openid_connect_provider_arns

instance HasSamlProviderArns CognitoIdentityPoolResource (TF.Argument Text) where
    samlProviderArns f s@CognitoIdentityPoolResource{..} =
        (\a -> s { _saml_provider_arns = a } :: CognitoIdentityPoolResource)
             <$> f _saml_provider_arns

instance HasSupportedLoginProviders CognitoIdentityPoolResource (TF.Argument Text) where
    supportedLoginProviders f s@CognitoIdentityPoolResource{..} =
        (\a -> s { _supported_login_providers = a } :: CognitoIdentityPoolResource)
             <$> f _supported_login_providers

cognitoIdentityPoolResource :: TF.Resource TF.AWS CognitoIdentityPoolResource
cognitoIdentityPoolResource =
    TF.newResource "aws_cognito_identity_pool" $
        CognitoIdentityPoolResource {
            _allow_unauthenticated_identities = TF.Nil
            , _cognito_identity_providers = TF.Nil
            , _developer_provider_name = TF.Nil
            , _identity_pool_name = TF.Nil
            , _openid_connect_provider_arns = TF.Nil
            , _saml_provider_arns = TF.Nil
            , _supported_login_providers = TF.Nil
            }

{- | The @aws_cognito_identity_pool_roles_attachment@ AWS resource.

Provides an AWS Cognito Identity Pool Roles Attachment.
-}
data CognitoIdentityPoolRolesAttachmentResource = CognitoIdentityPoolRolesAttachmentResource {
      _identity_pool_id :: !(TF.Argument Text)
    {- ^ (Required) - An identity pool ID in the format REGION:GUID. -}
    , _role_mapping     :: !(TF.Argument Text)
    {- ^ (Optional) - A List of <#role-mappings> . -}
    , _roles            :: !(TF.Argument Text)
    {- ^ (Required) - The map of roles associated with this pool. For a given role, the key will be either "authenticated" or "unauthenticated" and the value will be the Role ARN. -}
    } deriving (Show, Eq)

instance TF.ToHCL CognitoIdentityPoolRolesAttachmentResource where
    toHCL CognitoIdentityPoolRolesAttachmentResource{..} = TF.block $ catMaybes
        [ TF.assign "identity_pool_id" <$> TF.argument _identity_pool_id
        , TF.assign "role_mapping" <$> TF.argument _role_mapping
        , TF.assign "roles" <$> TF.argument _roles
        ]

instance HasIdentityPoolId CognitoIdentityPoolRolesAttachmentResource (TF.Argument Text) where
    identityPoolId f s@CognitoIdentityPoolRolesAttachmentResource{..} =
        (\a -> s { _identity_pool_id = a } :: CognitoIdentityPoolRolesAttachmentResource)
             <$> f _identity_pool_id

instance HasRoleMapping CognitoIdentityPoolRolesAttachmentResource (TF.Argument Text) where
    roleMapping f s@CognitoIdentityPoolRolesAttachmentResource{..} =
        (\a -> s { _role_mapping = a } :: CognitoIdentityPoolRolesAttachmentResource)
             <$> f _role_mapping

instance HasRoles CognitoIdentityPoolRolesAttachmentResource (TF.Argument Text) where
    roles f s@CognitoIdentityPoolRolesAttachmentResource{..} =
        (\a -> s { _roles = a } :: CognitoIdentityPoolRolesAttachmentResource)
             <$> f _roles

cognitoIdentityPoolRolesAttachmentResource :: TF.Resource TF.AWS CognitoIdentityPoolRolesAttachmentResource
cognitoIdentityPoolRolesAttachmentResource =
    TF.newResource "aws_cognito_identity_pool_roles_attachment" $
        CognitoIdentityPoolRolesAttachmentResource {
            _identity_pool_id = TF.Nil
            , _role_mapping = TF.Nil
            , _roles = TF.Nil
            }

{- | The @aws_cognito_user_pool_client@ AWS resource.

Provides a Cognito User Pool Client resource.
-}
data CognitoUserPoolClientResource = CognitoUserPoolClientResource {
      _allowed_oauth_flows                  :: !(TF.Argument Text)
    {- ^ (Optional) List of allowed OAuth flows (code, implicit, client_credentials). -}
    , _allowed_oauth_flows_user_pool_client :: !(TF.Argument Text)
    {- ^ (Optional) Whether the client is allowed to follow the OAuth protocol when interacting with Cognito user pools. -}
    , _allowed_oauth_scopes                 :: !(TF.Argument Text)
    {- ^ (Optional) List of allowed OAuth scopes (phone, email, openid, Cognito). -}
    , _callback_urls                        :: !(TF.Argument Text)
    {- ^ (Optional) List of allowed callback URLs for the identity providers. -}
    , _default_redirect_uri                 :: !(TF.Argument Text)
    {- ^ (Optional) The default redirect URI. Must be in the list of callback URLs. -}
    , _explicit_auth_flows                  :: !(TF.Argument Text)
    {- ^ (Optional) List of authentication flows (ADMIN_NO_SRP_AUTH, CUSTOM_AUTH_FLOW_ONLY). -}
    , _generate_secret                      :: !(TF.Argument Text)
    {- ^ (Optional) Should an application secret be generated. AWS JavaScript SDK requires this to be false. -}
    , _logout_urls                          :: !(TF.Argument Text)
    {- ^ (Optional) List of allowed logout URLs for the identity providers. -}
    , _name                                 :: !(TF.Argument Text)
    {- ^ (Required) The name of the application client. -}
    , _read_attributes                      :: !(TF.Argument Text)
    {- ^ (Optional) List of user pool attributes the application client can read from. -}
    , _refresh_token_validity               :: !(TF.Argument Text)
    {- ^ (Optional) The time limit in days refresh tokens are valid for. -}
    , _supported_identity_providers         :: !(TF.Argument Text)
    {- ^ (Optional) List of provider names for the identity providers that are supported on this client. -}
    , _user_pool_id                         :: !(TF.Argument Text)
    {- ^ (Required) The user pool the client belongs to. -}
    , _write_attributes                     :: !(TF.Argument Text)
    {- ^ (Optional) List of user pool attributes the application client can write to. -}
    , _computed_client_secret               :: !(TF.Attribute Text)
    {- ^ - The client secret of the user pool client. -}
    , _computed_id                          :: !(TF.Attribute Text)
    {- ^ - The id of the user pool client. -}
    } deriving (Show, Eq)

instance TF.ToHCL CognitoUserPoolClientResource where
    toHCL CognitoUserPoolClientResource{..} = TF.block $ catMaybes
        [ TF.assign "allowed_oauth_flows" <$> TF.argument _allowed_oauth_flows
        , TF.assign "allowed_oauth_flows_user_pool_client" <$> TF.argument _allowed_oauth_flows_user_pool_client
        , TF.assign "allowed_oauth_scopes" <$> TF.argument _allowed_oauth_scopes
        , TF.assign "callback_urls" <$> TF.argument _callback_urls
        , TF.assign "default_redirect_uri" <$> TF.argument _default_redirect_uri
        , TF.assign "explicit_auth_flows" <$> TF.argument _explicit_auth_flows
        , TF.assign "generate_secret" <$> TF.argument _generate_secret
        , TF.assign "logout_urls" <$> TF.argument _logout_urls
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "read_attributes" <$> TF.argument _read_attributes
        , TF.assign "refresh_token_validity" <$> TF.argument _refresh_token_validity
        , TF.assign "supported_identity_providers" <$> TF.argument _supported_identity_providers
        , TF.assign "user_pool_id" <$> TF.argument _user_pool_id
        , TF.assign "write_attributes" <$> TF.argument _write_attributes
        ]

instance HasAllowedOauthFlows CognitoUserPoolClientResource (TF.Argument Text) where
    allowedOauthFlows f s@CognitoUserPoolClientResource{..} =
        (\a -> s { _allowed_oauth_flows = a } :: CognitoUserPoolClientResource)
             <$> f _allowed_oauth_flows

instance HasAllowedOauthFlowsUserPoolClient CognitoUserPoolClientResource (TF.Argument Text) where
    allowedOauthFlowsUserPoolClient f s@CognitoUserPoolClientResource{..} =
        (\a -> s { _allowed_oauth_flows_user_pool_client = a } :: CognitoUserPoolClientResource)
             <$> f _allowed_oauth_flows_user_pool_client

instance HasAllowedOauthScopes CognitoUserPoolClientResource (TF.Argument Text) where
    allowedOauthScopes f s@CognitoUserPoolClientResource{..} =
        (\a -> s { _allowed_oauth_scopes = a } :: CognitoUserPoolClientResource)
             <$> f _allowed_oauth_scopes

instance HasCallbackUrls CognitoUserPoolClientResource (TF.Argument Text) where
    callbackUrls f s@CognitoUserPoolClientResource{..} =
        (\a -> s { _callback_urls = a } :: CognitoUserPoolClientResource)
             <$> f _callback_urls

instance HasDefaultRedirectUri CognitoUserPoolClientResource (TF.Argument Text) where
    defaultRedirectUri f s@CognitoUserPoolClientResource{..} =
        (\a -> s { _default_redirect_uri = a } :: CognitoUserPoolClientResource)
             <$> f _default_redirect_uri

instance HasExplicitAuthFlows CognitoUserPoolClientResource (TF.Argument Text) where
    explicitAuthFlows f s@CognitoUserPoolClientResource{..} =
        (\a -> s { _explicit_auth_flows = a } :: CognitoUserPoolClientResource)
             <$> f _explicit_auth_flows

instance HasGenerateSecret CognitoUserPoolClientResource (TF.Argument Text) where
    generateSecret f s@CognitoUserPoolClientResource{..} =
        (\a -> s { _generate_secret = a } :: CognitoUserPoolClientResource)
             <$> f _generate_secret

instance HasLogoutUrls CognitoUserPoolClientResource (TF.Argument Text) where
    logoutUrls f s@CognitoUserPoolClientResource{..} =
        (\a -> s { _logout_urls = a } :: CognitoUserPoolClientResource)
             <$> f _logout_urls

instance HasName CognitoUserPoolClientResource (TF.Argument Text) where
    name f s@CognitoUserPoolClientResource{..} =
        (\a -> s { _name = a } :: CognitoUserPoolClientResource)
             <$> f _name

instance HasReadAttributes CognitoUserPoolClientResource (TF.Argument Text) where
    readAttributes f s@CognitoUserPoolClientResource{..} =
        (\a -> s { _read_attributes = a } :: CognitoUserPoolClientResource)
             <$> f _read_attributes

instance HasRefreshTokenValidity CognitoUserPoolClientResource (TF.Argument Text) where
    refreshTokenValidity f s@CognitoUserPoolClientResource{..} =
        (\a -> s { _refresh_token_validity = a } :: CognitoUserPoolClientResource)
             <$> f _refresh_token_validity

instance HasSupportedIdentityProviders CognitoUserPoolClientResource (TF.Argument Text) where
    supportedIdentityProviders f s@CognitoUserPoolClientResource{..} =
        (\a -> s { _supported_identity_providers = a } :: CognitoUserPoolClientResource)
             <$> f _supported_identity_providers

instance HasUserPoolId CognitoUserPoolClientResource (TF.Argument Text) where
    userPoolId f s@CognitoUserPoolClientResource{..} =
        (\a -> s { _user_pool_id = a } :: CognitoUserPoolClientResource)
             <$> f _user_pool_id

instance HasWriteAttributes CognitoUserPoolClientResource (TF.Argument Text) where
    writeAttributes f s@CognitoUserPoolClientResource{..} =
        (\a -> s { _write_attributes = a } :: CognitoUserPoolClientResource)
             <$> f _write_attributes

instance HasComputedClientSecret CognitoUserPoolClientResource (TF.Attribute Text) where
    computedClientSecret f s@CognitoUserPoolClientResource{..} =
        (\a -> s { _computed_client_secret = a } :: CognitoUserPoolClientResource)
             <$> f _computed_client_secret

instance HasComputedId CognitoUserPoolClientResource (TF.Attribute Text) where
    computedId f s@CognitoUserPoolClientResource{..} =
        (\a -> s { _computed_id = a } :: CognitoUserPoolClientResource)
             <$> f _computed_id

cognitoUserPoolClientResource :: TF.Resource TF.AWS CognitoUserPoolClientResource
cognitoUserPoolClientResource =
    TF.newResource "aws_cognito_user_pool_client" $
        CognitoUserPoolClientResource {
            _allowed_oauth_flows = TF.Nil
            , _allowed_oauth_flows_user_pool_client = TF.Nil
            , _allowed_oauth_scopes = TF.Nil
            , _callback_urls = TF.Nil
            , _default_redirect_uri = TF.Nil
            , _explicit_auth_flows = TF.Nil
            , _generate_secret = TF.Nil
            , _logout_urls = TF.Nil
            , _name = TF.Nil
            , _read_attributes = TF.Nil
            , _refresh_token_validity = TF.Nil
            , _supported_identity_providers = TF.Nil
            , _user_pool_id = TF.Nil
            , _write_attributes = TF.Nil
            , _computed_client_secret = TF.Compute "client_secret"
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_cognito_user_pool_domain@ AWS resource.

Provides a Cognito User Pool Domain resource.
-}
data CognitoUserPoolDomainResource = CognitoUserPoolDomainResource {
      _domain                               :: !(TF.Argument Text)
    {- ^ (Required) The domain string. -}
    , _user_pool_id                         :: !(TF.Argument Text)
    {- ^ (Required) The user pool ID. -}
    , _computed_aws_account_id              :: !(TF.Attribute Text)
    {- ^ - The AWS account ID for the user pool owner. -}
    , _computed_cloudfront_distribution_arn :: !(TF.Attribute Text)
    {- ^ - The ARN of the CloudFront distribution. -}
    , _computed_s3_bucket                   :: !(TF.Attribute Text)
    {- ^ - The S3 bucket where the static files for this domain are stored. -}
    , _computed_version                     :: !(TF.Attribute Text)
    {- ^ - The app version. -}
    } deriving (Show, Eq)

instance TF.ToHCL CognitoUserPoolDomainResource where
    toHCL CognitoUserPoolDomainResource{..} = TF.block $ catMaybes
        [ TF.assign "domain" <$> TF.argument _domain
        , TF.assign "user_pool_id" <$> TF.argument _user_pool_id
        ]

instance HasDomain CognitoUserPoolDomainResource (TF.Argument Text) where
    domain f s@CognitoUserPoolDomainResource{..} =
        (\a -> s { _domain = a } :: CognitoUserPoolDomainResource)
             <$> f _domain

instance HasUserPoolId CognitoUserPoolDomainResource (TF.Argument Text) where
    userPoolId f s@CognitoUserPoolDomainResource{..} =
        (\a -> s { _user_pool_id = a } :: CognitoUserPoolDomainResource)
             <$> f _user_pool_id

instance HasComputedAwsAccountId CognitoUserPoolDomainResource (TF.Attribute Text) where
    computedAwsAccountId f s@CognitoUserPoolDomainResource{..} =
        (\a -> s { _computed_aws_account_id = a } :: CognitoUserPoolDomainResource)
             <$> f _computed_aws_account_id

instance HasComputedCloudfrontDistributionArn CognitoUserPoolDomainResource (TF.Attribute Text) where
    computedCloudfrontDistributionArn f s@CognitoUserPoolDomainResource{..} =
        (\a -> s { _computed_cloudfront_distribution_arn = a } :: CognitoUserPoolDomainResource)
             <$> f _computed_cloudfront_distribution_arn

instance HasComputedS3Bucket CognitoUserPoolDomainResource (TF.Attribute Text) where
    computedS3Bucket f s@CognitoUserPoolDomainResource{..} =
        (\a -> s { _computed_s3_bucket = a } :: CognitoUserPoolDomainResource)
             <$> f _computed_s3_bucket

instance HasComputedVersion CognitoUserPoolDomainResource (TF.Attribute Text) where
    computedVersion f s@CognitoUserPoolDomainResource{..} =
        (\a -> s { _computed_version = a } :: CognitoUserPoolDomainResource)
             <$> f _computed_version

cognitoUserPoolDomainResource :: TF.Resource TF.AWS CognitoUserPoolDomainResource
cognitoUserPoolDomainResource =
    TF.newResource "aws_cognito_user_pool_domain" $
        CognitoUserPoolDomainResource {
            _domain = TF.Nil
            , _user_pool_id = TF.Nil
            , _computed_aws_account_id = TF.Compute "aws_account_id"
            , _computed_cloudfront_distribution_arn = TF.Compute "cloudfront_distribution_arn"
            , _computed_s3_bucket = TF.Compute "s3_bucket"
            , _computed_version = TF.Compute "version"
            }

{- | The @aws_cognito_user_pool@ AWS resource.

Provides a Cognito User Pool resource.
-}
data CognitoUserPoolResource = CognitoUserPoolResource {
      _admin_create_user_config      :: !(TF.Argument Text)
    {- ^ (Optional) - The configuration for <#admin-create-user-config> requests. -}
    , _alias_attributes              :: !(TF.Argument Text)
    {- ^ (Optional) Attributes supported as an alias for this user pool. Possible values: phone_number, email, or preferred_username. Conflicts with @username_attributes@ . -}
    , _auto_verified_attributes      :: !(TF.Argument Text)
    {- ^ (Optional) The attributes to be auto-verified. Possible values: email, phone_number. -}
    , _device_configuration          :: !(TF.Argument Text)
    {- ^ (Optional) - The configuration for the <#device-configuration> . -}
    , _email_configuration           :: !(TF.Argument Text)
    {- ^ (Optional) - The <#email-configuration> . -}
    , _email_verification_message    :: !(TF.Argument Text)
    {- ^ (Optional) A string representing the email verification message. Must contain the @{####}@ placeholder. NOTE: - If @email_verification_message@ and @verification_message_template.email_message@ are specified and the values are different, either one is prioritized and updated. -}
    , _email_verification_subject    :: !(TF.Argument Text)
    {- ^ (Optional) A string representing the email verification subject. NOTE: - If @email_verification_subject@ and @verification_message_template.email_subject@ are specified and the values are different, either one is prioritized and updated. -}
    , _lambda_config                 :: !(TF.Argument Text)
    {- ^ (Optional) - A container for the AWS <#lambda-configuration> associated with the user pool. -}
    , _mfa_configuration             :: !(TF.Argument Text)
    {- ^ (Optional, Default: OFF) Set to enable multi-factor authentication. Must be one of the following values (ON, OFF, OPTIONAL) -}
    , _name                          :: !(TF.Argument Text)
    {- ^ (Required) The name of the user pool. -}
    , _password_policy               :: !(TF.Argument Text)
    {- ^ (Optional) - A container for information about the <#password-policy> . -}
    , _schema                        :: !(TF.Argument Text)
    {- ^ (Optional) - A container with the <#schema-attributes> of a user pool. Maximum of 50 attributes. -}
    , _sms_authentication_message    :: !(TF.Argument Text)
    {- ^ (Optional) A string representing the SMS authentication message. -}
    , _sms_configuration             :: !(TF.Argument Text)
    {- ^ (Optional) - The <#sms-configuration> . -}
    , _sms_verification_message      :: !(TF.Argument Text)
    {- ^ (Optional) A string representing the SMS verification message. -}
    , _tags                          :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the User Pool. -}
    , _username_attributes           :: !(TF.Argument Text)
    {- ^ (Optional) Specifies whether email addresses or phone numbers can be specified as usernames when a user signs up. Conflicts with @alias_attributes@ . -}
    , _verification_message_template :: !(TF.Argument Text)
    {- ^ (Optional) - The <#verification-message-template> configuration. -}
    } deriving (Show, Eq)

instance TF.ToHCL CognitoUserPoolResource where
    toHCL CognitoUserPoolResource{..} = TF.block $ catMaybes
        [ TF.assign "admin_create_user_config" <$> TF.argument _admin_create_user_config
        , TF.assign "alias_attributes" <$> TF.argument _alias_attributes
        , TF.assign "auto_verified_attributes" <$> TF.argument _auto_verified_attributes
        , TF.assign "device_configuration" <$> TF.argument _device_configuration
        , TF.assign "email_configuration" <$> TF.argument _email_configuration
        , TF.assign "email_verification_message" <$> TF.argument _email_verification_message
        , TF.assign "email_verification_subject" <$> TF.argument _email_verification_subject
        , TF.assign "lambda_config" <$> TF.argument _lambda_config
        , TF.assign "mfa_configuration" <$> TF.argument _mfa_configuration
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "password_policy" <$> TF.argument _password_policy
        , TF.assign "schema" <$> TF.argument _schema
        , TF.assign "sms_authentication_message" <$> TF.argument _sms_authentication_message
        , TF.assign "sms_configuration" <$> TF.argument _sms_configuration
        , TF.assign "sms_verification_message" <$> TF.argument _sms_verification_message
        , TF.assign "tags" <$> TF.argument _tags
        , TF.assign "username_attributes" <$> TF.argument _username_attributes
        , TF.assign "verification_message_template" <$> TF.argument _verification_message_template
        ]

instance HasAdminCreateUserConfig CognitoUserPoolResource (TF.Argument Text) where
    adminCreateUserConfig f s@CognitoUserPoolResource{..} =
        (\a -> s { _admin_create_user_config = a } :: CognitoUserPoolResource)
             <$> f _admin_create_user_config

instance HasAliasAttributes CognitoUserPoolResource (TF.Argument Text) where
    aliasAttributes f s@CognitoUserPoolResource{..} =
        (\a -> s { _alias_attributes = a } :: CognitoUserPoolResource)
             <$> f _alias_attributes

instance HasAutoVerifiedAttributes CognitoUserPoolResource (TF.Argument Text) where
    autoVerifiedAttributes f s@CognitoUserPoolResource{..} =
        (\a -> s { _auto_verified_attributes = a } :: CognitoUserPoolResource)
             <$> f _auto_verified_attributes

instance HasDeviceConfiguration CognitoUserPoolResource (TF.Argument Text) where
    deviceConfiguration f s@CognitoUserPoolResource{..} =
        (\a -> s { _device_configuration = a } :: CognitoUserPoolResource)
             <$> f _device_configuration

instance HasEmailConfiguration CognitoUserPoolResource (TF.Argument Text) where
    emailConfiguration f s@CognitoUserPoolResource{..} =
        (\a -> s { _email_configuration = a } :: CognitoUserPoolResource)
             <$> f _email_configuration

instance HasEmailVerificationMessage CognitoUserPoolResource (TF.Argument Text) where
    emailVerificationMessage f s@CognitoUserPoolResource{..} =
        (\a -> s { _email_verification_message = a } :: CognitoUserPoolResource)
             <$> f _email_verification_message

instance HasEmailVerificationSubject CognitoUserPoolResource (TF.Argument Text) where
    emailVerificationSubject f s@CognitoUserPoolResource{..} =
        (\a -> s { _email_verification_subject = a } :: CognitoUserPoolResource)
             <$> f _email_verification_subject

instance HasLambdaConfig CognitoUserPoolResource (TF.Argument Text) where
    lambdaConfig f s@CognitoUserPoolResource{..} =
        (\a -> s { _lambda_config = a } :: CognitoUserPoolResource)
             <$> f _lambda_config

instance HasMfaConfiguration CognitoUserPoolResource (TF.Argument Text) where
    mfaConfiguration f s@CognitoUserPoolResource{..} =
        (\a -> s { _mfa_configuration = a } :: CognitoUserPoolResource)
             <$> f _mfa_configuration

instance HasName CognitoUserPoolResource (TF.Argument Text) where
    name f s@CognitoUserPoolResource{..} =
        (\a -> s { _name = a } :: CognitoUserPoolResource)
             <$> f _name

instance HasPasswordPolicy CognitoUserPoolResource (TF.Argument Text) where
    passwordPolicy f s@CognitoUserPoolResource{..} =
        (\a -> s { _password_policy = a } :: CognitoUserPoolResource)
             <$> f _password_policy

instance HasSchema CognitoUserPoolResource (TF.Argument Text) where
    schema f s@CognitoUserPoolResource{..} =
        (\a -> s { _schema = a } :: CognitoUserPoolResource)
             <$> f _schema

instance HasSmsAuthenticationMessage CognitoUserPoolResource (TF.Argument Text) where
    smsAuthenticationMessage f s@CognitoUserPoolResource{..} =
        (\a -> s { _sms_authentication_message = a } :: CognitoUserPoolResource)
             <$> f _sms_authentication_message

instance HasSmsConfiguration CognitoUserPoolResource (TF.Argument Text) where
    smsConfiguration f s@CognitoUserPoolResource{..} =
        (\a -> s { _sms_configuration = a } :: CognitoUserPoolResource)
             <$> f _sms_configuration

instance HasSmsVerificationMessage CognitoUserPoolResource (TF.Argument Text) where
    smsVerificationMessage f s@CognitoUserPoolResource{..} =
        (\a -> s { _sms_verification_message = a } :: CognitoUserPoolResource)
             <$> f _sms_verification_message

instance HasTags CognitoUserPoolResource (TF.Argument TF.Tags) where
    tags f s@CognitoUserPoolResource{..} =
        (\a -> s { _tags = a } :: CognitoUserPoolResource)
             <$> f _tags

instance HasUsernameAttributes CognitoUserPoolResource (TF.Argument Text) where
    usernameAttributes f s@CognitoUserPoolResource{..} =
        (\a -> s { _username_attributes = a } :: CognitoUserPoolResource)
             <$> f _username_attributes

instance HasVerificationMessageTemplate CognitoUserPoolResource (TF.Argument Text) where
    verificationMessageTemplate f s@CognitoUserPoolResource{..} =
        (\a -> s { _verification_message_template = a } :: CognitoUserPoolResource)
             <$> f _verification_message_template

cognitoUserPoolResource :: TF.Resource TF.AWS CognitoUserPoolResource
cognitoUserPoolResource =
    TF.newResource "aws_cognito_user_pool" $
        CognitoUserPoolResource {
            _admin_create_user_config = TF.Nil
            , _alias_attributes = TF.Nil
            , _auto_verified_attributes = TF.Nil
            , _device_configuration = TF.Nil
            , _email_configuration = TF.Nil
            , _email_verification_message = TF.Nil
            , _email_verification_subject = TF.Nil
            , _lambda_config = TF.Nil
            , _mfa_configuration = TF.Nil
            , _name = TF.Nil
            , _password_policy = TF.Nil
            , _schema = TF.Nil
            , _sms_authentication_message = TF.Nil
            , _sms_configuration = TF.Nil
            , _sms_verification_message = TF.Nil
            , _tags = TF.Nil
            , _username_attributes = TF.Nil
            , _verification_message_template = TF.Nil
            }

{- | The @aws_config_config_rule@ AWS resource.

Provides an AWS Config Rule. ~> Note: Config Rule requires an existing
</docs/providers/aws/r/config_configuration_recorder.html> to be present.
Use of @depends_on@ is recommended (as shown below) to avoid race
conditions.
-}
data ConfigConfigRuleResource = ConfigConfigRuleResource {
      _description                 :: !(TF.Argument Text)
    {- ^ (Optional) Description of the rule -}
    , _input_parameters            :: !(TF.Argument Text)
    {- ^ (Optional) A string in JSON format that is passed to the AWS Config rule Lambda function. -}
    , _maximum_execution_frequency :: !(TF.Argument Text)
    {- ^ (Optional) The maximum frequency with which AWS Config runs evaluations for a rule. -}
    , _name                        :: !(TF.Argument Text)
    {- ^ (Required) The name of the rule -}
    , _scope                       :: !(TF.Argument Text)
    {- ^ (Optional) Scope defines which resources can trigger an evaluation for the rule as documented below. -}
    , _source                      :: !(TF.Argument Text)
    {- ^ (Required) Source specifies the rule owner, the rule identifier, and the notifications that cause the function to evaluate your AWS resources as documented below. -}
    } deriving (Show, Eq)

instance TF.ToHCL ConfigConfigRuleResource where
    toHCL ConfigConfigRuleResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.argument _description
        , TF.assign "input_parameters" <$> TF.argument _input_parameters
        , TF.assign "maximum_execution_frequency" <$> TF.argument _maximum_execution_frequency
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "scope" <$> TF.argument _scope
        , TF.assign "source" <$> TF.argument _source
        ]

instance HasDescription ConfigConfigRuleResource (TF.Argument Text) where
    description f s@ConfigConfigRuleResource{..} =
        (\a -> s { _description = a } :: ConfigConfigRuleResource)
             <$> f _description

instance HasInputParameters ConfigConfigRuleResource (TF.Argument Text) where
    inputParameters f s@ConfigConfigRuleResource{..} =
        (\a -> s { _input_parameters = a } :: ConfigConfigRuleResource)
             <$> f _input_parameters

instance HasMaximumExecutionFrequency ConfigConfigRuleResource (TF.Argument Text) where
    maximumExecutionFrequency f s@ConfigConfigRuleResource{..} =
        (\a -> s { _maximum_execution_frequency = a } :: ConfigConfigRuleResource)
             <$> f _maximum_execution_frequency

instance HasName ConfigConfigRuleResource (TF.Argument Text) where
    name f s@ConfigConfigRuleResource{..} =
        (\a -> s { _name = a } :: ConfigConfigRuleResource)
             <$> f _name

instance HasScope ConfigConfigRuleResource (TF.Argument Text) where
    scope f s@ConfigConfigRuleResource{..} =
        (\a -> s { _scope = a } :: ConfigConfigRuleResource)
             <$> f _scope

instance HasSource ConfigConfigRuleResource (TF.Argument Text) where
    source f s@ConfigConfigRuleResource{..} =
        (\a -> s { _source = a } :: ConfigConfigRuleResource)
             <$> f _source

configConfigRuleResource :: TF.Resource TF.AWS ConfigConfigRuleResource
configConfigRuleResource =
    TF.newResource "aws_config_config_rule" $
        ConfigConfigRuleResource {
            _description = TF.Nil
            , _input_parameters = TF.Nil
            , _maximum_execution_frequency = TF.Nil
            , _name = TF.Nil
            , _scope = TF.Nil
            , _source = TF.Nil
            }

{- | The @aws_config_configuration_recorder@ AWS resource.

Provides an AWS Config Configuration Recorder. Please note that this
resource does not start the created recorder automatically. ~> Note:
Starting the Configuration Recorder requires a
</docs/providers/aws/r/config_delivery_channel.html> (while delivery channel
creation requires Configuration Recorder). This is why
</docs/providers/aws/r/config_configuration_recorder_status.html> is a
separate resource.
-}
data ConfigConfigurationRecorderResource = ConfigConfigurationRecorderResource {
      _name            :: !(TF.Argument Text)
    {- ^ (Optional) The name of the recorder. Defaults to @default@ . Changing it recreates the resource. -}
    , _recording_group :: !(TF.Argument Text)
    {- ^ (Optional) Recording group - see below. -}
    , _role_arn        :: !(TF.Argument Text)
    {- ^ (Required) Amazon Resource Name (ARN) of the IAM role. used to make read or write requests to the delivery channel and to describe the AWS resources associated with the account. See <http://docs.aws.amazon.com/config/latest/developerguide/iamrole-permissions.html> for more details. -}
    } deriving (Show, Eq)

instance TF.ToHCL ConfigConfigurationRecorderResource where
    toHCL ConfigConfigurationRecorderResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.argument _name
        , TF.assign "recording_group" <$> TF.argument _recording_group
        , TF.assign "role_arn" <$> TF.argument _role_arn
        ]

instance HasName ConfigConfigurationRecorderResource (TF.Argument Text) where
    name f s@ConfigConfigurationRecorderResource{..} =
        (\a -> s { _name = a } :: ConfigConfigurationRecorderResource)
             <$> f _name

instance HasRecordingGroup ConfigConfigurationRecorderResource (TF.Argument Text) where
    recordingGroup f s@ConfigConfigurationRecorderResource{..} =
        (\a -> s { _recording_group = a } :: ConfigConfigurationRecorderResource)
             <$> f _recording_group

instance HasRoleArn ConfigConfigurationRecorderResource (TF.Argument Text) where
    roleArn f s@ConfigConfigurationRecorderResource{..} =
        (\a -> s { _role_arn = a } :: ConfigConfigurationRecorderResource)
             <$> f _role_arn

configConfigurationRecorderResource :: TF.Resource TF.AWS ConfigConfigurationRecorderResource
configConfigurationRecorderResource =
    TF.newResource "aws_config_configuration_recorder" $
        ConfigConfigurationRecorderResource {
            _name = TF.Nil
            , _recording_group = TF.Nil
            , _role_arn = TF.Nil
            }

{- | The @aws_config_configuration_recorder_status@ AWS resource.

Manages status (recording / stopped) of an AWS Config Configuration
Recorder. ~> Note: Starting Configuration Recorder requires a
</docs/providers/aws/r/config_delivery_channel.html> to be present. Use of
@depends_on@ (as shown below) is recommended to avoid race conditions.
-}
data ConfigConfigurationRecorderStatusResource = ConfigConfigurationRecorderStatusResource {
      _is_enabled :: !(TF.Argument TF.Bool)
    {- ^ (Required) Whether the configuration recorder should be enabled or disabled. -}
    , _name       :: !(TF.Argument Text)
    {- ^ (Required) The name of the recorder -}
    } deriving (Show, Eq)

instance TF.ToHCL ConfigConfigurationRecorderStatusResource where
    toHCL ConfigConfigurationRecorderStatusResource{..} = TF.block $ catMaybes
        [ TF.assign "is_enabled" <$> TF.argument _is_enabled
        , TF.assign "name" <$> TF.argument _name
        ]

instance HasIsEnabled ConfigConfigurationRecorderStatusResource (TF.Argument TF.Bool) where
    isEnabled f s@ConfigConfigurationRecorderStatusResource{..} =
        (\a -> s { _is_enabled = a } :: ConfigConfigurationRecorderStatusResource)
             <$> f _is_enabled

instance HasName ConfigConfigurationRecorderStatusResource (TF.Argument Text) where
    name f s@ConfigConfigurationRecorderStatusResource{..} =
        (\a -> s { _name = a } :: ConfigConfigurationRecorderStatusResource)
             <$> f _name

configConfigurationRecorderStatusResource :: TF.Resource TF.AWS ConfigConfigurationRecorderStatusResource
configConfigurationRecorderStatusResource =
    TF.newResource "aws_config_configuration_recorder_status" $
        ConfigConfigurationRecorderStatusResource {
            _is_enabled = TF.Nil
            , _name = TF.Nil
            }

{- | The @aws_config_delivery_channel@ AWS resource.

Provides an AWS Config Delivery Channel. ~> Note: Delivery Channel requires
a </docs/providers/aws/r/config_configuration_recorder.html> to be present.
Use of @depends_on@ (as shown below) is recommended to avoid race
conditions.
-}
data ConfigDeliveryChannelResource = ConfigDeliveryChannelResource {
      _name                         :: !(TF.Argument Text)
    {- ^ (Optional) The name of the delivery channel. Defaults to @default@ . Changing it recreates the resource. -}
    , _s3_bucket_name               :: !(TF.Argument Text)
    {- ^ (Required) The name of the S3 bucket used to store the configuration history. -}
    , _s3_key_prefix                :: !(TF.Argument Text)
    {- ^ (Optional) The prefix for the specified S3 bucket. -}
    , _snapshot_delivery_properties :: !(TF.Argument Text)
    {- ^ (Optional) Options for how AWS Config delivers configuration snapshots. See below -}
    , _sns_topic_arn                :: !(TF.Argument Text)
    {- ^ (Optional) The ARN of the SNS topic that AWS Config delivers notifications to. -}
    } deriving (Show, Eq)

instance TF.ToHCL ConfigDeliveryChannelResource where
    toHCL ConfigDeliveryChannelResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.argument _name
        , TF.assign "s3_bucket_name" <$> TF.argument _s3_bucket_name
        , TF.assign "s3_key_prefix" <$> TF.argument _s3_key_prefix
        , TF.assign "snapshot_delivery_properties" <$> TF.argument _snapshot_delivery_properties
        , TF.assign "sns_topic_arn" <$> TF.argument _sns_topic_arn
        ]

instance HasName ConfigDeliveryChannelResource (TF.Argument Text) where
    name f s@ConfigDeliveryChannelResource{..} =
        (\a -> s { _name = a } :: ConfigDeliveryChannelResource)
             <$> f _name

instance HasS3BucketName ConfigDeliveryChannelResource (TF.Argument Text) where
    s3BucketName f s@ConfigDeliveryChannelResource{..} =
        (\a -> s { _s3_bucket_name = a } :: ConfigDeliveryChannelResource)
             <$> f _s3_bucket_name

instance HasS3KeyPrefix ConfigDeliveryChannelResource (TF.Argument Text) where
    s3KeyPrefix f s@ConfigDeliveryChannelResource{..} =
        (\a -> s { _s3_key_prefix = a } :: ConfigDeliveryChannelResource)
             <$> f _s3_key_prefix

instance HasSnapshotDeliveryProperties ConfigDeliveryChannelResource (TF.Argument Text) where
    snapshotDeliveryProperties f s@ConfigDeliveryChannelResource{..} =
        (\a -> s { _snapshot_delivery_properties = a } :: ConfigDeliveryChannelResource)
             <$> f _snapshot_delivery_properties

instance HasSnsTopicArn ConfigDeliveryChannelResource (TF.Argument Text) where
    snsTopicArn f s@ConfigDeliveryChannelResource{..} =
        (\a -> s { _sns_topic_arn = a } :: ConfigDeliveryChannelResource)
             <$> f _sns_topic_arn

configDeliveryChannelResource :: TF.Resource TF.AWS ConfigDeliveryChannelResource
configDeliveryChannelResource =
    TF.newResource "aws_config_delivery_channel" $
        ConfigDeliveryChannelResource {
            _name = TF.Nil
            , _s3_bucket_name = TF.Nil
            , _s3_key_prefix = TF.Nil
            , _snapshot_delivery_properties = TF.Nil
            , _sns_topic_arn = TF.Nil
            }

{- | The @aws_customer_gateway@ AWS resource.

Provides a customer gateway inside a VPC. These objects can be connected to
VPN gateways via VPN connections, and allow you to establish tunnels between
your network and the VPC.
-}
data CustomerGatewayResource = CustomerGatewayResource {
      _bgp_asn             :: !(TF.Argument Text)
    {- ^ (Required) The gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN). -}
    , _ip_address          :: !(TF.Argument Text)
    {- ^ (Required) The IP address of the gateway's Internet-routable external interface. -}
    , _tags                :: !(TF.Argument TF.Tags)
    {- ^ (Optional) Tags to apply to the gateway. -}
    , _type'               :: !(TF.Argument Text)
    {- ^ (Required) The type of customer gateway. The only type AWS supports at this time is "ipsec.1". -}
    , _computed_bgp_asn    :: !(TF.Attribute Text)
    {- ^ - The gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN). -}
    , _computed_id         :: !(TF.Attribute Text)
    {- ^ - The amazon-assigned ID of the gateway. -}
    , _computed_ip_address :: !(TF.Attribute Text)
    {- ^ - The IP address of the gateway's Internet-routable external interface. -}
    , _computed_tags       :: !(TF.Attribute TF.Tags)
    {- ^ - Tags applied to the gateway. -}
    , _computed_type'      :: !(TF.Attribute Text)
    {- ^ - The type of customer gateway. -}
    } deriving (Show, Eq)

instance TF.ToHCL CustomerGatewayResource where
    toHCL CustomerGatewayResource{..} = TF.block $ catMaybes
        [ TF.assign "bgp_asn" <$> TF.argument _bgp_asn
        , TF.assign "ip_address" <$> TF.argument _ip_address
        , TF.assign "tags" <$> TF.argument _tags
        , TF.assign "type" <$> TF.argument _type'
        ]

instance HasBgpAsn CustomerGatewayResource (TF.Argument Text) where
    bgpAsn f s@CustomerGatewayResource{..} =
        (\a -> s { _bgp_asn = a } :: CustomerGatewayResource)
             <$> f _bgp_asn

instance HasIpAddress CustomerGatewayResource (TF.Argument Text) where
    ipAddress f s@CustomerGatewayResource{..} =
        (\a -> s { _ip_address = a } :: CustomerGatewayResource)
             <$> f _ip_address

instance HasTags CustomerGatewayResource (TF.Argument TF.Tags) where
    tags f s@CustomerGatewayResource{..} =
        (\a -> s { _tags = a } :: CustomerGatewayResource)
             <$> f _tags

instance HasType' CustomerGatewayResource (TF.Argument Text) where
    type' f s@CustomerGatewayResource{..} =
        (\a -> s { _type' = a } :: CustomerGatewayResource)
             <$> f _type'

instance HasComputedBgpAsn CustomerGatewayResource (TF.Attribute Text) where
    computedBgpAsn f s@CustomerGatewayResource{..} =
        (\a -> s { _computed_bgp_asn = a } :: CustomerGatewayResource)
             <$> f _computed_bgp_asn

instance HasComputedId CustomerGatewayResource (TF.Attribute Text) where
    computedId f s@CustomerGatewayResource{..} =
        (\a -> s { _computed_id = a } :: CustomerGatewayResource)
             <$> f _computed_id

instance HasComputedIpAddress CustomerGatewayResource (TF.Attribute Text) where
    computedIpAddress f s@CustomerGatewayResource{..} =
        (\a -> s { _computed_ip_address = a } :: CustomerGatewayResource)
             <$> f _computed_ip_address

instance HasComputedTags CustomerGatewayResource (TF.Attribute TF.Tags) where
    computedTags f s@CustomerGatewayResource{..} =
        (\a -> s { _computed_tags = a } :: CustomerGatewayResource)
             <$> f _computed_tags

instance HasComputedType' CustomerGatewayResource (TF.Attribute Text) where
    computedType' f s@CustomerGatewayResource{..} =
        (\a -> s { _computed_type' = a } :: CustomerGatewayResource)
             <$> f _computed_type'

customerGatewayResource :: TF.Resource TF.AWS CustomerGatewayResource
customerGatewayResource =
    TF.newResource "aws_customer_gateway" $
        CustomerGatewayResource {
            _bgp_asn = TF.Nil
            , _ip_address = TF.Nil
            , _tags = TF.Nil
            , _type' = TF.Nil
            , _computed_bgp_asn = TF.Compute "bgp_asn"
            , _computed_id = TF.Compute "id"
            , _computed_ip_address = TF.Compute "ip_address"
            , _computed_tags = TF.Compute "tags"
            , _computed_type' = TF.Compute "type"
            }

{- | The @aws_db_event_subscription@ AWS resource.

Provides a DB event subscription resource.
-}
data DbEventSubscriptionResource = DbEventSubscriptionResource {
      _enabled          :: !(TF.Argument TF.Bool)
    {- ^ (Optional) A boolean flag to enable/disable the subscription. Defaults to true. -}
    , _event_categories :: !(TF.Argument Text)
    {- ^ (Optional) A list of event categories for a SourceType that you want to subscribe to. See http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide//USER_Events.html -}
    , _name             :: !(TF.Argument Text)
    {- ^ (Required) The name of the DB event subscription. -}
    , _sns_topic        :: !(TF.Argument Text)
    {- ^ (Required) The SNS topic to send events to. -}
    , _source_ids       :: !(TF.Argument Text)
    {- ^ (Optional) A list of identifiers of the event sources for which events will be returned. If not specified, then all sources are included in the response. If specified, a source_type must also be specified. -}
    , _source_type      :: !(TF.Argument Text)
    {- ^ (Optional) The type of source that will be generating the events. -}
    , _tags             :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    } deriving (Show, Eq)

instance TF.ToHCL DbEventSubscriptionResource where
    toHCL DbEventSubscriptionResource{..} = TF.block $ catMaybes
        [ TF.assign "enabled" <$> TF.argument _enabled
        , TF.assign "event_categories" <$> TF.argument _event_categories
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "sns_topic" <$> TF.argument _sns_topic
        , TF.assign "source_ids" <$> TF.argument _source_ids
        , TF.assign "source_type" <$> TF.argument _source_type
        , TF.assign "tags" <$> TF.argument _tags
        ]

instance HasEnabled DbEventSubscriptionResource (TF.Argument TF.Bool) where
    enabled f s@DbEventSubscriptionResource{..} =
        (\a -> s { _enabled = a } :: DbEventSubscriptionResource)
             <$> f _enabled

instance HasEventCategories DbEventSubscriptionResource (TF.Argument Text) where
    eventCategories f s@DbEventSubscriptionResource{..} =
        (\a -> s { _event_categories = a } :: DbEventSubscriptionResource)
             <$> f _event_categories

instance HasName DbEventSubscriptionResource (TF.Argument Text) where
    name f s@DbEventSubscriptionResource{..} =
        (\a -> s { _name = a } :: DbEventSubscriptionResource)
             <$> f _name

instance HasSnsTopic DbEventSubscriptionResource (TF.Argument Text) where
    snsTopic f s@DbEventSubscriptionResource{..} =
        (\a -> s { _sns_topic = a } :: DbEventSubscriptionResource)
             <$> f _sns_topic

instance HasSourceIds DbEventSubscriptionResource (TF.Argument Text) where
    sourceIds f s@DbEventSubscriptionResource{..} =
        (\a -> s { _source_ids = a } :: DbEventSubscriptionResource)
             <$> f _source_ids

instance HasSourceType DbEventSubscriptionResource (TF.Argument Text) where
    sourceType f s@DbEventSubscriptionResource{..} =
        (\a -> s { _source_type = a } :: DbEventSubscriptionResource)
             <$> f _source_type

instance HasTags DbEventSubscriptionResource (TF.Argument TF.Tags) where
    tags f s@DbEventSubscriptionResource{..} =
        (\a -> s { _tags = a } :: DbEventSubscriptionResource)
             <$> f _tags

dbEventSubscriptionResource :: TF.Resource TF.AWS DbEventSubscriptionResource
dbEventSubscriptionResource =
    TF.newResource "aws_db_event_subscription" $
        DbEventSubscriptionResource {
            _enabled = TF.Nil
            , _event_categories = TF.Nil
            , _name = TF.Nil
            , _sns_topic = TF.Nil
            , _source_ids = TF.Nil
            , _source_type = TF.Nil
            , _tags = TF.Nil
            }

{- | The @aws_db_instance@ AWS resource.

Provides an RDS instance resource.  A DB instance is an isolated database
environment in the cloud.  A DB instance can contain multiple user-created
databases. Changes to a DB instance can occur when you manually change a
parameter, such as @allocated_storage@ , and are reflected in the next
maintenance window. Because of this, Terraform may report a difference in
its planning phase because a modification has not yet taken place. You can
use the @apply_immediately@ flag to instruct the service to apply the change
immediately (see documentation below). When upgrading the major version of
an engine, @allow_major_version_upgrade@ must be set to @true@ . ~> Note:
using @apply_immediately@ can result in a brief downtime as the server
reboots. See the AWS Docs on
<https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html>
for more information. ~> Note: All arguments including the username and
password will be stored in the raw state as plain-text.
</docs/state/sensitive-data.html> .
-}
data DbInstanceResource = DbInstanceResource {
      _allocated_storage                   :: !(TF.Argument Text)
    {- ^ (Required unless a @snapshot_identifier@ or @replicate_source_db@ is provided) The allocated storage in gigabytes. -}
    , _allow_major_version_upgrade         :: !(TF.Argument Text)
    {- ^ (Optional) Indicates that major version upgrades are allowed. Changing this parameter does not result in an outage and the change is asynchronously applied as soon as possible. -}
    , _apply_immediately                   :: !(TF.Argument Text)
    {- ^ (Optional) Specifies whether any database modifications are applied immediately, or during the next maintenance window. Default is @false@ . See <https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html> for more information. -}
    , _auto_minor_version_upgrade          :: !(TF.Argument Text)
    {- ^ (Optional) Indicates that minor engine upgrades will be applied automatically to the DB instance during the maintenance window. Defaults to true. -}
    , _availability_zone                   :: !(TF.Argument Text)
    {- ^ (Optional) The AZ for the RDS instance. -}
    , _backup_retention_period             :: !(TF.Argument Text)
    {- ^ (Optional) The days to retain backups for. Must be @1@ or greater to be a source for a <https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Replication.html> . -}
    , _backup_window                       :: !(TF.Argument Text)
    {- ^ (Optional) The daily time range (in UTC) during which automated backups are created if they are enabled. Example: "09:46-10:16". Must not overlap with @maintenance_window@ . -}
    , _character_set_name                  :: !(TF.Argument Text)
    {- ^ (Optional) The character set name to use for DB encoding in Oracle instances. This can't be changed. See <https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.OracleCharacterSets.html> for more information. -}
    , _copy_tags_to_snapshot               :: !(TF.Argument Text)
    {- ^ – (Optional, boolean) On delete, copy all Instance @tags@ to the final snapshot (if @final_snapshot_identifier@ is specified). Default is @false@ . -}
    , _db_subnet_group_name                :: !(TF.Argument Text)
    {- ^ (Optional) Name of DB subnet group. DB instance will be created in the VPC associated with the DB subnet group. If unspecified, will be created in the @default@ VPC, or in EC2 Classic, if available. -}
    , _engine                              :: !(TF.Argument Text)
    {- ^ (Required unless a @snapshot_identifier@ or @replicate_source_db@ is provided) The database engine to use. -}
    , _engine_version                      :: !(TF.Argument Text)
    {- ^ (Optional) The engine version to use. -}
    , _final_snapshot_identifier           :: !(TF.Argument Text)
    {- ^ (Optional) The name of your final DB snapshot when this DB instance is deleted. If omitted, no final snapshot will be made. -}
    , _iam_database_authentication_enabled :: !(TF.Argument TF.Bool)
    {- ^ (Optional) Specifies whether or mappings of AWS Identity and Access Management (IAM) accounts to database accounts is enabled. -}
    , _identifier                          :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) The name of the RDS instance, if omitted, Terraform will assign a random, unique identifier. -}
    , _identifier_prefix                   :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) Creates a unique identifier beginning with the specified prefix. Conflicts with @identifer@ . -}
    , _instance_class                      :: !(TF.Argument Text)
    {- ^ (Required) The instance type of the RDS instance. -}
    , _iops                                :: !(TF.Argument Text)
    {- ^ (Optional) The amount of provisioned IOPS. Setting this implies a storage_type of "io1". -}
    , _kms_key_id                          :: !(TF.Argument Text)
    {- ^ (Optional) The ARN for the KMS encryption key. If creating an encrypted replica, set this to the destination KMS ARN. -}
    , _license_model                       :: !(TF.Argument Text)
    {- ^ (Optional, but required for some DB engines, i.e. Oracle SE1) License model information for this DB instance. -}
    , _maintenance_window                  :: !(TF.Argument Text)
    {- ^ (Optional) The window to perform maintenance in. Syntax: "ddd:hh24:mi-ddd:hh24:mi". Eg: "Mon:00:00-Mon:03:00". See <http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow> for more information. -}
    , _monitoring_interval                 :: !(TF.Argument Text)
    {- ^ (Optional) The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0. Valid Values: 0, 1, 5, 10, 15, 30, 60. -}
    , _monitoring_role_arn                 :: !(TF.Argument Text)
    {- ^ (Optional) The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to CloudWatch Logs. You can find more information on the <https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html> what IAM permissions are needed to allow Enhanced Monitoring for RDS Instances. -}
    , _multi_az                            :: !(TF.Argument Text)
    {- ^ (Optional) Specifies if the RDS instance is multi-AZ -}
    , _name                                :: !(TF.Argument Text)
    {- ^ (Optional) The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance. Note that this does not apply for Oracle or SQL Server engines. See the <http://docs.aws.amazon.com/cli/latest/reference/rds/create-db-instance.html> for more details on what applies for those engines. -}
    , _option_group_name                   :: !(TF.Argument Text)
    {- ^ (Optional) Name of the DB option group to associate. -}
    , _parameter_group_name                :: !(TF.Argument Text)
    {- ^ (Optional) Name of the DB parameter group to associate. -}
    , _password                            :: !(TF.Argument Text)
    {- ^ (Required unless a @snapshot_identifier@ or @replicate_source_db@ is provided) Password for the master DB user. Note that this may show up in logs, and it will be stored in the state file. -}
    , _port                                :: !(TF.Argument Text)
    {- ^ (Optional) The port on which the DB accepts connections. -}
    , _publicly_accessible                 :: !(TF.Argument Text)
    {- ^ (Optional) Bool to control if instance is publicly accessible. Default is @false@ . -}
    , _replicate_source_db                 :: !(TF.Argument Text)
    {- ^ (Optional) Specifies that this resource is a Replicate database, and to use this value as the source database. This correlates to the @identifier@ of another Amazon RDS Database to replicate. See <https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Replication.html> and <https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html> for more information on using Replication. -}
    , _security_group_names                :: !(TF.Argument Text)
    {- ^ (Optional/Deprecated) List of DB Security Groups to associate. Only used for <https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.html#USER_VPC.FindDefaultVPC> . -}
    , _skip_final_snapshot                 :: !(TF.Argument Text)
    {- ^ (Optional) Determines whether a final DB snapshot is created before the DB instance is deleted. If true is specified, no DBSnapshot is created. If false is specified, a DB snapshot is created before the DB instance is deleted, using the value from @final_snapshot_identifier@ . Default is @false@ . -}
    , _snapshot_identifier                 :: !(TF.Argument Text)
    {- ^ (Optional) Specifies whether or not to create this database from a snapshot. This correlates to the snapshot ID you'd find in the RDS console, e.g: rds:production-2015-06-26-06-05. -}
    , _storage_encrypted                   :: !(TF.Argument Text)
    {- ^ (Optional) Specifies whether the DB instance is encrypted. The default is @false@ if not specified. -}
    , _storage_type                        :: !(TF.Argument Text)
    {- ^ (Optional) One of "standard" (magnetic), "gp2" (general purpose SSD), or "io1" (provisioned IOPS SSD). The default is "io1" if @iops@ is specified, "standard" if not. Note that this behaviour is different from the AWS web console, where the default is "gp2". -}
    , _tags                                :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _timezone                            :: !(TF.Argument Text)
    {- ^ (Optional) Time zone of the DB instance. @timezone@ is currently only supported by Microsoft SQL Server. The @timezone@ can only be set on creation. See <http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone> for more information. -}
    , _username                            :: !(TF.Argument Text)
    {- ^ (Required unless a @snapshot_identifier@ or @replicate_source_db@ is provided) Username for the master DB user. -}
    , _vpc_security_group_ids              :: !(TF.Argument Text)
    {- ^ (Optional) List of VPC security groups to associate. -}
    , _computed_address                    :: !(TF.Attribute Text)
    {- ^ - The address of the RDS instance. -}
    , _computed_allocated_storage          :: !(TF.Attribute Text)
    {- ^ - The amount of allocated storage. -}
    , _computed_arn                        :: !(TF.Attribute Text)
    {- ^ - The ARN of the RDS instance. -}
    , _computed_availability_zone          :: !(TF.Attribute Text)
    {- ^ - The availability zone of the instance. -}
    , _computed_backup_retention_period    :: !(TF.Attribute Text)
    {- ^ - The backup retention period. -}
    , _computed_backup_window              :: !(TF.Attribute Text)
    {- ^ - The backup window. -}
    , _computed_ca_cert_identifier         :: !(TF.Attribute Text)
    {- ^ - Specifies the identifier of the CA certificate for the DB instance. -}
    , _computed_endpoint                   :: !(TF.Attribute Text)
    {- ^ - The connection endpoint. -}
    , _computed_engine                     :: !(TF.Attribute Text)
    {- ^ - The database engine. -}
    , _computed_engine_version             :: !(TF.Attribute Text)
    {- ^ - The database engine version. -}
    , _computed_hosted_zone_id             :: !(TF.Attribute Text)
    {- ^ - The canonical hosted zone ID of the DB instance (to be used in a Route 53 Alias record). -}
    , _computed_id                         :: !(TF.Attribute Text)
    {- ^ - The RDS instance ID. -}
    , _computed_instance_class             :: !(TF.Attribute Text)
    {- ^ - The RDS instance class. -}
    , _computed_maintenance_window         :: !(TF.Attribute Text)
    {- ^ - The instance maintenance window. -}
    , _computed_multi_az                   :: !(TF.Attribute Text)
    {- ^ - If the RDS instance is multi AZ enabled. -}
    , _computed_name                       :: !(TF.Attribute Text)
    {- ^ - The database name. -}
    , _computed_port                       :: !(TF.Attribute Text)
    {- ^ - The database port. -}
    , _computed_resource_id                :: !(TF.Attribute Text)
    {- ^ - The RDS Resource ID of this instance. -}
    , _computed_status                     :: !(TF.Attribute Text)
    {- ^ - The RDS instance status. -}
    , _computed_storage_encrypted          :: !(TF.Attribute Text)
    {- ^ - Specifies whether the DB instance is encrypted. -}
    , _computed_username                   :: !(TF.Attribute Text)
    {- ^ - The master username for the database. -}
    } deriving (Show, Eq)

instance TF.ToHCL DbInstanceResource where
    toHCL DbInstanceResource{..} = TF.block $ catMaybes
        [ TF.assign "allocated_storage" <$> TF.argument _allocated_storage
        , TF.assign "allow_major_version_upgrade" <$> TF.argument _allow_major_version_upgrade
        , TF.assign "apply_immediately" <$> TF.argument _apply_immediately
        , TF.assign "auto_minor_version_upgrade" <$> TF.argument _auto_minor_version_upgrade
        , TF.assign "availability_zone" <$> TF.argument _availability_zone
        , TF.assign "backup_retention_period" <$> TF.argument _backup_retention_period
        , TF.assign "backup_window" <$> TF.argument _backup_window
        , TF.assign "character_set_name" <$> TF.argument _character_set_name
        , TF.assign "copy_tags_to_snapshot" <$> TF.argument _copy_tags_to_snapshot
        , TF.assign "db_subnet_group_name" <$> TF.argument _db_subnet_group_name
        , TF.assign "engine" <$> TF.argument _engine
        , TF.assign "engine_version" <$> TF.argument _engine_version
        , TF.assign "final_snapshot_identifier" <$> TF.argument _final_snapshot_identifier
        , TF.assign "iam_database_authentication_enabled" <$> TF.argument _iam_database_authentication_enabled
        , TF.assign "identifier" <$> TF.argument _identifier
        , TF.assign "identifier_prefix" <$> TF.argument _identifier_prefix
        , TF.assign "instance_class" <$> TF.argument _instance_class
        , TF.assign "iops" <$> TF.argument _iops
        , TF.assign "kms_key_id" <$> TF.argument _kms_key_id
        , TF.assign "license_model" <$> TF.argument _license_model
        , TF.assign "maintenance_window" <$> TF.argument _maintenance_window
        , TF.assign "monitoring_interval" <$> TF.argument _monitoring_interval
        , TF.assign "monitoring_role_arn" <$> TF.argument _monitoring_role_arn
        , TF.assign "multi_az" <$> TF.argument _multi_az
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "option_group_name" <$> TF.argument _option_group_name
        , TF.assign "parameter_group_name" <$> TF.argument _parameter_group_name
        , TF.assign "password" <$> TF.argument _password
        , TF.assign "port" <$> TF.argument _port
        , TF.assign "publicly_accessible" <$> TF.argument _publicly_accessible
        , TF.assign "replicate_source_db" <$> TF.argument _replicate_source_db
        , TF.assign "security_group_names" <$> TF.argument _security_group_names
        , TF.assign "skip_final_snapshot" <$> TF.argument _skip_final_snapshot
        , TF.assign "snapshot_identifier" <$> TF.argument _snapshot_identifier
        , TF.assign "storage_encrypted" <$> TF.argument _storage_encrypted
        , TF.assign "storage_type" <$> TF.argument _storage_type
        , TF.assign "tags" <$> TF.argument _tags
        , TF.assign "timezone" <$> TF.argument _timezone
        , TF.assign "username" <$> TF.argument _username
        , TF.assign "vpc_security_group_ids" <$> TF.argument _vpc_security_group_ids
        ]

instance HasAllocatedStorage DbInstanceResource (TF.Argument Text) where
    allocatedStorage f s@DbInstanceResource{..} =
        (\a -> s { _allocated_storage = a } :: DbInstanceResource)
             <$> f _allocated_storage

instance HasAllowMajorVersionUpgrade DbInstanceResource (TF.Argument Text) where
    allowMajorVersionUpgrade f s@DbInstanceResource{..} =
        (\a -> s { _allow_major_version_upgrade = a } :: DbInstanceResource)
             <$> f _allow_major_version_upgrade

instance HasApplyImmediately DbInstanceResource (TF.Argument Text) where
    applyImmediately f s@DbInstanceResource{..} =
        (\a -> s { _apply_immediately = a } :: DbInstanceResource)
             <$> f _apply_immediately

instance HasAutoMinorVersionUpgrade DbInstanceResource (TF.Argument Text) where
    autoMinorVersionUpgrade f s@DbInstanceResource{..} =
        (\a -> s { _auto_minor_version_upgrade = a } :: DbInstanceResource)
             <$> f _auto_minor_version_upgrade

instance HasAvailabilityZone DbInstanceResource (TF.Argument Text) where
    availabilityZone f s@DbInstanceResource{..} =
        (\a -> s { _availability_zone = a } :: DbInstanceResource)
             <$> f _availability_zone

instance HasBackupRetentionPeriod DbInstanceResource (TF.Argument Text) where
    backupRetentionPeriod f s@DbInstanceResource{..} =
        (\a -> s { _backup_retention_period = a } :: DbInstanceResource)
             <$> f _backup_retention_period

instance HasBackupWindow DbInstanceResource (TF.Argument Text) where
    backupWindow f s@DbInstanceResource{..} =
        (\a -> s { _backup_window = a } :: DbInstanceResource)
             <$> f _backup_window

instance HasCharacterSetName DbInstanceResource (TF.Argument Text) where
    characterSetName f s@DbInstanceResource{..} =
        (\a -> s { _character_set_name = a } :: DbInstanceResource)
             <$> f _character_set_name

instance HasCopyTagsToSnapshot DbInstanceResource (TF.Argument Text) where
    copyTagsToSnapshot f s@DbInstanceResource{..} =
        (\a -> s { _copy_tags_to_snapshot = a } :: DbInstanceResource)
             <$> f _copy_tags_to_snapshot

instance HasDbSubnetGroupName DbInstanceResource (TF.Argument Text) where
    dbSubnetGroupName f s@DbInstanceResource{..} =
        (\a -> s { _db_subnet_group_name = a } :: DbInstanceResource)
             <$> f _db_subnet_group_name

instance HasEngine DbInstanceResource (TF.Argument Text) where
    engine f s@DbInstanceResource{..} =
        (\a -> s { _engine = a } :: DbInstanceResource)
             <$> f _engine

instance HasEngineVersion DbInstanceResource (TF.Argument Text) where
    engineVersion f s@DbInstanceResource{..} =
        (\a -> s { _engine_version = a } :: DbInstanceResource)
             <$> f _engine_version

instance HasFinalSnapshotIdentifier DbInstanceResource (TF.Argument Text) where
    finalSnapshotIdentifier f s@DbInstanceResource{..} =
        (\a -> s { _final_snapshot_identifier = a } :: DbInstanceResource)
             <$> f _final_snapshot_identifier

instance HasIamDatabaseAuthenticationEnabled DbInstanceResource (TF.Argument TF.Bool) where
    iamDatabaseAuthenticationEnabled f s@DbInstanceResource{..} =
        (\a -> s { _iam_database_authentication_enabled = a } :: DbInstanceResource)
             <$> f _iam_database_authentication_enabled

instance HasIdentifier DbInstanceResource (TF.Argument Text) where
    identifier f s@DbInstanceResource{..} =
        (\a -> s { _identifier = a } :: DbInstanceResource)
             <$> f _identifier

instance HasIdentifierPrefix DbInstanceResource (TF.Argument Text) where
    identifierPrefix f s@DbInstanceResource{..} =
        (\a -> s { _identifier_prefix = a } :: DbInstanceResource)
             <$> f _identifier_prefix

instance HasInstanceClass DbInstanceResource (TF.Argument Text) where
    instanceClass f s@DbInstanceResource{..} =
        (\a -> s { _instance_class = a } :: DbInstanceResource)
             <$> f _instance_class

instance HasIops DbInstanceResource (TF.Argument Text) where
    iops f s@DbInstanceResource{..} =
        (\a -> s { _iops = a } :: DbInstanceResource)
             <$> f _iops

instance HasKmsKeyId DbInstanceResource (TF.Argument Text) where
    kmsKeyId f s@DbInstanceResource{..} =
        (\a -> s { _kms_key_id = a } :: DbInstanceResource)
             <$> f _kms_key_id

instance HasLicenseModel DbInstanceResource (TF.Argument Text) where
    licenseModel f s@DbInstanceResource{..} =
        (\a -> s { _license_model = a } :: DbInstanceResource)
             <$> f _license_model

instance HasMaintenanceWindow DbInstanceResource (TF.Argument Text) where
    maintenanceWindow f s@DbInstanceResource{..} =
        (\a -> s { _maintenance_window = a } :: DbInstanceResource)
             <$> f _maintenance_window

instance HasMonitoringInterval DbInstanceResource (TF.Argument Text) where
    monitoringInterval f s@DbInstanceResource{..} =
        (\a -> s { _monitoring_interval = a } :: DbInstanceResource)
             <$> f _monitoring_interval

instance HasMonitoringRoleArn DbInstanceResource (TF.Argument Text) where
    monitoringRoleArn f s@DbInstanceResource{..} =
        (\a -> s { _monitoring_role_arn = a } :: DbInstanceResource)
             <$> f _monitoring_role_arn

instance HasMultiAz DbInstanceResource (TF.Argument Text) where
    multiAz f s@DbInstanceResource{..} =
        (\a -> s { _multi_az = a } :: DbInstanceResource)
             <$> f _multi_az

instance HasName DbInstanceResource (TF.Argument Text) where
    name f s@DbInstanceResource{..} =
        (\a -> s { _name = a } :: DbInstanceResource)
             <$> f _name

instance HasOptionGroupName DbInstanceResource (TF.Argument Text) where
    optionGroupName f s@DbInstanceResource{..} =
        (\a -> s { _option_group_name = a } :: DbInstanceResource)
             <$> f _option_group_name

instance HasParameterGroupName DbInstanceResource (TF.Argument Text) where
    parameterGroupName f s@DbInstanceResource{..} =
        (\a -> s { _parameter_group_name = a } :: DbInstanceResource)
             <$> f _parameter_group_name

instance HasPassword DbInstanceResource (TF.Argument Text) where
    password f s@DbInstanceResource{..} =
        (\a -> s { _password = a } :: DbInstanceResource)
             <$> f _password

instance HasPort DbInstanceResource (TF.Argument Text) where
    port f s@DbInstanceResource{..} =
        (\a -> s { _port = a } :: DbInstanceResource)
             <$> f _port

instance HasPubliclyAccessible DbInstanceResource (TF.Argument Text) where
    publiclyAccessible f s@DbInstanceResource{..} =
        (\a -> s { _publicly_accessible = a } :: DbInstanceResource)
             <$> f _publicly_accessible

instance HasReplicateSourceDb DbInstanceResource (TF.Argument Text) where
    replicateSourceDb f s@DbInstanceResource{..} =
        (\a -> s { _replicate_source_db = a } :: DbInstanceResource)
             <$> f _replicate_source_db

instance HasSecurityGroupNames DbInstanceResource (TF.Argument Text) where
    securityGroupNames f s@DbInstanceResource{..} =
        (\a -> s { _security_group_names = a } :: DbInstanceResource)
             <$> f _security_group_names

instance HasSkipFinalSnapshot DbInstanceResource (TF.Argument Text) where
    skipFinalSnapshot f s@DbInstanceResource{..} =
        (\a -> s { _skip_final_snapshot = a } :: DbInstanceResource)
             <$> f _skip_final_snapshot

instance HasSnapshotIdentifier DbInstanceResource (TF.Argument Text) where
    snapshotIdentifier f s@DbInstanceResource{..} =
        (\a -> s { _snapshot_identifier = a } :: DbInstanceResource)
             <$> f _snapshot_identifier

instance HasStorageEncrypted DbInstanceResource (TF.Argument Text) where
    storageEncrypted f s@DbInstanceResource{..} =
        (\a -> s { _storage_encrypted = a } :: DbInstanceResource)
             <$> f _storage_encrypted

instance HasStorageType DbInstanceResource (TF.Argument Text) where
    storageType f s@DbInstanceResource{..} =
        (\a -> s { _storage_type = a } :: DbInstanceResource)
             <$> f _storage_type

instance HasTags DbInstanceResource (TF.Argument TF.Tags) where
    tags f s@DbInstanceResource{..} =
        (\a -> s { _tags = a } :: DbInstanceResource)
             <$> f _tags

instance HasTimezone DbInstanceResource (TF.Argument Text) where
    timezone f s@DbInstanceResource{..} =
        (\a -> s { _timezone = a } :: DbInstanceResource)
             <$> f _timezone

instance HasUsername DbInstanceResource (TF.Argument Text) where
    username f s@DbInstanceResource{..} =
        (\a -> s { _username = a } :: DbInstanceResource)
             <$> f _username

instance HasVpcSecurityGroupIds DbInstanceResource (TF.Argument Text) where
    vpcSecurityGroupIds f s@DbInstanceResource{..} =
        (\a -> s { _vpc_security_group_ids = a } :: DbInstanceResource)
             <$> f _vpc_security_group_ids

instance HasComputedAddress DbInstanceResource (TF.Attribute Text) where
    computedAddress f s@DbInstanceResource{..} =
        (\a -> s { _computed_address = a } :: DbInstanceResource)
             <$> f _computed_address

instance HasComputedAllocatedStorage DbInstanceResource (TF.Attribute Text) where
    computedAllocatedStorage f s@DbInstanceResource{..} =
        (\a -> s { _computed_allocated_storage = a } :: DbInstanceResource)
             <$> f _computed_allocated_storage

instance HasComputedArn DbInstanceResource (TF.Attribute Text) where
    computedArn f s@DbInstanceResource{..} =
        (\a -> s { _computed_arn = a } :: DbInstanceResource)
             <$> f _computed_arn

instance HasComputedAvailabilityZone DbInstanceResource (TF.Attribute Text) where
    computedAvailabilityZone f s@DbInstanceResource{..} =
        (\a -> s { _computed_availability_zone = a } :: DbInstanceResource)
             <$> f _computed_availability_zone

instance HasComputedBackupRetentionPeriod DbInstanceResource (TF.Attribute Text) where
    computedBackupRetentionPeriod f s@DbInstanceResource{..} =
        (\a -> s { _computed_backup_retention_period = a } :: DbInstanceResource)
             <$> f _computed_backup_retention_period

instance HasComputedBackupWindow DbInstanceResource (TF.Attribute Text) where
    computedBackupWindow f s@DbInstanceResource{..} =
        (\a -> s { _computed_backup_window = a } :: DbInstanceResource)
             <$> f _computed_backup_window

instance HasComputedCaCertIdentifier DbInstanceResource (TF.Attribute Text) where
    computedCaCertIdentifier f s@DbInstanceResource{..} =
        (\a -> s { _computed_ca_cert_identifier = a } :: DbInstanceResource)
             <$> f _computed_ca_cert_identifier

instance HasComputedEndpoint DbInstanceResource (TF.Attribute Text) where
    computedEndpoint f s@DbInstanceResource{..} =
        (\a -> s { _computed_endpoint = a } :: DbInstanceResource)
             <$> f _computed_endpoint

instance HasComputedEngine DbInstanceResource (TF.Attribute Text) where
    computedEngine f s@DbInstanceResource{..} =
        (\a -> s { _computed_engine = a } :: DbInstanceResource)
             <$> f _computed_engine

instance HasComputedEngineVersion DbInstanceResource (TF.Attribute Text) where
    computedEngineVersion f s@DbInstanceResource{..} =
        (\a -> s { _computed_engine_version = a } :: DbInstanceResource)
             <$> f _computed_engine_version

instance HasComputedHostedZoneId DbInstanceResource (TF.Attribute Text) where
    computedHostedZoneId f s@DbInstanceResource{..} =
        (\a -> s { _computed_hosted_zone_id = a } :: DbInstanceResource)
             <$> f _computed_hosted_zone_id

instance HasComputedId DbInstanceResource (TF.Attribute Text) where
    computedId f s@DbInstanceResource{..} =
        (\a -> s { _computed_id = a } :: DbInstanceResource)
             <$> f _computed_id

instance HasComputedInstanceClass DbInstanceResource (TF.Attribute Text) where
    computedInstanceClass f s@DbInstanceResource{..} =
        (\a -> s { _computed_instance_class = a } :: DbInstanceResource)
             <$> f _computed_instance_class

instance HasComputedMaintenanceWindow DbInstanceResource (TF.Attribute Text) where
    computedMaintenanceWindow f s@DbInstanceResource{..} =
        (\a -> s { _computed_maintenance_window = a } :: DbInstanceResource)
             <$> f _computed_maintenance_window

instance HasComputedMultiAz DbInstanceResource (TF.Attribute Text) where
    computedMultiAz f s@DbInstanceResource{..} =
        (\a -> s { _computed_multi_az = a } :: DbInstanceResource)
             <$> f _computed_multi_az

instance HasComputedName DbInstanceResource (TF.Attribute Text) where
    computedName f s@DbInstanceResource{..} =
        (\a -> s { _computed_name = a } :: DbInstanceResource)
             <$> f _computed_name

instance HasComputedPort DbInstanceResource (TF.Attribute Text) where
    computedPort f s@DbInstanceResource{..} =
        (\a -> s { _computed_port = a } :: DbInstanceResource)
             <$> f _computed_port

instance HasComputedResourceId DbInstanceResource (TF.Attribute Text) where
    computedResourceId f s@DbInstanceResource{..} =
        (\a -> s { _computed_resource_id = a } :: DbInstanceResource)
             <$> f _computed_resource_id

instance HasComputedStatus DbInstanceResource (TF.Attribute Text) where
    computedStatus f s@DbInstanceResource{..} =
        (\a -> s { _computed_status = a } :: DbInstanceResource)
             <$> f _computed_status

instance HasComputedStorageEncrypted DbInstanceResource (TF.Attribute Text) where
    computedStorageEncrypted f s@DbInstanceResource{..} =
        (\a -> s { _computed_storage_encrypted = a } :: DbInstanceResource)
             <$> f _computed_storage_encrypted

instance HasComputedUsername DbInstanceResource (TF.Attribute Text) where
    computedUsername f s@DbInstanceResource{..} =
        (\a -> s { _computed_username = a } :: DbInstanceResource)
             <$> f _computed_username

dbInstanceResource :: TF.Resource TF.AWS DbInstanceResource
dbInstanceResource =
    TF.newResource "aws_db_instance" $
        DbInstanceResource {
            _allocated_storage = TF.Nil
            , _allow_major_version_upgrade = TF.Nil
            , _apply_immediately = TF.Nil
            , _auto_minor_version_upgrade = TF.Nil
            , _availability_zone = TF.Nil
            , _backup_retention_period = TF.Nil
            , _backup_window = TF.Nil
            , _character_set_name = TF.Nil
            , _copy_tags_to_snapshot = TF.Nil
            , _db_subnet_group_name = TF.Nil
            , _engine = TF.Nil
            , _engine_version = TF.Nil
            , _final_snapshot_identifier = TF.Nil
            , _iam_database_authentication_enabled = TF.Nil
            , _identifier = TF.Nil
            , _identifier_prefix = TF.Nil
            , _instance_class = TF.Nil
            , _iops = TF.Nil
            , _kms_key_id = TF.Nil
            , _license_model = TF.Nil
            , _maintenance_window = TF.Nil
            , _monitoring_interval = TF.Nil
            , _monitoring_role_arn = TF.Nil
            , _multi_az = TF.Nil
            , _name = TF.Nil
            , _option_group_name = TF.Nil
            , _parameter_group_name = TF.Nil
            , _password = TF.Nil
            , _port = TF.Nil
            , _publicly_accessible = TF.Nil
            , _replicate_source_db = TF.Nil
            , _security_group_names = TF.Nil
            , _skip_final_snapshot = TF.Nil
            , _snapshot_identifier = TF.Nil
            , _storage_encrypted = TF.Nil
            , _storage_type = TF.Nil
            , _tags = TF.Nil
            , _timezone = TF.Nil
            , _username = TF.Nil
            , _vpc_security_group_ids = TF.Nil
            , _computed_address = TF.Compute "address"
            , _computed_allocated_storage = TF.Compute "allocated_storage"
            , _computed_arn = TF.Compute "arn"
            , _computed_availability_zone = TF.Compute "availability_zone"
            , _computed_backup_retention_period = TF.Compute "backup_retention_period"
            , _computed_backup_window = TF.Compute "backup_window"
            , _computed_ca_cert_identifier = TF.Compute "ca_cert_identifier"
            , _computed_endpoint = TF.Compute "endpoint"
            , _computed_engine = TF.Compute "engine"
            , _computed_engine_version = TF.Compute "engine_version"
            , _computed_hosted_zone_id = TF.Compute "hosted_zone_id"
            , _computed_id = TF.Compute "id"
            , _computed_instance_class = TF.Compute "instance_class"
            , _computed_maintenance_window = TF.Compute "maintenance_window"
            , _computed_multi_az = TF.Compute "multi_az"
            , _computed_name = TF.Compute "name"
            , _computed_port = TF.Compute "port"
            , _computed_resource_id = TF.Compute "resource_id"
            , _computed_status = TF.Compute "status"
            , _computed_storage_encrypted = TF.Compute "storage_encrypted"
            , _computed_username = TF.Compute "username"
            }

{- | The @aws_db_option_group@ AWS resource.

Provides an RDS DB option group resource.
-}
data DbOptionGroupResource = DbOptionGroupResource {
      _engine_name              :: !(TF.Argument Text)
    {- ^ (Required) Specifies the name of the engine that this option group should be associated with. -}
    , _major_engine_version     :: !(TF.Argument Text)
    {- ^ (Required) Specifies the major version of the engine that this option group should be associated with. -}
    , _name                     :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) The name of the option group. If omitted, Terraform will assign a random, unique name. Must be lowercase, to match as it is stored in AWS. -}
    , _name_prefix              :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) Creates a unique name beginning with the specified prefix. Conflicts with @name@ . Must be lowercase, to match as it is stored in AWS. -}
    , _option                   :: !(TF.Argument Text)
    {- ^ (Optional) A list of Options to apply. -}
    , _option_group_description :: !(TF.Argument Text)
    {- ^ (Optional) The description of the option group. Defaults to "Managed by Terraform". -}
    , _tags                     :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _computed_arn             :: !(TF.Attribute Text)
    {- ^ - The ARN of the db option group. -}
    , _computed_id              :: !(TF.Attribute Text)
    {- ^ - The db option group name. -}
    } deriving (Show, Eq)

instance TF.ToHCL DbOptionGroupResource where
    toHCL DbOptionGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "engine_name" <$> TF.argument _engine_name
        , TF.assign "major_engine_version" <$> TF.argument _major_engine_version
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "name_prefix" <$> TF.argument _name_prefix
        , TF.assign "option" <$> TF.argument _option
        , TF.assign "option_group_description" <$> TF.argument _option_group_description
        , TF.assign "tags" <$> TF.argument _tags
        ]

instance HasEngineName DbOptionGroupResource (TF.Argument Text) where
    engineName f s@DbOptionGroupResource{..} =
        (\a -> s { _engine_name = a } :: DbOptionGroupResource)
             <$> f _engine_name

instance HasMajorEngineVersion DbOptionGroupResource (TF.Argument Text) where
    majorEngineVersion f s@DbOptionGroupResource{..} =
        (\a -> s { _major_engine_version = a } :: DbOptionGroupResource)
             <$> f _major_engine_version

instance HasName DbOptionGroupResource (TF.Argument Text) where
    name f s@DbOptionGroupResource{..} =
        (\a -> s { _name = a } :: DbOptionGroupResource)
             <$> f _name

instance HasNamePrefix DbOptionGroupResource (TF.Argument Text) where
    namePrefix f s@DbOptionGroupResource{..} =
        (\a -> s { _name_prefix = a } :: DbOptionGroupResource)
             <$> f _name_prefix

instance HasOption DbOptionGroupResource (TF.Argument Text) where
    option f s@DbOptionGroupResource{..} =
        (\a -> s { _option = a } :: DbOptionGroupResource)
             <$> f _option

instance HasOptionGroupDescription DbOptionGroupResource (TF.Argument Text) where
    optionGroupDescription f s@DbOptionGroupResource{..} =
        (\a -> s { _option_group_description = a } :: DbOptionGroupResource)
             <$> f _option_group_description

instance HasTags DbOptionGroupResource (TF.Argument TF.Tags) where
    tags f s@DbOptionGroupResource{..} =
        (\a -> s { _tags = a } :: DbOptionGroupResource)
             <$> f _tags

instance HasComputedArn DbOptionGroupResource (TF.Attribute Text) where
    computedArn f s@DbOptionGroupResource{..} =
        (\a -> s { _computed_arn = a } :: DbOptionGroupResource)
             <$> f _computed_arn

instance HasComputedId DbOptionGroupResource (TF.Attribute Text) where
    computedId f s@DbOptionGroupResource{..} =
        (\a -> s { _computed_id = a } :: DbOptionGroupResource)
             <$> f _computed_id

dbOptionGroupResource :: TF.Resource TF.AWS DbOptionGroupResource
dbOptionGroupResource =
    TF.newResource "aws_db_option_group" $
        DbOptionGroupResource {
            _engine_name = TF.Nil
            , _major_engine_version = TF.Nil
            , _name = TF.Nil
            , _name_prefix = TF.Nil
            , _option = TF.Nil
            , _option_group_description = TF.Nil
            , _tags = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_db_parameter_group@ AWS resource.

Provides an RDS DB parameter group resource.
-}
data DbParameterGroupResource = DbParameterGroupResource {
      _description  :: !(TF.Argument Text)
    {- ^ (Optional) The description of the DB parameter group. Defaults to "Managed by Terraform". -}
    , _family'      :: !(TF.Argument Text)
    {- ^ (Required) The family of the DB parameter group. -}
    , _name         :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) The name of the DB parameter group. If omitted, Terraform will assign a random, unique name. -}
    , _name_prefix  :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) Creates a unique name beginning with the specified prefix. Conflicts with @name@ . -}
    , _parameter    :: !(TF.Argument Text)
    {- ^ (Optional) A list of DB parameters to apply. Note that parameters may differ from a family to an other. Full list of all parameters can be discovered via <https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-parameters.html> after initial creation of the group. -}
    , _tags         :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _computed_arn :: !(TF.Attribute Text)
    {- ^ - The ARN of the db parameter group. -}
    , _computed_id  :: !(TF.Attribute Text)
    {- ^ - The db parameter group name. -}
    } deriving (Show, Eq)

instance TF.ToHCL DbParameterGroupResource where
    toHCL DbParameterGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.argument _description
        , TF.assign "family" <$> TF.argument _family'
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "name_prefix" <$> TF.argument _name_prefix
        , TF.assign "parameter" <$> TF.argument _parameter
        , TF.assign "tags" <$> TF.argument _tags
        ]

instance HasDescription DbParameterGroupResource (TF.Argument Text) where
    description f s@DbParameterGroupResource{..} =
        (\a -> s { _description = a } :: DbParameterGroupResource)
             <$> f _description

instance HasFamily' DbParameterGroupResource (TF.Argument Text) where
    family' f s@DbParameterGroupResource{..} =
        (\a -> s { _family' = a } :: DbParameterGroupResource)
             <$> f _family'

instance HasName DbParameterGroupResource (TF.Argument Text) where
    name f s@DbParameterGroupResource{..} =
        (\a -> s { _name = a } :: DbParameterGroupResource)
             <$> f _name

instance HasNamePrefix DbParameterGroupResource (TF.Argument Text) where
    namePrefix f s@DbParameterGroupResource{..} =
        (\a -> s { _name_prefix = a } :: DbParameterGroupResource)
             <$> f _name_prefix

instance HasParameter DbParameterGroupResource (TF.Argument Text) where
    parameter f s@DbParameterGroupResource{..} =
        (\a -> s { _parameter = a } :: DbParameterGroupResource)
             <$> f _parameter

instance HasTags DbParameterGroupResource (TF.Argument TF.Tags) where
    tags f s@DbParameterGroupResource{..} =
        (\a -> s { _tags = a } :: DbParameterGroupResource)
             <$> f _tags

instance HasComputedArn DbParameterGroupResource (TF.Attribute Text) where
    computedArn f s@DbParameterGroupResource{..} =
        (\a -> s { _computed_arn = a } :: DbParameterGroupResource)
             <$> f _computed_arn

instance HasComputedId DbParameterGroupResource (TF.Attribute Text) where
    computedId f s@DbParameterGroupResource{..} =
        (\a -> s { _computed_id = a } :: DbParameterGroupResource)
             <$> f _computed_id

dbParameterGroupResource :: TF.Resource TF.AWS DbParameterGroupResource
dbParameterGroupResource =
    TF.newResource "aws_db_parameter_group" $
        DbParameterGroupResource {
            _description = TF.Nil
            , _family' = TF.Nil
            , _name = TF.Nil
            , _name_prefix = TF.Nil
            , _parameter = TF.Nil
            , _tags = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_db_security_group@ AWS resource.

Provides an RDS security group resource. This is only for DB instances in
the EC2-Classic Platform. For instances inside a VPC, use the
</docs/providers/aws/r/db_instance.html#vpc_security_group_ids> attribute
instead.
-}
data DbSecurityGroupResource = DbSecurityGroupResource {
      _description  :: !(TF.Argument Text)
    {- ^ (Optional) The description of the DB security group. Defaults to "Managed by Terraform". -}
    , _ingress      :: !(TF.Argument Text)
    {- ^ (Required) A list of ingress rules. -}
    , _name         :: !(TF.Argument Text)
    {- ^ (Required) The name of the DB security group. -}
    , _tags         :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _computed_arn :: !(TF.Attribute Text)
    {- ^ - The arn of the DB security group. -}
    , _computed_id  :: !(TF.Attribute Text)
    {- ^ - The db security group ID. -}
    } deriving (Show, Eq)

instance TF.ToHCL DbSecurityGroupResource where
    toHCL DbSecurityGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.argument _description
        , TF.assign "ingress" <$> TF.argument _ingress
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "tags" <$> TF.argument _tags
        ]

instance HasDescription DbSecurityGroupResource (TF.Argument Text) where
    description f s@DbSecurityGroupResource{..} =
        (\a -> s { _description = a } :: DbSecurityGroupResource)
             <$> f _description

instance HasIngress DbSecurityGroupResource (TF.Argument Text) where
    ingress f s@DbSecurityGroupResource{..} =
        (\a -> s { _ingress = a } :: DbSecurityGroupResource)
             <$> f _ingress

instance HasName DbSecurityGroupResource (TF.Argument Text) where
    name f s@DbSecurityGroupResource{..} =
        (\a -> s { _name = a } :: DbSecurityGroupResource)
             <$> f _name

instance HasTags DbSecurityGroupResource (TF.Argument TF.Tags) where
    tags f s@DbSecurityGroupResource{..} =
        (\a -> s { _tags = a } :: DbSecurityGroupResource)
             <$> f _tags

instance HasComputedArn DbSecurityGroupResource (TF.Attribute Text) where
    computedArn f s@DbSecurityGroupResource{..} =
        (\a -> s { _computed_arn = a } :: DbSecurityGroupResource)
             <$> f _computed_arn

instance HasComputedId DbSecurityGroupResource (TF.Attribute Text) where
    computedId f s@DbSecurityGroupResource{..} =
        (\a -> s { _computed_id = a } :: DbSecurityGroupResource)
             <$> f _computed_id

dbSecurityGroupResource :: TF.Resource TF.AWS DbSecurityGroupResource
dbSecurityGroupResource =
    TF.newResource "aws_db_security_group" $
        DbSecurityGroupResource {
            _description = TF.Nil
            , _ingress = TF.Nil
            , _name = TF.Nil
            , _tags = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_db_snapshot@ AWS resource.

Creates a Snapshot of an DB Instance.
-}
data DbSnapshotResource = DbSnapshotResource {
      _db_instance_identifier                 :: !(TF.Argument Text)
    {- ^ (Required) The DB Instance Identifier from which to take the snapshot. -}
    , _db_snapshot_identifier                 :: !(TF.Argument Text)
    {- ^ (Required) The Identifier for the snapshot. -}
    , _computed_allocated_storage             :: !(TF.Attribute Text)
    {- ^ - Specifies the allocated storage size in gigabytes (GB). -}
    , _computed_availability_zone             :: !(TF.Attribute Text)
    {- ^ - Specifies the name of the Availability Zone the DB instance was located in at the time of the DB snapshot. -}
    , _computed_db_snapshot_arn               :: !(TF.Attribute Text)
    {- ^ - The Amazon Resource Name (ARN) for the DB snapshot. -}
    , _computed_encrypted                     :: !(TF.Attribute Text)
    {- ^ - Specifies whether the DB snapshot is encrypted. -}
    , _computed_engine                        :: !(TF.Attribute Text)
    {- ^ - Specifies the name of the database engine. -}
    , _computed_engine_version                :: !(TF.Attribute Text)
    {- ^ - Specifies the version of the database engine. -}
    , _computed_iops                          :: !(TF.Attribute Text)
    {- ^ - Specifies the Provisioned IOPS (I/O operations per second) value of the DB instance at the time of the snapshot. -}
    , _computed_kms_key_id                    :: !(TF.Attribute Text)
    {- ^ - The ARN for the KMS encryption key. -}
    , _computed_license_model                 :: !(TF.Attribute Text)
    {- ^ - License model information for the restored DB instance. -}
    , _computed_option_group_name             :: !(TF.Attribute Text)
    {- ^ - Provides the option group name for the DB snapshot. -}
    , _computed_source_db_snapshot_identifier :: !(TF.Attribute Text)
    {- ^ - The DB snapshot Arn that the DB snapshot was copied from. It only has value in case of cross customer or cross region copy. -}
    , _computed_source_region                 :: !(TF.Attribute Text)
    {- ^ - The region that the DB snapshot was created in or copied from. -}
    , _computed_status                        :: !(TF.Attribute Text)
    {- ^ - Specifies the status of this DB snapshot. -}
    , _computed_storage_type                  :: !(TF.Attribute Text)
    {- ^ - Specifies the storage type associated with DB snapshot. -}
    , _computed_vpc_id                        :: !(TF.Attribute Text)
    {- ^ - Specifies the storage type associated with DB snapshot. -}
    } deriving (Show, Eq)

instance TF.ToHCL DbSnapshotResource where
    toHCL DbSnapshotResource{..} = TF.block $ catMaybes
        [ TF.assign "db_instance_identifier" <$> TF.argument _db_instance_identifier
        , TF.assign "db_snapshot_identifier" <$> TF.argument _db_snapshot_identifier
        ]

instance HasDbInstanceIdentifier DbSnapshotResource (TF.Argument Text) where
    dbInstanceIdentifier f s@DbSnapshotResource{..} =
        (\a -> s { _db_instance_identifier = a } :: DbSnapshotResource)
             <$> f _db_instance_identifier

instance HasDbSnapshotIdentifier DbSnapshotResource (TF.Argument Text) where
    dbSnapshotIdentifier f s@DbSnapshotResource{..} =
        (\a -> s { _db_snapshot_identifier = a } :: DbSnapshotResource)
             <$> f _db_snapshot_identifier

instance HasComputedAllocatedStorage DbSnapshotResource (TF.Attribute Text) where
    computedAllocatedStorage f s@DbSnapshotResource{..} =
        (\a -> s { _computed_allocated_storage = a } :: DbSnapshotResource)
             <$> f _computed_allocated_storage

instance HasComputedAvailabilityZone DbSnapshotResource (TF.Attribute Text) where
    computedAvailabilityZone f s@DbSnapshotResource{..} =
        (\a -> s { _computed_availability_zone = a } :: DbSnapshotResource)
             <$> f _computed_availability_zone

instance HasComputedDbSnapshotArn DbSnapshotResource (TF.Attribute Text) where
    computedDbSnapshotArn f s@DbSnapshotResource{..} =
        (\a -> s { _computed_db_snapshot_arn = a } :: DbSnapshotResource)
             <$> f _computed_db_snapshot_arn

instance HasComputedEncrypted DbSnapshotResource (TF.Attribute Text) where
    computedEncrypted f s@DbSnapshotResource{..} =
        (\a -> s { _computed_encrypted = a } :: DbSnapshotResource)
             <$> f _computed_encrypted

instance HasComputedEngine DbSnapshotResource (TF.Attribute Text) where
    computedEngine f s@DbSnapshotResource{..} =
        (\a -> s { _computed_engine = a } :: DbSnapshotResource)
             <$> f _computed_engine

instance HasComputedEngineVersion DbSnapshotResource (TF.Attribute Text) where
    computedEngineVersion f s@DbSnapshotResource{..} =
        (\a -> s { _computed_engine_version = a } :: DbSnapshotResource)
             <$> f _computed_engine_version

instance HasComputedIops DbSnapshotResource (TF.Attribute Text) where
    computedIops f s@DbSnapshotResource{..} =
        (\a -> s { _computed_iops = a } :: DbSnapshotResource)
             <$> f _computed_iops

instance HasComputedKmsKeyId DbSnapshotResource (TF.Attribute Text) where
    computedKmsKeyId f s@DbSnapshotResource{..} =
        (\a -> s { _computed_kms_key_id = a } :: DbSnapshotResource)
             <$> f _computed_kms_key_id

instance HasComputedLicenseModel DbSnapshotResource (TF.Attribute Text) where
    computedLicenseModel f s@DbSnapshotResource{..} =
        (\a -> s { _computed_license_model = a } :: DbSnapshotResource)
             <$> f _computed_license_model

instance HasComputedOptionGroupName DbSnapshotResource (TF.Attribute Text) where
    computedOptionGroupName f s@DbSnapshotResource{..} =
        (\a -> s { _computed_option_group_name = a } :: DbSnapshotResource)
             <$> f _computed_option_group_name

instance HasComputedSourceDbSnapshotIdentifier DbSnapshotResource (TF.Attribute Text) where
    computedSourceDbSnapshotIdentifier f s@DbSnapshotResource{..} =
        (\a -> s { _computed_source_db_snapshot_identifier = a } :: DbSnapshotResource)
             <$> f _computed_source_db_snapshot_identifier

instance HasComputedSourceRegion DbSnapshotResource (TF.Attribute Text) where
    computedSourceRegion f s@DbSnapshotResource{..} =
        (\a -> s { _computed_source_region = a } :: DbSnapshotResource)
             <$> f _computed_source_region

instance HasComputedStatus DbSnapshotResource (TF.Attribute Text) where
    computedStatus f s@DbSnapshotResource{..} =
        (\a -> s { _computed_status = a } :: DbSnapshotResource)
             <$> f _computed_status

instance HasComputedStorageType DbSnapshotResource (TF.Attribute Text) where
    computedStorageType f s@DbSnapshotResource{..} =
        (\a -> s { _computed_storage_type = a } :: DbSnapshotResource)
             <$> f _computed_storage_type

instance HasComputedVpcId DbSnapshotResource (TF.Attribute Text) where
    computedVpcId f s@DbSnapshotResource{..} =
        (\a -> s { _computed_vpc_id = a } :: DbSnapshotResource)
             <$> f _computed_vpc_id

dbSnapshotResource :: TF.Resource TF.AWS DbSnapshotResource
dbSnapshotResource =
    TF.newResource "aws_db_snapshot" $
        DbSnapshotResource {
            _db_instance_identifier = TF.Nil
            , _db_snapshot_identifier = TF.Nil
            , _computed_allocated_storage = TF.Compute "allocated_storage"
            , _computed_availability_zone = TF.Compute "availability_zone"
            , _computed_db_snapshot_arn = TF.Compute "db_snapshot_arn"
            , _computed_encrypted = TF.Compute "encrypted"
            , _computed_engine = TF.Compute "engine"
            , _computed_engine_version = TF.Compute "engine_version"
            , _computed_iops = TF.Compute "iops"
            , _computed_kms_key_id = TF.Compute "kms_key_id"
            , _computed_license_model = TF.Compute "license_model"
            , _computed_option_group_name = TF.Compute "option_group_name"
            , _computed_source_db_snapshot_identifier = TF.Compute "source_db_snapshot_identifier"
            , _computed_source_region = TF.Compute "source_region"
            , _computed_status = TF.Compute "status"
            , _computed_storage_type = TF.Compute "storage_type"
            , _computed_vpc_id = TF.Compute "vpc_id"
            }

{- | The @aws_db_subnet_group@ AWS resource.

Provides an RDS DB subnet group resource.
-}
data DbSubnetGroupResource = DbSubnetGroupResource {
      _description  :: !(TF.Argument Text)
    {- ^ (Optional) The description of the DB subnet group. Defaults to "Managed by Terraform". -}
    , _name         :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) The name of the DB subnet group. If omitted, Terraform will assign a random, unique name. -}
    , _name_prefix  :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) Creates a unique name beginning with the specified prefix. Conflicts with @name@ . -}
    , _subnet_ids   :: !(TF.Argument Text)
    {- ^ (Required) A list of VPC subnet IDs. -}
    , _tags         :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _computed_arn :: !(TF.Attribute Text)
    {- ^ - The ARN of the db subnet group. -}
    , _computed_id  :: !(TF.Attribute Text)
    {- ^ - The db subnet group name. -}
    } deriving (Show, Eq)

instance TF.ToHCL DbSubnetGroupResource where
    toHCL DbSubnetGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.argument _description
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "name_prefix" <$> TF.argument _name_prefix
        , TF.assign "subnet_ids" <$> TF.argument _subnet_ids
        , TF.assign "tags" <$> TF.argument _tags
        ]

instance HasDescription DbSubnetGroupResource (TF.Argument Text) where
    description f s@DbSubnetGroupResource{..} =
        (\a -> s { _description = a } :: DbSubnetGroupResource)
             <$> f _description

instance HasName DbSubnetGroupResource (TF.Argument Text) where
    name f s@DbSubnetGroupResource{..} =
        (\a -> s { _name = a } :: DbSubnetGroupResource)
             <$> f _name

instance HasNamePrefix DbSubnetGroupResource (TF.Argument Text) where
    namePrefix f s@DbSubnetGroupResource{..} =
        (\a -> s { _name_prefix = a } :: DbSubnetGroupResource)
             <$> f _name_prefix

instance HasSubnetIds DbSubnetGroupResource (TF.Argument Text) where
    subnetIds f s@DbSubnetGroupResource{..} =
        (\a -> s { _subnet_ids = a } :: DbSubnetGroupResource)
             <$> f _subnet_ids

instance HasTags DbSubnetGroupResource (TF.Argument TF.Tags) where
    tags f s@DbSubnetGroupResource{..} =
        (\a -> s { _tags = a } :: DbSubnetGroupResource)
             <$> f _tags

instance HasComputedArn DbSubnetGroupResource (TF.Attribute Text) where
    computedArn f s@DbSubnetGroupResource{..} =
        (\a -> s { _computed_arn = a } :: DbSubnetGroupResource)
             <$> f _computed_arn

instance HasComputedId DbSubnetGroupResource (TF.Attribute Text) where
    computedId f s@DbSubnetGroupResource{..} =
        (\a -> s { _computed_id = a } :: DbSubnetGroupResource)
             <$> f _computed_id

dbSubnetGroupResource :: TF.Resource TF.AWS DbSubnetGroupResource
dbSubnetGroupResource =
    TF.newResource "aws_db_subnet_group" $
        DbSubnetGroupResource {
            _description = TF.Nil
            , _name = TF.Nil
            , _name_prefix = TF.Nil
            , _subnet_ids = TF.Nil
            , _tags = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_default_network_acl@ AWS resource.

Provides a resource to manage the default AWS Network ACL. VPC Only. Each
VPC created in AWS comes with a Default Network ACL that can be managed, but
not destroyed. This is an advanced resource , and has special caveats to be
aware of when using it. Please read this document in its entirety before
using this resource. The @aws_default_network_acl@ behaves differently from
normal resources, in that Terraform does not create this resource, but
instead attempts to "adopt" it into management. We can do this because each
VPC created has a Default Network ACL that cannot be destroyed, and is
created with a known set of default rules. When Terraform first adopts the
Default Network ACL, it immediately removes all rules in the ACL . It then
proceeds to create any rules specified in the configuration. This step is
required so that only the rules specified in the configuration are created.
This resource treats its inline rules as absolute; only the rules defined
inline are created, and any additions/removals external to this resource
will result in diffs being shown. For these reasons, this resource is
incompatible with the @aws_network_acl_rule@ resource. For more information
about Network ACLs, see the AWS Documentation on
<http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_ACLs.html> .
-}
data DefaultNetworkAclResource = DefaultNetworkAclResource {
      _default_network_acl_id :: !(TF.Argument Text)
    {- ^ (Required) The Network ACL ID to manage. This attribute is exported from @aws_vpc@ , or manually found via the AWS Console. -}
    , _egress                 :: !(TF.Argument Text)
    {- ^ (Optional) Specifies an egress rule. Parameters defined below. -}
    , _ingress                :: !(TF.Argument Text)
    {- ^ (Optional) Specifies an ingress rule. Parameters defined below. -}
    , _subnet_ids             :: !(TF.Argument Text)
    {- ^ (Optional) A list of Subnet IDs to apply the ACL to. See the notes below on managing Subnets in the Default Network ACL -}
    , _tags                   :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    } deriving (Show, Eq)

instance TF.ToHCL DefaultNetworkAclResource where
    toHCL DefaultNetworkAclResource{..} = TF.block $ catMaybes
        [ TF.assign "default_network_acl_id" <$> TF.argument _default_network_acl_id
        , TF.assign "egress" <$> TF.argument _egress
        , TF.assign "ingress" <$> TF.argument _ingress
        , TF.assign "subnet_ids" <$> TF.argument _subnet_ids
        , TF.assign "tags" <$> TF.argument _tags
        ]

instance HasDefaultNetworkAclId DefaultNetworkAclResource (TF.Argument Text) where
    defaultNetworkAclId f s@DefaultNetworkAclResource{..} =
        (\a -> s { _default_network_acl_id = a } :: DefaultNetworkAclResource)
             <$> f _default_network_acl_id

instance HasEgress DefaultNetworkAclResource (TF.Argument Text) where
    egress f s@DefaultNetworkAclResource{..} =
        (\a -> s { _egress = a } :: DefaultNetworkAclResource)
             <$> f _egress

instance HasIngress DefaultNetworkAclResource (TF.Argument Text) where
    ingress f s@DefaultNetworkAclResource{..} =
        (\a -> s { _ingress = a } :: DefaultNetworkAclResource)
             <$> f _ingress

instance HasSubnetIds DefaultNetworkAclResource (TF.Argument Text) where
    subnetIds f s@DefaultNetworkAclResource{..} =
        (\a -> s { _subnet_ids = a } :: DefaultNetworkAclResource)
             <$> f _subnet_ids

instance HasTags DefaultNetworkAclResource (TF.Argument TF.Tags) where
    tags f s@DefaultNetworkAclResource{..} =
        (\a -> s { _tags = a } :: DefaultNetworkAclResource)
             <$> f _tags

defaultNetworkAclResource :: TF.Resource TF.AWS DefaultNetworkAclResource
defaultNetworkAclResource =
    TF.newResource "aws_default_network_acl" $
        DefaultNetworkAclResource {
            _default_network_acl_id = TF.Nil
            , _egress = TF.Nil
            , _ingress = TF.Nil
            , _subnet_ids = TF.Nil
            , _tags = TF.Nil
            }

{- | The @aws_default_route_table@ AWS resource.

Provides a resource to manage a Default VPC Routing Table. Each VPC created
in AWS comes with a Default Route Table that can be managed, but not
destroyed. This is an advanced resource , and has special caveats to be
aware of when using it. Please read this document in its entirety before
using this resource. It is recommended you do not use both
@aws_default_route_table@ to manage the default route table and use the
@aws_main_route_table_association@ , due to possible conflict in routes. The
@aws_default_route_table@ behaves differently from normal resources, in that
Terraform does not create this resource, but instead attempts to "adopt" it
into management. We can do this because each VPC created has a Default Route
Table that cannot be destroyed, and is created with a single route. When
Terraform first adopts the Default Route Table, it immediately removes all
defined routes . It then proceeds to create any routes specified in the
configuration. This step is required so that only the routes specified in
the configuration present in the Default Route Table. For more information
about Route Tables, see the AWS Documentation on
<http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html#Route_Replacing_Main_Table>
. For more information about managing normal Route Tables in Terraform, see
our documentation on </docs/providers/aws/r/route_table.html> . ~> NOTE on
Route Tables and Routes: Terraform currently provides both a standalone
<route.html> and a Route Table resource with routes defined in-line. At this
time you cannot use a Route Table with in-line routes in conjunction with
any Route resources. Doing so will cause a conflict of rule settings and
will overwrite routes.
-}
data DefaultRouteTableResource = DefaultRouteTableResource {
      _default_route_table_id :: !(TF.Argument Text)
    {- ^ (Required) The ID of the Default Routing Table. -}
    , _propagating_vgws       :: !(TF.Argument Text)
    {- ^ (Optional) A list of virtual gateways for propagation. -}
    , _route                  :: !(TF.Argument Text)
    {- ^ (Optional) A list of route objects. Their keys are documented below. -}
    , _tags                   :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _computed_id            :: !(TF.Attribute Text)
    {- ^ - The ID of the routing table -}
    } deriving (Show, Eq)

instance TF.ToHCL DefaultRouteTableResource where
    toHCL DefaultRouteTableResource{..} = TF.block $ catMaybes
        [ TF.assign "default_route_table_id" <$> TF.argument _default_route_table_id
        , TF.assign "propagating_vgws" <$> TF.argument _propagating_vgws
        , TF.assign "route" <$> TF.argument _route
        , TF.assign "tags" <$> TF.argument _tags
        ]

instance HasDefaultRouteTableId DefaultRouteTableResource (TF.Argument Text) where
    defaultRouteTableId f s@DefaultRouteTableResource{..} =
        (\a -> s { _default_route_table_id = a } :: DefaultRouteTableResource)
             <$> f _default_route_table_id

instance HasPropagatingVgws DefaultRouteTableResource (TF.Argument Text) where
    propagatingVgws f s@DefaultRouteTableResource{..} =
        (\a -> s { _propagating_vgws = a } :: DefaultRouteTableResource)
             <$> f _propagating_vgws

instance HasRoute DefaultRouteTableResource (TF.Argument Text) where
    route f s@DefaultRouteTableResource{..} =
        (\a -> s { _route = a } :: DefaultRouteTableResource)
             <$> f _route

instance HasTags DefaultRouteTableResource (TF.Argument TF.Tags) where
    tags f s@DefaultRouteTableResource{..} =
        (\a -> s { _tags = a } :: DefaultRouteTableResource)
             <$> f _tags

instance HasComputedId DefaultRouteTableResource (TF.Attribute Text) where
    computedId f s@DefaultRouteTableResource{..} =
        (\a -> s { _computed_id = a } :: DefaultRouteTableResource)
             <$> f _computed_id

defaultRouteTableResource :: TF.Resource TF.AWS DefaultRouteTableResource
defaultRouteTableResource =
    TF.newResource "aws_default_route_table" $
        DefaultRouteTableResource {
            _default_route_table_id = TF.Nil
            , _propagating_vgws = TF.Nil
            , _route = TF.Nil
            , _tags = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_default_security_group@ AWS resource.

Provides a resource to manage the default AWS Security Group. For EC2
Classic accounts, each region comes with a Default Security Group.
Additionally, each VPC created in AWS comes with a Default Security Group
that can be managed, but not destroyed. This is an advanced resource , and
has special caveats to be aware of when using it. Please read this document
in its entirety before using this resource. The @aws_default_security_group@
behaves differently from normal resources, in that Terraform does not create
this resource, but instead "adopts" it into management. We can do this
because these default security groups cannot be destroyed, and are created
with a known set of default ingress/egress rules. When Terraform first
adopts the Default Security Group, it immediately removes all ingress and
egress rules in the Security Group . It then proceeds to create any rules
specified in the configuration. This step is required so that only the rules
specified in the configuration are created. This resource treats it's inline
rules as absolute; only the rules defined inline are created, and any
additions/removals external to this resource will result in diff shown. For
these reasons, this resource is incompatible with the
@aws_security_group_rule@ resource. For more information about Default
Security Groups, see the AWS Documentation on
<http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html#default-security-group>
.
-}
data DefaultSecurityGroupResource = DefaultSecurityGroupResource {
      _egress  :: !(TF.Argument Text)
    {- ^ (Optional, VPC only) Can be specified multiple times for each egress rule. Each egress block supports fields documented below. -}
    , _ingress :: !(TF.Argument Text)
    {- ^ (Optional) Can be specified multiple times for each ingress rule. Each ingress block supports fields documented below. -}
    , _tags    :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _vpc_id  :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) The VPC ID. Note that changing the @vpc_id@ will not restore any default security group rules that were modified, added, or removed. It will be left in it's current state -}
    } deriving (Show, Eq)

instance TF.ToHCL DefaultSecurityGroupResource where
    toHCL DefaultSecurityGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "egress" <$> TF.argument _egress
        , TF.assign "ingress" <$> TF.argument _ingress
        , TF.assign "tags" <$> TF.argument _tags
        , TF.assign "vpc_id" <$> TF.argument _vpc_id
        ]

instance HasEgress DefaultSecurityGroupResource (TF.Argument Text) where
    egress f s@DefaultSecurityGroupResource{..} =
        (\a -> s { _egress = a } :: DefaultSecurityGroupResource)
             <$> f _egress

instance HasIngress DefaultSecurityGroupResource (TF.Argument Text) where
    ingress f s@DefaultSecurityGroupResource{..} =
        (\a -> s { _ingress = a } :: DefaultSecurityGroupResource)
             <$> f _ingress

instance HasTags DefaultSecurityGroupResource (TF.Argument TF.Tags) where
    tags f s@DefaultSecurityGroupResource{..} =
        (\a -> s { _tags = a } :: DefaultSecurityGroupResource)
             <$> f _tags

instance HasVpcId DefaultSecurityGroupResource (TF.Argument Text) where
    vpcId f s@DefaultSecurityGroupResource{..} =
        (\a -> s { _vpc_id = a } :: DefaultSecurityGroupResource)
             <$> f _vpc_id

defaultSecurityGroupResource :: TF.Resource TF.AWS DefaultSecurityGroupResource
defaultSecurityGroupResource =
    TF.newResource "aws_default_security_group" $
        DefaultSecurityGroupResource {
            _egress = TF.Nil
            , _ingress = TF.Nil
            , _tags = TF.Nil
            , _vpc_id = TF.Nil
            }

{- | The @aws_default_subnet@ AWS resource.

Provides a resource to manage a
<http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/default-vpc.html#default-vpc-basics>
in the current region. The @aws_default_subnet@ behaves differently from
normal resources, in that Terraform does not create this resource, but
instead "adopts" it into management.
-}
data DefaultSubnetResource = DefaultSubnetResource {
      _tags :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    } deriving (Show, Eq)

instance TF.ToHCL DefaultSubnetResource where
    toHCL DefaultSubnetResource{..} = TF.block $ catMaybes
        [ TF.assign "tags" <$> TF.argument _tags
        ]

instance HasTags DefaultSubnetResource (TF.Argument TF.Tags) where
    tags f s@DefaultSubnetResource{..} =
        (\a -> s { _tags = a } :: DefaultSubnetResource)
             <$> f _tags

defaultSubnetResource :: TF.Resource TF.AWS DefaultSubnetResource
defaultSubnetResource =
    TF.newResource "aws_default_subnet" $
        DefaultSubnetResource {
            _tags = TF.Nil
            }

{- | The @aws_default_vpc_dhcp_options@ AWS resource.

Provides a resource to manage the
<http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_DHCP_Options.html#AmazonDNS>
in the current region. Each AWS region comes with a default set of DHCP
options. This is an advanced resource , and has special caveats to be aware
of when using it. Please read this document in its entirety before using
this resource. The @aws_default_vpc_dhcp_options@ behaves differently from
normal resources, in that Terraform does not create this resource, but
instead "adopts" it into management.
-}
data DefaultVpcDhcpOptionsResource = DefaultVpcDhcpOptionsResource {
      _netbios_name_servers :: !(TF.Argument Text)
    {- ^ (Optional) List of NETBIOS name servers. -}
    , _netbios_node_type    :: !(TF.Argument Text)
    {- ^ (Optional) The NetBIOS node type (1, 2, 4, or 8). AWS recommends to specify 2 since broadcast and multicast are not supported in their network. For more information about these node types, see <http://www.ietf.org/rfc/rfc2132.txt> . -}
    , _tags                 :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    } deriving (Show, Eq)

instance TF.ToHCL DefaultVpcDhcpOptionsResource where
    toHCL DefaultVpcDhcpOptionsResource{..} = TF.block $ catMaybes
        [ TF.assign "netbios_name_servers" <$> TF.argument _netbios_name_servers
        , TF.assign "netbios_node_type" <$> TF.argument _netbios_node_type
        , TF.assign "tags" <$> TF.argument _tags
        ]

instance HasNetbiosNameServers DefaultVpcDhcpOptionsResource (TF.Argument Text) where
    netbiosNameServers f s@DefaultVpcDhcpOptionsResource{..} =
        (\a -> s { _netbios_name_servers = a } :: DefaultVpcDhcpOptionsResource)
             <$> f _netbios_name_servers

instance HasNetbiosNodeType DefaultVpcDhcpOptionsResource (TF.Argument Text) where
    netbiosNodeType f s@DefaultVpcDhcpOptionsResource{..} =
        (\a -> s { _netbios_node_type = a } :: DefaultVpcDhcpOptionsResource)
             <$> f _netbios_node_type

instance HasTags DefaultVpcDhcpOptionsResource (TF.Argument TF.Tags) where
    tags f s@DefaultVpcDhcpOptionsResource{..} =
        (\a -> s { _tags = a } :: DefaultVpcDhcpOptionsResource)
             <$> f _tags

defaultVpcDhcpOptionsResource :: TF.Resource TF.AWS DefaultVpcDhcpOptionsResource
defaultVpcDhcpOptionsResource =
    TF.newResource "aws_default_vpc_dhcp_options" $
        DefaultVpcDhcpOptionsResource {
            _netbios_name_servers = TF.Nil
            , _netbios_node_type = TF.Nil
            , _tags = TF.Nil
            }

{- | The @aws_default_vpc@ AWS resource.

Provides a resource to manage the
<http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/default-vpc.html> in
the current region. For AWS accounts created after 2013-12-04, each region
comes with a Default VPC. This is an advanced resource , and has special
caveats to be aware of when using it. Please read this document in its
entirety before using this resource. The @aws_default_vpc@ behaves
differently from normal resources, in that Terraform does not create this
resource, but instead "adopts" it into management.
-}
data DefaultVpcResource = DefaultVpcResource {
      _enable_classiclink   :: !(TF.Argument TF.Bool)
    {- ^ (Optional) A boolean flag to enable/disable ClassicLink for the VPC. Only valid in regions and accounts that support EC2 Classic. See the <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html> for more information. Defaults false. -}
    , _enable_dns_hostnames :: !(TF.Argument TF.Bool)
    {- ^ (Optional) A boolean flag to enable/disable DNS hostnames in the VPC. Defaults false. -}
    , _enable_dns_support   :: !(TF.Argument TF.Bool)
    {- ^ (Optional) A boolean flag to enable/disable DNS support in the VPC. Defaults true. -}
    , _tags                 :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    } deriving (Show, Eq)

instance TF.ToHCL DefaultVpcResource where
    toHCL DefaultVpcResource{..} = TF.block $ catMaybes
        [ TF.assign "enable_classiclink" <$> TF.argument _enable_classiclink
        , TF.assign "enable_dns_hostnames" <$> TF.argument _enable_dns_hostnames
        , TF.assign "enable_dns_support" <$> TF.argument _enable_dns_support
        , TF.assign "tags" <$> TF.argument _tags
        ]

instance HasEnableClassiclink DefaultVpcResource (TF.Argument TF.Bool) where
    enableClassiclink f s@DefaultVpcResource{..} =
        (\a -> s { _enable_classiclink = a } :: DefaultVpcResource)
             <$> f _enable_classiclink

instance HasEnableDnsHostnames DefaultVpcResource (TF.Argument TF.Bool) where
    enableDnsHostnames f s@DefaultVpcResource{..} =
        (\a -> s { _enable_dns_hostnames = a } :: DefaultVpcResource)
             <$> f _enable_dns_hostnames

instance HasEnableDnsSupport DefaultVpcResource (TF.Argument TF.Bool) where
    enableDnsSupport f s@DefaultVpcResource{..} =
        (\a -> s { _enable_dns_support = a } :: DefaultVpcResource)
             <$> f _enable_dns_support

instance HasTags DefaultVpcResource (TF.Argument TF.Tags) where
    tags f s@DefaultVpcResource{..} =
        (\a -> s { _tags = a } :: DefaultVpcResource)
             <$> f _tags

defaultVpcResource :: TF.Resource TF.AWS DefaultVpcResource
defaultVpcResource =
    TF.newResource "aws_default_vpc" $
        DefaultVpcResource {
            _enable_classiclink = TF.Nil
            , _enable_dns_hostnames = TF.Nil
            , _enable_dns_support = TF.Nil
            , _tags = TF.Nil
            }

{- | The @aws_devicefarm_project@ AWS resource.

Provides a resource to manage AWS Device Farm Projects. Please keep in mind
that this feature is only supported on the "us-west-2" region. This resource
will error if you try to create a project in another region. For more
information about Device Farm Projects, see the AWS Documentation on
<http://docs.aws.amazon.com/devicefarm/latest/APIReference/API_GetProject.html>
.
-}
data DevicefarmProjectResource = DevicefarmProjectResource {
      _name         :: !(TF.Argument Text)
    {- ^ (Required) The name of the project -}
    , _computed_arn :: !(TF.Attribute Text)
    {- ^ - The Amazon Resource Name of this project -}
    } deriving (Show, Eq)

instance TF.ToHCL DevicefarmProjectResource where
    toHCL DevicefarmProjectResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.argument _name
        ]

instance HasName DevicefarmProjectResource (TF.Argument Text) where
    name f s@DevicefarmProjectResource{..} =
        (\a -> s { _name = a } :: DevicefarmProjectResource)
             <$> f _name

instance HasComputedArn DevicefarmProjectResource (TF.Attribute Text) where
    computedArn f s@DevicefarmProjectResource{..} =
        (\a -> s { _computed_arn = a } :: DevicefarmProjectResource)
             <$> f _computed_arn

devicefarmProjectResource :: TF.Resource TF.AWS DevicefarmProjectResource
devicefarmProjectResource =
    TF.newResource "aws_devicefarm_project" $
        DevicefarmProjectResource {
            _name = TF.Nil
            , _computed_arn = TF.Compute "arn"
            }

{- | The @aws_directory_service_directory@ AWS resource.

Provides a Simple or Managed Microsoft directory in AWS Directory Service.
~> Note: All arguments including the password and customer username will be
stored in the raw state as plain-text. </docs/state/sensitive-data.html> .
-}
data DirectoryServiceDirectoryResource = DirectoryServiceDirectoryResource {
      _alias                      :: !(TF.Argument Text)
    {- ^ (Optional) The alias for the directory (must be unique amongst all aliases in AWS). Required for @enable_sso@ . -}
    , _connect_settings           :: !(TF.Argument Text)
    {- ^ (Required for @ADConnector@ ) Connector related information about the directory. Fields documented below. -}
    , _description                :: !(TF.Argument Text)
    {- ^ (Optional) A textual description for the directory. -}
    , _enable_sso                 :: !(TF.Argument TF.Bool)
    {- ^ (Optional) Whether to enable single-sign on for the directory. Requires @alias@ . Defaults to @false@ . -}
    , _name                       :: !(TF.Argument Text)
    {- ^ (Required) The fully qualified name for the directory, such as @corp.example.com@ -}
    , _password                   :: !(TF.Argument Text)
    {- ^ (Required) The password for the directory administrator or connector user. -}
    , _short_name                 :: !(TF.Argument Text)
    {- ^ (Optional) The short name of the directory, such as @CORP@ . -}
    , _size                       :: !(TF.Argument Text)
    {- ^ (Required for @SimpleAD@ and @ADConnector@ ) The size of the directory ( @Small@ or @Large@ are accepted values). -}
    , _tags                       :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _type'                      :: !(TF.Argument Text)
    {- ^ (Optional) - The directory type ( @SimpleAD@ or @MicrosoftAD@ are accepted values). Defaults to @SimpleAD@ . -}
    , _vpc_settings               :: !(TF.Argument Text)
    {- ^ (Required for @SimpleAD@ and @MicrosoftAD@ ) VPC related information about the directory. Fields documented below. -}
    , _computed_access_url        :: !(TF.Attribute Text)
    {- ^ - The access URL for the directory, such as @http://alias.awsapps.com@ . -}
    , _computed_dns_ip_addresses  :: !(TF.Attribute Text)
    {- ^ - A list of IP addresses of the DNS servers for the directory or connector. -}
    , _computed_id                :: !(TF.Attribute Text)
    {- ^ - The directory identifier. -}
    , _computed_security_group_id :: !(TF.Attribute Text)
    {- ^ - The ID of the security group created by the directory ( @SimpleAD@ or @MicrosoftAD@ only). -}
    } deriving (Show, Eq)

instance TF.ToHCL DirectoryServiceDirectoryResource where
    toHCL DirectoryServiceDirectoryResource{..} = TF.block $ catMaybes
        [ TF.assign "alias" <$> TF.argument _alias
        , TF.assign "connect_settings" <$> TF.argument _connect_settings
        , TF.assign "description" <$> TF.argument _description
        , TF.assign "enable_sso" <$> TF.argument _enable_sso
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "password" <$> TF.argument _password
        , TF.assign "short_name" <$> TF.argument _short_name
        , TF.assign "size" <$> TF.argument _size
        , TF.assign "tags" <$> TF.argument _tags
        , TF.assign "type" <$> TF.argument _type'
        , TF.assign "vpc_settings" <$> TF.argument _vpc_settings
        ]

instance HasAlias DirectoryServiceDirectoryResource (TF.Argument Text) where
    alias f s@DirectoryServiceDirectoryResource{..} =
        (\a -> s { _alias = a } :: DirectoryServiceDirectoryResource)
             <$> f _alias

instance HasConnectSettings DirectoryServiceDirectoryResource (TF.Argument Text) where
    connectSettings f s@DirectoryServiceDirectoryResource{..} =
        (\a -> s { _connect_settings = a } :: DirectoryServiceDirectoryResource)
             <$> f _connect_settings

instance HasDescription DirectoryServiceDirectoryResource (TF.Argument Text) where
    description f s@DirectoryServiceDirectoryResource{..} =
        (\a -> s { _description = a } :: DirectoryServiceDirectoryResource)
             <$> f _description

instance HasEnableSso DirectoryServiceDirectoryResource (TF.Argument TF.Bool) where
    enableSso f s@DirectoryServiceDirectoryResource{..} =
        (\a -> s { _enable_sso = a } :: DirectoryServiceDirectoryResource)
             <$> f _enable_sso

instance HasName DirectoryServiceDirectoryResource (TF.Argument Text) where
    name f s@DirectoryServiceDirectoryResource{..} =
        (\a -> s { _name = a } :: DirectoryServiceDirectoryResource)
             <$> f _name

instance HasPassword DirectoryServiceDirectoryResource (TF.Argument Text) where
    password f s@DirectoryServiceDirectoryResource{..} =
        (\a -> s { _password = a } :: DirectoryServiceDirectoryResource)
             <$> f _password

instance HasShortName DirectoryServiceDirectoryResource (TF.Argument Text) where
    shortName f s@DirectoryServiceDirectoryResource{..} =
        (\a -> s { _short_name = a } :: DirectoryServiceDirectoryResource)
             <$> f _short_name

instance HasSize DirectoryServiceDirectoryResource (TF.Argument Text) where
    size f s@DirectoryServiceDirectoryResource{..} =
        (\a -> s { _size = a } :: DirectoryServiceDirectoryResource)
             <$> f _size

instance HasTags DirectoryServiceDirectoryResource (TF.Argument TF.Tags) where
    tags f s@DirectoryServiceDirectoryResource{..} =
        (\a -> s { _tags = a } :: DirectoryServiceDirectoryResource)
             <$> f _tags

instance HasType' DirectoryServiceDirectoryResource (TF.Argument Text) where
    type' f s@DirectoryServiceDirectoryResource{..} =
        (\a -> s { _type' = a } :: DirectoryServiceDirectoryResource)
             <$> f _type'

instance HasVpcSettings DirectoryServiceDirectoryResource (TF.Argument Text) where
    vpcSettings f s@DirectoryServiceDirectoryResource{..} =
        (\a -> s { _vpc_settings = a } :: DirectoryServiceDirectoryResource)
             <$> f _vpc_settings

instance HasComputedAccessUrl DirectoryServiceDirectoryResource (TF.Attribute Text) where
    computedAccessUrl f s@DirectoryServiceDirectoryResource{..} =
        (\a -> s { _computed_access_url = a } :: DirectoryServiceDirectoryResource)
             <$> f _computed_access_url

instance HasComputedDnsIpAddresses DirectoryServiceDirectoryResource (TF.Attribute Text) where
    computedDnsIpAddresses f s@DirectoryServiceDirectoryResource{..} =
        (\a -> s { _computed_dns_ip_addresses = a } :: DirectoryServiceDirectoryResource)
             <$> f _computed_dns_ip_addresses

instance HasComputedId DirectoryServiceDirectoryResource (TF.Attribute Text) where
    computedId f s@DirectoryServiceDirectoryResource{..} =
        (\a -> s { _computed_id = a } :: DirectoryServiceDirectoryResource)
             <$> f _computed_id

instance HasComputedSecurityGroupId DirectoryServiceDirectoryResource (TF.Attribute Text) where
    computedSecurityGroupId f s@DirectoryServiceDirectoryResource{..} =
        (\a -> s { _computed_security_group_id = a } :: DirectoryServiceDirectoryResource)
             <$> f _computed_security_group_id

directoryServiceDirectoryResource :: TF.Resource TF.AWS DirectoryServiceDirectoryResource
directoryServiceDirectoryResource =
    TF.newResource "aws_directory_service_directory" $
        DirectoryServiceDirectoryResource {
            _alias = TF.Nil
            , _connect_settings = TF.Nil
            , _description = TF.Nil
            , _enable_sso = TF.Nil
            , _name = TF.Nil
            , _password = TF.Nil
            , _short_name = TF.Nil
            , _size = TF.Nil
            , _tags = TF.Nil
            , _type' = TF.Nil
            , _vpc_settings = TF.Nil
            , _computed_access_url = TF.Compute "access_url"
            , _computed_dns_ip_addresses = TF.Compute "dns_ip_addresses"
            , _computed_id = TF.Compute "id"
            , _computed_security_group_id = TF.Compute "security_group_id"
            }

{- | The @aws_dms_certificate@ AWS resource.

Provides a DMS (Data Migration Service) certificate resource. DMS
certificates can be created, deleted, and imported. ~> Note: All arguments
including the PEM encoded certificate will be stored in the raw state as
plain-text. </docs/state/sensitive-data.html> .
-}
data DmsCertificateResource = DmsCertificateResource {
      _certificate_id           :: !(TF.Argument Text)
    {- ^ (Required) The certificate identifier. -}
    , _certificate_pem          :: !(TF.Argument Text)
    {- ^ (Optional) The contents of the .pem X.509 certificate file for the certificate. Either @certificate_pem@ or @certificate_wallet@ must be set. -}
    , _certificate_wallet       :: !(TF.Argument Text)
    {- ^ (Optional) The contents of the Oracle Wallet certificate for use with SSL. Either @certificate_pem@ or @certificate_wallet@ must be set. -}
    , _computed_certificate_arn :: !(TF.Attribute Text)
    {- ^ - The Amazon Resource Name (ARN) for the certificate. -}
    } deriving (Show, Eq)

instance TF.ToHCL DmsCertificateResource where
    toHCL DmsCertificateResource{..} = TF.block $ catMaybes
        [ TF.assign "certificate_id" <$> TF.argument _certificate_id
        , TF.assign "certificate_pem" <$> TF.argument _certificate_pem
        , TF.assign "certificate_wallet" <$> TF.argument _certificate_wallet
        ]

instance HasCertificateId DmsCertificateResource (TF.Argument Text) where
    certificateId f s@DmsCertificateResource{..} =
        (\a -> s { _certificate_id = a } :: DmsCertificateResource)
             <$> f _certificate_id

instance HasCertificatePem DmsCertificateResource (TF.Argument Text) where
    certificatePem f s@DmsCertificateResource{..} =
        (\a -> s { _certificate_pem = a } :: DmsCertificateResource)
             <$> f _certificate_pem

instance HasCertificateWallet DmsCertificateResource (TF.Argument Text) where
    certificateWallet f s@DmsCertificateResource{..} =
        (\a -> s { _certificate_wallet = a } :: DmsCertificateResource)
             <$> f _certificate_wallet

instance HasComputedCertificateArn DmsCertificateResource (TF.Attribute Text) where
    computedCertificateArn f s@DmsCertificateResource{..} =
        (\a -> s { _computed_certificate_arn = a } :: DmsCertificateResource)
             <$> f _computed_certificate_arn

dmsCertificateResource :: TF.Resource TF.AWS DmsCertificateResource
dmsCertificateResource =
    TF.newResource "aws_dms_certificate" $
        DmsCertificateResource {
            _certificate_id = TF.Nil
            , _certificate_pem = TF.Nil
            , _certificate_wallet = TF.Nil
            , _computed_certificate_arn = TF.Compute "certificate_arn"
            }

{- | The @aws_dms_endpoint@ AWS resource.

Provides a DMS (Data Migration Service) endpoint resource. DMS endpoints can
be created, updated, deleted, and imported. ~> Note: All arguments including
the password will be stored in the raw state as plain-text.
</docs/state/sensitive-data.html> .
-}
data DmsEndpointResource = DmsEndpointResource {
      _certificate_arn             :: !(TF.Argument Text)
    {- ^ (Optional, Default: empty string) The Amazon Resource Name (ARN) for the certificate. -}
    , _database_name               :: !(TF.Argument Text)
    {- ^ (Optional) The name of the endpoint database. -}
    , _endpoint_id                 :: !(TF.Argument Text)
    {- ^ (Required) The database endpoint identifier. -}
    , _endpoint_type               :: !(TF.Argument Text)
    {- ^ (Required) The type of endpoint. Can be one of @source | target@ . -}
    , _engine_name                 :: !(TF.Argument Text)
    {- ^ (Required) The type of engine for the endpoint. Can be one of @mysql | oracle | postgres | mariadb | aurora | redshift | sybase | sqlserver | dynamodb@ . -}
    , _extra_connection_attributes :: !(TF.Argument Text)
    {- ^ (Optional) Additional attributes associated with the connection. For available attributes see <http://docs.aws.amazon.com/dms/latest/userguide/CHAP_Introduction.ConnectionAttributes.html> . -}
    , _kms_key_arn                 :: !(TF.Argument Text)
    {- ^ (Optional) The Amazon Resource Name (ARN) for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for @kms_key_arn@ , then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region. -}
    , _password                    :: !(TF.Argument Text)
    {- ^ (Optional) The password to be used to login to the endpoint database. -}
    , _port                        :: !(TF.Argument Text)
    {- ^ (Optional) The port used by the endpoint database. -}
    , _server_name                 :: !(TF.Argument Text)
    {- ^ (Optional) The host name of the server. -}
    , _service_access_role         :: !(TF.Argument Text)
    {- ^ (Optional) The Amazon Resource Name (ARN) used by the service access IAM role for dynamodb endpoints. -}
    , _ssl_mode                    :: !(TF.Argument Text)
    {- ^ (Optional, Default: none) The SSL mode to use for the connection. Can be one of @none | require | verify-ca | verify-full@ -}
    , _tags                        :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _username                    :: !(TF.Argument Text)
    {- ^ (Optional) The user name to be used to login to the endpoint database. -}
    , _computed_endpoint_arn       :: !(TF.Attribute Text)
    {- ^ - The Amazon Resource Name (ARN) for the endpoint. -}
    } deriving (Show, Eq)

instance TF.ToHCL DmsEndpointResource where
    toHCL DmsEndpointResource{..} = TF.block $ catMaybes
        [ TF.assign "certificate_arn" <$> TF.argument _certificate_arn
        , TF.assign "database_name" <$> TF.argument _database_name
        , TF.assign "endpoint_id" <$> TF.argument _endpoint_id
        , TF.assign "endpoint_type" <$> TF.argument _endpoint_type
        , TF.assign "engine_name" <$> TF.argument _engine_name
        , TF.assign "extra_connection_attributes" <$> TF.argument _extra_connection_attributes
        , TF.assign "kms_key_arn" <$> TF.argument _kms_key_arn
        , TF.assign "password" <$> TF.argument _password
        , TF.assign "port" <$> TF.argument _port
        , TF.assign "server_name" <$> TF.argument _server_name
        , TF.assign "service_access_role" <$> TF.argument _service_access_role
        , TF.assign "ssl_mode" <$> TF.argument _ssl_mode
        , TF.assign "tags" <$> TF.argument _tags
        , TF.assign "username" <$> TF.argument _username
        ]

instance HasCertificateArn DmsEndpointResource (TF.Argument Text) where
    certificateArn f s@DmsEndpointResource{..} =
        (\a -> s { _certificate_arn = a } :: DmsEndpointResource)
             <$> f _certificate_arn

instance HasDatabaseName DmsEndpointResource (TF.Argument Text) where
    databaseName f s@DmsEndpointResource{..} =
        (\a -> s { _database_name = a } :: DmsEndpointResource)
             <$> f _database_name

instance HasEndpointId DmsEndpointResource (TF.Argument Text) where
    endpointId f s@DmsEndpointResource{..} =
        (\a -> s { _endpoint_id = a } :: DmsEndpointResource)
             <$> f _endpoint_id

instance HasEndpointType DmsEndpointResource (TF.Argument Text) where
    endpointType f s@DmsEndpointResource{..} =
        (\a -> s { _endpoint_type = a } :: DmsEndpointResource)
             <$> f _endpoint_type

instance HasEngineName DmsEndpointResource (TF.Argument Text) where
    engineName f s@DmsEndpointResource{..} =
        (\a -> s { _engine_name = a } :: DmsEndpointResource)
             <$> f _engine_name

instance HasExtraConnectionAttributes DmsEndpointResource (TF.Argument Text) where
    extraConnectionAttributes f s@DmsEndpointResource{..} =
        (\a -> s { _extra_connection_attributes = a } :: DmsEndpointResource)
             <$> f _extra_connection_attributes

instance HasKmsKeyArn DmsEndpointResource (TF.Argument Text) where
    kmsKeyArn f s@DmsEndpointResource{..} =
        (\a -> s { _kms_key_arn = a } :: DmsEndpointResource)
             <$> f _kms_key_arn

instance HasPassword DmsEndpointResource (TF.Argument Text) where
    password f s@DmsEndpointResource{..} =
        (\a -> s { _password = a } :: DmsEndpointResource)
             <$> f _password

instance HasPort DmsEndpointResource (TF.Argument Text) where
    port f s@DmsEndpointResource{..} =
        (\a -> s { _port = a } :: DmsEndpointResource)
             <$> f _port

instance HasServerName DmsEndpointResource (TF.Argument Text) where
    serverName f s@DmsEndpointResource{..} =
        (\a -> s { _server_name = a } :: DmsEndpointResource)
             <$> f _server_name

instance HasServiceAccessRole DmsEndpointResource (TF.Argument Text) where
    serviceAccessRole f s@DmsEndpointResource{..} =
        (\a -> s { _service_access_role = a } :: DmsEndpointResource)
             <$> f _service_access_role

instance HasSslMode DmsEndpointResource (TF.Argument Text) where
    sslMode f s@DmsEndpointResource{..} =
        (\a -> s { _ssl_mode = a } :: DmsEndpointResource)
             <$> f _ssl_mode

instance HasTags DmsEndpointResource (TF.Argument TF.Tags) where
    tags f s@DmsEndpointResource{..} =
        (\a -> s { _tags = a } :: DmsEndpointResource)
             <$> f _tags

instance HasUsername DmsEndpointResource (TF.Argument Text) where
    username f s@DmsEndpointResource{..} =
        (\a -> s { _username = a } :: DmsEndpointResource)
             <$> f _username

instance HasComputedEndpointArn DmsEndpointResource (TF.Attribute Text) where
    computedEndpointArn f s@DmsEndpointResource{..} =
        (\a -> s { _computed_endpoint_arn = a } :: DmsEndpointResource)
             <$> f _computed_endpoint_arn

dmsEndpointResource :: TF.Resource TF.AWS DmsEndpointResource
dmsEndpointResource =
    TF.newResource "aws_dms_endpoint" $
        DmsEndpointResource {
            _certificate_arn = TF.Nil
            , _database_name = TF.Nil
            , _endpoint_id = TF.Nil
            , _endpoint_type = TF.Nil
            , _engine_name = TF.Nil
            , _extra_connection_attributes = TF.Nil
            , _kms_key_arn = TF.Nil
            , _password = TF.Nil
            , _port = TF.Nil
            , _server_name = TF.Nil
            , _service_access_role = TF.Nil
            , _ssl_mode = TF.Nil
            , _tags = TF.Nil
            , _username = TF.Nil
            , _computed_endpoint_arn = TF.Compute "endpoint_arn"
            }

{- | The @aws_dms_replication_instance@ AWS resource.

Provides a DMS (Data Migration Service) replication instance resource. DMS
replication instances can be created, updated, deleted, and imported.
-}
data DmsReplicationInstanceResource = DmsReplicationInstanceResource {
      _allocated_storage                         :: !(TF.Argument Text)
    {- ^ (Optional, Default: 50, Min: 5, Max: 6144) The amount of storage (in gigabytes) to be initially allocated for the replication instance. -}
    , _apply_immediately                         :: !(TF.Argument Text)
    {- ^ (Optional, Default: false) Indicates whether the changes should be applied immediately or during the next maintenance window. Only used when updating an existing resource. -}
    , _auto_minor_version_upgrade                :: !(TF.Argument Text)
    {- ^ (Optional, Default: false) Indicates that minor engine upgrades will be applied automatically to the replication instance during the maintenance window. -}
    , _availability_zone                         :: !(TF.Argument Text)
    {- ^ (Optional) The EC2 Availability Zone that the replication instance will be created in. -}
    , _engine_version                            :: !(TF.Argument Text)
    {- ^ (Optional) The engine version number of the replication instance. -}
    , _kms_key_arn                               :: !(TF.Argument Text)
    {- ^ (Optional) The Amazon Resource Name (ARN) for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for @kms_key_arn@ , then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region. -}
    , _multi_az                                  :: !(TF.Argument Text)
    {- ^ (Optional) Specifies if the replication instance is a multi-az deployment. You cannot set the @availability_zone@ parameter if the @multi_az@ parameter is set to @true@ . -}
    , _preferred_maintenance_window              :: !(TF.Argument Text)
    {- ^ (Optional) The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC). -}
    , _publicly_accessible                       :: !(TF.Argument Text)
    {- ^ (Optional, Default: false) Specifies the accessibility options for the replication instance. A value of true represents an instance with a public IP address. A value of false represents an instance with a private IP address. -}
    , _replication_instance_class                :: !(TF.Argument Text)
    {- ^ (Required) The compute and memory capacity of the replication instance as specified by the replication instance class. Can be one of @dms.t2.micro | dms.t2.small | dms.t2.medium | dms.t2.large | dms.c4.large | dms.c4.xlarge | dms.c4.2xlarge | dms.c4.4xlarge@ -}
    , _replication_instance_id                   :: !(TF.Argument Text)
    {- ^ (Required) The replication instance identifier. This parameter is stored as a lowercase string. -}
    , _replication_subnet_group_id               :: !(TF.Argument Text)
    {- ^ (Optional) A subnet group to associate with the replication instance. -}
    , _tags                                      :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _vpc_security_group_ids                    :: !(TF.Argument Text)
    {- ^ (Optional) A list of VPC security group IDs to be used with the replication instance. The VPC security groups must work with the VPC containing the replication instance. -}
    , _computed_replication_instance_arn         :: !(TF.Attribute Text)
    {- ^ - The Amazon Resource Name (ARN) of the replication instance. -}
    , _computed_replication_instance_private_ips :: !(TF.Attribute Text)
    {- ^ -  A list of the private IP addresses of the replication instance. -}
    , _computed_replication_instance_public_ips  :: !(TF.Attribute Text)
    {- ^ - A list of the public IP addresses of the replication instance. -}
    } deriving (Show, Eq)

instance TF.ToHCL DmsReplicationInstanceResource where
    toHCL DmsReplicationInstanceResource{..} = TF.block $ catMaybes
        [ TF.assign "allocated_storage" <$> TF.argument _allocated_storage
        , TF.assign "apply_immediately" <$> TF.argument _apply_immediately
        , TF.assign "auto_minor_version_upgrade" <$> TF.argument _auto_minor_version_upgrade
        , TF.assign "availability_zone" <$> TF.argument _availability_zone
        , TF.assign "engine_version" <$> TF.argument _engine_version
        , TF.assign "kms_key_arn" <$> TF.argument _kms_key_arn
        , TF.assign "multi_az" <$> TF.argument _multi_az
        , TF.assign "preferred_maintenance_window" <$> TF.argument _preferred_maintenance_window
        , TF.assign "publicly_accessible" <$> TF.argument _publicly_accessible
        , TF.assign "replication_instance_class" <$> TF.argument _replication_instance_class
        , TF.assign "replication_instance_id" <$> TF.argument _replication_instance_id
        , TF.assign "replication_subnet_group_id" <$> TF.argument _replication_subnet_group_id
        , TF.assign "tags" <$> TF.argument _tags
        , TF.assign "vpc_security_group_ids" <$> TF.argument _vpc_security_group_ids
        ]

instance HasAllocatedStorage DmsReplicationInstanceResource (TF.Argument Text) where
    allocatedStorage f s@DmsReplicationInstanceResource{..} =
        (\a -> s { _allocated_storage = a } :: DmsReplicationInstanceResource)
             <$> f _allocated_storage

instance HasApplyImmediately DmsReplicationInstanceResource (TF.Argument Text) where
    applyImmediately f s@DmsReplicationInstanceResource{..} =
        (\a -> s { _apply_immediately = a } :: DmsReplicationInstanceResource)
             <$> f _apply_immediately

instance HasAutoMinorVersionUpgrade DmsReplicationInstanceResource (TF.Argument Text) where
    autoMinorVersionUpgrade f s@DmsReplicationInstanceResource{..} =
        (\a -> s { _auto_minor_version_upgrade = a } :: DmsReplicationInstanceResource)
             <$> f _auto_minor_version_upgrade

instance HasAvailabilityZone DmsReplicationInstanceResource (TF.Argument Text) where
    availabilityZone f s@DmsReplicationInstanceResource{..} =
        (\a -> s { _availability_zone = a } :: DmsReplicationInstanceResource)
             <$> f _availability_zone

instance HasEngineVersion DmsReplicationInstanceResource (TF.Argument Text) where
    engineVersion f s@DmsReplicationInstanceResource{..} =
        (\a -> s { _engine_version = a } :: DmsReplicationInstanceResource)
             <$> f _engine_version

instance HasKmsKeyArn DmsReplicationInstanceResource (TF.Argument Text) where
    kmsKeyArn f s@DmsReplicationInstanceResource{..} =
        (\a -> s { _kms_key_arn = a } :: DmsReplicationInstanceResource)
             <$> f _kms_key_arn

instance HasMultiAz DmsReplicationInstanceResource (TF.Argument Text) where
    multiAz f s@DmsReplicationInstanceResource{..} =
        (\a -> s { _multi_az = a } :: DmsReplicationInstanceResource)
             <$> f _multi_az

instance HasPreferredMaintenanceWindow DmsReplicationInstanceResource (TF.Argument Text) where
    preferredMaintenanceWindow f s@DmsReplicationInstanceResource{..} =
        (\a -> s { _preferred_maintenance_window = a } :: DmsReplicationInstanceResource)
             <$> f _preferred_maintenance_window

instance HasPubliclyAccessible DmsReplicationInstanceResource (TF.Argument Text) where
    publiclyAccessible f s@DmsReplicationInstanceResource{..} =
        (\a -> s { _publicly_accessible = a } :: DmsReplicationInstanceResource)
             <$> f _publicly_accessible

instance HasReplicationInstanceClass DmsReplicationInstanceResource (TF.Argument Text) where
    replicationInstanceClass f s@DmsReplicationInstanceResource{..} =
        (\a -> s { _replication_instance_class = a } :: DmsReplicationInstanceResource)
             <$> f _replication_instance_class

instance HasReplicationInstanceId DmsReplicationInstanceResource (TF.Argument Text) where
    replicationInstanceId f s@DmsReplicationInstanceResource{..} =
        (\a -> s { _replication_instance_id = a } :: DmsReplicationInstanceResource)
             <$> f _replication_instance_id

instance HasReplicationSubnetGroupId DmsReplicationInstanceResource (TF.Argument Text) where
    replicationSubnetGroupId f s@DmsReplicationInstanceResource{..} =
        (\a -> s { _replication_subnet_group_id = a } :: DmsReplicationInstanceResource)
             <$> f _replication_subnet_group_id

instance HasTags DmsReplicationInstanceResource (TF.Argument TF.Tags) where
    tags f s@DmsReplicationInstanceResource{..} =
        (\a -> s { _tags = a } :: DmsReplicationInstanceResource)
             <$> f _tags

instance HasVpcSecurityGroupIds DmsReplicationInstanceResource (TF.Argument Text) where
    vpcSecurityGroupIds f s@DmsReplicationInstanceResource{..} =
        (\a -> s { _vpc_security_group_ids = a } :: DmsReplicationInstanceResource)
             <$> f _vpc_security_group_ids

instance HasComputedReplicationInstanceArn DmsReplicationInstanceResource (TF.Attribute Text) where
    computedReplicationInstanceArn f s@DmsReplicationInstanceResource{..} =
        (\a -> s { _computed_replication_instance_arn = a } :: DmsReplicationInstanceResource)
             <$> f _computed_replication_instance_arn

instance HasComputedReplicationInstancePrivateIps DmsReplicationInstanceResource (TF.Attribute Text) where
    computedReplicationInstancePrivateIps f s@DmsReplicationInstanceResource{..} =
        (\a -> s { _computed_replication_instance_private_ips = a } :: DmsReplicationInstanceResource)
             <$> f _computed_replication_instance_private_ips

instance HasComputedReplicationInstancePublicIps DmsReplicationInstanceResource (TF.Attribute Text) where
    computedReplicationInstancePublicIps f s@DmsReplicationInstanceResource{..} =
        (\a -> s { _computed_replication_instance_public_ips = a } :: DmsReplicationInstanceResource)
             <$> f _computed_replication_instance_public_ips

dmsReplicationInstanceResource :: TF.Resource TF.AWS DmsReplicationInstanceResource
dmsReplicationInstanceResource =
    TF.newResource "aws_dms_replication_instance" $
        DmsReplicationInstanceResource {
            _allocated_storage = TF.Nil
            , _apply_immediately = TF.Nil
            , _auto_minor_version_upgrade = TF.Nil
            , _availability_zone = TF.Nil
            , _engine_version = TF.Nil
            , _kms_key_arn = TF.Nil
            , _multi_az = TF.Nil
            , _preferred_maintenance_window = TF.Nil
            , _publicly_accessible = TF.Nil
            , _replication_instance_class = TF.Nil
            , _replication_instance_id = TF.Nil
            , _replication_subnet_group_id = TF.Nil
            , _tags = TF.Nil
            , _vpc_security_group_ids = TF.Nil
            , _computed_replication_instance_arn = TF.Compute "replication_instance_arn"
            , _computed_replication_instance_private_ips = TF.Compute "replication_instance_private_ips"
            , _computed_replication_instance_public_ips = TF.Compute "replication_instance_public_ips"
            }

{- | The @aws_dms_replication_subnet_group@ AWS resource.

Provides a DMS (Data Migration Service) replication subnet group resource.
DMS replication subnet groups can be created, updated, deleted, and
imported.
-}
data DmsReplicationSubnetGroupResource = DmsReplicationSubnetGroupResource {
      _replication_subnet_group_description :: !(TF.Argument Text)
    {- ^ (Required) The description for the subnet group. -}
    , _replication_subnet_group_id          :: !(TF.Argument Text)
    {- ^ (Required) The name for the replication subnet group. This value is stored as a lowercase string. -}
    , _subnet_ids                           :: !(TF.Argument Text)
    {- ^ (Required) A list of the EC2 subnet IDs for the subnet group. -}
    , _computed_vpc_id                      :: !(TF.Attribute Text)
    {- ^ - The ID of the VPC the subnet group is in. -}
    } deriving (Show, Eq)

instance TF.ToHCL DmsReplicationSubnetGroupResource where
    toHCL DmsReplicationSubnetGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "replication_subnet_group_description" <$> TF.argument _replication_subnet_group_description
        , TF.assign "replication_subnet_group_id" <$> TF.argument _replication_subnet_group_id
        , TF.assign "subnet_ids" <$> TF.argument _subnet_ids
        ]

instance HasReplicationSubnetGroupDescription DmsReplicationSubnetGroupResource (TF.Argument Text) where
    replicationSubnetGroupDescription f s@DmsReplicationSubnetGroupResource{..} =
        (\a -> s { _replication_subnet_group_description = a } :: DmsReplicationSubnetGroupResource)
             <$> f _replication_subnet_group_description

instance HasReplicationSubnetGroupId DmsReplicationSubnetGroupResource (TF.Argument Text) where
    replicationSubnetGroupId f s@DmsReplicationSubnetGroupResource{..} =
        (\a -> s { _replication_subnet_group_id = a } :: DmsReplicationSubnetGroupResource)
             <$> f _replication_subnet_group_id

instance HasSubnetIds DmsReplicationSubnetGroupResource (TF.Argument Text) where
    subnetIds f s@DmsReplicationSubnetGroupResource{..} =
        (\a -> s { _subnet_ids = a } :: DmsReplicationSubnetGroupResource)
             <$> f _subnet_ids

instance HasComputedVpcId DmsReplicationSubnetGroupResource (TF.Attribute Text) where
    computedVpcId f s@DmsReplicationSubnetGroupResource{..} =
        (\a -> s { _computed_vpc_id = a } :: DmsReplicationSubnetGroupResource)
             <$> f _computed_vpc_id

dmsReplicationSubnetGroupResource :: TF.Resource TF.AWS DmsReplicationSubnetGroupResource
dmsReplicationSubnetGroupResource =
    TF.newResource "aws_dms_replication_subnet_group" $
        DmsReplicationSubnetGroupResource {
            _replication_subnet_group_description = TF.Nil
            , _replication_subnet_group_id = TF.Nil
            , _subnet_ids = TF.Nil
            , _computed_vpc_id = TF.Compute "vpc_id"
            }

{- | The @aws_dms_replication_task@ AWS resource.

Provides a DMS (Data Migration Service) replication task resource. DMS
replication tasks can be created, updated, deleted, and imported.
-}
data DmsReplicationTaskResource = DmsReplicationTaskResource {
      _cdc_start_time                :: !(TF.Argument Text)
    {- ^ (Optional) The Unix timestamp integer for the start of the Change Data Capture (CDC) operation. -}
    , _migration_type                :: !(TF.Argument Text)
    {- ^ (Required) The migration type. Can be one of @full-load | cdc | full-load-and-cdc@ . -}
    , _replication_instance_arn      :: !(TF.Argument Text)
    {- ^ (Required) The Amazon Resource Name (ARN) of the replication instance. -}
    , _replication_task_id           :: !(TF.Argument Text)
    {- ^ (Required) The replication task identifier. -}
    , _replication_task_settings     :: !(TF.Argument Text)
    {- ^ (Optional) An escaped JSON string that contains the task settings. For a complete list of task settings, see <http://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.CustomizingTasks.TaskSettings.html> . -}
    , _source_endpoint_arn           :: !(TF.Argument Text)
    {- ^ (Required) The Amazon Resource Name (ARN) string that uniquely identifies the source endpoint. -}
    , _table_mappings                :: !(TF.Argument Text)
    {- ^ (Required) An escaped JSON string that contains the table mappings. For information on table mapping see <http://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.CustomizingTasks.TableMapping.html> -}
    , _tags                          :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _target_endpoint_arn           :: !(TF.Argument Text)
    {- ^ (Required) The Amazon Resource Name (ARN) string that uniquely identifies the target endpoint. -}
    , _computed_replication_task_arn :: !(TF.Attribute Text)
    {- ^ - The Amazon Resource Name (ARN) for the replication task. -}
    } deriving (Show, Eq)

instance TF.ToHCL DmsReplicationTaskResource where
    toHCL DmsReplicationTaskResource{..} = TF.block $ catMaybes
        [ TF.assign "cdc_start_time" <$> TF.argument _cdc_start_time
        , TF.assign "migration_type" <$> TF.argument _migration_type
        , TF.assign "replication_instance_arn" <$> TF.argument _replication_instance_arn
        , TF.assign "replication_task_id" <$> TF.argument _replication_task_id
        , TF.assign "replication_task_settings" <$> TF.argument _replication_task_settings
        , TF.assign "source_endpoint_arn" <$> TF.argument _source_endpoint_arn
        , TF.assign "table_mappings" <$> TF.argument _table_mappings
        , TF.assign "tags" <$> TF.argument _tags
        , TF.assign "target_endpoint_arn" <$> TF.argument _target_endpoint_arn
        ]

instance HasCdcStartTime DmsReplicationTaskResource (TF.Argument Text) where
    cdcStartTime f s@DmsReplicationTaskResource{..} =
        (\a -> s { _cdc_start_time = a } :: DmsReplicationTaskResource)
             <$> f _cdc_start_time

instance HasMigrationType DmsReplicationTaskResource (TF.Argument Text) where
    migrationType f s@DmsReplicationTaskResource{..} =
        (\a -> s { _migration_type = a } :: DmsReplicationTaskResource)
             <$> f _migration_type

instance HasReplicationInstanceArn DmsReplicationTaskResource (TF.Argument Text) where
    replicationInstanceArn f s@DmsReplicationTaskResource{..} =
        (\a -> s { _replication_instance_arn = a } :: DmsReplicationTaskResource)
             <$> f _replication_instance_arn

instance HasReplicationTaskId DmsReplicationTaskResource (TF.Argument Text) where
    replicationTaskId f s@DmsReplicationTaskResource{..} =
        (\a -> s { _replication_task_id = a } :: DmsReplicationTaskResource)
             <$> f _replication_task_id

instance HasReplicationTaskSettings DmsReplicationTaskResource (TF.Argument Text) where
    replicationTaskSettings f s@DmsReplicationTaskResource{..} =
        (\a -> s { _replication_task_settings = a } :: DmsReplicationTaskResource)
             <$> f _replication_task_settings

instance HasSourceEndpointArn DmsReplicationTaskResource (TF.Argument Text) where
    sourceEndpointArn f s@DmsReplicationTaskResource{..} =
        (\a -> s { _source_endpoint_arn = a } :: DmsReplicationTaskResource)
             <$> f _source_endpoint_arn

instance HasTableMappings DmsReplicationTaskResource (TF.Argument Text) where
    tableMappings f s@DmsReplicationTaskResource{..} =
        (\a -> s { _table_mappings = a } :: DmsReplicationTaskResource)
             <$> f _table_mappings

instance HasTags DmsReplicationTaskResource (TF.Argument TF.Tags) where
    tags f s@DmsReplicationTaskResource{..} =
        (\a -> s { _tags = a } :: DmsReplicationTaskResource)
             <$> f _tags

instance HasTargetEndpointArn DmsReplicationTaskResource (TF.Argument Text) where
    targetEndpointArn f s@DmsReplicationTaskResource{..} =
        (\a -> s { _target_endpoint_arn = a } :: DmsReplicationTaskResource)
             <$> f _target_endpoint_arn

instance HasComputedReplicationTaskArn DmsReplicationTaskResource (TF.Attribute Text) where
    computedReplicationTaskArn f s@DmsReplicationTaskResource{..} =
        (\a -> s { _computed_replication_task_arn = a } :: DmsReplicationTaskResource)
             <$> f _computed_replication_task_arn

dmsReplicationTaskResource :: TF.Resource TF.AWS DmsReplicationTaskResource
dmsReplicationTaskResource =
    TF.newResource "aws_dms_replication_task" $
        DmsReplicationTaskResource {
            _cdc_start_time = TF.Nil
            , _migration_type = TF.Nil
            , _replication_instance_arn = TF.Nil
            , _replication_task_id = TF.Nil
            , _replication_task_settings = TF.Nil
            , _source_endpoint_arn = TF.Nil
            , _table_mappings = TF.Nil
            , _tags = TF.Nil
            , _target_endpoint_arn = TF.Nil
            , _computed_replication_task_arn = TF.Compute "replication_task_arn"
            }

{- | The @aws_dx_connection_association@ AWS resource.

Associates a Direct Connect Connection with a LAG.
-}
data DxConnectionAssociationResource = DxConnectionAssociationResource {
      _connection_id :: !(TF.Argument Text)
    {- ^ (Required) The ID of the connection. -}
    , _lag_id        :: !(TF.Argument Text)
    {- ^ (Required) The ID of the LAG with which to associate the connection. -}
    } deriving (Show, Eq)

instance TF.ToHCL DxConnectionAssociationResource where
    toHCL DxConnectionAssociationResource{..} = TF.block $ catMaybes
        [ TF.assign "connection_id" <$> TF.argument _connection_id
        , TF.assign "lag_id" <$> TF.argument _lag_id
        ]

instance HasConnectionId DxConnectionAssociationResource (TF.Argument Text) where
    connectionId f s@DxConnectionAssociationResource{..} =
        (\a -> s { _connection_id = a } :: DxConnectionAssociationResource)
             <$> f _connection_id

instance HasLagId DxConnectionAssociationResource (TF.Argument Text) where
    lagId f s@DxConnectionAssociationResource{..} =
        (\a -> s { _lag_id = a } :: DxConnectionAssociationResource)
             <$> f _lag_id

dxConnectionAssociationResource :: TF.Resource TF.AWS DxConnectionAssociationResource
dxConnectionAssociationResource =
    TF.newResource "aws_dx_connection_association" $
        DxConnectionAssociationResource {
            _connection_id = TF.Nil
            , _lag_id = TF.Nil
            }

{- | The @aws_dx_connection@ AWS resource.

Provides a Connection of Direct Connect.
-}
data DxConnectionResource = DxConnectionResource {
      _bandwidth   :: !(TF.Argument Text)
    {- ^ (Required) The bandwidth of the connection. Available values: 1Gbps, 10Gbps. Case sensitive. -}
    , _location    :: !(TF.Argument Text)
    {- ^ (Required) The AWS Direct Connect location where the connection is located. See <https://docs.aws.amazon.com/directconnect/latest/APIReference/API_DescribeLocations.html> for the list of AWS Direct Connect locations. Use @locationCode@ . -}
    , _name        :: !(TF.Argument Text)
    {- ^ (Required) The name of the connection. -}
    , _computed_id :: !(TF.Attribute Text)
    {- ^ - The ID of the connection. -}
    } deriving (Show, Eq)

instance TF.ToHCL DxConnectionResource where
    toHCL DxConnectionResource{..} = TF.block $ catMaybes
        [ TF.assign "bandwidth" <$> TF.argument _bandwidth
        , TF.assign "location" <$> TF.argument _location
        , TF.assign "name" <$> TF.argument _name
        ]

instance HasBandwidth DxConnectionResource (TF.Argument Text) where
    bandwidth f s@DxConnectionResource{..} =
        (\a -> s { _bandwidth = a } :: DxConnectionResource)
             <$> f _bandwidth

instance HasLocation DxConnectionResource (TF.Argument Text) where
    location f s@DxConnectionResource{..} =
        (\a -> s { _location = a } :: DxConnectionResource)
             <$> f _location

instance HasName DxConnectionResource (TF.Argument Text) where
    name f s@DxConnectionResource{..} =
        (\a -> s { _name = a } :: DxConnectionResource)
             <$> f _name

instance HasComputedId DxConnectionResource (TF.Attribute Text) where
    computedId f s@DxConnectionResource{..} =
        (\a -> s { _computed_id = a } :: DxConnectionResource)
             <$> f _computed_id

dxConnectionResource :: TF.Resource TF.AWS DxConnectionResource
dxConnectionResource =
    TF.newResource "aws_dx_connection" $
        DxConnectionResource {
            _bandwidth = TF.Nil
            , _location = TF.Nil
            , _name = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_dx_lag@ AWS resource.

Provides a Direct Connect LAG.
-}
data DxLagResource = DxLagResource {
      _connections_bandwidth :: !(TF.Argument Text)
    {- ^ (Required) The bandwidth of the individual physical connections bundled by the LAG. Available values: 1Gbps, 10Gbps. Case sensitive. -}
    , _force_destroy         :: !(TF.Argument Text)
    {- ^ (Optional, Default:false) A boolean that indicates all connections associated with the LAG should be deleted so that the LAG can be destroyed without error. These objects are not recoverable. -}
    , _location              :: !(TF.Argument Text)
    {- ^ (Required) The AWS Direct Connect location in which the LAG should be allocated. See <https://docs.aws.amazon.com/directconnect/latest/APIReference/API_DescribeLocations.html> for the list of AWS Direct Connect locations. Use @locationCode@ . -}
    , _name                  :: !(TF.Argument Text)
    {- ^ (Required) The name of the LAG. -}
    , _number_of_connections :: !(TF.Argument Text)
    {- ^ (Required) The number of physical connections initially provisioned and bundled by the LAG. -}
    , _computed_id           :: !(TF.Attribute Text)
    {- ^ - The ID of the LAG. -}
    } deriving (Show, Eq)

instance TF.ToHCL DxLagResource where
    toHCL DxLagResource{..} = TF.block $ catMaybes
        [ TF.assign "connections_bandwidth" <$> TF.argument _connections_bandwidth
        , TF.assign "force_destroy" <$> TF.argument _force_destroy
        , TF.assign "location" <$> TF.argument _location
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "number_of_connections" <$> TF.argument _number_of_connections
        ]

instance HasConnectionsBandwidth DxLagResource (TF.Argument Text) where
    connectionsBandwidth f s@DxLagResource{..} =
        (\a -> s { _connections_bandwidth = a } :: DxLagResource)
             <$> f _connections_bandwidth

instance HasForceDestroy DxLagResource (TF.Argument Text) where
    forceDestroy f s@DxLagResource{..} =
        (\a -> s { _force_destroy = a } :: DxLagResource)
             <$> f _force_destroy

instance HasLocation DxLagResource (TF.Argument Text) where
    location f s@DxLagResource{..} =
        (\a -> s { _location = a } :: DxLagResource)
             <$> f _location

instance HasName DxLagResource (TF.Argument Text) where
    name f s@DxLagResource{..} =
        (\a -> s { _name = a } :: DxLagResource)
             <$> f _name

instance HasNumberOfConnections DxLagResource (TF.Argument Text) where
    numberOfConnections f s@DxLagResource{..} =
        (\a -> s { _number_of_connections = a } :: DxLagResource)
             <$> f _number_of_connections

instance HasComputedId DxLagResource (TF.Attribute Text) where
    computedId f s@DxLagResource{..} =
        (\a -> s { _computed_id = a } :: DxLagResource)
             <$> f _computed_id

dxLagResource :: TF.Resource TF.AWS DxLagResource
dxLagResource =
    TF.newResource "aws_dx_lag" $
        DxLagResource {
            _connections_bandwidth = TF.Nil
            , _force_destroy = TF.Nil
            , _location = TF.Nil
            , _name = TF.Nil
            , _number_of_connections = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_dynamodb_table@ AWS resource.

Provides a DynamoDB table resource ~> Note: It is recommended to use
@lifecycle@  </docs/configuration/resources.html#ignore_changes> for
@read_capacity@ and/or @write_capacity@ if there's
</docs/providers/aws/r/appautoscaling_policy.html> attached to the table.
-}
data DynamodbTableResource = DynamodbTableResource {
      _attribute              :: !(TF.Argument Text)
    {- ^ (Required) Define an attribute, has two properties: -}
    , _global_secondary_index :: !(TF.Argument Text)
    {- ^ (Optional) Describe a GSO for the table; subject to the normal limits on the number of GSIs, projected attributes, etc. -}
    , _hash_key               :: !(TF.Argument Text)
    {- ^ (Required, Forces new resource) The attribute to use as the hash key (the attribute must also be defined as an attribute record -}
    , _local_secondary_index  :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) Describe an LSI on the table; these can only be allocated at creation so you cannot change this definition after you have created the resource. -}
    , _name                   :: !(TF.Argument Text)
    {- ^ (Required) The name of the table, this needs to be unique within a region. -}
    , _range_key              :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) The attribute to use as the range key (must also be defined) -}
    , _read_capacity          :: !(TF.Argument Text)
    {- ^ (Required) The number of read units for this table -}
    , _stream_enabled         :: !(TF.Argument TF.Bool)
    {- ^ (Optional) Indicates whether Streams are to be enabled (true) or disabled (false). -}
    , _stream_view_type       :: !(TF.Argument Text)
    {- ^ (Optional) When an item in the table is modified, StreamViewType determines what information is written to the table's stream. Valid values are KEYS_ONLY, NEW_IMAGE, OLD_IMAGE, NEW_AND_OLD_IMAGES. -}
    , _tags                   :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A map of tags to populate on the created table. -}
    , _ttl                    :: !(TF.Argument Text)
    {- ^ (Optional) Defines ttl, has two properties, and can only be specified once: -}
    , _write_capacity         :: !(TF.Argument Text)
    {- ^ (Required) The number of write units for this table -}
    } deriving (Show, Eq)

instance TF.ToHCL DynamodbTableResource where
    toHCL DynamodbTableResource{..} = TF.block $ catMaybes
        [ TF.assign "attribute" <$> TF.argument _attribute
        , TF.assign "global_secondary_index" <$> TF.argument _global_secondary_index
        , TF.assign "hash_key" <$> TF.argument _hash_key
        , TF.assign "local_secondary_index" <$> TF.argument _local_secondary_index
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "range_key" <$> TF.argument _range_key
        , TF.assign "read_capacity" <$> TF.argument _read_capacity
        , TF.assign "stream_enabled" <$> TF.argument _stream_enabled
        , TF.assign "stream_view_type" <$> TF.argument _stream_view_type
        , TF.assign "tags" <$> TF.argument _tags
        , TF.assign "ttl" <$> TF.argument _ttl
        , TF.assign "write_capacity" <$> TF.argument _write_capacity
        ]

instance HasAttribute DynamodbTableResource (TF.Argument Text) where
    attribute f s@DynamodbTableResource{..} =
        (\a -> s { _attribute = a } :: DynamodbTableResource)
             <$> f _attribute

instance HasGlobalSecondaryIndex DynamodbTableResource (TF.Argument Text) where
    globalSecondaryIndex f s@DynamodbTableResource{..} =
        (\a -> s { _global_secondary_index = a } :: DynamodbTableResource)
             <$> f _global_secondary_index

instance HasHashKey DynamodbTableResource (TF.Argument Text) where
    hashKey f s@DynamodbTableResource{..} =
        (\a -> s { _hash_key = a } :: DynamodbTableResource)
             <$> f _hash_key

instance HasLocalSecondaryIndex DynamodbTableResource (TF.Argument Text) where
    localSecondaryIndex f s@DynamodbTableResource{..} =
        (\a -> s { _local_secondary_index = a } :: DynamodbTableResource)
             <$> f _local_secondary_index

instance HasName DynamodbTableResource (TF.Argument Text) where
    name f s@DynamodbTableResource{..} =
        (\a -> s { _name = a } :: DynamodbTableResource)
             <$> f _name

instance HasRangeKey DynamodbTableResource (TF.Argument Text) where
    rangeKey f s@DynamodbTableResource{..} =
        (\a -> s { _range_key = a } :: DynamodbTableResource)
             <$> f _range_key

instance HasReadCapacity DynamodbTableResource (TF.Argument Text) where
    readCapacity f s@DynamodbTableResource{..} =
        (\a -> s { _read_capacity = a } :: DynamodbTableResource)
             <$> f _read_capacity

instance HasStreamEnabled DynamodbTableResource (TF.Argument TF.Bool) where
    streamEnabled f s@DynamodbTableResource{..} =
        (\a -> s { _stream_enabled = a } :: DynamodbTableResource)
             <$> f _stream_enabled

instance HasStreamViewType DynamodbTableResource (TF.Argument Text) where
    streamViewType f s@DynamodbTableResource{..} =
        (\a -> s { _stream_view_type = a } :: DynamodbTableResource)
             <$> f _stream_view_type

instance HasTags DynamodbTableResource (TF.Argument TF.Tags) where
    tags f s@DynamodbTableResource{..} =
        (\a -> s { _tags = a } :: DynamodbTableResource)
             <$> f _tags

instance HasTtl DynamodbTableResource (TF.Argument Text) where
    ttl f s@DynamodbTableResource{..} =
        (\a -> s { _ttl = a } :: DynamodbTableResource)
             <$> f _ttl

instance HasWriteCapacity DynamodbTableResource (TF.Argument Text) where
    writeCapacity f s@DynamodbTableResource{..} =
        (\a -> s { _write_capacity = a } :: DynamodbTableResource)
             <$> f _write_capacity

dynamodbTableResource :: TF.Resource TF.AWS DynamodbTableResource
dynamodbTableResource =
    TF.newResource "aws_dynamodb_table" $
        DynamodbTableResource {
            _attribute = TF.Nil
            , _global_secondary_index = TF.Nil
            , _hash_key = TF.Nil
            , _local_secondary_index = TF.Nil
            , _name = TF.Nil
            , _range_key = TF.Nil
            , _read_capacity = TF.Nil
            , _stream_enabled = TF.Nil
            , _stream_view_type = TF.Nil
            , _tags = TF.Nil
            , _ttl = TF.Nil
            , _write_capacity = TF.Nil
            }

{- | The @aws_ebs_snapshot@ AWS resource.

Creates a Snapshot of an EBS Volume.
-}
data EbsSnapshotResource = EbsSnapshotResource {
      _description                     :: !(TF.Argument Text)
    {- ^ (Optional) A description of what the snapshot is. -}
    , _tags                            :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the snapshot -}
    , _volume_id                       :: !(TF.Argument Text)
    {- ^ (Required) The Volume ID of which to make a snapshot. -}
    , _computed_data_encryption_key_id :: !(TF.Attribute Text)
    {- ^ - The data encryption key identifier for the snapshot. -}
    , _computed_encrypted              :: !(TF.Attribute Text)
    {- ^ - Whether the snapshot is encrypted. -}
    , _computed_id                     :: !(TF.Attribute Text)
    {- ^ - The snapshot ID (e.g. snap-59fcb34e). -}
    , _computed_kms_key_id             :: !(TF.Attribute Text)
    {- ^ - The ARN for the KMS encryption key. -}
    , _computed_owner_alias            :: !(TF.Attribute Text)
    {- ^ - Value from an Amazon-maintained list ( @amazon@ , @aws-marketplace@ , @microsoft@ ) of snapshot owners. -}
    , _computed_owner_id               :: !(TF.Attribute Text)
    {- ^ - The AWS account ID of the EBS snapshot owner. -}
    , _computed_tags                   :: !(TF.Attribute TF.Tags)
    {- ^ - A mapping of tags for the snapshot. -}
    , _computed_volume_size            :: !(TF.Attribute Text)
    {- ^ - The size of the drive in GiBs. -}
    } deriving (Show, Eq)

instance TF.ToHCL EbsSnapshotResource where
    toHCL EbsSnapshotResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.argument _description
        , TF.assign "tags" <$> TF.argument _tags
        , TF.assign "volume_id" <$> TF.argument _volume_id
        ]

instance HasDescription EbsSnapshotResource (TF.Argument Text) where
    description f s@EbsSnapshotResource{..} =
        (\a -> s { _description = a } :: EbsSnapshotResource)
             <$> f _description

instance HasTags EbsSnapshotResource (TF.Argument TF.Tags) where
    tags f s@EbsSnapshotResource{..} =
        (\a -> s { _tags = a } :: EbsSnapshotResource)
             <$> f _tags

instance HasVolumeId EbsSnapshotResource (TF.Argument Text) where
    volumeId f s@EbsSnapshotResource{..} =
        (\a -> s { _volume_id = a } :: EbsSnapshotResource)
             <$> f _volume_id

instance HasComputedDataEncryptionKeyId EbsSnapshotResource (TF.Attribute Text) where
    computedDataEncryptionKeyId f s@EbsSnapshotResource{..} =
        (\a -> s { _computed_data_encryption_key_id = a } :: EbsSnapshotResource)
             <$> f _computed_data_encryption_key_id

instance HasComputedEncrypted EbsSnapshotResource (TF.Attribute Text) where
    computedEncrypted f s@EbsSnapshotResource{..} =
        (\a -> s { _computed_encrypted = a } :: EbsSnapshotResource)
             <$> f _computed_encrypted

instance HasComputedId EbsSnapshotResource (TF.Attribute Text) where
    computedId f s@EbsSnapshotResource{..} =
        (\a -> s { _computed_id = a } :: EbsSnapshotResource)
             <$> f _computed_id

instance HasComputedKmsKeyId EbsSnapshotResource (TF.Attribute Text) where
    computedKmsKeyId f s@EbsSnapshotResource{..} =
        (\a -> s { _computed_kms_key_id = a } :: EbsSnapshotResource)
             <$> f _computed_kms_key_id

instance HasComputedOwnerAlias EbsSnapshotResource (TF.Attribute Text) where
    computedOwnerAlias f s@EbsSnapshotResource{..} =
        (\a -> s { _computed_owner_alias = a } :: EbsSnapshotResource)
             <$> f _computed_owner_alias

instance HasComputedOwnerId EbsSnapshotResource (TF.Attribute Text) where
    computedOwnerId f s@EbsSnapshotResource{..} =
        (\a -> s { _computed_owner_id = a } :: EbsSnapshotResource)
             <$> f _computed_owner_id

instance HasComputedTags EbsSnapshotResource (TF.Attribute TF.Tags) where
    computedTags f s@EbsSnapshotResource{..} =
        (\a -> s { _computed_tags = a } :: EbsSnapshotResource)
             <$> f _computed_tags

instance HasComputedVolumeSize EbsSnapshotResource (TF.Attribute Text) where
    computedVolumeSize f s@EbsSnapshotResource{..} =
        (\a -> s { _computed_volume_size = a } :: EbsSnapshotResource)
             <$> f _computed_volume_size

ebsSnapshotResource :: TF.Resource TF.AWS EbsSnapshotResource
ebsSnapshotResource =
    TF.newResource "aws_ebs_snapshot" $
        EbsSnapshotResource {
            _description = TF.Nil
            , _tags = TF.Nil
            , _volume_id = TF.Nil
            , _computed_data_encryption_key_id = TF.Compute "data_encryption_key_id"
            , _computed_encrypted = TF.Compute "encrypted"
            , _computed_id = TF.Compute "id"
            , _computed_kms_key_id = TF.Compute "kms_key_id"
            , _computed_owner_alias = TF.Compute "owner_alias"
            , _computed_owner_id = TF.Compute "owner_id"
            , _computed_tags = TF.Compute "tags"
            , _computed_volume_size = TF.Compute "volume_size"
            }

{- | The @aws_ebs_volume@ AWS resource.

Manages a single EBS volume.
-}
data EbsVolumeResource = EbsVolumeResource {
      _availability_zone :: !(TF.Argument Text)
    {- ^ (Required) The AZ where the EBS volume will exist. -}
    , _encrypted         :: !(TF.Argument Text)
    {- ^ (Optional) If true, the disk will be encrypted. -}
    , _iops              :: !(TF.Argument Text)
    {- ^ (Optional) The amount of IOPS to provision for the disk. -}
    , _kms_key_id        :: !(TF.Argument Text)
    {- ^ (Optional) The ARN for the KMS encryption key. When specifying @kms_key_id@ , @encrypted@ needs to be set to true. -}
    , _size              :: !(TF.Argument Text)
    {- ^ (Optional) The size of the drive in GiBs. -}
    , _snapshot_id       :: !(TF.Argument Text)
    {- ^ (Optional) A snapshot to base the EBS volume off of. -}
    , _tags              :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _type'             :: !(TF.Argument Text)
    {- ^ (Optional) The type of EBS volume. Can be "standard", "gp2", "io1", "sc1" or "st1" (Default: "standard"). -}
    , _computed_arn      :: !(TF.Attribute Text)
    {- ^ - The volume ARN (e.g. arn:aws:ec2:us-east-1:0123456789012:volume/vol-59fcb34e). -}
    , _computed_id       :: !(TF.Attribute Text)
    {- ^ - The volume ID (e.g. vol-59fcb34e). -}
    } deriving (Show, Eq)

instance TF.ToHCL EbsVolumeResource where
    toHCL EbsVolumeResource{..} = TF.block $ catMaybes
        [ TF.assign "availability_zone" <$> TF.argument _availability_zone
        , TF.assign "encrypted" <$> TF.argument _encrypted
        , TF.assign "iops" <$> TF.argument _iops
        , TF.assign "kms_key_id" <$> TF.argument _kms_key_id
        , TF.assign "size" <$> TF.argument _size
        , TF.assign "snapshot_id" <$> TF.argument _snapshot_id
        , TF.assign "tags" <$> TF.argument _tags
        , TF.assign "type" <$> TF.argument _type'
        ]

instance HasAvailabilityZone EbsVolumeResource (TF.Argument Text) where
    availabilityZone f s@EbsVolumeResource{..} =
        (\a -> s { _availability_zone = a } :: EbsVolumeResource)
             <$> f _availability_zone

instance HasEncrypted EbsVolumeResource (TF.Argument Text) where
    encrypted f s@EbsVolumeResource{..} =
        (\a -> s { _encrypted = a } :: EbsVolumeResource)
             <$> f _encrypted

instance HasIops EbsVolumeResource (TF.Argument Text) where
    iops f s@EbsVolumeResource{..} =
        (\a -> s { _iops = a } :: EbsVolumeResource)
             <$> f _iops

instance HasKmsKeyId EbsVolumeResource (TF.Argument Text) where
    kmsKeyId f s@EbsVolumeResource{..} =
        (\a -> s { _kms_key_id = a } :: EbsVolumeResource)
             <$> f _kms_key_id

instance HasSize EbsVolumeResource (TF.Argument Text) where
    size f s@EbsVolumeResource{..} =
        (\a -> s { _size = a } :: EbsVolumeResource)
             <$> f _size

instance HasSnapshotId EbsVolumeResource (TF.Argument Text) where
    snapshotId f s@EbsVolumeResource{..} =
        (\a -> s { _snapshot_id = a } :: EbsVolumeResource)
             <$> f _snapshot_id

instance HasTags EbsVolumeResource (TF.Argument TF.Tags) where
    tags f s@EbsVolumeResource{..} =
        (\a -> s { _tags = a } :: EbsVolumeResource)
             <$> f _tags

instance HasType' EbsVolumeResource (TF.Argument Text) where
    type' f s@EbsVolumeResource{..} =
        (\a -> s { _type' = a } :: EbsVolumeResource)
             <$> f _type'

instance HasComputedArn EbsVolumeResource (TF.Attribute Text) where
    computedArn f s@EbsVolumeResource{..} =
        (\a -> s { _computed_arn = a } :: EbsVolumeResource)
             <$> f _computed_arn

instance HasComputedId EbsVolumeResource (TF.Attribute Text) where
    computedId f s@EbsVolumeResource{..} =
        (\a -> s { _computed_id = a } :: EbsVolumeResource)
             <$> f _computed_id

ebsVolumeResource :: TF.Resource TF.AWS EbsVolumeResource
ebsVolumeResource =
    TF.newResource "aws_ebs_volume" $
        EbsVolumeResource {
            _availability_zone = TF.Nil
            , _encrypted = TF.Nil
            , _iops = TF.Nil
            , _kms_key_id = TF.Nil
            , _size = TF.Nil
            , _snapshot_id = TF.Nil
            , _tags = TF.Nil
            , _type' = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_ecr_lifecycle_policy@ AWS resource.

Provides an ECR lifecycle policy.
-}
data EcrLifecyclePolicyResource = EcrLifecyclePolicyResource {
      _policy               :: !(TF.Argument Text)
    {- ^ (Required) The policy document. This is a JSON formatted string. See more details about <http://docs.aws.amazon.com/ja_jp/AmazonECR/latest/userguide/LifecyclePolicies.html#lifecycle_policy_parameters> in the official AWS docs. -}
    , _repository           :: !(TF.Argument Text)
    {- ^ (Required) Name of the repository to apply the policy. -}
    , _computed_registry_id :: !(TF.Attribute Text)
    {- ^ - The registry ID where the repository was created. -}
    , _computed_repository  :: !(TF.Attribute Text)
    {- ^ - The name of the repository. -}
    } deriving (Show, Eq)

instance TF.ToHCL EcrLifecyclePolicyResource where
    toHCL EcrLifecyclePolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "policy" <$> TF.argument _policy
        , TF.assign "repository" <$> TF.argument _repository
        ]

instance HasPolicy EcrLifecyclePolicyResource (TF.Argument Text) where
    policy f s@EcrLifecyclePolicyResource{..} =
        (\a -> s { _policy = a } :: EcrLifecyclePolicyResource)
             <$> f _policy

instance HasRepository EcrLifecyclePolicyResource (TF.Argument Text) where
    repository f s@EcrLifecyclePolicyResource{..} =
        (\a -> s { _repository = a } :: EcrLifecyclePolicyResource)
             <$> f _repository

instance HasComputedRegistryId EcrLifecyclePolicyResource (TF.Attribute Text) where
    computedRegistryId f s@EcrLifecyclePolicyResource{..} =
        (\a -> s { _computed_registry_id = a } :: EcrLifecyclePolicyResource)
             <$> f _computed_registry_id

instance HasComputedRepository EcrLifecyclePolicyResource (TF.Attribute Text) where
    computedRepository f s@EcrLifecyclePolicyResource{..} =
        (\a -> s { _computed_repository = a } :: EcrLifecyclePolicyResource)
             <$> f _computed_repository

ecrLifecyclePolicyResource :: TF.Resource TF.AWS EcrLifecyclePolicyResource
ecrLifecyclePolicyResource =
    TF.newResource "aws_ecr_lifecycle_policy" $
        EcrLifecyclePolicyResource {
            _policy = TF.Nil
            , _repository = TF.Nil
            , _computed_registry_id = TF.Compute "registry_id"
            , _computed_repository = TF.Compute "repository"
            }

{- | The @aws_ecr_repository_policy@ AWS resource.

Provides an ECR repository policy. Note that currently only one policy may
be applied to a repository. ~> NOTE on ECR Availability : The EC2 Container
Registry is not yet rolled out in all regions - available regions are listed
<https://docs.aws.amazon.com/general/latest/gr/rande.html#ecr_region> .
-}
data EcrRepositoryPolicyResource = EcrRepositoryPolicyResource {
      _policy               :: !(TF.Argument Text)
    {- ^ (Required) The policy document. This is a JSON formatted string. -}
    , _repository           :: !(TF.Argument Text)
    {- ^ (Required) Name of the repository to apply the policy. -}
    , _computed_registry_id :: !(TF.Attribute Text)
    {- ^ - The registry ID where the repository was created. -}
    , _computed_repository  :: !(TF.Attribute Text)
    {- ^ - The name of the repository. -}
    } deriving (Show, Eq)

instance TF.ToHCL EcrRepositoryPolicyResource where
    toHCL EcrRepositoryPolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "policy" <$> TF.argument _policy
        , TF.assign "repository" <$> TF.argument _repository
        ]

instance HasPolicy EcrRepositoryPolicyResource (TF.Argument Text) where
    policy f s@EcrRepositoryPolicyResource{..} =
        (\a -> s { _policy = a } :: EcrRepositoryPolicyResource)
             <$> f _policy

instance HasRepository EcrRepositoryPolicyResource (TF.Argument Text) where
    repository f s@EcrRepositoryPolicyResource{..} =
        (\a -> s { _repository = a } :: EcrRepositoryPolicyResource)
             <$> f _repository

instance HasComputedRegistryId EcrRepositoryPolicyResource (TF.Attribute Text) where
    computedRegistryId f s@EcrRepositoryPolicyResource{..} =
        (\a -> s { _computed_registry_id = a } :: EcrRepositoryPolicyResource)
             <$> f _computed_registry_id

instance HasComputedRepository EcrRepositoryPolicyResource (TF.Attribute Text) where
    computedRepository f s@EcrRepositoryPolicyResource{..} =
        (\a -> s { _computed_repository = a } :: EcrRepositoryPolicyResource)
             <$> f _computed_repository

ecrRepositoryPolicyResource :: TF.Resource TF.AWS EcrRepositoryPolicyResource
ecrRepositoryPolicyResource =
    TF.newResource "aws_ecr_repository_policy" $
        EcrRepositoryPolicyResource {
            _policy = TF.Nil
            , _repository = TF.Nil
            , _computed_registry_id = TF.Compute "registry_id"
            , _computed_repository = TF.Compute "repository"
            }

{- | The @aws_ecr_repository@ AWS resource.

Provides an EC2 Container Registry Repository. ~> NOTE on ECR Availability :
The EC2 Container Registry is not yet rolled out in all regions - available
regions are listed
<https://docs.aws.amazon.com/general/latest/gr/rande.html#ecr_region> .
-}
data EcrRepositoryResource = EcrRepositoryResource {
      _name                    :: !(TF.Argument Text)
    {- ^ (Required) Name of the repository. -}
    , _computed_arn            :: !(TF.Attribute Text)
    {- ^ - Full ARN of the repository. -}
    , _computed_name           :: !(TF.Attribute Text)
    {- ^ - The name of the repository. -}
    , _computed_registry_id    :: !(TF.Attribute Text)
    {- ^ - The registry ID where the repository was created. -}
    , _computed_repository_url :: !(TF.Attribute Text)
    {- ^ - The URL of the repository (in the form @aws_account_id.dkr.ecr.region.amazonaws.com/repositoryName@ -}
    } deriving (Show, Eq)

instance TF.ToHCL EcrRepositoryResource where
    toHCL EcrRepositoryResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.argument _name
        ]

instance HasName EcrRepositoryResource (TF.Argument Text) where
    name f s@EcrRepositoryResource{..} =
        (\a -> s { _name = a } :: EcrRepositoryResource)
             <$> f _name

instance HasComputedArn EcrRepositoryResource (TF.Attribute Text) where
    computedArn f s@EcrRepositoryResource{..} =
        (\a -> s { _computed_arn = a } :: EcrRepositoryResource)
             <$> f _computed_arn

instance HasComputedName EcrRepositoryResource (TF.Attribute Text) where
    computedName f s@EcrRepositoryResource{..} =
        (\a -> s { _computed_name = a } :: EcrRepositoryResource)
             <$> f _computed_name

instance HasComputedRegistryId EcrRepositoryResource (TF.Attribute Text) where
    computedRegistryId f s@EcrRepositoryResource{..} =
        (\a -> s { _computed_registry_id = a } :: EcrRepositoryResource)
             <$> f _computed_registry_id

instance HasComputedRepositoryUrl EcrRepositoryResource (TF.Attribute Text) where
    computedRepositoryUrl f s@EcrRepositoryResource{..} =
        (\a -> s { _computed_repository_url = a } :: EcrRepositoryResource)
             <$> f _computed_repository_url

ecrRepositoryResource :: TF.Resource TF.AWS EcrRepositoryResource
ecrRepositoryResource =
    TF.newResource "aws_ecr_repository" $
        EcrRepositoryResource {
            _name = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_name = TF.Compute "name"
            , _computed_registry_id = TF.Compute "registry_id"
            , _computed_repository_url = TF.Compute "repository_url"
            }

{- | The @aws_ecs_cluster@ AWS resource.

Provides an ECS cluster.
-}
data EcsClusterResource = EcsClusterResource {
      _name         :: !(TF.Argument Text)
    {- ^ (Required) The name of the cluster (up to 255 letters, numbers, hyphens, and underscores) -}
    , _computed_arn :: !(TF.Attribute Text)
    {- ^ - The Amazon Resource Name (ARN) that identifies the cluster -}
    , _computed_id  :: !(TF.Attribute Text)
    {- ^ - The Amazon Resource Name (ARN) that identifies the cluster -}
    } deriving (Show, Eq)

instance TF.ToHCL EcsClusterResource where
    toHCL EcsClusterResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.argument _name
        ]

instance HasName EcsClusterResource (TF.Argument Text) where
    name f s@EcsClusterResource{..} =
        (\a -> s { _name = a } :: EcsClusterResource)
             <$> f _name

instance HasComputedArn EcsClusterResource (TF.Attribute Text) where
    computedArn f s@EcsClusterResource{..} =
        (\a -> s { _computed_arn = a } :: EcsClusterResource)
             <$> f _computed_arn

instance HasComputedId EcsClusterResource (TF.Attribute Text) where
    computedId f s@EcsClusterResource{..} =
        (\a -> s { _computed_id = a } :: EcsClusterResource)
             <$> f _computed_id

ecsClusterResource :: TF.Resource TF.AWS EcsClusterResource
ecsClusterResource =
    TF.newResource "aws_ecs_cluster" $
        EcsClusterResource {
            _name = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_ecs_service@ AWS resource.

-> Note: To prevent a race condition during service deletion, make sure to
set @depends_on@ to the related @aws_iam_role_policy@ ; otherwise, the
policy may be destroyed too soon and the ECS service will then get stuck in
the @DRAINING@ state. Provides an ECS service - effectively a task that is
expected to run until an error occurs or a user terminates it (typically a
webserver or a database). See
<https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html>
.
-}
data EcsServiceResource = EcsServiceResource {
      _cluster                            :: !(TF.Argument Text)
    {- ^ (Optional) ARN of an ECS cluster -}
    , _deployment_maximum_percent         :: !(TF.Argument Text)
    {- ^ (Optional) The upper limit (as a percentage of the service's desiredCount) of the number of running tasks that can be running in a service during a deployment. -}
    , _deployment_minimum_healthy_percent :: !(TF.Argument Text)
    {- ^ (Optional) The lower limit (as a percentage of the service's desiredCount) of the number of running tasks that must remain running and healthy in a service during a deployment. -}
    , _desired_count                      :: !(TF.Argument Text)
    {- ^ (Required) The number of instances of the task definition to place and keep running -}
    , _health_check_grace_period_seconds  :: !(TF.Argument Text)
    {- ^ (Optional) Seconds to ignore failing load balancer health checks on newly instantiated tasks to prevent premature shutdown, up to 1800. Only valid for services configured to use load balancers. -}
    , _iam_role                           :: !(TF.Argument Text)
    {- ^ (Optional) The ARN of IAM role that allows your Amazon ECS container agent to make calls to your load balancer on your behalf. This parameter is only required if you are using a load balancer with your service. -}
    , _launch_type                        :: !(TF.Argument Text)
    {- ^ (Optional) The launch type on which to run your service. The valid values are @EC2@ and @FARGATE@ . Defaults to @EC2@ . -}
    , _load_balancer                      :: !(TF.Argument Text)
    {- ^ (Optional) A load balancer block. Load balancers documented below. -}
    , _name                               :: !(TF.Argument Text)
    {- ^ (Required) The name of the service (up to 255 letters, numbers, hyphens, and underscores) -}
    , _network_configuration              :: !(TF.Argument Text)
    {- ^ (Optional) The network configuration for the service. This parameter is required for task definitions that use the awsvpc network mode to receive their own Elastic Network Interface, and it is not supported for other network modes. -}
    , _placement_constraints              :: !(TF.Argument Text)
    {- ^ (Optional) rules that are taken into consideration during task placement. Maximum number of @placement_constraints@ is @10@ . Defined below. -}
    , _placement_strategy                 :: !(TF.Argument Text)
    {- ^ (Optional) Service level strategy rules that are taken into consideration during task placement. The maximum number of @placement_strategy@ blocks is @5@ . Defined below. -}
    , _task_definition                    :: !(TF.Argument Text)
    {- ^ (Required) The family and revision ( @family:revision@ ) or full ARN of the task definition that you want to run in your service. -}
    } deriving (Show, Eq)

instance TF.ToHCL EcsServiceResource where
    toHCL EcsServiceResource{..} = TF.block $ catMaybes
        [ TF.assign "cluster" <$> TF.argument _cluster
        , TF.assign "deployment_maximum_percent" <$> TF.argument _deployment_maximum_percent
        , TF.assign "deployment_minimum_healthy_percent" <$> TF.argument _deployment_minimum_healthy_percent
        , TF.assign "desired_count" <$> TF.argument _desired_count
        , TF.assign "health_check_grace_period_seconds" <$> TF.argument _health_check_grace_period_seconds
        , TF.assign "iam_role" <$> TF.argument _iam_role
        , TF.assign "launch_type" <$> TF.argument _launch_type
        , TF.assign "load_balancer" <$> TF.argument _load_balancer
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "network_configuration" <$> TF.argument _network_configuration
        , TF.assign "placement_constraints" <$> TF.argument _placement_constraints
        , TF.assign "placement_strategy" <$> TF.argument _placement_strategy
        , TF.assign "task_definition" <$> TF.argument _task_definition
        ]

instance HasCluster EcsServiceResource (TF.Argument Text) where
    cluster f s@EcsServiceResource{..} =
        (\a -> s { _cluster = a } :: EcsServiceResource)
             <$> f _cluster

instance HasDeploymentMaximumPercent EcsServiceResource (TF.Argument Text) where
    deploymentMaximumPercent f s@EcsServiceResource{..} =
        (\a -> s { _deployment_maximum_percent = a } :: EcsServiceResource)
             <$> f _deployment_maximum_percent

instance HasDeploymentMinimumHealthyPercent EcsServiceResource (TF.Argument Text) where
    deploymentMinimumHealthyPercent f s@EcsServiceResource{..} =
        (\a -> s { _deployment_minimum_healthy_percent = a } :: EcsServiceResource)
             <$> f _deployment_minimum_healthy_percent

instance HasDesiredCount EcsServiceResource (TF.Argument Text) where
    desiredCount f s@EcsServiceResource{..} =
        (\a -> s { _desired_count = a } :: EcsServiceResource)
             <$> f _desired_count

instance HasHealthCheckGracePeriodSeconds EcsServiceResource (TF.Argument Text) where
    healthCheckGracePeriodSeconds f s@EcsServiceResource{..} =
        (\a -> s { _health_check_grace_period_seconds = a } :: EcsServiceResource)
             <$> f _health_check_grace_period_seconds

instance HasIamRole EcsServiceResource (TF.Argument Text) where
    iamRole f s@EcsServiceResource{..} =
        (\a -> s { _iam_role = a } :: EcsServiceResource)
             <$> f _iam_role

instance HasLaunchType EcsServiceResource (TF.Argument Text) where
    launchType f s@EcsServiceResource{..} =
        (\a -> s { _launch_type = a } :: EcsServiceResource)
             <$> f _launch_type

instance HasLoadBalancer EcsServiceResource (TF.Argument Text) where
    loadBalancer f s@EcsServiceResource{..} =
        (\a -> s { _load_balancer = a } :: EcsServiceResource)
             <$> f _load_balancer

instance HasName EcsServiceResource (TF.Argument Text) where
    name f s@EcsServiceResource{..} =
        (\a -> s { _name = a } :: EcsServiceResource)
             <$> f _name

instance HasNetworkConfiguration EcsServiceResource (TF.Argument Text) where
    networkConfiguration f s@EcsServiceResource{..} =
        (\a -> s { _network_configuration = a } :: EcsServiceResource)
             <$> f _network_configuration

instance HasPlacementConstraints EcsServiceResource (TF.Argument Text) where
    placementConstraints f s@EcsServiceResource{..} =
        (\a -> s { _placement_constraints = a } :: EcsServiceResource)
             <$> f _placement_constraints

instance HasPlacementStrategy EcsServiceResource (TF.Argument Text) where
    placementStrategy f s@EcsServiceResource{..} =
        (\a -> s { _placement_strategy = a } :: EcsServiceResource)
             <$> f _placement_strategy

instance HasTaskDefinition EcsServiceResource (TF.Argument Text) where
    taskDefinition f s@EcsServiceResource{..} =
        (\a -> s { _task_definition = a } :: EcsServiceResource)
             <$> f _task_definition

ecsServiceResource :: TF.Resource TF.AWS EcsServiceResource
ecsServiceResource =
    TF.newResource "aws_ecs_service" $
        EcsServiceResource {
            _cluster = TF.Nil
            , _deployment_maximum_percent = TF.Nil
            , _deployment_minimum_healthy_percent = TF.Nil
            , _desired_count = TF.Nil
            , _health_check_grace_period_seconds = TF.Nil
            , _iam_role = TF.Nil
            , _launch_type = TF.Nil
            , _load_balancer = TF.Nil
            , _name = TF.Nil
            , _network_configuration = TF.Nil
            , _placement_constraints = TF.Nil
            , _placement_strategy = TF.Nil
            , _task_definition = TF.Nil
            }

{- | The @aws_ecs_task_definition@ AWS resource.

Provides an ECS task definition to be used in @aws_ecs_service@ .
-}
data EcsTaskDefinitionResource = EcsTaskDefinitionResource {
      _container_definitions :: !(TF.Argument Text)
    {- ^ (Required) A list of valid [container definitions] (http://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html) provided as a single valid JSON document. Please note that you should only provide values that are part of the container definition document. For a detailed description of what parameters are available, see the [Task Definition Parameters] (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html) section from the official <https://docs.aws.amazon.com/AmazonECS/latest/developerguide> . -}
    , _family'               :: !(TF.Argument Text)
    {- ^ (Required) A unique name for your task definition. -}
    } deriving (Show, Eq)

instance TF.ToHCL EcsTaskDefinitionResource where
    toHCL EcsTaskDefinitionResource{..} = TF.block $ catMaybes
        [ TF.assign "container_definitions" <$> TF.argument _container_definitions
        , TF.assign "family" <$> TF.argument _family'
        ]

instance HasContainerDefinitions EcsTaskDefinitionResource (TF.Argument Text) where
    containerDefinitions f s@EcsTaskDefinitionResource{..} =
        (\a -> s { _container_definitions = a } :: EcsTaskDefinitionResource)
             <$> f _container_definitions

instance HasFamily' EcsTaskDefinitionResource (TF.Argument Text) where
    family' f s@EcsTaskDefinitionResource{..} =
        (\a -> s { _family' = a } :: EcsTaskDefinitionResource)
             <$> f _family'

ecsTaskDefinitionResource :: TF.Resource TF.AWS EcsTaskDefinitionResource
ecsTaskDefinitionResource =
    TF.newResource "aws_ecs_task_definition" $
        EcsTaskDefinitionResource {
            _container_definitions = TF.Nil
            , _family' = TF.Nil
            }

{- | The @aws_efs_file_system@ AWS resource.

Provides an Elastic File System (EFS) resource.
-}
data EfsFileSystemResource = EfsFileSystemResource {
      _creation_token      :: !(TF.Argument Text)
    {- ^ (Optional) A unique name (a maximum of 64 characters are allowed) used as reference when creating the Elastic File System to ensure idempotent file system creation. By default generated by Terraform. See [Elastic File System] (http://docs.aws.amazon.com/efs/latest/ug/) user guide for more information. -}
    , _encrypted           :: !(TF.Argument Text)
    {- ^ (Optional) If true, the disk will be encrypted. -}
    , _kms_key_id          :: !(TF.Argument Text)
    {- ^ (Optional) The ARN for the KMS encryption key. When specifying kms_key_id, encrypted needs to be set to true. -}
    , _performance_mode    :: !(TF.Argument Text)
    {- ^ (Optional) The file system performance mode. Can be either @"generalPurpose"@ or @"maxIO"@ (Default: @"generalPurpose"@ ). -}
    , _reference_name      :: !(TF.Argument Text)
    {- ^ - DEPRECATED (Optional) A reference name used when creating the @Creation Token@ which Amazon EFS uses to ensure idempotent file system creation. By default generated by Terraform. -}
    , _tags                :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the file system. -}
    , _computed_dns_name   :: !(TF.Attribute Text)
    {- ^ - The DNS name for the filesystem per <http://docs.aws.amazon.com/efs/latest/ug/mounting-fs-mount-cmd-dns-name.html> . -}
    , _computed_id         :: !(TF.Attribute Text)
    {- ^ - The ID that identifies the file system (e.g. fs-ccfc0d65). -}
    , _computed_kms_key_id :: !(TF.Attribute Text)
    {- ^ - The ARN for the KMS encryption key. -}
    } deriving (Show, Eq)

instance TF.ToHCL EfsFileSystemResource where
    toHCL EfsFileSystemResource{..} = TF.block $ catMaybes
        [ TF.assign "creation_token" <$> TF.argument _creation_token
        , TF.assign "encrypted" <$> TF.argument _encrypted
        , TF.assign "kms_key_id" <$> TF.argument _kms_key_id
        , TF.assign "performance_mode" <$> TF.argument _performance_mode
        , TF.assign "reference_name" <$> TF.argument _reference_name
        , TF.assign "tags" <$> TF.argument _tags
        ]

instance HasCreationToken EfsFileSystemResource (TF.Argument Text) where
    creationToken f s@EfsFileSystemResource{..} =
        (\a -> s { _creation_token = a } :: EfsFileSystemResource)
             <$> f _creation_token

instance HasEncrypted EfsFileSystemResource (TF.Argument Text) where
    encrypted f s@EfsFileSystemResource{..} =
        (\a -> s { _encrypted = a } :: EfsFileSystemResource)
             <$> f _encrypted

instance HasKmsKeyId EfsFileSystemResource (TF.Argument Text) where
    kmsKeyId f s@EfsFileSystemResource{..} =
        (\a -> s { _kms_key_id = a } :: EfsFileSystemResource)
             <$> f _kms_key_id

instance HasPerformanceMode EfsFileSystemResource (TF.Argument Text) where
    performanceMode f s@EfsFileSystemResource{..} =
        (\a -> s { _performance_mode = a } :: EfsFileSystemResource)
             <$> f _performance_mode

instance HasReferenceName EfsFileSystemResource (TF.Argument Text) where
    referenceName f s@EfsFileSystemResource{..} =
        (\a -> s { _reference_name = a } :: EfsFileSystemResource)
             <$> f _reference_name

instance HasTags EfsFileSystemResource (TF.Argument TF.Tags) where
    tags f s@EfsFileSystemResource{..} =
        (\a -> s { _tags = a } :: EfsFileSystemResource)
             <$> f _tags

instance HasComputedDnsName EfsFileSystemResource (TF.Attribute Text) where
    computedDnsName f s@EfsFileSystemResource{..} =
        (\a -> s { _computed_dns_name = a } :: EfsFileSystemResource)
             <$> f _computed_dns_name

instance HasComputedId EfsFileSystemResource (TF.Attribute Text) where
    computedId f s@EfsFileSystemResource{..} =
        (\a -> s { _computed_id = a } :: EfsFileSystemResource)
             <$> f _computed_id

instance HasComputedKmsKeyId EfsFileSystemResource (TF.Attribute Text) where
    computedKmsKeyId f s@EfsFileSystemResource{..} =
        (\a -> s { _computed_kms_key_id = a } :: EfsFileSystemResource)
             <$> f _computed_kms_key_id

efsFileSystemResource :: TF.Resource TF.AWS EfsFileSystemResource
efsFileSystemResource =
    TF.newResource "aws_efs_file_system" $
        EfsFileSystemResource {
            _creation_token = TF.Nil
            , _encrypted = TF.Nil
            , _kms_key_id = TF.Nil
            , _performance_mode = TF.Nil
            , _reference_name = TF.Nil
            , _tags = TF.Nil
            , _computed_dns_name = TF.Compute "dns_name"
            , _computed_id = TF.Compute "id"
            , _computed_kms_key_id = TF.Compute "kms_key_id"
            }

{- | The @aws_efs_mount_target@ AWS resource.

Provides an Elastic File System (EFS) mount target.
-}
data EfsMountTargetResource = EfsMountTargetResource {
      _file_system_id                :: !(TF.Argument Text)
    {- ^ (Required) The ID of the file system for which the mount target is intended. -}
    , _ip_address                    :: !(TF.Argument Text)
    {- ^ (Optional) The address (within the address range of the specified subnet) at which the file system may be mounted via the mount target. -}
    , _security_groups               :: !(TF.Argument Text)
    {- ^ (Optional) A list of up to 5 VPC security group IDs (that must be for the same VPC as subnet specified) in effect for the mount target. -}
    , _subnet_id                     :: !(TF.Argument Text)
    {- ^ (Required) The ID of the subnet to add the mount target in. -}
    , _computed_dns_name             :: !(TF.Attribute Text)
    {- ^ - The DNS name for the given subnet/AZ per <http://docs.aws.amazon.com/efs/latest/ug/mounting-fs-mount-cmd-dns-name.html> . -}
    , _computed_id                   :: !(TF.Attribute Text)
    {- ^ - The ID of the mount target. -}
    , _computed_network_interface_id :: !(TF.Attribute Text)
    {- ^ - The ID of the network interface that Amazon EFS created when it created the mount target. -}
    } deriving (Show, Eq)

instance TF.ToHCL EfsMountTargetResource where
    toHCL EfsMountTargetResource{..} = TF.block $ catMaybes
        [ TF.assign "file_system_id" <$> TF.argument _file_system_id
        , TF.assign "ip_address" <$> TF.argument _ip_address
        , TF.assign "security_groups" <$> TF.argument _security_groups
        , TF.assign "subnet_id" <$> TF.argument _subnet_id
        ]

instance HasFileSystemId EfsMountTargetResource (TF.Argument Text) where
    fileSystemId f s@EfsMountTargetResource{..} =
        (\a -> s { _file_system_id = a } :: EfsMountTargetResource)
             <$> f _file_system_id

instance HasIpAddress EfsMountTargetResource (TF.Argument Text) where
    ipAddress f s@EfsMountTargetResource{..} =
        (\a -> s { _ip_address = a } :: EfsMountTargetResource)
             <$> f _ip_address

instance HasSecurityGroups EfsMountTargetResource (TF.Argument Text) where
    securityGroups f s@EfsMountTargetResource{..} =
        (\a -> s { _security_groups = a } :: EfsMountTargetResource)
             <$> f _security_groups

instance HasSubnetId EfsMountTargetResource (TF.Argument Text) where
    subnetId f s@EfsMountTargetResource{..} =
        (\a -> s { _subnet_id = a } :: EfsMountTargetResource)
             <$> f _subnet_id

instance HasComputedDnsName EfsMountTargetResource (TF.Attribute Text) where
    computedDnsName f s@EfsMountTargetResource{..} =
        (\a -> s { _computed_dns_name = a } :: EfsMountTargetResource)
             <$> f _computed_dns_name

instance HasComputedId EfsMountTargetResource (TF.Attribute Text) where
    computedId f s@EfsMountTargetResource{..} =
        (\a -> s { _computed_id = a } :: EfsMountTargetResource)
             <$> f _computed_id

instance HasComputedNetworkInterfaceId EfsMountTargetResource (TF.Attribute Text) where
    computedNetworkInterfaceId f s@EfsMountTargetResource{..} =
        (\a -> s { _computed_network_interface_id = a } :: EfsMountTargetResource)
             <$> f _computed_network_interface_id

efsMountTargetResource :: TF.Resource TF.AWS EfsMountTargetResource
efsMountTargetResource =
    TF.newResource "aws_efs_mount_target" $
        EfsMountTargetResource {
            _file_system_id = TF.Nil
            , _ip_address = TF.Nil
            , _security_groups = TF.Nil
            , _subnet_id = TF.Nil
            , _computed_dns_name = TF.Compute "dns_name"
            , _computed_id = TF.Compute "id"
            , _computed_network_interface_id = TF.Compute "network_interface_id"
            }

{- | The @aws_egress_only_internet_gateway@ AWS resource.

[IPv6 only] Creates an egress-only Internet gateway for your VPC. An
egress-only Internet gateway is used to enable outbound communication over
IPv6 from instances in your VPC to the Internet, and prevents hosts outside
of your VPC from initiating an IPv6 connection with your instance.
-}
data EgressOnlyInternetGatewayResource = EgressOnlyInternetGatewayResource {
      _vpc_id      :: !(TF.Argument Text)
    {- ^ (Required) The VPC ID to create in. -}
    , _computed_id :: !(TF.Attribute Text)
    {- ^ - The ID of the Egress Only Internet Gateway. -}
    } deriving (Show, Eq)

instance TF.ToHCL EgressOnlyInternetGatewayResource where
    toHCL EgressOnlyInternetGatewayResource{..} = TF.block $ catMaybes
        [ TF.assign "vpc_id" <$> TF.argument _vpc_id
        ]

instance HasVpcId EgressOnlyInternetGatewayResource (TF.Argument Text) where
    vpcId f s@EgressOnlyInternetGatewayResource{..} =
        (\a -> s { _vpc_id = a } :: EgressOnlyInternetGatewayResource)
             <$> f _vpc_id

instance HasComputedId EgressOnlyInternetGatewayResource (TF.Attribute Text) where
    computedId f s@EgressOnlyInternetGatewayResource{..} =
        (\a -> s { _computed_id = a } :: EgressOnlyInternetGatewayResource)
             <$> f _computed_id

egressOnlyInternetGatewayResource :: TF.Resource TF.AWS EgressOnlyInternetGatewayResource
egressOnlyInternetGatewayResource =
    TF.newResource "aws_egress_only_internet_gateway" $
        EgressOnlyInternetGatewayResource {
            _vpc_id = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_eip_association@ AWS resource.

Provides an AWS EIP Association as a top level resource, to associate and
disassociate Elastic IPs from AWS Instances and Network Interfaces. ~> NOTE:
@aws_eip_association@ is useful in scenarios where EIPs are either
pre-existing or distributed to customers or users and therefore cannot be
changed.
-}
data EipAssociationResource = EipAssociationResource {
      _allocation_id                 :: !(TF.Argument Text)
    {- ^ (Optional) The allocation ID. This is required for EC2-VPC. -}
    , _allow_reassociation           :: !(TF.Argument Text)
    {- ^ (Optional, Boolean) Whether to allow an Elastic IP to be re-associated. Defaults to @true@ in VPC. -}
    , _instance_id                   :: !(TF.Argument Text)
    {- ^ (Optional) The ID of the instance. This is required for EC2-Classic. For EC2-VPC, you can specify either the instance ID or the network interface ID, but not both. The operation fails if you specify an instance ID unless exactly one network interface is attached. -}
    , _network_interface_id          :: !(TF.Argument Text)
    {- ^ (Optional) The ID of the network interface. If the instance has more than one network interface, you must specify a network interface ID. -}
    , _private_ip_address            :: !(TF.Argument Text)
    {- ^ (Optional) The primary or secondary private IP address to associate with the Elastic IP address. If no private IP address is specified, the Elastic IP address is associated with the primary private IP address. -}
    , _public_ip                     :: !(TF.Argument Text)
    {- ^ (Optional) The Elastic IP address. This is required for EC2-Classic. -}
    , _computed_allocation_id        :: !(TF.Attribute Text)
    {- ^ - As above -}
    , _computed_association_id       :: !(TF.Attribute Text)
    {- ^ - The ID that represents the association of the Elastic IP address with an instance. -}
    , _computed_instance_id          :: !(TF.Attribute Text)
    {- ^ - As above -}
    , _computed_network_interface_id :: !(TF.Attribute Text)
    {- ^ - As above -}
    , _computed_private_ip_address   :: !(TF.Attribute Text)
    {- ^ - As above -}
    , _computed_public_ip            :: !(TF.Attribute Text)
    {- ^ - As above -}
    } deriving (Show, Eq)

instance TF.ToHCL EipAssociationResource where
    toHCL EipAssociationResource{..} = TF.block $ catMaybes
        [ TF.assign "allocation_id" <$> TF.argument _allocation_id
        , TF.assign "allow_reassociation" <$> TF.argument _allow_reassociation
        , TF.assign "instance_id" <$> TF.argument _instance_id
        , TF.assign "network_interface_id" <$> TF.argument _network_interface_id
        , TF.assign "private_ip_address" <$> TF.argument _private_ip_address
        , TF.assign "public_ip" <$> TF.argument _public_ip
        ]

instance HasAllocationId EipAssociationResource (TF.Argument Text) where
    allocationId f s@EipAssociationResource{..} =
        (\a -> s { _allocation_id = a } :: EipAssociationResource)
             <$> f _allocation_id

instance HasAllowReassociation EipAssociationResource (TF.Argument Text) where
    allowReassociation f s@EipAssociationResource{..} =
        (\a -> s { _allow_reassociation = a } :: EipAssociationResource)
             <$> f _allow_reassociation

instance HasInstanceId EipAssociationResource (TF.Argument Text) where
    instanceId f s@EipAssociationResource{..} =
        (\a -> s { _instance_id = a } :: EipAssociationResource)
             <$> f _instance_id

instance HasNetworkInterfaceId EipAssociationResource (TF.Argument Text) where
    networkInterfaceId f s@EipAssociationResource{..} =
        (\a -> s { _network_interface_id = a } :: EipAssociationResource)
             <$> f _network_interface_id

instance HasPrivateIpAddress EipAssociationResource (TF.Argument Text) where
    privateIpAddress f s@EipAssociationResource{..} =
        (\a -> s { _private_ip_address = a } :: EipAssociationResource)
             <$> f _private_ip_address

instance HasPublicIp EipAssociationResource (TF.Argument Text) where
    publicIp f s@EipAssociationResource{..} =
        (\a -> s { _public_ip = a } :: EipAssociationResource)
             <$> f _public_ip

instance HasComputedAllocationId EipAssociationResource (TF.Attribute Text) where
    computedAllocationId f s@EipAssociationResource{..} =
        (\a -> s { _computed_allocation_id = a } :: EipAssociationResource)
             <$> f _computed_allocation_id

instance HasComputedAssociationId EipAssociationResource (TF.Attribute Text) where
    computedAssociationId f s@EipAssociationResource{..} =
        (\a -> s { _computed_association_id = a } :: EipAssociationResource)
             <$> f _computed_association_id

instance HasComputedInstanceId EipAssociationResource (TF.Attribute Text) where
    computedInstanceId f s@EipAssociationResource{..} =
        (\a -> s { _computed_instance_id = a } :: EipAssociationResource)
             <$> f _computed_instance_id

instance HasComputedNetworkInterfaceId EipAssociationResource (TF.Attribute Text) where
    computedNetworkInterfaceId f s@EipAssociationResource{..} =
        (\a -> s { _computed_network_interface_id = a } :: EipAssociationResource)
             <$> f _computed_network_interface_id

instance HasComputedPrivateIpAddress EipAssociationResource (TF.Attribute Text) where
    computedPrivateIpAddress f s@EipAssociationResource{..} =
        (\a -> s { _computed_private_ip_address = a } :: EipAssociationResource)
             <$> f _computed_private_ip_address

instance HasComputedPublicIp EipAssociationResource (TF.Attribute Text) where
    computedPublicIp f s@EipAssociationResource{..} =
        (\a -> s { _computed_public_ip = a } :: EipAssociationResource)
             <$> f _computed_public_ip

eipAssociationResource :: TF.Resource TF.AWS EipAssociationResource
eipAssociationResource =
    TF.newResource "aws_eip_association" $
        EipAssociationResource {
            _allocation_id = TF.Nil
            , _allow_reassociation = TF.Nil
            , _instance_id = TF.Nil
            , _network_interface_id = TF.Nil
            , _private_ip_address = TF.Nil
            , _public_ip = TF.Nil
            , _computed_allocation_id = TF.Compute "allocation_id"
            , _computed_association_id = TF.Compute "association_id"
            , _computed_instance_id = TF.Compute "instance_id"
            , _computed_network_interface_id = TF.Compute "network_interface_id"
            , _computed_private_ip_address = TF.Compute "private_ip_address"
            , _computed_public_ip = TF.Compute "public_ip"
            }

{- | The @aws_eip@ AWS resource.

Provides an Elastic IP resource. ~> Note: EIP may require IGW to exist prior
to association. Use @depends_on@ to set an explicit dependency on the IGW.
-}
data EipResource = EipResource {
      _associate_with_private_ip          :: !(TF.Argument Text)
    {- ^ (Optional) A user specified primary or secondary private IP address to associate with the Elastic IP address. If no private IP address is specified, the Elastic IP address is associated with the primary private IP address. -}
    , _instance'                          :: !(TF.Argument Text)
    {- ^ (Optional) EC2 instance ID. -}
    , _network_interface                  :: !(TF.Argument Text)
    {- ^ (Optional) Network interface ID to associate with. -}
    , _tags                               :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _vpc                                :: !(TF.Argument Text)
    {- ^ (Optional) Boolean if the EIP is in a VPC or not. -}
    , _computed_associate_with_private_ip :: !(TF.Attribute Text)
    {- ^ - Contains the user specified private IP address (if in VPC). -}
    , _computed_id                        :: !(TF.Attribute Text)
    {- ^ - Contains the EIP allocation ID. -}
    , _computed_instance'                 :: !(TF.Attribute Text)
    {- ^ - Contains the ID of the attached instance. -}
    , _computed_network_interface         :: !(TF.Attribute Text)
    {- ^ - Contains the ID of the attached network interface. -}
    , _computed_private_ip                :: !(TF.Attribute Text)
    {- ^ - Contains the private IP address (if in VPC). -}
    , _computed_public_ip                 :: !(TF.Attribute Text)
    {- ^ - Contains the public IP address. -}
    } deriving (Show, Eq)

instance TF.ToHCL EipResource where
    toHCL EipResource{..} = TF.block $ catMaybes
        [ TF.assign "associate_with_private_ip" <$> TF.argument _associate_with_private_ip
        , TF.assign "instance" <$> TF.argument _instance'
        , TF.assign "network_interface" <$> TF.argument _network_interface
        , TF.assign "tags" <$> TF.argument _tags
        , TF.assign "vpc" <$> TF.argument _vpc
        ]

instance HasAssociateWithPrivateIp EipResource (TF.Argument Text) where
    associateWithPrivateIp f s@EipResource{..} =
        (\a -> s { _associate_with_private_ip = a } :: EipResource)
             <$> f _associate_with_private_ip

instance HasInstance' EipResource (TF.Argument Text) where
    instance' f s@EipResource{..} =
        (\a -> s { _instance' = a } :: EipResource)
             <$> f _instance'

instance HasNetworkInterface EipResource (TF.Argument Text) where
    networkInterface f s@EipResource{..} =
        (\a -> s { _network_interface = a } :: EipResource)
             <$> f _network_interface

instance HasTags EipResource (TF.Argument TF.Tags) where
    tags f s@EipResource{..} =
        (\a -> s { _tags = a } :: EipResource)
             <$> f _tags

instance HasVpc EipResource (TF.Argument Text) where
    vpc f s@EipResource{..} =
        (\a -> s { _vpc = a } :: EipResource)
             <$> f _vpc

instance HasComputedAssociateWithPrivateIp EipResource (TF.Attribute Text) where
    computedAssociateWithPrivateIp f s@EipResource{..} =
        (\a -> s { _computed_associate_with_private_ip = a } :: EipResource)
             <$> f _computed_associate_with_private_ip

instance HasComputedId EipResource (TF.Attribute Text) where
    computedId f s@EipResource{..} =
        (\a -> s { _computed_id = a } :: EipResource)
             <$> f _computed_id

instance HasComputedInstance' EipResource (TF.Attribute Text) where
    computedInstance' f s@EipResource{..} =
        (\a -> s { _computed_instance' = a } :: EipResource)
             <$> f _computed_instance'

instance HasComputedNetworkInterface EipResource (TF.Attribute Text) where
    computedNetworkInterface f s@EipResource{..} =
        (\a -> s { _computed_network_interface = a } :: EipResource)
             <$> f _computed_network_interface

instance HasComputedPrivateIp EipResource (TF.Attribute Text) where
    computedPrivateIp f s@EipResource{..} =
        (\a -> s { _computed_private_ip = a } :: EipResource)
             <$> f _computed_private_ip

instance HasComputedPublicIp EipResource (TF.Attribute Text) where
    computedPublicIp f s@EipResource{..} =
        (\a -> s { _computed_public_ip = a } :: EipResource)
             <$> f _computed_public_ip

eipResource :: TF.Resource TF.AWS EipResource
eipResource =
    TF.newResource "aws_eip" $
        EipResource {
            _associate_with_private_ip = TF.Nil
            , _instance' = TF.Nil
            , _network_interface = TF.Nil
            , _tags = TF.Nil
            , _vpc = TF.Nil
            , _computed_associate_with_private_ip = TF.Compute "associate_with_private_ip"
            , _computed_id = TF.Compute "id"
            , _computed_instance' = TF.Compute "instance"
            , _computed_network_interface = TF.Compute "network_interface"
            , _computed_private_ip = TF.Compute "private_ip"
            , _computed_public_ip = TF.Compute "public_ip"
            }

{- | The @aws_elastic_beanstalk_application@ AWS resource.

Provides an Elastic Beanstalk Application Resource. Elastic Beanstalk allows
you to deploy and manage applications in the AWS cloud without worrying
about the infrastructure that runs those applications. This resource creates
an application that has one configuration template named @default@ , and no
application versions
-}
data ElasticBeanstalkApplicationResource = ElasticBeanstalkApplicationResource {
      _description :: !(TF.Argument Text)
    {- ^ (Optional) Short description of the application -}
    , _name        :: !(TF.Argument Text)
    {- ^ (Required) The name of the application, must be unique within your account -}
    } deriving (Show, Eq)

instance TF.ToHCL ElasticBeanstalkApplicationResource where
    toHCL ElasticBeanstalkApplicationResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.argument _description
        , TF.assign "name" <$> TF.argument _name
        ]

instance HasDescription ElasticBeanstalkApplicationResource (TF.Argument Text) where
    description f s@ElasticBeanstalkApplicationResource{..} =
        (\a -> s { _description = a } :: ElasticBeanstalkApplicationResource)
             <$> f _description

instance HasName ElasticBeanstalkApplicationResource (TF.Argument Text) where
    name f s@ElasticBeanstalkApplicationResource{..} =
        (\a -> s { _name = a } :: ElasticBeanstalkApplicationResource)
             <$> f _name

elasticBeanstalkApplicationResource :: TF.Resource TF.AWS ElasticBeanstalkApplicationResource
elasticBeanstalkApplicationResource =
    TF.newResource "aws_elastic_beanstalk_application" $
        ElasticBeanstalkApplicationResource {
            _description = TF.Nil
            , _name = TF.Nil
            }

{- | The @aws_elastic_beanstalk_application_version@ AWS resource.

Provides an Elastic Beanstalk Application Version Resource. Elastic
Beanstalk allows you to deploy and manage applications in the AWS cloud
without worrying about the infrastructure that runs those applications. This
resource creates a Beanstalk Application Version that can be deployed to a
Beanstalk Environment. ~> NOTE on Application Version Resource: When using
the Application Version resource with multiple
<elastic_beanstalk_environment.html> it is possible that an error may be
returned when attempting to delete an Application Version while it is still
in use by a different environment. To work around this you can:
-}
data ElasticBeanstalkApplicationVersionResource = ElasticBeanstalkApplicationVersionResource {
      _application   :: !(TF.Argument Text)
    {- ^ (Required) Name of the Beanstalk Application the version is associated with. -}
    , _bucket        :: !(TF.Argument Text)
    {- ^ (Required) S3 bucket that contains the Application Version source bundle. -}
    , _description   :: !(TF.Argument Text)
    {- ^ (Optional) Short description of the Application Version. -}
    , _force_delete  :: !(TF.Argument Text)
    {- ^ (Optional) On delete, force an Application Version to be deleted when it may be in use by multiple Elastic Beanstalk Environments. -}
    , _key           :: !(TF.Argument Text)
    {- ^ (Required) S3 object that is the Application Version source bundle. -}
    , _name          :: !(TF.Argument Text)
    {- ^ (Required) A unique name for the this Application Version. -}
    , _computed_name :: !(TF.Attribute Text)
    {- ^ - The Application Version name. -}
    } deriving (Show, Eq)

instance TF.ToHCL ElasticBeanstalkApplicationVersionResource where
    toHCL ElasticBeanstalkApplicationVersionResource{..} = TF.block $ catMaybes
        [ TF.assign "application" <$> TF.argument _application
        , TF.assign "bucket" <$> TF.argument _bucket
        , TF.assign "description" <$> TF.argument _description
        , TF.assign "force_delete" <$> TF.argument _force_delete
        , TF.assign "key" <$> TF.argument _key
        , TF.assign "name" <$> TF.argument _name
        ]

instance HasApplication ElasticBeanstalkApplicationVersionResource (TF.Argument Text) where
    application f s@ElasticBeanstalkApplicationVersionResource{..} =
        (\a -> s { _application = a } :: ElasticBeanstalkApplicationVersionResource)
             <$> f _application

instance HasBucket ElasticBeanstalkApplicationVersionResource (TF.Argument Text) where
    bucket f s@ElasticBeanstalkApplicationVersionResource{..} =
        (\a -> s { _bucket = a } :: ElasticBeanstalkApplicationVersionResource)
             <$> f _bucket

instance HasDescription ElasticBeanstalkApplicationVersionResource (TF.Argument Text) where
    description f s@ElasticBeanstalkApplicationVersionResource{..} =
        (\a -> s { _description = a } :: ElasticBeanstalkApplicationVersionResource)
             <$> f _description

instance HasForceDelete ElasticBeanstalkApplicationVersionResource (TF.Argument Text) where
    forceDelete f s@ElasticBeanstalkApplicationVersionResource{..} =
        (\a -> s { _force_delete = a } :: ElasticBeanstalkApplicationVersionResource)
             <$> f _force_delete

instance HasKey ElasticBeanstalkApplicationVersionResource (TF.Argument Text) where
    key f s@ElasticBeanstalkApplicationVersionResource{..} =
        (\a -> s { _key = a } :: ElasticBeanstalkApplicationVersionResource)
             <$> f _key

instance HasName ElasticBeanstalkApplicationVersionResource (TF.Argument Text) where
    name f s@ElasticBeanstalkApplicationVersionResource{..} =
        (\a -> s { _name = a } :: ElasticBeanstalkApplicationVersionResource)
             <$> f _name

instance HasComputedName ElasticBeanstalkApplicationVersionResource (TF.Attribute Text) where
    computedName f s@ElasticBeanstalkApplicationVersionResource{..} =
        (\a -> s { _computed_name = a } :: ElasticBeanstalkApplicationVersionResource)
             <$> f _computed_name

elasticBeanstalkApplicationVersionResource :: TF.Resource TF.AWS ElasticBeanstalkApplicationVersionResource
elasticBeanstalkApplicationVersionResource =
    TF.newResource "aws_elastic_beanstalk_application_version" $
        ElasticBeanstalkApplicationVersionResource {
            _application = TF.Nil
            , _bucket = TF.Nil
            , _description = TF.Nil
            , _force_delete = TF.Nil
            , _key = TF.Nil
            , _name = TF.Nil
            , _computed_name = TF.Compute "name"
            }

{- | The @aws_elastic_beanstalk_configuration_template@ AWS resource.

Provides an Elastic Beanstalk Configuration Template, which are associated
with a specific application and are used to deploy different versions of the
application with the same configuration settings.
-}
data ElasticBeanstalkConfigurationTemplateResource = ElasticBeanstalkConfigurationTemplateResource {
      _application         :: !(TF.Argument Text)
    {- ^ – (Required) name of the application to associate with this configuration template -}
    , _description         :: !(TF.Argument Text)
    {- ^ (Optional) Short description of the Template -}
    , _environment_id      :: !(TF.Argument Text)
    {- ^ – (Optional) The ID of the environment used with this configuration template -}
    , _name                :: !(TF.Argument Text)
    {- ^ (Required) A unique name for this Template. -}
    , _setting             :: !(TF.Argument Text)
    {- ^ – (Optional) Option settings to configure the new Environment. These override specific values that are set as defaults. The format is detailed below in <#option-settings> -}
    , _solution_stack_name :: !(TF.Argument Text)
    {- ^ – (Optional) A solution stack to base your Template off of. Example stacks can be found in the <https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html> -}
    } deriving (Show, Eq)

instance TF.ToHCL ElasticBeanstalkConfigurationTemplateResource where
    toHCL ElasticBeanstalkConfigurationTemplateResource{..} = TF.block $ catMaybes
        [ TF.assign "application" <$> TF.argument _application
        , TF.assign "description" <$> TF.argument _description
        , TF.assign "environment_id" <$> TF.argument _environment_id
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "setting" <$> TF.argument _setting
        , TF.assign "solution_stack_name" <$> TF.argument _solution_stack_name
        ]

instance HasApplication ElasticBeanstalkConfigurationTemplateResource (TF.Argument Text) where
    application f s@ElasticBeanstalkConfigurationTemplateResource{..} =
        (\a -> s { _application = a } :: ElasticBeanstalkConfigurationTemplateResource)
             <$> f _application

instance HasDescription ElasticBeanstalkConfigurationTemplateResource (TF.Argument Text) where
    description f s@ElasticBeanstalkConfigurationTemplateResource{..} =
        (\a -> s { _description = a } :: ElasticBeanstalkConfigurationTemplateResource)
             <$> f _description

instance HasEnvironmentId ElasticBeanstalkConfigurationTemplateResource (TF.Argument Text) where
    environmentId f s@ElasticBeanstalkConfigurationTemplateResource{..} =
        (\a -> s { _environment_id = a } :: ElasticBeanstalkConfigurationTemplateResource)
             <$> f _environment_id

instance HasName ElasticBeanstalkConfigurationTemplateResource (TF.Argument Text) where
    name f s@ElasticBeanstalkConfigurationTemplateResource{..} =
        (\a -> s { _name = a } :: ElasticBeanstalkConfigurationTemplateResource)
             <$> f _name

instance HasSetting ElasticBeanstalkConfigurationTemplateResource (TF.Argument Text) where
    setting f s@ElasticBeanstalkConfigurationTemplateResource{..} =
        (\a -> s { _setting = a } :: ElasticBeanstalkConfigurationTemplateResource)
             <$> f _setting

instance HasSolutionStackName ElasticBeanstalkConfigurationTemplateResource (TF.Argument Text) where
    solutionStackName f s@ElasticBeanstalkConfigurationTemplateResource{..} =
        (\a -> s { _solution_stack_name = a } :: ElasticBeanstalkConfigurationTemplateResource)
             <$> f _solution_stack_name

elasticBeanstalkConfigurationTemplateResource :: TF.Resource TF.AWS ElasticBeanstalkConfigurationTemplateResource
elasticBeanstalkConfigurationTemplateResource =
    TF.newResource "aws_elastic_beanstalk_configuration_template" $
        ElasticBeanstalkConfigurationTemplateResource {
            _application = TF.Nil
            , _description = TF.Nil
            , _environment_id = TF.Nil
            , _name = TF.Nil
            , _setting = TF.Nil
            , _solution_stack_name = TF.Nil
            }

{- | The @aws_elastic_beanstalk_environment@ AWS resource.

Provides an Elastic Beanstalk Environment Resource. Elastic Beanstalk allows
you to deploy and manage applications in the AWS cloud without worrying
about the infrastructure that runs those applications. Environments are
often things such as @development@ , @integration@ , or @production@ .
-}
data ElasticBeanstalkEnvironmentResource = ElasticBeanstalkEnvironmentResource {
      _application            :: !(TF.Argument Text)
    {- ^ – (Required) Name of the application that contains the version to be deployed -}
    , _cname_prefix           :: !(TF.Argument Text)
    {- ^ (Optional) Prefix to use for the fully qualified DNS name of the Environment. -}
    , _description            :: !(TF.Argument Text)
    {- ^ (Optional) Short description of the Environment -}
    , _name                   :: !(TF.Argument Text)
    {- ^ (Required) A unique name for this Environment. This name is used in the application URL -}
    , _poll_interval          :: !(TF.Argument Text)
    {- ^ – The time between polling the AWS API to check if changes have been applied. Use this to adjust the rate of API calls for any @create@ or @update@ action. Minimum @10s@ , maximum @180s@ . Omit this to use the default behavior, which is an exponential backoff -}
    , _setting                :: !(TF.Argument Text)
    {- ^ – (Optional) Option settings to configure the new Environment. These override specific values that are set as defaults. The format is detailed below in <#option-settings> -}
    , _solution_stack_name    :: !(TF.Argument Text)
    {- ^ – (Optional) A solution stack to base your environment off of. Example stacks can be found in the <https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html> -}
    , _tags                   :: !(TF.Argument TF.Tags)
    {- ^ – (Optional) A set of tags to apply to the Environment. Note: at this time the Elastic Beanstalk API does not provide a programatic way of changing these tags after initial application -}
    , _template_name          :: !(TF.Argument Text)
    {- ^ – (Optional) The name of the Elastic Beanstalk Configuration template to use in deployment -}
    , _tier                   :: !(TF.Argument Text)
    {- ^ (Optional) Elastic Beanstalk Environment tier. Valid values are @Worker@ or @WebServer@ . If tier is left blank @WebServer@ will be used. -}
    , _version_label          :: !(TF.Argument Text)
    {- ^ (Optional) The name of the Elastic Beanstalk Application Version to use in deployment. -}
    , _wait_for_ready_timeout :: !(TF.Argument Text)
    {- ^ - (Default: @20m@ ) The maximum <https://golang.org/pkg/time/#ParseDuration> that Terraform should wait for an Elastic Beanstalk Environment to be in a ready state before timing out. -}
    } deriving (Show, Eq)

instance TF.ToHCL ElasticBeanstalkEnvironmentResource where
    toHCL ElasticBeanstalkEnvironmentResource{..} = TF.block $ catMaybes
        [ TF.assign "application" <$> TF.argument _application
        , TF.assign "cname_prefix" <$> TF.argument _cname_prefix
        , TF.assign "description" <$> TF.argument _description
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "poll_interval" <$> TF.argument _poll_interval
        , TF.assign "setting" <$> TF.argument _setting
        , TF.assign "solution_stack_name" <$> TF.argument _solution_stack_name
        , TF.assign "tags" <$> TF.argument _tags
        , TF.assign "template_name" <$> TF.argument _template_name
        , TF.assign "tier" <$> TF.argument _tier
        , TF.assign "version_label" <$> TF.argument _version_label
        , TF.assign "wait_for_ready_timeout" <$> TF.argument _wait_for_ready_timeout
        ]

instance HasApplication ElasticBeanstalkEnvironmentResource (TF.Argument Text) where
    application f s@ElasticBeanstalkEnvironmentResource{..} =
        (\a -> s { _application = a } :: ElasticBeanstalkEnvironmentResource)
             <$> f _application

instance HasCnamePrefix ElasticBeanstalkEnvironmentResource (TF.Argument Text) where
    cnamePrefix f s@ElasticBeanstalkEnvironmentResource{..} =
        (\a -> s { _cname_prefix = a } :: ElasticBeanstalkEnvironmentResource)
             <$> f _cname_prefix

instance HasDescription ElasticBeanstalkEnvironmentResource (TF.Argument Text) where
    description f s@ElasticBeanstalkEnvironmentResource{..} =
        (\a -> s { _description = a } :: ElasticBeanstalkEnvironmentResource)
             <$> f _description

instance HasName ElasticBeanstalkEnvironmentResource (TF.Argument Text) where
    name f s@ElasticBeanstalkEnvironmentResource{..} =
        (\a -> s { _name = a } :: ElasticBeanstalkEnvironmentResource)
             <$> f _name

instance HasPollInterval ElasticBeanstalkEnvironmentResource (TF.Argument Text) where
    pollInterval f s@ElasticBeanstalkEnvironmentResource{..} =
        (\a -> s { _poll_interval = a } :: ElasticBeanstalkEnvironmentResource)
             <$> f _poll_interval

instance HasSetting ElasticBeanstalkEnvironmentResource (TF.Argument Text) where
    setting f s@ElasticBeanstalkEnvironmentResource{..} =
        (\a -> s { _setting = a } :: ElasticBeanstalkEnvironmentResource)
             <$> f _setting

instance HasSolutionStackName ElasticBeanstalkEnvironmentResource (TF.Argument Text) where
    solutionStackName f s@ElasticBeanstalkEnvironmentResource{..} =
        (\a -> s { _solution_stack_name = a } :: ElasticBeanstalkEnvironmentResource)
             <$> f _solution_stack_name

instance HasTags ElasticBeanstalkEnvironmentResource (TF.Argument TF.Tags) where
    tags f s@ElasticBeanstalkEnvironmentResource{..} =
        (\a -> s { _tags = a } :: ElasticBeanstalkEnvironmentResource)
             <$> f _tags

instance HasTemplateName ElasticBeanstalkEnvironmentResource (TF.Argument Text) where
    templateName f s@ElasticBeanstalkEnvironmentResource{..} =
        (\a -> s { _template_name = a } :: ElasticBeanstalkEnvironmentResource)
             <$> f _template_name

instance HasTier ElasticBeanstalkEnvironmentResource (TF.Argument Text) where
    tier f s@ElasticBeanstalkEnvironmentResource{..} =
        (\a -> s { _tier = a } :: ElasticBeanstalkEnvironmentResource)
             <$> f _tier

instance HasVersionLabel ElasticBeanstalkEnvironmentResource (TF.Argument Text) where
    versionLabel f s@ElasticBeanstalkEnvironmentResource{..} =
        (\a -> s { _version_label = a } :: ElasticBeanstalkEnvironmentResource)
             <$> f _version_label

instance HasWaitForReadyTimeout ElasticBeanstalkEnvironmentResource (TF.Argument Text) where
    waitForReadyTimeout f s@ElasticBeanstalkEnvironmentResource{..} =
        (\a -> s { _wait_for_ready_timeout = a } :: ElasticBeanstalkEnvironmentResource)
             <$> f _wait_for_ready_timeout

elasticBeanstalkEnvironmentResource :: TF.Resource TF.AWS ElasticBeanstalkEnvironmentResource
elasticBeanstalkEnvironmentResource =
    TF.newResource "aws_elastic_beanstalk_environment" $
        ElasticBeanstalkEnvironmentResource {
            _application = TF.Nil
            , _cname_prefix = TF.Nil
            , _description = TF.Nil
            , _name = TF.Nil
            , _poll_interval = TF.Nil
            , _setting = TF.Nil
            , _solution_stack_name = TF.Nil
            , _tags = TF.Nil
            , _template_name = TF.Nil
            , _tier = TF.Nil
            , _version_label = TF.Nil
            , _wait_for_ready_timeout = TF.Nil
            }

{- | The @aws_elasticache_cluster@ AWS resource.

Provides an ElastiCache Cluster resource. Changes to a Cache Cluster can
occur when you manually change a parameter, such as @node_type@ , and are
reflected in the next maintenance window. Because of this, Terraform may
report a difference in its planning phase because a modification has not yet
taken place. You can use the @apply_immediately@ flag to instruct the
service to apply the change immediately (see documentation below). ~> Note:
using @apply_immediately@ can result in a brief downtime as the server
reboots. See the AWS Docs on
<https://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/Clusters.Modify.html>
for more information.
-}
data ElasticacheClusterResource = ElasticacheClusterResource {
      _apply_immediately               :: !(TF.Argument Text)
    {- ^ (Optional) Specifies whether any database modifications are applied immediately, or during the next maintenance window. Default is @false@ . See <https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheCluster.html> (Available since v0.6.0) -}
    , _availability_zone               :: !(TF.Argument Text)
    {- ^ (Optional) The Availability Zone for the cache cluster. If you want to create cache nodes in multi-az, use @availability_zones@ -}
    , _availability_zones              :: !(TF.Argument Text)
    {- ^ (Optional, Memcached only) List of Availability Zones in which the cache nodes will be created. If you want to create cache nodes in single-az, use @availability_zone@ -}
    , _az_mode                         :: !(TF.Argument Text)
    {- ^ (Optional, Memcached only) Specifies whether the nodes in this Memcached node group are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region. Valid values for this parameter are @single-az@ or @cross-az@ , default is @single-az@ . If you want to choose @cross-az@ , @num_cache_nodes@ must be greater than @1@ -}
    , _cluster_id                      :: !(TF.Argument Text)
    {- ^ – (Required) Group identifier. ElastiCache converts this name to lowercase -}
    , _engine                          :: !(TF.Argument Text)
    {- ^ – (Required) Name of the cache engine to be used for this cache cluster. Valid values for this parameter are @memcached@ or @redis@ -}
    , _engine_version                  :: !(TF.Argument Text)
    {- ^ – (Optional) Version number of the cache engine to be used. See <https://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/SelectEngine.html> in the AWS Documentation center for supported versions -}
    , _maintenance_window              :: !(TF.Argument Text)
    {- ^ – (Optional) Specifies the weekly time range for when maintenance on the cache cluster is performed. The format is @ddd:hh24:mi-ddd:hh24:mi@ (24H Clock UTC). The minimum maintenance window is a 60 minute period. Example: @sun:05:00-sun:09:00@ -}
    , _node_type                       :: !(TF.Argument Text)
    {- ^ – (Required) The compute and memory capacity of the nodes. See <https://aws.amazon.com/elasticache/details#Available_Cache_Node_Types> for supported node types -}
    , _notification_topic_arn          :: !(TF.Argument Text)
    {- ^ – (Optional) An Amazon Resource Name (ARN) of an SNS topic to send ElastiCache notifications to. Example: @arn:aws:sns:us-east-1:012345678999:my_sns_topic@ -}
    , _num_cache_nodes                 :: !(TF.Argument Text)
    {- ^ – (Required) The initial number of cache nodes that the cache cluster will have. For Redis, this value must be 1. For Memcache, this value must be between 1 and 20. If this number is reduced on subsequent runs, the highest numbered nodes will be removed. -}
    , _parameter_group_name            :: !(TF.Argument Text)
    {- ^ – (Required) Name of the parameter group to associate with this cache cluster -}
    , _port                            :: !(TF.Argument Text)
    {- ^ – (Required) The port number on which each of the cache nodes will accept connections. For Memcache the default is 11211, and for Redis the default port is 6379. -}
    , _security_group_ids              :: !(TF.Argument Text)
    {- ^ – (Optional, VPC only) One or more VPC security groups associated with the cache cluster -}
    , _security_group_names            :: !(TF.Argument Text)
    {- ^ – (Optional, EC2 Classic only) List of security group names to associate with this cache cluster -}
    , _snapshot_arns                   :: !(TF.Argument Text)
    {- ^ – (Optional) A single-element string list containing an Amazon Resource Name (ARN) of a Redis RDB snapshot file stored in Amazon S3. Example: @arn:aws:s3:::my_bucket/snapshot1.rdb@ -}
    , _snapshot_name                   :: !(TF.Argument Text)
    {- ^ (Optional) The name of a snapshot from which to restore data into the new node group.  Changing the @snapshot_name@ forces a new resource. -}
    , _snapshot_retention_limit        :: !(TF.Argument Text)
    {- ^ (Optional, Redis only) The number of days for which ElastiCache will retain automatic cache cluster snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, then a snapshot that was taken today will be retained for 5 days before being deleted. If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off. Please note that setting a @snapshot_retention_limit@ is not supported on cache.t1.micro or cache.t2.* cache nodes -}
    , _snapshot_window                 :: !(TF.Argument Text)
    {- ^ (Optional, Redis only) The daily time range (in UTC) during which ElastiCache will begin taking a daily snapshot of your cache cluster. Example: 05:00-09:00 -}
    , _subnet_group_name               :: !(TF.Argument Text)
    {- ^ – (Optional, VPC only) Name of the subnet group to be used for the cache cluster. -}
    , _tags                            :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource -}
    , _computed_cache_nodes            :: !(TF.Attribute Text)
    {- ^ - List of node objects including @id@ , @address@ , @port@ and @availability_zone@ . Referenceable e.g. as @${aws_elasticache_cluster.bar.cache_nodes.0.address}@ -}
    , _computed_cluster_address        :: !(TF.Attribute Text)
    {- ^ - (Memcached only) The DNS name of the cache cluster without the port appended. -}
    , _computed_configuration_endpoint :: !(TF.Attribute Text)
    {- ^ - (Memcached only) The configuration endpoint to allow host discovery. -}
    } deriving (Show, Eq)

instance TF.ToHCL ElasticacheClusterResource where
    toHCL ElasticacheClusterResource{..} = TF.block $ catMaybes
        [ TF.assign "apply_immediately" <$> TF.argument _apply_immediately
        , TF.assign "availability_zone" <$> TF.argument _availability_zone
        , TF.assign "availability_zones" <$> TF.argument _availability_zones
        , TF.assign "az_mode" <$> TF.argument _az_mode
        , TF.assign "cluster_id" <$> TF.argument _cluster_id
        , TF.assign "engine" <$> TF.argument _engine
        , TF.assign "engine_version" <$> TF.argument _engine_version
        , TF.assign "maintenance_window" <$> TF.argument _maintenance_window
        , TF.assign "node_type" <$> TF.argument _node_type
        , TF.assign "notification_topic_arn" <$> TF.argument _notification_topic_arn
        , TF.assign "num_cache_nodes" <$> TF.argument _num_cache_nodes
        , TF.assign "parameter_group_name" <$> TF.argument _parameter_group_name
        , TF.assign "port" <$> TF.argument _port
        , TF.assign "security_group_ids" <$> TF.argument _security_group_ids
        , TF.assign "security_group_names" <$> TF.argument _security_group_names
        , TF.assign "snapshot_arns" <$> TF.argument _snapshot_arns
        , TF.assign "snapshot_name" <$> TF.argument _snapshot_name
        , TF.assign "snapshot_retention_limit" <$> TF.argument _snapshot_retention_limit
        , TF.assign "snapshot_window" <$> TF.argument _snapshot_window
        , TF.assign "subnet_group_name" <$> TF.argument _subnet_group_name
        , TF.assign "tags" <$> TF.argument _tags
        ]

instance HasApplyImmediately ElasticacheClusterResource (TF.Argument Text) where
    applyImmediately f s@ElasticacheClusterResource{..} =
        (\a -> s { _apply_immediately = a } :: ElasticacheClusterResource)
             <$> f _apply_immediately

instance HasAvailabilityZone ElasticacheClusterResource (TF.Argument Text) where
    availabilityZone f s@ElasticacheClusterResource{..} =
        (\a -> s { _availability_zone = a } :: ElasticacheClusterResource)
             <$> f _availability_zone

instance HasAvailabilityZones ElasticacheClusterResource (TF.Argument Text) where
    availabilityZones f s@ElasticacheClusterResource{..} =
        (\a -> s { _availability_zones = a } :: ElasticacheClusterResource)
             <$> f _availability_zones

instance HasAzMode ElasticacheClusterResource (TF.Argument Text) where
    azMode f s@ElasticacheClusterResource{..} =
        (\a -> s { _az_mode = a } :: ElasticacheClusterResource)
             <$> f _az_mode

instance HasClusterId ElasticacheClusterResource (TF.Argument Text) where
    clusterId f s@ElasticacheClusterResource{..} =
        (\a -> s { _cluster_id = a } :: ElasticacheClusterResource)
             <$> f _cluster_id

instance HasEngine ElasticacheClusterResource (TF.Argument Text) where
    engine f s@ElasticacheClusterResource{..} =
        (\a -> s { _engine = a } :: ElasticacheClusterResource)
             <$> f _engine

instance HasEngineVersion ElasticacheClusterResource (TF.Argument Text) where
    engineVersion f s@ElasticacheClusterResource{..} =
        (\a -> s { _engine_version = a } :: ElasticacheClusterResource)
             <$> f _engine_version

instance HasMaintenanceWindow ElasticacheClusterResource (TF.Argument Text) where
    maintenanceWindow f s@ElasticacheClusterResource{..} =
        (\a -> s { _maintenance_window = a } :: ElasticacheClusterResource)
             <$> f _maintenance_window

instance HasNodeType ElasticacheClusterResource (TF.Argument Text) where
    nodeType f s@ElasticacheClusterResource{..} =
        (\a -> s { _node_type = a } :: ElasticacheClusterResource)
             <$> f _node_type

instance HasNotificationTopicArn ElasticacheClusterResource (TF.Argument Text) where
    notificationTopicArn f s@ElasticacheClusterResource{..} =
        (\a -> s { _notification_topic_arn = a } :: ElasticacheClusterResource)
             <$> f _notification_topic_arn

instance HasNumCacheNodes ElasticacheClusterResource (TF.Argument Text) where
    numCacheNodes f s@ElasticacheClusterResource{..} =
        (\a -> s { _num_cache_nodes = a } :: ElasticacheClusterResource)
             <$> f _num_cache_nodes

instance HasParameterGroupName ElasticacheClusterResource (TF.Argument Text) where
    parameterGroupName f s@ElasticacheClusterResource{..} =
        (\a -> s { _parameter_group_name = a } :: ElasticacheClusterResource)
             <$> f _parameter_group_name

instance HasPort ElasticacheClusterResource (TF.Argument Text) where
    port f s@ElasticacheClusterResource{..} =
        (\a -> s { _port = a } :: ElasticacheClusterResource)
             <$> f _port

instance HasSecurityGroupIds ElasticacheClusterResource (TF.Argument Text) where
    securityGroupIds f s@ElasticacheClusterResource{..} =
        (\a -> s { _security_group_ids = a } :: ElasticacheClusterResource)
             <$> f _security_group_ids

instance HasSecurityGroupNames ElasticacheClusterResource (TF.Argument Text) where
    securityGroupNames f s@ElasticacheClusterResource{..} =
        (\a -> s { _security_group_names = a } :: ElasticacheClusterResource)
             <$> f _security_group_names

instance HasSnapshotArns ElasticacheClusterResource (TF.Argument Text) where
    snapshotArns f s@ElasticacheClusterResource{..} =
        (\a -> s { _snapshot_arns = a } :: ElasticacheClusterResource)
             <$> f _snapshot_arns

instance HasSnapshotName ElasticacheClusterResource (TF.Argument Text) where
    snapshotName f s@ElasticacheClusterResource{..} =
        (\a -> s { _snapshot_name = a } :: ElasticacheClusterResource)
             <$> f _snapshot_name

instance HasSnapshotRetentionLimit ElasticacheClusterResource (TF.Argument Text) where
    snapshotRetentionLimit f s@ElasticacheClusterResource{..} =
        (\a -> s { _snapshot_retention_limit = a } :: ElasticacheClusterResource)
             <$> f _snapshot_retention_limit

instance HasSnapshotWindow ElasticacheClusterResource (TF.Argument Text) where
    snapshotWindow f s@ElasticacheClusterResource{..} =
        (\a -> s { _snapshot_window = a } :: ElasticacheClusterResource)
             <$> f _snapshot_window

instance HasSubnetGroupName ElasticacheClusterResource (TF.Argument Text) where
    subnetGroupName f s@ElasticacheClusterResource{..} =
        (\a -> s { _subnet_group_name = a } :: ElasticacheClusterResource)
             <$> f _subnet_group_name

instance HasTags ElasticacheClusterResource (TF.Argument TF.Tags) where
    tags f s@ElasticacheClusterResource{..} =
        (\a -> s { _tags = a } :: ElasticacheClusterResource)
             <$> f _tags

instance HasComputedCacheNodes ElasticacheClusterResource (TF.Attribute Text) where
    computedCacheNodes f s@ElasticacheClusterResource{..} =
        (\a -> s { _computed_cache_nodes = a } :: ElasticacheClusterResource)
             <$> f _computed_cache_nodes

instance HasComputedClusterAddress ElasticacheClusterResource (TF.Attribute Text) where
    computedClusterAddress f s@ElasticacheClusterResource{..} =
        (\a -> s { _computed_cluster_address = a } :: ElasticacheClusterResource)
             <$> f _computed_cluster_address

instance HasComputedConfigurationEndpoint ElasticacheClusterResource (TF.Attribute Text) where
    computedConfigurationEndpoint f s@ElasticacheClusterResource{..} =
        (\a -> s { _computed_configuration_endpoint = a } :: ElasticacheClusterResource)
             <$> f _computed_configuration_endpoint

elasticacheClusterResource :: TF.Resource TF.AWS ElasticacheClusterResource
elasticacheClusterResource =
    TF.newResource "aws_elasticache_cluster" $
        ElasticacheClusterResource {
            _apply_immediately = TF.Nil
            , _availability_zone = TF.Nil
            , _availability_zones = TF.Nil
            , _az_mode = TF.Nil
            , _cluster_id = TF.Nil
            , _engine = TF.Nil
            , _engine_version = TF.Nil
            , _maintenance_window = TF.Nil
            , _node_type = TF.Nil
            , _notification_topic_arn = TF.Nil
            , _num_cache_nodes = TF.Nil
            , _parameter_group_name = TF.Nil
            , _port = TF.Nil
            , _security_group_ids = TF.Nil
            , _security_group_names = TF.Nil
            , _snapshot_arns = TF.Nil
            , _snapshot_name = TF.Nil
            , _snapshot_retention_limit = TF.Nil
            , _snapshot_window = TF.Nil
            , _subnet_group_name = TF.Nil
            , _tags = TF.Nil
            , _computed_cache_nodes = TF.Compute "cache_nodes"
            , _computed_cluster_address = TF.Compute "cluster_address"
            , _computed_configuration_endpoint = TF.Compute "configuration_endpoint"
            }

{- | The @aws_elasticache_parameter_group@ AWS resource.

Provides an ElastiCache parameter group resource.
-}
data ElasticacheParameterGroupResource = ElasticacheParameterGroupResource {
      _description :: !(TF.Argument Text)
    {- ^ (Optional) The description of the ElastiCache parameter group. Defaults to "Managed by Terraform". -}
    , _family'     :: !(TF.Argument Text)
    {- ^ (Required) The family of the ElastiCache parameter group. -}
    , _name        :: !(TF.Argument Text)
    {- ^ (Required) The name of the ElastiCache parameter group. -}
    , _parameter   :: !(TF.Argument Text)
    {- ^ (Optional) A list of ElastiCache parameters to apply. -}
    , _computed_id :: !(TF.Attribute Text)
    {- ^ - The ElastiCache parameter group name. -}
    } deriving (Show, Eq)

instance TF.ToHCL ElasticacheParameterGroupResource where
    toHCL ElasticacheParameterGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.argument _description
        , TF.assign "family" <$> TF.argument _family'
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "parameter" <$> TF.argument _parameter
        ]

instance HasDescription ElasticacheParameterGroupResource (TF.Argument Text) where
    description f s@ElasticacheParameterGroupResource{..} =
        (\a -> s { _description = a } :: ElasticacheParameterGroupResource)
             <$> f _description

instance HasFamily' ElasticacheParameterGroupResource (TF.Argument Text) where
    family' f s@ElasticacheParameterGroupResource{..} =
        (\a -> s { _family' = a } :: ElasticacheParameterGroupResource)
             <$> f _family'

instance HasName ElasticacheParameterGroupResource (TF.Argument Text) where
    name f s@ElasticacheParameterGroupResource{..} =
        (\a -> s { _name = a } :: ElasticacheParameterGroupResource)
             <$> f _name

instance HasParameter ElasticacheParameterGroupResource (TF.Argument Text) where
    parameter f s@ElasticacheParameterGroupResource{..} =
        (\a -> s { _parameter = a } :: ElasticacheParameterGroupResource)
             <$> f _parameter

instance HasComputedId ElasticacheParameterGroupResource (TF.Attribute Text) where
    computedId f s@ElasticacheParameterGroupResource{..} =
        (\a -> s { _computed_id = a } :: ElasticacheParameterGroupResource)
             <$> f _computed_id

elasticacheParameterGroupResource :: TF.Resource TF.AWS ElasticacheParameterGroupResource
elasticacheParameterGroupResource =
    TF.newResource "aws_elasticache_parameter_group" $
        ElasticacheParameterGroupResource {
            _description = TF.Nil
            , _family' = TF.Nil
            , _name = TF.Nil
            , _parameter = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_elasticache_replication_group@ AWS resource.

Provides an ElastiCache Replication Group resource.
-}
data ElasticacheReplicationGroupResource = ElasticacheReplicationGroupResource {
      _apply_immediately                       :: !(TF.Argument Text)
    {- ^ (Optional) Specifies whether any modifications are applied immediately, or during the next maintenance window. Default is @false@ . -}
    , _at_rest_encryption_enabled              :: !(TF.Argument TF.Bool)
    {- ^ (Optional) Whether to enable encryption at rest. -}
    , _auth_token                              :: !(TF.Argument Text)
    {- ^ (Optional) The password used to access a password protected server. Can be specified only if @transit_encryption_enabled = true@ . -}
    , _auto_minor_version_upgrade              :: !(TF.Argument Text)
    {- ^ (Optional) Specifies whether a minor engine upgrades will be applied automatically to the underlying Cache Cluster instances during the maintenance window. Defaults to @true@ . -}
    , _automatic_failover_enabled              :: !(TF.Argument TF.Bool)
    {- ^ (Optional) Specifies whether a read-only replica will be automatically promoted to read/write primary if the existing primary fails. Defaults to @false@ . -}
    , _availability_zones                      :: !(TF.Argument Text)
    {- ^ (Optional) A list of EC2 availability zones in which the replication group's cache clusters will be created. The order of the availability zones in the list is not important. -}
    , _cluster_mode                            :: !(TF.Argument Text)
    {- ^ (Optional) Create a native redis cluster. @automatic_failover_enabled@ must be set to true. Cluster Mode documented below. Only 1 @cluster_mode@ block is allowed. -}
    , _engine                                  :: !(TF.Argument Text)
    {- ^ (Optional) The name of the cache engine to be used for the clusters in this replication group. e.g. @redis@ -}
    , _engine_version                          :: !(TF.Argument Text)
    {- ^ (Optional) The version number of the cache engine to be used for the cache clusters in this replication group. -}
    , _maintenance_window                      :: !(TF.Argument Text)
    {- ^ – (Optional) Specifies the weekly time range for when maintenance on the cache cluster is performed. The format is @ddd:hh24:mi-ddd:hh24:mi@ (24H Clock UTC). The minimum maintenance window is a 60 minute period. Example: @sun:05:00-sun:09:00@ -}
    , _node_type                               :: !(TF.Argument Text)
    {- ^ (Required) The compute and memory capacity of the nodes in the node group. -}
    , _notification_topic_arn                  :: !(TF.Argument Text)
    {- ^ – (Optional) An Amazon Resource Name (ARN) of an SNS topic to send ElastiCache notifications to. Example: @arn:aws:sns:us-east-1:012345678999:my_sns_topic@ -}
    , _number_cache_clusters                   :: !(TF.Argument Text)
    {- ^ (Required) The number of cache clusters this replication group will have. If Multi-AZ is enabled , the value of this parameter must be at least 2. Changing this number will force a new resource -}
    , _parameter_group_name                    :: !(TF.Argument Text)
    {- ^ (Optional) The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used. -}
    , _port                                    :: !(TF.Argument Text)
    {- ^ – (Required) The port number on which each of the cache nodes will accept connections. For Memcache the default is 11211, and for Redis the default port is 6379. -}
    , _replication_group_description           :: !(TF.Argument Text)
    {- ^ – (Required) A user-created description for the replication group. -}
    , _replication_group_id                    :: !(TF.Argument Text)
    {- ^ – (Required) The replication group identifier. This parameter is stored as a lowercase string. -}
    , _security_group_ids                      :: !(TF.Argument Text)
    {- ^ (Optional) One or more Amazon VPC security groups associated with this replication group. Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud -}
    , _security_group_names                    :: !(TF.Argument Text)
    {- ^ (Optional) A list of cache security group names to associate with this replication group. -}
    , _snapshot_arns                           :: !(TF.Argument Text)
    {- ^ – (Optional) A single-element string list containing an Amazon Resource Name (ARN) of a Redis RDB snapshot file stored in Amazon S3. Example: @arn:aws:s3:::my_bucket/snapshot1.rdb@ -}
    , _snapshot_name                           :: !(TF.Argument Text)
    {- ^ (Optional) The name of a snapshot from which to restore data into the new node group. Changing the @snapshot_name@ forces a new resource. -}
    , _snapshot_retention_limit                :: !(TF.Argument Text)
    {- ^ (Optional, Redis only) The number of days for which ElastiCache will retain automatic cache cluster snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, then a snapshot that was taken today will be retained for 5 days before being deleted. If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off. Please note that setting a @snapshot_retention_limit@ is not supported on cache.t1.micro or cache.t2.* cache nodes -}
    , _snapshot_window                         :: !(TF.Argument Text)
    {- ^ (Optional, Redis only) The daily time range (in UTC) during which ElastiCache will begin taking a daily snapshot of your cache cluster. The minimum snapshot window is a 60 minute period. Example: @05:00-09:00@ -}
    , _subnet_group_name                       :: !(TF.Argument Text)
    {- ^ (Optional) The name of the cache subnet group to be used for the replication group. -}
    , _tags                                    :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource -}
    , _transit_encryption_enabled              :: !(TF.Argument TF.Bool)
    {- ^ (Optional) Whether to enable encryption in transit. -}
    , _computed_configuration_endpoint_address :: !(TF.Attribute Text)
    {- ^ - The address of the replication group configuration endpoint when cluster mode is enabled. -}
    , _computed_id                             :: !(TF.Attribute Text)
    {- ^ - The ID of the ElastiCache Replication Group. -}
    , _computed_primary_endpoint_address       :: !(TF.Attribute Text)
    {- ^ - (Redis only) The address of the endpoint for the primary node in the replication group, if the cluster mode is disabled. -}
    } deriving (Show, Eq)

instance TF.ToHCL ElasticacheReplicationGroupResource where
    toHCL ElasticacheReplicationGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "apply_immediately" <$> TF.argument _apply_immediately
        , TF.assign "at_rest_encryption_enabled" <$> TF.argument _at_rest_encryption_enabled
        , TF.assign "auth_token" <$> TF.argument _auth_token
        , TF.assign "auto_minor_version_upgrade" <$> TF.argument _auto_minor_version_upgrade
        , TF.assign "automatic_failover_enabled" <$> TF.argument _automatic_failover_enabled
        , TF.assign "availability_zones" <$> TF.argument _availability_zones
        , TF.assign "cluster_mode" <$> TF.argument _cluster_mode
        , TF.assign "engine" <$> TF.argument _engine
        , TF.assign "engine_version" <$> TF.argument _engine_version
        , TF.assign "maintenance_window" <$> TF.argument _maintenance_window
        , TF.assign "node_type" <$> TF.argument _node_type
        , TF.assign "notification_topic_arn" <$> TF.argument _notification_topic_arn
        , TF.assign "number_cache_clusters" <$> TF.argument _number_cache_clusters
        , TF.assign "parameter_group_name" <$> TF.argument _parameter_group_name
        , TF.assign "port" <$> TF.argument _port
        , TF.assign "replication_group_description" <$> TF.argument _replication_group_description
        , TF.assign "replication_group_id" <$> TF.argument _replication_group_id
        , TF.assign "security_group_ids" <$> TF.argument _security_group_ids
        , TF.assign "security_group_names" <$> TF.argument _security_group_names
        , TF.assign "snapshot_arns" <$> TF.argument _snapshot_arns
        , TF.assign "snapshot_name" <$> TF.argument _snapshot_name
        , TF.assign "snapshot_retention_limit" <$> TF.argument _snapshot_retention_limit
        , TF.assign "snapshot_window" <$> TF.argument _snapshot_window
        , TF.assign "subnet_group_name" <$> TF.argument _subnet_group_name
        , TF.assign "tags" <$> TF.argument _tags
        , TF.assign "transit_encryption_enabled" <$> TF.argument _transit_encryption_enabled
        ]

instance HasApplyImmediately ElasticacheReplicationGroupResource (TF.Argument Text) where
    applyImmediately f s@ElasticacheReplicationGroupResource{..} =
        (\a -> s { _apply_immediately = a } :: ElasticacheReplicationGroupResource)
             <$> f _apply_immediately

instance HasAtRestEncryptionEnabled ElasticacheReplicationGroupResource (TF.Argument TF.Bool) where
    atRestEncryptionEnabled f s@ElasticacheReplicationGroupResource{..} =
        (\a -> s { _at_rest_encryption_enabled = a } :: ElasticacheReplicationGroupResource)
             <$> f _at_rest_encryption_enabled

instance HasAuthToken ElasticacheReplicationGroupResource (TF.Argument Text) where
    authToken f s@ElasticacheReplicationGroupResource{..} =
        (\a -> s { _auth_token = a } :: ElasticacheReplicationGroupResource)
             <$> f _auth_token

instance HasAutoMinorVersionUpgrade ElasticacheReplicationGroupResource (TF.Argument Text) where
    autoMinorVersionUpgrade f s@ElasticacheReplicationGroupResource{..} =
        (\a -> s { _auto_minor_version_upgrade = a } :: ElasticacheReplicationGroupResource)
             <$> f _auto_minor_version_upgrade

instance HasAutomaticFailoverEnabled ElasticacheReplicationGroupResource (TF.Argument TF.Bool) where
    automaticFailoverEnabled f s@ElasticacheReplicationGroupResource{..} =
        (\a -> s { _automatic_failover_enabled = a } :: ElasticacheReplicationGroupResource)
             <$> f _automatic_failover_enabled

instance HasAvailabilityZones ElasticacheReplicationGroupResource (TF.Argument Text) where
    availabilityZones f s@ElasticacheReplicationGroupResource{..} =
        (\a -> s { _availability_zones = a } :: ElasticacheReplicationGroupResource)
             <$> f _availability_zones

instance HasClusterMode ElasticacheReplicationGroupResource (TF.Argument Text) where
    clusterMode f s@ElasticacheReplicationGroupResource{..} =
        (\a -> s { _cluster_mode = a } :: ElasticacheReplicationGroupResource)
             <$> f _cluster_mode

instance HasEngine ElasticacheReplicationGroupResource (TF.Argument Text) where
    engine f s@ElasticacheReplicationGroupResource{..} =
        (\a -> s { _engine = a } :: ElasticacheReplicationGroupResource)
             <$> f _engine

instance HasEngineVersion ElasticacheReplicationGroupResource (TF.Argument Text) where
    engineVersion f s@ElasticacheReplicationGroupResource{..} =
        (\a -> s { _engine_version = a } :: ElasticacheReplicationGroupResource)
             <$> f _engine_version

instance HasMaintenanceWindow ElasticacheReplicationGroupResource (TF.Argument Text) where
    maintenanceWindow f s@ElasticacheReplicationGroupResource{..} =
        (\a -> s { _maintenance_window = a } :: ElasticacheReplicationGroupResource)
             <$> f _maintenance_window

instance HasNodeType ElasticacheReplicationGroupResource (TF.Argument Text) where
    nodeType f s@ElasticacheReplicationGroupResource{..} =
        (\a -> s { _node_type = a } :: ElasticacheReplicationGroupResource)
             <$> f _node_type

instance HasNotificationTopicArn ElasticacheReplicationGroupResource (TF.Argument Text) where
    notificationTopicArn f s@ElasticacheReplicationGroupResource{..} =
        (\a -> s { _notification_topic_arn = a } :: ElasticacheReplicationGroupResource)
             <$> f _notification_topic_arn

instance HasNumberCacheClusters ElasticacheReplicationGroupResource (TF.Argument Text) where
    numberCacheClusters f s@ElasticacheReplicationGroupResource{..} =
        (\a -> s { _number_cache_clusters = a } :: ElasticacheReplicationGroupResource)
             <$> f _number_cache_clusters

instance HasParameterGroupName ElasticacheReplicationGroupResource (TF.Argument Text) where
    parameterGroupName f s@ElasticacheReplicationGroupResource{..} =
        (\a -> s { _parameter_group_name = a } :: ElasticacheReplicationGroupResource)
             <$> f _parameter_group_name

instance HasPort ElasticacheReplicationGroupResource (TF.Argument Text) where
    port f s@ElasticacheReplicationGroupResource{..} =
        (\a -> s { _port = a } :: ElasticacheReplicationGroupResource)
             <$> f _port

instance HasReplicationGroupDescription ElasticacheReplicationGroupResource (TF.Argument Text) where
    replicationGroupDescription f s@ElasticacheReplicationGroupResource{..} =
        (\a -> s { _replication_group_description = a } :: ElasticacheReplicationGroupResource)
             <$> f _replication_group_description

instance HasReplicationGroupId ElasticacheReplicationGroupResource (TF.Argument Text) where
    replicationGroupId f s@ElasticacheReplicationGroupResource{..} =
        (\a -> s { _replication_group_id = a } :: ElasticacheReplicationGroupResource)
             <$> f _replication_group_id

instance HasSecurityGroupIds ElasticacheReplicationGroupResource (TF.Argument Text) where
    securityGroupIds f s@ElasticacheReplicationGroupResource{..} =
        (\a -> s { _security_group_ids = a } :: ElasticacheReplicationGroupResource)
             <$> f _security_group_ids

instance HasSecurityGroupNames ElasticacheReplicationGroupResource (TF.Argument Text) where
    securityGroupNames f s@ElasticacheReplicationGroupResource{..} =
        (\a -> s { _security_group_names = a } :: ElasticacheReplicationGroupResource)
             <$> f _security_group_names

instance HasSnapshotArns ElasticacheReplicationGroupResource (TF.Argument Text) where
    snapshotArns f s@ElasticacheReplicationGroupResource{..} =
        (\a -> s { _snapshot_arns = a } :: ElasticacheReplicationGroupResource)
             <$> f _snapshot_arns

instance HasSnapshotName ElasticacheReplicationGroupResource (TF.Argument Text) where
    snapshotName f s@ElasticacheReplicationGroupResource{..} =
        (\a -> s { _snapshot_name = a } :: ElasticacheReplicationGroupResource)
             <$> f _snapshot_name

instance HasSnapshotRetentionLimit ElasticacheReplicationGroupResource (TF.Argument Text) where
    snapshotRetentionLimit f s@ElasticacheReplicationGroupResource{..} =
        (\a -> s { _snapshot_retention_limit = a } :: ElasticacheReplicationGroupResource)
             <$> f _snapshot_retention_limit

instance HasSnapshotWindow ElasticacheReplicationGroupResource (TF.Argument Text) where
    snapshotWindow f s@ElasticacheReplicationGroupResource{..} =
        (\a -> s { _snapshot_window = a } :: ElasticacheReplicationGroupResource)
             <$> f _snapshot_window

instance HasSubnetGroupName ElasticacheReplicationGroupResource (TF.Argument Text) where
    subnetGroupName f s@ElasticacheReplicationGroupResource{..} =
        (\a -> s { _subnet_group_name = a } :: ElasticacheReplicationGroupResource)
             <$> f _subnet_group_name

instance HasTags ElasticacheReplicationGroupResource (TF.Argument TF.Tags) where
    tags f s@ElasticacheReplicationGroupResource{..} =
        (\a -> s { _tags = a } :: ElasticacheReplicationGroupResource)
             <$> f _tags

instance HasTransitEncryptionEnabled ElasticacheReplicationGroupResource (TF.Argument TF.Bool) where
    transitEncryptionEnabled f s@ElasticacheReplicationGroupResource{..} =
        (\a -> s { _transit_encryption_enabled = a } :: ElasticacheReplicationGroupResource)
             <$> f _transit_encryption_enabled

instance HasComputedConfigurationEndpointAddress ElasticacheReplicationGroupResource (TF.Attribute Text) where
    computedConfigurationEndpointAddress f s@ElasticacheReplicationGroupResource{..} =
        (\a -> s { _computed_configuration_endpoint_address = a } :: ElasticacheReplicationGroupResource)
             <$> f _computed_configuration_endpoint_address

instance HasComputedId ElasticacheReplicationGroupResource (TF.Attribute Text) where
    computedId f s@ElasticacheReplicationGroupResource{..} =
        (\a -> s { _computed_id = a } :: ElasticacheReplicationGroupResource)
             <$> f _computed_id

instance HasComputedPrimaryEndpointAddress ElasticacheReplicationGroupResource (TF.Attribute Text) where
    computedPrimaryEndpointAddress f s@ElasticacheReplicationGroupResource{..} =
        (\a -> s { _computed_primary_endpoint_address = a } :: ElasticacheReplicationGroupResource)
             <$> f _computed_primary_endpoint_address

elasticacheReplicationGroupResource :: TF.Resource TF.AWS ElasticacheReplicationGroupResource
elasticacheReplicationGroupResource =
    TF.newResource "aws_elasticache_replication_group" $
        ElasticacheReplicationGroupResource {
            _apply_immediately = TF.Nil
            , _at_rest_encryption_enabled = TF.Nil
            , _auth_token = TF.Nil
            , _auto_minor_version_upgrade = TF.Nil
            , _automatic_failover_enabled = TF.Nil
            , _availability_zones = TF.Nil
            , _cluster_mode = TF.Nil
            , _engine = TF.Nil
            , _engine_version = TF.Nil
            , _maintenance_window = TF.Nil
            , _node_type = TF.Nil
            , _notification_topic_arn = TF.Nil
            , _number_cache_clusters = TF.Nil
            , _parameter_group_name = TF.Nil
            , _port = TF.Nil
            , _replication_group_description = TF.Nil
            , _replication_group_id = TF.Nil
            , _security_group_ids = TF.Nil
            , _security_group_names = TF.Nil
            , _snapshot_arns = TF.Nil
            , _snapshot_name = TF.Nil
            , _snapshot_retention_limit = TF.Nil
            , _snapshot_window = TF.Nil
            , _subnet_group_name = TF.Nil
            , _tags = TF.Nil
            , _transit_encryption_enabled = TF.Nil
            , _computed_configuration_endpoint_address = TF.Compute "configuration_endpoint_address"
            , _computed_id = TF.Compute "id"
            , _computed_primary_endpoint_address = TF.Compute "primary_endpoint_address"
            }

{- | The @aws_elasticache_security_group@ AWS resource.

Provides an ElastiCache Security Group to control access to one or more
cache clusters. ~> NOTE: ElastiCache Security Groups are for use only when
working with an ElastiCache cluster outside of a VPC. If you are using a
VPC, see the <elasticache_subnet_group.html> .
-}
data ElasticacheSecurityGroupResource = ElasticacheSecurityGroupResource {
      _description          :: !(TF.Argument Text)
    {- ^ – (Optional) description for the cache security group. Defaults to "Managed by Terraform". -}
    , _name                 :: !(TF.Argument Text)
    {- ^ – (Required) Name for the cache security group. This value is stored as a lowercase string. -}
    , _security_group_names :: !(TF.Argument Text)
    {- ^ – (Required) List of EC2 security group names to be authorized for ingress to the cache security group -}
    } deriving (Show, Eq)

instance TF.ToHCL ElasticacheSecurityGroupResource where
    toHCL ElasticacheSecurityGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.argument _description
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "security_group_names" <$> TF.argument _security_group_names
        ]

instance HasDescription ElasticacheSecurityGroupResource (TF.Argument Text) where
    description f s@ElasticacheSecurityGroupResource{..} =
        (\a -> s { _description = a } :: ElasticacheSecurityGroupResource)
             <$> f _description

instance HasName ElasticacheSecurityGroupResource (TF.Argument Text) where
    name f s@ElasticacheSecurityGroupResource{..} =
        (\a -> s { _name = a } :: ElasticacheSecurityGroupResource)
             <$> f _name

instance HasSecurityGroupNames ElasticacheSecurityGroupResource (TF.Argument Text) where
    securityGroupNames f s@ElasticacheSecurityGroupResource{..} =
        (\a -> s { _security_group_names = a } :: ElasticacheSecurityGroupResource)
             <$> f _security_group_names

elasticacheSecurityGroupResource :: TF.Resource TF.AWS ElasticacheSecurityGroupResource
elasticacheSecurityGroupResource =
    TF.newResource "aws_elasticache_security_group" $
        ElasticacheSecurityGroupResource {
            _description = TF.Nil
            , _name = TF.Nil
            , _security_group_names = TF.Nil
            }

{- | The @aws_elasticache_subnet_group@ AWS resource.

Provides an ElastiCache Subnet Group resource. ~> NOTE: ElastiCache Subnet
Groups are only for use when working with an ElastiCache cluster inside of a
VPC. If you are on EC2 Classic, see the <elasticache_security_group.html> .
-}
data ElasticacheSubnetGroupResource = ElasticacheSubnetGroupResource {
      _description :: !(TF.Argument Text)
    {- ^ – (Optional) Description for the cache subnet group. Defaults to "Managed by Terraform". -}
    , _name        :: !(TF.Argument Text)
    {- ^ – (Required) Name for the cache subnet group. Elasticache converts this name to lowercase. -}
    , _subnet_ids  :: !(TF.Argument Text)
    {- ^ – (Required) List of VPC Subnet IDs for the cache subnet group -}
    } deriving (Show, Eq)

instance TF.ToHCL ElasticacheSubnetGroupResource where
    toHCL ElasticacheSubnetGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.argument _description
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "subnet_ids" <$> TF.argument _subnet_ids
        ]

instance HasDescription ElasticacheSubnetGroupResource (TF.Argument Text) where
    description f s@ElasticacheSubnetGroupResource{..} =
        (\a -> s { _description = a } :: ElasticacheSubnetGroupResource)
             <$> f _description

instance HasName ElasticacheSubnetGroupResource (TF.Argument Text) where
    name f s@ElasticacheSubnetGroupResource{..} =
        (\a -> s { _name = a } :: ElasticacheSubnetGroupResource)
             <$> f _name

instance HasSubnetIds ElasticacheSubnetGroupResource (TF.Argument Text) where
    subnetIds f s@ElasticacheSubnetGroupResource{..} =
        (\a -> s { _subnet_ids = a } :: ElasticacheSubnetGroupResource)
             <$> f _subnet_ids

elasticacheSubnetGroupResource :: TF.Resource TF.AWS ElasticacheSubnetGroupResource
elasticacheSubnetGroupResource =
    TF.newResource "aws_elasticache_subnet_group" $
        ElasticacheSubnetGroupResource {
            _description = TF.Nil
            , _name = TF.Nil
            , _subnet_ids = TF.Nil
            }

{- | The @aws_elasticsearch_domain_policy@ AWS resource.

Allows setting policy to an ElasticSearch domain while referencing domain
attributes (e.g. ARN)
-}
data ElasticsearchDomainPolicyResource = ElasticsearchDomainPolicyResource {
      _access_policies :: !(TF.Argument Text)
    {- ^ (Optional) IAM policy document specifying the access policies for the domain -}
    , _domain_name     :: !(TF.Argument Text)
    {- ^ (Required) Name of the domain. -}
    } deriving (Show, Eq)

instance TF.ToHCL ElasticsearchDomainPolicyResource where
    toHCL ElasticsearchDomainPolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "access_policies" <$> TF.argument _access_policies
        , TF.assign "domain_name" <$> TF.argument _domain_name
        ]

instance HasAccessPolicies ElasticsearchDomainPolicyResource (TF.Argument Text) where
    accessPolicies f s@ElasticsearchDomainPolicyResource{..} =
        (\a -> s { _access_policies = a } :: ElasticsearchDomainPolicyResource)
             <$> f _access_policies

instance HasDomainName ElasticsearchDomainPolicyResource (TF.Argument Text) where
    domainName f s@ElasticsearchDomainPolicyResource{..} =
        (\a -> s { _domain_name = a } :: ElasticsearchDomainPolicyResource)
             <$> f _domain_name

elasticsearchDomainPolicyResource :: TF.Resource TF.AWS ElasticsearchDomainPolicyResource
elasticsearchDomainPolicyResource =
    TF.newResource "aws_elasticsearch_domain_policy" $
        ElasticsearchDomainPolicyResource {
            _access_policies = TF.Nil
            , _domain_name = TF.Nil
            }

{- | The @aws_elasticsearch_domain@ AWS resource.


-}
data ElasticsearchDomainResource = ElasticsearchDomainResource {
      _access_policies                           :: !(TF.Argument Text)
    {- ^ (Optional) IAM policy document specifying the access policies for the domain -}
    , _advanced_options                          :: !(TF.Argument Text)
    {- ^ (Optional) Key-value string pairs to specify advanced configuration options. -}
    , _cluster_config                            :: !(TF.Argument Text)
    {- ^ (Optional) Cluster configuration of the domain, see below. -}
    , _domain_name                               :: !(TF.Argument Text)
    {- ^ (Required) Name of the domain. -}
    , _ebs_options                               :: !(TF.Argument Text)
    {- ^ (Optional) EBS related options, may be required based on chosen <https://aws.amazon.com/elasticsearch-service/pricing/> . See below. -}
    , _elasticsearch_version                     :: !(TF.Argument Text)
    {- ^ (Optional) The version of ElasticSearch to deploy. Defaults to @1.5@ -}
    , _log_publishing_options                    :: !(TF.Argument Text)
    {- ^ (Optional) Options for publishing slow logs to CloudWatch Logs. -}
    , _snapshot_options                          :: !(TF.Argument Text)
    {- ^ (Optional) Snapshot related options, see below. -}
    , _tags                                      :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource -}
    , _vpc_options                               :: !(TF.Argument Text)
    {- ^ (Optional) VPC related options, see below. Adding or removing this configuration forces a new resource ( <https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html#es-vpc-limitations> ). -}
    , _computed_arn                              :: !(TF.Attribute Text)
    {- ^ - Amazon Resource Name (ARN) of the domain. -}
    , _computed_domain_id                        :: !(TF.Attribute Text)
    {- ^ - Unique identifier for the domain. -}
    , _computed_endpoint                         :: !(TF.Attribute Text)
    {- ^ - Domain-specific endpoint used to submit index, search, and data upload requests. -}
    , _computed_kibana_endpoint                  :: !(TF.Attribute Text)
    {- ^ - Domain-specific endpoint for kibana without https scheme. -}
    , _computed_vpc_options_0_availability_zones :: !(TF.Attribute Text)
    {- ^ - If the domain was created inside a VPC, the names of the availability zones the configured @subnet_ids@ were created inside. -}
    , _computed_vpc_options_0_vpc_id             :: !(TF.Attribute Text)
    {- ^ - If the domain was created inside a VPC, the ID of the VPC. -}
    } deriving (Show, Eq)

instance TF.ToHCL ElasticsearchDomainResource where
    toHCL ElasticsearchDomainResource{..} = TF.block $ catMaybes
        [ TF.assign "access_policies" <$> TF.argument _access_policies
        , TF.assign "advanced_options" <$> TF.argument _advanced_options
        , TF.assign "cluster_config" <$> TF.argument _cluster_config
        , TF.assign "domain_name" <$> TF.argument _domain_name
        , TF.assign "ebs_options" <$> TF.argument _ebs_options
        , TF.assign "elasticsearch_version" <$> TF.argument _elasticsearch_version
        , TF.assign "log_publishing_options" <$> TF.argument _log_publishing_options
        , TF.assign "snapshot_options" <$> TF.argument _snapshot_options
        , TF.assign "tags" <$> TF.argument _tags
        , TF.assign "vpc_options" <$> TF.argument _vpc_options
        ]

instance HasAccessPolicies ElasticsearchDomainResource (TF.Argument Text) where
    accessPolicies f s@ElasticsearchDomainResource{..} =
        (\a -> s { _access_policies = a } :: ElasticsearchDomainResource)
             <$> f _access_policies

instance HasAdvancedOptions ElasticsearchDomainResource (TF.Argument Text) where
    advancedOptions f s@ElasticsearchDomainResource{..} =
        (\a -> s { _advanced_options = a } :: ElasticsearchDomainResource)
             <$> f _advanced_options

instance HasClusterConfig ElasticsearchDomainResource (TF.Argument Text) where
    clusterConfig f s@ElasticsearchDomainResource{..} =
        (\a -> s { _cluster_config = a } :: ElasticsearchDomainResource)
             <$> f _cluster_config

instance HasDomainName ElasticsearchDomainResource (TF.Argument Text) where
    domainName f s@ElasticsearchDomainResource{..} =
        (\a -> s { _domain_name = a } :: ElasticsearchDomainResource)
             <$> f _domain_name

instance HasEbsOptions ElasticsearchDomainResource (TF.Argument Text) where
    ebsOptions f s@ElasticsearchDomainResource{..} =
        (\a -> s { _ebs_options = a } :: ElasticsearchDomainResource)
             <$> f _ebs_options

instance HasElasticsearchVersion ElasticsearchDomainResource (TF.Argument Text) where
    elasticsearchVersion f s@ElasticsearchDomainResource{..} =
        (\a -> s { _elasticsearch_version = a } :: ElasticsearchDomainResource)
             <$> f _elasticsearch_version

instance HasLogPublishingOptions ElasticsearchDomainResource (TF.Argument Text) where
    logPublishingOptions f s@ElasticsearchDomainResource{..} =
        (\a -> s { _log_publishing_options = a } :: ElasticsearchDomainResource)
             <$> f _log_publishing_options

instance HasSnapshotOptions ElasticsearchDomainResource (TF.Argument Text) where
    snapshotOptions f s@ElasticsearchDomainResource{..} =
        (\a -> s { _snapshot_options = a } :: ElasticsearchDomainResource)
             <$> f _snapshot_options

instance HasTags ElasticsearchDomainResource (TF.Argument TF.Tags) where
    tags f s@ElasticsearchDomainResource{..} =
        (\a -> s { _tags = a } :: ElasticsearchDomainResource)
             <$> f _tags

instance HasVpcOptions ElasticsearchDomainResource (TF.Argument Text) where
    vpcOptions f s@ElasticsearchDomainResource{..} =
        (\a -> s { _vpc_options = a } :: ElasticsearchDomainResource)
             <$> f _vpc_options

instance HasComputedArn ElasticsearchDomainResource (TF.Attribute Text) where
    computedArn f s@ElasticsearchDomainResource{..} =
        (\a -> s { _computed_arn = a } :: ElasticsearchDomainResource)
             <$> f _computed_arn

instance HasComputedDomainId ElasticsearchDomainResource (TF.Attribute Text) where
    computedDomainId f s@ElasticsearchDomainResource{..} =
        (\a -> s { _computed_domain_id = a } :: ElasticsearchDomainResource)
             <$> f _computed_domain_id

instance HasComputedEndpoint ElasticsearchDomainResource (TF.Attribute Text) where
    computedEndpoint f s@ElasticsearchDomainResource{..} =
        (\a -> s { _computed_endpoint = a } :: ElasticsearchDomainResource)
             <$> f _computed_endpoint

instance HasComputedKibanaEndpoint ElasticsearchDomainResource (TF.Attribute Text) where
    computedKibanaEndpoint f s@ElasticsearchDomainResource{..} =
        (\a -> s { _computed_kibana_endpoint = a } :: ElasticsearchDomainResource)
             <$> f _computed_kibana_endpoint

instance HasComputedVpcOptions0AvailabilityZones ElasticsearchDomainResource (TF.Attribute Text) where
    computedVpcOptions0AvailabilityZones f s@ElasticsearchDomainResource{..} =
        (\a -> s { _computed_vpc_options_0_availability_zones = a } :: ElasticsearchDomainResource)
             <$> f _computed_vpc_options_0_availability_zones

instance HasComputedVpcOptions0VpcId ElasticsearchDomainResource (TF.Attribute Text) where
    computedVpcOptions0VpcId f s@ElasticsearchDomainResource{..} =
        (\a -> s { _computed_vpc_options_0_vpc_id = a } :: ElasticsearchDomainResource)
             <$> f _computed_vpc_options_0_vpc_id

elasticsearchDomainResource :: TF.Resource TF.AWS ElasticsearchDomainResource
elasticsearchDomainResource =
    TF.newResource "aws_elasticsearch_domain" $
        ElasticsearchDomainResource {
            _access_policies = TF.Nil
            , _advanced_options = TF.Nil
            , _cluster_config = TF.Nil
            , _domain_name = TF.Nil
            , _ebs_options = TF.Nil
            , _elasticsearch_version = TF.Nil
            , _log_publishing_options = TF.Nil
            , _snapshot_options = TF.Nil
            , _tags = TF.Nil
            , _vpc_options = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_domain_id = TF.Compute "domain_id"
            , _computed_endpoint = TF.Compute "endpoint"
            , _computed_kibana_endpoint = TF.Compute "kibana_endpoint"
            , _computed_vpc_options_0_availability_zones = TF.Compute "vpc_options.0.availability_zones"
            , _computed_vpc_options_0_vpc_id = TF.Compute "vpc_options.0.vpc_id"
            }

{- | The @aws_elastictranscoder_pipeline@ AWS resource.

Provides an Elastic Transcoder pipeline resource.
-}
data ElastictranscoderPipelineResource = ElastictranscoderPipelineResource {
      _aws_kms_key_arn              :: !(TF.Argument Text)
    {- ^ (Optional) The AWS Key Management Service (AWS KMS) key that you want to use with this pipeline. -}
    , _content_config               :: !(TF.Argument Text)
    {- ^ (Optional) The ContentConfig object specifies information about the Amazon S3 bucket in which you want Elastic Transcoder to save transcoded files and playlists. (documented below) -}
    , _content_config_permissions   :: !(TF.Argument Text)
    {- ^ (Optional) The permissions for the @content_config@ object. (documented below) -}
    , _input_bucket                 :: !(TF.Argument Text)
    {- ^ (Required) The Amazon S3 bucket in which you saved the media files that you want to transcode and the graphics that you want to use as watermarks. -}
    , _name                         :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) The name of the pipeline. Maximum 40 characters -}
    , _notifications                :: !(TF.Argument Text)
    {- ^ (Optional) The Amazon Simple Notification Service (Amazon SNS) topic that you want to notify to report job status. (documented below) -}
    , _output_bucket                :: !(TF.Argument Text)
    {- ^ (Optional) The Amazon S3 bucket in which you want Elastic Transcoder to save the transcoded files. -}
    , _role                         :: !(TF.Argument Text)
    {- ^ (Required) The IAM Amazon Resource Name (ARN) for the role that you want Elastic Transcoder to use to transcode jobs for this pipeline. -}
    , _thumbnail_config             :: !(TF.Argument Text)
    {- ^ (Optional) The ThumbnailConfig object specifies information about the Amazon S3 bucket in which you want Elastic Transcoder to save thumbnail files. (documented below) -}
    , _thumbnail_config_permissions :: !(TF.Argument Text)
    {- ^ (Optional) The permissions for the @thumbnail_config@ object. (documented below) -}
    } deriving (Show, Eq)

instance TF.ToHCL ElastictranscoderPipelineResource where
    toHCL ElastictranscoderPipelineResource{..} = TF.block $ catMaybes
        [ TF.assign "aws_kms_key_arn" <$> TF.argument _aws_kms_key_arn
        , TF.assign "content_config" <$> TF.argument _content_config
        , TF.assign "content_config_permissions" <$> TF.argument _content_config_permissions
        , TF.assign "input_bucket" <$> TF.argument _input_bucket
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "notifications" <$> TF.argument _notifications
        , TF.assign "output_bucket" <$> TF.argument _output_bucket
        , TF.assign "role" <$> TF.argument _role
        , TF.assign "thumbnail_config" <$> TF.argument _thumbnail_config
        , TF.assign "thumbnail_config_permissions" <$> TF.argument _thumbnail_config_permissions
        ]

instance HasAwsKmsKeyArn ElastictranscoderPipelineResource (TF.Argument Text) where
    awsKmsKeyArn f s@ElastictranscoderPipelineResource{..} =
        (\a -> s { _aws_kms_key_arn = a } :: ElastictranscoderPipelineResource)
             <$> f _aws_kms_key_arn

instance HasContentConfig ElastictranscoderPipelineResource (TF.Argument Text) where
    contentConfig f s@ElastictranscoderPipelineResource{..} =
        (\a -> s { _content_config = a } :: ElastictranscoderPipelineResource)
             <$> f _content_config

instance HasContentConfigPermissions ElastictranscoderPipelineResource (TF.Argument Text) where
    contentConfigPermissions f s@ElastictranscoderPipelineResource{..} =
        (\a -> s { _content_config_permissions = a } :: ElastictranscoderPipelineResource)
             <$> f _content_config_permissions

instance HasInputBucket ElastictranscoderPipelineResource (TF.Argument Text) where
    inputBucket f s@ElastictranscoderPipelineResource{..} =
        (\a -> s { _input_bucket = a } :: ElastictranscoderPipelineResource)
             <$> f _input_bucket

instance HasName ElastictranscoderPipelineResource (TF.Argument Text) where
    name f s@ElastictranscoderPipelineResource{..} =
        (\a -> s { _name = a } :: ElastictranscoderPipelineResource)
             <$> f _name

instance HasNotifications ElastictranscoderPipelineResource (TF.Argument Text) where
    notifications f s@ElastictranscoderPipelineResource{..} =
        (\a -> s { _notifications = a } :: ElastictranscoderPipelineResource)
             <$> f _notifications

instance HasOutputBucket ElastictranscoderPipelineResource (TF.Argument Text) where
    outputBucket f s@ElastictranscoderPipelineResource{..} =
        (\a -> s { _output_bucket = a } :: ElastictranscoderPipelineResource)
             <$> f _output_bucket

instance HasRole ElastictranscoderPipelineResource (TF.Argument Text) where
    role f s@ElastictranscoderPipelineResource{..} =
        (\a -> s { _role = a } :: ElastictranscoderPipelineResource)
             <$> f _role

instance HasThumbnailConfig ElastictranscoderPipelineResource (TF.Argument Text) where
    thumbnailConfig f s@ElastictranscoderPipelineResource{..} =
        (\a -> s { _thumbnail_config = a } :: ElastictranscoderPipelineResource)
             <$> f _thumbnail_config

instance HasThumbnailConfigPermissions ElastictranscoderPipelineResource (TF.Argument Text) where
    thumbnailConfigPermissions f s@ElastictranscoderPipelineResource{..} =
        (\a -> s { _thumbnail_config_permissions = a } :: ElastictranscoderPipelineResource)
             <$> f _thumbnail_config_permissions

elastictranscoderPipelineResource :: TF.Resource TF.AWS ElastictranscoderPipelineResource
elastictranscoderPipelineResource =
    TF.newResource "aws_elastictranscoder_pipeline" $
        ElastictranscoderPipelineResource {
            _aws_kms_key_arn = TF.Nil
            , _content_config = TF.Nil
            , _content_config_permissions = TF.Nil
            , _input_bucket = TF.Nil
            , _name = TF.Nil
            , _notifications = TF.Nil
            , _output_bucket = TF.Nil
            , _role = TF.Nil
            , _thumbnail_config = TF.Nil
            , _thumbnail_config_permissions = TF.Nil
            }

{- | The @aws_elastictranscoder_preset@ AWS resource.

Provides an Elastic Transcoder preset resource.
-}
data ElastictranscoderPresetResource = ElastictranscoderPresetResource {
      _audio               :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) Audio parameters object (documented below). -}
    , _audio_codec_options :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) Codec options for the audio parameters (documented below) -}
    , _container           :: !(TF.Argument Text)
    {- ^ (Required, Forces new resource) The container type for the output file. Valid values are @flac@ , @flv@ , @fmp4@ , @gif@ , @mp3@ , @mp4@ , @mpg@ , @mxf@ , @oga@ , @ogg@ , @ts@ , and @webm@ . -}
    , _description         :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) A description of the preset (maximum 255 characters) -}
    , _name                :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) The name of the preset. (maximum 40 characters) -}
    , _thumbnails          :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) Thumbnail parameters object (documented below) -}
    , _video               :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) Video parameters object (documented below) -}
    , _video_codec_options :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) Codec options for the video parameters -}
    , _video_watermarks    :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) Watermark parameters for the video parameters (documented below) -}
    } deriving (Show, Eq)

instance TF.ToHCL ElastictranscoderPresetResource where
    toHCL ElastictranscoderPresetResource{..} = TF.block $ catMaybes
        [ TF.assign "audio" <$> TF.argument _audio
        , TF.assign "audio_codec_options" <$> TF.argument _audio_codec_options
        , TF.assign "container" <$> TF.argument _container
        , TF.assign "description" <$> TF.argument _description
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "thumbnails" <$> TF.argument _thumbnails
        , TF.assign "video" <$> TF.argument _video
        , TF.assign "video_codec_options" <$> TF.argument _video_codec_options
        , TF.assign "video_watermarks" <$> TF.argument _video_watermarks
        ]

instance HasAudio ElastictranscoderPresetResource (TF.Argument Text) where
    audio f s@ElastictranscoderPresetResource{..} =
        (\a -> s { _audio = a } :: ElastictranscoderPresetResource)
             <$> f _audio

instance HasAudioCodecOptions ElastictranscoderPresetResource (TF.Argument Text) where
    audioCodecOptions f s@ElastictranscoderPresetResource{..} =
        (\a -> s { _audio_codec_options = a } :: ElastictranscoderPresetResource)
             <$> f _audio_codec_options

instance HasContainer ElastictranscoderPresetResource (TF.Argument Text) where
    container f s@ElastictranscoderPresetResource{..} =
        (\a -> s { _container = a } :: ElastictranscoderPresetResource)
             <$> f _container

instance HasDescription ElastictranscoderPresetResource (TF.Argument Text) where
    description f s@ElastictranscoderPresetResource{..} =
        (\a -> s { _description = a } :: ElastictranscoderPresetResource)
             <$> f _description

instance HasName ElastictranscoderPresetResource (TF.Argument Text) where
    name f s@ElastictranscoderPresetResource{..} =
        (\a -> s { _name = a } :: ElastictranscoderPresetResource)
             <$> f _name

instance HasThumbnails ElastictranscoderPresetResource (TF.Argument Text) where
    thumbnails f s@ElastictranscoderPresetResource{..} =
        (\a -> s { _thumbnails = a } :: ElastictranscoderPresetResource)
             <$> f _thumbnails

instance HasVideo ElastictranscoderPresetResource (TF.Argument Text) where
    video f s@ElastictranscoderPresetResource{..} =
        (\a -> s { _video = a } :: ElastictranscoderPresetResource)
             <$> f _video

instance HasVideoCodecOptions ElastictranscoderPresetResource (TF.Argument Text) where
    videoCodecOptions f s@ElastictranscoderPresetResource{..} =
        (\a -> s { _video_codec_options = a } :: ElastictranscoderPresetResource)
             <$> f _video_codec_options

instance HasVideoWatermarks ElastictranscoderPresetResource (TF.Argument Text) where
    videoWatermarks f s@ElastictranscoderPresetResource{..} =
        (\a -> s { _video_watermarks = a } :: ElastictranscoderPresetResource)
             <$> f _video_watermarks

elastictranscoderPresetResource :: TF.Resource TF.AWS ElastictranscoderPresetResource
elastictranscoderPresetResource =
    TF.newResource "aws_elastictranscoder_preset" $
        ElastictranscoderPresetResource {
            _audio = TF.Nil
            , _audio_codec_options = TF.Nil
            , _container = TF.Nil
            , _description = TF.Nil
            , _name = TF.Nil
            , _thumbnails = TF.Nil
            , _video = TF.Nil
            , _video_codec_options = TF.Nil
            , _video_watermarks = TF.Nil
            }

{- | The @aws_elb_attachment@ AWS resource.

Provides an Elastic Load Balancer Attachment resource. ~> NOTE on ELB
Instances and ELB Attachments: Terraform currently provides both a
standalone ELB Attachment resource (describing an instance attached to an
ELB), and an <elb.html> with @instances@ defined in-line. At this time you
cannot use an ELB with in-line instances in conjunction with an ELB
Attachment resource. Doing so will cause a conflict and will overwrite
attachments.
-}
data ElbAttachmentResource = ElbAttachmentResource {
      _elb       :: !(TF.Argument Text)
    {- ^ (Required) The name of the ELB. -}
    , _instance' :: !(TF.Argument Text)
    {- ^ (Required) Instance ID to place in the ELB pool. -}
    } deriving (Show, Eq)

instance TF.ToHCL ElbAttachmentResource where
    toHCL ElbAttachmentResource{..} = TF.block $ catMaybes
        [ TF.assign "elb" <$> TF.argument _elb
        , TF.assign "instance" <$> TF.argument _instance'
        ]

instance HasElb ElbAttachmentResource (TF.Argument Text) where
    elb f s@ElbAttachmentResource{..} =
        (\a -> s { _elb = a } :: ElbAttachmentResource)
             <$> f _elb

instance HasInstance' ElbAttachmentResource (TF.Argument Text) where
    instance' f s@ElbAttachmentResource{..} =
        (\a -> s { _instance' = a } :: ElbAttachmentResource)
             <$> f _instance'

elbAttachmentResource :: TF.Resource TF.AWS ElbAttachmentResource
elbAttachmentResource =
    TF.newResource "aws_elb_attachment" $
        ElbAttachmentResource {
            _elb = TF.Nil
            , _instance' = TF.Nil
            }

{- | The @aws_elb_load_balancer_backend_server_policy@ AWS resource.

Attaches a load balancer policy to an ELB backend server.
-}
data ElbLoadBalancerBackendServerPolicyResource = ElbLoadBalancerBackendServerPolicyResource {
      _instance_port               :: !(TF.Argument TF.Word16)
    {- ^ (Required) The instance port to apply the policy to. -}
    , _load_balancer_name          :: !(TF.Argument Text)
    {- ^ (Required) The load balancer to attach the policy to. -}
    , _policy_names                :: !(TF.Argument Text)
    {- ^ (Required) List of Policy Names to apply to the backend server. -}
    , _computed_id                 :: !(TF.Attribute Text)
    {- ^ - The ID of the policy. -}
    , _computed_instance_port      :: !(TF.Attribute TF.Word16)
    {- ^ - The backend port the policies are applied to -}
    , _computed_load_balancer_name :: !(TF.Attribute Text)
    {- ^ - The load balancer on which the policy is defined. -}
    } deriving (Show, Eq)

instance TF.ToHCL ElbLoadBalancerBackendServerPolicyResource where
    toHCL ElbLoadBalancerBackendServerPolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "instance_port" <$> TF.argument _instance_port
        , TF.assign "load_balancer_name" <$> TF.argument _load_balancer_name
        , TF.assign "policy_names" <$> TF.argument _policy_names
        ]

instance HasInstancePort ElbLoadBalancerBackendServerPolicyResource (TF.Argument TF.Word16) where
    instancePort f s@ElbLoadBalancerBackendServerPolicyResource{..} =
        (\a -> s { _instance_port = a } :: ElbLoadBalancerBackendServerPolicyResource)
             <$> f _instance_port

instance HasLoadBalancerName ElbLoadBalancerBackendServerPolicyResource (TF.Argument Text) where
    loadBalancerName f s@ElbLoadBalancerBackendServerPolicyResource{..} =
        (\a -> s { _load_balancer_name = a } :: ElbLoadBalancerBackendServerPolicyResource)
             <$> f _load_balancer_name

instance HasPolicyNames ElbLoadBalancerBackendServerPolicyResource (TF.Argument Text) where
    policyNames f s@ElbLoadBalancerBackendServerPolicyResource{..} =
        (\a -> s { _policy_names = a } :: ElbLoadBalancerBackendServerPolicyResource)
             <$> f _policy_names

instance HasComputedId ElbLoadBalancerBackendServerPolicyResource (TF.Attribute Text) where
    computedId f s@ElbLoadBalancerBackendServerPolicyResource{..} =
        (\a -> s { _computed_id = a } :: ElbLoadBalancerBackendServerPolicyResource)
             <$> f _computed_id

instance HasComputedInstancePort ElbLoadBalancerBackendServerPolicyResource (TF.Attribute TF.Word16) where
    computedInstancePort f s@ElbLoadBalancerBackendServerPolicyResource{..} =
        (\a -> s { _computed_instance_port = a } :: ElbLoadBalancerBackendServerPolicyResource)
             <$> f _computed_instance_port

instance HasComputedLoadBalancerName ElbLoadBalancerBackendServerPolicyResource (TF.Attribute Text) where
    computedLoadBalancerName f s@ElbLoadBalancerBackendServerPolicyResource{..} =
        (\a -> s { _computed_load_balancer_name = a } :: ElbLoadBalancerBackendServerPolicyResource)
             <$> f _computed_load_balancer_name

elbLoadBalancerBackendServerPolicyResource :: TF.Resource TF.AWS ElbLoadBalancerBackendServerPolicyResource
elbLoadBalancerBackendServerPolicyResource =
    TF.newResource "aws_elb_load_balancer_backend_server_policy" $
        ElbLoadBalancerBackendServerPolicyResource {
            _instance_port = TF.Nil
            , _load_balancer_name = TF.Nil
            , _policy_names = TF.Nil
            , _computed_id = TF.Compute "id"
            , _computed_instance_port = TF.Compute "instance_port"
            , _computed_load_balancer_name = TF.Compute "load_balancer_name"
            }

{- | The @aws_elb_load_balancer_listener_policy@ AWS resource.

Attaches a load balancer policy to an ELB Listener.
-}
data ElbLoadBalancerListenerPolicyResource = ElbLoadBalancerListenerPolicyResource {
      _load_balancer_name          :: !(TF.Argument Text)
    {- ^ (Required) The load balancer to attach the policy to. -}
    , _load_balancer_port          :: !(TF.Argument TF.Word16)
    {- ^ (Required) The load balancer listener port to apply the policy to. -}
    , _policy_names                :: !(TF.Argument Text)
    {- ^ (Required) List of Policy Names to apply to the backend server. -}
    , _computed_id                 :: !(TF.Attribute Text)
    {- ^ - The ID of the policy. -}
    , _computed_load_balancer_name :: !(TF.Attribute Text)
    {- ^ - The load balancer on which the policy is defined. -}
    , _computed_load_balancer_port :: !(TF.Attribute TF.Word16)
    {- ^ - The load balancer listener port the policies are applied to -}
    } deriving (Show, Eq)

instance TF.ToHCL ElbLoadBalancerListenerPolicyResource where
    toHCL ElbLoadBalancerListenerPolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "load_balancer_name" <$> TF.argument _load_balancer_name
        , TF.assign "load_balancer_port" <$> TF.argument _load_balancer_port
        , TF.assign "policy_names" <$> TF.argument _policy_names
        ]

instance HasLoadBalancerName ElbLoadBalancerListenerPolicyResource (TF.Argument Text) where
    loadBalancerName f s@ElbLoadBalancerListenerPolicyResource{..} =
        (\a -> s { _load_balancer_name = a } :: ElbLoadBalancerListenerPolicyResource)
             <$> f _load_balancer_name

instance HasLoadBalancerPort ElbLoadBalancerListenerPolicyResource (TF.Argument TF.Word16) where
    loadBalancerPort f s@ElbLoadBalancerListenerPolicyResource{..} =
        (\a -> s { _load_balancer_port = a } :: ElbLoadBalancerListenerPolicyResource)
             <$> f _load_balancer_port

instance HasPolicyNames ElbLoadBalancerListenerPolicyResource (TF.Argument Text) where
    policyNames f s@ElbLoadBalancerListenerPolicyResource{..} =
        (\a -> s { _policy_names = a } :: ElbLoadBalancerListenerPolicyResource)
             <$> f _policy_names

instance HasComputedId ElbLoadBalancerListenerPolicyResource (TF.Attribute Text) where
    computedId f s@ElbLoadBalancerListenerPolicyResource{..} =
        (\a -> s { _computed_id = a } :: ElbLoadBalancerListenerPolicyResource)
             <$> f _computed_id

instance HasComputedLoadBalancerName ElbLoadBalancerListenerPolicyResource (TF.Attribute Text) where
    computedLoadBalancerName f s@ElbLoadBalancerListenerPolicyResource{..} =
        (\a -> s { _computed_load_balancer_name = a } :: ElbLoadBalancerListenerPolicyResource)
             <$> f _computed_load_balancer_name

instance HasComputedLoadBalancerPort ElbLoadBalancerListenerPolicyResource (TF.Attribute TF.Word16) where
    computedLoadBalancerPort f s@ElbLoadBalancerListenerPolicyResource{..} =
        (\a -> s { _computed_load_balancer_port = a } :: ElbLoadBalancerListenerPolicyResource)
             <$> f _computed_load_balancer_port

elbLoadBalancerListenerPolicyResource :: TF.Resource TF.AWS ElbLoadBalancerListenerPolicyResource
elbLoadBalancerListenerPolicyResource =
    TF.newResource "aws_elb_load_balancer_listener_policy" $
        ElbLoadBalancerListenerPolicyResource {
            _load_balancer_name = TF.Nil
            , _load_balancer_port = TF.Nil
            , _policy_names = TF.Nil
            , _computed_id = TF.Compute "id"
            , _computed_load_balancer_name = TF.Compute "load_balancer_name"
            , _computed_load_balancer_port = TF.Compute "load_balancer_port"
            }

{- | The @aws_elb_load_balancer_policy@ AWS resource.

Provides a load balancer policy, which can be attached to an ELB listener or
backend server.
-}
data ElbLoadBalancerPolicyResource = ElbLoadBalancerPolicyResource {
      _load_balancer_name          :: !(TF.Argument Text)
    {- ^ (Required) The load balancer on which the policy is defined. -}
    , _policy_attribute            :: !(TF.Argument Text)
    {- ^ (Optional) Policy attribute to apply to the policy. -}
    , _policy_name                 :: !(TF.Argument Text)
    {- ^ (Required) The name of the load balancer policy. -}
    , _policy_type_name            :: !(TF.Argument Text)
    {- ^ (Required) The policy type. -}
    , _computed_id                 :: !(TF.Attribute Text)
    {- ^ - The ID of the policy. -}
    , _computed_load_balancer_name :: !(TF.Attribute Text)
    {- ^ - The load balancer on which the policy is defined. -}
    , _computed_policy_name        :: !(TF.Attribute Text)
    {- ^ - The name of the stickiness policy. -}
    , _computed_policy_type_name   :: !(TF.Attribute Text)
    {- ^ - The policy type of the policy. -}
    } deriving (Show, Eq)

instance TF.ToHCL ElbLoadBalancerPolicyResource where
    toHCL ElbLoadBalancerPolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "load_balancer_name" <$> TF.argument _load_balancer_name
        , TF.assign "policy_attribute" <$> TF.argument _policy_attribute
        , TF.assign "policy_name" <$> TF.argument _policy_name
        , TF.assign "policy_type_name" <$> TF.argument _policy_type_name
        ]

instance HasLoadBalancerName ElbLoadBalancerPolicyResource (TF.Argument Text) where
    loadBalancerName f s@ElbLoadBalancerPolicyResource{..} =
        (\a -> s { _load_balancer_name = a } :: ElbLoadBalancerPolicyResource)
             <$> f _load_balancer_name

instance HasPolicyAttribute ElbLoadBalancerPolicyResource (TF.Argument Text) where
    policyAttribute f s@ElbLoadBalancerPolicyResource{..} =
        (\a -> s { _policy_attribute = a } :: ElbLoadBalancerPolicyResource)
             <$> f _policy_attribute

instance HasPolicyName ElbLoadBalancerPolicyResource (TF.Argument Text) where
    policyName f s@ElbLoadBalancerPolicyResource{..} =
        (\a -> s { _policy_name = a } :: ElbLoadBalancerPolicyResource)
             <$> f _policy_name

instance HasPolicyTypeName ElbLoadBalancerPolicyResource (TF.Argument Text) where
    policyTypeName f s@ElbLoadBalancerPolicyResource{..} =
        (\a -> s { _policy_type_name = a } :: ElbLoadBalancerPolicyResource)
             <$> f _policy_type_name

instance HasComputedId ElbLoadBalancerPolicyResource (TF.Attribute Text) where
    computedId f s@ElbLoadBalancerPolicyResource{..} =
        (\a -> s { _computed_id = a } :: ElbLoadBalancerPolicyResource)
             <$> f _computed_id

instance HasComputedLoadBalancerName ElbLoadBalancerPolicyResource (TF.Attribute Text) where
    computedLoadBalancerName f s@ElbLoadBalancerPolicyResource{..} =
        (\a -> s { _computed_load_balancer_name = a } :: ElbLoadBalancerPolicyResource)
             <$> f _computed_load_balancer_name

instance HasComputedPolicyName ElbLoadBalancerPolicyResource (TF.Attribute Text) where
    computedPolicyName f s@ElbLoadBalancerPolicyResource{..} =
        (\a -> s { _computed_policy_name = a } :: ElbLoadBalancerPolicyResource)
             <$> f _computed_policy_name

instance HasComputedPolicyTypeName ElbLoadBalancerPolicyResource (TF.Attribute Text) where
    computedPolicyTypeName f s@ElbLoadBalancerPolicyResource{..} =
        (\a -> s { _computed_policy_type_name = a } :: ElbLoadBalancerPolicyResource)
             <$> f _computed_policy_type_name

elbLoadBalancerPolicyResource :: TF.Resource TF.AWS ElbLoadBalancerPolicyResource
elbLoadBalancerPolicyResource =
    TF.newResource "aws_elb_load_balancer_policy" $
        ElbLoadBalancerPolicyResource {
            _load_balancer_name = TF.Nil
            , _policy_attribute = TF.Nil
            , _policy_name = TF.Nil
            , _policy_type_name = TF.Nil
            , _computed_id = TF.Compute "id"
            , _computed_load_balancer_name = TF.Compute "load_balancer_name"
            , _computed_policy_name = TF.Compute "policy_name"
            , _computed_policy_type_name = TF.Compute "policy_type_name"
            }

{- | The @aws_elb@ AWS resource.

Provides an Elastic Load Balancer resource, also known as a "Classic Load
Balancer" after the release of </docs/providers/aws/r/lb.html> . ~> NOTE on
ELB Instances and ELB Attachments: Terraform currently provides both a
standalone <elb_attachment.html> (describing an instance attached to an
ELB), and an ELB resource with @instances@ defined in-line. At this time you
cannot use an ELB with in-line instances in conjunction with a ELB
Attachment resources. Doing so will cause a conflict and will overwrite
attachments.
-}
data ElbResource = ElbResource {
      _access_logs                 :: !(TF.Argument Text)
    {- ^ (Optional) An Access Logs block. Access Logs documented below. -}
    , _availability_zones          :: !(TF.Argument Text)
    {- ^ (Required for an EC2-classic ELB) The AZ's to serve traffic in. -}
    , _connection_draining         :: !(TF.Argument Text)
    {- ^ (Optional) Boolean to enable connection draining. Default: @false@ -}
    , _connection_draining_timeout :: !(TF.Argument Text)
    {- ^ (Optional) The time in seconds to allow for connections to drain. Default: @300@ -}
    , _cross_zone_load_balancing   :: !(TF.Argument Text)
    {- ^ (Optional) Enable cross-zone load balancing. Default: @true@ -}
    , _health_check                :: !(TF.Argument Text)
    {- ^ (Optional) A health_check block. Health Check documented below. -}
    , _idle_timeout                :: !(TF.Argument Text)
    {- ^ (Optional) The time in seconds that the connection is allowed to be idle. Default: @60@ -}
    , _instances                   :: !(TF.Argument Text)
    {- ^ (Optional) A list of instance ids to place in the ELB pool. -}
    , _internal                    :: !(TF.Argument Text)
    {- ^ (Optional) If true, ELB will be an internal ELB. -}
    , _listener                    :: !(TF.Argument Text)
    {- ^ (Required) A list of listener blocks. Listeners documented below. -}
    , _name                        :: !(TF.Argument Text)
    {- ^ (Optional) The name of the ELB. By default generated by Terraform. -}
    , _name_prefix                 :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) Creates a unique name beginning with the specified prefix. Conflicts with @name@ . -}
    , _security_groups             :: !(TF.Argument Text)
    {- ^ (Optional) A list of security group IDs to assign to the ELB. Only valid if creating an ELB within a VPC -}
    , _subnets                     :: !(TF.Argument Text)
    {- ^ (Required for a VPC ELB) A list of subnet IDs to attach to the ELB. -}
    , _tags                        :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    } deriving (Show, Eq)

instance TF.ToHCL ElbResource where
    toHCL ElbResource{..} = TF.block $ catMaybes
        [ TF.assign "access_logs" <$> TF.argument _access_logs
        , TF.assign "availability_zones" <$> TF.argument _availability_zones
        , TF.assign "connection_draining" <$> TF.argument _connection_draining
        , TF.assign "connection_draining_timeout" <$> TF.argument _connection_draining_timeout
        , TF.assign "cross_zone_load_balancing" <$> TF.argument _cross_zone_load_balancing
        , TF.assign "health_check" <$> TF.argument _health_check
        , TF.assign "idle_timeout" <$> TF.argument _idle_timeout
        , TF.assign "instances" <$> TF.argument _instances
        , TF.assign "internal" <$> TF.argument _internal
        , TF.assign "listener" <$> TF.argument _listener
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "name_prefix" <$> TF.argument _name_prefix
        , TF.assign "security_groups" <$> TF.argument _security_groups
        , TF.assign "subnets" <$> TF.argument _subnets
        , TF.assign "tags" <$> TF.argument _tags
        ]

instance HasAccessLogs ElbResource (TF.Argument Text) where
    accessLogs f s@ElbResource{..} =
        (\a -> s { _access_logs = a } :: ElbResource)
             <$> f _access_logs

instance HasAvailabilityZones ElbResource (TF.Argument Text) where
    availabilityZones f s@ElbResource{..} =
        (\a -> s { _availability_zones = a } :: ElbResource)
             <$> f _availability_zones

instance HasConnectionDraining ElbResource (TF.Argument Text) where
    connectionDraining f s@ElbResource{..} =
        (\a -> s { _connection_draining = a } :: ElbResource)
             <$> f _connection_draining

instance HasConnectionDrainingTimeout ElbResource (TF.Argument Text) where
    connectionDrainingTimeout f s@ElbResource{..} =
        (\a -> s { _connection_draining_timeout = a } :: ElbResource)
             <$> f _connection_draining_timeout

instance HasCrossZoneLoadBalancing ElbResource (TF.Argument Text) where
    crossZoneLoadBalancing f s@ElbResource{..} =
        (\a -> s { _cross_zone_load_balancing = a } :: ElbResource)
             <$> f _cross_zone_load_balancing

instance HasHealthCheck ElbResource (TF.Argument Text) where
    healthCheck f s@ElbResource{..} =
        (\a -> s { _health_check = a } :: ElbResource)
             <$> f _health_check

instance HasIdleTimeout ElbResource (TF.Argument Text) where
    idleTimeout f s@ElbResource{..} =
        (\a -> s { _idle_timeout = a } :: ElbResource)
             <$> f _idle_timeout

instance HasInstances ElbResource (TF.Argument Text) where
    instances f s@ElbResource{..} =
        (\a -> s { _instances = a } :: ElbResource)
             <$> f _instances

instance HasInternal ElbResource (TF.Argument Text) where
    internal f s@ElbResource{..} =
        (\a -> s { _internal = a } :: ElbResource)
             <$> f _internal

instance HasListener ElbResource (TF.Argument Text) where
    listener f s@ElbResource{..} =
        (\a -> s { _listener = a } :: ElbResource)
             <$> f _listener

instance HasName ElbResource (TF.Argument Text) where
    name f s@ElbResource{..} =
        (\a -> s { _name = a } :: ElbResource)
             <$> f _name

instance HasNamePrefix ElbResource (TF.Argument Text) where
    namePrefix f s@ElbResource{..} =
        (\a -> s { _name_prefix = a } :: ElbResource)
             <$> f _name_prefix

instance HasSecurityGroups ElbResource (TF.Argument Text) where
    securityGroups f s@ElbResource{..} =
        (\a -> s { _security_groups = a } :: ElbResource)
             <$> f _security_groups

instance HasSubnets ElbResource (TF.Argument Text) where
    subnets f s@ElbResource{..} =
        (\a -> s { _subnets = a } :: ElbResource)
             <$> f _subnets

instance HasTags ElbResource (TF.Argument TF.Tags) where
    tags f s@ElbResource{..} =
        (\a -> s { _tags = a } :: ElbResource)
             <$> f _tags

elbResource :: TF.Resource TF.AWS ElbResource
elbResource =
    TF.newResource "aws_elb" $
        ElbResource {
            _access_logs = TF.Nil
            , _availability_zones = TF.Nil
            , _connection_draining = TF.Nil
            , _connection_draining_timeout = TF.Nil
            , _cross_zone_load_balancing = TF.Nil
            , _health_check = TF.Nil
            , _idle_timeout = TF.Nil
            , _instances = TF.Nil
            , _internal = TF.Nil
            , _listener = TF.Nil
            , _name = TF.Nil
            , _name_prefix = TF.Nil
            , _security_groups = TF.Nil
            , _subnets = TF.Nil
            , _tags = TF.Nil
            }

{- | The @aws_emr_cluster@ AWS resource.

Provides an Elastic MapReduce Cluster, a web service that makes it easy to
process large amounts of data efficiently. See
<https://aws.amazon.com/documentation/elastic-mapreduce/> for more
information.
-}
data EmrClusterResource = EmrClusterResource {
      _applications                      :: !(TF.Argument Text)
    {- ^ (Optional) A list of applications for the cluster. Valid values are: @Flink@ , @Hadoop@ , @Hive@ , @Mahout@ , @Pig@ , and @Spark@ . Case insensitive -}
    , _autoscaling_role                  :: !(TF.Argument Text)
    {- ^ (Optional) An IAM role for automatic scaling policies. The IAM role provides permissions that the automatic scaling feature requires to launch and terminate EC2 instances in an instance group. -}
    , _bootstrap_action                  :: !(TF.Argument Text)
    {- ^ (Optional) List of bootstrap actions that will be run before Hadoop is started on the cluster nodes. Defined below -}
    , _configurations                    :: !(TF.Argument Text)
    {- ^ (Optional) List of configurations supplied for the EMR cluster you are creating -}
    , _core_instance_count               :: !(TF.Argument Text)
    {- ^ (Optional) Number of Amazon EC2 instances used to execute the job flow. EMR will use one node as the cluster's master node and use the remainder of the nodes ( @core_instance_count@ -1) as core nodes. Cannot be specified if @instance_groups@ is set. Default @1@ -}
    , _core_instance_type                :: !(TF.Argument Text)
    {- ^ (Optional) The EC2 instance type of the slave nodes. Cannot be specified if @instance_groups@ is set -}
    , _ebs_root_volume_size              :: !(TF.Argument Text)
    {- ^ (Optional) Size in GiB of the EBS root device volume of the Linux AMI that is used for each EC2 instance. Available in Amazon EMR version 4.x and later. -}
    , _ec2_attributes                    :: !(TF.Argument Text)
    {- ^ (Optional) Attributes for the EC2 instances running the job flow. Defined below -}
    , _instance_group                    :: !(TF.Argument Text)
    {- ^ (Optional) A list of @instance_group@ objects for each instance group in the cluster. Exactly one of @master_instance_type@ and @instance_group@ must be specified. If @instance_group@ is set, then it must contain a configuration block for at least the @MASTER@ instance group type (as well as any additional instance groups). Defined below -}
    , _keep_job_flow_alive_when_no_steps :: !(TF.Argument Text)
    {- ^ (Optional) Switch on/off run cluster with no steps or when all steps are complete (default is on) -}
    , _log_uri                           :: !(TF.Argument Text)
    {- ^ (Optional) S3 bucket to write the log files of the job flow. If a value is not provided, logs are not created -}
    , _master_instance_type              :: !(TF.Argument Text)
    {- ^ (Optional) The EC2 instance type of the master node. Exactly one of @master_instance_type@ and @instance_group@ must be specified. -}
    , _name                              :: !(TF.Argument Text)
    {- ^ (Required) The name of the job flow -}
    , _release_label                     :: !(TF.Argument Text)
    {- ^ (Required) The release label for the Amazon EMR release -}
    , _security_configuration            :: !(TF.Argument Text)
    {- ^ (Optional) The security configuration name to attach to the EMR cluster. Only valid for EMR clusters with @release_label@ 4.8.0 or greater -}
    , _service_role                      :: !(TF.Argument Text)
    {- ^ (Required) IAM role that will be assumed by the Amazon EMR service to access AWS resources -}
    , _tags                              :: !(TF.Argument TF.Tags)
    {- ^ (Optional) list of tags to apply to the EMR Cluster -}
    , _termination_protection            :: !(TF.Argument Text)
    {- ^ (Optional) Switch on/off termination protection (default is off) -}
    , _visible_to_all_users              :: !(TF.Argument Text)
    {- ^ (Optional) Whether the job flow is visible to all IAM users of the AWS account associated with the job flow. Default @true@ -}
    } deriving (Show, Eq)

instance TF.ToHCL EmrClusterResource where
    toHCL EmrClusterResource{..} = TF.block $ catMaybes
        [ TF.assign "applications" <$> TF.argument _applications
        , TF.assign "autoscaling_role" <$> TF.argument _autoscaling_role
        , TF.assign "bootstrap_action" <$> TF.argument _bootstrap_action
        , TF.assign "configurations" <$> TF.argument _configurations
        , TF.assign "core_instance_count" <$> TF.argument _core_instance_count
        , TF.assign "core_instance_type" <$> TF.argument _core_instance_type
        , TF.assign "ebs_root_volume_size" <$> TF.argument _ebs_root_volume_size
        , TF.assign "ec2_attributes" <$> TF.argument _ec2_attributes
        , TF.assign "instance_group" <$> TF.argument _instance_group
        , TF.assign "keep_job_flow_alive_when_no_steps" <$> TF.argument _keep_job_flow_alive_when_no_steps
        , TF.assign "log_uri" <$> TF.argument _log_uri
        , TF.assign "master_instance_type" <$> TF.argument _master_instance_type
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "release_label" <$> TF.argument _release_label
        , TF.assign "security_configuration" <$> TF.argument _security_configuration
        , TF.assign "service_role" <$> TF.argument _service_role
        , TF.assign "tags" <$> TF.argument _tags
        , TF.assign "termination_protection" <$> TF.argument _termination_protection
        , TF.assign "visible_to_all_users" <$> TF.argument _visible_to_all_users
        ]

instance HasApplications EmrClusterResource (TF.Argument Text) where
    applications f s@EmrClusterResource{..} =
        (\a -> s { _applications = a } :: EmrClusterResource)
             <$> f _applications

instance HasAutoscalingRole EmrClusterResource (TF.Argument Text) where
    autoscalingRole f s@EmrClusterResource{..} =
        (\a -> s { _autoscaling_role = a } :: EmrClusterResource)
             <$> f _autoscaling_role

instance HasBootstrapAction EmrClusterResource (TF.Argument Text) where
    bootstrapAction f s@EmrClusterResource{..} =
        (\a -> s { _bootstrap_action = a } :: EmrClusterResource)
             <$> f _bootstrap_action

instance HasConfigurations EmrClusterResource (TF.Argument Text) where
    configurations f s@EmrClusterResource{..} =
        (\a -> s { _configurations = a } :: EmrClusterResource)
             <$> f _configurations

instance HasCoreInstanceCount EmrClusterResource (TF.Argument Text) where
    coreInstanceCount f s@EmrClusterResource{..} =
        (\a -> s { _core_instance_count = a } :: EmrClusterResource)
             <$> f _core_instance_count

instance HasCoreInstanceType EmrClusterResource (TF.Argument Text) where
    coreInstanceType f s@EmrClusterResource{..} =
        (\a -> s { _core_instance_type = a } :: EmrClusterResource)
             <$> f _core_instance_type

instance HasEbsRootVolumeSize EmrClusterResource (TF.Argument Text) where
    ebsRootVolumeSize f s@EmrClusterResource{..} =
        (\a -> s { _ebs_root_volume_size = a } :: EmrClusterResource)
             <$> f _ebs_root_volume_size

instance HasEc2Attributes EmrClusterResource (TF.Argument Text) where
    ec2Attributes f s@EmrClusterResource{..} =
        (\a -> s { _ec2_attributes = a } :: EmrClusterResource)
             <$> f _ec2_attributes

instance HasInstanceGroup EmrClusterResource (TF.Argument Text) where
    instanceGroup f s@EmrClusterResource{..} =
        (\a -> s { _instance_group = a } :: EmrClusterResource)
             <$> f _instance_group

instance HasKeepJobFlowAliveWhenNoSteps EmrClusterResource (TF.Argument Text) where
    keepJobFlowAliveWhenNoSteps f s@EmrClusterResource{..} =
        (\a -> s { _keep_job_flow_alive_when_no_steps = a } :: EmrClusterResource)
             <$> f _keep_job_flow_alive_when_no_steps

instance HasLogUri EmrClusterResource (TF.Argument Text) where
    logUri f s@EmrClusterResource{..} =
        (\a -> s { _log_uri = a } :: EmrClusterResource)
             <$> f _log_uri

instance HasMasterInstanceType EmrClusterResource (TF.Argument Text) where
    masterInstanceType f s@EmrClusterResource{..} =
        (\a -> s { _master_instance_type = a } :: EmrClusterResource)
             <$> f _master_instance_type

instance HasName EmrClusterResource (TF.Argument Text) where
    name f s@EmrClusterResource{..} =
        (\a -> s { _name = a } :: EmrClusterResource)
             <$> f _name

instance HasReleaseLabel EmrClusterResource (TF.Argument Text) where
    releaseLabel f s@EmrClusterResource{..} =
        (\a -> s { _release_label = a } :: EmrClusterResource)
             <$> f _release_label

instance HasSecurityConfiguration EmrClusterResource (TF.Argument Text) where
    securityConfiguration f s@EmrClusterResource{..} =
        (\a -> s { _security_configuration = a } :: EmrClusterResource)
             <$> f _security_configuration

instance HasServiceRole EmrClusterResource (TF.Argument Text) where
    serviceRole f s@EmrClusterResource{..} =
        (\a -> s { _service_role = a } :: EmrClusterResource)
             <$> f _service_role

instance HasTags EmrClusterResource (TF.Argument TF.Tags) where
    tags f s@EmrClusterResource{..} =
        (\a -> s { _tags = a } :: EmrClusterResource)
             <$> f _tags

instance HasTerminationProtection EmrClusterResource (TF.Argument Text) where
    terminationProtection f s@EmrClusterResource{..} =
        (\a -> s { _termination_protection = a } :: EmrClusterResource)
             <$> f _termination_protection

instance HasVisibleToAllUsers EmrClusterResource (TF.Argument Text) where
    visibleToAllUsers f s@EmrClusterResource{..} =
        (\a -> s { _visible_to_all_users = a } :: EmrClusterResource)
             <$> f _visible_to_all_users

emrClusterResource :: TF.Resource TF.AWS EmrClusterResource
emrClusterResource =
    TF.newResource "aws_emr_cluster" $
        EmrClusterResource {
            _applications = TF.Nil
            , _autoscaling_role = TF.Nil
            , _bootstrap_action = TF.Nil
            , _configurations = TF.Nil
            , _core_instance_count = TF.Nil
            , _core_instance_type = TF.Nil
            , _ebs_root_volume_size = TF.Nil
            , _ec2_attributes = TF.Nil
            , _instance_group = TF.Nil
            , _keep_job_flow_alive_when_no_steps = TF.Nil
            , _log_uri = TF.Nil
            , _master_instance_type = TF.Nil
            , _name = TF.Nil
            , _release_label = TF.Nil
            , _security_configuration = TF.Nil
            , _service_role = TF.Nil
            , _tags = TF.Nil
            , _termination_protection = TF.Nil
            , _visible_to_all_users = TF.Nil
            }

{- | The @aws_emr_instance_group@ AWS resource.

Provides an Elastic MapReduce Cluster Instance Group configuration. See
<https://aws.amazon.com/documentation/emr/> for more information. ~> NOTE:
At this time, Instance Groups cannot be destroyed through the API nor web
interface. Instance Groups are destroyed when the EMR Cluster is destroyed.
Terraform will resize any Instance Group to zero when destroying the
resource.
-}
data EmrInstanceGroupResource = EmrInstanceGroupResource {
      _cluster_id                      :: !(TF.Argument Text)
    {- ^ (Required) ID of the EMR Cluster to attach to. Changing this forces a new resource to be created. -}
    , _ebs_config                      :: !(TF.Argument Text)
    {- ^ (Optional) One or more @ebs_config@ blocks as defined below. Changing this forces a new resource to be created. -}
    , _ebs_optimized                   :: !(TF.Argument Text)
    {- ^ (Optional) Indicates whether an Amazon EBS volume is EBS-optimized. Changing this forces a new resource to be created. -}
    , _instance_count                  :: !(TF.Argument Text)
    {- ^ (Optional) Target number of instances for the instance group. Defaults to 0. -}
    , _instance_type                   :: !(TF.Argument Text)
    {- ^ (Required) The EC2 instance type for all instances in the instance group. Changing this forces a new resource to be created. -}
    , _name                            :: !(TF.Argument Text)
    {- ^ (Required) Human friendly name given to the instance group. Changing this forces a new resource to be created. -}
    , _computed_id                     :: !(TF.Attribute Text)
    {- ^ - The EMR Instance ID -}
    , _computed_running_instance_count :: !(TF.Attribute Text)
    {- ^ The number of instances currently running in this instance group. -}
    , _computed_status                 :: !(TF.Attribute Text)
    {- ^ The current status of the instance group. -}
    } deriving (Show, Eq)

instance TF.ToHCL EmrInstanceGroupResource where
    toHCL EmrInstanceGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "cluster_id" <$> TF.argument _cluster_id
        , TF.assign "ebs_config" <$> TF.argument _ebs_config
        , TF.assign "ebs_optimized" <$> TF.argument _ebs_optimized
        , TF.assign "instance_count" <$> TF.argument _instance_count
        , TF.assign "instance_type" <$> TF.argument _instance_type
        , TF.assign "name" <$> TF.argument _name
        ]

instance HasClusterId EmrInstanceGroupResource (TF.Argument Text) where
    clusterId f s@EmrInstanceGroupResource{..} =
        (\a -> s { _cluster_id = a } :: EmrInstanceGroupResource)
             <$> f _cluster_id

instance HasEbsConfig EmrInstanceGroupResource (TF.Argument Text) where
    ebsConfig f s@EmrInstanceGroupResource{..} =
        (\a -> s { _ebs_config = a } :: EmrInstanceGroupResource)
             <$> f _ebs_config

instance HasEbsOptimized EmrInstanceGroupResource (TF.Argument Text) where
    ebsOptimized f s@EmrInstanceGroupResource{..} =
        (\a -> s { _ebs_optimized = a } :: EmrInstanceGroupResource)
             <$> f _ebs_optimized

instance HasInstanceCount EmrInstanceGroupResource (TF.Argument Text) where
    instanceCount f s@EmrInstanceGroupResource{..} =
        (\a -> s { _instance_count = a } :: EmrInstanceGroupResource)
             <$> f _instance_count

instance HasInstanceType EmrInstanceGroupResource (TF.Argument Text) where
    instanceType f s@EmrInstanceGroupResource{..} =
        (\a -> s { _instance_type = a } :: EmrInstanceGroupResource)
             <$> f _instance_type

instance HasName EmrInstanceGroupResource (TF.Argument Text) where
    name f s@EmrInstanceGroupResource{..} =
        (\a -> s { _name = a } :: EmrInstanceGroupResource)
             <$> f _name

instance HasComputedId EmrInstanceGroupResource (TF.Attribute Text) where
    computedId f s@EmrInstanceGroupResource{..} =
        (\a -> s { _computed_id = a } :: EmrInstanceGroupResource)
             <$> f _computed_id

instance HasComputedRunningInstanceCount EmrInstanceGroupResource (TF.Attribute Text) where
    computedRunningInstanceCount f s@EmrInstanceGroupResource{..} =
        (\a -> s { _computed_running_instance_count = a } :: EmrInstanceGroupResource)
             <$> f _computed_running_instance_count

instance HasComputedStatus EmrInstanceGroupResource (TF.Attribute Text) where
    computedStatus f s@EmrInstanceGroupResource{..} =
        (\a -> s { _computed_status = a } :: EmrInstanceGroupResource)
             <$> f _computed_status

emrInstanceGroupResource :: TF.Resource TF.AWS EmrInstanceGroupResource
emrInstanceGroupResource =
    TF.newResource "aws_emr_instance_group" $
        EmrInstanceGroupResource {
            _cluster_id = TF.Nil
            , _ebs_config = TF.Nil
            , _ebs_optimized = TF.Nil
            , _instance_count = TF.Nil
            , _instance_type = TF.Nil
            , _name = TF.Nil
            , _computed_id = TF.Compute "id"
            , _computed_running_instance_count = TF.Compute "running_instance_count"
            , _computed_status = TF.Compute "status"
            }

{- | The @aws_emr_security_configuration@ AWS resource.

Provides a resource to manage AWS EMR Security Configurations
-}
data EmrSecurityConfigurationResource = EmrSecurityConfigurationResource {
      _configuration          :: !(TF.Argument Text)
    {- ^ (Required) A JSON formatted Security Configuration -}
    , _name                   :: !(TF.Argument Text)
    {- ^ (Optional) The name of the EMR Security Configuration. By default generated by Terraform. -}
    , _name_prefix            :: !(TF.Argument Text)
    {- ^ (Optional) Creates a unique name beginning with the specified prefix. Conflicts with @name@ . -}
    , _computed_configuration :: !(TF.Attribute Text)
    {- ^ - The JSON formatted Security Configuration -}
    , _computed_creation_date :: !(TF.Attribute Text)
    {- ^ - Date the Security Configuration was created -}
    , _computed_id            :: !(TF.Attribute Text)
    {- ^ - The ID of the EMR Security Configuration (Same as the @name@ ) -}
    , _computed_name          :: !(TF.Attribute Text)
    {- ^ - The Name of the EMR Security Configuration -}
    } deriving (Show, Eq)

instance TF.ToHCL EmrSecurityConfigurationResource where
    toHCL EmrSecurityConfigurationResource{..} = TF.block $ catMaybes
        [ TF.assign "configuration" <$> TF.argument _configuration
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "name_prefix" <$> TF.argument _name_prefix
        ]

instance HasConfiguration EmrSecurityConfigurationResource (TF.Argument Text) where
    configuration f s@EmrSecurityConfigurationResource{..} =
        (\a -> s { _configuration = a } :: EmrSecurityConfigurationResource)
             <$> f _configuration

instance HasName EmrSecurityConfigurationResource (TF.Argument Text) where
    name f s@EmrSecurityConfigurationResource{..} =
        (\a -> s { _name = a } :: EmrSecurityConfigurationResource)
             <$> f _name

instance HasNamePrefix EmrSecurityConfigurationResource (TF.Argument Text) where
    namePrefix f s@EmrSecurityConfigurationResource{..} =
        (\a -> s { _name_prefix = a } :: EmrSecurityConfigurationResource)
             <$> f _name_prefix

instance HasComputedConfiguration EmrSecurityConfigurationResource (TF.Attribute Text) where
    computedConfiguration f s@EmrSecurityConfigurationResource{..} =
        (\a -> s { _computed_configuration = a } :: EmrSecurityConfigurationResource)
             <$> f _computed_configuration

instance HasComputedCreationDate EmrSecurityConfigurationResource (TF.Attribute Text) where
    computedCreationDate f s@EmrSecurityConfigurationResource{..} =
        (\a -> s { _computed_creation_date = a } :: EmrSecurityConfigurationResource)
             <$> f _computed_creation_date

instance HasComputedId EmrSecurityConfigurationResource (TF.Attribute Text) where
    computedId f s@EmrSecurityConfigurationResource{..} =
        (\a -> s { _computed_id = a } :: EmrSecurityConfigurationResource)
             <$> f _computed_id

instance HasComputedName EmrSecurityConfigurationResource (TF.Attribute Text) where
    computedName f s@EmrSecurityConfigurationResource{..} =
        (\a -> s { _computed_name = a } :: EmrSecurityConfigurationResource)
             <$> f _computed_name

emrSecurityConfigurationResource :: TF.Resource TF.AWS EmrSecurityConfigurationResource
emrSecurityConfigurationResource =
    TF.newResource "aws_emr_security_configuration" $
        EmrSecurityConfigurationResource {
            _configuration = TF.Nil
            , _name = TF.Nil
            , _name_prefix = TF.Nil
            , _computed_configuration = TF.Compute "configuration"
            , _computed_creation_date = TF.Compute "creation_date"
            , _computed_id = TF.Compute "id"
            , _computed_name = TF.Compute "name"
            }

{- | The @aws_flow_log@ AWS resource.

Provides a VPC/Subnet/ENI Flow Log to capture IP traffic for a specific
network interface, subnet, or VPC. Logs are sent to a CloudWatch Log Group.
-}
data FlowLogResource = FlowLogResource {
      _eni_id         :: !(TF.Argument Text)
    {- ^ (Optional) Elastic Network Interface ID to attach to -}
    , _iam_role_arn   :: !(TF.Argument Text)
    {- ^ (Required) The ARN for the IAM role that's used to post flow logs to a CloudWatch Logs log group -}
    , _log_group_name :: !(TF.Argument Text)
    {- ^ (Required) The name of the CloudWatch log group -}
    , _subnet_id      :: !(TF.Argument Text)
    {- ^ (Optional) Subnet ID to attach to -}
    , _traffic_type   :: !(TF.Argument Text)
    {- ^ (Required) The type of traffic to capture. Valid values: @ACCEPT@ , @REJECT@ , @ALL@ -}
    , _vpc_id         :: !(TF.Argument Text)
    {- ^ (Optional) VPC ID to attach to -}
    , _computed_id    :: !(TF.Attribute Text)
    {- ^ - The Flow Log ID -}
    } deriving (Show, Eq)

instance TF.ToHCL FlowLogResource where
    toHCL FlowLogResource{..} = TF.block $ catMaybes
        [ TF.assign "eni_id" <$> TF.argument _eni_id
        , TF.assign "iam_role_arn" <$> TF.argument _iam_role_arn
        , TF.assign "log_group_name" <$> TF.argument _log_group_name
        , TF.assign "subnet_id" <$> TF.argument _subnet_id
        , TF.assign "traffic_type" <$> TF.argument _traffic_type
        , TF.assign "vpc_id" <$> TF.argument _vpc_id
        ]

instance HasEniId FlowLogResource (TF.Argument Text) where
    eniId f s@FlowLogResource{..} =
        (\a -> s { _eni_id = a } :: FlowLogResource)
             <$> f _eni_id

instance HasIamRoleArn FlowLogResource (TF.Argument Text) where
    iamRoleArn f s@FlowLogResource{..} =
        (\a -> s { _iam_role_arn = a } :: FlowLogResource)
             <$> f _iam_role_arn

instance HasLogGroupName FlowLogResource (TF.Argument Text) where
    logGroupName f s@FlowLogResource{..} =
        (\a -> s { _log_group_name = a } :: FlowLogResource)
             <$> f _log_group_name

instance HasSubnetId FlowLogResource (TF.Argument Text) where
    subnetId f s@FlowLogResource{..} =
        (\a -> s { _subnet_id = a } :: FlowLogResource)
             <$> f _subnet_id

instance HasTrafficType FlowLogResource (TF.Argument Text) where
    trafficType f s@FlowLogResource{..} =
        (\a -> s { _traffic_type = a } :: FlowLogResource)
             <$> f _traffic_type

instance HasVpcId FlowLogResource (TF.Argument Text) where
    vpcId f s@FlowLogResource{..} =
        (\a -> s { _vpc_id = a } :: FlowLogResource)
             <$> f _vpc_id

instance HasComputedId FlowLogResource (TF.Attribute Text) where
    computedId f s@FlowLogResource{..} =
        (\a -> s { _computed_id = a } :: FlowLogResource)
             <$> f _computed_id

flowLogResource :: TF.Resource TF.AWS FlowLogResource
flowLogResource =
    TF.newResource "aws_flow_log" $
        FlowLogResource {
            _eni_id = TF.Nil
            , _iam_role_arn = TF.Nil
            , _log_group_name = TF.Nil
            , _subnet_id = TF.Nil
            , _traffic_type = TF.Nil
            , _vpc_id = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_glacier_vault@ AWS resource.

Provides a Glacier Vault Resource. You can refer to the
<https://docs.aws.amazon.com/amazonglacier/latest/dev/working-with-vaults.html>
for a full explanation of the Glacier Vault functionality ~> NOTE: When
removing a Glacier Vault, the Vault must be empty.
-}
data GlacierVaultResource = GlacierVaultResource {
      _access_policy     :: !(TF.Argument Text)
    {- ^ (Optional) The policy document. This is a JSON formatted string. The heredoc syntax or @file@ function is helpful here. Use the <https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-access-policy.html> for more information on Glacier Vault Policy -}
    , _name              :: !(TF.Argument Text)
    {- ^ (Required) The name of the Vault. Names can be between 1 and 255 characters long and the valid characters are a-z, A-Z, 0-9, '_' (underscore), '-' (hyphen), and '.' (period). -}
    , _notification      :: !(TF.Argument Text)
    {- ^ (Optional) The notifications for the Vault. Fields documented below. -}
    , _tags              :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _computed_arn      :: !(TF.Attribute Text)
    {- ^ - The ARN of the vault. -}
    , _computed_location :: !(TF.Attribute Text)
    {- ^ - The URI of the vault that was created. -}
    } deriving (Show, Eq)

instance TF.ToHCL GlacierVaultResource where
    toHCL GlacierVaultResource{..} = TF.block $ catMaybes
        [ TF.assign "access_policy" <$> TF.argument _access_policy
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "notification" <$> TF.argument _notification
        , TF.assign "tags" <$> TF.argument _tags
        ]

instance HasAccessPolicy GlacierVaultResource (TF.Argument Text) where
    accessPolicy f s@GlacierVaultResource{..} =
        (\a -> s { _access_policy = a } :: GlacierVaultResource)
             <$> f _access_policy

instance HasName GlacierVaultResource (TF.Argument Text) where
    name f s@GlacierVaultResource{..} =
        (\a -> s { _name = a } :: GlacierVaultResource)
             <$> f _name

instance HasNotification GlacierVaultResource (TF.Argument Text) where
    notification f s@GlacierVaultResource{..} =
        (\a -> s { _notification = a } :: GlacierVaultResource)
             <$> f _notification

instance HasTags GlacierVaultResource (TF.Argument TF.Tags) where
    tags f s@GlacierVaultResource{..} =
        (\a -> s { _tags = a } :: GlacierVaultResource)
             <$> f _tags

instance HasComputedArn GlacierVaultResource (TF.Attribute Text) where
    computedArn f s@GlacierVaultResource{..} =
        (\a -> s { _computed_arn = a } :: GlacierVaultResource)
             <$> f _computed_arn

instance HasComputedLocation GlacierVaultResource (TF.Attribute Text) where
    computedLocation f s@GlacierVaultResource{..} =
        (\a -> s { _computed_location = a } :: GlacierVaultResource)
             <$> f _computed_location

glacierVaultResource :: TF.Resource TF.AWS GlacierVaultResource
glacierVaultResource =
    TF.newResource "aws_glacier_vault" $
        GlacierVaultResource {
            _access_policy = TF.Nil
            , _name = TF.Nil
            , _notification = TF.Nil
            , _tags = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_location = TF.Compute "location"
            }

{- | The @aws_glue_catalog_database@ AWS resource.

Provides a Glue Catalog Database Resource. You can refer to the
<http://docs.aws.amazon.com/glue/latest/dg/populate-data-catalog.html> for a
full explanation of the Glue Data Catalog functionality
-}
data GlueCatalogDatabaseResource = GlueCatalogDatabaseResource {
      _catalog_id   :: !(TF.Argument Text)
    {- ^ (Optional) ID of the Glue Catalog to create the database in. If omitted, this defaults to the AWS Account ID. -}
    , _description  :: !(TF.Argument Text)
    {- ^ (Optional) Description of the database. -}
    , _location_uri :: !(TF.Argument Text)
    {- ^ (Optional) The location of the database (for example, an HDFS path). -}
    , _name         :: !(TF.Argument Text)
    {- ^ (Required) The name of the database. -}
    , _parameters   :: !(TF.Argument Text)
    {- ^ (Optional) A list of key-value pairs that define parameters and properties of the database. -}
    } deriving (Show, Eq)

instance TF.ToHCL GlueCatalogDatabaseResource where
    toHCL GlueCatalogDatabaseResource{..} = TF.block $ catMaybes
        [ TF.assign "catalog_id" <$> TF.argument _catalog_id
        , TF.assign "description" <$> TF.argument _description
        , TF.assign "location_uri" <$> TF.argument _location_uri
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "parameters" <$> TF.argument _parameters
        ]

instance HasCatalogId GlueCatalogDatabaseResource (TF.Argument Text) where
    catalogId f s@GlueCatalogDatabaseResource{..} =
        (\a -> s { _catalog_id = a } :: GlueCatalogDatabaseResource)
             <$> f _catalog_id

instance HasDescription GlueCatalogDatabaseResource (TF.Argument Text) where
    description f s@GlueCatalogDatabaseResource{..} =
        (\a -> s { _description = a } :: GlueCatalogDatabaseResource)
             <$> f _description

instance HasLocationUri GlueCatalogDatabaseResource (TF.Argument Text) where
    locationUri f s@GlueCatalogDatabaseResource{..} =
        (\a -> s { _location_uri = a } :: GlueCatalogDatabaseResource)
             <$> f _location_uri

instance HasName GlueCatalogDatabaseResource (TF.Argument Text) where
    name f s@GlueCatalogDatabaseResource{..} =
        (\a -> s { _name = a } :: GlueCatalogDatabaseResource)
             <$> f _name

instance HasParameters GlueCatalogDatabaseResource (TF.Argument Text) where
    parameters f s@GlueCatalogDatabaseResource{..} =
        (\a -> s { _parameters = a } :: GlueCatalogDatabaseResource)
             <$> f _parameters

glueCatalogDatabaseResource :: TF.Resource TF.AWS GlueCatalogDatabaseResource
glueCatalogDatabaseResource =
    TF.newResource "aws_glue_catalog_database" $
        GlueCatalogDatabaseResource {
            _catalog_id = TF.Nil
            , _description = TF.Nil
            , _location_uri = TF.Nil
            , _name = TF.Nil
            , _parameters = TF.Nil
            }

{- | The @aws_guardduty_detector@ AWS resource.

Provides a resource to manage a GuardDuty detector. ~> NOTE: Deleting this
resource is equivalent to "disabling" GuardDuty for an AWS region, which
removes all existing findings. You can set the @enable@ attribute to @false@
to instead "suspend" monitoring and feedback reporting while keeping
existing data. See the
<https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_suspend-disable.html>
for more information.
-}
data GuarddutyDetectorResource = GuarddutyDetectorResource {
      _enable              :: !(TF.Argument TF.Bool)
    {- ^ (Optional) Enable monitoring and feedback reporting. Setting to @false@ is equivalent to "suspending" GuardDuty. Defaults to @true@ . -}
    , _computed_account_id :: !(TF.Attribute Text)
    {- ^ - The AWS account ID of the GuardDuty detector -}
    , _computed_id         :: !(TF.Attribute Text)
    {- ^ - The ID of the GuardDuty detector -}
    } deriving (Show, Eq)

instance TF.ToHCL GuarddutyDetectorResource where
    toHCL GuarddutyDetectorResource{..} = TF.block $ catMaybes
        [ TF.assign "enable" <$> TF.argument _enable
        ]

instance HasEnable GuarddutyDetectorResource (TF.Argument TF.Bool) where
    enable f s@GuarddutyDetectorResource{..} =
        (\a -> s { _enable = a } :: GuarddutyDetectorResource)
             <$> f _enable

instance HasComputedAccountId GuarddutyDetectorResource (TF.Attribute Text) where
    computedAccountId f s@GuarddutyDetectorResource{..} =
        (\a -> s { _computed_account_id = a } :: GuarddutyDetectorResource)
             <$> f _computed_account_id

instance HasComputedId GuarddutyDetectorResource (TF.Attribute Text) where
    computedId f s@GuarddutyDetectorResource{..} =
        (\a -> s { _computed_id = a } :: GuarddutyDetectorResource)
             <$> f _computed_id

guarddutyDetectorResource :: TF.Resource TF.AWS GuarddutyDetectorResource
guarddutyDetectorResource =
    TF.newResource "aws_guardduty_detector" $
        GuarddutyDetectorResource {
            _enable = TF.Nil
            , _computed_account_id = TF.Compute "account_id"
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_guardduty_member@ AWS resource.

Provides a resource to manage a GuardDuty member. ~> NOTE: Currently after
using this resource, you must manually invite and accept member account
invitations before GuardDuty will begin sending cross-account events. More
information for how to accomplish this via the AWS Console or API can be
found in the
<https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_accounts.html> .
Terraform implementation of member invitation and acceptance resources can
be tracked in
<https://github.com/terraform-providers/terraform-provider-aws/issues/2489>
.
-}
data GuarddutyMemberResource = GuarddutyMemberResource {
      _account_id  :: !(TF.Argument Text)
    {- ^ (Required) AWS account ID for member account. -}
    , _detector_id :: !(TF.Argument Text)
    {- ^ (Required) The detector ID of the GuardDuty account where you want to create member accounts. -}
    , _email       :: !(TF.Argument Text)
    {- ^ (Required) Email address for member account. -}
    , _computed_id :: !(TF.Attribute Text)
    {- ^ - The ID of the GuardDuty member -}
    } deriving (Show, Eq)

instance TF.ToHCL GuarddutyMemberResource where
    toHCL GuarddutyMemberResource{..} = TF.block $ catMaybes
        [ TF.assign "account_id" <$> TF.argument _account_id
        , TF.assign "detector_id" <$> TF.argument _detector_id
        , TF.assign "email" <$> TF.argument _email
        ]

instance HasAccountId GuarddutyMemberResource (TF.Argument Text) where
    accountId f s@GuarddutyMemberResource{..} =
        (\a -> s { _account_id = a } :: GuarddutyMemberResource)
             <$> f _account_id

instance HasDetectorId GuarddutyMemberResource (TF.Argument Text) where
    detectorId f s@GuarddutyMemberResource{..} =
        (\a -> s { _detector_id = a } :: GuarddutyMemberResource)
             <$> f _detector_id

instance HasEmail GuarddutyMemberResource (TF.Argument Text) where
    email f s@GuarddutyMemberResource{..} =
        (\a -> s { _email = a } :: GuarddutyMemberResource)
             <$> f _email

instance HasComputedId GuarddutyMemberResource (TF.Attribute Text) where
    computedId f s@GuarddutyMemberResource{..} =
        (\a -> s { _computed_id = a } :: GuarddutyMemberResource)
             <$> f _computed_id

guarddutyMemberResource :: TF.Resource TF.AWS GuarddutyMemberResource
guarddutyMemberResource =
    TF.newResource "aws_guardduty_member" $
        GuarddutyMemberResource {
            _account_id = TF.Nil
            , _detector_id = TF.Nil
            , _email = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_iam_access_key@ AWS resource.

Provides an IAM access key. This is a set of credentials that allow API
requests to be made as an IAM user.
-}
data IamAccessKeyResource = IamAccessKeyResource {
      _pgp_key                    :: !(TF.Argument Text)
    {- ^ (Optional) Either a base-64 encoded PGP public key, or a keybase username in the form @keybase:some_person_that_exists@ . -}
    , _user                       :: !(TF.Argument Text)
    {- ^ (Required) The IAM user to associate with this access key. -}
    , _computed_encrypted_secret  :: !(TF.Attribute Text)
    {- ^ - The encrypted secret, base64 encoded. ~> NOTE: The encrypted secret may be decrypted using the command line, for example: @terraform output secret | base64 --decode | keybase pgp decrypt@ . -}
    , _computed_id                :: !(TF.Attribute Text)
    {- ^ - The access key ID. -}
    , _computed_key_fingerprint   :: !(TF.Attribute Text)
    {- ^ - The fingerprint of the PGP key used to encrypt the secret -}
    , _computed_secret            :: !(TF.Attribute Text)
    {- ^ - The secret access key. Note that this will be written to the state file. Please supply a @pgp_key@ instead, which will prevent the secret from being stored in plain text -}
    , _computed_ses_smtp_password :: !(TF.Attribute Text)
    {- ^ - The secret access key converted into an SES SMTP password by applying <https://docs.aws.amazon.com/ses/latest/DeveloperGuide/smtp-credentials.html#smtp-credentials-convert> . -}
    , _computed_status            :: !(TF.Attribute Text)
    {- ^ - "Active" or "Inactive". Keys are initially active, but can be made inactive by other means. -}
    , _computed_user              :: !(TF.Attribute Text)
    {- ^ - The IAM user associated with this access key. -}
    } deriving (Show, Eq)

instance TF.ToHCL IamAccessKeyResource where
    toHCL IamAccessKeyResource{..} = TF.block $ catMaybes
        [ TF.assign "pgp_key" <$> TF.argument _pgp_key
        , TF.assign "user" <$> TF.argument _user
        ]

instance HasPgpKey IamAccessKeyResource (TF.Argument Text) where
    pgpKey f s@IamAccessKeyResource{..} =
        (\a -> s { _pgp_key = a } :: IamAccessKeyResource)
             <$> f _pgp_key

instance HasUser IamAccessKeyResource (TF.Argument Text) where
    user f s@IamAccessKeyResource{..} =
        (\a -> s { _user = a } :: IamAccessKeyResource)
             <$> f _user

instance HasComputedEncryptedSecret IamAccessKeyResource (TF.Attribute Text) where
    computedEncryptedSecret f s@IamAccessKeyResource{..} =
        (\a -> s { _computed_encrypted_secret = a } :: IamAccessKeyResource)
             <$> f _computed_encrypted_secret

instance HasComputedId IamAccessKeyResource (TF.Attribute Text) where
    computedId f s@IamAccessKeyResource{..} =
        (\a -> s { _computed_id = a } :: IamAccessKeyResource)
             <$> f _computed_id

instance HasComputedKeyFingerprint IamAccessKeyResource (TF.Attribute Text) where
    computedKeyFingerprint f s@IamAccessKeyResource{..} =
        (\a -> s { _computed_key_fingerprint = a } :: IamAccessKeyResource)
             <$> f _computed_key_fingerprint

instance HasComputedSecret IamAccessKeyResource (TF.Attribute Text) where
    computedSecret f s@IamAccessKeyResource{..} =
        (\a -> s { _computed_secret = a } :: IamAccessKeyResource)
             <$> f _computed_secret

instance HasComputedSesSmtpPassword IamAccessKeyResource (TF.Attribute Text) where
    computedSesSmtpPassword f s@IamAccessKeyResource{..} =
        (\a -> s { _computed_ses_smtp_password = a } :: IamAccessKeyResource)
             <$> f _computed_ses_smtp_password

instance HasComputedStatus IamAccessKeyResource (TF.Attribute Text) where
    computedStatus f s@IamAccessKeyResource{..} =
        (\a -> s { _computed_status = a } :: IamAccessKeyResource)
             <$> f _computed_status

instance HasComputedUser IamAccessKeyResource (TF.Attribute Text) where
    computedUser f s@IamAccessKeyResource{..} =
        (\a -> s { _computed_user = a } :: IamAccessKeyResource)
             <$> f _computed_user

iamAccessKeyResource :: TF.Resource TF.AWS IamAccessKeyResource
iamAccessKeyResource =
    TF.newResource "aws_iam_access_key" $
        IamAccessKeyResource {
            _pgp_key = TF.Nil
            , _user = TF.Nil
            , _computed_encrypted_secret = TF.Compute "encrypted_secret"
            , _computed_id = TF.Compute "id"
            , _computed_key_fingerprint = TF.Compute "key_fingerprint"
            , _computed_secret = TF.Compute "secret"
            , _computed_ses_smtp_password = TF.Compute "ses_smtp_password"
            , _computed_status = TF.Compute "status"
            , _computed_user = TF.Compute "user"
            }

{- | The @aws_iam_account_alias@ AWS resource.

-> Note: There is only a single account alias per AWS account. Manages the
account alias for the AWS Account.
-}
data IamAccountAliasResource = IamAccountAliasResource {
      _account_alias :: !(TF.Argument Text)
    {- ^ (Required) The account alias -}
    } deriving (Show, Eq)

instance TF.ToHCL IamAccountAliasResource where
    toHCL IamAccountAliasResource{..} = TF.block $ catMaybes
        [ TF.assign "account_alias" <$> TF.argument _account_alias
        ]

instance HasAccountAlias IamAccountAliasResource (TF.Argument Text) where
    accountAlias f s@IamAccountAliasResource{..} =
        (\a -> s { _account_alias = a } :: IamAccountAliasResource)
             <$> f _account_alias

iamAccountAliasResource :: TF.Resource TF.AWS IamAccountAliasResource
iamAccountAliasResource =
    TF.newResource "aws_iam_account_alias" $
        IamAccountAliasResource {
            _account_alias = TF.Nil
            }

{- | The @aws_iam_account_password_policy@ AWS resource.

-> Note: There is only a single policy allowed per AWS account. An existing
policy will be lost when using this resource as an effect of this
limitation. Manages Password Policy for the AWS Account. See more about
<http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html>
in the official AWS docs.
-}
data IamAccountPasswordPolicyResource = IamAccountPasswordPolicyResource {
      _allow_users_to_change_password :: !(TF.Argument Text)
    {- ^ (Optional) Whether to allow users to change their own password -}
    , _hard_expiry                    :: !(TF.Argument Text)
    {- ^ (Optional) Whether users are prevented from setting a new password after their password has expired (i.e. require administrator reset) -}
    , _max_password_age               :: !(TF.Argument Text)
    {- ^ (Optional) The number of days that an user password is valid. -}
    , _minimum_password_length        :: !(TF.Argument Text)
    {- ^ (Optional) Minimum length to require for user passwords. -}
    , _password_reuse_prevention      :: !(TF.Argument Text)
    {- ^ (Optional) The number of previous passwords that users are prevented from reusing. -}
    , _require_lowercase_characters   :: !(TF.Argument Text)
    {- ^ (Optional) Whether to require lowercase characters for user passwords. -}
    , _require_numbers                :: !(TF.Argument Text)
    {- ^ (Optional) Whether to require numbers for user passwords. -}
    , _require_symbols                :: !(TF.Argument Text)
    {- ^ (Optional) Whether to require symbols for user passwords. -}
    , _require_uppercase_characters   :: !(TF.Argument Text)
    {- ^ (Optional) Whether to require uppercase characters for user passwords. -}
    , _computed_expire_passwords      :: !(TF.Attribute Text)
    {- ^ - Indicates whether passwords in the account expire. Returns @true@ if @max_password_age@ contains a value greater than @0@ . Returns @false@ if it is @0@ or not present . -}
    } deriving (Show, Eq)

instance TF.ToHCL IamAccountPasswordPolicyResource where
    toHCL IamAccountPasswordPolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "allow_users_to_change_password" <$> TF.argument _allow_users_to_change_password
        , TF.assign "hard_expiry" <$> TF.argument _hard_expiry
        , TF.assign "max_password_age" <$> TF.argument _max_password_age
        , TF.assign "minimum_password_length" <$> TF.argument _minimum_password_length
        , TF.assign "password_reuse_prevention" <$> TF.argument _password_reuse_prevention
        , TF.assign "require_lowercase_characters" <$> TF.argument _require_lowercase_characters
        , TF.assign "require_numbers" <$> TF.argument _require_numbers
        , TF.assign "require_symbols" <$> TF.argument _require_symbols
        , TF.assign "require_uppercase_characters" <$> TF.argument _require_uppercase_characters
        ]

instance HasAllowUsersToChangePassword IamAccountPasswordPolicyResource (TF.Argument Text) where
    allowUsersToChangePassword f s@IamAccountPasswordPolicyResource{..} =
        (\a -> s { _allow_users_to_change_password = a } :: IamAccountPasswordPolicyResource)
             <$> f _allow_users_to_change_password

instance HasHardExpiry IamAccountPasswordPolicyResource (TF.Argument Text) where
    hardExpiry f s@IamAccountPasswordPolicyResource{..} =
        (\a -> s { _hard_expiry = a } :: IamAccountPasswordPolicyResource)
             <$> f _hard_expiry

instance HasMaxPasswordAge IamAccountPasswordPolicyResource (TF.Argument Text) where
    maxPasswordAge f s@IamAccountPasswordPolicyResource{..} =
        (\a -> s { _max_password_age = a } :: IamAccountPasswordPolicyResource)
             <$> f _max_password_age

instance HasMinimumPasswordLength IamAccountPasswordPolicyResource (TF.Argument Text) where
    minimumPasswordLength f s@IamAccountPasswordPolicyResource{..} =
        (\a -> s { _minimum_password_length = a } :: IamAccountPasswordPolicyResource)
             <$> f _minimum_password_length

instance HasPasswordReusePrevention IamAccountPasswordPolicyResource (TF.Argument Text) where
    passwordReusePrevention f s@IamAccountPasswordPolicyResource{..} =
        (\a -> s { _password_reuse_prevention = a } :: IamAccountPasswordPolicyResource)
             <$> f _password_reuse_prevention

instance HasRequireLowercaseCharacters IamAccountPasswordPolicyResource (TF.Argument Text) where
    requireLowercaseCharacters f s@IamAccountPasswordPolicyResource{..} =
        (\a -> s { _require_lowercase_characters = a } :: IamAccountPasswordPolicyResource)
             <$> f _require_lowercase_characters

instance HasRequireNumbers IamAccountPasswordPolicyResource (TF.Argument Text) where
    requireNumbers f s@IamAccountPasswordPolicyResource{..} =
        (\a -> s { _require_numbers = a } :: IamAccountPasswordPolicyResource)
             <$> f _require_numbers

instance HasRequireSymbols IamAccountPasswordPolicyResource (TF.Argument Text) where
    requireSymbols f s@IamAccountPasswordPolicyResource{..} =
        (\a -> s { _require_symbols = a } :: IamAccountPasswordPolicyResource)
             <$> f _require_symbols

instance HasRequireUppercaseCharacters IamAccountPasswordPolicyResource (TF.Argument Text) where
    requireUppercaseCharacters f s@IamAccountPasswordPolicyResource{..} =
        (\a -> s { _require_uppercase_characters = a } :: IamAccountPasswordPolicyResource)
             <$> f _require_uppercase_characters

instance HasComputedExpirePasswords IamAccountPasswordPolicyResource (TF.Attribute Text) where
    computedExpirePasswords f s@IamAccountPasswordPolicyResource{..} =
        (\a -> s { _computed_expire_passwords = a } :: IamAccountPasswordPolicyResource)
             <$> f _computed_expire_passwords

iamAccountPasswordPolicyResource :: TF.Resource TF.AWS IamAccountPasswordPolicyResource
iamAccountPasswordPolicyResource =
    TF.newResource "aws_iam_account_password_policy" $
        IamAccountPasswordPolicyResource {
            _allow_users_to_change_password = TF.Nil
            , _hard_expiry = TF.Nil
            , _max_password_age = TF.Nil
            , _minimum_password_length = TF.Nil
            , _password_reuse_prevention = TF.Nil
            , _require_lowercase_characters = TF.Nil
            , _require_numbers = TF.Nil
            , _require_symbols = TF.Nil
            , _require_uppercase_characters = TF.Nil
            , _computed_expire_passwords = TF.Compute "expire_passwords"
            }

{- | The @aws_iam_group_membership@ AWS resource.

Provides a top level resource to manage IAM Group membership for IAM Users.
For more information on managing IAM Groups or IAM Users, see
</docs/providers/aws/r/iam_group.html> or
</docs/providers/aws/r/iam_user.html>
-}
data IamGroupMembershipResource = IamGroupMembershipResource {
      _group          :: !(TF.Argument Text)
    {- ^ – (Required) The IAM Group name to attach the list of @users@ to -}
    , _name           :: !(TF.Argument Text)
    {- ^ (Required) The name to identify the Group Membership -}
    , _users          :: !(TF.Argument Text)
    {- ^ (Required) A list of IAM User names to associate with the Group -}
    , _computed_group :: !(TF.Attribute Text)
    {- ^ – IAM Group name -}
    , _computed_name  :: !(TF.Attribute Text)
    {- ^ - The name to identifing the Group Membership -}
    , _computed_users :: !(TF.Attribute Text)
    {- ^ - list of IAM User names -}
    } deriving (Show, Eq)

instance TF.ToHCL IamGroupMembershipResource where
    toHCL IamGroupMembershipResource{..} = TF.block $ catMaybes
        [ TF.assign "group" <$> TF.argument _group
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "users" <$> TF.argument _users
        ]

instance HasGroup IamGroupMembershipResource (TF.Argument Text) where
    group f s@IamGroupMembershipResource{..} =
        (\a -> s { _group = a } :: IamGroupMembershipResource)
             <$> f _group

instance HasName IamGroupMembershipResource (TF.Argument Text) where
    name f s@IamGroupMembershipResource{..} =
        (\a -> s { _name = a } :: IamGroupMembershipResource)
             <$> f _name

instance HasUsers IamGroupMembershipResource (TF.Argument Text) where
    users f s@IamGroupMembershipResource{..} =
        (\a -> s { _users = a } :: IamGroupMembershipResource)
             <$> f _users

instance HasComputedGroup IamGroupMembershipResource (TF.Attribute Text) where
    computedGroup f s@IamGroupMembershipResource{..} =
        (\a -> s { _computed_group = a } :: IamGroupMembershipResource)
             <$> f _computed_group

instance HasComputedName IamGroupMembershipResource (TF.Attribute Text) where
    computedName f s@IamGroupMembershipResource{..} =
        (\a -> s { _computed_name = a } :: IamGroupMembershipResource)
             <$> f _computed_name

instance HasComputedUsers IamGroupMembershipResource (TF.Attribute Text) where
    computedUsers f s@IamGroupMembershipResource{..} =
        (\a -> s { _computed_users = a } :: IamGroupMembershipResource)
             <$> f _computed_users

iamGroupMembershipResource :: TF.Resource TF.AWS IamGroupMembershipResource
iamGroupMembershipResource =
    TF.newResource "aws_iam_group_membership" $
        IamGroupMembershipResource {
            _group = TF.Nil
            , _name = TF.Nil
            , _users = TF.Nil
            , _computed_group = TF.Compute "group"
            , _computed_name = TF.Compute "name"
            , _computed_users = TF.Compute "users"
            }

{- | The @aws_iam_group_policy_attachment@ AWS resource.

Attaches a Managed IAM Policy to an IAM group
-}
data IamGroupPolicyAttachmentResource = IamGroupPolicyAttachmentResource {
      _group      :: !(TF.Argument Text)
    {- ^ (Required) - The group the policy should be applied to -}
    , _policy_arn :: !(TF.Argument Text)
    {- ^ (Required) - The ARN of the policy you want to apply -}
    } deriving (Show, Eq)

instance TF.ToHCL IamGroupPolicyAttachmentResource where
    toHCL IamGroupPolicyAttachmentResource{..} = TF.block $ catMaybes
        [ TF.assign "group" <$> TF.argument _group
        , TF.assign "policy_arn" <$> TF.argument _policy_arn
        ]

instance HasGroup IamGroupPolicyAttachmentResource (TF.Argument Text) where
    group f s@IamGroupPolicyAttachmentResource{..} =
        (\a -> s { _group = a } :: IamGroupPolicyAttachmentResource)
             <$> f _group

instance HasPolicyArn IamGroupPolicyAttachmentResource (TF.Argument Text) where
    policyArn f s@IamGroupPolicyAttachmentResource{..} =
        (\a -> s { _policy_arn = a } :: IamGroupPolicyAttachmentResource)
             <$> f _policy_arn

iamGroupPolicyAttachmentResource :: TF.Resource TF.AWS IamGroupPolicyAttachmentResource
iamGroupPolicyAttachmentResource =
    TF.newResource "aws_iam_group_policy_attachment" $
        IamGroupPolicyAttachmentResource {
            _group = TF.Nil
            , _policy_arn = TF.Nil
            }

{- | The @aws_iam_group_policy@ AWS resource.

Provides an IAM policy attached to a group.
-}
data IamGroupPolicyResource = IamGroupPolicyResource {
      _group           :: !(TF.Argument Text)
    {- ^ (Required) The IAM group to attach to the policy. -}
    , _name            :: !(TF.Argument Text)
    {- ^ (Optional) The name of the policy. If omitted, Terraform will assign a random, unique name. -}
    , _name_prefix     :: !(TF.Argument Text)
    {- ^ (Optional) Creates a unique name beginning with the specified prefix. Conflicts with @name@ . -}
    , _policy          :: !(TF.Argument Text)
    {- ^ (Required) The policy document. This is a JSON formatted string. The heredoc syntax or @file@ function is helpful here. -}
    , _computed_group  :: !(TF.Attribute Text)
    {- ^ - The group to which this policy applies. -}
    , _computed_id     :: !(TF.Attribute Text)
    {- ^ - The group policy ID. -}
    , _computed_name   :: !(TF.Attribute Text)
    {- ^ - The name of the policy. -}
    , _computed_policy :: !(TF.Attribute Text)
    {- ^ - The policy document attached to the group. -}
    } deriving (Show, Eq)

instance TF.ToHCL IamGroupPolicyResource where
    toHCL IamGroupPolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "group" <$> TF.argument _group
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "name_prefix" <$> TF.argument _name_prefix
        , TF.assign "policy" <$> TF.argument _policy
        ]

instance HasGroup IamGroupPolicyResource (TF.Argument Text) where
    group f s@IamGroupPolicyResource{..} =
        (\a -> s { _group = a } :: IamGroupPolicyResource)
             <$> f _group

instance HasName IamGroupPolicyResource (TF.Argument Text) where
    name f s@IamGroupPolicyResource{..} =
        (\a -> s { _name = a } :: IamGroupPolicyResource)
             <$> f _name

instance HasNamePrefix IamGroupPolicyResource (TF.Argument Text) where
    namePrefix f s@IamGroupPolicyResource{..} =
        (\a -> s { _name_prefix = a } :: IamGroupPolicyResource)
             <$> f _name_prefix

instance HasPolicy IamGroupPolicyResource (TF.Argument Text) where
    policy f s@IamGroupPolicyResource{..} =
        (\a -> s { _policy = a } :: IamGroupPolicyResource)
             <$> f _policy

instance HasComputedGroup IamGroupPolicyResource (TF.Attribute Text) where
    computedGroup f s@IamGroupPolicyResource{..} =
        (\a -> s { _computed_group = a } :: IamGroupPolicyResource)
             <$> f _computed_group

instance HasComputedId IamGroupPolicyResource (TF.Attribute Text) where
    computedId f s@IamGroupPolicyResource{..} =
        (\a -> s { _computed_id = a } :: IamGroupPolicyResource)
             <$> f _computed_id

instance HasComputedName IamGroupPolicyResource (TF.Attribute Text) where
    computedName f s@IamGroupPolicyResource{..} =
        (\a -> s { _computed_name = a } :: IamGroupPolicyResource)
             <$> f _computed_name

instance HasComputedPolicy IamGroupPolicyResource (TF.Attribute Text) where
    computedPolicy f s@IamGroupPolicyResource{..} =
        (\a -> s { _computed_policy = a } :: IamGroupPolicyResource)
             <$> f _computed_policy

iamGroupPolicyResource :: TF.Resource TF.AWS IamGroupPolicyResource
iamGroupPolicyResource =
    TF.newResource "aws_iam_group_policy" $
        IamGroupPolicyResource {
            _group = TF.Nil
            , _name = TF.Nil
            , _name_prefix = TF.Nil
            , _policy = TF.Nil
            , _computed_group = TF.Compute "group"
            , _computed_id = TF.Compute "id"
            , _computed_name = TF.Compute "name"
            , _computed_policy = TF.Compute "policy"
            }

{- | The @aws_iam_group@ AWS resource.

Provides an IAM group.
-}
data IamGroupResource = IamGroupResource {
      _name               :: !(TF.Argument Text)
    {- ^ (Required) The group's name. The name must consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: @=,.@-_.@ . Group names are not distinguished by case. For example, you cannot create groups named both "ADMINS" and "admins". -}
    , _path               :: !(TF.Argument Text)
    {- ^ (Optional, default "/") Path in which to create the group. -}
    , _computed_arn       :: !(TF.Attribute Text)
    {- ^ - The ARN assigned by AWS for this group. -}
    , _computed_id        :: !(TF.Attribute Text)
    {- ^ - The group's ID. -}
    , _computed_name      :: !(TF.Attribute Text)
    {- ^ - The group's name. -}
    , _computed_path      :: !(TF.Attribute Text)
    {- ^ - The path of the group in IAM. -}
    , _computed_unique_id :: !(TF.Attribute Text)
    {- ^ - The <https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html#GUIDs> assigned by AWS. -}
    } deriving (Show, Eq)

instance TF.ToHCL IamGroupResource where
    toHCL IamGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.argument _name
        , TF.assign "path" <$> TF.argument _path
        ]

instance HasName IamGroupResource (TF.Argument Text) where
    name f s@IamGroupResource{..} =
        (\a -> s { _name = a } :: IamGroupResource)
             <$> f _name

instance HasPath IamGroupResource (TF.Argument Text) where
    path f s@IamGroupResource{..} =
        (\a -> s { _path = a } :: IamGroupResource)
             <$> f _path

instance HasComputedArn IamGroupResource (TF.Attribute Text) where
    computedArn f s@IamGroupResource{..} =
        (\a -> s { _computed_arn = a } :: IamGroupResource)
             <$> f _computed_arn

instance HasComputedId IamGroupResource (TF.Attribute Text) where
    computedId f s@IamGroupResource{..} =
        (\a -> s { _computed_id = a } :: IamGroupResource)
             <$> f _computed_id

instance HasComputedName IamGroupResource (TF.Attribute Text) where
    computedName f s@IamGroupResource{..} =
        (\a -> s { _computed_name = a } :: IamGroupResource)
             <$> f _computed_name

instance HasComputedPath IamGroupResource (TF.Attribute Text) where
    computedPath f s@IamGroupResource{..} =
        (\a -> s { _computed_path = a } :: IamGroupResource)
             <$> f _computed_path

instance HasComputedUniqueId IamGroupResource (TF.Attribute Text) where
    computedUniqueId f s@IamGroupResource{..} =
        (\a -> s { _computed_unique_id = a } :: IamGroupResource)
             <$> f _computed_unique_id

iamGroupResource :: TF.Resource TF.AWS IamGroupResource
iamGroupResource =
    TF.newResource "aws_iam_group" $
        IamGroupResource {
            _name = TF.Nil
            , _path = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_id = TF.Compute "id"
            , _computed_name = TF.Compute "name"
            , _computed_path = TF.Compute "path"
            , _computed_unique_id = TF.Compute "unique_id"
            }

{- | The @aws_iam_instance_profile@ AWS resource.

Provides an IAM instance profile. ~> NOTE: Either @role@ or @roles@ (
deprecated ) must be specified.
-}
data IamInstanceProfileResource = IamInstanceProfileResource {
      _name                 :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) The profile's name. If omitted, Terraform will assign a random, unique name. -}
    , _name_prefix          :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) Creates a unique name beginning with the specified prefix. Conflicts with @name@ . -}
    , _path                 :: !(TF.Argument Text)
    {- ^ (Optional, default "/") Path in which to create the profile. -}
    , _role                 :: !(TF.Argument Text)
    {- ^ (Optional) The role name to include in the profile. -}
    , _roles                :: !(TF.Argument Text)
    {- ^ - ( Deprecated ) A list of role names to include in the profile.  The current default is 1.  If you see an error message similar to @Cannot exceed quota for InstanceSessionsPerInstanceProfile: 1@ , then you must contact AWS support and ask for a limit increase. WARNING: This is deprecated since <https://github.com/hashicorp/terraform/blob/master/CHANGELOG.md#093-april-12-2017> , as >= 2 roles are not possible. See <https://github.com/hashicorp/terraform/issues/11575> . -}
    , _computed_arn         :: !(TF.Attribute Text)
    {- ^ - The ARN assigned by AWS to the instance profile. -}
    , _computed_create_date :: !(TF.Attribute Text)
    {- ^ - The creation timestamp of the instance profile. -}
    , _computed_id          :: !(TF.Attribute Text)
    {- ^ - The instance profile's ID. -}
    , _computed_name        :: !(TF.Attribute Text)
    {- ^ - The instance profile's name. -}
    , _computed_path        :: !(TF.Attribute Text)
    {- ^ - The path of the instance profile in IAM. -}
    , _computed_role        :: !(TF.Attribute Text)
    {- ^ - The role assigned to the instance profile. -}
    , _computed_roles       :: !(TF.Attribute Text)
    {- ^ - The list of roles assigned to the instance profile. ( Deprecated ) -}
    , _computed_unique_id   :: !(TF.Attribute Text)
    {- ^ - The <https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html#GUIDs> assigned by AWS. -}
    } deriving (Show, Eq)

instance TF.ToHCL IamInstanceProfileResource where
    toHCL IamInstanceProfileResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.argument _name
        , TF.assign "name_prefix" <$> TF.argument _name_prefix
        , TF.assign "path" <$> TF.argument _path
        , TF.assign "role" <$> TF.argument _role
        , TF.assign "roles" <$> TF.argument _roles
        ]

instance HasName IamInstanceProfileResource (TF.Argument Text) where
    name f s@IamInstanceProfileResource{..} =
        (\a -> s { _name = a } :: IamInstanceProfileResource)
             <$> f _name

instance HasNamePrefix IamInstanceProfileResource (TF.Argument Text) where
    namePrefix f s@IamInstanceProfileResource{..} =
        (\a -> s { _name_prefix = a } :: IamInstanceProfileResource)
             <$> f _name_prefix

instance HasPath IamInstanceProfileResource (TF.Argument Text) where
    path f s@IamInstanceProfileResource{..} =
        (\a -> s { _path = a } :: IamInstanceProfileResource)
             <$> f _path

instance HasRole IamInstanceProfileResource (TF.Argument Text) where
    role f s@IamInstanceProfileResource{..} =
        (\a -> s { _role = a } :: IamInstanceProfileResource)
             <$> f _role

instance HasRoles IamInstanceProfileResource (TF.Argument Text) where
    roles f s@IamInstanceProfileResource{..} =
        (\a -> s { _roles = a } :: IamInstanceProfileResource)
             <$> f _roles

instance HasComputedArn IamInstanceProfileResource (TF.Attribute Text) where
    computedArn f s@IamInstanceProfileResource{..} =
        (\a -> s { _computed_arn = a } :: IamInstanceProfileResource)
             <$> f _computed_arn

instance HasComputedCreateDate IamInstanceProfileResource (TF.Attribute Text) where
    computedCreateDate f s@IamInstanceProfileResource{..} =
        (\a -> s { _computed_create_date = a } :: IamInstanceProfileResource)
             <$> f _computed_create_date

instance HasComputedId IamInstanceProfileResource (TF.Attribute Text) where
    computedId f s@IamInstanceProfileResource{..} =
        (\a -> s { _computed_id = a } :: IamInstanceProfileResource)
             <$> f _computed_id

instance HasComputedName IamInstanceProfileResource (TF.Attribute Text) where
    computedName f s@IamInstanceProfileResource{..} =
        (\a -> s { _computed_name = a } :: IamInstanceProfileResource)
             <$> f _computed_name

instance HasComputedPath IamInstanceProfileResource (TF.Attribute Text) where
    computedPath f s@IamInstanceProfileResource{..} =
        (\a -> s { _computed_path = a } :: IamInstanceProfileResource)
             <$> f _computed_path

instance HasComputedRole IamInstanceProfileResource (TF.Attribute Text) where
    computedRole f s@IamInstanceProfileResource{..} =
        (\a -> s { _computed_role = a } :: IamInstanceProfileResource)
             <$> f _computed_role

instance HasComputedRoles IamInstanceProfileResource (TF.Attribute Text) where
    computedRoles f s@IamInstanceProfileResource{..} =
        (\a -> s { _computed_roles = a } :: IamInstanceProfileResource)
             <$> f _computed_roles

instance HasComputedUniqueId IamInstanceProfileResource (TF.Attribute Text) where
    computedUniqueId f s@IamInstanceProfileResource{..} =
        (\a -> s { _computed_unique_id = a } :: IamInstanceProfileResource)
             <$> f _computed_unique_id

iamInstanceProfileResource :: TF.Resource TF.AWS IamInstanceProfileResource
iamInstanceProfileResource =
    TF.newResource "aws_iam_instance_profile" $
        IamInstanceProfileResource {
            _name = TF.Nil
            , _name_prefix = TF.Nil
            , _path = TF.Nil
            , _role = TF.Nil
            , _roles = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_create_date = TF.Compute "create_date"
            , _computed_id = TF.Compute "id"
            , _computed_name = TF.Compute "name"
            , _computed_path = TF.Compute "path"
            , _computed_role = TF.Compute "role"
            , _computed_roles = TF.Compute "roles"
            , _computed_unique_id = TF.Compute "unique_id"
            }

{- | The @aws_iam_openid_connect_provider@ AWS resource.

Provides an IAM OpenID Connect provider.
-}
data IamOpenidConnectProviderResource = IamOpenidConnectProviderResource {
      _client_id_list  :: !(TF.Argument Text)
    {- ^ (Required) A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the client_id parameter on OAuth requests.) -}
    , _thumbprint_list :: !(TF.Argument Text)
    {- ^ (Required) A list of server certificate thumbprints for the OpenID Connect (OIDC) identity provider's server certificate(s). -}
    , _url             :: !(TF.Argument Text)
    {- ^ (Required) The URL of the identity provider. Corresponds to the iss claim. -}
    , _computed_arn    :: !(TF.Attribute Text)
    {- ^ - The ARN assigned by AWS for this provider. -}
    } deriving (Show, Eq)

instance TF.ToHCL IamOpenidConnectProviderResource where
    toHCL IamOpenidConnectProviderResource{..} = TF.block $ catMaybes
        [ TF.assign "client_id_list" <$> TF.argument _client_id_list
        , TF.assign "thumbprint_list" <$> TF.argument _thumbprint_list
        , TF.assign "url" <$> TF.argument _url
        ]

instance HasClientIdList IamOpenidConnectProviderResource (TF.Argument Text) where
    clientIdList f s@IamOpenidConnectProviderResource{..} =
        (\a -> s { _client_id_list = a } :: IamOpenidConnectProviderResource)
             <$> f _client_id_list

instance HasThumbprintList IamOpenidConnectProviderResource (TF.Argument Text) where
    thumbprintList f s@IamOpenidConnectProviderResource{..} =
        (\a -> s { _thumbprint_list = a } :: IamOpenidConnectProviderResource)
             <$> f _thumbprint_list

instance HasUrl IamOpenidConnectProviderResource (TF.Argument Text) where
    url f s@IamOpenidConnectProviderResource{..} =
        (\a -> s { _url = a } :: IamOpenidConnectProviderResource)
             <$> f _url

instance HasComputedArn IamOpenidConnectProviderResource (TF.Attribute Text) where
    computedArn f s@IamOpenidConnectProviderResource{..} =
        (\a -> s { _computed_arn = a } :: IamOpenidConnectProviderResource)
             <$> f _computed_arn

iamOpenidConnectProviderResource :: TF.Resource TF.AWS IamOpenidConnectProviderResource
iamOpenidConnectProviderResource =
    TF.newResource "aws_iam_openid_connect_provider" $
        IamOpenidConnectProviderResource {
            _client_id_list = TF.Nil
            , _thumbprint_list = TF.Nil
            , _url = TF.Nil
            , _computed_arn = TF.Compute "arn"
            }

{- | The @aws_iam_policy_attachment@ AWS resource.

Attaches a Managed IAM Policy to user(s), role(s), and/or group(s) !>
WARNING: The aws_iam_policy_attachment resource creates exclusive
attachments of IAM policies. Across the entire AWS account, all of the
users/roles/groups to which a single policy is attached must be declared by
a single aws_iam_policy_attachment resource. This means that even any
users/roles/groups that have the attached policy via some mechanism other
than Terraform will have that attached policy revoked by Terraform. Consider
@aws_iam_role_policy_attachment@ , @iam_user_policy_attachment@ , or
@iam_group_policy_attachment@ instead. These resources do not enforce
exclusive attachment of an IAM policy.
-}
data IamPolicyAttachmentResource = IamPolicyAttachmentResource {
      _groups        :: !(TF.Argument Text)
    {- ^ (Optional) - The group(s) the policy should be applied to -}
    , _name          :: !(TF.Argument Text)
    {- ^ (Required) - The name of the policy. This cannot be an empty string. -}
    , _policy_arn    :: !(TF.Argument Text)
    {- ^ (Required) - The ARN of the policy you want to apply -}
    , _roles         :: !(TF.Argument Text)
    {- ^ (Optional) - The role(s) the policy should be applied to -}
    , _users         :: !(TF.Argument Text)
    {- ^ (Optional) - The user(s) the policy should be applied to -}
    , _computed_id   :: !(TF.Attribute Text)
    {- ^ - The policy's ID. -}
    , _computed_name :: !(TF.Attribute Text)
    {- ^ - The name of the policy. -}
    } deriving (Show, Eq)

instance TF.ToHCL IamPolicyAttachmentResource where
    toHCL IamPolicyAttachmentResource{..} = TF.block $ catMaybes
        [ TF.assign "groups" <$> TF.argument _groups
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "policy_arn" <$> TF.argument _policy_arn
        , TF.assign "roles" <$> TF.argument _roles
        , TF.assign "users" <$> TF.argument _users
        ]

instance HasGroups IamPolicyAttachmentResource (TF.Argument Text) where
    groups f s@IamPolicyAttachmentResource{..} =
        (\a -> s { _groups = a } :: IamPolicyAttachmentResource)
             <$> f _groups

instance HasName IamPolicyAttachmentResource (TF.Argument Text) where
    name f s@IamPolicyAttachmentResource{..} =
        (\a -> s { _name = a } :: IamPolicyAttachmentResource)
             <$> f _name

instance HasPolicyArn IamPolicyAttachmentResource (TF.Argument Text) where
    policyArn f s@IamPolicyAttachmentResource{..} =
        (\a -> s { _policy_arn = a } :: IamPolicyAttachmentResource)
             <$> f _policy_arn

instance HasRoles IamPolicyAttachmentResource (TF.Argument Text) where
    roles f s@IamPolicyAttachmentResource{..} =
        (\a -> s { _roles = a } :: IamPolicyAttachmentResource)
             <$> f _roles

instance HasUsers IamPolicyAttachmentResource (TF.Argument Text) where
    users f s@IamPolicyAttachmentResource{..} =
        (\a -> s { _users = a } :: IamPolicyAttachmentResource)
             <$> f _users

instance HasComputedId IamPolicyAttachmentResource (TF.Attribute Text) where
    computedId f s@IamPolicyAttachmentResource{..} =
        (\a -> s { _computed_id = a } :: IamPolicyAttachmentResource)
             <$> f _computed_id

instance HasComputedName IamPolicyAttachmentResource (TF.Attribute Text) where
    computedName f s@IamPolicyAttachmentResource{..} =
        (\a -> s { _computed_name = a } :: IamPolicyAttachmentResource)
             <$> f _computed_name

iamPolicyAttachmentResource :: TF.Resource TF.AWS IamPolicyAttachmentResource
iamPolicyAttachmentResource =
    TF.newResource "aws_iam_policy_attachment" $
        IamPolicyAttachmentResource {
            _groups = TF.Nil
            , _name = TF.Nil
            , _policy_arn = TF.Nil
            , _roles = TF.Nil
            , _users = TF.Nil
            , _computed_id = TF.Compute "id"
            , _computed_name = TF.Compute "name"
            }

{- | The @aws_iam_policy@ AWS resource.

Provides an IAM policy.
-}
data IamPolicyResource = IamPolicyResource {
      _description          :: !(TF.Argument Text)
    {- ^ (Optional) Description of the IAM policy. -}
    , _name                 :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) The name of the policy. If omitted, Terraform will assign a random, unique name. -}
    , _name_prefix          :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) Creates a unique name beginning with the specified prefix. Conflicts with @name@ . -}
    , _path                 :: !(TF.Argument Text)
    {- ^ (Optional, default "/") Path in which to create the policy. See <https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html> for more information. -}
    , _policy               :: !(TF.Argument Text)
    {- ^ (Required) The policy document. This is a JSON formatted string. The heredoc syntax, @file@ function, or the </docs/providers/aws/d/iam_policy_document.html> are all helpful here. -}
    , _computed_arn         :: !(TF.Attribute Text)
    {- ^ - The ARN assigned by AWS to this policy. -}
    , _computed_description :: !(TF.Attribute Text)
    {- ^ - The description of the policy. -}
    , _computed_id          :: !(TF.Attribute Text)
    {- ^ - The policy's ID. -}
    , _computed_name        :: !(TF.Attribute Text)
    {- ^ - The name of the policy. -}
    , _computed_path        :: !(TF.Attribute Text)
    {- ^ - The path of the policy in IAM. -}
    , _computed_policy      :: !(TF.Attribute Text)
    {- ^ - The policy document. -}
    } deriving (Show, Eq)

instance TF.ToHCL IamPolicyResource where
    toHCL IamPolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.argument _description
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "name_prefix" <$> TF.argument _name_prefix
        , TF.assign "path" <$> TF.argument _path
        , TF.assign "policy" <$> TF.argument _policy
        ]

instance HasDescription IamPolicyResource (TF.Argument Text) where
    description f s@IamPolicyResource{..} =
        (\a -> s { _description = a } :: IamPolicyResource)
             <$> f _description

instance HasName IamPolicyResource (TF.Argument Text) where
    name f s@IamPolicyResource{..} =
        (\a -> s { _name = a } :: IamPolicyResource)
             <$> f _name

instance HasNamePrefix IamPolicyResource (TF.Argument Text) where
    namePrefix f s@IamPolicyResource{..} =
        (\a -> s { _name_prefix = a } :: IamPolicyResource)
             <$> f _name_prefix

instance HasPath IamPolicyResource (TF.Argument Text) where
    path f s@IamPolicyResource{..} =
        (\a -> s { _path = a } :: IamPolicyResource)
             <$> f _path

instance HasPolicy IamPolicyResource (TF.Argument Text) where
    policy f s@IamPolicyResource{..} =
        (\a -> s { _policy = a } :: IamPolicyResource)
             <$> f _policy

instance HasComputedArn IamPolicyResource (TF.Attribute Text) where
    computedArn f s@IamPolicyResource{..} =
        (\a -> s { _computed_arn = a } :: IamPolicyResource)
             <$> f _computed_arn

instance HasComputedDescription IamPolicyResource (TF.Attribute Text) where
    computedDescription f s@IamPolicyResource{..} =
        (\a -> s { _computed_description = a } :: IamPolicyResource)
             <$> f _computed_description

instance HasComputedId IamPolicyResource (TF.Attribute Text) where
    computedId f s@IamPolicyResource{..} =
        (\a -> s { _computed_id = a } :: IamPolicyResource)
             <$> f _computed_id

instance HasComputedName IamPolicyResource (TF.Attribute Text) where
    computedName f s@IamPolicyResource{..} =
        (\a -> s { _computed_name = a } :: IamPolicyResource)
             <$> f _computed_name

instance HasComputedPath IamPolicyResource (TF.Attribute Text) where
    computedPath f s@IamPolicyResource{..} =
        (\a -> s { _computed_path = a } :: IamPolicyResource)
             <$> f _computed_path

instance HasComputedPolicy IamPolicyResource (TF.Attribute Text) where
    computedPolicy f s@IamPolicyResource{..} =
        (\a -> s { _computed_policy = a } :: IamPolicyResource)
             <$> f _computed_policy

iamPolicyResource :: TF.Resource TF.AWS IamPolicyResource
iamPolicyResource =
    TF.newResource "aws_iam_policy" $
        IamPolicyResource {
            _description = TF.Nil
            , _name = TF.Nil
            , _name_prefix = TF.Nil
            , _path = TF.Nil
            , _policy = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_description = TF.Compute "description"
            , _computed_id = TF.Compute "id"
            , _computed_name = TF.Compute "name"
            , _computed_path = TF.Compute "path"
            , _computed_policy = TF.Compute "policy"
            }

{- | The @aws_iam_role_policy_attachment@ AWS resource.

Attaches a Managed IAM Policy to an IAM role
-}
data IamRolePolicyAttachmentResource = IamRolePolicyAttachmentResource {
      _policy_arn :: !(TF.Argument Text)
    {- ^ (Required) - The ARN of the policy you want to apply -}
    , _role       :: !(TF.Argument Text)
    {- ^ (Required) - The role the policy should be applied to -}
    } deriving (Show, Eq)

instance TF.ToHCL IamRolePolicyAttachmentResource where
    toHCL IamRolePolicyAttachmentResource{..} = TF.block $ catMaybes
        [ TF.assign "policy_arn" <$> TF.argument _policy_arn
        , TF.assign "role" <$> TF.argument _role
        ]

instance HasPolicyArn IamRolePolicyAttachmentResource (TF.Argument Text) where
    policyArn f s@IamRolePolicyAttachmentResource{..} =
        (\a -> s { _policy_arn = a } :: IamRolePolicyAttachmentResource)
             <$> f _policy_arn

instance HasRole IamRolePolicyAttachmentResource (TF.Argument Text) where
    role f s@IamRolePolicyAttachmentResource{..} =
        (\a -> s { _role = a } :: IamRolePolicyAttachmentResource)
             <$> f _role

iamRolePolicyAttachmentResource :: TF.Resource TF.AWS IamRolePolicyAttachmentResource
iamRolePolicyAttachmentResource =
    TF.newResource "aws_iam_role_policy_attachment" $
        IamRolePolicyAttachmentResource {
            _policy_arn = TF.Nil
            , _role = TF.Nil
            }

{- | The @aws_iam_role_policy@ AWS resource.

Provides an IAM role policy.
-}
data IamRolePolicyResource = IamRolePolicyResource {
      _name            :: !(TF.Argument Text)
    {- ^ (Optional) The name of the role policy. If omitted, Terraform will assign a random, unique name. -}
    , _name_prefix     :: !(TF.Argument Text)
    {- ^ (Optional) Creates a unique name beginning with the specified prefix. Conflicts with @name@ . -}
    , _policy          :: !(TF.Argument Text)
    {- ^ (Required) The policy document. This is a JSON formatted string. The heredoc syntax or @file@ function is helpful here. -}
    , _role            :: !(TF.Argument Text)
    {- ^ (Required) The IAM role to attach to the policy. -}
    , _computed_id     :: !(TF.Attribute Text)
    {- ^ - The role policy ID, in the form of @role_name:role_policy_name@ . -}
    , _computed_name   :: !(TF.Attribute Text)
    {- ^ - The name of the policy. -}
    , _computed_policy :: !(TF.Attribute Text)
    {- ^ - The policy document attached to the role. -}
    , _computed_role   :: !(TF.Attribute Text)
    {- ^ - The name of the role associated with the policy. -}
    } deriving (Show, Eq)

instance TF.ToHCL IamRolePolicyResource where
    toHCL IamRolePolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.argument _name
        , TF.assign "name_prefix" <$> TF.argument _name_prefix
        , TF.assign "policy" <$> TF.argument _policy
        , TF.assign "role" <$> TF.argument _role
        ]

instance HasName IamRolePolicyResource (TF.Argument Text) where
    name f s@IamRolePolicyResource{..} =
        (\a -> s { _name = a } :: IamRolePolicyResource)
             <$> f _name

instance HasNamePrefix IamRolePolicyResource (TF.Argument Text) where
    namePrefix f s@IamRolePolicyResource{..} =
        (\a -> s { _name_prefix = a } :: IamRolePolicyResource)
             <$> f _name_prefix

instance HasPolicy IamRolePolicyResource (TF.Argument Text) where
    policy f s@IamRolePolicyResource{..} =
        (\a -> s { _policy = a } :: IamRolePolicyResource)
             <$> f _policy

instance HasRole IamRolePolicyResource (TF.Argument Text) where
    role f s@IamRolePolicyResource{..} =
        (\a -> s { _role = a } :: IamRolePolicyResource)
             <$> f _role

instance HasComputedId IamRolePolicyResource (TF.Attribute Text) where
    computedId f s@IamRolePolicyResource{..} =
        (\a -> s { _computed_id = a } :: IamRolePolicyResource)
             <$> f _computed_id

instance HasComputedName IamRolePolicyResource (TF.Attribute Text) where
    computedName f s@IamRolePolicyResource{..} =
        (\a -> s { _computed_name = a } :: IamRolePolicyResource)
             <$> f _computed_name

instance HasComputedPolicy IamRolePolicyResource (TF.Attribute Text) where
    computedPolicy f s@IamRolePolicyResource{..} =
        (\a -> s { _computed_policy = a } :: IamRolePolicyResource)
             <$> f _computed_policy

instance HasComputedRole IamRolePolicyResource (TF.Attribute Text) where
    computedRole f s@IamRolePolicyResource{..} =
        (\a -> s { _computed_role = a } :: IamRolePolicyResource)
             <$> f _computed_role

iamRolePolicyResource :: TF.Resource TF.AWS IamRolePolicyResource
iamRolePolicyResource =
    TF.newResource "aws_iam_role_policy" $
        IamRolePolicyResource {
            _name = TF.Nil
            , _name_prefix = TF.Nil
            , _policy = TF.Nil
            , _role = TF.Nil
            , _computed_id = TF.Compute "id"
            , _computed_name = TF.Compute "name"
            , _computed_policy = TF.Compute "policy"
            , _computed_role = TF.Compute "role"
            }

{- | The @aws_iam_role@ AWS resource.

Provides an IAM role.
-}
data IamRoleResource = IamRoleResource {
      _assume_role_policy   :: !(TF.Argument Text)
    {- ^ (Required) The policy that grants an entity permission to assume the role. -}
    , _name                 :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) The name of the role. If omitted, Terraform will assign a random, unique name. -}
    , _name_prefix          :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) Creates a unique name beginning with the specified prefix. Conflicts with @name@ . -}
    , _computed_arn         :: !(TF.Attribute Text)
    {- ^ - The Amazon Resource Name (ARN) specifying the role. -}
    , _computed_create_date :: !(TF.Attribute Text)
    {- ^ - The creation date of the IAM role. -}
    , _computed_description :: !(TF.Attribute Text)
    {- ^ - The description of the role. -}
    , _computed_name        :: !(TF.Attribute Text)
    {- ^ - The name of the role. -}
    , _computed_unique_id   :: !(TF.Attribute Text)
    {- ^ - The stable and unique string identifying the role. -}
    } deriving (Show, Eq)

instance TF.ToHCL IamRoleResource where
    toHCL IamRoleResource{..} = TF.block $ catMaybes
        [ TF.assign "assume_role_policy" <$> TF.argument _assume_role_policy
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "name_prefix" <$> TF.argument _name_prefix
        ]

instance HasAssumeRolePolicy IamRoleResource (TF.Argument Text) where
    assumeRolePolicy f s@IamRoleResource{..} =
        (\a -> s { _assume_role_policy = a } :: IamRoleResource)
             <$> f _assume_role_policy

instance HasName IamRoleResource (TF.Argument Text) where
    name f s@IamRoleResource{..} =
        (\a -> s { _name = a } :: IamRoleResource)
             <$> f _name

instance HasNamePrefix IamRoleResource (TF.Argument Text) where
    namePrefix f s@IamRoleResource{..} =
        (\a -> s { _name_prefix = a } :: IamRoleResource)
             <$> f _name_prefix

instance HasComputedArn IamRoleResource (TF.Attribute Text) where
    computedArn f s@IamRoleResource{..} =
        (\a -> s { _computed_arn = a } :: IamRoleResource)
             <$> f _computed_arn

instance HasComputedCreateDate IamRoleResource (TF.Attribute Text) where
    computedCreateDate f s@IamRoleResource{..} =
        (\a -> s { _computed_create_date = a } :: IamRoleResource)
             <$> f _computed_create_date

instance HasComputedDescription IamRoleResource (TF.Attribute Text) where
    computedDescription f s@IamRoleResource{..} =
        (\a -> s { _computed_description = a } :: IamRoleResource)
             <$> f _computed_description

instance HasComputedName IamRoleResource (TF.Attribute Text) where
    computedName f s@IamRoleResource{..} =
        (\a -> s { _computed_name = a } :: IamRoleResource)
             <$> f _computed_name

instance HasComputedUniqueId IamRoleResource (TF.Attribute Text) where
    computedUniqueId f s@IamRoleResource{..} =
        (\a -> s { _computed_unique_id = a } :: IamRoleResource)
             <$> f _computed_unique_id

iamRoleResource :: TF.Resource TF.AWS IamRoleResource
iamRoleResource =
    TF.newResource "aws_iam_role" $
        IamRoleResource {
            _assume_role_policy = TF.Nil
            , _name = TF.Nil
            , _name_prefix = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_create_date = TF.Compute "create_date"
            , _computed_description = TF.Compute "description"
            , _computed_name = TF.Compute "name"
            , _computed_unique_id = TF.Compute "unique_id"
            }

{- | The @aws_iam_saml_provider@ AWS resource.

Provides an IAM SAML provider.
-}
data IamSamlProviderResource = IamSamlProviderResource {
      _name                   :: !(TF.Argument Text)
    {- ^ (Required) The name of the provider to create. -}
    , _saml_metadata_document :: !(TF.Argument Text)
    {- ^ (Required) An XML document generated by an identity provider that supports SAML 2.0. -}
    , _computed_arn           :: !(TF.Attribute Text)
    {- ^ - The ARN assigned by AWS for this provider. -}
    , _computed_valid_until   :: !(TF.Attribute Text)
    {- ^ - The expiration date and time for the SAML provider in RFC1123 format, e.g. @Mon, 02 Jan 2006 15:04:05 MST@ . -}
    } deriving (Show, Eq)

instance TF.ToHCL IamSamlProviderResource where
    toHCL IamSamlProviderResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.argument _name
        , TF.assign "saml_metadata_document" <$> TF.argument _saml_metadata_document
        ]

instance HasName IamSamlProviderResource (TF.Argument Text) where
    name f s@IamSamlProviderResource{..} =
        (\a -> s { _name = a } :: IamSamlProviderResource)
             <$> f _name

instance HasSamlMetadataDocument IamSamlProviderResource (TF.Argument Text) where
    samlMetadataDocument f s@IamSamlProviderResource{..} =
        (\a -> s { _saml_metadata_document = a } :: IamSamlProviderResource)
             <$> f _saml_metadata_document

instance HasComputedArn IamSamlProviderResource (TF.Attribute Text) where
    computedArn f s@IamSamlProviderResource{..} =
        (\a -> s { _computed_arn = a } :: IamSamlProviderResource)
             <$> f _computed_arn

instance HasComputedValidUntil IamSamlProviderResource (TF.Attribute Text) where
    computedValidUntil f s@IamSamlProviderResource{..} =
        (\a -> s { _computed_valid_until = a } :: IamSamlProviderResource)
             <$> f _computed_valid_until

iamSamlProviderResource :: TF.Resource TF.AWS IamSamlProviderResource
iamSamlProviderResource =
    TF.newResource "aws_iam_saml_provider" $
        IamSamlProviderResource {
            _name = TF.Nil
            , _saml_metadata_document = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_valid_until = TF.Compute "valid_until"
            }

{- | The @aws_iam_server_certificate@ AWS resource.

Provides an IAM Server Certificate resource to upload Server Certificates.
Certs uploaded to IAM can easily work with other AWS services such as:
-}
data IamServerCertificateResource = IamServerCertificateResource {
      _certificate_body  :: !(TF.Argument Text)
    {- ^ – (Required) The contents of the public key certificate in PEM-encoded format. -}
    , _certificate_chain :: !(TF.Argument Text)
    {- ^ – (Optional) The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain. -}
    , _name              :: !(TF.Argument Text)
    {- ^ (Optional) The name of the Server Certificate. Do not include the path in this value. If omitted, Terraform will assign a random, unique name. -}
    , _name_prefix       :: !(TF.Argument Text)
    {- ^ (Optional) Creates a unique name beginning with the specified prefix. Conflicts with @name@ . -}
    , _path              :: !(TF.Argument Text)
    {- ^ (Optional) The IAM path for the server certificate.  If it is not included, it defaults to a slash (/). If this certificate is for use with AWS CloudFront, the path must be in format @/cloudfront/your_path_here@ . See <https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html> for more details on IAM Paths. -}
    , _private_key       :: !(TF.Argument Text)
    {- ^ – (Required) The contents of the private key in PEM-encoded format. -}
    , _computed_arn      :: !(TF.Attribute Text)
    {- ^ - The Amazon Resource Name (ARN) specifying the server certificate. -}
    , _computed_id       :: !(TF.Attribute Text)
    {- ^ - The unique Server Certificate name -}
    , _computed_name     :: !(TF.Attribute Text)
    {- ^ - The name of the Server Certificate -}
    } deriving (Show, Eq)

instance TF.ToHCL IamServerCertificateResource where
    toHCL IamServerCertificateResource{..} = TF.block $ catMaybes
        [ TF.assign "certificate_body" <$> TF.argument _certificate_body
        , TF.assign "certificate_chain" <$> TF.argument _certificate_chain
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "name_prefix" <$> TF.argument _name_prefix
        , TF.assign "path" <$> TF.argument _path
        , TF.assign "private_key" <$> TF.argument _private_key
        ]

instance HasCertificateBody IamServerCertificateResource (TF.Argument Text) where
    certificateBody f s@IamServerCertificateResource{..} =
        (\a -> s { _certificate_body = a } :: IamServerCertificateResource)
             <$> f _certificate_body

instance HasCertificateChain IamServerCertificateResource (TF.Argument Text) where
    certificateChain f s@IamServerCertificateResource{..} =
        (\a -> s { _certificate_chain = a } :: IamServerCertificateResource)
             <$> f _certificate_chain

instance HasName IamServerCertificateResource (TF.Argument Text) where
    name f s@IamServerCertificateResource{..} =
        (\a -> s { _name = a } :: IamServerCertificateResource)
             <$> f _name

instance HasNamePrefix IamServerCertificateResource (TF.Argument Text) where
    namePrefix f s@IamServerCertificateResource{..} =
        (\a -> s { _name_prefix = a } :: IamServerCertificateResource)
             <$> f _name_prefix

instance HasPath IamServerCertificateResource (TF.Argument Text) where
    path f s@IamServerCertificateResource{..} =
        (\a -> s { _path = a } :: IamServerCertificateResource)
             <$> f _path

instance HasPrivateKey IamServerCertificateResource (TF.Argument Text) where
    privateKey f s@IamServerCertificateResource{..} =
        (\a -> s { _private_key = a } :: IamServerCertificateResource)
             <$> f _private_key

instance HasComputedArn IamServerCertificateResource (TF.Attribute Text) where
    computedArn f s@IamServerCertificateResource{..} =
        (\a -> s { _computed_arn = a } :: IamServerCertificateResource)
             <$> f _computed_arn

instance HasComputedId IamServerCertificateResource (TF.Attribute Text) where
    computedId f s@IamServerCertificateResource{..} =
        (\a -> s { _computed_id = a } :: IamServerCertificateResource)
             <$> f _computed_id

instance HasComputedName IamServerCertificateResource (TF.Attribute Text) where
    computedName f s@IamServerCertificateResource{..} =
        (\a -> s { _computed_name = a } :: IamServerCertificateResource)
             <$> f _computed_name

iamServerCertificateResource :: TF.Resource TF.AWS IamServerCertificateResource
iamServerCertificateResource =
    TF.newResource "aws_iam_server_certificate" $
        IamServerCertificateResource {
            _certificate_body = TF.Nil
            , _certificate_chain = TF.Nil
            , _name = TF.Nil
            , _name_prefix = TF.Nil
            , _path = TF.Nil
            , _private_key = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_id = TF.Compute "id"
            , _computed_name = TF.Compute "name"
            }

{- | The @aws_iam_user_login_profile@ AWS resource.

Provides one-time creation of a IAM user login profile, and uses PGP to
encrypt the password for safe transport to the user. PGP keys can be
obtained from Keybase.
-}
data IamUserLoginProfileResource = IamUserLoginProfileResource {
      _password_length             :: !(TF.Argument Text)
    {- ^ (Optional, default 20) The length of the generated password. -}
    , _password_reset_required     :: !(TF.Argument Text)
    {- ^ (Optional, default "true") Whether the user should be forced to reset the generated password on first login. -}
    , _pgp_key                     :: !(TF.Argument Text)
    {- ^ (Required) Either a base-64 encoded PGP public key, or a keybase username in the form @keybase:username@ . -}
    , _user                        :: !(TF.Argument Text)
    {- ^ (Required) The IAM user's name. -}
    , _computed_encrypted_password :: !(TF.Attribute Text)
    {- ^ - The encrypted password, base64 encoded. -}
    , _computed_key_fingerprint    :: !(TF.Attribute Text)
    {- ^ - The fingerprint of the PGP key used to encrypt the password -}
    } deriving (Show, Eq)

instance TF.ToHCL IamUserLoginProfileResource where
    toHCL IamUserLoginProfileResource{..} = TF.block $ catMaybes
        [ TF.assign "password_length" <$> TF.argument _password_length
        , TF.assign "password_reset_required" <$> TF.argument _password_reset_required
        , TF.assign "pgp_key" <$> TF.argument _pgp_key
        , TF.assign "user" <$> TF.argument _user
        ]

instance HasPasswordLength IamUserLoginProfileResource (TF.Argument Text) where
    passwordLength f s@IamUserLoginProfileResource{..} =
        (\a -> s { _password_length = a } :: IamUserLoginProfileResource)
             <$> f _password_length

instance HasPasswordResetRequired IamUserLoginProfileResource (TF.Argument Text) where
    passwordResetRequired f s@IamUserLoginProfileResource{..} =
        (\a -> s { _password_reset_required = a } :: IamUserLoginProfileResource)
             <$> f _password_reset_required

instance HasPgpKey IamUserLoginProfileResource (TF.Argument Text) where
    pgpKey f s@IamUserLoginProfileResource{..} =
        (\a -> s { _pgp_key = a } :: IamUserLoginProfileResource)
             <$> f _pgp_key

instance HasUser IamUserLoginProfileResource (TF.Argument Text) where
    user f s@IamUserLoginProfileResource{..} =
        (\a -> s { _user = a } :: IamUserLoginProfileResource)
             <$> f _user

instance HasComputedEncryptedPassword IamUserLoginProfileResource (TF.Attribute Text) where
    computedEncryptedPassword f s@IamUserLoginProfileResource{..} =
        (\a -> s { _computed_encrypted_password = a } :: IamUserLoginProfileResource)
             <$> f _computed_encrypted_password

instance HasComputedKeyFingerprint IamUserLoginProfileResource (TF.Attribute Text) where
    computedKeyFingerprint f s@IamUserLoginProfileResource{..} =
        (\a -> s { _computed_key_fingerprint = a } :: IamUserLoginProfileResource)
             <$> f _computed_key_fingerprint

iamUserLoginProfileResource :: TF.Resource TF.AWS IamUserLoginProfileResource
iamUserLoginProfileResource =
    TF.newResource "aws_iam_user_login_profile" $
        IamUserLoginProfileResource {
            _password_length = TF.Nil
            , _password_reset_required = TF.Nil
            , _pgp_key = TF.Nil
            , _user = TF.Nil
            , _computed_encrypted_password = TF.Compute "encrypted_password"
            , _computed_key_fingerprint = TF.Compute "key_fingerprint"
            }

{- | The @aws_iam_user_policy_attachment@ AWS resource.

Attaches a Managed IAM Policy to an IAM user
-}
data IamUserPolicyAttachmentResource = IamUserPolicyAttachmentResource {
      _policy_arn :: !(TF.Argument Text)
    {- ^ (Required) - The ARN of the policy you want to apply -}
    , _user       :: !(TF.Argument Text)
    {- ^ (Required) - The user the policy should be applied to -}
    } deriving (Show, Eq)

instance TF.ToHCL IamUserPolicyAttachmentResource where
    toHCL IamUserPolicyAttachmentResource{..} = TF.block $ catMaybes
        [ TF.assign "policy_arn" <$> TF.argument _policy_arn
        , TF.assign "user" <$> TF.argument _user
        ]

instance HasPolicyArn IamUserPolicyAttachmentResource (TF.Argument Text) where
    policyArn f s@IamUserPolicyAttachmentResource{..} =
        (\a -> s { _policy_arn = a } :: IamUserPolicyAttachmentResource)
             <$> f _policy_arn

instance HasUser IamUserPolicyAttachmentResource (TF.Argument Text) where
    user f s@IamUserPolicyAttachmentResource{..} =
        (\a -> s { _user = a } :: IamUserPolicyAttachmentResource)
             <$> f _user

iamUserPolicyAttachmentResource :: TF.Resource TF.AWS IamUserPolicyAttachmentResource
iamUserPolicyAttachmentResource =
    TF.newResource "aws_iam_user_policy_attachment" $
        IamUserPolicyAttachmentResource {
            _policy_arn = TF.Nil
            , _user = TF.Nil
            }

{- | The @aws_iam_user_policy@ AWS resource.

Provides an IAM policy attached to a user.
-}
data IamUserPolicyResource = IamUserPolicyResource {
      _name        :: !(TF.Argument Text)
    {- ^ (Optional) The name of the policy. If omitted, Terraform will assign a random, unique name. -}
    , _name_prefix :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) Creates a unique name beginning with the specified prefix. Conflicts with @name@ . -}
    , _policy      :: !(TF.Argument Text)
    {- ^ (Required) The policy document. This is a JSON formatted string. The heredoc syntax or @file@ function is helpful here. -}
    , _user        :: !(TF.Argument Text)
    {- ^ (Required) IAM user to which to attach this policy. -}
    } deriving (Show, Eq)

instance TF.ToHCL IamUserPolicyResource where
    toHCL IamUserPolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.argument _name
        , TF.assign "name_prefix" <$> TF.argument _name_prefix
        , TF.assign "policy" <$> TF.argument _policy
        , TF.assign "user" <$> TF.argument _user
        ]

instance HasName IamUserPolicyResource (TF.Argument Text) where
    name f s@IamUserPolicyResource{..} =
        (\a -> s { _name = a } :: IamUserPolicyResource)
             <$> f _name

instance HasNamePrefix IamUserPolicyResource (TF.Argument Text) where
    namePrefix f s@IamUserPolicyResource{..} =
        (\a -> s { _name_prefix = a } :: IamUserPolicyResource)
             <$> f _name_prefix

instance HasPolicy IamUserPolicyResource (TF.Argument Text) where
    policy f s@IamUserPolicyResource{..} =
        (\a -> s { _policy = a } :: IamUserPolicyResource)
             <$> f _policy

instance HasUser IamUserPolicyResource (TF.Argument Text) where
    user f s@IamUserPolicyResource{..} =
        (\a -> s { _user = a } :: IamUserPolicyResource)
             <$> f _user

iamUserPolicyResource :: TF.Resource TF.AWS IamUserPolicyResource
iamUserPolicyResource =
    TF.newResource "aws_iam_user_policy" $
        IamUserPolicyResource {
            _name = TF.Nil
            , _name_prefix = TF.Nil
            , _policy = TF.Nil
            , _user = TF.Nil
            }

{- | The @aws_iam_user@ AWS resource.

Provides an IAM user.
-}
data IamUserResource = IamUserResource {
      _force_destroy      :: !(TF.Argument Text)
    {- ^ (Optional, default false) When destroying this user, destroy even if it has non-Terraform-managed IAM access keys, login profile or MFA devices. Without @force_destroy@ a user with non-Terraform-managed access keys and login profile will fail to be destroyed. -}
    , _name               :: !(TF.Argument Text)
    {- ^ (Required) The user's name. The name must consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: @=,.@-_.@ . User names are not distinguished by case. For example, you cannot create users named both "TESTUSER" and "testuser". -}
    , _path               :: !(TF.Argument Text)
    {- ^ (Optional, default "/") Path in which to create the user. -}
    , _computed_arn       :: !(TF.Attribute Text)
    {- ^ - The ARN assigned by AWS for this user. -}
    , _computed_name      :: !(TF.Attribute Text)
    {- ^ - The user's name. -}
    , _computed_unique_id :: !(TF.Attribute Text)
    {- ^ - The <https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html#GUIDs> assigned by AWS. -}
    } deriving (Show, Eq)

instance TF.ToHCL IamUserResource where
    toHCL IamUserResource{..} = TF.block $ catMaybes
        [ TF.assign "force_destroy" <$> TF.argument _force_destroy
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "path" <$> TF.argument _path
        ]

instance HasForceDestroy IamUserResource (TF.Argument Text) where
    forceDestroy f s@IamUserResource{..} =
        (\a -> s { _force_destroy = a } :: IamUserResource)
             <$> f _force_destroy

instance HasName IamUserResource (TF.Argument Text) where
    name f s@IamUserResource{..} =
        (\a -> s { _name = a } :: IamUserResource)
             <$> f _name

instance HasPath IamUserResource (TF.Argument Text) where
    path f s@IamUserResource{..} =
        (\a -> s { _path = a } :: IamUserResource)
             <$> f _path

instance HasComputedArn IamUserResource (TF.Attribute Text) where
    computedArn f s@IamUserResource{..} =
        (\a -> s { _computed_arn = a } :: IamUserResource)
             <$> f _computed_arn

instance HasComputedName IamUserResource (TF.Attribute Text) where
    computedName f s@IamUserResource{..} =
        (\a -> s { _computed_name = a } :: IamUserResource)
             <$> f _computed_name

instance HasComputedUniqueId IamUserResource (TF.Attribute Text) where
    computedUniqueId f s@IamUserResource{..} =
        (\a -> s { _computed_unique_id = a } :: IamUserResource)
             <$> f _computed_unique_id

iamUserResource :: TF.Resource TF.AWS IamUserResource
iamUserResource =
    TF.newResource "aws_iam_user" $
        IamUserResource {
            _force_destroy = TF.Nil
            , _name = TF.Nil
            , _path = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_name = TF.Compute "name"
            , _computed_unique_id = TF.Compute "unique_id"
            }

{- | The @aws_iam_user_ssh_key@ AWS resource.

Uploads an SSH public key and associates it with the specified IAM user.
-}
data IamUserSshKeyResource = IamUserSshKeyResource {
      _encoding                   :: !(TF.Argument Text)
    {- ^ (Required) Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use @SSH@ . To retrieve the public key in PEM format, use @PEM@ . -}
    , _public_key                 :: !(TF.Argument Text)
    {- ^ (Required) The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. -}
    , _status                     :: !(TF.Argument Text)
    {- ^ (Optional) The status to assign to the SSH public key. Active means the key can be used for authentication with an AWS CodeCommit repository. Inactive means the key cannot be used. Default is @active@ . -}
    , _username                   :: !(TF.Argument Text)
    {- ^ (Required) The name of the IAM user to associate the SSH public key with. -}
    , _computed_fingerprint       :: !(TF.Attribute Text)
    {- ^ - The MD5 message digest of the SSH public key. -}
    , _computed_ssh_public_key_id :: !(TF.Attribute Text)
    {- ^ - The unique identifier for the SSH public key. -}
    } deriving (Show, Eq)

instance TF.ToHCL IamUserSshKeyResource where
    toHCL IamUserSshKeyResource{..} = TF.block $ catMaybes
        [ TF.assign "encoding" <$> TF.argument _encoding
        , TF.assign "public_key" <$> TF.argument _public_key
        , TF.assign "status" <$> TF.argument _status
        , TF.assign "username" <$> TF.argument _username
        ]

instance HasEncoding IamUserSshKeyResource (TF.Argument Text) where
    encoding f s@IamUserSshKeyResource{..} =
        (\a -> s { _encoding = a } :: IamUserSshKeyResource)
             <$> f _encoding

instance HasPublicKey IamUserSshKeyResource (TF.Argument Text) where
    publicKey f s@IamUserSshKeyResource{..} =
        (\a -> s { _public_key = a } :: IamUserSshKeyResource)
             <$> f _public_key

instance HasStatus IamUserSshKeyResource (TF.Argument Text) where
    status f s@IamUserSshKeyResource{..} =
        (\a -> s { _status = a } :: IamUserSshKeyResource)
             <$> f _status

instance HasUsername IamUserSshKeyResource (TF.Argument Text) where
    username f s@IamUserSshKeyResource{..} =
        (\a -> s { _username = a } :: IamUserSshKeyResource)
             <$> f _username

instance HasComputedFingerprint IamUserSshKeyResource (TF.Attribute Text) where
    computedFingerprint f s@IamUserSshKeyResource{..} =
        (\a -> s { _computed_fingerprint = a } :: IamUserSshKeyResource)
             <$> f _computed_fingerprint

instance HasComputedSshPublicKeyId IamUserSshKeyResource (TF.Attribute Text) where
    computedSshPublicKeyId f s@IamUserSshKeyResource{..} =
        (\a -> s { _computed_ssh_public_key_id = a } :: IamUserSshKeyResource)
             <$> f _computed_ssh_public_key_id

iamUserSshKeyResource :: TF.Resource TF.AWS IamUserSshKeyResource
iamUserSshKeyResource =
    TF.newResource "aws_iam_user_ssh_key" $
        IamUserSshKeyResource {
            _encoding = TF.Nil
            , _public_key = TF.Nil
            , _status = TF.Nil
            , _username = TF.Nil
            , _computed_fingerprint = TF.Compute "fingerprint"
            , _computed_ssh_public_key_id = TF.Compute "ssh_public_key_id"
            }

{- | The @aws_inspector_assessment_target@ AWS resource.

Provides a Inspector assessment target
-}
data InspectorAssessmentTargetResource = InspectorAssessmentTargetResource {
      _name               :: !(TF.Argument Text)
    {- ^ (Required) The name of the assessment target. -}
    , _resource_group_arn :: !(TF.Argument Text)
    {- ^ (Required )- The resource group ARN stating tags for instance matching. -}
    , _computed_arn       :: !(TF.Attribute Text)
    {- ^ - The target assessment ARN. -}
    } deriving (Show, Eq)

instance TF.ToHCL InspectorAssessmentTargetResource where
    toHCL InspectorAssessmentTargetResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.argument _name
        , TF.assign "resource_group_arn" <$> TF.argument _resource_group_arn
        ]

instance HasName InspectorAssessmentTargetResource (TF.Argument Text) where
    name f s@InspectorAssessmentTargetResource{..} =
        (\a -> s { _name = a } :: InspectorAssessmentTargetResource)
             <$> f _name

instance HasResourceGroupArn InspectorAssessmentTargetResource (TF.Argument Text) where
    resourceGroupArn f s@InspectorAssessmentTargetResource{..} =
        (\a -> s { _resource_group_arn = a } :: InspectorAssessmentTargetResource)
             <$> f _resource_group_arn

instance HasComputedArn InspectorAssessmentTargetResource (TF.Attribute Text) where
    computedArn f s@InspectorAssessmentTargetResource{..} =
        (\a -> s { _computed_arn = a } :: InspectorAssessmentTargetResource)
             <$> f _computed_arn

inspectorAssessmentTargetResource :: TF.Resource TF.AWS InspectorAssessmentTargetResource
inspectorAssessmentTargetResource =
    TF.newResource "aws_inspector_assessment_target" $
        InspectorAssessmentTargetResource {
            _name = TF.Nil
            , _resource_group_arn = TF.Nil
            , _computed_arn = TF.Compute "arn"
            }

{- | The @aws_inspector_assessment_template@ AWS resource.

Provides a Inspector assessment template
-}
data InspectorAssessmentTemplateResource = InspectorAssessmentTemplateResource {
      _duration           :: !(TF.Argument Text)
    {- ^ (Required) The duration of the inspector run. -}
    , _name               :: !(TF.Argument Text)
    {- ^ (Required) The name of the assessment template. -}
    , _rules_package_arns :: !(TF.Argument Text)
    {- ^ (Required) The rules to be used during the run. -}
    , _target_arn         :: !(TF.Argument Text)
    {- ^ (Required) The assessment target ARN to attach the template to. -}
    , _computed_arn       :: !(TF.Attribute Text)
    {- ^ - The template assessment ARN. -}
    } deriving (Show, Eq)

instance TF.ToHCL InspectorAssessmentTemplateResource where
    toHCL InspectorAssessmentTemplateResource{..} = TF.block $ catMaybes
        [ TF.assign "duration" <$> TF.argument _duration
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "rules_package_arns" <$> TF.argument _rules_package_arns
        , TF.assign "target_arn" <$> TF.argument _target_arn
        ]

instance HasDuration InspectorAssessmentTemplateResource (TF.Argument Text) where
    duration f s@InspectorAssessmentTemplateResource{..} =
        (\a -> s { _duration = a } :: InspectorAssessmentTemplateResource)
             <$> f _duration

instance HasName InspectorAssessmentTemplateResource (TF.Argument Text) where
    name f s@InspectorAssessmentTemplateResource{..} =
        (\a -> s { _name = a } :: InspectorAssessmentTemplateResource)
             <$> f _name

instance HasRulesPackageArns InspectorAssessmentTemplateResource (TF.Argument Text) where
    rulesPackageArns f s@InspectorAssessmentTemplateResource{..} =
        (\a -> s { _rules_package_arns = a } :: InspectorAssessmentTemplateResource)
             <$> f _rules_package_arns

instance HasTargetArn InspectorAssessmentTemplateResource (TF.Argument Text) where
    targetArn f s@InspectorAssessmentTemplateResource{..} =
        (\a -> s { _target_arn = a } :: InspectorAssessmentTemplateResource)
             <$> f _target_arn

instance HasComputedArn InspectorAssessmentTemplateResource (TF.Attribute Text) where
    computedArn f s@InspectorAssessmentTemplateResource{..} =
        (\a -> s { _computed_arn = a } :: InspectorAssessmentTemplateResource)
             <$> f _computed_arn

inspectorAssessmentTemplateResource :: TF.Resource TF.AWS InspectorAssessmentTemplateResource
inspectorAssessmentTemplateResource =
    TF.newResource "aws_inspector_assessment_template" $
        InspectorAssessmentTemplateResource {
            _duration = TF.Nil
            , _name = TF.Nil
            , _rules_package_arns = TF.Nil
            , _target_arn = TF.Nil
            , _computed_arn = TF.Compute "arn"
            }

{- | The @aws_inspector_resource_group@ AWS resource.

Provides a Inspector resource group
-}
data InspectorResourceGroupResource = InspectorResourceGroupResource {
      _tags         :: !(TF.Argument TF.Tags)
    {- ^ (Required) The tags on your EC2 Instance. -}
    , _computed_arn :: !(TF.Attribute Text)
    {- ^ - The resource group ARN. -}
    } deriving (Show, Eq)

instance TF.ToHCL InspectorResourceGroupResource where
    toHCL InspectorResourceGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "tags" <$> TF.argument _tags
        ]

instance HasTags InspectorResourceGroupResource (TF.Argument TF.Tags) where
    tags f s@InspectorResourceGroupResource{..} =
        (\a -> s { _tags = a } :: InspectorResourceGroupResource)
             <$> f _tags

instance HasComputedArn InspectorResourceGroupResource (TF.Attribute Text) where
    computedArn f s@InspectorResourceGroupResource{..} =
        (\a -> s { _computed_arn = a } :: InspectorResourceGroupResource)
             <$> f _computed_arn

inspectorResourceGroupResource :: TF.Resource TF.AWS InspectorResourceGroupResource
inspectorResourceGroupResource =
    TF.newResource "aws_inspector_resource_group" $
        InspectorResourceGroupResource {
            _tags = TF.Nil
            , _computed_arn = TF.Compute "arn"
            }

{- | The @aws_instance@ AWS resource.

Provides an EC2 instance resource. This allows instances to be created,
updated, and deleted. Instances also support </docs/provisioners/index.html>
.
-}
data InstanceResource = InstanceResource {
      _ami                                  :: !(TF.Argument Text)
    {- ^ (Required) The AMI to use for the instance. -}
    , _associate_public_ip_address          :: !(TF.Argument Text)
    {- ^ (Optional) Associate a public ip address with an instance in a VPC.  Boolean value. -}
    , _availability_zone                    :: !(TF.Argument Text)
    {- ^ (Optional) The AZ to start the instance in. -}
    , _disable_api_termination              :: !(TF.Argument Text)
    {- ^ (Optional) If true, enables <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#Using_ChangingDisableAPITermination> -}
    , _ebs_block_device                     :: !(TF.Argument Text)
    {- ^ (Optional) Additional EBS block devices to attach to the instance.  See <#block-devices> below for details. -}
    , _ebs_optimized                        :: !(TF.Argument Text)
    {- ^ (Optional) If true, the launched EC2 instance will be EBS-optimized. -}
    , _ephemeral_block_device               :: !(TF.Argument Text)
    {- ^ (Optional) Customize Ephemeral (also known as "Instance Store") volumes on the instance. See <#block-devices> below for details. -}
    , _iam_instance_profile                 :: !(TF.Argument Text)
    {- ^ (Optional) The IAM Instance Profile to launch the instance with. Specified as the name of the Instance Profile. Ensure your credentials have the correct permission to assign the instance profile according to the <http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2.html#roles-usingrole-ec2instance-permissions> , notably @iam:PassRole@ . -}
    , _instance_initiated_shutdown_behavior :: !(TF.Argument Text)
    {- ^ (Optional) Shutdown behavior for the instance. Amazon defaults this to @stop@ for EBS-backed instances and @terminate@ for instance-store instances. Cannot be set on instance-store instances. See <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#Using_ChangingInstanceInitiatedShutdownBehavior> for more information. -}
    , _instance_type                        :: !(TF.Argument Text)
    {- ^ (Required) The type of instance to start. Updates to this field will trigger a stop/start of the EC2 instance. -}
    , _ipv6_address_count                   :: !(TF.Argument Text)
    {- ^ (Optional) A number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet. -}
    , _ipv6_addresses                       :: !(TF.Argument Text)
    {- ^ (Optional) Specify one or more IPv6 addresses from the range of the subnet to associate with the primary network interface -}
    , _key_name                             :: !(TF.Argument Text)
    {- ^ (Optional) The key name to use for the instance. -}
    , _monitoring                           :: !(TF.Argument Text)
    {- ^ (Optional) If true, the launched EC2 instance will have detailed monitoring enabled. (Available since v0.6.0) -}
    , _network_interface                    :: !(TF.Argument Text)
    {- ^ (Optional) Customize network interfaces to be attached at instance boot time. See <#network-interfaces> below for more details. -}
    , _placement_group                      :: !(TF.Argument Text)
    {- ^ (Optional) The Placement Group to start the instance in. -}
    , _private_ip                           :: !(TF.Argument Text)
    {- ^ (Optional) Private IP address to associate with the instance in a VPC. -}
    , _root_block_device                    :: !(TF.Argument Text)
    {- ^ (Optional) Customize details about the root block device of the instance. See <#block-devices> below for details. -}
    , _security_groups                      :: !(TF.Argument Text)
    {- ^ (Optional) A list of security group names to associate with. If you are creating Instances in a VPC, use @vpc_security_group_ids@ instead. -}
    , _source_dest_check                    :: !(TF.Argument Text)
    {- ^ (Optional) Controls if traffic is routed to the instance when the destination address does not match the instance. Used for NAT or VPNs. Defaults true. -}
    , _subnet_id                            :: !(TF.Argument Text)
    {- ^ (Optional) The VPC Subnet ID to launch in. -}
    , _tags                                 :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _tenancy                              :: !(TF.Argument Text)
    {- ^ (Optional) The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware. The host tenancy is not supported for the import-instance command. -}
    , _user_data                            :: !(TF.Argument Text)
    {- ^ (Optional) The user data to provide when launching the instance. Do not pass gzip-compressed data via this argument; see @user_data_base64@ instead. -}
    , _user_data_base64                     :: !(TF.Argument Text)
    {- ^ (Optional) Can be used instead of @user_data@ to pass base64-encoded binary data directly. Use this instead of @user_data@ whenever the value is not a valid UTF-8 string. For example, gzip-encoded user data must be base64-encoded and passed via this argument to avoid corruption. -}
    , _volume_tags                          :: !(TF.Argument Text)
    {- ^ (Optional) A mapping of tags to assign to the devices created by the instance at launch time. -}
    , _vpc_security_group_ids               :: !(TF.Argument Text)
    {- ^ (Optional) A list of security group IDs to associate with. -}
    } deriving (Show, Eq)

instance TF.ToHCL InstanceResource where
    toHCL InstanceResource{..} = TF.block $ catMaybes
        [ TF.assign "ami" <$> TF.argument _ami
        , TF.assign "associate_public_ip_address" <$> TF.argument _associate_public_ip_address
        , TF.assign "availability_zone" <$> TF.argument _availability_zone
        , TF.assign "disable_api_termination" <$> TF.argument _disable_api_termination
        , TF.assign "ebs_block_device" <$> TF.argument _ebs_block_device
        , TF.assign "ebs_optimized" <$> TF.argument _ebs_optimized
        , TF.assign "ephemeral_block_device" <$> TF.argument _ephemeral_block_device
        , TF.assign "iam_instance_profile" <$> TF.argument _iam_instance_profile
        , TF.assign "instance_initiated_shutdown_behavior" <$> TF.argument _instance_initiated_shutdown_behavior
        , TF.assign "instance_type" <$> TF.argument _instance_type
        , TF.assign "ipv6_address_count" <$> TF.argument _ipv6_address_count
        , TF.assign "ipv6_addresses" <$> TF.argument _ipv6_addresses
        , TF.assign "key_name" <$> TF.argument _key_name
        , TF.assign "monitoring" <$> TF.argument _monitoring
        , TF.assign "network_interface" <$> TF.argument _network_interface
        , TF.assign "placement_group" <$> TF.argument _placement_group
        , TF.assign "private_ip" <$> TF.argument _private_ip
        , TF.assign "root_block_device" <$> TF.argument _root_block_device
        , TF.assign "security_groups" <$> TF.argument _security_groups
        , TF.assign "source_dest_check" <$> TF.argument _source_dest_check
        , TF.assign "subnet_id" <$> TF.argument _subnet_id
        , TF.assign "tags" <$> TF.argument _tags
        , TF.assign "tenancy" <$> TF.argument _tenancy
        , TF.assign "user_data" <$> TF.argument _user_data
        , TF.assign "user_data_base64" <$> TF.argument _user_data_base64
        , TF.assign "volume_tags" <$> TF.argument _volume_tags
        , TF.assign "vpc_security_group_ids" <$> TF.argument _vpc_security_group_ids
        ]

instance HasAmi InstanceResource (TF.Argument Text) where
    ami f s@InstanceResource{..} =
        (\a -> s { _ami = a } :: InstanceResource)
             <$> f _ami

instance HasAssociatePublicIpAddress InstanceResource (TF.Argument Text) where
    associatePublicIpAddress f s@InstanceResource{..} =
        (\a -> s { _associate_public_ip_address = a } :: InstanceResource)
             <$> f _associate_public_ip_address

instance HasAvailabilityZone InstanceResource (TF.Argument Text) where
    availabilityZone f s@InstanceResource{..} =
        (\a -> s { _availability_zone = a } :: InstanceResource)
             <$> f _availability_zone

instance HasDisableApiTermination InstanceResource (TF.Argument Text) where
    disableApiTermination f s@InstanceResource{..} =
        (\a -> s { _disable_api_termination = a } :: InstanceResource)
             <$> f _disable_api_termination

instance HasEbsBlockDevice InstanceResource (TF.Argument Text) where
    ebsBlockDevice f s@InstanceResource{..} =
        (\a -> s { _ebs_block_device = a } :: InstanceResource)
             <$> f _ebs_block_device

instance HasEbsOptimized InstanceResource (TF.Argument Text) where
    ebsOptimized f s@InstanceResource{..} =
        (\a -> s { _ebs_optimized = a } :: InstanceResource)
             <$> f _ebs_optimized

instance HasEphemeralBlockDevice InstanceResource (TF.Argument Text) where
    ephemeralBlockDevice f s@InstanceResource{..} =
        (\a -> s { _ephemeral_block_device = a } :: InstanceResource)
             <$> f _ephemeral_block_device

instance HasIamInstanceProfile InstanceResource (TF.Argument Text) where
    iamInstanceProfile f s@InstanceResource{..} =
        (\a -> s { _iam_instance_profile = a } :: InstanceResource)
             <$> f _iam_instance_profile

instance HasInstanceInitiatedShutdownBehavior InstanceResource (TF.Argument Text) where
    instanceInitiatedShutdownBehavior f s@InstanceResource{..} =
        (\a -> s { _instance_initiated_shutdown_behavior = a } :: InstanceResource)
             <$> f _instance_initiated_shutdown_behavior

instance HasInstanceType InstanceResource (TF.Argument Text) where
    instanceType f s@InstanceResource{..} =
        (\a -> s { _instance_type = a } :: InstanceResource)
             <$> f _instance_type

instance HasIpv6AddressCount InstanceResource (TF.Argument Text) where
    ipv6AddressCount f s@InstanceResource{..} =
        (\a -> s { _ipv6_address_count = a } :: InstanceResource)
             <$> f _ipv6_address_count

instance HasIpv6Addresses InstanceResource (TF.Argument Text) where
    ipv6Addresses f s@InstanceResource{..} =
        (\a -> s { _ipv6_addresses = a } :: InstanceResource)
             <$> f _ipv6_addresses

instance HasKeyName InstanceResource (TF.Argument Text) where
    keyName f s@InstanceResource{..} =
        (\a -> s { _key_name = a } :: InstanceResource)
             <$> f _key_name

instance HasMonitoring InstanceResource (TF.Argument Text) where
    monitoring f s@InstanceResource{..} =
        (\a -> s { _monitoring = a } :: InstanceResource)
             <$> f _monitoring

instance HasNetworkInterface InstanceResource (TF.Argument Text) where
    networkInterface f s@InstanceResource{..} =
        (\a -> s { _network_interface = a } :: InstanceResource)
             <$> f _network_interface

instance HasPlacementGroup InstanceResource (TF.Argument Text) where
    placementGroup f s@InstanceResource{..} =
        (\a -> s { _placement_group = a } :: InstanceResource)
             <$> f _placement_group

instance HasPrivateIp InstanceResource (TF.Argument Text) where
    privateIp f s@InstanceResource{..} =
        (\a -> s { _private_ip = a } :: InstanceResource)
             <$> f _private_ip

instance HasRootBlockDevice InstanceResource (TF.Argument Text) where
    rootBlockDevice f s@InstanceResource{..} =
        (\a -> s { _root_block_device = a } :: InstanceResource)
             <$> f _root_block_device

instance HasSecurityGroups InstanceResource (TF.Argument Text) where
    securityGroups f s@InstanceResource{..} =
        (\a -> s { _security_groups = a } :: InstanceResource)
             <$> f _security_groups

instance HasSourceDestCheck InstanceResource (TF.Argument Text) where
    sourceDestCheck f s@InstanceResource{..} =
        (\a -> s { _source_dest_check = a } :: InstanceResource)
             <$> f _source_dest_check

instance HasSubnetId InstanceResource (TF.Argument Text) where
    subnetId f s@InstanceResource{..} =
        (\a -> s { _subnet_id = a } :: InstanceResource)
             <$> f _subnet_id

instance HasTags InstanceResource (TF.Argument TF.Tags) where
    tags f s@InstanceResource{..} =
        (\a -> s { _tags = a } :: InstanceResource)
             <$> f _tags

instance HasTenancy InstanceResource (TF.Argument Text) where
    tenancy f s@InstanceResource{..} =
        (\a -> s { _tenancy = a } :: InstanceResource)
             <$> f _tenancy

instance HasUserData InstanceResource (TF.Argument Text) where
    userData f s@InstanceResource{..} =
        (\a -> s { _user_data = a } :: InstanceResource)
             <$> f _user_data

instance HasUserDataBase64 InstanceResource (TF.Argument Text) where
    userDataBase64 f s@InstanceResource{..} =
        (\a -> s { _user_data_base64 = a } :: InstanceResource)
             <$> f _user_data_base64

instance HasVolumeTags InstanceResource (TF.Argument Text) where
    volumeTags f s@InstanceResource{..} =
        (\a -> s { _volume_tags = a } :: InstanceResource)
             <$> f _volume_tags

instance HasVpcSecurityGroupIds InstanceResource (TF.Argument Text) where
    vpcSecurityGroupIds f s@InstanceResource{..} =
        (\a -> s { _vpc_security_group_ids = a } :: InstanceResource)
             <$> f _vpc_security_group_ids

instanceResource :: TF.Resource TF.AWS InstanceResource
instanceResource =
    TF.newResource "aws_instance" $
        InstanceResource {
            _ami = TF.Nil
            , _associate_public_ip_address = TF.Nil
            , _availability_zone = TF.Nil
            , _disable_api_termination = TF.Nil
            , _ebs_block_device = TF.Nil
            , _ebs_optimized = TF.Nil
            , _ephemeral_block_device = TF.Nil
            , _iam_instance_profile = TF.Nil
            , _instance_initiated_shutdown_behavior = TF.Nil
            , _instance_type = TF.Nil
            , _ipv6_address_count = TF.Nil
            , _ipv6_addresses = TF.Nil
            , _key_name = TF.Nil
            , _monitoring = TF.Nil
            , _network_interface = TF.Nil
            , _placement_group = TF.Nil
            , _private_ip = TF.Nil
            , _root_block_device = TF.Nil
            , _security_groups = TF.Nil
            , _source_dest_check = TF.Nil
            , _subnet_id = TF.Nil
            , _tags = TF.Nil
            , _tenancy = TF.Nil
            , _user_data = TF.Nil
            , _user_data_base64 = TF.Nil
            , _volume_tags = TF.Nil
            , _vpc_security_group_ids = TF.Nil
            }

{- | The @aws_internet_gateway@ AWS resource.

Provides a resource to create a VPC Internet Gateway.
-}
data InternetGatewayResource = InternetGatewayResource {
      _tags        :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _vpc_id      :: !(TF.Argument Text)
    {- ^ (Required) The VPC ID to create in. -}
    , _computed_id :: !(TF.Attribute Text)
    {- ^ - The ID of the Internet Gateway. -}
    } deriving (Show, Eq)

instance TF.ToHCL InternetGatewayResource where
    toHCL InternetGatewayResource{..} = TF.block $ catMaybes
        [ TF.assign "tags" <$> TF.argument _tags
        , TF.assign "vpc_id" <$> TF.argument _vpc_id
        ]

instance HasTags InternetGatewayResource (TF.Argument TF.Tags) where
    tags f s@InternetGatewayResource{..} =
        (\a -> s { _tags = a } :: InternetGatewayResource)
             <$> f _tags

instance HasVpcId InternetGatewayResource (TF.Argument Text) where
    vpcId f s@InternetGatewayResource{..} =
        (\a -> s { _vpc_id = a } :: InternetGatewayResource)
             <$> f _vpc_id

instance HasComputedId InternetGatewayResource (TF.Attribute Text) where
    computedId f s@InternetGatewayResource{..} =
        (\a -> s { _computed_id = a } :: InternetGatewayResource)
             <$> f _computed_id

internetGatewayResource :: TF.Resource TF.AWS InternetGatewayResource
internetGatewayResource =
    TF.newResource "aws_internet_gateway" $
        InternetGatewayResource {
            _tags = TF.Nil
            , _vpc_id = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_iot_certificate@ AWS resource.

Creates and manages an AWS IoT certificate.
-}
data IotCertificateResource = IotCertificateResource {
      _active       :: !(TF.Argument Text)
    {- ^ (Required)  Boolean flag to indicate if the certificate should be active -}
    , _csr          :: !(TF.Argument Text)
    {- ^ (Required) The certificate signing request. Review the [IoT API Reference Guide] (http://docs.aws.amazon.com/iot/latest/apireference/API_CreateCertificateFromCsr.html) for more information on creating a certificate from a certificate signing request (CSR). -}
    , _computed_arn :: !(TF.Attribute Text)
    {- ^ - The ARN of the created AWS IoT certificate -}
    } deriving (Show, Eq)

instance TF.ToHCL IotCertificateResource where
    toHCL IotCertificateResource{..} = TF.block $ catMaybes
        [ TF.assign "active" <$> TF.argument _active
        , TF.assign "csr" <$> TF.argument _csr
        ]

instance HasActive IotCertificateResource (TF.Argument Text) where
    active f s@IotCertificateResource{..} =
        (\a -> s { _active = a } :: IotCertificateResource)
             <$> f _active

instance HasCsr IotCertificateResource (TF.Argument Text) where
    csr f s@IotCertificateResource{..} =
        (\a -> s { _csr = a } :: IotCertificateResource)
             <$> f _csr

instance HasComputedArn IotCertificateResource (TF.Attribute Text) where
    computedArn f s@IotCertificateResource{..} =
        (\a -> s { _computed_arn = a } :: IotCertificateResource)
             <$> f _computed_arn

iotCertificateResource :: TF.Resource TF.AWS IotCertificateResource
iotCertificateResource =
    TF.newResource "aws_iot_certificate" $
        IotCertificateResource {
            _active = TF.Nil
            , _csr = TF.Nil
            , _computed_arn = TF.Compute "arn"
            }

{- | The @aws_iot_policy@ AWS resource.

Provides an IoT policy.
-}
data IotPolicyResource = IotPolicyResource {
      _name                        :: !(TF.Argument Text)
    {- ^ (Required) The name of the policy. -}
    , _policy                      :: !(TF.Argument Text)
    {- ^ (Required) The policy document. This is a JSON formatted string. The heredoc syntax or @file@ function is helpful here. Use the [IoT Developer Guide] (http://docs.aws.amazon.com/iot/latest/developerguide/iot-policies.html) for more information on IoT Policies -}
    , _computed_arn                :: !(TF.Attribute Text)
    {- ^ - The ARN assigned by AWS to this policy. -}
    , _computed_default_version_id :: !(TF.Attribute Text)
    {- ^ - The default version of this policy. -}
    , _computed_name               :: !(TF.Attribute Text)
    {- ^ - The name of this policy. -}
    , _computed_policy             :: !(TF.Attribute Text)
    {- ^ - The policy document. -}
    } deriving (Show, Eq)

instance TF.ToHCL IotPolicyResource where
    toHCL IotPolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.argument _name
        , TF.assign "policy" <$> TF.argument _policy
        ]

instance HasName IotPolicyResource (TF.Argument Text) where
    name f s@IotPolicyResource{..} =
        (\a -> s { _name = a } :: IotPolicyResource)
             <$> f _name

instance HasPolicy IotPolicyResource (TF.Argument Text) where
    policy f s@IotPolicyResource{..} =
        (\a -> s { _policy = a } :: IotPolicyResource)
             <$> f _policy

instance HasComputedArn IotPolicyResource (TF.Attribute Text) where
    computedArn f s@IotPolicyResource{..} =
        (\a -> s { _computed_arn = a } :: IotPolicyResource)
             <$> f _computed_arn

instance HasComputedDefaultVersionId IotPolicyResource (TF.Attribute Text) where
    computedDefaultVersionId f s@IotPolicyResource{..} =
        (\a -> s { _computed_default_version_id = a } :: IotPolicyResource)
             <$> f _computed_default_version_id

instance HasComputedName IotPolicyResource (TF.Attribute Text) where
    computedName f s@IotPolicyResource{..} =
        (\a -> s { _computed_name = a } :: IotPolicyResource)
             <$> f _computed_name

instance HasComputedPolicy IotPolicyResource (TF.Attribute Text) where
    computedPolicy f s@IotPolicyResource{..} =
        (\a -> s { _computed_policy = a } :: IotPolicyResource)
             <$> f _computed_policy

iotPolicyResource :: TF.Resource TF.AWS IotPolicyResource
iotPolicyResource =
    TF.newResource "aws_iot_policy" $
        IotPolicyResource {
            _name = TF.Nil
            , _policy = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_default_version_id = TF.Compute "default_version_id"
            , _computed_name = TF.Compute "name"
            , _computed_policy = TF.Compute "policy"
            }

{- | The @aws_key_pair@ AWS resource.

Provides an
<https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html>
resource. A key pair is used to control login access to EC2 instances.
Currently this resource requires an existing user-supplied key pair. This
key pair's public key will be registered with AWS to allow logging-in to EC2
instances. When importing an existing key pair the public key material may
be in any format supported by AWS. Supported formats (per the
<https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html#how-to-generate-your-own-key-and-import-it-to-aws>
) are:
-}
data KeyPairResource = KeyPairResource {
      _key_name             :: !(TF.Argument Text)
    {- ^ (Optional) The name for the key pair. -}
    , _key_name_prefix      :: !(TF.Argument Text)
    {- ^ (Optional) Creates a unique name beginning with the specified prefix. Conflicts with @key_name@ . -}
    , _public_key           :: !(TF.Argument Text)
    {- ^ (Required) The public key material. -}
    , _computed_fingerprint :: !(TF.Attribute Text)
    {- ^ - The MD5 public key fingerprint as specified in section 4 of RFC 4716. -}
    , _computed_key_name    :: !(TF.Attribute Text)
    {- ^ - The key pair name. -}
    } deriving (Show, Eq)

instance TF.ToHCL KeyPairResource where
    toHCL KeyPairResource{..} = TF.block $ catMaybes
        [ TF.assign "key_name" <$> TF.argument _key_name
        , TF.assign "key_name_prefix" <$> TF.argument _key_name_prefix
        , TF.assign "public_key" <$> TF.argument _public_key
        ]

instance HasKeyName KeyPairResource (TF.Argument Text) where
    keyName f s@KeyPairResource{..} =
        (\a -> s { _key_name = a } :: KeyPairResource)
             <$> f _key_name

instance HasKeyNamePrefix KeyPairResource (TF.Argument Text) where
    keyNamePrefix f s@KeyPairResource{..} =
        (\a -> s { _key_name_prefix = a } :: KeyPairResource)
             <$> f _key_name_prefix

instance HasPublicKey KeyPairResource (TF.Argument Text) where
    publicKey f s@KeyPairResource{..} =
        (\a -> s { _public_key = a } :: KeyPairResource)
             <$> f _public_key

instance HasComputedFingerprint KeyPairResource (TF.Attribute Text) where
    computedFingerprint f s@KeyPairResource{..} =
        (\a -> s { _computed_fingerprint = a } :: KeyPairResource)
             <$> f _computed_fingerprint

instance HasComputedKeyName KeyPairResource (TF.Attribute Text) where
    computedKeyName f s@KeyPairResource{..} =
        (\a -> s { _computed_key_name = a } :: KeyPairResource)
             <$> f _computed_key_name

keyPairResource :: TF.Resource TF.AWS KeyPairResource
keyPairResource =
    TF.newResource "aws_key_pair" $
        KeyPairResource {
            _key_name = TF.Nil
            , _key_name_prefix = TF.Nil
            , _public_key = TF.Nil
            , _computed_fingerprint = TF.Compute "fingerprint"
            , _computed_key_name = TF.Compute "key_name"
            }

{- | The @aws_kinesis_firehose_delivery_stream@ AWS resource.

Provides a Kinesis Firehose Delivery Stream resource. Amazon Kinesis
Firehose is a fully managed, elastic service to easily deliver real-time
data streams to destinations such as Amazon S3 and Amazon Redshift. For more
details, see the <https://aws.amazon.com/documentation/firehose/> .
-}
data KinesisFirehoseDeliveryStreamResource = KinesisFirehoseDeliveryStreamResource {
      _destination                  :: !(TF.Argument Text)
    {- ^ – (Required) This is the destination to where the data is delivered. The only options are @s3@ (Deprecated, use @extended_s3@ instead), @extended_s3@ , @redshift@ , and @elasticsearch@ . -}
    , _extended_s3_configuration    :: !(TF.Argument Text)
    {- ^ (Optional, only Required when @destination@ is @extended_s3@ ) Enhanced configuration options for the s3 destination. More details are given below. -}
    , _kinesis_source_configuration :: !(TF.Argument Text)
    {- ^ (Optional) Allows the ability to specify the kinesis stream that is used as the source of the firehose delivery stream. -}
    , _name                         :: !(TF.Argument Text)
    {- ^ (Required) A name to identify the stream. This is unique to the AWS account and region the Stream is created in. -}
    , _redshift_configuration       :: !(TF.Argument Text)
    {- ^ (Optional) Configuration options if redshift is the destination. Using @redshift_configuration@ requires the user to also specify a @s3_configuration@ block. More details are given below. -}
    , _s3_configuration             :: !(TF.Argument Text)
    {- ^ (Optional, Deprecated, see/use @extended_s3_configuration@ unless @destination@ is @redshift@ ) Configuration options for the s3 destination (or the intermediate bucket if the destination is redshift). More details are given below. -}
    , _computed_arn                 :: !(TF.Attribute Text)
    {- ^ - The Amazon Resource Name (ARN) specifying the Stream -}
    } deriving (Show, Eq)

instance TF.ToHCL KinesisFirehoseDeliveryStreamResource where
    toHCL KinesisFirehoseDeliveryStreamResource{..} = TF.block $ catMaybes
        [ TF.assign "destination" <$> TF.argument _destination
        , TF.assign "extended_s3_configuration" <$> TF.argument _extended_s3_configuration
        , TF.assign "kinesis_source_configuration" <$> TF.argument _kinesis_source_configuration
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "redshift_configuration" <$> TF.argument _redshift_configuration
        , TF.assign "s3_configuration" <$> TF.argument _s3_configuration
        ]

instance HasDestination KinesisFirehoseDeliveryStreamResource (TF.Argument Text) where
    destination f s@KinesisFirehoseDeliveryStreamResource{..} =
        (\a -> s { _destination = a } :: KinesisFirehoseDeliveryStreamResource)
             <$> f _destination

instance HasExtendedS3Configuration KinesisFirehoseDeliveryStreamResource (TF.Argument Text) where
    extendedS3Configuration f s@KinesisFirehoseDeliveryStreamResource{..} =
        (\a -> s { _extended_s3_configuration = a } :: KinesisFirehoseDeliveryStreamResource)
             <$> f _extended_s3_configuration

instance HasKinesisSourceConfiguration KinesisFirehoseDeliveryStreamResource (TF.Argument Text) where
    kinesisSourceConfiguration f s@KinesisFirehoseDeliveryStreamResource{..} =
        (\a -> s { _kinesis_source_configuration = a } :: KinesisFirehoseDeliveryStreamResource)
             <$> f _kinesis_source_configuration

instance HasName KinesisFirehoseDeliveryStreamResource (TF.Argument Text) where
    name f s@KinesisFirehoseDeliveryStreamResource{..} =
        (\a -> s { _name = a } :: KinesisFirehoseDeliveryStreamResource)
             <$> f _name

instance HasRedshiftConfiguration KinesisFirehoseDeliveryStreamResource (TF.Argument Text) where
    redshiftConfiguration f s@KinesisFirehoseDeliveryStreamResource{..} =
        (\a -> s { _redshift_configuration = a } :: KinesisFirehoseDeliveryStreamResource)
             <$> f _redshift_configuration

instance HasS3Configuration KinesisFirehoseDeliveryStreamResource (TF.Argument Text) where
    s3Configuration f s@KinesisFirehoseDeliveryStreamResource{..} =
        (\a -> s { _s3_configuration = a } :: KinesisFirehoseDeliveryStreamResource)
             <$> f _s3_configuration

instance HasComputedArn KinesisFirehoseDeliveryStreamResource (TF.Attribute Text) where
    computedArn f s@KinesisFirehoseDeliveryStreamResource{..} =
        (\a -> s { _computed_arn = a } :: KinesisFirehoseDeliveryStreamResource)
             <$> f _computed_arn

kinesisFirehoseDeliveryStreamResource :: TF.Resource TF.AWS KinesisFirehoseDeliveryStreamResource
kinesisFirehoseDeliveryStreamResource =
    TF.newResource "aws_kinesis_firehose_delivery_stream" $
        KinesisFirehoseDeliveryStreamResource {
            _destination = TF.Nil
            , _extended_s3_configuration = TF.Nil
            , _kinesis_source_configuration = TF.Nil
            , _name = TF.Nil
            , _redshift_configuration = TF.Nil
            , _s3_configuration = TF.Nil
            , _computed_arn = TF.Compute "arn"
            }

{- | The @aws_kinesis_stream@ AWS resource.

Provides a Kinesis Stream resource. Amazon Kinesis is a managed service that
scales elastically for real-time processing of streaming big data. For more
details, see the <https://aws.amazon.com/documentation/kinesis/> .
-}
data KinesisStreamResource = KinesisStreamResource {
      _encryption_type      :: !(TF.Argument Text)
    {- ^ (Optional) The encryption type to use. The only acceptable values are @NONE@ or @KMS@ . The default value is @NONE@ . -}
    , _kms_key_id           :: !(TF.Argument Text)
    {- ^ (Optional) The GUID for the customer-managed KMS key to use for encryption. You can also use a Kinesis-owned master key by specifying the alias aws/kinesis. -}
    , _name                 :: !(TF.Argument Text)
    {- ^ (Required) A name to identify the stream. This is unique to the AWS account and region the Stream is created in. -}
    , _retention_period     :: !(TF.Argument Text)
    {- ^ (Optional) Length of time data records are accessible after they are added to the stream. The maximum value of a stream's retention period is 168 hours. Minimum value is 24. Default is 24. -}
    , _shard_count          :: !(TF.Argument Text)
    {- ^ – (Required) The number of shards that the stream will use. Amazon has guidlines for specifying the Stream size that should be referenced when creating a Kinesis stream. See <https://docs.aws.amazon.com/kinesis/latest/dev/amazon-kinesis-streams.html> for more. -}
    , _shard_level_metrics  :: !(TF.Argument Text)
    {- ^ (Optional) A list of shard-level CloudWatch metrics which can be enabled for the stream. See <https://docs.aws.amazon.com/streams/latest/dev/monitoring-with-cloudwatch.html> for more. Note that the value ALL should not be used; instead you should provide an explicit list of metrics you wish to enable. -}
    , _tags                 :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _computed_arn         :: !(TF.Attribute Text)
    {- ^ - The Amazon Resource Name (ARN) specifying the Stream (same as @id@ ) -}
    , _computed_id          :: !(TF.Attribute Text)
    {- ^ - The unique Stream id -}
    , _computed_name        :: !(TF.Attribute Text)
    {- ^ - The unique Stream name -}
    , _computed_shard_count :: !(TF.Attribute Text)
    {- ^ - The count of Shards for this Stream -}
    } deriving (Show, Eq)

instance TF.ToHCL KinesisStreamResource where
    toHCL KinesisStreamResource{..} = TF.block $ catMaybes
        [ TF.assign "encryption_type" <$> TF.argument _encryption_type
        , TF.assign "kms_key_id" <$> TF.argument _kms_key_id
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "retention_period" <$> TF.argument _retention_period
        , TF.assign "shard_count" <$> TF.argument _shard_count
        , TF.assign "shard_level_metrics" <$> TF.argument _shard_level_metrics
        , TF.assign "tags" <$> TF.argument _tags
        ]

instance HasEncryptionType KinesisStreamResource (TF.Argument Text) where
    encryptionType f s@KinesisStreamResource{..} =
        (\a -> s { _encryption_type = a } :: KinesisStreamResource)
             <$> f _encryption_type

instance HasKmsKeyId KinesisStreamResource (TF.Argument Text) where
    kmsKeyId f s@KinesisStreamResource{..} =
        (\a -> s { _kms_key_id = a } :: KinesisStreamResource)
             <$> f _kms_key_id

instance HasName KinesisStreamResource (TF.Argument Text) where
    name f s@KinesisStreamResource{..} =
        (\a -> s { _name = a } :: KinesisStreamResource)
             <$> f _name

instance HasRetentionPeriod KinesisStreamResource (TF.Argument Text) where
    retentionPeriod f s@KinesisStreamResource{..} =
        (\a -> s { _retention_period = a } :: KinesisStreamResource)
             <$> f _retention_period

instance HasShardCount KinesisStreamResource (TF.Argument Text) where
    shardCount f s@KinesisStreamResource{..} =
        (\a -> s { _shard_count = a } :: KinesisStreamResource)
             <$> f _shard_count

instance HasShardLevelMetrics KinesisStreamResource (TF.Argument Text) where
    shardLevelMetrics f s@KinesisStreamResource{..} =
        (\a -> s { _shard_level_metrics = a } :: KinesisStreamResource)
             <$> f _shard_level_metrics

instance HasTags KinesisStreamResource (TF.Argument TF.Tags) where
    tags f s@KinesisStreamResource{..} =
        (\a -> s { _tags = a } :: KinesisStreamResource)
             <$> f _tags

instance HasComputedArn KinesisStreamResource (TF.Attribute Text) where
    computedArn f s@KinesisStreamResource{..} =
        (\a -> s { _computed_arn = a } :: KinesisStreamResource)
             <$> f _computed_arn

instance HasComputedId KinesisStreamResource (TF.Attribute Text) where
    computedId f s@KinesisStreamResource{..} =
        (\a -> s { _computed_id = a } :: KinesisStreamResource)
             <$> f _computed_id

instance HasComputedName KinesisStreamResource (TF.Attribute Text) where
    computedName f s@KinesisStreamResource{..} =
        (\a -> s { _computed_name = a } :: KinesisStreamResource)
             <$> f _computed_name

instance HasComputedShardCount KinesisStreamResource (TF.Attribute Text) where
    computedShardCount f s@KinesisStreamResource{..} =
        (\a -> s { _computed_shard_count = a } :: KinesisStreamResource)
             <$> f _computed_shard_count

kinesisStreamResource :: TF.Resource TF.AWS KinesisStreamResource
kinesisStreamResource =
    TF.newResource "aws_kinesis_stream" $
        KinesisStreamResource {
            _encryption_type = TF.Nil
            , _kms_key_id = TF.Nil
            , _name = TF.Nil
            , _retention_period = TF.Nil
            , _shard_count = TF.Nil
            , _shard_level_metrics = TF.Nil
            , _tags = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_id = TF.Compute "id"
            , _computed_name = TF.Compute "name"
            , _computed_shard_count = TF.Compute "shard_count"
            }

{- | The @aws_kms_alias@ AWS resource.

Provides an alias for a KMS customer master key. AWS Console enforces 1-to-1
mapping between aliases & keys, but API (hence Terraform too) allows you to
create as many aliases as the
<http://docs.aws.amazon.com/kms/latest/developerguide/limits.html> allow
you.
-}
data KmsAliasResource = KmsAliasResource {
      _name          :: !(TF.Argument Text)
    {- ^ (Optional) The display name of the alias. The name must start with the word "alias" followed by a forward slash (alias/) -}
    , _name_prefix   :: !(TF.Argument Text)
    {- ^ (Optional) Creates an unique alias beginning with the specified prefix. The name must start with the word "alias" followed by a forward slash (alias/).  Conflicts with @name@ . -}
    , _target_key_id :: !(TF.Argument Text)
    {- ^ (Required) Identifier for the key for which the alias is for, can be either an ARN or key_id. -}
    , _computed_arn  :: !(TF.Attribute Text)
    {- ^ - The Amazon Resource Name (ARN) of the key alias. -}
    } deriving (Show, Eq)

instance TF.ToHCL KmsAliasResource where
    toHCL KmsAliasResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.argument _name
        , TF.assign "name_prefix" <$> TF.argument _name_prefix
        , TF.assign "target_key_id" <$> TF.argument _target_key_id
        ]

instance HasName KmsAliasResource (TF.Argument Text) where
    name f s@KmsAliasResource{..} =
        (\a -> s { _name = a } :: KmsAliasResource)
             <$> f _name

instance HasNamePrefix KmsAliasResource (TF.Argument Text) where
    namePrefix f s@KmsAliasResource{..} =
        (\a -> s { _name_prefix = a } :: KmsAliasResource)
             <$> f _name_prefix

instance HasTargetKeyId KmsAliasResource (TF.Argument Text) where
    targetKeyId f s@KmsAliasResource{..} =
        (\a -> s { _target_key_id = a } :: KmsAliasResource)
             <$> f _target_key_id

instance HasComputedArn KmsAliasResource (TF.Attribute Text) where
    computedArn f s@KmsAliasResource{..} =
        (\a -> s { _computed_arn = a } :: KmsAliasResource)
             <$> f _computed_arn

kmsAliasResource :: TF.Resource TF.AWS KmsAliasResource
kmsAliasResource =
    TF.newResource "aws_kms_alias" $
        KmsAliasResource {
            _name = TF.Nil
            , _name_prefix = TF.Nil
            , _target_key_id = TF.Nil
            , _computed_arn = TF.Compute "arn"
            }

{- | The @aws_kms_key@ AWS resource.

Provides a KMS customer master key.
-}
data KmsKeyResource = KmsKeyResource {
      _deletion_window_in_days :: !(TF.Argument Text)
    {- ^ (Optional) Duration in days after which the key is deleted after destruction of the resource, must be between 7 and 30 days. Defaults to 30 days. -}
    , _description             :: !(TF.Argument Text)
    {- ^ (Optional) The description of the key as viewed in AWS console. -}
    , _enable_key_rotation     :: !(TF.Argument TF.Bool)
    {- ^ (Optional) Specifies whether <http://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html> is enabled. Defaults to false. -}
    , _is_enabled              :: !(TF.Argument TF.Bool)
    {- ^ (Optional) Specifies whether the key is enabled. Defaults to true. -}
    , _key_usage               :: !(TF.Argument Text)
    {- ^ (Optional) Specifies the intended use of the key. Defaults to ENCRYPT_DECRYPT, and only symmetric encryption and decryption are supported. -}
    , _policy                  :: !(TF.Argument Text)
    {- ^ (Optional) A valid policy JSON document. -}
    , _tags                    :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the object. -}
    , _computed_arn            :: !(TF.Attribute Text)
    {- ^ - The Amazon Resource Name (ARN) of the key. -}
    , _computed_key_id         :: !(TF.Attribute Text)
    {- ^ - The globally unique identifier for the key. -}
    } deriving (Show, Eq)

instance TF.ToHCL KmsKeyResource where
    toHCL KmsKeyResource{..} = TF.block $ catMaybes
        [ TF.assign "deletion_window_in_days" <$> TF.argument _deletion_window_in_days
        , TF.assign "description" <$> TF.argument _description
        , TF.assign "enable_key_rotation" <$> TF.argument _enable_key_rotation
        , TF.assign "is_enabled" <$> TF.argument _is_enabled
        , TF.assign "key_usage" <$> TF.argument _key_usage
        , TF.assign "policy" <$> TF.argument _policy
        , TF.assign "tags" <$> TF.argument _tags
        ]

instance HasDeletionWindowInDays KmsKeyResource (TF.Argument Text) where
    deletionWindowInDays f s@KmsKeyResource{..} =
        (\a -> s { _deletion_window_in_days = a } :: KmsKeyResource)
             <$> f _deletion_window_in_days

instance HasDescription KmsKeyResource (TF.Argument Text) where
    description f s@KmsKeyResource{..} =
        (\a -> s { _description = a } :: KmsKeyResource)
             <$> f _description

instance HasEnableKeyRotation KmsKeyResource (TF.Argument TF.Bool) where
    enableKeyRotation f s@KmsKeyResource{..} =
        (\a -> s { _enable_key_rotation = a } :: KmsKeyResource)
             <$> f _enable_key_rotation

instance HasIsEnabled KmsKeyResource (TF.Argument TF.Bool) where
    isEnabled f s@KmsKeyResource{..} =
        (\a -> s { _is_enabled = a } :: KmsKeyResource)
             <$> f _is_enabled

instance HasKeyUsage KmsKeyResource (TF.Argument Text) where
    keyUsage f s@KmsKeyResource{..} =
        (\a -> s { _key_usage = a } :: KmsKeyResource)
             <$> f _key_usage

instance HasPolicy KmsKeyResource (TF.Argument Text) where
    policy f s@KmsKeyResource{..} =
        (\a -> s { _policy = a } :: KmsKeyResource)
             <$> f _policy

instance HasTags KmsKeyResource (TF.Argument TF.Tags) where
    tags f s@KmsKeyResource{..} =
        (\a -> s { _tags = a } :: KmsKeyResource)
             <$> f _tags

instance HasComputedArn KmsKeyResource (TF.Attribute Text) where
    computedArn f s@KmsKeyResource{..} =
        (\a -> s { _computed_arn = a } :: KmsKeyResource)
             <$> f _computed_arn

instance HasComputedKeyId KmsKeyResource (TF.Attribute Text) where
    computedKeyId f s@KmsKeyResource{..} =
        (\a -> s { _computed_key_id = a } :: KmsKeyResource)
             <$> f _computed_key_id

kmsKeyResource :: TF.Resource TF.AWS KmsKeyResource
kmsKeyResource =
    TF.newResource "aws_kms_key" $
        KmsKeyResource {
            _deletion_window_in_days = TF.Nil
            , _description = TF.Nil
            , _enable_key_rotation = TF.Nil
            , _is_enabled = TF.Nil
            , _key_usage = TF.Nil
            , _policy = TF.Nil
            , _tags = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_key_id = TF.Compute "key_id"
            }

{- | The @aws_lambda_alias@ AWS resource.

Creates a Lambda function alias. Creates an alias that points to the
specified Lambda function version. For information about Lambda and how to
use it, see <http://docs.aws.amazon.com/lambda/latest/dg/welcome.html> For
information about function aliases, see
<http://docs.aws.amazon.com/lambda/latest/dg/API_CreateAlias.html> in the
API docs.
-}
data LambdaAliasResource = LambdaAliasResource {
      _description      :: !(TF.Argument Text)
    {- ^ (Optional) Description of the alias. -}
    , _function_name    :: !(TF.Argument Text)
    {- ^ (Required) The function ARN of the Lambda function for which you want to create an alias. -}
    , _function_version :: !(TF.Argument Text)
    {- ^ (Required) Lambda function version for which you are creating the alias. Pattern: @(\$LATEST|[0-9]+)@ . -}
    , _name             :: !(TF.Argument Text)
    {- ^ (Required) Name for the alias you are creating. Pattern: @(?!^[0-9]+$)([a-zA-Z0-9-_]+)@ -}
    , _computed_arn     :: !(TF.Attribute Text)
    {- ^ - The Amazon Resource Name (ARN) identifying your Lambda function alias. -}
    } deriving (Show, Eq)

instance TF.ToHCL LambdaAliasResource where
    toHCL LambdaAliasResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.argument _description
        , TF.assign "function_name" <$> TF.argument _function_name
        , TF.assign "function_version" <$> TF.argument _function_version
        , TF.assign "name" <$> TF.argument _name
        ]

instance HasDescription LambdaAliasResource (TF.Argument Text) where
    description f s@LambdaAliasResource{..} =
        (\a -> s { _description = a } :: LambdaAliasResource)
             <$> f _description

instance HasFunctionName LambdaAliasResource (TF.Argument Text) where
    functionName f s@LambdaAliasResource{..} =
        (\a -> s { _function_name = a } :: LambdaAliasResource)
             <$> f _function_name

instance HasFunctionVersion LambdaAliasResource (TF.Argument Text) where
    functionVersion f s@LambdaAliasResource{..} =
        (\a -> s { _function_version = a } :: LambdaAliasResource)
             <$> f _function_version

instance HasName LambdaAliasResource (TF.Argument Text) where
    name f s@LambdaAliasResource{..} =
        (\a -> s { _name = a } :: LambdaAliasResource)
             <$> f _name

instance HasComputedArn LambdaAliasResource (TF.Attribute Text) where
    computedArn f s@LambdaAliasResource{..} =
        (\a -> s { _computed_arn = a } :: LambdaAliasResource)
             <$> f _computed_arn

lambdaAliasResource :: TF.Resource TF.AWS LambdaAliasResource
lambdaAliasResource =
    TF.newResource "aws_lambda_alias" $
        LambdaAliasResource {
            _description = TF.Nil
            , _function_name = TF.Nil
            , _function_version = TF.Nil
            , _name = TF.Nil
            , _computed_arn = TF.Compute "arn"
            }

{- | The @aws_lambda_event_source_mapping@ AWS resource.

Provides a Lambda event source mapping. This allows Lambda functions to get
events from Kinesis and DynamoDB. For information about Lambda and how to
use it, see <http://docs.aws.amazon.com/lambda/latest/dg/welcome.html> For
information about event source mappings, see
<http://docs.aws.amazon.com/lambda/latest/dg/API_CreateEventSourceMapping.html>
in the API docs.
-}
data LambdaEventSourceMappingResource = LambdaEventSourceMappingResource {
      _batch_size                       :: !(TF.Argument Text)
    {- ^ (Optional) The largest number of records that Lambda will retrieve from your event source at the time of invocation. Defaults to @100@ . -}
    , _enabled                          :: !(TF.Argument TF.Bool)
    {- ^ (Optional) Determines if the mapping will be enabled on creation. Defaults to @true@ . -}
    , _event_source_arn                 :: !(TF.Argument Text)
    {- ^ (Required) The event source ARN - can either be a Kinesis or DynamoDB stream. -}
    , _function_name                    :: !(TF.Argument Text)
    {- ^ (Required) The name or the ARN of the Lambda function that will be subscribing to events. -}
    , _starting_position                :: !(TF.Argument Text)
    {- ^ (Required) The position in the stream where AWS Lambda should start reading. Can be one of either @TRIM_HORIZON@ or @LATEST@ . -}
    , _computed_function_arn            :: !(TF.Attribute Text)
    {- ^ - The the ARN of the Lambda function the event source mapping is sending events to. (Note: this is a computed value that differs from @function_name@ above.) -}
    , _computed_last_modified           :: !(TF.Attribute Text)
    {- ^ - The date this resource was last modified. -}
    , _computed_last_processing_result  :: !(TF.Attribute Text)
    {- ^ - The result of the last AWS Lambda invocation of your Lambda function. -}
    , _computed_state                   :: !(TF.Attribute Text)
    {- ^ - The state of the event source mapping. -}
    , _computed_state_transition_reason :: !(TF.Attribute Text)
    {- ^ - The reason the event source mapping is in its current state. -}
    , _computed_uuid                    :: !(TF.Attribute Text)
    {- ^ - The UUID of the created event source mapping. -}
    } deriving (Show, Eq)

instance TF.ToHCL LambdaEventSourceMappingResource where
    toHCL LambdaEventSourceMappingResource{..} = TF.block $ catMaybes
        [ TF.assign "batch_size" <$> TF.argument _batch_size
        , TF.assign "enabled" <$> TF.argument _enabled
        , TF.assign "event_source_arn" <$> TF.argument _event_source_arn
        , TF.assign "function_name" <$> TF.argument _function_name
        , TF.assign "starting_position" <$> TF.argument _starting_position
        ]

instance HasBatchSize LambdaEventSourceMappingResource (TF.Argument Text) where
    batchSize f s@LambdaEventSourceMappingResource{..} =
        (\a -> s { _batch_size = a } :: LambdaEventSourceMappingResource)
             <$> f _batch_size

instance HasEnabled LambdaEventSourceMappingResource (TF.Argument TF.Bool) where
    enabled f s@LambdaEventSourceMappingResource{..} =
        (\a -> s { _enabled = a } :: LambdaEventSourceMappingResource)
             <$> f _enabled

instance HasEventSourceArn LambdaEventSourceMappingResource (TF.Argument Text) where
    eventSourceArn f s@LambdaEventSourceMappingResource{..} =
        (\a -> s { _event_source_arn = a } :: LambdaEventSourceMappingResource)
             <$> f _event_source_arn

instance HasFunctionName LambdaEventSourceMappingResource (TF.Argument Text) where
    functionName f s@LambdaEventSourceMappingResource{..} =
        (\a -> s { _function_name = a } :: LambdaEventSourceMappingResource)
             <$> f _function_name

instance HasStartingPosition LambdaEventSourceMappingResource (TF.Argument Text) where
    startingPosition f s@LambdaEventSourceMappingResource{..} =
        (\a -> s { _starting_position = a } :: LambdaEventSourceMappingResource)
             <$> f _starting_position

instance HasComputedFunctionArn LambdaEventSourceMappingResource (TF.Attribute Text) where
    computedFunctionArn f s@LambdaEventSourceMappingResource{..} =
        (\a -> s { _computed_function_arn = a } :: LambdaEventSourceMappingResource)
             <$> f _computed_function_arn

instance HasComputedLastModified LambdaEventSourceMappingResource (TF.Attribute Text) where
    computedLastModified f s@LambdaEventSourceMappingResource{..} =
        (\a -> s { _computed_last_modified = a } :: LambdaEventSourceMappingResource)
             <$> f _computed_last_modified

instance HasComputedLastProcessingResult LambdaEventSourceMappingResource (TF.Attribute Text) where
    computedLastProcessingResult f s@LambdaEventSourceMappingResource{..} =
        (\a -> s { _computed_last_processing_result = a } :: LambdaEventSourceMappingResource)
             <$> f _computed_last_processing_result

instance HasComputedState LambdaEventSourceMappingResource (TF.Attribute Text) where
    computedState f s@LambdaEventSourceMappingResource{..} =
        (\a -> s { _computed_state = a } :: LambdaEventSourceMappingResource)
             <$> f _computed_state

instance HasComputedStateTransitionReason LambdaEventSourceMappingResource (TF.Attribute Text) where
    computedStateTransitionReason f s@LambdaEventSourceMappingResource{..} =
        (\a -> s { _computed_state_transition_reason = a } :: LambdaEventSourceMappingResource)
             <$> f _computed_state_transition_reason

instance HasComputedUuid LambdaEventSourceMappingResource (TF.Attribute Text) where
    computedUuid f s@LambdaEventSourceMappingResource{..} =
        (\a -> s { _computed_uuid = a } :: LambdaEventSourceMappingResource)
             <$> f _computed_uuid

lambdaEventSourceMappingResource :: TF.Resource TF.AWS LambdaEventSourceMappingResource
lambdaEventSourceMappingResource =
    TF.newResource "aws_lambda_event_source_mapping" $
        LambdaEventSourceMappingResource {
            _batch_size = TF.Nil
            , _enabled = TF.Nil
            , _event_source_arn = TF.Nil
            , _function_name = TF.Nil
            , _starting_position = TF.Nil
            , _computed_function_arn = TF.Compute "function_arn"
            , _computed_last_modified = TF.Compute "last_modified"
            , _computed_last_processing_result = TF.Compute "last_processing_result"
            , _computed_state = TF.Compute "state"
            , _computed_state_transition_reason = TF.Compute "state_transition_reason"
            , _computed_uuid = TF.Compute "uuid"
            }

{- | The @aws_lambda_function@ AWS resource.

Provides a Lambda Function resource. Lambda allows you to trigger execution
of code in response to events in AWS. The Lambda Function itself includes
source code and runtime configuration. For information about Lambda and how
to use it, see <https://docs.aws.amazon.com/lambda/latest/dg/welcome.html>
-}
data LambdaFunctionResource = LambdaFunctionResource {
      _dead_letter_config             :: !(TF.Argument Text)
    {- ^ (Optional) Nested block to configure the function's dead letter queue . See details below. -}
    , _description                    :: !(TF.Argument Text)
    {- ^ (Optional) Description of what your Lambda Function does. -}
    , _environment                    :: !(TF.Argument Text)
    {- ^ (Optional) The Lambda environment's configuration settings. Fields documented below. -}
    , _filename                       :: !(TF.Argument Text)
    {- ^ (Optional) The path to the function's deployment package within the local filesystem. If defined, The @s3_@ -prefixed options cannot be used. -}
    , _function_name                  :: !(TF.Argument Text)
    {- ^ (Required) A unique name for your Lambda Function. -}
    , _handler                        :: !(TF.Argument Text)
    {- ^ (Required) The function <https://docs.aws.amazon.com/lambda/latest/dg/walkthrough-custom-events-create-test-function.html> in your code. -}
    , _kms_key_arn                    :: !(TF.Argument Text)
    {- ^ (Optional) The ARN for the KMS encryption key. -}
    , _memory_size                    :: !(TF.Argument Text)
    {- ^ (Optional) Amount of memory in MB your Lambda Function can use at runtime. Defaults to @128@ . See <https://docs.aws.amazon.com/lambda/latest/dg/limits.html> -}
    , _publish                        :: !(TF.Argument Text)
    {- ^ (Optional) Whether to publish creation/change as new Lambda Function Version. Defaults to @false@ . -}
    , _reserved_concurrent_executions :: !(TF.Argument Text)
    {- ^ (Optional) The amount of reserved concurrent executions for this lambda function. Defaults to Unreserved Concurrency Limits. See <https://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html> -}
    , _role                           :: !(TF.Argument Text)
    {- ^ (Required) IAM role attached to the Lambda Function. This governs both who / what can invoke your Lambda Function, as well as what resources our Lambda Function has access to. See <https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html> for more details. -}
    , _runtime                        :: !(TF.Argument Text)
    {- ^ (Required) See <https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime> for valid values. -}
    , _s3_bucket                      :: !(TF.Argument Text)
    {- ^ (Optional) The S3 bucket location containing the function's deployment package. Conflicts with @filename@ . -}
    , _s3_key                         :: !(TF.Argument Text)
    {- ^ (Optional) The S3 key of an object containing the function's deployment package. Conflicts with @filename@ . -}
    , _s3_object_version              :: !(TF.Argument Text)
    {- ^ (Optional) The object version containing the function's deployment package. Conflicts with @filename@ . -}
    , _source_code_hash               :: !(TF.Argument Text)
    {- ^ (Optional) Used to trigger updates. Must be set to a base64-encoded SHA256 hash of the package file specified with either @filename@ or @s3_key@ . The usual way to set this is @${base64sha256(file("file.zip"))}@ , where "file.zip" is the local filename of the lambda function source archive. -}
    , _tags                           :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the object. -}
    , _timeout                        :: !(TF.Argument Text)
    {- ^ (Optional) The amount of time your Lambda Function has to run in seconds. Defaults to @3@ . See <https://docs.aws.amazon.com/lambda/latest/dg/limits.html> -}
    , _vpc_config                     :: !(TF.Argument Text)
    {- ^ (Optional) Provide this to allow your function to access your VPC. Fields documented below. See <http://docs.aws.amazon.com/lambda/latest/dg/vpc.html> -}
    , _computed_arn                   :: !(TF.Attribute Text)
    {- ^ - The Amazon Resource Name (ARN) identifying your Lambda Function. -}
    , _computed_invoke_arn            :: !(TF.Attribute Text)
    {- ^ - The ARN to be used for invoking Lambda Function from API Gateway - to be used in </docs/providers/aws/r/api_gateway_integration.html> 's @uri@ -}
    , _computed_kms_key_arn           :: !(TF.Attribute Text)
    {- ^ - (Optional) The ARN for the KMS encryption key. -}
    , _computed_last_modified         :: !(TF.Attribute Text)
    {- ^ - The date this resource was last modified. -}
    , _computed_qualified_arn         :: !(TF.Attribute Text)
    {- ^ - The Amazon Resource Name (ARN) identifying your Lambda Function Version (if versioning is enabled via @publish = true@ ). -}
    , _computed_source_code_hash      :: !(TF.Attribute Text)
    {- ^ - Base64-encoded representation of raw SHA-256 sum of the zip file provided either via @filename@ or @s3_*@ parameters. -}
    , _computed_version               :: !(TF.Attribute Text)
    {- ^ - Latest published version of your Lambda Function. -}
    } deriving (Show, Eq)

instance TF.ToHCL LambdaFunctionResource where
    toHCL LambdaFunctionResource{..} = TF.block $ catMaybes
        [ TF.assign "dead_letter_config" <$> TF.argument _dead_letter_config
        , TF.assign "description" <$> TF.argument _description
        , TF.assign "environment" <$> TF.argument _environment
        , TF.assign "filename" <$> TF.argument _filename
        , TF.assign "function_name" <$> TF.argument _function_name
        , TF.assign "handler" <$> TF.argument _handler
        , TF.assign "kms_key_arn" <$> TF.argument _kms_key_arn
        , TF.assign "memory_size" <$> TF.argument _memory_size
        , TF.assign "publish" <$> TF.argument _publish
        , TF.assign "reserved_concurrent_executions" <$> TF.argument _reserved_concurrent_executions
        , TF.assign "role" <$> TF.argument _role
        , TF.assign "runtime" <$> TF.argument _runtime
        , TF.assign "s3_bucket" <$> TF.argument _s3_bucket
        , TF.assign "s3_key" <$> TF.argument _s3_key
        , TF.assign "s3_object_version" <$> TF.argument _s3_object_version
        , TF.assign "source_code_hash" <$> TF.argument _source_code_hash
        , TF.assign "tags" <$> TF.argument _tags
        , TF.assign "timeout" <$> TF.argument _timeout
        , TF.assign "vpc_config" <$> TF.argument _vpc_config
        ]

instance HasDeadLetterConfig LambdaFunctionResource (TF.Argument Text) where
    deadLetterConfig f s@LambdaFunctionResource{..} =
        (\a -> s { _dead_letter_config = a } :: LambdaFunctionResource)
             <$> f _dead_letter_config

instance HasDescription LambdaFunctionResource (TF.Argument Text) where
    description f s@LambdaFunctionResource{..} =
        (\a -> s { _description = a } :: LambdaFunctionResource)
             <$> f _description

instance HasEnvironment LambdaFunctionResource (TF.Argument Text) where
    environment f s@LambdaFunctionResource{..} =
        (\a -> s { _environment = a } :: LambdaFunctionResource)
             <$> f _environment

instance HasFilename LambdaFunctionResource (TF.Argument Text) where
    filename f s@LambdaFunctionResource{..} =
        (\a -> s { _filename = a } :: LambdaFunctionResource)
             <$> f _filename

instance HasFunctionName LambdaFunctionResource (TF.Argument Text) where
    functionName f s@LambdaFunctionResource{..} =
        (\a -> s { _function_name = a } :: LambdaFunctionResource)
             <$> f _function_name

instance HasHandler LambdaFunctionResource (TF.Argument Text) where
    handler f s@LambdaFunctionResource{..} =
        (\a -> s { _handler = a } :: LambdaFunctionResource)
             <$> f _handler

instance HasKmsKeyArn LambdaFunctionResource (TF.Argument Text) where
    kmsKeyArn f s@LambdaFunctionResource{..} =
        (\a -> s { _kms_key_arn = a } :: LambdaFunctionResource)
             <$> f _kms_key_arn

instance HasMemorySize LambdaFunctionResource (TF.Argument Text) where
    memorySize f s@LambdaFunctionResource{..} =
        (\a -> s { _memory_size = a } :: LambdaFunctionResource)
             <$> f _memory_size

instance HasPublish LambdaFunctionResource (TF.Argument Text) where
    publish f s@LambdaFunctionResource{..} =
        (\a -> s { _publish = a } :: LambdaFunctionResource)
             <$> f _publish

instance HasReservedConcurrentExecutions LambdaFunctionResource (TF.Argument Text) where
    reservedConcurrentExecutions f s@LambdaFunctionResource{..} =
        (\a -> s { _reserved_concurrent_executions = a } :: LambdaFunctionResource)
             <$> f _reserved_concurrent_executions

instance HasRole LambdaFunctionResource (TF.Argument Text) where
    role f s@LambdaFunctionResource{..} =
        (\a -> s { _role = a } :: LambdaFunctionResource)
             <$> f _role

instance HasRuntime LambdaFunctionResource (TF.Argument Text) where
    runtime f s@LambdaFunctionResource{..} =
        (\a -> s { _runtime = a } :: LambdaFunctionResource)
             <$> f _runtime

instance HasS3Bucket LambdaFunctionResource (TF.Argument Text) where
    s3Bucket f s@LambdaFunctionResource{..} =
        (\a -> s { _s3_bucket = a } :: LambdaFunctionResource)
             <$> f _s3_bucket

instance HasS3Key LambdaFunctionResource (TF.Argument Text) where
    s3Key f s@LambdaFunctionResource{..} =
        (\a -> s { _s3_key = a } :: LambdaFunctionResource)
             <$> f _s3_key

instance HasS3ObjectVersion LambdaFunctionResource (TF.Argument Text) where
    s3ObjectVersion f s@LambdaFunctionResource{..} =
        (\a -> s { _s3_object_version = a } :: LambdaFunctionResource)
             <$> f _s3_object_version

instance HasSourceCodeHash LambdaFunctionResource (TF.Argument Text) where
    sourceCodeHash f s@LambdaFunctionResource{..} =
        (\a -> s { _source_code_hash = a } :: LambdaFunctionResource)
             <$> f _source_code_hash

instance HasTags LambdaFunctionResource (TF.Argument TF.Tags) where
    tags f s@LambdaFunctionResource{..} =
        (\a -> s { _tags = a } :: LambdaFunctionResource)
             <$> f _tags

instance HasTimeout LambdaFunctionResource (TF.Argument Text) where
    timeout f s@LambdaFunctionResource{..} =
        (\a -> s { _timeout = a } :: LambdaFunctionResource)
             <$> f _timeout

instance HasVpcConfig LambdaFunctionResource (TF.Argument Text) where
    vpcConfig f s@LambdaFunctionResource{..} =
        (\a -> s { _vpc_config = a } :: LambdaFunctionResource)
             <$> f _vpc_config

instance HasComputedArn LambdaFunctionResource (TF.Attribute Text) where
    computedArn f s@LambdaFunctionResource{..} =
        (\a -> s { _computed_arn = a } :: LambdaFunctionResource)
             <$> f _computed_arn

instance HasComputedInvokeArn LambdaFunctionResource (TF.Attribute Text) where
    computedInvokeArn f s@LambdaFunctionResource{..} =
        (\a -> s { _computed_invoke_arn = a } :: LambdaFunctionResource)
             <$> f _computed_invoke_arn

instance HasComputedKmsKeyArn LambdaFunctionResource (TF.Attribute Text) where
    computedKmsKeyArn f s@LambdaFunctionResource{..} =
        (\a -> s { _computed_kms_key_arn = a } :: LambdaFunctionResource)
             <$> f _computed_kms_key_arn

instance HasComputedLastModified LambdaFunctionResource (TF.Attribute Text) where
    computedLastModified f s@LambdaFunctionResource{..} =
        (\a -> s { _computed_last_modified = a } :: LambdaFunctionResource)
             <$> f _computed_last_modified

instance HasComputedQualifiedArn LambdaFunctionResource (TF.Attribute Text) where
    computedQualifiedArn f s@LambdaFunctionResource{..} =
        (\a -> s { _computed_qualified_arn = a } :: LambdaFunctionResource)
             <$> f _computed_qualified_arn

instance HasComputedSourceCodeHash LambdaFunctionResource (TF.Attribute Text) where
    computedSourceCodeHash f s@LambdaFunctionResource{..} =
        (\a -> s { _computed_source_code_hash = a } :: LambdaFunctionResource)
             <$> f _computed_source_code_hash

instance HasComputedVersion LambdaFunctionResource (TF.Attribute Text) where
    computedVersion f s@LambdaFunctionResource{..} =
        (\a -> s { _computed_version = a } :: LambdaFunctionResource)
             <$> f _computed_version

lambdaFunctionResource :: TF.Resource TF.AWS LambdaFunctionResource
lambdaFunctionResource =
    TF.newResource "aws_lambda_function" $
        LambdaFunctionResource {
            _dead_letter_config = TF.Nil
            , _description = TF.Nil
            , _environment = TF.Nil
            , _filename = TF.Nil
            , _function_name = TF.Nil
            , _handler = TF.Nil
            , _kms_key_arn = TF.Nil
            , _memory_size = TF.Nil
            , _publish = TF.Nil
            , _reserved_concurrent_executions = TF.Nil
            , _role = TF.Nil
            , _runtime = TF.Nil
            , _s3_bucket = TF.Nil
            , _s3_key = TF.Nil
            , _s3_object_version = TF.Nil
            , _source_code_hash = TF.Nil
            , _tags = TF.Nil
            , _timeout = TF.Nil
            , _vpc_config = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_invoke_arn = TF.Compute "invoke_arn"
            , _computed_kms_key_arn = TF.Compute "kms_key_arn"
            , _computed_last_modified = TF.Compute "last_modified"
            , _computed_qualified_arn = TF.Compute "qualified_arn"
            , _computed_source_code_hash = TF.Compute "source_code_hash"
            , _computed_version = TF.Compute "version"
            }

{- | The @aws_lambda_permission@ AWS resource.

Creates a Lambda permission to allow external sources invoking the Lambda
function (e.g. CloudWatch Event Rule, SNS or S3).
-}
data LambdaPermissionResource = LambdaPermissionResource {
      _action         :: !(TF.Argument Text)
    {- ^ (Required) The AWS Lambda action you want to allow in this statement. (e.g. @lambda:InvokeFunction@ ) -}
    , _function_name  :: !(TF.Argument Text)
    {- ^ (Required) Name of the Lambda function whose resource policy you are updating -}
    , _principal      :: !(TF.Argument Text)
    {- ^ (Required) The principal who is getting this permission. e.g. @s3.amazonaws.com@ , an AWS account ID, or any valid AWS service principal such as @events.amazonaws.com@ or @sns.amazonaws.com@ . -}
    , _qualifier      :: !(TF.Argument Text)
    {- ^ (Optional) Query parameter to specify function version or alias name. The permission will then apply to the specific qualified ARN. e.g. @arn:aws:lambda:aws-region:acct-id:function:function-name:2@ -}
    , _source_account :: !(TF.Argument Text)
    {- ^ (Optional) The AWS account ID (without a hyphen) of the source owner. -}
    , _source_arn     :: !(TF.Argument Text)
    {- ^ (Optional) When granting Amazon S3 or CloudWatch Events permission to invoke your function, you should specify this field with the Amazon Resource Name (ARN) for the S3 Bucket or CloudWatch Events Rule as its value.  This ensures that only events generated from the specified bucket or rule can invoke the function. API Gateway ARNs have a unique structure described <http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-control-access-using-iam-policies-to-invoke-api.html> . -}
    , _statement_id   :: !(TF.Argument Text)
    {- ^ (Required) A unique statement identifier. -}
    } deriving (Show, Eq)

instance TF.ToHCL LambdaPermissionResource where
    toHCL LambdaPermissionResource{..} = TF.block $ catMaybes
        [ TF.assign "action" <$> TF.argument _action
        , TF.assign "function_name" <$> TF.argument _function_name
        , TF.assign "principal" <$> TF.argument _principal
        , TF.assign "qualifier" <$> TF.argument _qualifier
        , TF.assign "source_account" <$> TF.argument _source_account
        , TF.assign "source_arn" <$> TF.argument _source_arn
        , TF.assign "statement_id" <$> TF.argument _statement_id
        ]

instance HasAction LambdaPermissionResource (TF.Argument Text) where
    action f s@LambdaPermissionResource{..} =
        (\a -> s { _action = a } :: LambdaPermissionResource)
             <$> f _action

instance HasFunctionName LambdaPermissionResource (TF.Argument Text) where
    functionName f s@LambdaPermissionResource{..} =
        (\a -> s { _function_name = a } :: LambdaPermissionResource)
             <$> f _function_name

instance HasPrincipal LambdaPermissionResource (TF.Argument Text) where
    principal f s@LambdaPermissionResource{..} =
        (\a -> s { _principal = a } :: LambdaPermissionResource)
             <$> f _principal

instance HasQualifier LambdaPermissionResource (TF.Argument Text) where
    qualifier f s@LambdaPermissionResource{..} =
        (\a -> s { _qualifier = a } :: LambdaPermissionResource)
             <$> f _qualifier

instance HasSourceAccount LambdaPermissionResource (TF.Argument Text) where
    sourceAccount f s@LambdaPermissionResource{..} =
        (\a -> s { _source_account = a } :: LambdaPermissionResource)
             <$> f _source_account

instance HasSourceArn LambdaPermissionResource (TF.Argument Text) where
    sourceArn f s@LambdaPermissionResource{..} =
        (\a -> s { _source_arn = a } :: LambdaPermissionResource)
             <$> f _source_arn

instance HasStatementId LambdaPermissionResource (TF.Argument Text) where
    statementId f s@LambdaPermissionResource{..} =
        (\a -> s { _statement_id = a } :: LambdaPermissionResource)
             <$> f _statement_id

lambdaPermissionResource :: TF.Resource TF.AWS LambdaPermissionResource
lambdaPermissionResource =
    TF.newResource "aws_lambda_permission" $
        LambdaPermissionResource {
            _action = TF.Nil
            , _function_name = TF.Nil
            , _principal = TF.Nil
            , _qualifier = TF.Nil
            , _source_account = TF.Nil
            , _source_arn = TF.Nil
            , _statement_id = TF.Nil
            }

{- | The @aws_launch_configuration@ AWS resource.

Provides a resource to create a new launch configuration, used for
autoscaling groups.
-}
data LaunchConfigurationResource = LaunchConfigurationResource {
      _associate_public_ip_address      :: !(TF.Argument Text)
    {- ^ (Optional) Associate a public ip address with an instance in a VPC. -}
    , _ebs_block_device                 :: !(TF.Argument Text)
    {- ^ (Optional) Additional EBS block devices to attach to the instance.  See <#block-devices> below for details. -}
    , _ebs_optimized                    :: !(TF.Argument Text)
    {- ^ (Optional) If true, the launched EC2 instance will be EBS-optimized. -}
    , _enable_monitoring                :: !(TF.Argument TF.Bool)
    {- ^ (Optional) Enables/disables detailed monitoring. This is enabled by default. -}
    , _ephemeral_block_device           :: !(TF.Argument Text)
    {- ^ (Optional) Customize Ephemeral (also known as "Instance Store") volumes on the instance. See <#block-devices> below for details. -}
    , _iam_instance_profile             :: !(TF.Argument Text)
    {- ^ (Optional) The IAM instance profile to associate with launched instances. -}
    , _image_id                         :: !(TF.Argument Text)
    {- ^ (Required) The EC2 image ID to launch. -}
    , _instance_type                    :: !(TF.Argument Text)
    {- ^ (Required) The size of instance to launch. -}
    , _key_name                         :: !(TF.Argument Text)
    {- ^ (Optional) The key name that should be used for the instance. -}
    , _name                             :: !(TF.Argument Text)
    {- ^ (Optional) The name of the launch configuration. If you leave this blank, Terraform will auto-generate a unique name. -}
    , _name_prefix                      :: !(TF.Argument Text)
    {- ^ (Optional) Creates a unique name beginning with the specified prefix. Conflicts with @name@ . -}
    , _placement_tenancy                :: !(TF.Argument Text)
    {- ^ (Optional) The tenancy of the instance. Valid values are @"default"@ or @"dedicated"@ , see <http://docs.aws.amazon.com/AutoScaling/latest/APIReference/API_CreateLaunchConfiguration.html> for more details -}
    , _root_block_device                :: !(TF.Argument Text)
    {- ^ (Optional) Customize details about the root block device of the instance. See <#block-devices> below for details. -}
    , _security_groups                  :: !(TF.Argument Text)
    {- ^ (Optional) A list of associated security group IDS. -}
    , _spot_price                       :: !(TF.Argument Text)
    {- ^ (Optional) The price to use for reserving spot instances. -}
    , _user_data                        :: !(TF.Argument Text)
    {- ^ (Optional) The user data to provide when launching the instance. -}
    , _vpc_classic_link_id              :: !(TF.Argument Text)
    {- ^ (Optional) The ID of a ClassicLink-enabled VPC. Only applies to EC2-Classic instances. (eg. @vpc-2730681a@ ) -}
    , _vpc_classic_link_security_groups :: !(TF.Argument Text)
    {- ^ (Optional) The IDs of one or more security groups for the specified ClassicLink-enabled VPC (eg. @sg-46ae3d11@ ). -}
    } deriving (Show, Eq)

instance TF.ToHCL LaunchConfigurationResource where
    toHCL LaunchConfigurationResource{..} = TF.block $ catMaybes
        [ TF.assign "associate_public_ip_address" <$> TF.argument _associate_public_ip_address
        , TF.assign "ebs_block_device" <$> TF.argument _ebs_block_device
        , TF.assign "ebs_optimized" <$> TF.argument _ebs_optimized
        , TF.assign "enable_monitoring" <$> TF.argument _enable_monitoring
        , TF.assign "ephemeral_block_device" <$> TF.argument _ephemeral_block_device
        , TF.assign "iam_instance_profile" <$> TF.argument _iam_instance_profile
        , TF.assign "image_id" <$> TF.argument _image_id
        , TF.assign "instance_type" <$> TF.argument _instance_type
        , TF.assign "key_name" <$> TF.argument _key_name
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "name_prefix" <$> TF.argument _name_prefix
        , TF.assign "placement_tenancy" <$> TF.argument _placement_tenancy
        , TF.assign "root_block_device" <$> TF.argument _root_block_device
        , TF.assign "security_groups" <$> TF.argument _security_groups
        , TF.assign "spot_price" <$> TF.argument _spot_price
        , TF.assign "user_data" <$> TF.argument _user_data
        , TF.assign "vpc_classic_link_id" <$> TF.argument _vpc_classic_link_id
        , TF.assign "vpc_classic_link_security_groups" <$> TF.argument _vpc_classic_link_security_groups
        ]

instance HasAssociatePublicIpAddress LaunchConfigurationResource (TF.Argument Text) where
    associatePublicIpAddress f s@LaunchConfigurationResource{..} =
        (\a -> s { _associate_public_ip_address = a } :: LaunchConfigurationResource)
             <$> f _associate_public_ip_address

instance HasEbsBlockDevice LaunchConfigurationResource (TF.Argument Text) where
    ebsBlockDevice f s@LaunchConfigurationResource{..} =
        (\a -> s { _ebs_block_device = a } :: LaunchConfigurationResource)
             <$> f _ebs_block_device

instance HasEbsOptimized LaunchConfigurationResource (TF.Argument Text) where
    ebsOptimized f s@LaunchConfigurationResource{..} =
        (\a -> s { _ebs_optimized = a } :: LaunchConfigurationResource)
             <$> f _ebs_optimized

instance HasEnableMonitoring LaunchConfigurationResource (TF.Argument TF.Bool) where
    enableMonitoring f s@LaunchConfigurationResource{..} =
        (\a -> s { _enable_monitoring = a } :: LaunchConfigurationResource)
             <$> f _enable_monitoring

instance HasEphemeralBlockDevice LaunchConfigurationResource (TF.Argument Text) where
    ephemeralBlockDevice f s@LaunchConfigurationResource{..} =
        (\a -> s { _ephemeral_block_device = a } :: LaunchConfigurationResource)
             <$> f _ephemeral_block_device

instance HasIamInstanceProfile LaunchConfigurationResource (TF.Argument Text) where
    iamInstanceProfile f s@LaunchConfigurationResource{..} =
        (\a -> s { _iam_instance_profile = a } :: LaunchConfigurationResource)
             <$> f _iam_instance_profile

instance HasImageId LaunchConfigurationResource (TF.Argument Text) where
    imageId f s@LaunchConfigurationResource{..} =
        (\a -> s { _image_id = a } :: LaunchConfigurationResource)
             <$> f _image_id

instance HasInstanceType LaunchConfigurationResource (TF.Argument Text) where
    instanceType f s@LaunchConfigurationResource{..} =
        (\a -> s { _instance_type = a } :: LaunchConfigurationResource)
             <$> f _instance_type

instance HasKeyName LaunchConfigurationResource (TF.Argument Text) where
    keyName f s@LaunchConfigurationResource{..} =
        (\a -> s { _key_name = a } :: LaunchConfigurationResource)
             <$> f _key_name

instance HasName LaunchConfigurationResource (TF.Argument Text) where
    name f s@LaunchConfigurationResource{..} =
        (\a -> s { _name = a } :: LaunchConfigurationResource)
             <$> f _name

instance HasNamePrefix LaunchConfigurationResource (TF.Argument Text) where
    namePrefix f s@LaunchConfigurationResource{..} =
        (\a -> s { _name_prefix = a } :: LaunchConfigurationResource)
             <$> f _name_prefix

instance HasPlacementTenancy LaunchConfigurationResource (TF.Argument Text) where
    placementTenancy f s@LaunchConfigurationResource{..} =
        (\a -> s { _placement_tenancy = a } :: LaunchConfigurationResource)
             <$> f _placement_tenancy

instance HasRootBlockDevice LaunchConfigurationResource (TF.Argument Text) where
    rootBlockDevice f s@LaunchConfigurationResource{..} =
        (\a -> s { _root_block_device = a } :: LaunchConfigurationResource)
             <$> f _root_block_device

instance HasSecurityGroups LaunchConfigurationResource (TF.Argument Text) where
    securityGroups f s@LaunchConfigurationResource{..} =
        (\a -> s { _security_groups = a } :: LaunchConfigurationResource)
             <$> f _security_groups

instance HasSpotPrice LaunchConfigurationResource (TF.Argument Text) where
    spotPrice f s@LaunchConfigurationResource{..} =
        (\a -> s { _spot_price = a } :: LaunchConfigurationResource)
             <$> f _spot_price

instance HasUserData LaunchConfigurationResource (TF.Argument Text) where
    userData f s@LaunchConfigurationResource{..} =
        (\a -> s { _user_data = a } :: LaunchConfigurationResource)
             <$> f _user_data

instance HasVpcClassicLinkId LaunchConfigurationResource (TF.Argument Text) where
    vpcClassicLinkId f s@LaunchConfigurationResource{..} =
        (\a -> s { _vpc_classic_link_id = a } :: LaunchConfigurationResource)
             <$> f _vpc_classic_link_id

instance HasVpcClassicLinkSecurityGroups LaunchConfigurationResource (TF.Argument Text) where
    vpcClassicLinkSecurityGroups f s@LaunchConfigurationResource{..} =
        (\a -> s { _vpc_classic_link_security_groups = a } :: LaunchConfigurationResource)
             <$> f _vpc_classic_link_security_groups

launchConfigurationResource :: TF.Resource TF.AWS LaunchConfigurationResource
launchConfigurationResource =
    TF.newResource "aws_launch_configuration" $
        LaunchConfigurationResource {
            _associate_public_ip_address = TF.Nil
            , _ebs_block_device = TF.Nil
            , _ebs_optimized = TF.Nil
            , _enable_monitoring = TF.Nil
            , _ephemeral_block_device = TF.Nil
            , _iam_instance_profile = TF.Nil
            , _image_id = TF.Nil
            , _instance_type = TF.Nil
            , _key_name = TF.Nil
            , _name = TF.Nil
            , _name_prefix = TF.Nil
            , _placement_tenancy = TF.Nil
            , _root_block_device = TF.Nil
            , _security_groups = TF.Nil
            , _spot_price = TF.Nil
            , _user_data = TF.Nil
            , _vpc_classic_link_id = TF.Nil
            , _vpc_classic_link_security_groups = TF.Nil
            }

{- | The @aws_lb_cookie_stickiness_policy@ AWS resource.

Provides a load balancer cookie stickiness policy, which allows an ELB to
control the sticky session lifetime of the browser.
-}
data LbCookieStickinessPolicyResource = LbCookieStickinessPolicyResource {
      _cookie_expiration_period          :: !(TF.Argument Text)
    {- ^ (Optional) The time period after which the session cookie should be considered stale, expressed in seconds. -}
    , _lb_port                           :: !(TF.Argument TF.Word16)
    {- ^ (Required) The load balancer port to which the policy should be applied. This must be an active listener on the load balancer. -}
    , _load_balancer                     :: !(TF.Argument Text)
    {- ^ (Required) The load balancer to which the policy should be attached. -}
    , _name                              :: !(TF.Argument Text)
    {- ^ (Required) The name of the stickiness policy. -}
    , _computed_cookie_expiration_period :: !(TF.Attribute Text)
    {- ^ - The time period after which the session cookie is considered stale, expressed in seconds. -}
    , _computed_id                       :: !(TF.Attribute Text)
    {- ^ - The ID of the policy. -}
    , _computed_lb_port                  :: !(TF.Attribute TF.Word16)
    {- ^ - The load balancer port to which the policy is applied. -}
    , _computed_load_balancer            :: !(TF.Attribute Text)
    {- ^ - The load balancer to which the policy is attached. -}
    , _computed_name                     :: !(TF.Attribute Text)
    {- ^ - The name of the stickiness policy. -}
    } deriving (Show, Eq)

instance TF.ToHCL LbCookieStickinessPolicyResource where
    toHCL LbCookieStickinessPolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "cookie_expiration_period" <$> TF.argument _cookie_expiration_period
        , TF.assign "lb_port" <$> TF.argument _lb_port
        , TF.assign "load_balancer" <$> TF.argument _load_balancer
        , TF.assign "name" <$> TF.argument _name
        ]

instance HasCookieExpirationPeriod LbCookieStickinessPolicyResource (TF.Argument Text) where
    cookieExpirationPeriod f s@LbCookieStickinessPolicyResource{..} =
        (\a -> s { _cookie_expiration_period = a } :: LbCookieStickinessPolicyResource)
             <$> f _cookie_expiration_period

instance HasLbPort LbCookieStickinessPolicyResource (TF.Argument TF.Word16) where
    lbPort f s@LbCookieStickinessPolicyResource{..} =
        (\a -> s { _lb_port = a } :: LbCookieStickinessPolicyResource)
             <$> f _lb_port

instance HasLoadBalancer LbCookieStickinessPolicyResource (TF.Argument Text) where
    loadBalancer f s@LbCookieStickinessPolicyResource{..} =
        (\a -> s { _load_balancer = a } :: LbCookieStickinessPolicyResource)
             <$> f _load_balancer

instance HasName LbCookieStickinessPolicyResource (TF.Argument Text) where
    name f s@LbCookieStickinessPolicyResource{..} =
        (\a -> s { _name = a } :: LbCookieStickinessPolicyResource)
             <$> f _name

instance HasComputedCookieExpirationPeriod LbCookieStickinessPolicyResource (TF.Attribute Text) where
    computedCookieExpirationPeriod f s@LbCookieStickinessPolicyResource{..} =
        (\a -> s { _computed_cookie_expiration_period = a } :: LbCookieStickinessPolicyResource)
             <$> f _computed_cookie_expiration_period

instance HasComputedId LbCookieStickinessPolicyResource (TF.Attribute Text) where
    computedId f s@LbCookieStickinessPolicyResource{..} =
        (\a -> s { _computed_id = a } :: LbCookieStickinessPolicyResource)
             <$> f _computed_id

instance HasComputedLbPort LbCookieStickinessPolicyResource (TF.Attribute TF.Word16) where
    computedLbPort f s@LbCookieStickinessPolicyResource{..} =
        (\a -> s { _computed_lb_port = a } :: LbCookieStickinessPolicyResource)
             <$> f _computed_lb_port

instance HasComputedLoadBalancer LbCookieStickinessPolicyResource (TF.Attribute Text) where
    computedLoadBalancer f s@LbCookieStickinessPolicyResource{..} =
        (\a -> s { _computed_load_balancer = a } :: LbCookieStickinessPolicyResource)
             <$> f _computed_load_balancer

instance HasComputedName LbCookieStickinessPolicyResource (TF.Attribute Text) where
    computedName f s@LbCookieStickinessPolicyResource{..} =
        (\a -> s { _computed_name = a } :: LbCookieStickinessPolicyResource)
             <$> f _computed_name

lbCookieStickinessPolicyResource :: TF.Resource TF.AWS LbCookieStickinessPolicyResource
lbCookieStickinessPolicyResource =
    TF.newResource "aws_lb_cookie_stickiness_policy" $
        LbCookieStickinessPolicyResource {
            _cookie_expiration_period = TF.Nil
            , _lb_port = TF.Nil
            , _load_balancer = TF.Nil
            , _name = TF.Nil
            , _computed_cookie_expiration_period = TF.Compute "cookie_expiration_period"
            , _computed_id = TF.Compute "id"
            , _computed_lb_port = TF.Compute "lb_port"
            , _computed_load_balancer = TF.Compute "load_balancer"
            , _computed_name = TF.Compute "name"
            }

{- | The @aws_lb_listener@ AWS resource.

Provides a Load Balancer Listener resource. ~> Note:  @aws_alb_listener@ is
known as @aws_lb_listener@ . The functionality is identical.
-}
data LbListenerResource = LbListenerResource {
      _certificate_arn   :: !(TF.Argument Text)
    {- ^ (Optional) The ARN of the SSL server certificate. Exactly one certificate is required if the protocol is HTTPS. -}
    , _default_action    :: !(TF.Argument Text)
    {- ^ (Required) An Action block. Action blocks are documented below. -}
    , _load_balancer_arn :: !(TF.Argument Text)
    {- ^ (Required, Forces New Resource) The ARN of the load balancer. -}
    , _port              :: !(TF.Argument Text)
    {- ^ (Required) The port on which the load balancer is listening. -}
    , _protocol          :: !(TF.Argument Text)
    {- ^ (Optional) The protocol for connections from clients to the load balancer. Valid values are @TCP@ , @HTTP@ and @HTTPS@ . Defaults to @HTTP@ . -}
    , _ssl_policy        :: !(TF.Argument Text)
    {- ^ (Optional) The name of the SSL Policy for the listener. Required if @protocol@ is @HTTPS@ . -}
    , _computed_arn      :: !(TF.Attribute Text)
    {- ^ - The ARN of the listener (matches @id@ ) -}
    , _computed_id       :: !(TF.Attribute Text)
    {- ^ - The ARN of the listener (matches @arn@ ) -}
    } deriving (Show, Eq)

instance TF.ToHCL LbListenerResource where
    toHCL LbListenerResource{..} = TF.block $ catMaybes
        [ TF.assign "certificate_arn" <$> TF.argument _certificate_arn
        , TF.assign "default_action" <$> TF.argument _default_action
        , TF.assign "load_balancer_arn" <$> TF.argument _load_balancer_arn
        , TF.assign "port" <$> TF.argument _port
        , TF.assign "protocol" <$> TF.argument _protocol
        , TF.assign "ssl_policy" <$> TF.argument _ssl_policy
        ]

instance HasCertificateArn LbListenerResource (TF.Argument Text) where
    certificateArn f s@LbListenerResource{..} =
        (\a -> s { _certificate_arn = a } :: LbListenerResource)
             <$> f _certificate_arn

instance HasDefaultAction LbListenerResource (TF.Argument Text) where
    defaultAction f s@LbListenerResource{..} =
        (\a -> s { _default_action = a } :: LbListenerResource)
             <$> f _default_action

instance HasLoadBalancerArn LbListenerResource (TF.Argument Text) where
    loadBalancerArn f s@LbListenerResource{..} =
        (\a -> s { _load_balancer_arn = a } :: LbListenerResource)
             <$> f _load_balancer_arn

instance HasPort LbListenerResource (TF.Argument Text) where
    port f s@LbListenerResource{..} =
        (\a -> s { _port = a } :: LbListenerResource)
             <$> f _port

instance HasProtocol LbListenerResource (TF.Argument Text) where
    protocol f s@LbListenerResource{..} =
        (\a -> s { _protocol = a } :: LbListenerResource)
             <$> f _protocol

instance HasSslPolicy LbListenerResource (TF.Argument Text) where
    sslPolicy f s@LbListenerResource{..} =
        (\a -> s { _ssl_policy = a } :: LbListenerResource)
             <$> f _ssl_policy

instance HasComputedArn LbListenerResource (TF.Attribute Text) where
    computedArn f s@LbListenerResource{..} =
        (\a -> s { _computed_arn = a } :: LbListenerResource)
             <$> f _computed_arn

instance HasComputedId LbListenerResource (TF.Attribute Text) where
    computedId f s@LbListenerResource{..} =
        (\a -> s { _computed_id = a } :: LbListenerResource)
             <$> f _computed_id

lbListenerResource :: TF.Resource TF.AWS LbListenerResource
lbListenerResource =
    TF.newResource "aws_lb_listener" $
        LbListenerResource {
            _certificate_arn = TF.Nil
            , _default_action = TF.Nil
            , _load_balancer_arn = TF.Nil
            , _port = TF.Nil
            , _protocol = TF.Nil
            , _ssl_policy = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_lb_listener_rule@ AWS resource.

Provides a Load Balancer Listener Rule resource. ~> Note:
@aws_alb_listener_rule@ is known as @aws_lb_listener_rule@ . The
functionality is identical.
-}
data LbListenerRuleResource = LbListenerRuleResource {
      _action       :: !(TF.Argument Text)
    {- ^ (Required) An Action block. Action blocks are documented below. -}
    , _condition    :: !(TF.Argument Text)
    {- ^ (Required) A Condition block. Condition blocks are documented below. -}
    , _listener_arn :: !(TF.Argument Text)
    {- ^ (Required, Forces New Resource) The ARN of the listener to which to attach the rule. -}
    , _priority     :: !(TF.Argument Text)
    {- ^ (Required) The priority for the rule. A listener can't have multiple rules with the same priority. -}
    , _computed_arn :: !(TF.Attribute Text)
    {- ^ - The ARN of the rule (matches @id@ ) -}
    , _computed_id  :: !(TF.Attribute Text)
    {- ^ - The ARN of the rule (matches @arn@ ) -}
    } deriving (Show, Eq)

instance TF.ToHCL LbListenerRuleResource where
    toHCL LbListenerRuleResource{..} = TF.block $ catMaybes
        [ TF.assign "action" <$> TF.argument _action
        , TF.assign "condition" <$> TF.argument _condition
        , TF.assign "listener_arn" <$> TF.argument _listener_arn
        , TF.assign "priority" <$> TF.argument _priority
        ]

instance HasAction LbListenerRuleResource (TF.Argument Text) where
    action f s@LbListenerRuleResource{..} =
        (\a -> s { _action = a } :: LbListenerRuleResource)
             <$> f _action

instance HasCondition LbListenerRuleResource (TF.Argument Text) where
    condition f s@LbListenerRuleResource{..} =
        (\a -> s { _condition = a } :: LbListenerRuleResource)
             <$> f _condition

instance HasListenerArn LbListenerRuleResource (TF.Argument Text) where
    listenerArn f s@LbListenerRuleResource{..} =
        (\a -> s { _listener_arn = a } :: LbListenerRuleResource)
             <$> f _listener_arn

instance HasPriority LbListenerRuleResource (TF.Argument Text) where
    priority f s@LbListenerRuleResource{..} =
        (\a -> s { _priority = a } :: LbListenerRuleResource)
             <$> f _priority

instance HasComputedArn LbListenerRuleResource (TF.Attribute Text) where
    computedArn f s@LbListenerRuleResource{..} =
        (\a -> s { _computed_arn = a } :: LbListenerRuleResource)
             <$> f _computed_arn

instance HasComputedId LbListenerRuleResource (TF.Attribute Text) where
    computedId f s@LbListenerRuleResource{..} =
        (\a -> s { _computed_id = a } :: LbListenerRuleResource)
             <$> f _computed_id

lbListenerRuleResource :: TF.Resource TF.AWS LbListenerRuleResource
lbListenerRuleResource =
    TF.newResource "aws_lb_listener_rule" $
        LbListenerRuleResource {
            _action = TF.Nil
            , _condition = TF.Nil
            , _listener_arn = TF.Nil
            , _priority = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_lb@ AWS resource.

Provides a Load Balancer resource. ~> Note:  @aws_alb@ is known as @aws_lb@
. The functionality is identical.
-}
data LbResource = LbResource {
      _access_logs                       :: !(TF.Argument Text)
    {- ^ (Optional) An Access Logs block. Access Logs documented below. -}
    , _enable_deletion_protection        :: !(TF.Argument TF.Bool)
    {- ^ (Optional) If true, deletion of the load balancer will be disabled via the AWS API. This will prevent Terraform from deleting the load balancer. Defaults to @false@ . -}
    , _idle_timeout                      :: !(TF.Argument Text)
    {- ^ (Optional) The time in seconds that the connection is allowed to be idle. Default: 60. -}
    , _internal                          :: !(TF.Argument Text)
    {- ^ (Optional) If true, the LB will be internal. -}
    , _ip_address_type                   :: !(TF.Argument Text)
    {- ^ (Optional) The type of IP addresses used by the subnets for your load balancer. The possible values are @ipv4@ and @dualstack@ -}
    , _load_balancer_type                :: !(TF.Argument Text)
    {- ^ (Optional) The type of load balancer to create. Possible values are @application@ or @network@ . The default value is @application@ . -}
    , _name                              :: !(TF.Argument Text)
    {- ^ (Optional) The name of the LB. This name must be unique within your AWS account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen. If not specified, Terraform will autogenerate a name beginning with @tf-lb@ . -}
    , _name_prefix                       :: !(TF.Argument Text)
    {- ^ (Optional) Creates a unique name beginning with the specified prefix. Conflicts with @name@ . -}
    , _security_groups                   :: !(TF.Argument Text)
    {- ^ (Optional) A list of security group IDs to assign to the LB. Only valid for Load Balancers of type @application@ . -}
    , _subnet_mapping                    :: !(TF.Argument Text)
    {- ^ (Optional) A subnet mapping block as documented below. -}
    , _subnets                           :: !(TF.Argument Text)
    {- ^ (Optional) A list of subnet IDs to attach to the LB. Subnets cannot be updated for Load Balancers of type @network@ . Changing this value will for load balancers of type @network@ will force a recreation of the resource. -}
    , _tags                              :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _computed_arn                      :: !(TF.Attribute Text)
    {- ^ - The ARN of the load balancer (matches @id@ ). -}
    , _computed_arn_suffix               :: !(TF.Attribute Text)
    {- ^ - The ARN suffix for use with CloudWatch Metrics. -}
    , _computed_canonical_hosted_zone_id :: !(TF.Attribute Text)
    {- ^ - The canonical hosted zone ID of the load balancer. -}
    , _computed_dns_name                 :: !(TF.Attribute Text)
    {- ^ - The DNS name of the load balancer. -}
    , _computed_id                       :: !(TF.Attribute Text)
    {- ^ - The ARN of the load balancer (matches @arn@ ). -}
    , _computed_zone_id                  :: !(TF.Attribute Text)
    {- ^ - The canonical hosted zone ID of the load balancer (to be used in a Route 53 Alias record). -}
    } deriving (Show, Eq)

instance TF.ToHCL LbResource where
    toHCL LbResource{..} = TF.block $ catMaybes
        [ TF.assign "access_logs" <$> TF.argument _access_logs
        , TF.assign "enable_deletion_protection" <$> TF.argument _enable_deletion_protection
        , TF.assign "idle_timeout" <$> TF.argument _idle_timeout
        , TF.assign "internal" <$> TF.argument _internal
        , TF.assign "ip_address_type" <$> TF.argument _ip_address_type
        , TF.assign "load_balancer_type" <$> TF.argument _load_balancer_type
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "name_prefix" <$> TF.argument _name_prefix
        , TF.assign "security_groups" <$> TF.argument _security_groups
        , TF.assign "subnet_mapping" <$> TF.argument _subnet_mapping
        , TF.assign "subnets" <$> TF.argument _subnets
        , TF.assign "tags" <$> TF.argument _tags
        ]

instance HasAccessLogs LbResource (TF.Argument Text) where
    accessLogs f s@LbResource{..} =
        (\a -> s { _access_logs = a } :: LbResource)
             <$> f _access_logs

instance HasEnableDeletionProtection LbResource (TF.Argument TF.Bool) where
    enableDeletionProtection f s@LbResource{..} =
        (\a -> s { _enable_deletion_protection = a } :: LbResource)
             <$> f _enable_deletion_protection

instance HasIdleTimeout LbResource (TF.Argument Text) where
    idleTimeout f s@LbResource{..} =
        (\a -> s { _idle_timeout = a } :: LbResource)
             <$> f _idle_timeout

instance HasInternal LbResource (TF.Argument Text) where
    internal f s@LbResource{..} =
        (\a -> s { _internal = a } :: LbResource)
             <$> f _internal

instance HasIpAddressType LbResource (TF.Argument Text) where
    ipAddressType f s@LbResource{..} =
        (\a -> s { _ip_address_type = a } :: LbResource)
             <$> f _ip_address_type

instance HasLoadBalancerType LbResource (TF.Argument Text) where
    loadBalancerType f s@LbResource{..} =
        (\a -> s { _load_balancer_type = a } :: LbResource)
             <$> f _load_balancer_type

instance HasName LbResource (TF.Argument Text) where
    name f s@LbResource{..} =
        (\a -> s { _name = a } :: LbResource)
             <$> f _name

instance HasNamePrefix LbResource (TF.Argument Text) where
    namePrefix f s@LbResource{..} =
        (\a -> s { _name_prefix = a } :: LbResource)
             <$> f _name_prefix

instance HasSecurityGroups LbResource (TF.Argument Text) where
    securityGroups f s@LbResource{..} =
        (\a -> s { _security_groups = a } :: LbResource)
             <$> f _security_groups

instance HasSubnetMapping LbResource (TF.Argument Text) where
    subnetMapping f s@LbResource{..} =
        (\a -> s { _subnet_mapping = a } :: LbResource)
             <$> f _subnet_mapping

instance HasSubnets LbResource (TF.Argument Text) where
    subnets f s@LbResource{..} =
        (\a -> s { _subnets = a } :: LbResource)
             <$> f _subnets

instance HasTags LbResource (TF.Argument TF.Tags) where
    tags f s@LbResource{..} =
        (\a -> s { _tags = a } :: LbResource)
             <$> f _tags

instance HasComputedArn LbResource (TF.Attribute Text) where
    computedArn f s@LbResource{..} =
        (\a -> s { _computed_arn = a } :: LbResource)
             <$> f _computed_arn

instance HasComputedArnSuffix LbResource (TF.Attribute Text) where
    computedArnSuffix f s@LbResource{..} =
        (\a -> s { _computed_arn_suffix = a } :: LbResource)
             <$> f _computed_arn_suffix

instance HasComputedCanonicalHostedZoneId LbResource (TF.Attribute Text) where
    computedCanonicalHostedZoneId f s@LbResource{..} =
        (\a -> s { _computed_canonical_hosted_zone_id = a } :: LbResource)
             <$> f _computed_canonical_hosted_zone_id

instance HasComputedDnsName LbResource (TF.Attribute Text) where
    computedDnsName f s@LbResource{..} =
        (\a -> s { _computed_dns_name = a } :: LbResource)
             <$> f _computed_dns_name

instance HasComputedId LbResource (TF.Attribute Text) where
    computedId f s@LbResource{..} =
        (\a -> s { _computed_id = a } :: LbResource)
             <$> f _computed_id

instance HasComputedZoneId LbResource (TF.Attribute Text) where
    computedZoneId f s@LbResource{..} =
        (\a -> s { _computed_zone_id = a } :: LbResource)
             <$> f _computed_zone_id

lbResource :: TF.Resource TF.AWS LbResource
lbResource =
    TF.newResource "aws_lb" $
        LbResource {
            _access_logs = TF.Nil
            , _enable_deletion_protection = TF.Nil
            , _idle_timeout = TF.Nil
            , _internal = TF.Nil
            , _ip_address_type = TF.Nil
            , _load_balancer_type = TF.Nil
            , _name = TF.Nil
            , _name_prefix = TF.Nil
            , _security_groups = TF.Nil
            , _subnet_mapping = TF.Nil
            , _subnets = TF.Nil
            , _tags = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_arn_suffix = TF.Compute "arn_suffix"
            , _computed_canonical_hosted_zone_id = TF.Compute "canonical_hosted_zone_id"
            , _computed_dns_name = TF.Compute "dns_name"
            , _computed_id = TF.Compute "id"
            , _computed_zone_id = TF.Compute "zone_id"
            }

{- | The @aws_lb_ssl_negotiation_policy@ AWS resource.

Provides a load balancer SSL negotiation policy, which allows an ELB to
control the ciphers and protocols that are supported during SSL negotiations
between a client and a load balancer.
-}
data LbSslNegotiationPolicyResource = LbSslNegotiationPolicyResource {
      _attribute              :: !(TF.Argument Text)
    {- ^ (Optional) An SSL Negotiation policy attribute. Each has two properties: -}
    , _lb_port                :: !(TF.Argument TF.Word16)
    {- ^ (Required) The load balancer port to which the policy should be applied. This must be an active listener on the load balancer. -}
    , _load_balancer          :: !(TF.Argument Text)
    {- ^ (Required) The load balancer to which the policy should be attached. -}
    , _name                   :: !(TF.Argument Text)
    {- ^ (Required) The name of the SSL negotiation policy. -}
    , _computed_attribute     :: !(TF.Attribute Text)
    {- ^ - The SSL Negotiation policy attributes. -}
    , _computed_id            :: !(TF.Attribute Text)
    {- ^ - The ID of the policy. -}
    , _computed_lb_port       :: !(TF.Attribute TF.Word16)
    {- ^ - The load balancer port to which the policy is applied. -}
    , _computed_load_balancer :: !(TF.Attribute Text)
    {- ^ - The load balancer to which the policy is attached. -}
    , _computed_name          :: !(TF.Attribute Text)
    {- ^ - The name of the stickiness policy. -}
    } deriving (Show, Eq)

instance TF.ToHCL LbSslNegotiationPolicyResource where
    toHCL LbSslNegotiationPolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "attribute" <$> TF.argument _attribute
        , TF.assign "lb_port" <$> TF.argument _lb_port
        , TF.assign "load_balancer" <$> TF.argument _load_balancer
        , TF.assign "name" <$> TF.argument _name
        ]

instance HasAttribute LbSslNegotiationPolicyResource (TF.Argument Text) where
    attribute f s@LbSslNegotiationPolicyResource{..} =
        (\a -> s { _attribute = a } :: LbSslNegotiationPolicyResource)
             <$> f _attribute

instance HasLbPort LbSslNegotiationPolicyResource (TF.Argument TF.Word16) where
    lbPort f s@LbSslNegotiationPolicyResource{..} =
        (\a -> s { _lb_port = a } :: LbSslNegotiationPolicyResource)
             <$> f _lb_port

instance HasLoadBalancer LbSslNegotiationPolicyResource (TF.Argument Text) where
    loadBalancer f s@LbSslNegotiationPolicyResource{..} =
        (\a -> s { _load_balancer = a } :: LbSslNegotiationPolicyResource)
             <$> f _load_balancer

instance HasName LbSslNegotiationPolicyResource (TF.Argument Text) where
    name f s@LbSslNegotiationPolicyResource{..} =
        (\a -> s { _name = a } :: LbSslNegotiationPolicyResource)
             <$> f _name

instance HasComputedAttribute LbSslNegotiationPolicyResource (TF.Attribute Text) where
    computedAttribute f s@LbSslNegotiationPolicyResource{..} =
        (\a -> s { _computed_attribute = a } :: LbSslNegotiationPolicyResource)
             <$> f _computed_attribute

instance HasComputedId LbSslNegotiationPolicyResource (TF.Attribute Text) where
    computedId f s@LbSslNegotiationPolicyResource{..} =
        (\a -> s { _computed_id = a } :: LbSslNegotiationPolicyResource)
             <$> f _computed_id

instance HasComputedLbPort LbSslNegotiationPolicyResource (TF.Attribute TF.Word16) where
    computedLbPort f s@LbSslNegotiationPolicyResource{..} =
        (\a -> s { _computed_lb_port = a } :: LbSslNegotiationPolicyResource)
             <$> f _computed_lb_port

instance HasComputedLoadBalancer LbSslNegotiationPolicyResource (TF.Attribute Text) where
    computedLoadBalancer f s@LbSslNegotiationPolicyResource{..} =
        (\a -> s { _computed_load_balancer = a } :: LbSslNegotiationPolicyResource)
             <$> f _computed_load_balancer

instance HasComputedName LbSslNegotiationPolicyResource (TF.Attribute Text) where
    computedName f s@LbSslNegotiationPolicyResource{..} =
        (\a -> s { _computed_name = a } :: LbSslNegotiationPolicyResource)
             <$> f _computed_name

lbSslNegotiationPolicyResource :: TF.Resource TF.AWS LbSslNegotiationPolicyResource
lbSslNegotiationPolicyResource =
    TF.newResource "aws_lb_ssl_negotiation_policy" $
        LbSslNegotiationPolicyResource {
            _attribute = TF.Nil
            , _lb_port = TF.Nil
            , _load_balancer = TF.Nil
            , _name = TF.Nil
            , _computed_attribute = TF.Compute "attribute"
            , _computed_id = TF.Compute "id"
            , _computed_lb_port = TF.Compute "lb_port"
            , _computed_load_balancer = TF.Compute "load_balancer"
            , _computed_name = TF.Compute "name"
            }

{- | The @aws_lb_target_group_attachment@ AWS resource.

Provides the ability to register instances and containers with a LB target
group ~> Note:  @aws_alb_target_group_attachment@ is known as
@aws_lb_target_group_attachment@ . The functionality is identical.
-}
data LbTargetGroupAttachmentResource = LbTargetGroupAttachmentResource {
      _availability_zone :: !(TF.Argument Text)
    {- ^ (Optional) The Availability Zone where the IP address of the target is to be registered. -}
    , _port              :: !(TF.Argument Text)
    {- ^ (Optional) The port on which targets receive traffic. -}
    , _target_group_arn  :: !(TF.Argument Text)
    {- ^ (Required) The ARN of the target group with which to register targets -}
    , _target_id         :: !(TF.Argument Text)
    {- ^ (Required) The ID of the target. This is the Instance ID for an instance, or the container ID for an ECS container. If the target type is ip, specify an IP address. -}
    , _computed_id       :: !(TF.Attribute Text)
    {- ^ - A unique identifier for the attachment -}
    } deriving (Show, Eq)

instance TF.ToHCL LbTargetGroupAttachmentResource where
    toHCL LbTargetGroupAttachmentResource{..} = TF.block $ catMaybes
        [ TF.assign "availability_zone" <$> TF.argument _availability_zone
        , TF.assign "port" <$> TF.argument _port
        , TF.assign "target_group_arn" <$> TF.argument _target_group_arn
        , TF.assign "target_id" <$> TF.argument _target_id
        ]

instance HasAvailabilityZone LbTargetGroupAttachmentResource (TF.Argument Text) where
    availabilityZone f s@LbTargetGroupAttachmentResource{..} =
        (\a -> s { _availability_zone = a } :: LbTargetGroupAttachmentResource)
             <$> f _availability_zone

instance HasPort LbTargetGroupAttachmentResource (TF.Argument Text) where
    port f s@LbTargetGroupAttachmentResource{..} =
        (\a -> s { _port = a } :: LbTargetGroupAttachmentResource)
             <$> f _port

instance HasTargetGroupArn LbTargetGroupAttachmentResource (TF.Argument Text) where
    targetGroupArn f s@LbTargetGroupAttachmentResource{..} =
        (\a -> s { _target_group_arn = a } :: LbTargetGroupAttachmentResource)
             <$> f _target_group_arn

instance HasTargetId LbTargetGroupAttachmentResource (TF.Argument Text) where
    targetId f s@LbTargetGroupAttachmentResource{..} =
        (\a -> s { _target_id = a } :: LbTargetGroupAttachmentResource)
             <$> f _target_id

instance HasComputedId LbTargetGroupAttachmentResource (TF.Attribute Text) where
    computedId f s@LbTargetGroupAttachmentResource{..} =
        (\a -> s { _computed_id = a } :: LbTargetGroupAttachmentResource)
             <$> f _computed_id

lbTargetGroupAttachmentResource :: TF.Resource TF.AWS LbTargetGroupAttachmentResource
lbTargetGroupAttachmentResource =
    TF.newResource "aws_lb_target_group_attachment" $
        LbTargetGroupAttachmentResource {
            _availability_zone = TF.Nil
            , _port = TF.Nil
            , _target_group_arn = TF.Nil
            , _target_id = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_lb_target_group@ AWS resource.

Provides a Target Group resource for use with Load Balancer resources. ~>
Note:  @aws_alb_target_group@ is known as @aws_lb_target_group@ . The
functionality is identical.
-}
data LbTargetGroupResource = LbTargetGroupResource {
      _deregistration_delay :: !(TF.Argument Text)
    {- ^ (Optional) The amount time for Elastic Load Balancing to wait before changing the state of a deregistering target from draining to unused. The range is 0-3600 seconds. The default value is 300 seconds. -}
    , _health_check         :: !(TF.Argument Text)
    {- ^ (Optional) A Health Check block. Health Check blocks are documented below. -}
    , _name                 :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) The name of the target group. If omitted, Terraform will assign a random, unique name. -}
    , _name_prefix          :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) Creates a unique name beginning with the specified prefix. Conflicts with @name@ . -}
    , _port                 :: !(TF.Argument Text)
    {- ^ (Required) The port on which targets receive traffic, unless overridden when registering a specific target. -}
    , _protocol             :: !(TF.Argument Text)
    {- ^ (Required) The protocol to use for routing traffic to the targets. -}
    , _stickiness           :: !(TF.Argument Text)
    {- ^ (Optional) A Stickiness block. Stickiness blocks are documented below. @stickiness@ is only valid if used with Load Balancers of type @Application@ -}
    , _tags                 :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _target_type          :: !(TF.Argument Text)
    {- ^ (Optional) The type of target that you must specify when registering targets with this target group. The possible values are @instance@ (targets are specified by instance ID) or @ip@ (targets are specified by IP address). The default is @instance@ . Note that you can't specify targets for a target group using both instance IDs and IP addresses. If the target type is @ip@ , specify IP addresses from the subnets of the virtual private cloud (VPC) for the target group, the RFC 1918 range (10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16), and the RFC 6598 range (100.64.0.0/10). You can't specify publicly routable IP addresses. -}
    , _vpc_id               :: !(TF.Argument Text)
    {- ^ (Required) The identifier of the VPC in which to create the target group. -}
    , _computed_arn         :: !(TF.Attribute Text)
    {- ^ - The ARN of the Target Group (matches @id@ ) -}
    , _computed_arn_suffix  :: !(TF.Attribute Text)
    {- ^ - The ARN suffix for use with CloudWatch Metrics. -}
    , _computed_id          :: !(TF.Attribute Text)
    {- ^ - The ARN of the Target Group (matches @arn@ ) -}
    , _computed_name        :: !(TF.Attribute Text)
    {- ^ - The name of the Target Group -}
    } deriving (Show, Eq)

instance TF.ToHCL LbTargetGroupResource where
    toHCL LbTargetGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "deregistration_delay" <$> TF.argument _deregistration_delay
        , TF.assign "health_check" <$> TF.argument _health_check
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "name_prefix" <$> TF.argument _name_prefix
        , TF.assign "port" <$> TF.argument _port
        , TF.assign "protocol" <$> TF.argument _protocol
        , TF.assign "stickiness" <$> TF.argument _stickiness
        , TF.assign "tags" <$> TF.argument _tags
        , TF.assign "target_type" <$> TF.argument _target_type
        , TF.assign "vpc_id" <$> TF.argument _vpc_id
        ]

instance HasDeregistrationDelay LbTargetGroupResource (TF.Argument Text) where
    deregistrationDelay f s@LbTargetGroupResource{..} =
        (\a -> s { _deregistration_delay = a } :: LbTargetGroupResource)
             <$> f _deregistration_delay

instance HasHealthCheck LbTargetGroupResource (TF.Argument Text) where
    healthCheck f s@LbTargetGroupResource{..} =
        (\a -> s { _health_check = a } :: LbTargetGroupResource)
             <$> f _health_check

instance HasName LbTargetGroupResource (TF.Argument Text) where
    name f s@LbTargetGroupResource{..} =
        (\a -> s { _name = a } :: LbTargetGroupResource)
             <$> f _name

instance HasNamePrefix LbTargetGroupResource (TF.Argument Text) where
    namePrefix f s@LbTargetGroupResource{..} =
        (\a -> s { _name_prefix = a } :: LbTargetGroupResource)
             <$> f _name_prefix

instance HasPort LbTargetGroupResource (TF.Argument Text) where
    port f s@LbTargetGroupResource{..} =
        (\a -> s { _port = a } :: LbTargetGroupResource)
             <$> f _port

instance HasProtocol LbTargetGroupResource (TF.Argument Text) where
    protocol f s@LbTargetGroupResource{..} =
        (\a -> s { _protocol = a } :: LbTargetGroupResource)
             <$> f _protocol

instance HasStickiness LbTargetGroupResource (TF.Argument Text) where
    stickiness f s@LbTargetGroupResource{..} =
        (\a -> s { _stickiness = a } :: LbTargetGroupResource)
             <$> f _stickiness

instance HasTags LbTargetGroupResource (TF.Argument TF.Tags) where
    tags f s@LbTargetGroupResource{..} =
        (\a -> s { _tags = a } :: LbTargetGroupResource)
             <$> f _tags

instance HasTargetType LbTargetGroupResource (TF.Argument Text) where
    targetType f s@LbTargetGroupResource{..} =
        (\a -> s { _target_type = a } :: LbTargetGroupResource)
             <$> f _target_type

instance HasVpcId LbTargetGroupResource (TF.Argument Text) where
    vpcId f s@LbTargetGroupResource{..} =
        (\a -> s { _vpc_id = a } :: LbTargetGroupResource)
             <$> f _vpc_id

instance HasComputedArn LbTargetGroupResource (TF.Attribute Text) where
    computedArn f s@LbTargetGroupResource{..} =
        (\a -> s { _computed_arn = a } :: LbTargetGroupResource)
             <$> f _computed_arn

instance HasComputedArnSuffix LbTargetGroupResource (TF.Attribute Text) where
    computedArnSuffix f s@LbTargetGroupResource{..} =
        (\a -> s { _computed_arn_suffix = a } :: LbTargetGroupResource)
             <$> f _computed_arn_suffix

instance HasComputedId LbTargetGroupResource (TF.Attribute Text) where
    computedId f s@LbTargetGroupResource{..} =
        (\a -> s { _computed_id = a } :: LbTargetGroupResource)
             <$> f _computed_id

instance HasComputedName LbTargetGroupResource (TF.Attribute Text) where
    computedName f s@LbTargetGroupResource{..} =
        (\a -> s { _computed_name = a } :: LbTargetGroupResource)
             <$> f _computed_name

lbTargetGroupResource :: TF.Resource TF.AWS LbTargetGroupResource
lbTargetGroupResource =
    TF.newResource "aws_lb_target_group" $
        LbTargetGroupResource {
            _deregistration_delay = TF.Nil
            , _health_check = TF.Nil
            , _name = TF.Nil
            , _name_prefix = TF.Nil
            , _port = TF.Nil
            , _protocol = TF.Nil
            , _stickiness = TF.Nil
            , _tags = TF.Nil
            , _target_type = TF.Nil
            , _vpc_id = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_arn_suffix = TF.Compute "arn_suffix"
            , _computed_id = TF.Compute "id"
            , _computed_name = TF.Compute "name"
            }

{- | The @aws_lightsail_domain@ AWS resource.

Creates a domain resource for the specified domain (e.g., example.com). You
cannot register a new domain name using Lightsail. You must register a
domain name using Amazon Route 53 or another domain name registrar. If you
have already registered your domain, you can enter its name in this
parameter to manage the DNS records for that domain. ~> Note: Lightsail is
currently only supported in a limited number of AWS Regions, please see
<https://lightsail.aws.amazon.com/ls/docs/overview/article/understanding-regions-and-availability-zones-in-amazon-lightsail>
for more details
-}
data LightsailDomainResource = LightsailDomainResource {
      _domain_name  :: !(TF.Argument Text)
    {- ^ (Required) The name of the Lightsail domain to manage -}
    , _computed_arn :: !(TF.Attribute Text)
    {- ^ - The ARN of the Lightsail domain -}
    , _computed_id  :: !(TF.Attribute Text)
    {- ^ - The name used for this domain -}
    } deriving (Show, Eq)

instance TF.ToHCL LightsailDomainResource where
    toHCL LightsailDomainResource{..} = TF.block $ catMaybes
        [ TF.assign "domain_name" <$> TF.argument _domain_name
        ]

instance HasDomainName LightsailDomainResource (TF.Argument Text) where
    domainName f s@LightsailDomainResource{..} =
        (\a -> s { _domain_name = a } :: LightsailDomainResource)
             <$> f _domain_name

instance HasComputedArn LightsailDomainResource (TF.Attribute Text) where
    computedArn f s@LightsailDomainResource{..} =
        (\a -> s { _computed_arn = a } :: LightsailDomainResource)
             <$> f _computed_arn

instance HasComputedId LightsailDomainResource (TF.Attribute Text) where
    computedId f s@LightsailDomainResource{..} =
        (\a -> s { _computed_id = a } :: LightsailDomainResource)
             <$> f _computed_id

lightsailDomainResource :: TF.Resource TF.AWS LightsailDomainResource
lightsailDomainResource =
    TF.newResource "aws_lightsail_domain" $
        LightsailDomainResource {
            _domain_name = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_lightsail_instance@ AWS resource.

Provides a Lightsail Instance. Amazon Lightsail is a service to provide easy
virtual private servers with custom software already setup. See
<https://lightsail.aws.amazon.com/ls/docs/getting-started/article/what-is-amazon-lightsail>
for more information. ~> Note: Lightsail is currently only supported in a
limited number of AWS Regions, please see
<https://lightsail.aws.amazon.com/ls/docs/overview/article/understanding-regions-and-availability-zones-in-amazon-lightsail>
for more details
-}
data LightsailInstanceResource = LightsailInstanceResource {
      _availability_zone :: !(TF.Argument Text)
    {- ^ (Required) The Availability Zone in which to create your instance. At this time, must be in @us-east-1@ , @us-east-2@ , @us-west-2@ , @eu-west-1@ , @eu-west-2@ , @eu-central-1@ , @ap-southeast-1@ , @ap-southeast-2@ , @ap-northeast-1@ , @ap-south-1@ regions -}
    , _blueprint_id      :: !(TF.Argument Text)
    {- ^ (Required) The ID for a virtual private server image (see list below) -}
    , _bundle_id         :: !(TF.Argument Text)
    {- ^ (Required) The bundle of specification information (see list below) -}
    , _key_pair_name     :: !(TF.Argument Text)
    {- ^ (Required) The name of your key pair. Created in the Lightsail console (cannot use @aws_key_pair@ at this time) -}
    , _name              :: !(TF.Argument Text)
    {- ^ (Required) The name of the Lightsail Instance -}
    , _user_data         :: !(TF.Argument Text)
    {- ^ (Optional) launch script to configure server with additional user data -}
    } deriving (Show, Eq)

instance TF.ToHCL LightsailInstanceResource where
    toHCL LightsailInstanceResource{..} = TF.block $ catMaybes
        [ TF.assign "availability_zone" <$> TF.argument _availability_zone
        , TF.assign "blueprint_id" <$> TF.argument _blueprint_id
        , TF.assign "bundle_id" <$> TF.argument _bundle_id
        , TF.assign "key_pair_name" <$> TF.argument _key_pair_name
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "user_data" <$> TF.argument _user_data
        ]

instance HasAvailabilityZone LightsailInstanceResource (TF.Argument Text) where
    availabilityZone f s@LightsailInstanceResource{..} =
        (\a -> s { _availability_zone = a } :: LightsailInstanceResource)
             <$> f _availability_zone

instance HasBlueprintId LightsailInstanceResource (TF.Argument Text) where
    blueprintId f s@LightsailInstanceResource{..} =
        (\a -> s { _blueprint_id = a } :: LightsailInstanceResource)
             <$> f _blueprint_id

instance HasBundleId LightsailInstanceResource (TF.Argument Text) where
    bundleId f s@LightsailInstanceResource{..} =
        (\a -> s { _bundle_id = a } :: LightsailInstanceResource)
             <$> f _bundle_id

instance HasKeyPairName LightsailInstanceResource (TF.Argument Text) where
    keyPairName f s@LightsailInstanceResource{..} =
        (\a -> s { _key_pair_name = a } :: LightsailInstanceResource)
             <$> f _key_pair_name

instance HasName LightsailInstanceResource (TF.Argument Text) where
    name f s@LightsailInstanceResource{..} =
        (\a -> s { _name = a } :: LightsailInstanceResource)
             <$> f _name

instance HasUserData LightsailInstanceResource (TF.Argument Text) where
    userData f s@LightsailInstanceResource{..} =
        (\a -> s { _user_data = a } :: LightsailInstanceResource)
             <$> f _user_data

lightsailInstanceResource :: TF.Resource TF.AWS LightsailInstanceResource
lightsailInstanceResource =
    TF.newResource "aws_lightsail_instance" $
        LightsailInstanceResource {
            _availability_zone = TF.Nil
            , _blueprint_id = TF.Nil
            , _bundle_id = TF.Nil
            , _key_pair_name = TF.Nil
            , _name = TF.Nil
            , _user_data = TF.Nil
            }

{- | The @aws_lightsail_key_pair@ AWS resource.

Provides a Lightsail Key Pair, for use with Lightsail Instances. These key
pairs are seperate from EC2 Key Pairs, and must be created or imported for
use with Lightsail. ~> Note: Lightsail is currently only supported in a
limited number of AWS Regions, please see
<https://lightsail.aws.amazon.com/ls/docs/overview/article/understanding-regions-and-availability-zones-in-amazon-lightsail>
for more details
-}
data LightsailKeyPairResource = LightsailKeyPairResource {
      _name                           :: !(TF.Argument Text)
    {- ^ (Optional) The name of the Lightsail Key Pair. If omitted, a unique name will be generated by Terraform -}
    , _pgp_key                        :: !(TF.Argument Text)
    {- ^ – (Optional) An optional PGP key to encrypt the resulting private key material. Only used when creating a new key pair -}
    , _public_key                     :: !(TF.Argument Text)
    {- ^ (Required) The public key material. This public key will be imported into Lightsail -}
    , _computed_arn                   :: !(TF.Attribute Text)
    {- ^ - The ARN of the Lightsail key pair -}
    , _computed_encrypted_fingerprint :: !(TF.Attribute Text)
    {- ^ - The MD5 public key fingerprint for the encrypted private key -}
    , _computed_encrypted_private_key :: !(TF.Attribute Text)
    {- ^ – the private key material, base 64 encoded and encrypted with the given @pgp_key@ . This is only populated when creating a new key and @pgp_key@ is supplied -}
    , _computed_fingerprint           :: !(TF.Attribute Text)
    {- ^ - The MD5 public key fingerprint as specified in section 4 of RFC 4716. -}
    , _computed_id                    :: !(TF.Attribute Text)
    {- ^ - The name used for this key pair -}
    , _computed_private_key           :: !(TF.Attribute Text)
    {- ^ - the private key, base64 encoded. This is only populated when creating a new key, and when no @pgp_key@ is provided -}
    , _computed_public_key            :: !(TF.Attribute Text)
    {- ^ - the public key, base64 encoded -}
    } deriving (Show, Eq)

instance TF.ToHCL LightsailKeyPairResource where
    toHCL LightsailKeyPairResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.argument _name
        , TF.assign "pgp_key" <$> TF.argument _pgp_key
        , TF.assign "public_key" <$> TF.argument _public_key
        ]

instance HasName LightsailKeyPairResource (TF.Argument Text) where
    name f s@LightsailKeyPairResource{..} =
        (\a -> s { _name = a } :: LightsailKeyPairResource)
             <$> f _name

instance HasPgpKey LightsailKeyPairResource (TF.Argument Text) where
    pgpKey f s@LightsailKeyPairResource{..} =
        (\a -> s { _pgp_key = a } :: LightsailKeyPairResource)
             <$> f _pgp_key

instance HasPublicKey LightsailKeyPairResource (TF.Argument Text) where
    publicKey f s@LightsailKeyPairResource{..} =
        (\a -> s { _public_key = a } :: LightsailKeyPairResource)
             <$> f _public_key

instance HasComputedArn LightsailKeyPairResource (TF.Attribute Text) where
    computedArn f s@LightsailKeyPairResource{..} =
        (\a -> s { _computed_arn = a } :: LightsailKeyPairResource)
             <$> f _computed_arn

instance HasComputedEncryptedFingerprint LightsailKeyPairResource (TF.Attribute Text) where
    computedEncryptedFingerprint f s@LightsailKeyPairResource{..} =
        (\a -> s { _computed_encrypted_fingerprint = a } :: LightsailKeyPairResource)
             <$> f _computed_encrypted_fingerprint

instance HasComputedEncryptedPrivateKey LightsailKeyPairResource (TF.Attribute Text) where
    computedEncryptedPrivateKey f s@LightsailKeyPairResource{..} =
        (\a -> s { _computed_encrypted_private_key = a } :: LightsailKeyPairResource)
             <$> f _computed_encrypted_private_key

instance HasComputedFingerprint LightsailKeyPairResource (TF.Attribute Text) where
    computedFingerprint f s@LightsailKeyPairResource{..} =
        (\a -> s { _computed_fingerprint = a } :: LightsailKeyPairResource)
             <$> f _computed_fingerprint

instance HasComputedId LightsailKeyPairResource (TF.Attribute Text) where
    computedId f s@LightsailKeyPairResource{..} =
        (\a -> s { _computed_id = a } :: LightsailKeyPairResource)
             <$> f _computed_id

instance HasComputedPrivateKey LightsailKeyPairResource (TF.Attribute Text) where
    computedPrivateKey f s@LightsailKeyPairResource{..} =
        (\a -> s { _computed_private_key = a } :: LightsailKeyPairResource)
             <$> f _computed_private_key

instance HasComputedPublicKey LightsailKeyPairResource (TF.Attribute Text) where
    computedPublicKey f s@LightsailKeyPairResource{..} =
        (\a -> s { _computed_public_key = a } :: LightsailKeyPairResource)
             <$> f _computed_public_key

lightsailKeyPairResource :: TF.Resource TF.AWS LightsailKeyPairResource
lightsailKeyPairResource =
    TF.newResource "aws_lightsail_key_pair" $
        LightsailKeyPairResource {
            _name = TF.Nil
            , _pgp_key = TF.Nil
            , _public_key = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_encrypted_fingerprint = TF.Compute "encrypted_fingerprint"
            , _computed_encrypted_private_key = TF.Compute "encrypted_private_key"
            , _computed_fingerprint = TF.Compute "fingerprint"
            , _computed_id = TF.Compute "id"
            , _computed_private_key = TF.Compute "private_key"
            , _computed_public_key = TF.Compute "public_key"
            }

{- | The @aws_lightsail_static_ip_attachment@ AWS resource.

Provides a static IP address attachment - relationship between a Lightsail
static IP & Lightsail instance. ~> Note: Lightsail is currently only
supported in a limited number of AWS Regions, please see
<https://lightsail.aws.amazon.com/ls/docs/overview/article/understanding-regions-and-availability-zones-in-amazon-lightsail>
for more details
-}
data LightsailStaticIpAttachmentResource = LightsailStaticIpAttachmentResource {
      _instance_name         :: !(TF.Argument Text)
    {- ^ (Required) The name of the Lightsail instance to attach the IP to -}
    , _static_ip_name        :: !(TF.Argument Text)
    {- ^ (Required) The name of the allocated static IP -}
    , _computed_arn          :: !(TF.Attribute Text)
    {- ^ - The ARN of the Lightsail static IP -}
    , _computed_ip_address   :: !(TF.Attribute Text)
    {- ^ - The allocated static IP address -}
    , _computed_support_code :: !(TF.Attribute Text)
    {- ^ - The support code. -}
    } deriving (Show, Eq)

instance TF.ToHCL LightsailStaticIpAttachmentResource where
    toHCL LightsailStaticIpAttachmentResource{..} = TF.block $ catMaybes
        [ TF.assign "instance_name" <$> TF.argument _instance_name
        , TF.assign "static_ip_name" <$> TF.argument _static_ip_name
        ]

instance HasInstanceName LightsailStaticIpAttachmentResource (TF.Argument Text) where
    instanceName f s@LightsailStaticIpAttachmentResource{..} =
        (\a -> s { _instance_name = a } :: LightsailStaticIpAttachmentResource)
             <$> f _instance_name

instance HasStaticIpName LightsailStaticIpAttachmentResource (TF.Argument Text) where
    staticIpName f s@LightsailStaticIpAttachmentResource{..} =
        (\a -> s { _static_ip_name = a } :: LightsailStaticIpAttachmentResource)
             <$> f _static_ip_name

instance HasComputedArn LightsailStaticIpAttachmentResource (TF.Attribute Text) where
    computedArn f s@LightsailStaticIpAttachmentResource{..} =
        (\a -> s { _computed_arn = a } :: LightsailStaticIpAttachmentResource)
             <$> f _computed_arn

instance HasComputedIpAddress LightsailStaticIpAttachmentResource (TF.Attribute Text) where
    computedIpAddress f s@LightsailStaticIpAttachmentResource{..} =
        (\a -> s { _computed_ip_address = a } :: LightsailStaticIpAttachmentResource)
             <$> f _computed_ip_address

instance HasComputedSupportCode LightsailStaticIpAttachmentResource (TF.Attribute Text) where
    computedSupportCode f s@LightsailStaticIpAttachmentResource{..} =
        (\a -> s { _computed_support_code = a } :: LightsailStaticIpAttachmentResource)
             <$> f _computed_support_code

lightsailStaticIpAttachmentResource :: TF.Resource TF.AWS LightsailStaticIpAttachmentResource
lightsailStaticIpAttachmentResource =
    TF.newResource "aws_lightsail_static_ip_attachment" $
        LightsailStaticIpAttachmentResource {
            _instance_name = TF.Nil
            , _static_ip_name = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_ip_address = TF.Compute "ip_address"
            , _computed_support_code = TF.Compute "support_code"
            }

{- | The @aws_lightsail_static_ip@ AWS resource.

Allocates a static IP address. ~> Note: Lightsail is currently only
supported in a limited number of AWS Regions, please see
<https://lightsail.aws.amazon.com/ls/docs/overview/article/understanding-regions-and-availability-zones-in-amazon-lightsail>
for more details
-}
data LightsailStaticIpResource = LightsailStaticIpResource {
      _name                  :: !(TF.Argument Text)
    {- ^ (Required) The name for the allocated static IP -}
    , _computed_arn          :: !(TF.Attribute Text)
    {- ^ - The ARN of the Lightsail static IP -}
    , _computed_ip_address   :: !(TF.Attribute Text)
    {- ^ - The allocated static IP address -}
    , _computed_support_code :: !(TF.Attribute Text)
    {- ^ - The support code. -}
    } deriving (Show, Eq)

instance TF.ToHCL LightsailStaticIpResource where
    toHCL LightsailStaticIpResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.argument _name
        ]

instance HasName LightsailStaticIpResource (TF.Argument Text) where
    name f s@LightsailStaticIpResource{..} =
        (\a -> s { _name = a } :: LightsailStaticIpResource)
             <$> f _name

instance HasComputedArn LightsailStaticIpResource (TF.Attribute Text) where
    computedArn f s@LightsailStaticIpResource{..} =
        (\a -> s { _computed_arn = a } :: LightsailStaticIpResource)
             <$> f _computed_arn

instance HasComputedIpAddress LightsailStaticIpResource (TF.Attribute Text) where
    computedIpAddress f s@LightsailStaticIpResource{..} =
        (\a -> s { _computed_ip_address = a } :: LightsailStaticIpResource)
             <$> f _computed_ip_address

instance HasComputedSupportCode LightsailStaticIpResource (TF.Attribute Text) where
    computedSupportCode f s@LightsailStaticIpResource{..} =
        (\a -> s { _computed_support_code = a } :: LightsailStaticIpResource)
             <$> f _computed_support_code

lightsailStaticIpResource :: TF.Resource TF.AWS LightsailStaticIpResource
lightsailStaticIpResource =
    TF.newResource "aws_lightsail_static_ip" $
        LightsailStaticIpResource {
            _name = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_ip_address = TF.Compute "ip_address"
            , _computed_support_code = TF.Compute "support_code"
            }

{- | The @aws_main_route_table_association@ AWS resource.

Provides a resource for managing the main routing table of a VPC.
-}
data MainRouteTableAssociationResource = MainRouteTableAssociationResource {
      _route_table_id                   :: !(TF.Argument Text)
    {- ^ (Required) The ID of the Route Table to set as the new main route table for the target VPC -}
    , _vpc_id                           :: !(TF.Argument Text)
    {- ^ (Required) The ID of the VPC whose main route table should be set -}
    , _computed_id                      :: !(TF.Attribute Text)
    {- ^ - The ID of the Route Table Association -}
    , _computed_original_route_table_id :: !(TF.Attribute Text)
    {- ^ - Used internally, see Notes below -}
    } deriving (Show, Eq)

instance TF.ToHCL MainRouteTableAssociationResource where
    toHCL MainRouteTableAssociationResource{..} = TF.block $ catMaybes
        [ TF.assign "route_table_id" <$> TF.argument _route_table_id
        , TF.assign "vpc_id" <$> TF.argument _vpc_id
        ]

instance HasRouteTableId MainRouteTableAssociationResource (TF.Argument Text) where
    routeTableId f s@MainRouteTableAssociationResource{..} =
        (\a -> s { _route_table_id = a } :: MainRouteTableAssociationResource)
             <$> f _route_table_id

instance HasVpcId MainRouteTableAssociationResource (TF.Argument Text) where
    vpcId f s@MainRouteTableAssociationResource{..} =
        (\a -> s { _vpc_id = a } :: MainRouteTableAssociationResource)
             <$> f _vpc_id

instance HasComputedId MainRouteTableAssociationResource (TF.Attribute Text) where
    computedId f s@MainRouteTableAssociationResource{..} =
        (\a -> s { _computed_id = a } :: MainRouteTableAssociationResource)
             <$> f _computed_id

instance HasComputedOriginalRouteTableId MainRouteTableAssociationResource (TF.Attribute Text) where
    computedOriginalRouteTableId f s@MainRouteTableAssociationResource{..} =
        (\a -> s { _computed_original_route_table_id = a } :: MainRouteTableAssociationResource)
             <$> f _computed_original_route_table_id

mainRouteTableAssociationResource :: TF.Resource TF.AWS MainRouteTableAssociationResource
mainRouteTableAssociationResource =
    TF.newResource "aws_main_route_table_association" $
        MainRouteTableAssociationResource {
            _route_table_id = TF.Nil
            , _vpc_id = TF.Nil
            , _computed_id = TF.Compute "id"
            , _computed_original_route_table_id = TF.Compute "original_route_table_id"
            }

{- | The @aws_media_store_container@ AWS resource.

Provides a MediaStore Container.
-}
data MediaStoreContainerResource = MediaStoreContainerResource {
      _name              :: !(TF.Argument Text)
    {- ^ (Required) The name of the container. Must contain alphanumeric characters or underscores. -}
    , _computed_arn      :: !(TF.Attribute Text)
    {- ^ - The ARN of the container. -}
    , _computed_endpoint :: !(TF.Attribute Text)
    {- ^ - The DNS endpoint of the container. -}
    } deriving (Show, Eq)

instance TF.ToHCL MediaStoreContainerResource where
    toHCL MediaStoreContainerResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.argument _name
        ]

instance HasName MediaStoreContainerResource (TF.Argument Text) where
    name f s@MediaStoreContainerResource{..} =
        (\a -> s { _name = a } :: MediaStoreContainerResource)
             <$> f _name

instance HasComputedArn MediaStoreContainerResource (TF.Attribute Text) where
    computedArn f s@MediaStoreContainerResource{..} =
        (\a -> s { _computed_arn = a } :: MediaStoreContainerResource)
             <$> f _computed_arn

instance HasComputedEndpoint MediaStoreContainerResource (TF.Attribute Text) where
    computedEndpoint f s@MediaStoreContainerResource{..} =
        (\a -> s { _computed_endpoint = a } :: MediaStoreContainerResource)
             <$> f _computed_endpoint

mediaStoreContainerResource :: TF.Resource TF.AWS MediaStoreContainerResource
mediaStoreContainerResource =
    TF.newResource "aws_media_store_container" $
        MediaStoreContainerResource {
            _name = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_endpoint = TF.Compute "endpoint"
            }

{- | The @aws_mq_broker@ AWS resource.

Provides an MQ Broker Resource. This resources also manages users for the
broker. For more information on Amazon MQ, see
<https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/welcome.html>
. Changes to an MQ Broker can occur when you change a parameter, such as
@configuration@ or @user@ , and are reflected in the next maintenance
window. Because of this, Terraform may report a difference in its planning
phase because a modification has not yet taken place. You can use the
@apply_immediately@ flag to instruct the service to apply the change
immediately (see documentation below). ~> Note: using @apply_immediately@
can result in a brief downtime as the broker reboots. ~> Note: All arguments
including the username and password will be stored in the raw state as
plain-text. </docs/state/sensitive-data.html> .
-}
data MqBrokerResource = MqBrokerResource {
      _apply_immediately             :: !(TF.Argument Text)
    {- ^ (Optional) Specifies whether any broker modifications are applied immediately, or during the next maintenance window. Default is @false@ . -}
    , _auto_minor_version_upgrade    :: !(TF.Argument Text)
    {- ^ (Optional) Enables automatic upgrades to new minor versions for brokers, as Apache releases the versions. -}
    , _broker_name                   :: !(TF.Argument Text)
    {- ^ (Required) The name of the broker. -}
    , _configuration                 :: !(TF.Argument Text)
    {- ^ (Optional) Configuration of the broker. See below. -}
    , _deployment_mode               :: !(TF.Argument Text)
    {- ^ (Optional) The deployment mode of the broker. Supported: @SINGLE_INSTANCE@ and @ACTIVE_STANDBY_MULTI_AZ@ . Defaults to @SINGLE_INSTANCE@ . -}
    , _engine_type                   :: !(TF.Argument Text)
    {- ^ (Required) The type of broker engine. Currently, Amazon MQ supports only @ActiveMQ@ . -}
    , _engine_version                :: !(TF.Argument Text)
    {- ^ (Required) The version of the broker engine. Currently, Amazon MQ supports only @5.15.0@ . -}
    , _host_instance_type            :: !(TF.Argument Text)
    {- ^ (Required) The broker's instance type. e.g. @mq.t2.micro@ or @mq.m4.large@ -}
    , _maintenance_window_start_time :: !(TF.Argument Text)
    {- ^ (Optional) Maintenance window start time. See below. -}
    , _publicly_accessible           :: !(TF.Argument Text)
    {- ^ (Optional) Whether to enable connections from applications outside of the VPC that hosts the broker's subnets. -}
    , _security_groups               :: !(TF.Argument Text)
    {- ^ (Required) The list of security group IDs assigned to the broker. -}
    , _subnet_ids                    :: !(TF.Argument Text)
    {- ^ (Optional) The list of subnet IDs in which to launch the broker. A @SINGLE_INSTANCE@ deployment requires one subnet. An @ACTIVE_STANDBY_MULTI_AZ@ deployment requires two subnets. -}
    , _user                          :: !(TF.Argument Text)
    {- ^ (Optional) The list of all ActiveMQ usernames for the specified broker. See below. -}
    } deriving (Show, Eq)

instance TF.ToHCL MqBrokerResource where
    toHCL MqBrokerResource{..} = TF.block $ catMaybes
        [ TF.assign "apply_immediately" <$> TF.argument _apply_immediately
        , TF.assign "auto_minor_version_upgrade" <$> TF.argument _auto_minor_version_upgrade
        , TF.assign "broker_name" <$> TF.argument _broker_name
        , TF.assign "configuration" <$> TF.argument _configuration
        , TF.assign "deployment_mode" <$> TF.argument _deployment_mode
        , TF.assign "engine_type" <$> TF.argument _engine_type
        , TF.assign "engine_version" <$> TF.argument _engine_version
        , TF.assign "host_instance_type" <$> TF.argument _host_instance_type
        , TF.assign "maintenance_window_start_time" <$> TF.argument _maintenance_window_start_time
        , TF.assign "publicly_accessible" <$> TF.argument _publicly_accessible
        , TF.assign "security_groups" <$> TF.argument _security_groups
        , TF.assign "subnet_ids" <$> TF.argument _subnet_ids
        , TF.assign "user" <$> TF.argument _user
        ]

instance HasApplyImmediately MqBrokerResource (TF.Argument Text) where
    applyImmediately f s@MqBrokerResource{..} =
        (\a -> s { _apply_immediately = a } :: MqBrokerResource)
             <$> f _apply_immediately

instance HasAutoMinorVersionUpgrade MqBrokerResource (TF.Argument Text) where
    autoMinorVersionUpgrade f s@MqBrokerResource{..} =
        (\a -> s { _auto_minor_version_upgrade = a } :: MqBrokerResource)
             <$> f _auto_minor_version_upgrade

instance HasBrokerName MqBrokerResource (TF.Argument Text) where
    brokerName f s@MqBrokerResource{..} =
        (\a -> s { _broker_name = a } :: MqBrokerResource)
             <$> f _broker_name

instance HasConfiguration MqBrokerResource (TF.Argument Text) where
    configuration f s@MqBrokerResource{..} =
        (\a -> s { _configuration = a } :: MqBrokerResource)
             <$> f _configuration

instance HasDeploymentMode MqBrokerResource (TF.Argument Text) where
    deploymentMode f s@MqBrokerResource{..} =
        (\a -> s { _deployment_mode = a } :: MqBrokerResource)
             <$> f _deployment_mode

instance HasEngineType MqBrokerResource (TF.Argument Text) where
    engineType f s@MqBrokerResource{..} =
        (\a -> s { _engine_type = a } :: MqBrokerResource)
             <$> f _engine_type

instance HasEngineVersion MqBrokerResource (TF.Argument Text) where
    engineVersion f s@MqBrokerResource{..} =
        (\a -> s { _engine_version = a } :: MqBrokerResource)
             <$> f _engine_version

instance HasHostInstanceType MqBrokerResource (TF.Argument Text) where
    hostInstanceType f s@MqBrokerResource{..} =
        (\a -> s { _host_instance_type = a } :: MqBrokerResource)
             <$> f _host_instance_type

instance HasMaintenanceWindowStartTime MqBrokerResource (TF.Argument Text) where
    maintenanceWindowStartTime f s@MqBrokerResource{..} =
        (\a -> s { _maintenance_window_start_time = a } :: MqBrokerResource)
             <$> f _maintenance_window_start_time

instance HasPubliclyAccessible MqBrokerResource (TF.Argument Text) where
    publiclyAccessible f s@MqBrokerResource{..} =
        (\a -> s { _publicly_accessible = a } :: MqBrokerResource)
             <$> f _publicly_accessible

instance HasSecurityGroups MqBrokerResource (TF.Argument Text) where
    securityGroups f s@MqBrokerResource{..} =
        (\a -> s { _security_groups = a } :: MqBrokerResource)
             <$> f _security_groups

instance HasSubnetIds MqBrokerResource (TF.Argument Text) where
    subnetIds f s@MqBrokerResource{..} =
        (\a -> s { _subnet_ids = a } :: MqBrokerResource)
             <$> f _subnet_ids

instance HasUser MqBrokerResource (TF.Argument Text) where
    user f s@MqBrokerResource{..} =
        (\a -> s { _user = a } :: MqBrokerResource)
             <$> f _user

mqBrokerResource :: TF.Resource TF.AWS MqBrokerResource
mqBrokerResource =
    TF.newResource "aws_mq_broker" $
        MqBrokerResource {
            _apply_immediately = TF.Nil
            , _auto_minor_version_upgrade = TF.Nil
            , _broker_name = TF.Nil
            , _configuration = TF.Nil
            , _deployment_mode = TF.Nil
            , _engine_type = TF.Nil
            , _engine_version = TF.Nil
            , _host_instance_type = TF.Nil
            , _maintenance_window_start_time = TF.Nil
            , _publicly_accessible = TF.Nil
            , _security_groups = TF.Nil
            , _subnet_ids = TF.Nil
            , _user = TF.Nil
            }

{- | The @aws_mq_configuration@ AWS resource.

Provides an MQ Configuration Resource. For more information on Amazon MQ,
see
<https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/welcome.html>
.
-}
data MqConfigurationResource = MqConfigurationResource {
      _data'                    :: !(TF.Argument Text)
    {- ^ (Required) The broker configuration in XML format. See <https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/amazon-mq-broker-configuration-parameters.html> for supported parameters and format of the XML. -}
    , _description              :: !(TF.Argument Text)
    {- ^ (Optional) The description of the configuration. -}
    , _engine_type              :: !(TF.Argument Text)
    {- ^ (Required) The type of broker engine. -}
    , _engine_version           :: !(TF.Argument Text)
    {- ^ (Required) The version of the broker engine. -}
    , _name                     :: !(TF.Argument Text)
    {- ^ (Required) The name of the configuration -}
    , _computed_arn             :: !(TF.Attribute Text)
    {- ^ - The ARN of the configuration. -}
    , _computed_id              :: !(TF.Attribute Text)
    {- ^ - The unique ID that Amazon MQ generates for the configuration. -}
    , _computed_latest_revision :: !(TF.Attribute Text)
    {- ^ - The latest revision of the configuration. -}
    } deriving (Show, Eq)

instance TF.ToHCL MqConfigurationResource where
    toHCL MqConfigurationResource{..} = TF.block $ catMaybes
        [ TF.assign "data" <$> TF.argument _data'
        , TF.assign "description" <$> TF.argument _description
        , TF.assign "engine_type" <$> TF.argument _engine_type
        , TF.assign "engine_version" <$> TF.argument _engine_version
        , TF.assign "name" <$> TF.argument _name
        ]

instance HasData' MqConfigurationResource (TF.Argument Text) where
    data' f s@MqConfigurationResource{..} =
        (\a -> s { _data' = a } :: MqConfigurationResource)
             <$> f _data'

instance HasDescription MqConfigurationResource (TF.Argument Text) where
    description f s@MqConfigurationResource{..} =
        (\a -> s { _description = a } :: MqConfigurationResource)
             <$> f _description

instance HasEngineType MqConfigurationResource (TF.Argument Text) where
    engineType f s@MqConfigurationResource{..} =
        (\a -> s { _engine_type = a } :: MqConfigurationResource)
             <$> f _engine_type

instance HasEngineVersion MqConfigurationResource (TF.Argument Text) where
    engineVersion f s@MqConfigurationResource{..} =
        (\a -> s { _engine_version = a } :: MqConfigurationResource)
             <$> f _engine_version

instance HasName MqConfigurationResource (TF.Argument Text) where
    name f s@MqConfigurationResource{..} =
        (\a -> s { _name = a } :: MqConfigurationResource)
             <$> f _name

instance HasComputedArn MqConfigurationResource (TF.Attribute Text) where
    computedArn f s@MqConfigurationResource{..} =
        (\a -> s { _computed_arn = a } :: MqConfigurationResource)
             <$> f _computed_arn

instance HasComputedId MqConfigurationResource (TF.Attribute Text) where
    computedId f s@MqConfigurationResource{..} =
        (\a -> s { _computed_id = a } :: MqConfigurationResource)
             <$> f _computed_id

instance HasComputedLatestRevision MqConfigurationResource (TF.Attribute Text) where
    computedLatestRevision f s@MqConfigurationResource{..} =
        (\a -> s { _computed_latest_revision = a } :: MqConfigurationResource)
             <$> f _computed_latest_revision

mqConfigurationResource :: TF.Resource TF.AWS MqConfigurationResource
mqConfigurationResource =
    TF.newResource "aws_mq_configuration" $
        MqConfigurationResource {
            _data' = TF.Nil
            , _description = TF.Nil
            , _engine_type = TF.Nil
            , _engine_version = TF.Nil
            , _name = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_id = TF.Compute "id"
            , _computed_latest_revision = TF.Compute "latest_revision"
            }

{- | The @aws_nat_gateway@ AWS resource.

Provides a resource to create a VPC NAT Gateway.
-}
data NatGatewayResource = NatGatewayResource {
      _allocation_id                 :: !(TF.Argument Text)
    {- ^ (Required) The Allocation ID of the Elastic IP address for the gateway. -}
    , _subnet_id                     :: !(TF.Argument Text)
    {- ^ (Required) The Subnet ID of the subnet in which to place the gateway. -}
    , _tags                          :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _computed_allocation_id        :: !(TF.Attribute Text)
    {- ^ - The Allocation ID of the Elastic IP address for the gateway. -}
    , _computed_id                   :: !(TF.Attribute Text)
    {- ^ - The ID of the NAT Gateway. -}
    , _computed_network_interface_id :: !(TF.Attribute Text)
    {- ^ - The ENI ID of the network interface created by the NAT gateway. -}
    , _computed_private_ip           :: !(TF.Attribute Text)
    {- ^ - The private IP address of the NAT Gateway. -}
    , _computed_public_ip            :: !(TF.Attribute Text)
    {- ^ - The public IP address of the NAT Gateway. -}
    , _computed_subnet_id            :: !(TF.Attribute Text)
    {- ^ - The Subnet ID of the subnet in which the NAT gateway is placed. -}
    } deriving (Show, Eq)

instance TF.ToHCL NatGatewayResource where
    toHCL NatGatewayResource{..} = TF.block $ catMaybes
        [ TF.assign "allocation_id" <$> TF.argument _allocation_id
        , TF.assign "subnet_id" <$> TF.argument _subnet_id
        , TF.assign "tags" <$> TF.argument _tags
        ]

instance HasAllocationId NatGatewayResource (TF.Argument Text) where
    allocationId f s@NatGatewayResource{..} =
        (\a -> s { _allocation_id = a } :: NatGatewayResource)
             <$> f _allocation_id

instance HasSubnetId NatGatewayResource (TF.Argument Text) where
    subnetId f s@NatGatewayResource{..} =
        (\a -> s { _subnet_id = a } :: NatGatewayResource)
             <$> f _subnet_id

instance HasTags NatGatewayResource (TF.Argument TF.Tags) where
    tags f s@NatGatewayResource{..} =
        (\a -> s { _tags = a } :: NatGatewayResource)
             <$> f _tags

instance HasComputedAllocationId NatGatewayResource (TF.Attribute Text) where
    computedAllocationId f s@NatGatewayResource{..} =
        (\a -> s { _computed_allocation_id = a } :: NatGatewayResource)
             <$> f _computed_allocation_id

instance HasComputedId NatGatewayResource (TF.Attribute Text) where
    computedId f s@NatGatewayResource{..} =
        (\a -> s { _computed_id = a } :: NatGatewayResource)
             <$> f _computed_id

instance HasComputedNetworkInterfaceId NatGatewayResource (TF.Attribute Text) where
    computedNetworkInterfaceId f s@NatGatewayResource{..} =
        (\a -> s { _computed_network_interface_id = a } :: NatGatewayResource)
             <$> f _computed_network_interface_id

instance HasComputedPrivateIp NatGatewayResource (TF.Attribute Text) where
    computedPrivateIp f s@NatGatewayResource{..} =
        (\a -> s { _computed_private_ip = a } :: NatGatewayResource)
             <$> f _computed_private_ip

instance HasComputedPublicIp NatGatewayResource (TF.Attribute Text) where
    computedPublicIp f s@NatGatewayResource{..} =
        (\a -> s { _computed_public_ip = a } :: NatGatewayResource)
             <$> f _computed_public_ip

instance HasComputedSubnetId NatGatewayResource (TF.Attribute Text) where
    computedSubnetId f s@NatGatewayResource{..} =
        (\a -> s { _computed_subnet_id = a } :: NatGatewayResource)
             <$> f _computed_subnet_id

natGatewayResource :: TF.Resource TF.AWS NatGatewayResource
natGatewayResource =
    TF.newResource "aws_nat_gateway" $
        NatGatewayResource {
            _allocation_id = TF.Nil
            , _subnet_id = TF.Nil
            , _tags = TF.Nil
            , _computed_allocation_id = TF.Compute "allocation_id"
            , _computed_id = TF.Compute "id"
            , _computed_network_interface_id = TF.Compute "network_interface_id"
            , _computed_private_ip = TF.Compute "private_ip"
            , _computed_public_ip = TF.Compute "public_ip"
            , _computed_subnet_id = TF.Compute "subnet_id"
            }

{- | The @aws_network_acl@ AWS resource.

Provides an network ACL resource. You might set up network ACLs with rules
similar to your security groups in order to add an additional layer of
security to your VPC.
-}
data NetworkAclResource = NetworkAclResource {
      _egress      :: !(TF.Argument Text)
    {- ^ (Optional) Specifies an egress rule. Parameters defined below. -}
    , _ingress     :: !(TF.Argument Text)
    {- ^ (Optional) Specifies an ingress rule. Parameters defined below. -}
    , _subnet_id   :: !(TF.Argument Text)
    {- ^ (Optional, Deprecated) The ID of the associated Subnet. This attribute is deprecated, please use the @subnet_ids@ attribute instead -}
    , _subnet_ids  :: !(TF.Argument Text)
    {- ^ (Optional) A list of Subnet IDs to apply the ACL to -}
    , _tags        :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _vpc_id      :: !(TF.Argument Text)
    {- ^ (Required) The ID of the associated VPC. -}
    , _computed_id :: !(TF.Attribute Text)
    {- ^ - The ID of the network ACL -}
    } deriving (Show, Eq)

instance TF.ToHCL NetworkAclResource where
    toHCL NetworkAclResource{..} = TF.block $ catMaybes
        [ TF.assign "egress" <$> TF.argument _egress
        , TF.assign "ingress" <$> TF.argument _ingress
        , TF.assign "subnet_id" <$> TF.argument _subnet_id
        , TF.assign "subnet_ids" <$> TF.argument _subnet_ids
        , TF.assign "tags" <$> TF.argument _tags
        , TF.assign "vpc_id" <$> TF.argument _vpc_id
        ]

instance HasEgress NetworkAclResource (TF.Argument Text) where
    egress f s@NetworkAclResource{..} =
        (\a -> s { _egress = a } :: NetworkAclResource)
             <$> f _egress

instance HasIngress NetworkAclResource (TF.Argument Text) where
    ingress f s@NetworkAclResource{..} =
        (\a -> s { _ingress = a } :: NetworkAclResource)
             <$> f _ingress

instance HasSubnetId NetworkAclResource (TF.Argument Text) where
    subnetId f s@NetworkAclResource{..} =
        (\a -> s { _subnet_id = a } :: NetworkAclResource)
             <$> f _subnet_id

instance HasSubnetIds NetworkAclResource (TF.Argument Text) where
    subnetIds f s@NetworkAclResource{..} =
        (\a -> s { _subnet_ids = a } :: NetworkAclResource)
             <$> f _subnet_ids

instance HasTags NetworkAclResource (TF.Argument TF.Tags) where
    tags f s@NetworkAclResource{..} =
        (\a -> s { _tags = a } :: NetworkAclResource)
             <$> f _tags

instance HasVpcId NetworkAclResource (TF.Argument Text) where
    vpcId f s@NetworkAclResource{..} =
        (\a -> s { _vpc_id = a } :: NetworkAclResource)
             <$> f _vpc_id

instance HasComputedId NetworkAclResource (TF.Attribute Text) where
    computedId f s@NetworkAclResource{..} =
        (\a -> s { _computed_id = a } :: NetworkAclResource)
             <$> f _computed_id

networkAclResource :: TF.Resource TF.AWS NetworkAclResource
networkAclResource =
    TF.newResource "aws_network_acl" $
        NetworkAclResource {
            _egress = TF.Nil
            , _ingress = TF.Nil
            , _subnet_id = TF.Nil
            , _subnet_ids = TF.Nil
            , _tags = TF.Nil
            , _vpc_id = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_network_acl_rule@ AWS resource.

Creates an entry (a rule) in a network ACL with the specified rule number.
-}
data NetworkAclRuleResource = NetworkAclRuleResource {
      _cidr_block      :: !(TF.Argument Text)
    {- ^ (Optional) The network range to allow or deny, in CIDR notation (for example 172.16.0.0/24 ). -}
    , _egress          :: !(TF.Argument Text)
    {- ^ (Optional, bool) Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet). Default @false@ . -}
    , _from_port       :: !(TF.Argument TF.Word16)
    {- ^ (Optional) The from port to match. -}
    , _icmp_code       :: !(TF.Argument Text)
    {- ^ (Optional) ICMP protocol: The ICMP code. Required if specifying ICMP for the protocol. e.g. -1 -}
    , _icmp_type       :: !(TF.Argument Text)
    {- ^ (Optional) ICMP protocol: The ICMP type. Required if specifying ICMP for the protocol. e.g. -1 -}
    , _ipv6_cidr_block :: !(TF.Argument Text)
    {- ^ (Optional) The IPv6 CIDR block to allow or deny. -}
    , _network_acl_id  :: !(TF.Argument Text)
    {- ^ (Required) The ID of the network ACL. -}
    , _protocol        :: !(TF.Argument Text)
    {- ^ (Required) The protocol. A value of -1 means all protocols. -}
    , _rule_action     :: !(TF.Argument Text)
    {- ^ (Required) Indicates whether to allow or deny the traffic that matches the rule. Accepted values: @allow@ | @deny@ -}
    , _rule_number     :: !(TF.Argument Text)
    {- ^ (Required) The rule number for the entry (for example, 100). ACL entries are processed in ascending order by rule number. -}
    , _to_port         :: !(TF.Argument TF.Word16)
    {- ^ (Optional) The to port to match. -}
    , _computed_id     :: !(TF.Attribute Text)
    {- ^ - The ID of the network ACL Rule -}
    } deriving (Show, Eq)

instance TF.ToHCL NetworkAclRuleResource where
    toHCL NetworkAclRuleResource{..} = TF.block $ catMaybes
        [ TF.assign "cidr_block" <$> TF.argument _cidr_block
        , TF.assign "egress" <$> TF.argument _egress
        , TF.assign "from_port" <$> TF.argument _from_port
        , TF.assign "icmp_code" <$> TF.argument _icmp_code
        , TF.assign "icmp_type" <$> TF.argument _icmp_type
        , TF.assign "ipv6_cidr_block" <$> TF.argument _ipv6_cidr_block
        , TF.assign "network_acl_id" <$> TF.argument _network_acl_id
        , TF.assign "protocol" <$> TF.argument _protocol
        , TF.assign "rule_action" <$> TF.argument _rule_action
        , TF.assign "rule_number" <$> TF.argument _rule_number
        , TF.assign "to_port" <$> TF.argument _to_port
        ]

instance HasCidrBlock NetworkAclRuleResource (TF.Argument Text) where
    cidrBlock f s@NetworkAclRuleResource{..} =
        (\a -> s { _cidr_block = a } :: NetworkAclRuleResource)
             <$> f _cidr_block

instance HasEgress NetworkAclRuleResource (TF.Argument Text) where
    egress f s@NetworkAclRuleResource{..} =
        (\a -> s { _egress = a } :: NetworkAclRuleResource)
             <$> f _egress

instance HasFromPort NetworkAclRuleResource (TF.Argument TF.Word16) where
    fromPort f s@NetworkAclRuleResource{..} =
        (\a -> s { _from_port = a } :: NetworkAclRuleResource)
             <$> f _from_port

instance HasIcmpCode NetworkAclRuleResource (TF.Argument Text) where
    icmpCode f s@NetworkAclRuleResource{..} =
        (\a -> s { _icmp_code = a } :: NetworkAclRuleResource)
             <$> f _icmp_code

instance HasIcmpType NetworkAclRuleResource (TF.Argument Text) where
    icmpType f s@NetworkAclRuleResource{..} =
        (\a -> s { _icmp_type = a } :: NetworkAclRuleResource)
             <$> f _icmp_type

instance HasIpv6CidrBlock NetworkAclRuleResource (TF.Argument Text) where
    ipv6CidrBlock f s@NetworkAclRuleResource{..} =
        (\a -> s { _ipv6_cidr_block = a } :: NetworkAclRuleResource)
             <$> f _ipv6_cidr_block

instance HasNetworkAclId NetworkAclRuleResource (TF.Argument Text) where
    networkAclId f s@NetworkAclRuleResource{..} =
        (\a -> s { _network_acl_id = a } :: NetworkAclRuleResource)
             <$> f _network_acl_id

instance HasProtocol NetworkAclRuleResource (TF.Argument Text) where
    protocol f s@NetworkAclRuleResource{..} =
        (\a -> s { _protocol = a } :: NetworkAclRuleResource)
             <$> f _protocol

instance HasRuleAction NetworkAclRuleResource (TF.Argument Text) where
    ruleAction f s@NetworkAclRuleResource{..} =
        (\a -> s { _rule_action = a } :: NetworkAclRuleResource)
             <$> f _rule_action

instance HasRuleNumber NetworkAclRuleResource (TF.Argument Text) where
    ruleNumber f s@NetworkAclRuleResource{..} =
        (\a -> s { _rule_number = a } :: NetworkAclRuleResource)
             <$> f _rule_number

instance HasToPort NetworkAclRuleResource (TF.Argument TF.Word16) where
    toPort f s@NetworkAclRuleResource{..} =
        (\a -> s { _to_port = a } :: NetworkAclRuleResource)
             <$> f _to_port

instance HasComputedId NetworkAclRuleResource (TF.Attribute Text) where
    computedId f s@NetworkAclRuleResource{..} =
        (\a -> s { _computed_id = a } :: NetworkAclRuleResource)
             <$> f _computed_id

networkAclRuleResource :: TF.Resource TF.AWS NetworkAclRuleResource
networkAclRuleResource =
    TF.newResource "aws_network_acl_rule" $
        NetworkAclRuleResource {
            _cidr_block = TF.Nil
            , _egress = TF.Nil
            , _from_port = TF.Nil
            , _icmp_code = TF.Nil
            , _icmp_type = TF.Nil
            , _ipv6_cidr_block = TF.Nil
            , _network_acl_id = TF.Nil
            , _protocol = TF.Nil
            , _rule_action = TF.Nil
            , _rule_number = TF.Nil
            , _to_port = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_network_interface_attachment@ AWS resource.

Attach an Elastic network interface (ENI) resource with EC2 instance.
-}
data NetworkInterfaceAttachmentResource = NetworkInterfaceAttachmentResource {
      _device_index                  :: !(TF.Argument Text)
    {- ^ (Required) Network interface index (int). -}
    , _instance_id                   :: !(TF.Argument Text)
    {- ^ (Required) Instance ID to attach. -}
    , _network_interface_id          :: !(TF.Argument Text)
    {- ^ (Required) ENI ID to attach. -}
    , _computed_attachment_id        :: !(TF.Attribute Text)
    {- ^ - The ENI Attachment ID. -}
    , _computed_instance_id          :: !(TF.Attribute Text)
    {- ^ - Instance ID. -}
    , _computed_network_interface_id :: !(TF.Attribute Text)
    {- ^ - Network interface ID. -}
    , _computed_status               :: !(TF.Attribute Text)
    {- ^ - The status of the Network Interface Attachment. -}
    } deriving (Show, Eq)

instance TF.ToHCL NetworkInterfaceAttachmentResource where
    toHCL NetworkInterfaceAttachmentResource{..} = TF.block $ catMaybes
        [ TF.assign "device_index" <$> TF.argument _device_index
        , TF.assign "instance_id" <$> TF.argument _instance_id
        , TF.assign "network_interface_id" <$> TF.argument _network_interface_id
        ]

instance HasDeviceIndex NetworkInterfaceAttachmentResource (TF.Argument Text) where
    deviceIndex f s@NetworkInterfaceAttachmentResource{..} =
        (\a -> s { _device_index = a } :: NetworkInterfaceAttachmentResource)
             <$> f _device_index

instance HasInstanceId NetworkInterfaceAttachmentResource (TF.Argument Text) where
    instanceId f s@NetworkInterfaceAttachmentResource{..} =
        (\a -> s { _instance_id = a } :: NetworkInterfaceAttachmentResource)
             <$> f _instance_id

instance HasNetworkInterfaceId NetworkInterfaceAttachmentResource (TF.Argument Text) where
    networkInterfaceId f s@NetworkInterfaceAttachmentResource{..} =
        (\a -> s { _network_interface_id = a } :: NetworkInterfaceAttachmentResource)
             <$> f _network_interface_id

instance HasComputedAttachmentId NetworkInterfaceAttachmentResource (TF.Attribute Text) where
    computedAttachmentId f s@NetworkInterfaceAttachmentResource{..} =
        (\a -> s { _computed_attachment_id = a } :: NetworkInterfaceAttachmentResource)
             <$> f _computed_attachment_id

instance HasComputedInstanceId NetworkInterfaceAttachmentResource (TF.Attribute Text) where
    computedInstanceId f s@NetworkInterfaceAttachmentResource{..} =
        (\a -> s { _computed_instance_id = a } :: NetworkInterfaceAttachmentResource)
             <$> f _computed_instance_id

instance HasComputedNetworkInterfaceId NetworkInterfaceAttachmentResource (TF.Attribute Text) where
    computedNetworkInterfaceId f s@NetworkInterfaceAttachmentResource{..} =
        (\a -> s { _computed_network_interface_id = a } :: NetworkInterfaceAttachmentResource)
             <$> f _computed_network_interface_id

instance HasComputedStatus NetworkInterfaceAttachmentResource (TF.Attribute Text) where
    computedStatus f s@NetworkInterfaceAttachmentResource{..} =
        (\a -> s { _computed_status = a } :: NetworkInterfaceAttachmentResource)
             <$> f _computed_status

networkInterfaceAttachmentResource :: TF.Resource TF.AWS NetworkInterfaceAttachmentResource
networkInterfaceAttachmentResource =
    TF.newResource "aws_network_interface_attachment" $
        NetworkInterfaceAttachmentResource {
            _device_index = TF.Nil
            , _instance_id = TF.Nil
            , _network_interface_id = TF.Nil
            , _computed_attachment_id = TF.Compute "attachment_id"
            , _computed_instance_id = TF.Compute "instance_id"
            , _computed_network_interface_id = TF.Compute "network_interface_id"
            , _computed_status = TF.Compute "status"
            }

{- | The @aws_network_interface@ AWS resource.

Provides an Elastic network interface (ENI) resource.
-}
data NetworkInterfaceResource = NetworkInterfaceResource {
      _attachment                 :: !(TF.Argument Text)
    {- ^ (Optional) Block to define the attachment of the ENI. Documented below. -}
    , _description                :: !(TF.Argument Text)
    {- ^ (Optional) A description for the network interface. -}
    , _private_ips                :: !(TF.Argument Text)
    {- ^ (Optional) List of private IPs to assign to the ENI. -}
    , _private_ips_count          :: !(TF.Argument Text)
    {- ^ (Optional) Number of private IPs to assign to the ENI. -}
    , _security_groups            :: !(TF.Argument Text)
    {- ^ (Optional) List of security group IDs to assign to the ENI. -}
    , _source_dest_check          :: !(TF.Argument Text)
    {- ^ (Optional) Whether to enable source destination checking for the ENI. Default true. -}
    , _subnet_id                  :: !(TF.Argument Text)
    {- ^ (Required) Subnet ID to create the ENI in. -}
    , _tags                       :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _computed_attachment        :: !(TF.Attribute Text)
    {- ^ - Block defining the attachment of the ENI. -}
    , _computed_description       :: !(TF.Attribute Text)
    {- ^ - A description for the network interface. -}
    , _computed_private_ips       :: !(TF.Attribute Text)
    {- ^ - List of private IPs assigned to the ENI. -}
    , _computed_security_groups   :: !(TF.Attribute Text)
    {- ^ - List of security groups attached to the ENI. -}
    , _computed_source_dest_check :: !(TF.Attribute Text)
    {- ^ - Whether source destination checking is enabled -}
    , _computed_subnet_id         :: !(TF.Attribute Text)
    {- ^ - Subnet ID the ENI is in. -}
    , _computed_tags              :: !(TF.Attribute TF.Tags)
    {- ^ - Tags assigned to the ENI. -}
    } deriving (Show, Eq)

instance TF.ToHCL NetworkInterfaceResource where
    toHCL NetworkInterfaceResource{..} = TF.block $ catMaybes
        [ TF.assign "attachment" <$> TF.argument _attachment
        , TF.assign "description" <$> TF.argument _description
        , TF.assign "private_ips" <$> TF.argument _private_ips
        , TF.assign "private_ips_count" <$> TF.argument _private_ips_count
        , TF.assign "security_groups" <$> TF.argument _security_groups
        , TF.assign "source_dest_check" <$> TF.argument _source_dest_check
        , TF.assign "subnet_id" <$> TF.argument _subnet_id
        , TF.assign "tags" <$> TF.argument _tags
        ]

instance HasAttachment NetworkInterfaceResource (TF.Argument Text) where
    attachment f s@NetworkInterfaceResource{..} =
        (\a -> s { _attachment = a } :: NetworkInterfaceResource)
             <$> f _attachment

instance HasDescription NetworkInterfaceResource (TF.Argument Text) where
    description f s@NetworkInterfaceResource{..} =
        (\a -> s { _description = a } :: NetworkInterfaceResource)
             <$> f _description

instance HasPrivateIps NetworkInterfaceResource (TF.Argument Text) where
    privateIps f s@NetworkInterfaceResource{..} =
        (\a -> s { _private_ips = a } :: NetworkInterfaceResource)
             <$> f _private_ips

instance HasPrivateIpsCount NetworkInterfaceResource (TF.Argument Text) where
    privateIpsCount f s@NetworkInterfaceResource{..} =
        (\a -> s { _private_ips_count = a } :: NetworkInterfaceResource)
             <$> f _private_ips_count

instance HasSecurityGroups NetworkInterfaceResource (TF.Argument Text) where
    securityGroups f s@NetworkInterfaceResource{..} =
        (\a -> s { _security_groups = a } :: NetworkInterfaceResource)
             <$> f _security_groups

instance HasSourceDestCheck NetworkInterfaceResource (TF.Argument Text) where
    sourceDestCheck f s@NetworkInterfaceResource{..} =
        (\a -> s { _source_dest_check = a } :: NetworkInterfaceResource)
             <$> f _source_dest_check

instance HasSubnetId NetworkInterfaceResource (TF.Argument Text) where
    subnetId f s@NetworkInterfaceResource{..} =
        (\a -> s { _subnet_id = a } :: NetworkInterfaceResource)
             <$> f _subnet_id

instance HasTags NetworkInterfaceResource (TF.Argument TF.Tags) where
    tags f s@NetworkInterfaceResource{..} =
        (\a -> s { _tags = a } :: NetworkInterfaceResource)
             <$> f _tags

instance HasComputedAttachment NetworkInterfaceResource (TF.Attribute Text) where
    computedAttachment f s@NetworkInterfaceResource{..} =
        (\a -> s { _computed_attachment = a } :: NetworkInterfaceResource)
             <$> f _computed_attachment

instance HasComputedDescription NetworkInterfaceResource (TF.Attribute Text) where
    computedDescription f s@NetworkInterfaceResource{..} =
        (\a -> s { _computed_description = a } :: NetworkInterfaceResource)
             <$> f _computed_description

instance HasComputedPrivateIps NetworkInterfaceResource (TF.Attribute Text) where
    computedPrivateIps f s@NetworkInterfaceResource{..} =
        (\a -> s { _computed_private_ips = a } :: NetworkInterfaceResource)
             <$> f _computed_private_ips

instance HasComputedSecurityGroups NetworkInterfaceResource (TF.Attribute Text) where
    computedSecurityGroups f s@NetworkInterfaceResource{..} =
        (\a -> s { _computed_security_groups = a } :: NetworkInterfaceResource)
             <$> f _computed_security_groups

instance HasComputedSourceDestCheck NetworkInterfaceResource (TF.Attribute Text) where
    computedSourceDestCheck f s@NetworkInterfaceResource{..} =
        (\a -> s { _computed_source_dest_check = a } :: NetworkInterfaceResource)
             <$> f _computed_source_dest_check

instance HasComputedSubnetId NetworkInterfaceResource (TF.Attribute Text) where
    computedSubnetId f s@NetworkInterfaceResource{..} =
        (\a -> s { _computed_subnet_id = a } :: NetworkInterfaceResource)
             <$> f _computed_subnet_id

instance HasComputedTags NetworkInterfaceResource (TF.Attribute TF.Tags) where
    computedTags f s@NetworkInterfaceResource{..} =
        (\a -> s { _computed_tags = a } :: NetworkInterfaceResource)
             <$> f _computed_tags

networkInterfaceResource :: TF.Resource TF.AWS NetworkInterfaceResource
networkInterfaceResource =
    TF.newResource "aws_network_interface" $
        NetworkInterfaceResource {
            _attachment = TF.Nil
            , _description = TF.Nil
            , _private_ips = TF.Nil
            , _private_ips_count = TF.Nil
            , _security_groups = TF.Nil
            , _source_dest_check = TF.Nil
            , _subnet_id = TF.Nil
            , _tags = TF.Nil
            , _computed_attachment = TF.Compute "attachment"
            , _computed_description = TF.Compute "description"
            , _computed_private_ips = TF.Compute "private_ips"
            , _computed_security_groups = TF.Compute "security_groups"
            , _computed_source_dest_check = TF.Compute "source_dest_check"
            , _computed_subnet_id = TF.Compute "subnet_id"
            , _computed_tags = TF.Compute "tags"
            }

{- | The @aws_network_interface_sg_attachment@ AWS resource.

This resource attaches a security group to an Elastic Network Interface
(ENI). It can be used to attach a security group to any existing ENI, be it
a secondary ENI or one attached as the primary interface on an instance. ~>
NOTE on instances, interfaces, and security groups: Terraform currently
provides the capability to assign security groups via the
</docs/providers/aws/d/instance.html> and the
</docs/providers/aws/r/network_interface.html> resources. Using this
resource in conjunction with security groups provided in-line in those
resources will cause conflicts, and will lead to spurious diffs and
undefined behavior - please use one or the other.
-}
data NetworkInterfaceSgAttachmentResource = NetworkInterfaceSgAttachmentResource {
      _network_interface_id :: !(TF.Argument Text)
    {- ^ (Required) The ID of the network interface to attach to. -}
    , _security_group_id    :: !(TF.Argument Text)
    {- ^ (Required) The ID of the security group. -}
    } deriving (Show, Eq)

instance TF.ToHCL NetworkInterfaceSgAttachmentResource where
    toHCL NetworkInterfaceSgAttachmentResource{..} = TF.block $ catMaybes
        [ TF.assign "network_interface_id" <$> TF.argument _network_interface_id
        , TF.assign "security_group_id" <$> TF.argument _security_group_id
        ]

instance HasNetworkInterfaceId NetworkInterfaceSgAttachmentResource (TF.Argument Text) where
    networkInterfaceId f s@NetworkInterfaceSgAttachmentResource{..} =
        (\a -> s { _network_interface_id = a } :: NetworkInterfaceSgAttachmentResource)
             <$> f _network_interface_id

instance HasSecurityGroupId NetworkInterfaceSgAttachmentResource (TF.Argument Text) where
    securityGroupId f s@NetworkInterfaceSgAttachmentResource{..} =
        (\a -> s { _security_group_id = a } :: NetworkInterfaceSgAttachmentResource)
             <$> f _security_group_id

networkInterfaceSgAttachmentResource :: TF.Resource TF.AWS NetworkInterfaceSgAttachmentResource
networkInterfaceSgAttachmentResource =
    TF.newResource "aws_network_interface_sg_attachment" $
        NetworkInterfaceSgAttachmentResource {
            _network_interface_id = TF.Nil
            , _security_group_id = TF.Nil
            }

{- | The @aws_opsworks_application@ AWS resource.

Provides an OpsWorks application resource.
-}
data OpsworksApplicationResource = OpsworksApplicationResource {
      _app_source                :: !(TF.Argument Text)
    {- ^ (Optional) SCM configuration of the app as described below. -}
    , _auto_bundle_on_deploy     :: !(TF.Argument Text)
    {- ^ (Optional) Run bundle install when deploying for application of type @rails@ . -}
    , _aws_flow_ruby_settings    :: !(TF.Argument Text)
    {- ^ (Optional) Specify activity and workflow workers for your app using the aws-flow gem. -}
    , _data_source_arn           :: !(TF.Argument Text)
    {- ^ (Optional) The data source's ARN. -}
    , _data_source_database_name :: !(TF.Argument Text)
    {- ^ (Optional) The database name. -}
    , _data_source_type          :: !(TF.Argument Text)
    {- ^ (Optional) The data source's type one of @AutoSelectOpsworksMysqlInstance@ , @OpsworksMysqlInstance@ , or @RdsDbInstance@ . -}
    , _description               :: !(TF.Argument Text)
    {- ^ (Optional) A description of the app. -}
    , _document_root             :: !(TF.Argument Text)
    {- ^ (Optional) Subfolder for the document root for application of type @rails@ . -}
    , _domains                   :: !(TF.Argument Text)
    {- ^ -  (Optional) A list of virtual host alias. -}
    , _enable_ssl                :: !(TF.Argument TF.Bool)
    {- ^ (Optional) Whether to enable SSL for the app. This must be set in order to let @ssl_configuration.private_key@ , @ssl_configuration.certificate@ and @ssl_configuration.chain@ take effect. -}
    , _environment               :: !(TF.Argument Text)
    {- ^ (Optional) Object to define environment variables.  Object is described below. -}
    , _name                      :: !(TF.Argument Text)
    {- ^ (Required) A human-readable name for the application. -}
    , _rails_env                 :: !(TF.Argument Text)
    {- ^ (Required if @type@ = @rails@ ) The name of the Rails environment for application of type @rails@ . -}
    , _short_name                :: !(TF.Argument Text)
    {- ^ (Required) A short, machine-readable name for the application. This can only be defined on resource creation and ignored on resource update. -}
    , _ssl_configuration         :: !(TF.Argument Text)
    {- ^ (Optional) The SSL configuration of the app. Object is described below. -}
    , _stack_id                  :: !(TF.Argument Text)
    {- ^ (Required) The id of the stack the application will belong to. -}
    , _type'                     :: !(TF.Argument Text)
    {- ^ (Required) Opsworks application type. One of @aws-flow-ruby@ , @java@ , @rails@ , @php@ , @nodejs@ , @static@ or @other@ . -}
    , _computed_id               :: !(TF.Attribute Text)
    {- ^ - The id of the application. -}
    } deriving (Show, Eq)

instance TF.ToHCL OpsworksApplicationResource where
    toHCL OpsworksApplicationResource{..} = TF.block $ catMaybes
        [ TF.assign "app_source" <$> TF.argument _app_source
        , TF.assign "auto_bundle_on_deploy" <$> TF.argument _auto_bundle_on_deploy
        , TF.assign "aws_flow_ruby_settings" <$> TF.argument _aws_flow_ruby_settings
        , TF.assign "data_source_arn" <$> TF.argument _data_source_arn
        , TF.assign "data_source_database_name" <$> TF.argument _data_source_database_name
        , TF.assign "data_source_type" <$> TF.argument _data_source_type
        , TF.assign "description" <$> TF.argument _description
        , TF.assign "document_root" <$> TF.argument _document_root
        , TF.assign "domains" <$> TF.argument _domains
        , TF.assign "enable_ssl" <$> TF.argument _enable_ssl
        , TF.assign "environment" <$> TF.argument _environment
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "rails_env" <$> TF.argument _rails_env
        , TF.assign "short_name" <$> TF.argument _short_name
        , TF.assign "ssl_configuration" <$> TF.argument _ssl_configuration
        , TF.assign "stack_id" <$> TF.argument _stack_id
        , TF.assign "type" <$> TF.argument _type'
        ]

instance HasAppSource OpsworksApplicationResource (TF.Argument Text) where
    appSource f s@OpsworksApplicationResource{..} =
        (\a -> s { _app_source = a } :: OpsworksApplicationResource)
             <$> f _app_source

instance HasAutoBundleOnDeploy OpsworksApplicationResource (TF.Argument Text) where
    autoBundleOnDeploy f s@OpsworksApplicationResource{..} =
        (\a -> s { _auto_bundle_on_deploy = a } :: OpsworksApplicationResource)
             <$> f _auto_bundle_on_deploy

instance HasAwsFlowRubySettings OpsworksApplicationResource (TF.Argument Text) where
    awsFlowRubySettings f s@OpsworksApplicationResource{..} =
        (\a -> s { _aws_flow_ruby_settings = a } :: OpsworksApplicationResource)
             <$> f _aws_flow_ruby_settings

instance HasDataSourceArn OpsworksApplicationResource (TF.Argument Text) where
    dataSourceArn f s@OpsworksApplicationResource{..} =
        (\a -> s { _data_source_arn = a } :: OpsworksApplicationResource)
             <$> f _data_source_arn

instance HasDataSourceDatabaseName OpsworksApplicationResource (TF.Argument Text) where
    dataSourceDatabaseName f s@OpsworksApplicationResource{..} =
        (\a -> s { _data_source_database_name = a } :: OpsworksApplicationResource)
             <$> f _data_source_database_name

instance HasDataSourceType OpsworksApplicationResource (TF.Argument Text) where
    dataSourceType f s@OpsworksApplicationResource{..} =
        (\a -> s { _data_source_type = a } :: OpsworksApplicationResource)
             <$> f _data_source_type

instance HasDescription OpsworksApplicationResource (TF.Argument Text) where
    description f s@OpsworksApplicationResource{..} =
        (\a -> s { _description = a } :: OpsworksApplicationResource)
             <$> f _description

instance HasDocumentRoot OpsworksApplicationResource (TF.Argument Text) where
    documentRoot f s@OpsworksApplicationResource{..} =
        (\a -> s { _document_root = a } :: OpsworksApplicationResource)
             <$> f _document_root

instance HasDomains OpsworksApplicationResource (TF.Argument Text) where
    domains f s@OpsworksApplicationResource{..} =
        (\a -> s { _domains = a } :: OpsworksApplicationResource)
             <$> f _domains

instance HasEnableSsl OpsworksApplicationResource (TF.Argument TF.Bool) where
    enableSsl f s@OpsworksApplicationResource{..} =
        (\a -> s { _enable_ssl = a } :: OpsworksApplicationResource)
             <$> f _enable_ssl

instance HasEnvironment OpsworksApplicationResource (TF.Argument Text) where
    environment f s@OpsworksApplicationResource{..} =
        (\a -> s { _environment = a } :: OpsworksApplicationResource)
             <$> f _environment

instance HasName OpsworksApplicationResource (TF.Argument Text) where
    name f s@OpsworksApplicationResource{..} =
        (\a -> s { _name = a } :: OpsworksApplicationResource)
             <$> f _name

instance HasRailsEnv OpsworksApplicationResource (TF.Argument Text) where
    railsEnv f s@OpsworksApplicationResource{..} =
        (\a -> s { _rails_env = a } :: OpsworksApplicationResource)
             <$> f _rails_env

instance HasShortName OpsworksApplicationResource (TF.Argument Text) where
    shortName f s@OpsworksApplicationResource{..} =
        (\a -> s { _short_name = a } :: OpsworksApplicationResource)
             <$> f _short_name

instance HasSslConfiguration OpsworksApplicationResource (TF.Argument Text) where
    sslConfiguration f s@OpsworksApplicationResource{..} =
        (\a -> s { _ssl_configuration = a } :: OpsworksApplicationResource)
             <$> f _ssl_configuration

instance HasStackId OpsworksApplicationResource (TF.Argument Text) where
    stackId f s@OpsworksApplicationResource{..} =
        (\a -> s { _stack_id = a } :: OpsworksApplicationResource)
             <$> f _stack_id

instance HasType' OpsworksApplicationResource (TF.Argument Text) where
    type' f s@OpsworksApplicationResource{..} =
        (\a -> s { _type' = a } :: OpsworksApplicationResource)
             <$> f _type'

instance HasComputedId OpsworksApplicationResource (TF.Attribute Text) where
    computedId f s@OpsworksApplicationResource{..} =
        (\a -> s { _computed_id = a } :: OpsworksApplicationResource)
             <$> f _computed_id

opsworksApplicationResource :: TF.Resource TF.AWS OpsworksApplicationResource
opsworksApplicationResource =
    TF.newResource "aws_opsworks_application" $
        OpsworksApplicationResource {
            _app_source = TF.Nil
            , _auto_bundle_on_deploy = TF.Nil
            , _aws_flow_ruby_settings = TF.Nil
            , _data_source_arn = TF.Nil
            , _data_source_database_name = TF.Nil
            , _data_source_type = TF.Nil
            , _description = TF.Nil
            , _document_root = TF.Nil
            , _domains = TF.Nil
            , _enable_ssl = TF.Nil
            , _environment = TF.Nil
            , _name = TF.Nil
            , _rails_env = TF.Nil
            , _short_name = TF.Nil
            , _ssl_configuration = TF.Nil
            , _stack_id = TF.Nil
            , _type' = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_opsworks_custom_layer@ AWS resource.

Provides an OpsWorks custom layer resource.
-}
data OpsworksCustomLayerResource = OpsworksCustomLayerResource {
      _auto_assign_elastic_ips     :: !(TF.Argument Text)
    {- ^ (Optional) Whether to automatically assign an elastic IP address to the layer's instances. -}
    , _auto_assign_public_ips      :: !(TF.Argument Text)
    {- ^ (Optional) For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances. -}
    , _auto_healing                :: !(TF.Argument Text)
    {- ^ (Optional) Whether to enable auto-healing for the layer. -}
    , _custom_instance_profile_arn :: !(TF.Argument Text)
    {- ^ (Optional) The ARN of an IAM profile that will be used for the layer's instances. -}
    , _custom_json                 :: !(TF.Argument Text)
    {- ^ (Optional) Custom JSON attributes to apply to the layer. -}
    , _custom_security_group_ids   :: !(TF.Argument Text)
    {- ^ (Optional) Ids for a set of security groups to apply to the layer's instances. -}
    , _drain_elb_on_shutdown       :: !(TF.Argument Text)
    {- ^ (Optional) Whether to enable Elastic Load Balancing connection draining. -}
    , _ebs_volume                  :: !(TF.Argument Text)
    {- ^ (Optional) @ebs_volume@ blocks, as described below, will each create an EBS volume and connect it to the layer's instances. -}
    , _elastic_load_balancer       :: !(TF.Argument Text)
    {- ^ (Optional) Name of an Elastic Load Balancer to attach to this layer -}
    , _install_updates_on_boot     :: !(TF.Argument Text)
    {- ^ (Optional) Whether to install OS and package updates on each instance when it boots. -}
    , _instance_shutdown_timeout   :: !(TF.Argument Text)
    {- ^ (Optional) The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event. -}
    , _name                        :: !(TF.Argument Text)
    {- ^ (Required) A human-readable name for the layer. -}
    , _short_name                  :: !(TF.Argument Text)
    {- ^ (Required) A short, machine-readable name for the layer, which will be used to identify it in the Chef node JSON. -}
    , _stack_id                    :: !(TF.Argument Text)
    {- ^ (Required) The id of the stack the layer will belong to. -}
    , _system_packages             :: !(TF.Argument Text)
    {- ^ (Optional) Names of a set of system packages to install on the layer's instances. -}
    , _use_ebs_optimized_instances :: !(TF.Argument Text)
    {- ^ (Optional) Whether to use EBS-optimized instances. -}
    , _computed_id                 :: !(TF.Attribute Text)
    {- ^ - The id of the layer. -}
    } deriving (Show, Eq)

instance TF.ToHCL OpsworksCustomLayerResource where
    toHCL OpsworksCustomLayerResource{..} = TF.block $ catMaybes
        [ TF.assign "auto_assign_elastic_ips" <$> TF.argument _auto_assign_elastic_ips
        , TF.assign "auto_assign_public_ips" <$> TF.argument _auto_assign_public_ips
        , TF.assign "auto_healing" <$> TF.argument _auto_healing
        , TF.assign "custom_instance_profile_arn" <$> TF.argument _custom_instance_profile_arn
        , TF.assign "custom_json" <$> TF.argument _custom_json
        , TF.assign "custom_security_group_ids" <$> TF.argument _custom_security_group_ids
        , TF.assign "drain_elb_on_shutdown" <$> TF.argument _drain_elb_on_shutdown
        , TF.assign "ebs_volume" <$> TF.argument _ebs_volume
        , TF.assign "elastic_load_balancer" <$> TF.argument _elastic_load_balancer
        , TF.assign "install_updates_on_boot" <$> TF.argument _install_updates_on_boot
        , TF.assign "instance_shutdown_timeout" <$> TF.argument _instance_shutdown_timeout
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "short_name" <$> TF.argument _short_name
        , TF.assign "stack_id" <$> TF.argument _stack_id
        , TF.assign "system_packages" <$> TF.argument _system_packages
        , TF.assign "use_ebs_optimized_instances" <$> TF.argument _use_ebs_optimized_instances
        ]

instance HasAutoAssignElasticIps OpsworksCustomLayerResource (TF.Argument Text) where
    autoAssignElasticIps f s@OpsworksCustomLayerResource{..} =
        (\a -> s { _auto_assign_elastic_ips = a } :: OpsworksCustomLayerResource)
             <$> f _auto_assign_elastic_ips

instance HasAutoAssignPublicIps OpsworksCustomLayerResource (TF.Argument Text) where
    autoAssignPublicIps f s@OpsworksCustomLayerResource{..} =
        (\a -> s { _auto_assign_public_ips = a } :: OpsworksCustomLayerResource)
             <$> f _auto_assign_public_ips

instance HasAutoHealing OpsworksCustomLayerResource (TF.Argument Text) where
    autoHealing f s@OpsworksCustomLayerResource{..} =
        (\a -> s { _auto_healing = a } :: OpsworksCustomLayerResource)
             <$> f _auto_healing

instance HasCustomInstanceProfileArn OpsworksCustomLayerResource (TF.Argument Text) where
    customInstanceProfileArn f s@OpsworksCustomLayerResource{..} =
        (\a -> s { _custom_instance_profile_arn = a } :: OpsworksCustomLayerResource)
             <$> f _custom_instance_profile_arn

instance HasCustomJson OpsworksCustomLayerResource (TF.Argument Text) where
    customJson f s@OpsworksCustomLayerResource{..} =
        (\a -> s { _custom_json = a } :: OpsworksCustomLayerResource)
             <$> f _custom_json

instance HasCustomSecurityGroupIds OpsworksCustomLayerResource (TF.Argument Text) where
    customSecurityGroupIds f s@OpsworksCustomLayerResource{..} =
        (\a -> s { _custom_security_group_ids = a } :: OpsworksCustomLayerResource)
             <$> f _custom_security_group_ids

instance HasDrainElbOnShutdown OpsworksCustomLayerResource (TF.Argument Text) where
    drainElbOnShutdown f s@OpsworksCustomLayerResource{..} =
        (\a -> s { _drain_elb_on_shutdown = a } :: OpsworksCustomLayerResource)
             <$> f _drain_elb_on_shutdown

instance HasEbsVolume OpsworksCustomLayerResource (TF.Argument Text) where
    ebsVolume f s@OpsworksCustomLayerResource{..} =
        (\a -> s { _ebs_volume = a } :: OpsworksCustomLayerResource)
             <$> f _ebs_volume

instance HasElasticLoadBalancer OpsworksCustomLayerResource (TF.Argument Text) where
    elasticLoadBalancer f s@OpsworksCustomLayerResource{..} =
        (\a -> s { _elastic_load_balancer = a } :: OpsworksCustomLayerResource)
             <$> f _elastic_load_balancer

instance HasInstallUpdatesOnBoot OpsworksCustomLayerResource (TF.Argument Text) where
    installUpdatesOnBoot f s@OpsworksCustomLayerResource{..} =
        (\a -> s { _install_updates_on_boot = a } :: OpsworksCustomLayerResource)
             <$> f _install_updates_on_boot

instance HasInstanceShutdownTimeout OpsworksCustomLayerResource (TF.Argument Text) where
    instanceShutdownTimeout f s@OpsworksCustomLayerResource{..} =
        (\a -> s { _instance_shutdown_timeout = a } :: OpsworksCustomLayerResource)
             <$> f _instance_shutdown_timeout

instance HasName OpsworksCustomLayerResource (TF.Argument Text) where
    name f s@OpsworksCustomLayerResource{..} =
        (\a -> s { _name = a } :: OpsworksCustomLayerResource)
             <$> f _name

instance HasShortName OpsworksCustomLayerResource (TF.Argument Text) where
    shortName f s@OpsworksCustomLayerResource{..} =
        (\a -> s { _short_name = a } :: OpsworksCustomLayerResource)
             <$> f _short_name

instance HasStackId OpsworksCustomLayerResource (TF.Argument Text) where
    stackId f s@OpsworksCustomLayerResource{..} =
        (\a -> s { _stack_id = a } :: OpsworksCustomLayerResource)
             <$> f _stack_id

instance HasSystemPackages OpsworksCustomLayerResource (TF.Argument Text) where
    systemPackages f s@OpsworksCustomLayerResource{..} =
        (\a -> s { _system_packages = a } :: OpsworksCustomLayerResource)
             <$> f _system_packages

instance HasUseEbsOptimizedInstances OpsworksCustomLayerResource (TF.Argument Text) where
    useEbsOptimizedInstances f s@OpsworksCustomLayerResource{..} =
        (\a -> s { _use_ebs_optimized_instances = a } :: OpsworksCustomLayerResource)
             <$> f _use_ebs_optimized_instances

instance HasComputedId OpsworksCustomLayerResource (TF.Attribute Text) where
    computedId f s@OpsworksCustomLayerResource{..} =
        (\a -> s { _computed_id = a } :: OpsworksCustomLayerResource)
             <$> f _computed_id

opsworksCustomLayerResource :: TF.Resource TF.AWS OpsworksCustomLayerResource
opsworksCustomLayerResource =
    TF.newResource "aws_opsworks_custom_layer" $
        OpsworksCustomLayerResource {
            _auto_assign_elastic_ips = TF.Nil
            , _auto_assign_public_ips = TF.Nil
            , _auto_healing = TF.Nil
            , _custom_instance_profile_arn = TF.Nil
            , _custom_json = TF.Nil
            , _custom_security_group_ids = TF.Nil
            , _drain_elb_on_shutdown = TF.Nil
            , _ebs_volume = TF.Nil
            , _elastic_load_balancer = TF.Nil
            , _install_updates_on_boot = TF.Nil
            , _instance_shutdown_timeout = TF.Nil
            , _name = TF.Nil
            , _short_name = TF.Nil
            , _stack_id = TF.Nil
            , _system_packages = TF.Nil
            , _use_ebs_optimized_instances = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_opsworks_ganglia_layer@ AWS resource.

Provides an OpsWorks Ganglia layer resource.
-}
data OpsworksGangliaLayerResource = OpsworksGangliaLayerResource {
      _auto_assign_elastic_ips     :: !(TF.Argument Text)
    {- ^ (Optional) Whether to automatically assign an elastic IP address to the layer's instances. -}
    , _auto_assign_public_ips      :: !(TF.Argument Text)
    {- ^ (Optional) For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances. -}
    , _auto_healing                :: !(TF.Argument Text)
    {- ^ (Optional) Whether to enable auto-healing for the layer. -}
    , _custom_instance_profile_arn :: !(TF.Argument Text)
    {- ^ (Optional) The ARN of an IAM profile that will be used for the layer's instances. -}
    , _custom_json                 :: !(TF.Argument Text)
    {- ^ (Optional) Custom JSON attributes to apply to the layer. -}
    , _custom_security_group_ids   :: !(TF.Argument Text)
    {- ^ (Optional) Ids for a set of security groups to apply to the layer's instances. -}
    , _drain_elb_on_shutdown       :: !(TF.Argument Text)
    {- ^ (Optional) Whether to enable Elastic Load Balancing connection draining. -}
    , _ebs_volume                  :: !(TF.Argument Text)
    {- ^ (Optional) @ebs_volume@ blocks, as described below, will each create an EBS volume and connect it to the layer's instances. -}
    , _elastic_load_balancer       :: !(TF.Argument Text)
    {- ^ (Optional) Name of an Elastic Load Balancer to attach to this layer -}
    , _install_updates_on_boot     :: !(TF.Argument Text)
    {- ^ (Optional) Whether to install OS and package updates on each instance when it boots. -}
    , _instance_shutdown_timeout   :: !(TF.Argument Text)
    {- ^ (Optional) The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event. -}
    , _name                        :: !(TF.Argument Text)
    {- ^ (Optional) A human-readable name for the layer. -}
    , _password                    :: !(TF.Argument Text)
    {- ^ (Required) The password to use for Ganglia. -}
    , _stack_id                    :: !(TF.Argument Text)
    {- ^ (Required) The id of the stack the layer will belong to. -}
    , _system_packages             :: !(TF.Argument Text)
    {- ^ (Optional) Names of a set of system packages to install on the layer's instances. -}
    , _url                         :: !(TF.Argument Text)
    {- ^ (Optional) The URL path to use for Ganglia. Defaults to "/ganglia". -}
    , _use_ebs_optimized_instances :: !(TF.Argument Text)
    {- ^ (Optional) Whether to use EBS-optimized instances. -}
    , _username                    :: !(TF.Argument Text)
    {- ^ - (Optiona) The username to use for Ganglia. Defaults to "opsworks". -}
    , _computed_id                 :: !(TF.Attribute Text)
    {- ^ - The id of the layer. -}
    } deriving (Show, Eq)

instance TF.ToHCL OpsworksGangliaLayerResource where
    toHCL OpsworksGangliaLayerResource{..} = TF.block $ catMaybes
        [ TF.assign "auto_assign_elastic_ips" <$> TF.argument _auto_assign_elastic_ips
        , TF.assign "auto_assign_public_ips" <$> TF.argument _auto_assign_public_ips
        , TF.assign "auto_healing" <$> TF.argument _auto_healing
        , TF.assign "custom_instance_profile_arn" <$> TF.argument _custom_instance_profile_arn
        , TF.assign "custom_json" <$> TF.argument _custom_json
        , TF.assign "custom_security_group_ids" <$> TF.argument _custom_security_group_ids
        , TF.assign "drain_elb_on_shutdown" <$> TF.argument _drain_elb_on_shutdown
        , TF.assign "ebs_volume" <$> TF.argument _ebs_volume
        , TF.assign "elastic_load_balancer" <$> TF.argument _elastic_load_balancer
        , TF.assign "install_updates_on_boot" <$> TF.argument _install_updates_on_boot
        , TF.assign "instance_shutdown_timeout" <$> TF.argument _instance_shutdown_timeout
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "password" <$> TF.argument _password
        , TF.assign "stack_id" <$> TF.argument _stack_id
        , TF.assign "system_packages" <$> TF.argument _system_packages
        , TF.assign "url" <$> TF.argument _url
        , TF.assign "use_ebs_optimized_instances" <$> TF.argument _use_ebs_optimized_instances
        , TF.assign "username" <$> TF.argument _username
        ]

instance HasAutoAssignElasticIps OpsworksGangliaLayerResource (TF.Argument Text) where
    autoAssignElasticIps f s@OpsworksGangliaLayerResource{..} =
        (\a -> s { _auto_assign_elastic_ips = a } :: OpsworksGangliaLayerResource)
             <$> f _auto_assign_elastic_ips

instance HasAutoAssignPublicIps OpsworksGangliaLayerResource (TF.Argument Text) where
    autoAssignPublicIps f s@OpsworksGangliaLayerResource{..} =
        (\a -> s { _auto_assign_public_ips = a } :: OpsworksGangliaLayerResource)
             <$> f _auto_assign_public_ips

instance HasAutoHealing OpsworksGangliaLayerResource (TF.Argument Text) where
    autoHealing f s@OpsworksGangliaLayerResource{..} =
        (\a -> s { _auto_healing = a } :: OpsworksGangliaLayerResource)
             <$> f _auto_healing

instance HasCustomInstanceProfileArn OpsworksGangliaLayerResource (TF.Argument Text) where
    customInstanceProfileArn f s@OpsworksGangliaLayerResource{..} =
        (\a -> s { _custom_instance_profile_arn = a } :: OpsworksGangliaLayerResource)
             <$> f _custom_instance_profile_arn

instance HasCustomJson OpsworksGangliaLayerResource (TF.Argument Text) where
    customJson f s@OpsworksGangliaLayerResource{..} =
        (\a -> s { _custom_json = a } :: OpsworksGangliaLayerResource)
             <$> f _custom_json

instance HasCustomSecurityGroupIds OpsworksGangliaLayerResource (TF.Argument Text) where
    customSecurityGroupIds f s@OpsworksGangliaLayerResource{..} =
        (\a -> s { _custom_security_group_ids = a } :: OpsworksGangliaLayerResource)
             <$> f _custom_security_group_ids

instance HasDrainElbOnShutdown OpsworksGangliaLayerResource (TF.Argument Text) where
    drainElbOnShutdown f s@OpsworksGangliaLayerResource{..} =
        (\a -> s { _drain_elb_on_shutdown = a } :: OpsworksGangliaLayerResource)
             <$> f _drain_elb_on_shutdown

instance HasEbsVolume OpsworksGangliaLayerResource (TF.Argument Text) where
    ebsVolume f s@OpsworksGangliaLayerResource{..} =
        (\a -> s { _ebs_volume = a } :: OpsworksGangliaLayerResource)
             <$> f _ebs_volume

instance HasElasticLoadBalancer OpsworksGangliaLayerResource (TF.Argument Text) where
    elasticLoadBalancer f s@OpsworksGangliaLayerResource{..} =
        (\a -> s { _elastic_load_balancer = a } :: OpsworksGangliaLayerResource)
             <$> f _elastic_load_balancer

instance HasInstallUpdatesOnBoot OpsworksGangliaLayerResource (TF.Argument Text) where
    installUpdatesOnBoot f s@OpsworksGangliaLayerResource{..} =
        (\a -> s { _install_updates_on_boot = a } :: OpsworksGangliaLayerResource)
             <$> f _install_updates_on_boot

instance HasInstanceShutdownTimeout OpsworksGangliaLayerResource (TF.Argument Text) where
    instanceShutdownTimeout f s@OpsworksGangliaLayerResource{..} =
        (\a -> s { _instance_shutdown_timeout = a } :: OpsworksGangliaLayerResource)
             <$> f _instance_shutdown_timeout

instance HasName OpsworksGangliaLayerResource (TF.Argument Text) where
    name f s@OpsworksGangliaLayerResource{..} =
        (\a -> s { _name = a } :: OpsworksGangliaLayerResource)
             <$> f _name

instance HasPassword OpsworksGangliaLayerResource (TF.Argument Text) where
    password f s@OpsworksGangliaLayerResource{..} =
        (\a -> s { _password = a } :: OpsworksGangliaLayerResource)
             <$> f _password

instance HasStackId OpsworksGangliaLayerResource (TF.Argument Text) where
    stackId f s@OpsworksGangliaLayerResource{..} =
        (\a -> s { _stack_id = a } :: OpsworksGangliaLayerResource)
             <$> f _stack_id

instance HasSystemPackages OpsworksGangliaLayerResource (TF.Argument Text) where
    systemPackages f s@OpsworksGangliaLayerResource{..} =
        (\a -> s { _system_packages = a } :: OpsworksGangliaLayerResource)
             <$> f _system_packages

instance HasUrl OpsworksGangliaLayerResource (TF.Argument Text) where
    url f s@OpsworksGangliaLayerResource{..} =
        (\a -> s { _url = a } :: OpsworksGangliaLayerResource)
             <$> f _url

instance HasUseEbsOptimizedInstances OpsworksGangliaLayerResource (TF.Argument Text) where
    useEbsOptimizedInstances f s@OpsworksGangliaLayerResource{..} =
        (\a -> s { _use_ebs_optimized_instances = a } :: OpsworksGangliaLayerResource)
             <$> f _use_ebs_optimized_instances

instance HasUsername OpsworksGangliaLayerResource (TF.Argument Text) where
    username f s@OpsworksGangliaLayerResource{..} =
        (\a -> s { _username = a } :: OpsworksGangliaLayerResource)
             <$> f _username

instance HasComputedId OpsworksGangliaLayerResource (TF.Attribute Text) where
    computedId f s@OpsworksGangliaLayerResource{..} =
        (\a -> s { _computed_id = a } :: OpsworksGangliaLayerResource)
             <$> f _computed_id

opsworksGangliaLayerResource :: TF.Resource TF.AWS OpsworksGangliaLayerResource
opsworksGangliaLayerResource =
    TF.newResource "aws_opsworks_ganglia_layer" $
        OpsworksGangliaLayerResource {
            _auto_assign_elastic_ips = TF.Nil
            , _auto_assign_public_ips = TF.Nil
            , _auto_healing = TF.Nil
            , _custom_instance_profile_arn = TF.Nil
            , _custom_json = TF.Nil
            , _custom_security_group_ids = TF.Nil
            , _drain_elb_on_shutdown = TF.Nil
            , _ebs_volume = TF.Nil
            , _elastic_load_balancer = TF.Nil
            , _install_updates_on_boot = TF.Nil
            , _instance_shutdown_timeout = TF.Nil
            , _name = TF.Nil
            , _password = TF.Nil
            , _stack_id = TF.Nil
            , _system_packages = TF.Nil
            , _url = TF.Nil
            , _use_ebs_optimized_instances = TF.Nil
            , _username = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_opsworks_haproxy_layer@ AWS resource.

Provides an OpsWorks haproxy layer resource.
-}
data OpsworksHaproxyLayerResource = OpsworksHaproxyLayerResource {
      _auto_assign_elastic_ips     :: !(TF.Argument Text)
    {- ^ (Optional) Whether to automatically assign an elastic IP address to the layer's instances. -}
    , _auto_assign_public_ips      :: !(TF.Argument Text)
    {- ^ (Optional) For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances. -}
    , _auto_healing                :: !(TF.Argument Text)
    {- ^ (Optional) Whether to enable auto-healing for the layer. -}
    , _custom_instance_profile_arn :: !(TF.Argument Text)
    {- ^ (Optional) The ARN of an IAM profile that will be used for the layer's instances. -}
    , _custom_json                 :: !(TF.Argument Text)
    {- ^ (Optional) Custom JSON attributes to apply to the layer. -}
    , _custom_security_group_ids   :: !(TF.Argument Text)
    {- ^ (Optional) Ids for a set of security groups to apply to the layer's instances. -}
    , _drain_elb_on_shutdown       :: !(TF.Argument Text)
    {- ^ (Optional) Whether to enable Elastic Load Balancing connection draining. -}
    , _ebs_volume                  :: !(TF.Argument Text)
    {- ^ (Optional) @ebs_volume@ blocks, as described below, will each create an EBS volume and connect it to the layer's instances. -}
    , _elastic_load_balancer       :: !(TF.Argument Text)
    {- ^ (Optional) Name of an Elastic Load Balancer to attach to this layer -}
    , _healthcheck_method          :: !(TF.Argument Text)
    {- ^ (Optional) HTTP method to use for instance healthchecks. Defaults to "OPTIONS". -}
    , _healthcheck_url             :: !(TF.Argument Text)
    {- ^ (Optional) URL path to use for instance healthchecks. Defaults to "/". -}
    , _install_updates_on_boot     :: !(TF.Argument Text)
    {- ^ (Optional) Whether to install OS and package updates on each instance when it boots. -}
    , _instance_shutdown_timeout   :: !(TF.Argument Text)
    {- ^ (Optional) The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event. -}
    , _name                        :: !(TF.Argument Text)
    {- ^ (Optional) A human-readable name for the layer. -}
    , _stack_id                    :: !(TF.Argument Text)
    {- ^ (Required) The id of the stack the layer will belong to. -}
    , _stats_enabled               :: !(TF.Argument TF.Bool)
    {- ^ (Optional) Whether to enable HAProxy stats. -}
    , _stats_password              :: !(TF.Argument Text)
    {- ^ (Required) The password to use for HAProxy stats. -}
    , _stats_url                   :: !(TF.Argument Text)
    {- ^ (Optional) The HAProxy stats URL. Defaults to "/haproxy?stats". -}
    , _stats_user                  :: !(TF.Argument Text)
    {- ^ (Optional) The username for HAProxy stats. Defaults to "opsworks". -}
    , _system_packages             :: !(TF.Argument Text)
    {- ^ (Optional) Names of a set of system packages to install on the layer's instances. -}
    , _use_ebs_optimized_instances :: !(TF.Argument Text)
    {- ^ (Optional) Whether to use EBS-optimized instances. -}
    , _computed_id                 :: !(TF.Attribute Text)
    {- ^ - The id of the layer. -}
    } deriving (Show, Eq)

instance TF.ToHCL OpsworksHaproxyLayerResource where
    toHCL OpsworksHaproxyLayerResource{..} = TF.block $ catMaybes
        [ TF.assign "auto_assign_elastic_ips" <$> TF.argument _auto_assign_elastic_ips
        , TF.assign "auto_assign_public_ips" <$> TF.argument _auto_assign_public_ips
        , TF.assign "auto_healing" <$> TF.argument _auto_healing
        , TF.assign "custom_instance_profile_arn" <$> TF.argument _custom_instance_profile_arn
        , TF.assign "custom_json" <$> TF.argument _custom_json
        , TF.assign "custom_security_group_ids" <$> TF.argument _custom_security_group_ids
        , TF.assign "drain_elb_on_shutdown" <$> TF.argument _drain_elb_on_shutdown
        , TF.assign "ebs_volume" <$> TF.argument _ebs_volume
        , TF.assign "elastic_load_balancer" <$> TF.argument _elastic_load_balancer
        , TF.assign "healthcheck_method" <$> TF.argument _healthcheck_method
        , TF.assign "healthcheck_url" <$> TF.argument _healthcheck_url
        , TF.assign "install_updates_on_boot" <$> TF.argument _install_updates_on_boot
        , TF.assign "instance_shutdown_timeout" <$> TF.argument _instance_shutdown_timeout
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "stack_id" <$> TF.argument _stack_id
        , TF.assign "stats_enabled" <$> TF.argument _stats_enabled
        , TF.assign "stats_password" <$> TF.argument _stats_password
        , TF.assign "stats_url" <$> TF.argument _stats_url
        , TF.assign "stats_user" <$> TF.argument _stats_user
        , TF.assign "system_packages" <$> TF.argument _system_packages
        , TF.assign "use_ebs_optimized_instances" <$> TF.argument _use_ebs_optimized_instances
        ]

instance HasAutoAssignElasticIps OpsworksHaproxyLayerResource (TF.Argument Text) where
    autoAssignElasticIps f s@OpsworksHaproxyLayerResource{..} =
        (\a -> s { _auto_assign_elastic_ips = a } :: OpsworksHaproxyLayerResource)
             <$> f _auto_assign_elastic_ips

instance HasAutoAssignPublicIps OpsworksHaproxyLayerResource (TF.Argument Text) where
    autoAssignPublicIps f s@OpsworksHaproxyLayerResource{..} =
        (\a -> s { _auto_assign_public_ips = a } :: OpsworksHaproxyLayerResource)
             <$> f _auto_assign_public_ips

instance HasAutoHealing OpsworksHaproxyLayerResource (TF.Argument Text) where
    autoHealing f s@OpsworksHaproxyLayerResource{..} =
        (\a -> s { _auto_healing = a } :: OpsworksHaproxyLayerResource)
             <$> f _auto_healing

instance HasCustomInstanceProfileArn OpsworksHaproxyLayerResource (TF.Argument Text) where
    customInstanceProfileArn f s@OpsworksHaproxyLayerResource{..} =
        (\a -> s { _custom_instance_profile_arn = a } :: OpsworksHaproxyLayerResource)
             <$> f _custom_instance_profile_arn

instance HasCustomJson OpsworksHaproxyLayerResource (TF.Argument Text) where
    customJson f s@OpsworksHaproxyLayerResource{..} =
        (\a -> s { _custom_json = a } :: OpsworksHaproxyLayerResource)
             <$> f _custom_json

instance HasCustomSecurityGroupIds OpsworksHaproxyLayerResource (TF.Argument Text) where
    customSecurityGroupIds f s@OpsworksHaproxyLayerResource{..} =
        (\a -> s { _custom_security_group_ids = a } :: OpsworksHaproxyLayerResource)
             <$> f _custom_security_group_ids

instance HasDrainElbOnShutdown OpsworksHaproxyLayerResource (TF.Argument Text) where
    drainElbOnShutdown f s@OpsworksHaproxyLayerResource{..} =
        (\a -> s { _drain_elb_on_shutdown = a } :: OpsworksHaproxyLayerResource)
             <$> f _drain_elb_on_shutdown

instance HasEbsVolume OpsworksHaproxyLayerResource (TF.Argument Text) where
    ebsVolume f s@OpsworksHaproxyLayerResource{..} =
        (\a -> s { _ebs_volume = a } :: OpsworksHaproxyLayerResource)
             <$> f _ebs_volume

instance HasElasticLoadBalancer OpsworksHaproxyLayerResource (TF.Argument Text) where
    elasticLoadBalancer f s@OpsworksHaproxyLayerResource{..} =
        (\a -> s { _elastic_load_balancer = a } :: OpsworksHaproxyLayerResource)
             <$> f _elastic_load_balancer

instance HasHealthcheckMethod OpsworksHaproxyLayerResource (TF.Argument Text) where
    healthcheckMethod f s@OpsworksHaproxyLayerResource{..} =
        (\a -> s { _healthcheck_method = a } :: OpsworksHaproxyLayerResource)
             <$> f _healthcheck_method

instance HasHealthcheckUrl OpsworksHaproxyLayerResource (TF.Argument Text) where
    healthcheckUrl f s@OpsworksHaproxyLayerResource{..} =
        (\a -> s { _healthcheck_url = a } :: OpsworksHaproxyLayerResource)
             <$> f _healthcheck_url

instance HasInstallUpdatesOnBoot OpsworksHaproxyLayerResource (TF.Argument Text) where
    installUpdatesOnBoot f s@OpsworksHaproxyLayerResource{..} =
        (\a -> s { _install_updates_on_boot = a } :: OpsworksHaproxyLayerResource)
             <$> f _install_updates_on_boot

instance HasInstanceShutdownTimeout OpsworksHaproxyLayerResource (TF.Argument Text) where
    instanceShutdownTimeout f s@OpsworksHaproxyLayerResource{..} =
        (\a -> s { _instance_shutdown_timeout = a } :: OpsworksHaproxyLayerResource)
             <$> f _instance_shutdown_timeout

instance HasName OpsworksHaproxyLayerResource (TF.Argument Text) where
    name f s@OpsworksHaproxyLayerResource{..} =
        (\a -> s { _name = a } :: OpsworksHaproxyLayerResource)
             <$> f _name

instance HasStackId OpsworksHaproxyLayerResource (TF.Argument Text) where
    stackId f s@OpsworksHaproxyLayerResource{..} =
        (\a -> s { _stack_id = a } :: OpsworksHaproxyLayerResource)
             <$> f _stack_id

instance HasStatsEnabled OpsworksHaproxyLayerResource (TF.Argument TF.Bool) where
    statsEnabled f s@OpsworksHaproxyLayerResource{..} =
        (\a -> s { _stats_enabled = a } :: OpsworksHaproxyLayerResource)
             <$> f _stats_enabled

instance HasStatsPassword OpsworksHaproxyLayerResource (TF.Argument Text) where
    statsPassword f s@OpsworksHaproxyLayerResource{..} =
        (\a -> s { _stats_password = a } :: OpsworksHaproxyLayerResource)
             <$> f _stats_password

instance HasStatsUrl OpsworksHaproxyLayerResource (TF.Argument Text) where
    statsUrl f s@OpsworksHaproxyLayerResource{..} =
        (\a -> s { _stats_url = a } :: OpsworksHaproxyLayerResource)
             <$> f _stats_url

instance HasStatsUser OpsworksHaproxyLayerResource (TF.Argument Text) where
    statsUser f s@OpsworksHaproxyLayerResource{..} =
        (\a -> s { _stats_user = a } :: OpsworksHaproxyLayerResource)
             <$> f _stats_user

instance HasSystemPackages OpsworksHaproxyLayerResource (TF.Argument Text) where
    systemPackages f s@OpsworksHaproxyLayerResource{..} =
        (\a -> s { _system_packages = a } :: OpsworksHaproxyLayerResource)
             <$> f _system_packages

instance HasUseEbsOptimizedInstances OpsworksHaproxyLayerResource (TF.Argument Text) where
    useEbsOptimizedInstances f s@OpsworksHaproxyLayerResource{..} =
        (\a -> s { _use_ebs_optimized_instances = a } :: OpsworksHaproxyLayerResource)
             <$> f _use_ebs_optimized_instances

instance HasComputedId OpsworksHaproxyLayerResource (TF.Attribute Text) where
    computedId f s@OpsworksHaproxyLayerResource{..} =
        (\a -> s { _computed_id = a } :: OpsworksHaproxyLayerResource)
             <$> f _computed_id

opsworksHaproxyLayerResource :: TF.Resource TF.AWS OpsworksHaproxyLayerResource
opsworksHaproxyLayerResource =
    TF.newResource "aws_opsworks_haproxy_layer" $
        OpsworksHaproxyLayerResource {
            _auto_assign_elastic_ips = TF.Nil
            , _auto_assign_public_ips = TF.Nil
            , _auto_healing = TF.Nil
            , _custom_instance_profile_arn = TF.Nil
            , _custom_json = TF.Nil
            , _custom_security_group_ids = TF.Nil
            , _drain_elb_on_shutdown = TF.Nil
            , _ebs_volume = TF.Nil
            , _elastic_load_balancer = TF.Nil
            , _healthcheck_method = TF.Nil
            , _healthcheck_url = TF.Nil
            , _install_updates_on_boot = TF.Nil
            , _instance_shutdown_timeout = TF.Nil
            , _name = TF.Nil
            , _stack_id = TF.Nil
            , _stats_enabled = TF.Nil
            , _stats_password = TF.Nil
            , _stats_url = TF.Nil
            , _stats_user = TF.Nil
            , _system_packages = TF.Nil
            , _use_ebs_optimized_instances = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_opsworks_instance@ AWS resource.

Provides an OpsWorks instance resource.
-}
data OpsworksInstanceResource = OpsworksInstanceResource {
      _agent_version           :: !(TF.Argument Text)
    {- ^ (Optional) The AWS OpsWorks agent to install.  Defaults to @"INHERIT"@ . -}
    , _ami_id                  :: !(TF.Argument Text)
    {- ^ (Optional) The AMI to use for the instance.  If an AMI is specified, @os@ must be @"Custom"@ . -}
    , _architecture            :: !(TF.Argument Text)
    {- ^ (Optional) Machine architecture for created instances.  Can be either @"x86_64"@ (the default) or @"i386"@ -}
    , _auto_scaling_type       :: !(TF.Argument Text)
    {- ^ (Optional) Creates load-based or time-based instances.  If set, can be either: @"load"@ or @"timer"@ . -}
    , _availability_zone       :: !(TF.Argument Text)
    {- ^ (Optional) Name of the availability zone where instances will be created by default. -}
    , _ebs_block_device        :: !(TF.Argument Text)
    {- ^ (Optional) Additional EBS block devices to attach to the instance.  See <#block-devices> below for details. -}
    , _ebs_optimized           :: !(TF.Argument Text)
    {- ^ (Optional) If true, the launched EC2 instance will be EBS-optimized. -}
    , _ephemeral_block_device  :: !(TF.Argument Text)
    {- ^ (Optional) Customize Ephemeral (also known as "Instance Store") volumes on the instance. See <#block-devices> below for details. -}
    , _hostname                :: !(TF.Argument Text)
    {- ^ (Optional) The instance's host name. -}
    , _install_updates_on_boot :: !(TF.Argument Text)
    {- ^ (Optional) Controls where to install OS and package updates when the instance boots.  Defaults to @true@ . -}
    , _instance_type           :: !(TF.Argument Text)
    {- ^ (Required) The type of instance to start -}
    , _layer_ids               :: !(TF.Argument Text)
    {- ^ (Required) The ids of the layers the instance will belong to. -}
    , _os                      :: !(TF.Argument Text)
    {- ^ (Optional) Name of operating system that will be installed. -}
    , _root_block_device       :: !(TF.Argument Text)
    {- ^ (Optional) Customize details about the root block device of the instance. See <#block-devices> below for details. -}
    , _root_device_type        :: !(TF.Argument Text)
    {- ^ (Optional) Name of the type of root device instances will have by default.  Can be either @"ebs"@ or @"instance-store"@ -}
    , _ssh_key_name            :: !(TF.Argument Text)
    {- ^ (Optional) Name of the SSH keypair that instances will have by default. -}
    , _stack_id                :: !(TF.Argument Text)
    {- ^ (Required) The id of the stack the instance will belong to. -}
    , _state                   :: !(TF.Argument Text)
    {- ^ (Optional) The desired state of the instance.  Can be either @"running"@ or @"stopped"@ . -}
    , _subnet_id               :: !(TF.Argument Text)
    {- ^ (Optional) Subnet ID to attach to -}
    , _tenancy                 :: !(TF.Argument Text)
    {- ^ (Optional) Instance tenancy to use. Can be one of @"default"@ , @"dedicated"@ or @"host"@ -}
    , _virtualization_type     :: !(TF.Argument Text)
    {- ^ (Optional) Keyword to choose what virtualization mode created instances will use. Can be either @"paravirtual"@ or @"hvm"@ . -}
    } deriving (Show, Eq)

instance TF.ToHCL OpsworksInstanceResource where
    toHCL OpsworksInstanceResource{..} = TF.block $ catMaybes
        [ TF.assign "agent_version" <$> TF.argument _agent_version
        , TF.assign "ami_id" <$> TF.argument _ami_id
        , TF.assign "architecture" <$> TF.argument _architecture
        , TF.assign "auto_scaling_type" <$> TF.argument _auto_scaling_type
        , TF.assign "availability_zone" <$> TF.argument _availability_zone
        , TF.assign "ebs_block_device" <$> TF.argument _ebs_block_device
        , TF.assign "ebs_optimized" <$> TF.argument _ebs_optimized
        , TF.assign "ephemeral_block_device" <$> TF.argument _ephemeral_block_device
        , TF.assign "hostname" <$> TF.argument _hostname
        , TF.assign "install_updates_on_boot" <$> TF.argument _install_updates_on_boot
        , TF.assign "instance_type" <$> TF.argument _instance_type
        , TF.assign "layer_ids" <$> TF.argument _layer_ids
        , TF.assign "os" <$> TF.argument _os
        , TF.assign "root_block_device" <$> TF.argument _root_block_device
        , TF.assign "root_device_type" <$> TF.argument _root_device_type
        , TF.assign "ssh_key_name" <$> TF.argument _ssh_key_name
        , TF.assign "stack_id" <$> TF.argument _stack_id
        , TF.assign "state" <$> TF.argument _state
        , TF.assign "subnet_id" <$> TF.argument _subnet_id
        , TF.assign "tenancy" <$> TF.argument _tenancy
        , TF.assign "virtualization_type" <$> TF.argument _virtualization_type
        ]

instance HasAgentVersion OpsworksInstanceResource (TF.Argument Text) where
    agentVersion f s@OpsworksInstanceResource{..} =
        (\a -> s { _agent_version = a } :: OpsworksInstanceResource)
             <$> f _agent_version

instance HasAmiId OpsworksInstanceResource (TF.Argument Text) where
    amiId f s@OpsworksInstanceResource{..} =
        (\a -> s { _ami_id = a } :: OpsworksInstanceResource)
             <$> f _ami_id

instance HasArchitecture OpsworksInstanceResource (TF.Argument Text) where
    architecture f s@OpsworksInstanceResource{..} =
        (\a -> s { _architecture = a } :: OpsworksInstanceResource)
             <$> f _architecture

instance HasAutoScalingType OpsworksInstanceResource (TF.Argument Text) where
    autoScalingType f s@OpsworksInstanceResource{..} =
        (\a -> s { _auto_scaling_type = a } :: OpsworksInstanceResource)
             <$> f _auto_scaling_type

instance HasAvailabilityZone OpsworksInstanceResource (TF.Argument Text) where
    availabilityZone f s@OpsworksInstanceResource{..} =
        (\a -> s { _availability_zone = a } :: OpsworksInstanceResource)
             <$> f _availability_zone

instance HasEbsBlockDevice OpsworksInstanceResource (TF.Argument Text) where
    ebsBlockDevice f s@OpsworksInstanceResource{..} =
        (\a -> s { _ebs_block_device = a } :: OpsworksInstanceResource)
             <$> f _ebs_block_device

instance HasEbsOptimized OpsworksInstanceResource (TF.Argument Text) where
    ebsOptimized f s@OpsworksInstanceResource{..} =
        (\a -> s { _ebs_optimized = a } :: OpsworksInstanceResource)
             <$> f _ebs_optimized

instance HasEphemeralBlockDevice OpsworksInstanceResource (TF.Argument Text) where
    ephemeralBlockDevice f s@OpsworksInstanceResource{..} =
        (\a -> s { _ephemeral_block_device = a } :: OpsworksInstanceResource)
             <$> f _ephemeral_block_device

instance HasHostname OpsworksInstanceResource (TF.Argument Text) where
    hostname f s@OpsworksInstanceResource{..} =
        (\a -> s { _hostname = a } :: OpsworksInstanceResource)
             <$> f _hostname

instance HasInstallUpdatesOnBoot OpsworksInstanceResource (TF.Argument Text) where
    installUpdatesOnBoot f s@OpsworksInstanceResource{..} =
        (\a -> s { _install_updates_on_boot = a } :: OpsworksInstanceResource)
             <$> f _install_updates_on_boot

instance HasInstanceType OpsworksInstanceResource (TF.Argument Text) where
    instanceType f s@OpsworksInstanceResource{..} =
        (\a -> s { _instance_type = a } :: OpsworksInstanceResource)
             <$> f _instance_type

instance HasLayerIds OpsworksInstanceResource (TF.Argument Text) where
    layerIds f s@OpsworksInstanceResource{..} =
        (\a -> s { _layer_ids = a } :: OpsworksInstanceResource)
             <$> f _layer_ids

instance HasOs OpsworksInstanceResource (TF.Argument Text) where
    os f s@OpsworksInstanceResource{..} =
        (\a -> s { _os = a } :: OpsworksInstanceResource)
             <$> f _os

instance HasRootBlockDevice OpsworksInstanceResource (TF.Argument Text) where
    rootBlockDevice f s@OpsworksInstanceResource{..} =
        (\a -> s { _root_block_device = a } :: OpsworksInstanceResource)
             <$> f _root_block_device

instance HasRootDeviceType OpsworksInstanceResource (TF.Argument Text) where
    rootDeviceType f s@OpsworksInstanceResource{..} =
        (\a -> s { _root_device_type = a } :: OpsworksInstanceResource)
             <$> f _root_device_type

instance HasSshKeyName OpsworksInstanceResource (TF.Argument Text) where
    sshKeyName f s@OpsworksInstanceResource{..} =
        (\a -> s { _ssh_key_name = a } :: OpsworksInstanceResource)
             <$> f _ssh_key_name

instance HasStackId OpsworksInstanceResource (TF.Argument Text) where
    stackId f s@OpsworksInstanceResource{..} =
        (\a -> s { _stack_id = a } :: OpsworksInstanceResource)
             <$> f _stack_id

instance HasState OpsworksInstanceResource (TF.Argument Text) where
    state f s@OpsworksInstanceResource{..} =
        (\a -> s { _state = a } :: OpsworksInstanceResource)
             <$> f _state

instance HasSubnetId OpsworksInstanceResource (TF.Argument Text) where
    subnetId f s@OpsworksInstanceResource{..} =
        (\a -> s { _subnet_id = a } :: OpsworksInstanceResource)
             <$> f _subnet_id

instance HasTenancy OpsworksInstanceResource (TF.Argument Text) where
    tenancy f s@OpsworksInstanceResource{..} =
        (\a -> s { _tenancy = a } :: OpsworksInstanceResource)
             <$> f _tenancy

instance HasVirtualizationType OpsworksInstanceResource (TF.Argument Text) where
    virtualizationType f s@OpsworksInstanceResource{..} =
        (\a -> s { _virtualization_type = a } :: OpsworksInstanceResource)
             <$> f _virtualization_type

opsworksInstanceResource :: TF.Resource TF.AWS OpsworksInstanceResource
opsworksInstanceResource =
    TF.newResource "aws_opsworks_instance" $
        OpsworksInstanceResource {
            _agent_version = TF.Nil
            , _ami_id = TF.Nil
            , _architecture = TF.Nil
            , _auto_scaling_type = TF.Nil
            , _availability_zone = TF.Nil
            , _ebs_block_device = TF.Nil
            , _ebs_optimized = TF.Nil
            , _ephemeral_block_device = TF.Nil
            , _hostname = TF.Nil
            , _install_updates_on_boot = TF.Nil
            , _instance_type = TF.Nil
            , _layer_ids = TF.Nil
            , _os = TF.Nil
            , _root_block_device = TF.Nil
            , _root_device_type = TF.Nil
            , _ssh_key_name = TF.Nil
            , _stack_id = TF.Nil
            , _state = TF.Nil
            , _subnet_id = TF.Nil
            , _tenancy = TF.Nil
            , _virtualization_type = TF.Nil
            }

{- | The @aws_opsworks_java_app_layer@ AWS resource.

Provides an OpsWorks Java application layer resource.
-}
data OpsworksJavaAppLayerResource = OpsworksJavaAppLayerResource {
      _app_server                  :: !(TF.Argument Text)
    {- ^ (Optional) Keyword for the application container to use. Defaults to "tomcat". -}
    , _app_server_version          :: !(TF.Argument Text)
    {- ^ (Optional) Version of the selected application container to use. Defaults to "7". -}
    , _auto_assign_elastic_ips     :: !(TF.Argument Text)
    {- ^ (Optional) Whether to automatically assign an elastic IP address to the layer's instances. -}
    , _auto_assign_public_ips      :: !(TF.Argument Text)
    {- ^ (Optional) For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances. -}
    , _auto_healing                :: !(TF.Argument Text)
    {- ^ (Optional) Whether to enable auto-healing for the layer. -}
    , _custom_instance_profile_arn :: !(TF.Argument Text)
    {- ^ (Optional) The ARN of an IAM profile that will be used for the layer's instances. -}
    , _custom_json                 :: !(TF.Argument Text)
    {- ^ (Optional) Custom JSON attributes to apply to the layer. -}
    , _custom_security_group_ids   :: !(TF.Argument Text)
    {- ^ (Optional) Ids for a set of security groups to apply to the layer's instances. -}
    , _drain_elb_on_shutdown       :: !(TF.Argument Text)
    {- ^ (Optional) Whether to enable Elastic Load Balancing connection draining. -}
    , _ebs_volume                  :: !(TF.Argument Text)
    {- ^ (Optional) @ebs_volume@ blocks, as described below, will each create an EBS volume and connect it to the layer's instances. -}
    , _elastic_load_balancer       :: !(TF.Argument Text)
    {- ^ (Optional) Name of an Elastic Load Balancer to attach to this layer -}
    , _install_updates_on_boot     :: !(TF.Argument Text)
    {- ^ (Optional) Whether to install OS and package updates on each instance when it boots. -}
    , _instance_shutdown_timeout   :: !(TF.Argument Text)
    {- ^ (Optional) The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event. -}
    , _jvm_options                 :: !(TF.Argument Text)
    {- ^ (Optional) Options to set for the JVM. -}
    , _jvm_type                    :: !(TF.Argument Text)
    {- ^ (Optional) Keyword for the type of JVM to use. Defaults to @openjdk@ . -}
    , _jvm_version                 :: !(TF.Argument Text)
    {- ^ (Optional) Version of JVM to use. Defaults to "7". -}
    , _name                        :: !(TF.Argument Text)
    {- ^ (Optional) A human-readable name for the layer. -}
    , _stack_id                    :: !(TF.Argument Text)
    {- ^ (Required) The id of the stack the layer will belong to. -}
    , _system_packages             :: !(TF.Argument Text)
    {- ^ (Optional) Names of a set of system packages to install on the layer's instances. -}
    , _use_ebs_optimized_instances :: !(TF.Argument Text)
    {- ^ (Optional) Whether to use EBS-optimized instances. -}
    , _computed_id                 :: !(TF.Attribute Text)
    {- ^ - The id of the layer. -}
    } deriving (Show, Eq)

instance TF.ToHCL OpsworksJavaAppLayerResource where
    toHCL OpsworksJavaAppLayerResource{..} = TF.block $ catMaybes
        [ TF.assign "app_server" <$> TF.argument _app_server
        , TF.assign "app_server_version" <$> TF.argument _app_server_version
        , TF.assign "auto_assign_elastic_ips" <$> TF.argument _auto_assign_elastic_ips
        , TF.assign "auto_assign_public_ips" <$> TF.argument _auto_assign_public_ips
        , TF.assign "auto_healing" <$> TF.argument _auto_healing
        , TF.assign "custom_instance_profile_arn" <$> TF.argument _custom_instance_profile_arn
        , TF.assign "custom_json" <$> TF.argument _custom_json
        , TF.assign "custom_security_group_ids" <$> TF.argument _custom_security_group_ids
        , TF.assign "drain_elb_on_shutdown" <$> TF.argument _drain_elb_on_shutdown
        , TF.assign "ebs_volume" <$> TF.argument _ebs_volume
        , TF.assign "elastic_load_balancer" <$> TF.argument _elastic_load_balancer
        , TF.assign "install_updates_on_boot" <$> TF.argument _install_updates_on_boot
        , TF.assign "instance_shutdown_timeout" <$> TF.argument _instance_shutdown_timeout
        , TF.assign "jvm_options" <$> TF.argument _jvm_options
        , TF.assign "jvm_type" <$> TF.argument _jvm_type
        , TF.assign "jvm_version" <$> TF.argument _jvm_version
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "stack_id" <$> TF.argument _stack_id
        , TF.assign "system_packages" <$> TF.argument _system_packages
        , TF.assign "use_ebs_optimized_instances" <$> TF.argument _use_ebs_optimized_instances
        ]

instance HasAppServer OpsworksJavaAppLayerResource (TF.Argument Text) where
    appServer f s@OpsworksJavaAppLayerResource{..} =
        (\a -> s { _app_server = a } :: OpsworksJavaAppLayerResource)
             <$> f _app_server

instance HasAppServerVersion OpsworksJavaAppLayerResource (TF.Argument Text) where
    appServerVersion f s@OpsworksJavaAppLayerResource{..} =
        (\a -> s { _app_server_version = a } :: OpsworksJavaAppLayerResource)
             <$> f _app_server_version

instance HasAutoAssignElasticIps OpsworksJavaAppLayerResource (TF.Argument Text) where
    autoAssignElasticIps f s@OpsworksJavaAppLayerResource{..} =
        (\a -> s { _auto_assign_elastic_ips = a } :: OpsworksJavaAppLayerResource)
             <$> f _auto_assign_elastic_ips

instance HasAutoAssignPublicIps OpsworksJavaAppLayerResource (TF.Argument Text) where
    autoAssignPublicIps f s@OpsworksJavaAppLayerResource{..} =
        (\a -> s { _auto_assign_public_ips = a } :: OpsworksJavaAppLayerResource)
             <$> f _auto_assign_public_ips

instance HasAutoHealing OpsworksJavaAppLayerResource (TF.Argument Text) where
    autoHealing f s@OpsworksJavaAppLayerResource{..} =
        (\a -> s { _auto_healing = a } :: OpsworksJavaAppLayerResource)
             <$> f _auto_healing

instance HasCustomInstanceProfileArn OpsworksJavaAppLayerResource (TF.Argument Text) where
    customInstanceProfileArn f s@OpsworksJavaAppLayerResource{..} =
        (\a -> s { _custom_instance_profile_arn = a } :: OpsworksJavaAppLayerResource)
             <$> f _custom_instance_profile_arn

instance HasCustomJson OpsworksJavaAppLayerResource (TF.Argument Text) where
    customJson f s@OpsworksJavaAppLayerResource{..} =
        (\a -> s { _custom_json = a } :: OpsworksJavaAppLayerResource)
             <$> f _custom_json

instance HasCustomSecurityGroupIds OpsworksJavaAppLayerResource (TF.Argument Text) where
    customSecurityGroupIds f s@OpsworksJavaAppLayerResource{..} =
        (\a -> s { _custom_security_group_ids = a } :: OpsworksJavaAppLayerResource)
             <$> f _custom_security_group_ids

instance HasDrainElbOnShutdown OpsworksJavaAppLayerResource (TF.Argument Text) where
    drainElbOnShutdown f s@OpsworksJavaAppLayerResource{..} =
        (\a -> s { _drain_elb_on_shutdown = a } :: OpsworksJavaAppLayerResource)
             <$> f _drain_elb_on_shutdown

instance HasEbsVolume OpsworksJavaAppLayerResource (TF.Argument Text) where
    ebsVolume f s@OpsworksJavaAppLayerResource{..} =
        (\a -> s { _ebs_volume = a } :: OpsworksJavaAppLayerResource)
             <$> f _ebs_volume

instance HasElasticLoadBalancer OpsworksJavaAppLayerResource (TF.Argument Text) where
    elasticLoadBalancer f s@OpsworksJavaAppLayerResource{..} =
        (\a -> s { _elastic_load_balancer = a } :: OpsworksJavaAppLayerResource)
             <$> f _elastic_load_balancer

instance HasInstallUpdatesOnBoot OpsworksJavaAppLayerResource (TF.Argument Text) where
    installUpdatesOnBoot f s@OpsworksJavaAppLayerResource{..} =
        (\a -> s { _install_updates_on_boot = a } :: OpsworksJavaAppLayerResource)
             <$> f _install_updates_on_boot

instance HasInstanceShutdownTimeout OpsworksJavaAppLayerResource (TF.Argument Text) where
    instanceShutdownTimeout f s@OpsworksJavaAppLayerResource{..} =
        (\a -> s { _instance_shutdown_timeout = a } :: OpsworksJavaAppLayerResource)
             <$> f _instance_shutdown_timeout

instance HasJvmOptions OpsworksJavaAppLayerResource (TF.Argument Text) where
    jvmOptions f s@OpsworksJavaAppLayerResource{..} =
        (\a -> s { _jvm_options = a } :: OpsworksJavaAppLayerResource)
             <$> f _jvm_options

instance HasJvmType OpsworksJavaAppLayerResource (TF.Argument Text) where
    jvmType f s@OpsworksJavaAppLayerResource{..} =
        (\a -> s { _jvm_type = a } :: OpsworksJavaAppLayerResource)
             <$> f _jvm_type

instance HasJvmVersion OpsworksJavaAppLayerResource (TF.Argument Text) where
    jvmVersion f s@OpsworksJavaAppLayerResource{..} =
        (\a -> s { _jvm_version = a } :: OpsworksJavaAppLayerResource)
             <$> f _jvm_version

instance HasName OpsworksJavaAppLayerResource (TF.Argument Text) where
    name f s@OpsworksJavaAppLayerResource{..} =
        (\a -> s { _name = a } :: OpsworksJavaAppLayerResource)
             <$> f _name

instance HasStackId OpsworksJavaAppLayerResource (TF.Argument Text) where
    stackId f s@OpsworksJavaAppLayerResource{..} =
        (\a -> s { _stack_id = a } :: OpsworksJavaAppLayerResource)
             <$> f _stack_id

instance HasSystemPackages OpsworksJavaAppLayerResource (TF.Argument Text) where
    systemPackages f s@OpsworksJavaAppLayerResource{..} =
        (\a -> s { _system_packages = a } :: OpsworksJavaAppLayerResource)
             <$> f _system_packages

instance HasUseEbsOptimizedInstances OpsworksJavaAppLayerResource (TF.Argument Text) where
    useEbsOptimizedInstances f s@OpsworksJavaAppLayerResource{..} =
        (\a -> s { _use_ebs_optimized_instances = a } :: OpsworksJavaAppLayerResource)
             <$> f _use_ebs_optimized_instances

instance HasComputedId OpsworksJavaAppLayerResource (TF.Attribute Text) where
    computedId f s@OpsworksJavaAppLayerResource{..} =
        (\a -> s { _computed_id = a } :: OpsworksJavaAppLayerResource)
             <$> f _computed_id

opsworksJavaAppLayerResource :: TF.Resource TF.AWS OpsworksJavaAppLayerResource
opsworksJavaAppLayerResource =
    TF.newResource "aws_opsworks_java_app_layer" $
        OpsworksJavaAppLayerResource {
            _app_server = TF.Nil
            , _app_server_version = TF.Nil
            , _auto_assign_elastic_ips = TF.Nil
            , _auto_assign_public_ips = TF.Nil
            , _auto_healing = TF.Nil
            , _custom_instance_profile_arn = TF.Nil
            , _custom_json = TF.Nil
            , _custom_security_group_ids = TF.Nil
            , _drain_elb_on_shutdown = TF.Nil
            , _ebs_volume = TF.Nil
            , _elastic_load_balancer = TF.Nil
            , _install_updates_on_boot = TF.Nil
            , _instance_shutdown_timeout = TF.Nil
            , _jvm_options = TF.Nil
            , _jvm_type = TF.Nil
            , _jvm_version = TF.Nil
            , _name = TF.Nil
            , _stack_id = TF.Nil
            , _system_packages = TF.Nil
            , _use_ebs_optimized_instances = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_opsworks_memcached_layer@ AWS resource.

Provides an OpsWorks memcached layer resource.
-}
data OpsworksMemcachedLayerResource = OpsworksMemcachedLayerResource {
      _allocated_memory            :: !(TF.Argument Text)
    {- ^ (Optional) Amount of memory to allocate for the cache on each instance, in megabytes. Defaults to 512MB. -}
    , _auto_assign_elastic_ips     :: !(TF.Argument Text)
    {- ^ (Optional) Whether to automatically assign an elastic IP address to the layer's instances. -}
    , _auto_assign_public_ips      :: !(TF.Argument Text)
    {- ^ (Optional) For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances. -}
    , _auto_healing                :: !(TF.Argument Text)
    {- ^ (Optional) Whether to enable auto-healing for the layer. -}
    , _custom_instance_profile_arn :: !(TF.Argument Text)
    {- ^ (Optional) The ARN of an IAM profile that will be used for the layer's instances. -}
    , _custom_json                 :: !(TF.Argument Text)
    {- ^ (Optional) Custom JSON attributes to apply to the layer. -}
    , _custom_security_group_ids   :: !(TF.Argument Text)
    {- ^ (Optional) Ids for a set of security groups to apply to the layer's instances. -}
    , _drain_elb_on_shutdown       :: !(TF.Argument Text)
    {- ^ (Optional) Whether to enable Elastic Load Balancing connection draining. -}
    , _ebs_volume                  :: !(TF.Argument Text)
    {- ^ (Optional) @ebs_volume@ blocks, as described below, will each create an EBS volume and connect it to the layer's instances. -}
    , _elastic_load_balancer       :: !(TF.Argument Text)
    {- ^ (Optional) Name of an Elastic Load Balancer to attach to this layer -}
    , _install_updates_on_boot     :: !(TF.Argument Text)
    {- ^ (Optional) Whether to install OS and package updates on each instance when it boots. -}
    , _instance_shutdown_timeout   :: !(TF.Argument Text)
    {- ^ (Optional) The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event. -}
    , _name                        :: !(TF.Argument Text)
    {- ^ (Optional) A human-readable name for the layer. -}
    , _stack_id                    :: !(TF.Argument Text)
    {- ^ (Required) The id of the stack the layer will belong to. -}
    , _system_packages             :: !(TF.Argument Text)
    {- ^ (Optional) Names of a set of system packages to install on the layer's instances. -}
    , _use_ebs_optimized_instances :: !(TF.Argument Text)
    {- ^ (Optional) Whether to use EBS-optimized instances. -}
    , _computed_id                 :: !(TF.Attribute Text)
    {- ^ - The id of the layer. -}
    } deriving (Show, Eq)

instance TF.ToHCL OpsworksMemcachedLayerResource where
    toHCL OpsworksMemcachedLayerResource{..} = TF.block $ catMaybes
        [ TF.assign "allocated_memory" <$> TF.argument _allocated_memory
        , TF.assign "auto_assign_elastic_ips" <$> TF.argument _auto_assign_elastic_ips
        , TF.assign "auto_assign_public_ips" <$> TF.argument _auto_assign_public_ips
        , TF.assign "auto_healing" <$> TF.argument _auto_healing
        , TF.assign "custom_instance_profile_arn" <$> TF.argument _custom_instance_profile_arn
        , TF.assign "custom_json" <$> TF.argument _custom_json
        , TF.assign "custom_security_group_ids" <$> TF.argument _custom_security_group_ids
        , TF.assign "drain_elb_on_shutdown" <$> TF.argument _drain_elb_on_shutdown
        , TF.assign "ebs_volume" <$> TF.argument _ebs_volume
        , TF.assign "elastic_load_balancer" <$> TF.argument _elastic_load_balancer
        , TF.assign "install_updates_on_boot" <$> TF.argument _install_updates_on_boot
        , TF.assign "instance_shutdown_timeout" <$> TF.argument _instance_shutdown_timeout
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "stack_id" <$> TF.argument _stack_id
        , TF.assign "system_packages" <$> TF.argument _system_packages
        , TF.assign "use_ebs_optimized_instances" <$> TF.argument _use_ebs_optimized_instances
        ]

instance HasAllocatedMemory OpsworksMemcachedLayerResource (TF.Argument Text) where
    allocatedMemory f s@OpsworksMemcachedLayerResource{..} =
        (\a -> s { _allocated_memory = a } :: OpsworksMemcachedLayerResource)
             <$> f _allocated_memory

instance HasAutoAssignElasticIps OpsworksMemcachedLayerResource (TF.Argument Text) where
    autoAssignElasticIps f s@OpsworksMemcachedLayerResource{..} =
        (\a -> s { _auto_assign_elastic_ips = a } :: OpsworksMemcachedLayerResource)
             <$> f _auto_assign_elastic_ips

instance HasAutoAssignPublicIps OpsworksMemcachedLayerResource (TF.Argument Text) where
    autoAssignPublicIps f s@OpsworksMemcachedLayerResource{..} =
        (\a -> s { _auto_assign_public_ips = a } :: OpsworksMemcachedLayerResource)
             <$> f _auto_assign_public_ips

instance HasAutoHealing OpsworksMemcachedLayerResource (TF.Argument Text) where
    autoHealing f s@OpsworksMemcachedLayerResource{..} =
        (\a -> s { _auto_healing = a } :: OpsworksMemcachedLayerResource)
             <$> f _auto_healing

instance HasCustomInstanceProfileArn OpsworksMemcachedLayerResource (TF.Argument Text) where
    customInstanceProfileArn f s@OpsworksMemcachedLayerResource{..} =
        (\a -> s { _custom_instance_profile_arn = a } :: OpsworksMemcachedLayerResource)
             <$> f _custom_instance_profile_arn

instance HasCustomJson OpsworksMemcachedLayerResource (TF.Argument Text) where
    customJson f s@OpsworksMemcachedLayerResource{..} =
        (\a -> s { _custom_json = a } :: OpsworksMemcachedLayerResource)
             <$> f _custom_json

instance HasCustomSecurityGroupIds OpsworksMemcachedLayerResource (TF.Argument Text) where
    customSecurityGroupIds f s@OpsworksMemcachedLayerResource{..} =
        (\a -> s { _custom_security_group_ids = a } :: OpsworksMemcachedLayerResource)
             <$> f _custom_security_group_ids

instance HasDrainElbOnShutdown OpsworksMemcachedLayerResource (TF.Argument Text) where
    drainElbOnShutdown f s@OpsworksMemcachedLayerResource{..} =
        (\a -> s { _drain_elb_on_shutdown = a } :: OpsworksMemcachedLayerResource)
             <$> f _drain_elb_on_shutdown

instance HasEbsVolume OpsworksMemcachedLayerResource (TF.Argument Text) where
    ebsVolume f s@OpsworksMemcachedLayerResource{..} =
        (\a -> s { _ebs_volume = a } :: OpsworksMemcachedLayerResource)
             <$> f _ebs_volume

instance HasElasticLoadBalancer OpsworksMemcachedLayerResource (TF.Argument Text) where
    elasticLoadBalancer f s@OpsworksMemcachedLayerResource{..} =
        (\a -> s { _elastic_load_balancer = a } :: OpsworksMemcachedLayerResource)
             <$> f _elastic_load_balancer

instance HasInstallUpdatesOnBoot OpsworksMemcachedLayerResource (TF.Argument Text) where
    installUpdatesOnBoot f s@OpsworksMemcachedLayerResource{..} =
        (\a -> s { _install_updates_on_boot = a } :: OpsworksMemcachedLayerResource)
             <$> f _install_updates_on_boot

instance HasInstanceShutdownTimeout OpsworksMemcachedLayerResource (TF.Argument Text) where
    instanceShutdownTimeout f s@OpsworksMemcachedLayerResource{..} =
        (\a -> s { _instance_shutdown_timeout = a } :: OpsworksMemcachedLayerResource)
             <$> f _instance_shutdown_timeout

instance HasName OpsworksMemcachedLayerResource (TF.Argument Text) where
    name f s@OpsworksMemcachedLayerResource{..} =
        (\a -> s { _name = a } :: OpsworksMemcachedLayerResource)
             <$> f _name

instance HasStackId OpsworksMemcachedLayerResource (TF.Argument Text) where
    stackId f s@OpsworksMemcachedLayerResource{..} =
        (\a -> s { _stack_id = a } :: OpsworksMemcachedLayerResource)
             <$> f _stack_id

instance HasSystemPackages OpsworksMemcachedLayerResource (TF.Argument Text) where
    systemPackages f s@OpsworksMemcachedLayerResource{..} =
        (\a -> s { _system_packages = a } :: OpsworksMemcachedLayerResource)
             <$> f _system_packages

instance HasUseEbsOptimizedInstances OpsworksMemcachedLayerResource (TF.Argument Text) where
    useEbsOptimizedInstances f s@OpsworksMemcachedLayerResource{..} =
        (\a -> s { _use_ebs_optimized_instances = a } :: OpsworksMemcachedLayerResource)
             <$> f _use_ebs_optimized_instances

instance HasComputedId OpsworksMemcachedLayerResource (TF.Attribute Text) where
    computedId f s@OpsworksMemcachedLayerResource{..} =
        (\a -> s { _computed_id = a } :: OpsworksMemcachedLayerResource)
             <$> f _computed_id

opsworksMemcachedLayerResource :: TF.Resource TF.AWS OpsworksMemcachedLayerResource
opsworksMemcachedLayerResource =
    TF.newResource "aws_opsworks_memcached_layer" $
        OpsworksMemcachedLayerResource {
            _allocated_memory = TF.Nil
            , _auto_assign_elastic_ips = TF.Nil
            , _auto_assign_public_ips = TF.Nil
            , _auto_healing = TF.Nil
            , _custom_instance_profile_arn = TF.Nil
            , _custom_json = TF.Nil
            , _custom_security_group_ids = TF.Nil
            , _drain_elb_on_shutdown = TF.Nil
            , _ebs_volume = TF.Nil
            , _elastic_load_balancer = TF.Nil
            , _install_updates_on_boot = TF.Nil
            , _instance_shutdown_timeout = TF.Nil
            , _name = TF.Nil
            , _stack_id = TF.Nil
            , _system_packages = TF.Nil
            , _use_ebs_optimized_instances = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_opsworks_mysql_layer@ AWS resource.

Provides an OpsWorks MySQL layer resource. ~> Note: All arguments including
the root password will be stored in the raw state as plain-text.
</docs/state/sensitive-data.html> .
-}
data OpsworksMysqlLayerResource = OpsworksMysqlLayerResource {
      _auto_assign_elastic_ips        :: !(TF.Argument Text)
    {- ^ (Optional) Whether to automatically assign an elastic IP address to the layer's instances. -}
    , _auto_assign_public_ips         :: !(TF.Argument Text)
    {- ^ (Optional) For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances. -}
    , _auto_healing                   :: !(TF.Argument Text)
    {- ^ (Optional) Whether to enable auto-healing for the layer. -}
    , _custom_instance_profile_arn    :: !(TF.Argument Text)
    {- ^ (Optional) The ARN of an IAM profile that will be used for the layer's instances. -}
    , _custom_json                    :: !(TF.Argument Text)
    {- ^ (Optional) Custom JSON attributes to apply to the layer. -}
    , _custom_security_group_ids      :: !(TF.Argument Text)
    {- ^ (Optional) Ids for a set of security groups to apply to the layer's instances. -}
    , _drain_elb_on_shutdown          :: !(TF.Argument Text)
    {- ^ (Optional) Whether to enable Elastic Load Balancing connection draining. -}
    , _ebs_volume                     :: !(TF.Argument Text)
    {- ^ (Optional) @ebs_volume@ blocks, as described below, will each create an EBS volume and connect it to the layer's instances. -}
    , _elastic_load_balancer          :: !(TF.Argument Text)
    {- ^ (Optional) Name of an Elastic Load Balancer to attach to this layer -}
    , _install_updates_on_boot        :: !(TF.Argument Text)
    {- ^ (Optional) Whether to install OS and package updates on each instance when it boots. -}
    , _instance_shutdown_timeout      :: !(TF.Argument Text)
    {- ^ (Optional) The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event. -}
    , _name                           :: !(TF.Argument Text)
    {- ^ (Optional) A human-readable name for the layer. -}
    , _root_password                  :: !(TF.Argument Text)
    {- ^ (Optional) Root password to use for MySQL. -}
    , _root_password_on_all_instances :: !(TF.Argument Text)
    {- ^ (Optional) Whether to set the root user password to all instances in the stack so they can access the instances in this layer. -}
    , _stack_id                       :: !(TF.Argument Text)
    {- ^ (Required) The id of the stack the layer will belong to. -}
    , _system_packages                :: !(TF.Argument Text)
    {- ^ (Optional) Names of a set of system packages to install on the layer's instances. -}
    , _use_ebs_optimized_instances    :: !(TF.Argument Text)
    {- ^ (Optional) Whether to use EBS-optimized instances. -}
    , _computed_id                    :: !(TF.Attribute Text)
    {- ^ - The id of the layer. -}
    } deriving (Show, Eq)

instance TF.ToHCL OpsworksMysqlLayerResource where
    toHCL OpsworksMysqlLayerResource{..} = TF.block $ catMaybes
        [ TF.assign "auto_assign_elastic_ips" <$> TF.argument _auto_assign_elastic_ips
        , TF.assign "auto_assign_public_ips" <$> TF.argument _auto_assign_public_ips
        , TF.assign "auto_healing" <$> TF.argument _auto_healing
        , TF.assign "custom_instance_profile_arn" <$> TF.argument _custom_instance_profile_arn
        , TF.assign "custom_json" <$> TF.argument _custom_json
        , TF.assign "custom_security_group_ids" <$> TF.argument _custom_security_group_ids
        , TF.assign "drain_elb_on_shutdown" <$> TF.argument _drain_elb_on_shutdown
        , TF.assign "ebs_volume" <$> TF.argument _ebs_volume
        , TF.assign "elastic_load_balancer" <$> TF.argument _elastic_load_balancer
        , TF.assign "install_updates_on_boot" <$> TF.argument _install_updates_on_boot
        , TF.assign "instance_shutdown_timeout" <$> TF.argument _instance_shutdown_timeout
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "root_password" <$> TF.argument _root_password
        , TF.assign "root_password_on_all_instances" <$> TF.argument _root_password_on_all_instances
        , TF.assign "stack_id" <$> TF.argument _stack_id
        , TF.assign "system_packages" <$> TF.argument _system_packages
        , TF.assign "use_ebs_optimized_instances" <$> TF.argument _use_ebs_optimized_instances
        ]

instance HasAutoAssignElasticIps OpsworksMysqlLayerResource (TF.Argument Text) where
    autoAssignElasticIps f s@OpsworksMysqlLayerResource{..} =
        (\a -> s { _auto_assign_elastic_ips = a } :: OpsworksMysqlLayerResource)
             <$> f _auto_assign_elastic_ips

instance HasAutoAssignPublicIps OpsworksMysqlLayerResource (TF.Argument Text) where
    autoAssignPublicIps f s@OpsworksMysqlLayerResource{..} =
        (\a -> s { _auto_assign_public_ips = a } :: OpsworksMysqlLayerResource)
             <$> f _auto_assign_public_ips

instance HasAutoHealing OpsworksMysqlLayerResource (TF.Argument Text) where
    autoHealing f s@OpsworksMysqlLayerResource{..} =
        (\a -> s { _auto_healing = a } :: OpsworksMysqlLayerResource)
             <$> f _auto_healing

instance HasCustomInstanceProfileArn OpsworksMysqlLayerResource (TF.Argument Text) where
    customInstanceProfileArn f s@OpsworksMysqlLayerResource{..} =
        (\a -> s { _custom_instance_profile_arn = a } :: OpsworksMysqlLayerResource)
             <$> f _custom_instance_profile_arn

instance HasCustomJson OpsworksMysqlLayerResource (TF.Argument Text) where
    customJson f s@OpsworksMysqlLayerResource{..} =
        (\a -> s { _custom_json = a } :: OpsworksMysqlLayerResource)
             <$> f _custom_json

instance HasCustomSecurityGroupIds OpsworksMysqlLayerResource (TF.Argument Text) where
    customSecurityGroupIds f s@OpsworksMysqlLayerResource{..} =
        (\a -> s { _custom_security_group_ids = a } :: OpsworksMysqlLayerResource)
             <$> f _custom_security_group_ids

instance HasDrainElbOnShutdown OpsworksMysqlLayerResource (TF.Argument Text) where
    drainElbOnShutdown f s@OpsworksMysqlLayerResource{..} =
        (\a -> s { _drain_elb_on_shutdown = a } :: OpsworksMysqlLayerResource)
             <$> f _drain_elb_on_shutdown

instance HasEbsVolume OpsworksMysqlLayerResource (TF.Argument Text) where
    ebsVolume f s@OpsworksMysqlLayerResource{..} =
        (\a -> s { _ebs_volume = a } :: OpsworksMysqlLayerResource)
             <$> f _ebs_volume

instance HasElasticLoadBalancer OpsworksMysqlLayerResource (TF.Argument Text) where
    elasticLoadBalancer f s@OpsworksMysqlLayerResource{..} =
        (\a -> s { _elastic_load_balancer = a } :: OpsworksMysqlLayerResource)
             <$> f _elastic_load_balancer

instance HasInstallUpdatesOnBoot OpsworksMysqlLayerResource (TF.Argument Text) where
    installUpdatesOnBoot f s@OpsworksMysqlLayerResource{..} =
        (\a -> s { _install_updates_on_boot = a } :: OpsworksMysqlLayerResource)
             <$> f _install_updates_on_boot

instance HasInstanceShutdownTimeout OpsworksMysqlLayerResource (TF.Argument Text) where
    instanceShutdownTimeout f s@OpsworksMysqlLayerResource{..} =
        (\a -> s { _instance_shutdown_timeout = a } :: OpsworksMysqlLayerResource)
             <$> f _instance_shutdown_timeout

instance HasName OpsworksMysqlLayerResource (TF.Argument Text) where
    name f s@OpsworksMysqlLayerResource{..} =
        (\a -> s { _name = a } :: OpsworksMysqlLayerResource)
             <$> f _name

instance HasRootPassword OpsworksMysqlLayerResource (TF.Argument Text) where
    rootPassword f s@OpsworksMysqlLayerResource{..} =
        (\a -> s { _root_password = a } :: OpsworksMysqlLayerResource)
             <$> f _root_password

instance HasRootPasswordOnAllInstances OpsworksMysqlLayerResource (TF.Argument Text) where
    rootPasswordOnAllInstances f s@OpsworksMysqlLayerResource{..} =
        (\a -> s { _root_password_on_all_instances = a } :: OpsworksMysqlLayerResource)
             <$> f _root_password_on_all_instances

instance HasStackId OpsworksMysqlLayerResource (TF.Argument Text) where
    stackId f s@OpsworksMysqlLayerResource{..} =
        (\a -> s { _stack_id = a } :: OpsworksMysqlLayerResource)
             <$> f _stack_id

instance HasSystemPackages OpsworksMysqlLayerResource (TF.Argument Text) where
    systemPackages f s@OpsworksMysqlLayerResource{..} =
        (\a -> s { _system_packages = a } :: OpsworksMysqlLayerResource)
             <$> f _system_packages

instance HasUseEbsOptimizedInstances OpsworksMysqlLayerResource (TF.Argument Text) where
    useEbsOptimizedInstances f s@OpsworksMysqlLayerResource{..} =
        (\a -> s { _use_ebs_optimized_instances = a } :: OpsworksMysqlLayerResource)
             <$> f _use_ebs_optimized_instances

instance HasComputedId OpsworksMysqlLayerResource (TF.Attribute Text) where
    computedId f s@OpsworksMysqlLayerResource{..} =
        (\a -> s { _computed_id = a } :: OpsworksMysqlLayerResource)
             <$> f _computed_id

opsworksMysqlLayerResource :: TF.Resource TF.AWS OpsworksMysqlLayerResource
opsworksMysqlLayerResource =
    TF.newResource "aws_opsworks_mysql_layer" $
        OpsworksMysqlLayerResource {
            _auto_assign_elastic_ips = TF.Nil
            , _auto_assign_public_ips = TF.Nil
            , _auto_healing = TF.Nil
            , _custom_instance_profile_arn = TF.Nil
            , _custom_json = TF.Nil
            , _custom_security_group_ids = TF.Nil
            , _drain_elb_on_shutdown = TF.Nil
            , _ebs_volume = TF.Nil
            , _elastic_load_balancer = TF.Nil
            , _install_updates_on_boot = TF.Nil
            , _instance_shutdown_timeout = TF.Nil
            , _name = TF.Nil
            , _root_password = TF.Nil
            , _root_password_on_all_instances = TF.Nil
            , _stack_id = TF.Nil
            , _system_packages = TF.Nil
            , _use_ebs_optimized_instances = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_opsworks_nodejs_app_layer@ AWS resource.

Provides an OpsWorks NodeJS application layer resource.
-}
data OpsworksNodejsAppLayerResource = OpsworksNodejsAppLayerResource {
      _auto_assign_elastic_ips     :: !(TF.Argument Text)
    {- ^ (Optional) Whether to automatically assign an elastic IP address to the layer's instances. -}
    , _auto_assign_public_ips      :: !(TF.Argument Text)
    {- ^ (Optional) For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances. -}
    , _auto_healing                :: !(TF.Argument Text)
    {- ^ (Optional) Whether to enable auto-healing for the layer. -}
    , _custom_instance_profile_arn :: !(TF.Argument Text)
    {- ^ (Optional) The ARN of an IAM profile that will be used for the layer's instances. -}
    , _custom_json                 :: !(TF.Argument Text)
    {- ^ (Optional) Custom JSON attributes to apply to the layer. -}
    , _custom_security_group_ids   :: !(TF.Argument Text)
    {- ^ (Optional) Ids for a set of security groups to apply to the layer's instances. -}
    , _drain_elb_on_shutdown       :: !(TF.Argument Text)
    {- ^ (Optional) Whether to enable Elastic Load Balancing connection draining. -}
    , _ebs_volume                  :: !(TF.Argument Text)
    {- ^ (Optional) @ebs_volume@ blocks, as described below, will each create an EBS volume and connect it to the layer's instances. -}
    , _elastic_load_balancer       :: !(TF.Argument Text)
    {- ^ (Optional) Name of an Elastic Load Balancer to attach to this layer -}
    , _install_updates_on_boot     :: !(TF.Argument Text)
    {- ^ (Optional) Whether to install OS and package updates on each instance when it boots. -}
    , _instance_shutdown_timeout   :: !(TF.Argument Text)
    {- ^ (Optional) The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event. -}
    , _name                        :: !(TF.Argument Text)
    {- ^ (Optional) A human-readable name for the layer. -}
    , _nodejs_version              :: !(TF.Argument Text)
    {- ^ (Optional) The version of NodeJS to use. Defaults to "0.10.38". -}
    , _stack_id                    :: !(TF.Argument Text)
    {- ^ (Required) The id of the stack the layer will belong to. -}
    , _system_packages             :: !(TF.Argument Text)
    {- ^ (Optional) Names of a set of system packages to install on the layer's instances. -}
    , _use_ebs_optimized_instances :: !(TF.Argument Text)
    {- ^ (Optional) Whether to use EBS-optimized instances. -}
    , _computed_id                 :: !(TF.Attribute Text)
    {- ^ - The id of the layer. -}
    } deriving (Show, Eq)

instance TF.ToHCL OpsworksNodejsAppLayerResource where
    toHCL OpsworksNodejsAppLayerResource{..} = TF.block $ catMaybes
        [ TF.assign "auto_assign_elastic_ips" <$> TF.argument _auto_assign_elastic_ips
        , TF.assign "auto_assign_public_ips" <$> TF.argument _auto_assign_public_ips
        , TF.assign "auto_healing" <$> TF.argument _auto_healing
        , TF.assign "custom_instance_profile_arn" <$> TF.argument _custom_instance_profile_arn
        , TF.assign "custom_json" <$> TF.argument _custom_json
        , TF.assign "custom_security_group_ids" <$> TF.argument _custom_security_group_ids
        , TF.assign "drain_elb_on_shutdown" <$> TF.argument _drain_elb_on_shutdown
        , TF.assign "ebs_volume" <$> TF.argument _ebs_volume
        , TF.assign "elastic_load_balancer" <$> TF.argument _elastic_load_balancer
        , TF.assign "install_updates_on_boot" <$> TF.argument _install_updates_on_boot
        , TF.assign "instance_shutdown_timeout" <$> TF.argument _instance_shutdown_timeout
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "nodejs_version" <$> TF.argument _nodejs_version
        , TF.assign "stack_id" <$> TF.argument _stack_id
        , TF.assign "system_packages" <$> TF.argument _system_packages
        , TF.assign "use_ebs_optimized_instances" <$> TF.argument _use_ebs_optimized_instances
        ]

instance HasAutoAssignElasticIps OpsworksNodejsAppLayerResource (TF.Argument Text) where
    autoAssignElasticIps f s@OpsworksNodejsAppLayerResource{..} =
        (\a -> s { _auto_assign_elastic_ips = a } :: OpsworksNodejsAppLayerResource)
             <$> f _auto_assign_elastic_ips

instance HasAutoAssignPublicIps OpsworksNodejsAppLayerResource (TF.Argument Text) where
    autoAssignPublicIps f s@OpsworksNodejsAppLayerResource{..} =
        (\a -> s { _auto_assign_public_ips = a } :: OpsworksNodejsAppLayerResource)
             <$> f _auto_assign_public_ips

instance HasAutoHealing OpsworksNodejsAppLayerResource (TF.Argument Text) where
    autoHealing f s@OpsworksNodejsAppLayerResource{..} =
        (\a -> s { _auto_healing = a } :: OpsworksNodejsAppLayerResource)
             <$> f _auto_healing

instance HasCustomInstanceProfileArn OpsworksNodejsAppLayerResource (TF.Argument Text) where
    customInstanceProfileArn f s@OpsworksNodejsAppLayerResource{..} =
        (\a -> s { _custom_instance_profile_arn = a } :: OpsworksNodejsAppLayerResource)
             <$> f _custom_instance_profile_arn

instance HasCustomJson OpsworksNodejsAppLayerResource (TF.Argument Text) where
    customJson f s@OpsworksNodejsAppLayerResource{..} =
        (\a -> s { _custom_json = a } :: OpsworksNodejsAppLayerResource)
             <$> f _custom_json

instance HasCustomSecurityGroupIds OpsworksNodejsAppLayerResource (TF.Argument Text) where
    customSecurityGroupIds f s@OpsworksNodejsAppLayerResource{..} =
        (\a -> s { _custom_security_group_ids = a } :: OpsworksNodejsAppLayerResource)
             <$> f _custom_security_group_ids

instance HasDrainElbOnShutdown OpsworksNodejsAppLayerResource (TF.Argument Text) where
    drainElbOnShutdown f s@OpsworksNodejsAppLayerResource{..} =
        (\a -> s { _drain_elb_on_shutdown = a } :: OpsworksNodejsAppLayerResource)
             <$> f _drain_elb_on_shutdown

instance HasEbsVolume OpsworksNodejsAppLayerResource (TF.Argument Text) where
    ebsVolume f s@OpsworksNodejsAppLayerResource{..} =
        (\a -> s { _ebs_volume = a } :: OpsworksNodejsAppLayerResource)
             <$> f _ebs_volume

instance HasElasticLoadBalancer OpsworksNodejsAppLayerResource (TF.Argument Text) where
    elasticLoadBalancer f s@OpsworksNodejsAppLayerResource{..} =
        (\a -> s { _elastic_load_balancer = a } :: OpsworksNodejsAppLayerResource)
             <$> f _elastic_load_balancer

instance HasInstallUpdatesOnBoot OpsworksNodejsAppLayerResource (TF.Argument Text) where
    installUpdatesOnBoot f s@OpsworksNodejsAppLayerResource{..} =
        (\a -> s { _install_updates_on_boot = a } :: OpsworksNodejsAppLayerResource)
             <$> f _install_updates_on_boot

instance HasInstanceShutdownTimeout OpsworksNodejsAppLayerResource (TF.Argument Text) where
    instanceShutdownTimeout f s@OpsworksNodejsAppLayerResource{..} =
        (\a -> s { _instance_shutdown_timeout = a } :: OpsworksNodejsAppLayerResource)
             <$> f _instance_shutdown_timeout

instance HasName OpsworksNodejsAppLayerResource (TF.Argument Text) where
    name f s@OpsworksNodejsAppLayerResource{..} =
        (\a -> s { _name = a } :: OpsworksNodejsAppLayerResource)
             <$> f _name

instance HasNodejsVersion OpsworksNodejsAppLayerResource (TF.Argument Text) where
    nodejsVersion f s@OpsworksNodejsAppLayerResource{..} =
        (\a -> s { _nodejs_version = a } :: OpsworksNodejsAppLayerResource)
             <$> f _nodejs_version

instance HasStackId OpsworksNodejsAppLayerResource (TF.Argument Text) where
    stackId f s@OpsworksNodejsAppLayerResource{..} =
        (\a -> s { _stack_id = a } :: OpsworksNodejsAppLayerResource)
             <$> f _stack_id

instance HasSystemPackages OpsworksNodejsAppLayerResource (TF.Argument Text) where
    systemPackages f s@OpsworksNodejsAppLayerResource{..} =
        (\a -> s { _system_packages = a } :: OpsworksNodejsAppLayerResource)
             <$> f _system_packages

instance HasUseEbsOptimizedInstances OpsworksNodejsAppLayerResource (TF.Argument Text) where
    useEbsOptimizedInstances f s@OpsworksNodejsAppLayerResource{..} =
        (\a -> s { _use_ebs_optimized_instances = a } :: OpsworksNodejsAppLayerResource)
             <$> f _use_ebs_optimized_instances

instance HasComputedId OpsworksNodejsAppLayerResource (TF.Attribute Text) where
    computedId f s@OpsworksNodejsAppLayerResource{..} =
        (\a -> s { _computed_id = a } :: OpsworksNodejsAppLayerResource)
             <$> f _computed_id

opsworksNodejsAppLayerResource :: TF.Resource TF.AWS OpsworksNodejsAppLayerResource
opsworksNodejsAppLayerResource =
    TF.newResource "aws_opsworks_nodejs_app_layer" $
        OpsworksNodejsAppLayerResource {
            _auto_assign_elastic_ips = TF.Nil
            , _auto_assign_public_ips = TF.Nil
            , _auto_healing = TF.Nil
            , _custom_instance_profile_arn = TF.Nil
            , _custom_json = TF.Nil
            , _custom_security_group_ids = TF.Nil
            , _drain_elb_on_shutdown = TF.Nil
            , _ebs_volume = TF.Nil
            , _elastic_load_balancer = TF.Nil
            , _install_updates_on_boot = TF.Nil
            , _instance_shutdown_timeout = TF.Nil
            , _name = TF.Nil
            , _nodejs_version = TF.Nil
            , _stack_id = TF.Nil
            , _system_packages = TF.Nil
            , _use_ebs_optimized_instances = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_opsworks_permission@ AWS resource.

Provides an OpsWorks permission resource.
-}
data OpsworksPermissionResource = OpsworksPermissionResource {
      _allow_ssh   :: !(TF.Argument Text)
    {- ^ (Optional) Whether the user is allowed to use SSH to communicate with the instance -}
    , _allow_sudo  :: !(TF.Argument Text)
    {- ^ (Optional) Whether the user is allowed to use sudo to elevate privileges -}
    , _level       :: !(TF.Argument Text)
    {- ^ (Optional) The users permission level. Mus be one of @deny@ , @show@ , @deploy@ , @manage@ , @iam_only@ -}
    , _stack_id    :: !(TF.Argument Text)
    {- ^ (Required) The stack to set the permissions for -}
    , _user_arn    :: !(TF.Argument Text)
    {- ^ (Required) The user's IAM ARN to set permissions for -}
    , _computed_id :: !(TF.Attribute Text)
    {- ^ - The computed id of the permission. Please note that this is only used internally to identify the permission. This value is not used in aws. -}
    } deriving (Show, Eq)

instance TF.ToHCL OpsworksPermissionResource where
    toHCL OpsworksPermissionResource{..} = TF.block $ catMaybes
        [ TF.assign "allow_ssh" <$> TF.argument _allow_ssh
        , TF.assign "allow_sudo" <$> TF.argument _allow_sudo
        , TF.assign "level" <$> TF.argument _level
        , TF.assign "stack_id" <$> TF.argument _stack_id
        , TF.assign "user_arn" <$> TF.argument _user_arn
        ]

instance HasAllowSsh OpsworksPermissionResource (TF.Argument Text) where
    allowSsh f s@OpsworksPermissionResource{..} =
        (\a -> s { _allow_ssh = a } :: OpsworksPermissionResource)
             <$> f _allow_ssh

instance HasAllowSudo OpsworksPermissionResource (TF.Argument Text) where
    allowSudo f s@OpsworksPermissionResource{..} =
        (\a -> s { _allow_sudo = a } :: OpsworksPermissionResource)
             <$> f _allow_sudo

instance HasLevel OpsworksPermissionResource (TF.Argument Text) where
    level f s@OpsworksPermissionResource{..} =
        (\a -> s { _level = a } :: OpsworksPermissionResource)
             <$> f _level

instance HasStackId OpsworksPermissionResource (TF.Argument Text) where
    stackId f s@OpsworksPermissionResource{..} =
        (\a -> s { _stack_id = a } :: OpsworksPermissionResource)
             <$> f _stack_id

instance HasUserArn OpsworksPermissionResource (TF.Argument Text) where
    userArn f s@OpsworksPermissionResource{..} =
        (\a -> s { _user_arn = a } :: OpsworksPermissionResource)
             <$> f _user_arn

instance HasComputedId OpsworksPermissionResource (TF.Attribute Text) where
    computedId f s@OpsworksPermissionResource{..} =
        (\a -> s { _computed_id = a } :: OpsworksPermissionResource)
             <$> f _computed_id

opsworksPermissionResource :: TF.Resource TF.AWS OpsworksPermissionResource
opsworksPermissionResource =
    TF.newResource "aws_opsworks_permission" $
        OpsworksPermissionResource {
            _allow_ssh = TF.Nil
            , _allow_sudo = TF.Nil
            , _level = TF.Nil
            , _stack_id = TF.Nil
            , _user_arn = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_opsworks_php_app_layer@ AWS resource.

Provides an OpsWorks PHP application layer resource.
-}
data OpsworksPhpAppLayerResource = OpsworksPhpAppLayerResource {
      _auto_assign_elastic_ips     :: !(TF.Argument Text)
    {- ^ (Optional) Whether to automatically assign an elastic IP address to the layer's instances. -}
    , _auto_assign_public_ips      :: !(TF.Argument Text)
    {- ^ (Optional) For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances. -}
    , _auto_healing                :: !(TF.Argument Text)
    {- ^ (Optional) Whether to enable auto-healing for the layer. -}
    , _custom_instance_profile_arn :: !(TF.Argument Text)
    {- ^ (Optional) The ARN of an IAM profile that will be used for the layer's instances. -}
    , _custom_json                 :: !(TF.Argument Text)
    {- ^ (Optional) Custom JSON attributes to apply to the layer. -}
    , _custom_security_group_ids   :: !(TF.Argument Text)
    {- ^ (Optional) Ids for a set of security groups to apply to the layer's instances. -}
    , _drain_elb_on_shutdown       :: !(TF.Argument Text)
    {- ^ (Optional) Whether to enable Elastic Load Balancing connection draining. -}
    , _ebs_volume                  :: !(TF.Argument Text)
    {- ^ (Optional) @ebs_volume@ blocks, as described below, will each create an EBS volume and connect it to the layer's instances. -}
    , _elastic_load_balancer       :: !(TF.Argument Text)
    {- ^ (Optional) Name of an Elastic Load Balancer to attach to this layer -}
    , _install_updates_on_boot     :: !(TF.Argument Text)
    {- ^ (Optional) Whether to install OS and package updates on each instance when it boots. -}
    , _instance_shutdown_timeout   :: !(TF.Argument Text)
    {- ^ (Optional) The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event. -}
    , _name                        :: !(TF.Argument Text)
    {- ^ (Optional) A human-readable name for the layer. -}
    , _stack_id                    :: !(TF.Argument Text)
    {- ^ (Required) The id of the stack the layer will belong to. -}
    , _system_packages             :: !(TF.Argument Text)
    {- ^ (Optional) Names of a set of system packages to install on the layer's instances. -}
    , _use_ebs_optimized_instances :: !(TF.Argument Text)
    {- ^ (Optional) Whether to use EBS-optimized instances. -}
    , _computed_id                 :: !(TF.Attribute Text)
    {- ^ - The id of the layer. -}
    } deriving (Show, Eq)

instance TF.ToHCL OpsworksPhpAppLayerResource where
    toHCL OpsworksPhpAppLayerResource{..} = TF.block $ catMaybes
        [ TF.assign "auto_assign_elastic_ips" <$> TF.argument _auto_assign_elastic_ips
        , TF.assign "auto_assign_public_ips" <$> TF.argument _auto_assign_public_ips
        , TF.assign "auto_healing" <$> TF.argument _auto_healing
        , TF.assign "custom_instance_profile_arn" <$> TF.argument _custom_instance_profile_arn
        , TF.assign "custom_json" <$> TF.argument _custom_json
        , TF.assign "custom_security_group_ids" <$> TF.argument _custom_security_group_ids
        , TF.assign "drain_elb_on_shutdown" <$> TF.argument _drain_elb_on_shutdown
        , TF.assign "ebs_volume" <$> TF.argument _ebs_volume
        , TF.assign "elastic_load_balancer" <$> TF.argument _elastic_load_balancer
        , TF.assign "install_updates_on_boot" <$> TF.argument _install_updates_on_boot
        , TF.assign "instance_shutdown_timeout" <$> TF.argument _instance_shutdown_timeout
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "stack_id" <$> TF.argument _stack_id
        , TF.assign "system_packages" <$> TF.argument _system_packages
        , TF.assign "use_ebs_optimized_instances" <$> TF.argument _use_ebs_optimized_instances
        ]

instance HasAutoAssignElasticIps OpsworksPhpAppLayerResource (TF.Argument Text) where
    autoAssignElasticIps f s@OpsworksPhpAppLayerResource{..} =
        (\a -> s { _auto_assign_elastic_ips = a } :: OpsworksPhpAppLayerResource)
             <$> f _auto_assign_elastic_ips

instance HasAutoAssignPublicIps OpsworksPhpAppLayerResource (TF.Argument Text) where
    autoAssignPublicIps f s@OpsworksPhpAppLayerResource{..} =
        (\a -> s { _auto_assign_public_ips = a } :: OpsworksPhpAppLayerResource)
             <$> f _auto_assign_public_ips

instance HasAutoHealing OpsworksPhpAppLayerResource (TF.Argument Text) where
    autoHealing f s@OpsworksPhpAppLayerResource{..} =
        (\a -> s { _auto_healing = a } :: OpsworksPhpAppLayerResource)
             <$> f _auto_healing

instance HasCustomInstanceProfileArn OpsworksPhpAppLayerResource (TF.Argument Text) where
    customInstanceProfileArn f s@OpsworksPhpAppLayerResource{..} =
        (\a -> s { _custom_instance_profile_arn = a } :: OpsworksPhpAppLayerResource)
             <$> f _custom_instance_profile_arn

instance HasCustomJson OpsworksPhpAppLayerResource (TF.Argument Text) where
    customJson f s@OpsworksPhpAppLayerResource{..} =
        (\a -> s { _custom_json = a } :: OpsworksPhpAppLayerResource)
             <$> f _custom_json

instance HasCustomSecurityGroupIds OpsworksPhpAppLayerResource (TF.Argument Text) where
    customSecurityGroupIds f s@OpsworksPhpAppLayerResource{..} =
        (\a -> s { _custom_security_group_ids = a } :: OpsworksPhpAppLayerResource)
             <$> f _custom_security_group_ids

instance HasDrainElbOnShutdown OpsworksPhpAppLayerResource (TF.Argument Text) where
    drainElbOnShutdown f s@OpsworksPhpAppLayerResource{..} =
        (\a -> s { _drain_elb_on_shutdown = a } :: OpsworksPhpAppLayerResource)
             <$> f _drain_elb_on_shutdown

instance HasEbsVolume OpsworksPhpAppLayerResource (TF.Argument Text) where
    ebsVolume f s@OpsworksPhpAppLayerResource{..} =
        (\a -> s { _ebs_volume = a } :: OpsworksPhpAppLayerResource)
             <$> f _ebs_volume

instance HasElasticLoadBalancer OpsworksPhpAppLayerResource (TF.Argument Text) where
    elasticLoadBalancer f s@OpsworksPhpAppLayerResource{..} =
        (\a -> s { _elastic_load_balancer = a } :: OpsworksPhpAppLayerResource)
             <$> f _elastic_load_balancer

instance HasInstallUpdatesOnBoot OpsworksPhpAppLayerResource (TF.Argument Text) where
    installUpdatesOnBoot f s@OpsworksPhpAppLayerResource{..} =
        (\a -> s { _install_updates_on_boot = a } :: OpsworksPhpAppLayerResource)
             <$> f _install_updates_on_boot

instance HasInstanceShutdownTimeout OpsworksPhpAppLayerResource (TF.Argument Text) where
    instanceShutdownTimeout f s@OpsworksPhpAppLayerResource{..} =
        (\a -> s { _instance_shutdown_timeout = a } :: OpsworksPhpAppLayerResource)
             <$> f _instance_shutdown_timeout

instance HasName OpsworksPhpAppLayerResource (TF.Argument Text) where
    name f s@OpsworksPhpAppLayerResource{..} =
        (\a -> s { _name = a } :: OpsworksPhpAppLayerResource)
             <$> f _name

instance HasStackId OpsworksPhpAppLayerResource (TF.Argument Text) where
    stackId f s@OpsworksPhpAppLayerResource{..} =
        (\a -> s { _stack_id = a } :: OpsworksPhpAppLayerResource)
             <$> f _stack_id

instance HasSystemPackages OpsworksPhpAppLayerResource (TF.Argument Text) where
    systemPackages f s@OpsworksPhpAppLayerResource{..} =
        (\a -> s { _system_packages = a } :: OpsworksPhpAppLayerResource)
             <$> f _system_packages

instance HasUseEbsOptimizedInstances OpsworksPhpAppLayerResource (TF.Argument Text) where
    useEbsOptimizedInstances f s@OpsworksPhpAppLayerResource{..} =
        (\a -> s { _use_ebs_optimized_instances = a } :: OpsworksPhpAppLayerResource)
             <$> f _use_ebs_optimized_instances

instance HasComputedId OpsworksPhpAppLayerResource (TF.Attribute Text) where
    computedId f s@OpsworksPhpAppLayerResource{..} =
        (\a -> s { _computed_id = a } :: OpsworksPhpAppLayerResource)
             <$> f _computed_id

opsworksPhpAppLayerResource :: TF.Resource TF.AWS OpsworksPhpAppLayerResource
opsworksPhpAppLayerResource =
    TF.newResource "aws_opsworks_php_app_layer" $
        OpsworksPhpAppLayerResource {
            _auto_assign_elastic_ips = TF.Nil
            , _auto_assign_public_ips = TF.Nil
            , _auto_healing = TF.Nil
            , _custom_instance_profile_arn = TF.Nil
            , _custom_json = TF.Nil
            , _custom_security_group_ids = TF.Nil
            , _drain_elb_on_shutdown = TF.Nil
            , _ebs_volume = TF.Nil
            , _elastic_load_balancer = TF.Nil
            , _install_updates_on_boot = TF.Nil
            , _instance_shutdown_timeout = TF.Nil
            , _name = TF.Nil
            , _stack_id = TF.Nil
            , _system_packages = TF.Nil
            , _use_ebs_optimized_instances = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_opsworks_rails_app_layer@ AWS resource.

Provides an OpsWorks Ruby on Rails application layer resource.
-}
data OpsworksRailsAppLayerResource = OpsworksRailsAppLayerResource {
      _app_server                  :: !(TF.Argument Text)
    {- ^ (Optional) Keyword for the app server to use. Defaults to "apache_passenger". -}
    , _auto_assign_elastic_ips     :: !(TF.Argument Text)
    {- ^ (Optional) Whether to automatically assign an elastic IP address to the layer's instances. -}
    , _auto_assign_public_ips      :: !(TF.Argument Text)
    {- ^ (Optional) For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances. -}
    , _auto_healing                :: !(TF.Argument Text)
    {- ^ (Optional) Whether to enable auto-healing for the layer. -}
    , _bundler_version             :: !(TF.Argument Text)
    {- ^ (Optional) When OpsWorks is managing Bundler, which version to use. Defaults to "1.5.3". -}
    , _custom_instance_profile_arn :: !(TF.Argument Text)
    {- ^ (Optional) The ARN of an IAM profile that will be used for the layer's instances. -}
    , _custom_json                 :: !(TF.Argument Text)
    {- ^ (Optional) Custom JSON attributes to apply to the layer. -}
    , _custom_security_group_ids   :: !(TF.Argument Text)
    {- ^ (Optional) Ids for a set of security groups to apply to the layer's instances. -}
    , _drain_elb_on_shutdown       :: !(TF.Argument Text)
    {- ^ (Optional) Whether to enable Elastic Load Balancing connection draining. -}
    , _ebs_volume                  :: !(TF.Argument Text)
    {- ^ (Optional) @ebs_volume@ blocks, as described below, will each create an EBS volume and connect it to the layer's instances. -}
    , _elastic_load_balancer       :: !(TF.Argument Text)
    {- ^ (Optional) Name of an Elastic Load Balancer to attach to this layer -}
    , _install_updates_on_boot     :: !(TF.Argument Text)
    {- ^ (Optional) Whether to install OS and package updates on each instance when it boots. -}
    , _instance_shutdown_timeout   :: !(TF.Argument Text)
    {- ^ (Optional) The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event. -}
    , _manage_bundler              :: !(TF.Argument Text)
    {- ^ (Optional) Whether OpsWorks should manage bundler. On by default. -}
    , _name                        :: !(TF.Argument Text)
    {- ^ (Optional) A human-readable name for the layer. -}
    , _passenger_version           :: !(TF.Argument Text)
    {- ^ (Optional) The version of Passenger to use. Defaults to "4.0.46". -}
    , _ruby_version                :: !(TF.Argument Text)
    {- ^ (Optional) The version of Ruby to use. Defaults to "2.0.0". -}
    , _rubygems_version            :: !(TF.Argument Text)
    {- ^ (Optional) The version of RubyGems to use. Defaults to "2.2.2". -}
    , _stack_id                    :: !(TF.Argument Text)
    {- ^ (Required) The id of the stack the layer will belong to. -}
    , _system_packages             :: !(TF.Argument Text)
    {- ^ (Optional) Names of a set of system packages to install on the layer's instances. -}
    , _use_ebs_optimized_instances :: !(TF.Argument Text)
    {- ^ (Optional) Whether to use EBS-optimized instances. -}
    , _computed_id                 :: !(TF.Attribute Text)
    {- ^ - The id of the layer. -}
    } deriving (Show, Eq)

instance TF.ToHCL OpsworksRailsAppLayerResource where
    toHCL OpsworksRailsAppLayerResource{..} = TF.block $ catMaybes
        [ TF.assign "app_server" <$> TF.argument _app_server
        , TF.assign "auto_assign_elastic_ips" <$> TF.argument _auto_assign_elastic_ips
        , TF.assign "auto_assign_public_ips" <$> TF.argument _auto_assign_public_ips
        , TF.assign "auto_healing" <$> TF.argument _auto_healing
        , TF.assign "bundler_version" <$> TF.argument _bundler_version
        , TF.assign "custom_instance_profile_arn" <$> TF.argument _custom_instance_profile_arn
        , TF.assign "custom_json" <$> TF.argument _custom_json
        , TF.assign "custom_security_group_ids" <$> TF.argument _custom_security_group_ids
        , TF.assign "drain_elb_on_shutdown" <$> TF.argument _drain_elb_on_shutdown
        , TF.assign "ebs_volume" <$> TF.argument _ebs_volume
        , TF.assign "elastic_load_balancer" <$> TF.argument _elastic_load_balancer
        , TF.assign "install_updates_on_boot" <$> TF.argument _install_updates_on_boot
        , TF.assign "instance_shutdown_timeout" <$> TF.argument _instance_shutdown_timeout
        , TF.assign "manage_bundler" <$> TF.argument _manage_bundler
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "passenger_version" <$> TF.argument _passenger_version
        , TF.assign "ruby_version" <$> TF.argument _ruby_version
        , TF.assign "rubygems_version" <$> TF.argument _rubygems_version
        , TF.assign "stack_id" <$> TF.argument _stack_id
        , TF.assign "system_packages" <$> TF.argument _system_packages
        , TF.assign "use_ebs_optimized_instances" <$> TF.argument _use_ebs_optimized_instances
        ]

instance HasAppServer OpsworksRailsAppLayerResource (TF.Argument Text) where
    appServer f s@OpsworksRailsAppLayerResource{..} =
        (\a -> s { _app_server = a } :: OpsworksRailsAppLayerResource)
             <$> f _app_server

instance HasAutoAssignElasticIps OpsworksRailsAppLayerResource (TF.Argument Text) where
    autoAssignElasticIps f s@OpsworksRailsAppLayerResource{..} =
        (\a -> s { _auto_assign_elastic_ips = a } :: OpsworksRailsAppLayerResource)
             <$> f _auto_assign_elastic_ips

instance HasAutoAssignPublicIps OpsworksRailsAppLayerResource (TF.Argument Text) where
    autoAssignPublicIps f s@OpsworksRailsAppLayerResource{..} =
        (\a -> s { _auto_assign_public_ips = a } :: OpsworksRailsAppLayerResource)
             <$> f _auto_assign_public_ips

instance HasAutoHealing OpsworksRailsAppLayerResource (TF.Argument Text) where
    autoHealing f s@OpsworksRailsAppLayerResource{..} =
        (\a -> s { _auto_healing = a } :: OpsworksRailsAppLayerResource)
             <$> f _auto_healing

instance HasBundlerVersion OpsworksRailsAppLayerResource (TF.Argument Text) where
    bundlerVersion f s@OpsworksRailsAppLayerResource{..} =
        (\a -> s { _bundler_version = a } :: OpsworksRailsAppLayerResource)
             <$> f _bundler_version

instance HasCustomInstanceProfileArn OpsworksRailsAppLayerResource (TF.Argument Text) where
    customInstanceProfileArn f s@OpsworksRailsAppLayerResource{..} =
        (\a -> s { _custom_instance_profile_arn = a } :: OpsworksRailsAppLayerResource)
             <$> f _custom_instance_profile_arn

instance HasCustomJson OpsworksRailsAppLayerResource (TF.Argument Text) where
    customJson f s@OpsworksRailsAppLayerResource{..} =
        (\a -> s { _custom_json = a } :: OpsworksRailsAppLayerResource)
             <$> f _custom_json

instance HasCustomSecurityGroupIds OpsworksRailsAppLayerResource (TF.Argument Text) where
    customSecurityGroupIds f s@OpsworksRailsAppLayerResource{..} =
        (\a -> s { _custom_security_group_ids = a } :: OpsworksRailsAppLayerResource)
             <$> f _custom_security_group_ids

instance HasDrainElbOnShutdown OpsworksRailsAppLayerResource (TF.Argument Text) where
    drainElbOnShutdown f s@OpsworksRailsAppLayerResource{..} =
        (\a -> s { _drain_elb_on_shutdown = a } :: OpsworksRailsAppLayerResource)
             <$> f _drain_elb_on_shutdown

instance HasEbsVolume OpsworksRailsAppLayerResource (TF.Argument Text) where
    ebsVolume f s@OpsworksRailsAppLayerResource{..} =
        (\a -> s { _ebs_volume = a } :: OpsworksRailsAppLayerResource)
             <$> f _ebs_volume

instance HasElasticLoadBalancer OpsworksRailsAppLayerResource (TF.Argument Text) where
    elasticLoadBalancer f s@OpsworksRailsAppLayerResource{..} =
        (\a -> s { _elastic_load_balancer = a } :: OpsworksRailsAppLayerResource)
             <$> f _elastic_load_balancer

instance HasInstallUpdatesOnBoot OpsworksRailsAppLayerResource (TF.Argument Text) where
    installUpdatesOnBoot f s@OpsworksRailsAppLayerResource{..} =
        (\a -> s { _install_updates_on_boot = a } :: OpsworksRailsAppLayerResource)
             <$> f _install_updates_on_boot

instance HasInstanceShutdownTimeout OpsworksRailsAppLayerResource (TF.Argument Text) where
    instanceShutdownTimeout f s@OpsworksRailsAppLayerResource{..} =
        (\a -> s { _instance_shutdown_timeout = a } :: OpsworksRailsAppLayerResource)
             <$> f _instance_shutdown_timeout

instance HasManageBundler OpsworksRailsAppLayerResource (TF.Argument Text) where
    manageBundler f s@OpsworksRailsAppLayerResource{..} =
        (\a -> s { _manage_bundler = a } :: OpsworksRailsAppLayerResource)
             <$> f _manage_bundler

instance HasName OpsworksRailsAppLayerResource (TF.Argument Text) where
    name f s@OpsworksRailsAppLayerResource{..} =
        (\a -> s { _name = a } :: OpsworksRailsAppLayerResource)
             <$> f _name

instance HasPassengerVersion OpsworksRailsAppLayerResource (TF.Argument Text) where
    passengerVersion f s@OpsworksRailsAppLayerResource{..} =
        (\a -> s { _passenger_version = a } :: OpsworksRailsAppLayerResource)
             <$> f _passenger_version

instance HasRubyVersion OpsworksRailsAppLayerResource (TF.Argument Text) where
    rubyVersion f s@OpsworksRailsAppLayerResource{..} =
        (\a -> s { _ruby_version = a } :: OpsworksRailsAppLayerResource)
             <$> f _ruby_version

instance HasRubygemsVersion OpsworksRailsAppLayerResource (TF.Argument Text) where
    rubygemsVersion f s@OpsworksRailsAppLayerResource{..} =
        (\a -> s { _rubygems_version = a } :: OpsworksRailsAppLayerResource)
             <$> f _rubygems_version

instance HasStackId OpsworksRailsAppLayerResource (TF.Argument Text) where
    stackId f s@OpsworksRailsAppLayerResource{..} =
        (\a -> s { _stack_id = a } :: OpsworksRailsAppLayerResource)
             <$> f _stack_id

instance HasSystemPackages OpsworksRailsAppLayerResource (TF.Argument Text) where
    systemPackages f s@OpsworksRailsAppLayerResource{..} =
        (\a -> s { _system_packages = a } :: OpsworksRailsAppLayerResource)
             <$> f _system_packages

instance HasUseEbsOptimizedInstances OpsworksRailsAppLayerResource (TF.Argument Text) where
    useEbsOptimizedInstances f s@OpsworksRailsAppLayerResource{..} =
        (\a -> s { _use_ebs_optimized_instances = a } :: OpsworksRailsAppLayerResource)
             <$> f _use_ebs_optimized_instances

instance HasComputedId OpsworksRailsAppLayerResource (TF.Attribute Text) where
    computedId f s@OpsworksRailsAppLayerResource{..} =
        (\a -> s { _computed_id = a } :: OpsworksRailsAppLayerResource)
             <$> f _computed_id

opsworksRailsAppLayerResource :: TF.Resource TF.AWS OpsworksRailsAppLayerResource
opsworksRailsAppLayerResource =
    TF.newResource "aws_opsworks_rails_app_layer" $
        OpsworksRailsAppLayerResource {
            _app_server = TF.Nil
            , _auto_assign_elastic_ips = TF.Nil
            , _auto_assign_public_ips = TF.Nil
            , _auto_healing = TF.Nil
            , _bundler_version = TF.Nil
            , _custom_instance_profile_arn = TF.Nil
            , _custom_json = TF.Nil
            , _custom_security_group_ids = TF.Nil
            , _drain_elb_on_shutdown = TF.Nil
            , _ebs_volume = TF.Nil
            , _elastic_load_balancer = TF.Nil
            , _install_updates_on_boot = TF.Nil
            , _instance_shutdown_timeout = TF.Nil
            , _manage_bundler = TF.Nil
            , _name = TF.Nil
            , _passenger_version = TF.Nil
            , _ruby_version = TF.Nil
            , _rubygems_version = TF.Nil
            , _stack_id = TF.Nil
            , _system_packages = TF.Nil
            , _use_ebs_optimized_instances = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_opsworks_rds_db_instance@ AWS resource.

Provides an OpsWorks RDS DB Instance resource. ~> Note: All arguments
including the username and password will be stored in the raw state as
plain-text. </docs/state/sensitive-data.html> .
-}
data OpsworksRdsDbInstanceResource = OpsworksRdsDbInstanceResource {
      _db_password         :: !(TF.Argument Text)
    {- ^ (Required) A db password -}
    , _db_user             :: !(TF.Argument Text)
    {- ^ (Required) A db username -}
    , _rds_db_instance_arn :: !(TF.Argument Text)
    {- ^ (Required) The db instance to register for this stack. Changing this will force a new resource. -}
    , _stack_id            :: !(TF.Argument Text)
    {- ^ (Required) The stack to register a db inatance for. Changing this will force a new resource. -}
    , _computed_id         :: !(TF.Attribute Text)
    {- ^ - The computed id. Please note that this is only used internally to identify the stack <-> instance relation. This value is not used in aws. -}
    } deriving (Show, Eq)

instance TF.ToHCL OpsworksRdsDbInstanceResource where
    toHCL OpsworksRdsDbInstanceResource{..} = TF.block $ catMaybes
        [ TF.assign "db_password" <$> TF.argument _db_password
        , TF.assign "db_user" <$> TF.argument _db_user
        , TF.assign "rds_db_instance_arn" <$> TF.argument _rds_db_instance_arn
        , TF.assign "stack_id" <$> TF.argument _stack_id
        ]

instance HasDbPassword OpsworksRdsDbInstanceResource (TF.Argument Text) where
    dbPassword f s@OpsworksRdsDbInstanceResource{..} =
        (\a -> s { _db_password = a } :: OpsworksRdsDbInstanceResource)
             <$> f _db_password

instance HasDbUser OpsworksRdsDbInstanceResource (TF.Argument Text) where
    dbUser f s@OpsworksRdsDbInstanceResource{..} =
        (\a -> s { _db_user = a } :: OpsworksRdsDbInstanceResource)
             <$> f _db_user

instance HasRdsDbInstanceArn OpsworksRdsDbInstanceResource (TF.Argument Text) where
    rdsDbInstanceArn f s@OpsworksRdsDbInstanceResource{..} =
        (\a -> s { _rds_db_instance_arn = a } :: OpsworksRdsDbInstanceResource)
             <$> f _rds_db_instance_arn

instance HasStackId OpsworksRdsDbInstanceResource (TF.Argument Text) where
    stackId f s@OpsworksRdsDbInstanceResource{..} =
        (\a -> s { _stack_id = a } :: OpsworksRdsDbInstanceResource)
             <$> f _stack_id

instance HasComputedId OpsworksRdsDbInstanceResource (TF.Attribute Text) where
    computedId f s@OpsworksRdsDbInstanceResource{..} =
        (\a -> s { _computed_id = a } :: OpsworksRdsDbInstanceResource)
             <$> f _computed_id

opsworksRdsDbInstanceResource :: TF.Resource TF.AWS OpsworksRdsDbInstanceResource
opsworksRdsDbInstanceResource =
    TF.newResource "aws_opsworks_rds_db_instance" $
        OpsworksRdsDbInstanceResource {
            _db_password = TF.Nil
            , _db_user = TF.Nil
            , _rds_db_instance_arn = TF.Nil
            , _stack_id = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_opsworks_stack@ AWS resource.

Provides an OpsWorks stack resource.
-}
data OpsworksStackResource = OpsworksStackResource {
      _agent_version                 :: !(TF.Argument Text)
    {- ^ (Optional) If set to @"LATEST"@ , OpsWorks will automatically install the latest version. -}
    , _berkshelf_version             :: !(TF.Argument Text)
    {- ^ (Optional) If @manage_berkshelf@ is enabled, the version of Berkshelf to use. -}
    , _color                         :: !(TF.Argument Text)
    {- ^ (Optional) Color to paint next to the stack's resources in the OpsWorks console. -}
    , _configuration_manager_name    :: !(TF.Argument Text)
    {- ^ (Optional) Name of the configuration manager to use. Defaults to "Chef". -}
    , _configuration_manager_version :: !(TF.Argument Text)
    {- ^ (Optional) Version of the configuration manager to use. Defaults to "11.4". -}
    , _custom_cookbooks_source       :: !(TF.Argument Text)
    {- ^ (Optional) When @use_custom_cookbooks@ is set, provide this sub-object as described below. -}
    , _custom_json                   :: !(TF.Argument Text)
    {- ^ (Optional) Custom JSON attributes to apply to the entire stack. -}
    , _default_availability_zone     :: !(TF.Argument Text)
    {- ^ (Optional) Name of the availability zone where instances will be created by default. This is required unless you set @vpc_id@ . -}
    , _default_instance_profile_arn  :: !(TF.Argument Text)
    {- ^ (Required) The ARN of an IAM Instance Profile that created instances will have by default. -}
    , _default_os                    :: !(TF.Argument Text)
    {- ^ (Optional) Name of OS that will be installed on instances by default. -}
    , _default_root_device_type      :: !(TF.Argument Text)
    {- ^ (Optional) Name of the type of root device instances will have by default. -}
    , _default_ssh_key_name          :: !(TF.Argument Text)
    {- ^ (Optional) Name of the SSH keypair that instances will have by default. -}
    , _default_subnet_id             :: !(TF.Argument Text)
    {- ^ (Optional) Id of the subnet in which instances will be created by default. Mandatory if @vpc_id@ is set, and forbidden if it isn't. -}
    , _hostname_theme                :: !(TF.Argument Text)
    {- ^ (Optional) Keyword representing the naming scheme that will be used for instance hostnames within this stack. -}
    , _manage_berkshelf              :: !(TF.Argument Text)
    {- ^ (Optional) Boolean value controlling whether Opsworks will run Berkshelf for this stack. -}
    , _name                          :: !(TF.Argument Text)
    {- ^ (Required) The name of the stack. -}
    , _region                        :: !(TF.Argument Text)
    {- ^ (Required) The name of the region where the stack will exist. -}
    , _service_role_arn              :: !(TF.Argument Text)
    {- ^ (Required) The ARN of an IAM role that the OpsWorks service will act as. -}
    , _tags                          :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _use_custom_cookbooks          :: !(TF.Argument Text)
    {- ^ (Optional) Boolean value controlling whether the custom cookbook settings are enabled. -}
    , _use_opsworks_security_groups  :: !(TF.Argument Text)
    {- ^ (Optional) Boolean value controlling whether the standard OpsWorks security groups apply to created instances. -}
    , _vpc_id                        :: !(TF.Argument Text)
    {- ^ (Optional) The id of the VPC that this stack belongs to. -}
    , _computed_id                   :: !(TF.Attribute Text)
    {- ^ - The id of the stack. -}
    } deriving (Show, Eq)

instance TF.ToHCL OpsworksStackResource where
    toHCL OpsworksStackResource{..} = TF.block $ catMaybes
        [ TF.assign "agent_version" <$> TF.argument _agent_version
        , TF.assign "berkshelf_version" <$> TF.argument _berkshelf_version
        , TF.assign "color" <$> TF.argument _color
        , TF.assign "configuration_manager_name" <$> TF.argument _configuration_manager_name
        , TF.assign "configuration_manager_version" <$> TF.argument _configuration_manager_version
        , TF.assign "custom_cookbooks_source" <$> TF.argument _custom_cookbooks_source
        , TF.assign "custom_json" <$> TF.argument _custom_json
        , TF.assign "default_availability_zone" <$> TF.argument _default_availability_zone
        , TF.assign "default_instance_profile_arn" <$> TF.argument _default_instance_profile_arn
        , TF.assign "default_os" <$> TF.argument _default_os
        , TF.assign "default_root_device_type" <$> TF.argument _default_root_device_type
        , TF.assign "default_ssh_key_name" <$> TF.argument _default_ssh_key_name
        , TF.assign "default_subnet_id" <$> TF.argument _default_subnet_id
        , TF.assign "hostname_theme" <$> TF.argument _hostname_theme
        , TF.assign "manage_berkshelf" <$> TF.argument _manage_berkshelf
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "region" <$> TF.argument _region
        , TF.assign "service_role_arn" <$> TF.argument _service_role_arn
        , TF.assign "tags" <$> TF.argument _tags
        , TF.assign "use_custom_cookbooks" <$> TF.argument _use_custom_cookbooks
        , TF.assign "use_opsworks_security_groups" <$> TF.argument _use_opsworks_security_groups
        , TF.assign "vpc_id" <$> TF.argument _vpc_id
        ]

instance HasAgentVersion OpsworksStackResource (TF.Argument Text) where
    agentVersion f s@OpsworksStackResource{..} =
        (\a -> s { _agent_version = a } :: OpsworksStackResource)
             <$> f _agent_version

instance HasBerkshelfVersion OpsworksStackResource (TF.Argument Text) where
    berkshelfVersion f s@OpsworksStackResource{..} =
        (\a -> s { _berkshelf_version = a } :: OpsworksStackResource)
             <$> f _berkshelf_version

instance HasColor OpsworksStackResource (TF.Argument Text) where
    color f s@OpsworksStackResource{..} =
        (\a -> s { _color = a } :: OpsworksStackResource)
             <$> f _color

instance HasConfigurationManagerName OpsworksStackResource (TF.Argument Text) where
    configurationManagerName f s@OpsworksStackResource{..} =
        (\a -> s { _configuration_manager_name = a } :: OpsworksStackResource)
             <$> f _configuration_manager_name

instance HasConfigurationManagerVersion OpsworksStackResource (TF.Argument Text) where
    configurationManagerVersion f s@OpsworksStackResource{..} =
        (\a -> s { _configuration_manager_version = a } :: OpsworksStackResource)
             <$> f _configuration_manager_version

instance HasCustomCookbooksSource OpsworksStackResource (TF.Argument Text) where
    customCookbooksSource f s@OpsworksStackResource{..} =
        (\a -> s { _custom_cookbooks_source = a } :: OpsworksStackResource)
             <$> f _custom_cookbooks_source

instance HasCustomJson OpsworksStackResource (TF.Argument Text) where
    customJson f s@OpsworksStackResource{..} =
        (\a -> s { _custom_json = a } :: OpsworksStackResource)
             <$> f _custom_json

instance HasDefaultAvailabilityZone OpsworksStackResource (TF.Argument Text) where
    defaultAvailabilityZone f s@OpsworksStackResource{..} =
        (\a -> s { _default_availability_zone = a } :: OpsworksStackResource)
             <$> f _default_availability_zone

instance HasDefaultInstanceProfileArn OpsworksStackResource (TF.Argument Text) where
    defaultInstanceProfileArn f s@OpsworksStackResource{..} =
        (\a -> s { _default_instance_profile_arn = a } :: OpsworksStackResource)
             <$> f _default_instance_profile_arn

instance HasDefaultOs OpsworksStackResource (TF.Argument Text) where
    defaultOs f s@OpsworksStackResource{..} =
        (\a -> s { _default_os = a } :: OpsworksStackResource)
             <$> f _default_os

instance HasDefaultRootDeviceType OpsworksStackResource (TF.Argument Text) where
    defaultRootDeviceType f s@OpsworksStackResource{..} =
        (\a -> s { _default_root_device_type = a } :: OpsworksStackResource)
             <$> f _default_root_device_type

instance HasDefaultSshKeyName OpsworksStackResource (TF.Argument Text) where
    defaultSshKeyName f s@OpsworksStackResource{..} =
        (\a -> s { _default_ssh_key_name = a } :: OpsworksStackResource)
             <$> f _default_ssh_key_name

instance HasDefaultSubnetId OpsworksStackResource (TF.Argument Text) where
    defaultSubnetId f s@OpsworksStackResource{..} =
        (\a -> s { _default_subnet_id = a } :: OpsworksStackResource)
             <$> f _default_subnet_id

instance HasHostnameTheme OpsworksStackResource (TF.Argument Text) where
    hostnameTheme f s@OpsworksStackResource{..} =
        (\a -> s { _hostname_theme = a } :: OpsworksStackResource)
             <$> f _hostname_theme

instance HasManageBerkshelf OpsworksStackResource (TF.Argument Text) where
    manageBerkshelf f s@OpsworksStackResource{..} =
        (\a -> s { _manage_berkshelf = a } :: OpsworksStackResource)
             <$> f _manage_berkshelf

instance HasName OpsworksStackResource (TF.Argument Text) where
    name f s@OpsworksStackResource{..} =
        (\a -> s { _name = a } :: OpsworksStackResource)
             <$> f _name

instance HasRegion OpsworksStackResource (TF.Argument Text) where
    region f s@OpsworksStackResource{..} =
        (\a -> s { _region = a } :: OpsworksStackResource)
             <$> f _region

instance HasServiceRoleArn OpsworksStackResource (TF.Argument Text) where
    serviceRoleArn f s@OpsworksStackResource{..} =
        (\a -> s { _service_role_arn = a } :: OpsworksStackResource)
             <$> f _service_role_arn

instance HasTags OpsworksStackResource (TF.Argument TF.Tags) where
    tags f s@OpsworksStackResource{..} =
        (\a -> s { _tags = a } :: OpsworksStackResource)
             <$> f _tags

instance HasUseCustomCookbooks OpsworksStackResource (TF.Argument Text) where
    useCustomCookbooks f s@OpsworksStackResource{..} =
        (\a -> s { _use_custom_cookbooks = a } :: OpsworksStackResource)
             <$> f _use_custom_cookbooks

instance HasUseOpsworksSecurityGroups OpsworksStackResource (TF.Argument Text) where
    useOpsworksSecurityGroups f s@OpsworksStackResource{..} =
        (\a -> s { _use_opsworks_security_groups = a } :: OpsworksStackResource)
             <$> f _use_opsworks_security_groups

instance HasVpcId OpsworksStackResource (TF.Argument Text) where
    vpcId f s@OpsworksStackResource{..} =
        (\a -> s { _vpc_id = a } :: OpsworksStackResource)
             <$> f _vpc_id

instance HasComputedId OpsworksStackResource (TF.Attribute Text) where
    computedId f s@OpsworksStackResource{..} =
        (\a -> s { _computed_id = a } :: OpsworksStackResource)
             <$> f _computed_id

opsworksStackResource :: TF.Resource TF.AWS OpsworksStackResource
opsworksStackResource =
    TF.newResource "aws_opsworks_stack" $
        OpsworksStackResource {
            _agent_version = TF.Nil
            , _berkshelf_version = TF.Nil
            , _color = TF.Nil
            , _configuration_manager_name = TF.Nil
            , _configuration_manager_version = TF.Nil
            , _custom_cookbooks_source = TF.Nil
            , _custom_json = TF.Nil
            , _default_availability_zone = TF.Nil
            , _default_instance_profile_arn = TF.Nil
            , _default_os = TF.Nil
            , _default_root_device_type = TF.Nil
            , _default_ssh_key_name = TF.Nil
            , _default_subnet_id = TF.Nil
            , _hostname_theme = TF.Nil
            , _manage_berkshelf = TF.Nil
            , _name = TF.Nil
            , _region = TF.Nil
            , _service_role_arn = TF.Nil
            , _tags = TF.Nil
            , _use_custom_cookbooks = TF.Nil
            , _use_opsworks_security_groups = TF.Nil
            , _vpc_id = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_opsworks_static_web_layer@ AWS resource.

Provides an OpsWorks static web server layer resource.
-}
data OpsworksStaticWebLayerResource = OpsworksStaticWebLayerResource {
      _auto_assign_elastic_ips     :: !(TF.Argument Text)
    {- ^ (Optional) Whether to automatically assign an elastic IP address to the layer's instances. -}
    , _auto_assign_public_ips      :: !(TF.Argument Text)
    {- ^ (Optional) For stacks belonging to a VPC, whether to automatically assign a public IP address to each of the layer's instances. -}
    , _auto_healing                :: !(TF.Argument Text)
    {- ^ (Optional) Whether to enable auto-healing for the layer. -}
    , _custom_instance_profile_arn :: !(TF.Argument Text)
    {- ^ (Optional) The ARN of an IAM profile that will be used for the layer's instances. -}
    , _custom_security_group_ids   :: !(TF.Argument Text)
    {- ^ (Optional) Ids for a set of security groups to apply to the layer's instances. -}
    , _drain_elb_on_shutdown       :: !(TF.Argument Text)
    {- ^ (Optional) Whether to enable Elastic Load Balancing connection draining. -}
    , _ebs_volume                  :: !(TF.Argument Text)
    {- ^ (Optional) @ebs_volume@ blocks, as described below, will each create an EBS volume and connect it to the layer's instances. -}
    , _elastic_load_balancer       :: !(TF.Argument Text)
    {- ^ (Optional) Name of an Elastic Load Balancer to attach to this layer -}
    , _install_updates_on_boot     :: !(TF.Argument Text)
    {- ^ (Optional) Whether to install OS and package updates on each instance when it boots. -}
    , _instance_shutdown_timeout   :: !(TF.Argument Text)
    {- ^ (Optional) The time, in seconds, that OpsWorks will wait for Chef to complete after triggering the Shutdown event. -}
    , _name                        :: !(TF.Argument Text)
    {- ^ (Optional) A human-readable name for the layer. -}
    , _stack_id                    :: !(TF.Argument Text)
    {- ^ (Required) The id of the stack the layer will belong to. -}
    , _system_packages             :: !(TF.Argument Text)
    {- ^ (Optional) Names of a set of system packages to install on the layer's instances. -}
    , _use_ebs_optimized_instances :: !(TF.Argument Text)
    {- ^ (Optional) Whether to use EBS-optimized instances. -}
    , _computed_id                 :: !(TF.Attribute Text)
    {- ^ - The id of the layer. -}
    } deriving (Show, Eq)

instance TF.ToHCL OpsworksStaticWebLayerResource where
    toHCL OpsworksStaticWebLayerResource{..} = TF.block $ catMaybes
        [ TF.assign "auto_assign_elastic_ips" <$> TF.argument _auto_assign_elastic_ips
        , TF.assign "auto_assign_public_ips" <$> TF.argument _auto_assign_public_ips
        , TF.assign "auto_healing" <$> TF.argument _auto_healing
        , TF.assign "custom_instance_profile_arn" <$> TF.argument _custom_instance_profile_arn
        , TF.assign "custom_security_group_ids" <$> TF.argument _custom_security_group_ids
        , TF.assign "drain_elb_on_shutdown" <$> TF.argument _drain_elb_on_shutdown
        , TF.assign "ebs_volume" <$> TF.argument _ebs_volume
        , TF.assign "elastic_load_balancer" <$> TF.argument _elastic_load_balancer
        , TF.assign "install_updates_on_boot" <$> TF.argument _install_updates_on_boot
        , TF.assign "instance_shutdown_timeout" <$> TF.argument _instance_shutdown_timeout
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "stack_id" <$> TF.argument _stack_id
        , TF.assign "system_packages" <$> TF.argument _system_packages
        , TF.assign "use_ebs_optimized_instances" <$> TF.argument _use_ebs_optimized_instances
        ]

instance HasAutoAssignElasticIps OpsworksStaticWebLayerResource (TF.Argument Text) where
    autoAssignElasticIps f s@OpsworksStaticWebLayerResource{..} =
        (\a -> s { _auto_assign_elastic_ips = a } :: OpsworksStaticWebLayerResource)
             <$> f _auto_assign_elastic_ips

instance HasAutoAssignPublicIps OpsworksStaticWebLayerResource (TF.Argument Text) where
    autoAssignPublicIps f s@OpsworksStaticWebLayerResource{..} =
        (\a -> s { _auto_assign_public_ips = a } :: OpsworksStaticWebLayerResource)
             <$> f _auto_assign_public_ips

instance HasAutoHealing OpsworksStaticWebLayerResource (TF.Argument Text) where
    autoHealing f s@OpsworksStaticWebLayerResource{..} =
        (\a -> s { _auto_healing = a } :: OpsworksStaticWebLayerResource)
             <$> f _auto_healing

instance HasCustomInstanceProfileArn OpsworksStaticWebLayerResource (TF.Argument Text) where
    customInstanceProfileArn f s@OpsworksStaticWebLayerResource{..} =
        (\a -> s { _custom_instance_profile_arn = a } :: OpsworksStaticWebLayerResource)
             <$> f _custom_instance_profile_arn

instance HasCustomSecurityGroupIds OpsworksStaticWebLayerResource (TF.Argument Text) where
    customSecurityGroupIds f s@OpsworksStaticWebLayerResource{..} =
        (\a -> s { _custom_security_group_ids = a } :: OpsworksStaticWebLayerResource)
             <$> f _custom_security_group_ids

instance HasDrainElbOnShutdown OpsworksStaticWebLayerResource (TF.Argument Text) where
    drainElbOnShutdown f s@OpsworksStaticWebLayerResource{..} =
        (\a -> s { _drain_elb_on_shutdown = a } :: OpsworksStaticWebLayerResource)
             <$> f _drain_elb_on_shutdown

instance HasEbsVolume OpsworksStaticWebLayerResource (TF.Argument Text) where
    ebsVolume f s@OpsworksStaticWebLayerResource{..} =
        (\a -> s { _ebs_volume = a } :: OpsworksStaticWebLayerResource)
             <$> f _ebs_volume

instance HasElasticLoadBalancer OpsworksStaticWebLayerResource (TF.Argument Text) where
    elasticLoadBalancer f s@OpsworksStaticWebLayerResource{..} =
        (\a -> s { _elastic_load_balancer = a } :: OpsworksStaticWebLayerResource)
             <$> f _elastic_load_balancer

instance HasInstallUpdatesOnBoot OpsworksStaticWebLayerResource (TF.Argument Text) where
    installUpdatesOnBoot f s@OpsworksStaticWebLayerResource{..} =
        (\a -> s { _install_updates_on_boot = a } :: OpsworksStaticWebLayerResource)
             <$> f _install_updates_on_boot

instance HasInstanceShutdownTimeout OpsworksStaticWebLayerResource (TF.Argument Text) where
    instanceShutdownTimeout f s@OpsworksStaticWebLayerResource{..} =
        (\a -> s { _instance_shutdown_timeout = a } :: OpsworksStaticWebLayerResource)
             <$> f _instance_shutdown_timeout

instance HasName OpsworksStaticWebLayerResource (TF.Argument Text) where
    name f s@OpsworksStaticWebLayerResource{..} =
        (\a -> s { _name = a } :: OpsworksStaticWebLayerResource)
             <$> f _name

instance HasStackId OpsworksStaticWebLayerResource (TF.Argument Text) where
    stackId f s@OpsworksStaticWebLayerResource{..} =
        (\a -> s { _stack_id = a } :: OpsworksStaticWebLayerResource)
             <$> f _stack_id

instance HasSystemPackages OpsworksStaticWebLayerResource (TF.Argument Text) where
    systemPackages f s@OpsworksStaticWebLayerResource{..} =
        (\a -> s { _system_packages = a } :: OpsworksStaticWebLayerResource)
             <$> f _system_packages

instance HasUseEbsOptimizedInstances OpsworksStaticWebLayerResource (TF.Argument Text) where
    useEbsOptimizedInstances f s@OpsworksStaticWebLayerResource{..} =
        (\a -> s { _use_ebs_optimized_instances = a } :: OpsworksStaticWebLayerResource)
             <$> f _use_ebs_optimized_instances

instance HasComputedId OpsworksStaticWebLayerResource (TF.Attribute Text) where
    computedId f s@OpsworksStaticWebLayerResource{..} =
        (\a -> s { _computed_id = a } :: OpsworksStaticWebLayerResource)
             <$> f _computed_id

opsworksStaticWebLayerResource :: TF.Resource TF.AWS OpsworksStaticWebLayerResource
opsworksStaticWebLayerResource =
    TF.newResource "aws_opsworks_static_web_layer" $
        OpsworksStaticWebLayerResource {
            _auto_assign_elastic_ips = TF.Nil
            , _auto_assign_public_ips = TF.Nil
            , _auto_healing = TF.Nil
            , _custom_instance_profile_arn = TF.Nil
            , _custom_security_group_ids = TF.Nil
            , _drain_elb_on_shutdown = TF.Nil
            , _ebs_volume = TF.Nil
            , _elastic_load_balancer = TF.Nil
            , _install_updates_on_boot = TF.Nil
            , _instance_shutdown_timeout = TF.Nil
            , _name = TF.Nil
            , _stack_id = TF.Nil
            , _system_packages = TF.Nil
            , _use_ebs_optimized_instances = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_opsworks_user_profile@ AWS resource.

Provides an OpsWorks User Profile resource.
-}
data OpsworksUserProfileResource = OpsworksUserProfileResource {
      _allow_self_management :: !(TF.Argument Text)
    {- ^ (Optional) Whether users can specify their own SSH public key through the My Settings page -}
    , _ssh_public_key        :: !(TF.Argument Text)
    {- ^ (Optional) The users public key -}
    , _ssh_username          :: !(TF.Argument Text)
    {- ^ (Required) The ssh username, with witch this user wants to log in -}
    , _user_arn              :: !(TF.Argument Text)
    {- ^ (Required) The user's IAM ARN -}
    , _computed_id           :: !(TF.Attribute Text)
    {- ^ - Same value as @user_arn@ -}
    } deriving (Show, Eq)

instance TF.ToHCL OpsworksUserProfileResource where
    toHCL OpsworksUserProfileResource{..} = TF.block $ catMaybes
        [ TF.assign "allow_self_management" <$> TF.argument _allow_self_management
        , TF.assign "ssh_public_key" <$> TF.argument _ssh_public_key
        , TF.assign "ssh_username" <$> TF.argument _ssh_username
        , TF.assign "user_arn" <$> TF.argument _user_arn
        ]

instance HasAllowSelfManagement OpsworksUserProfileResource (TF.Argument Text) where
    allowSelfManagement f s@OpsworksUserProfileResource{..} =
        (\a -> s { _allow_self_management = a } :: OpsworksUserProfileResource)
             <$> f _allow_self_management

instance HasSshPublicKey OpsworksUserProfileResource (TF.Argument Text) where
    sshPublicKey f s@OpsworksUserProfileResource{..} =
        (\a -> s { _ssh_public_key = a } :: OpsworksUserProfileResource)
             <$> f _ssh_public_key

instance HasSshUsername OpsworksUserProfileResource (TF.Argument Text) where
    sshUsername f s@OpsworksUserProfileResource{..} =
        (\a -> s { _ssh_username = a } :: OpsworksUserProfileResource)
             <$> f _ssh_username

instance HasUserArn OpsworksUserProfileResource (TF.Argument Text) where
    userArn f s@OpsworksUserProfileResource{..} =
        (\a -> s { _user_arn = a } :: OpsworksUserProfileResource)
             <$> f _user_arn

instance HasComputedId OpsworksUserProfileResource (TF.Attribute Text) where
    computedId f s@OpsworksUserProfileResource{..} =
        (\a -> s { _computed_id = a } :: OpsworksUserProfileResource)
             <$> f _computed_id

opsworksUserProfileResource :: TF.Resource TF.AWS OpsworksUserProfileResource
opsworksUserProfileResource =
    TF.newResource "aws_opsworks_user_profile" $
        OpsworksUserProfileResource {
            _allow_self_management = TF.Nil
            , _ssh_public_key = TF.Nil
            , _ssh_username = TF.Nil
            , _user_arn = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_placement_group@ AWS resource.

Provides an EC2 placement group. Read more about placement groups in
<https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html>
.
-}
data PlacementGroupResource = PlacementGroupResource {
      _name        :: !(TF.Argument Text)
    {- ^ (Required) The name of the placement group. -}
    , _strategy    :: !(TF.Argument Text)
    {- ^ (Required) The placement strategy. -}
    , _computed_id :: !(TF.Attribute Text)
    {- ^ - The name of the placement group. -}
    } deriving (Show, Eq)

instance TF.ToHCL PlacementGroupResource where
    toHCL PlacementGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.argument _name
        , TF.assign "strategy" <$> TF.argument _strategy
        ]

instance HasName PlacementGroupResource (TF.Argument Text) where
    name f s@PlacementGroupResource{..} =
        (\a -> s { _name = a } :: PlacementGroupResource)
             <$> f _name

instance HasStrategy PlacementGroupResource (TF.Argument Text) where
    strategy f s@PlacementGroupResource{..} =
        (\a -> s { _strategy = a } :: PlacementGroupResource)
             <$> f _strategy

instance HasComputedId PlacementGroupResource (TF.Attribute Text) where
    computedId f s@PlacementGroupResource{..} =
        (\a -> s { _computed_id = a } :: PlacementGroupResource)
             <$> f _computed_id

placementGroupResource :: TF.Resource TF.AWS PlacementGroupResource
placementGroupResource =
    TF.newResource "aws_placement_group" $
        PlacementGroupResource {
            _name = TF.Nil
            , _strategy = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_proxy_protocol_policy@ AWS resource.

Provides a proxy protocol policy, which allows an ELB to carry a client
connection information to a backend.
-}
data ProxyProtocolPolicyResource = ProxyProtocolPolicyResource {
      _instance_ports         :: !(TF.Argument Text)
    {- ^ (Required) List of instance ports to which the policy should be applied. This can be specified if the protocol is SSL or TCP. -}
    , _load_balancer          :: !(TF.Argument Text)
    {- ^ (Required) The load balancer to which the policy should be attached. -}
    , _computed_id            :: !(TF.Attribute Text)
    {- ^ - The ID of the policy. -}
    , _computed_load_balancer :: !(TF.Attribute Text)
    {- ^ - The load balancer to which the policy is attached. -}
    } deriving (Show, Eq)

instance TF.ToHCL ProxyProtocolPolicyResource where
    toHCL ProxyProtocolPolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "instance_ports" <$> TF.argument _instance_ports
        , TF.assign "load_balancer" <$> TF.argument _load_balancer
        ]

instance HasInstancePorts ProxyProtocolPolicyResource (TF.Argument Text) where
    instancePorts f s@ProxyProtocolPolicyResource{..} =
        (\a -> s { _instance_ports = a } :: ProxyProtocolPolicyResource)
             <$> f _instance_ports

instance HasLoadBalancer ProxyProtocolPolicyResource (TF.Argument Text) where
    loadBalancer f s@ProxyProtocolPolicyResource{..} =
        (\a -> s { _load_balancer = a } :: ProxyProtocolPolicyResource)
             <$> f _load_balancer

instance HasComputedId ProxyProtocolPolicyResource (TF.Attribute Text) where
    computedId f s@ProxyProtocolPolicyResource{..} =
        (\a -> s { _computed_id = a } :: ProxyProtocolPolicyResource)
             <$> f _computed_id

instance HasComputedLoadBalancer ProxyProtocolPolicyResource (TF.Attribute Text) where
    computedLoadBalancer f s@ProxyProtocolPolicyResource{..} =
        (\a -> s { _computed_load_balancer = a } :: ProxyProtocolPolicyResource)
             <$> f _computed_load_balancer

proxyProtocolPolicyResource :: TF.Resource TF.AWS ProxyProtocolPolicyResource
proxyProtocolPolicyResource =
    TF.newResource "aws_proxy_protocol_policy" $
        ProxyProtocolPolicyResource {
            _instance_ports = TF.Nil
            , _load_balancer = TF.Nil
            , _computed_id = TF.Compute "id"
            , _computed_load_balancer = TF.Compute "load_balancer"
            }

{- | The @aws_rds_cluster_instance@ AWS resource.

Provides an RDS Cluster Resource Instance. A Cluster Instance Resource
defines attributes that are specific to a single instance in a
</docs/providers/aws/r/rds_cluster.html> , specifically running Amazon
Aurora. Unlike other RDS resources that support replication, with Amazon
Aurora you do not designate a primary and subsequent replicas. Instead, you
simply add RDS Instances and Aurora manages the replication. You can use the
</docs/configuration/resources.html#count> meta-parameter to make multiple
instances and join them all to the same RDS Cluster, or you may specify
different Cluster Instance resources with various @instance_class@ sizes.
For more information on Amazon Aurora, see
<https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html> in
the Amazon RDS User Guide.
-}
data RdsClusterInstanceResource = RdsClusterInstanceResource {
      _apply_immediately                        :: !(TF.Argument Text)
    {- ^ (Optional) Specifies whether any database modifications are applied immediately, or during the next maintenance window. Default is @false@ . -}
    , _auto_minor_version_upgrade               :: !(TF.Argument Text)
    {- ^ (Optional) Indicates that minor engine upgrades will be applied automatically to the DB instance during the maintenance window. Default @true@ . -}
    , _cluster_identifier                       :: !(TF.Argument Text)
    {- ^ (Required) The identifier of the </docs/providers/aws/r/rds_cluster.html> in which to launch this instance. -}
    , _db_parameter_group_name                  :: !(TF.Argument Text)
    {- ^ (Optional) The name of the DB parameter group to associate with this instance. -}
    , _db_subnet_group_name                     :: !(TF.Argument Text)
    {- ^ (Required if @publicly_accessible = false@ , Optional otherwise) A DB subnet group to associate with this DB instance. NOTE: This must match the @db_subnet_group_name@ of the attached </docs/providers/aws/r/rds_cluster.html> . -}
    , _engine                                   :: !(TF.Argument Text)
    {- ^ (Optional) The name of the database engine to be used for the RDS instance. Defaults to @aurora@ . -}
    , _engine_version                           :: !(TF.Argument Text)
    {- ^ (Optional) The database engine version. -}
    , _identifier                               :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) The indentifier for the RDS instance, if omitted, Terraform will assign a random, unique identifier. -}
    , _identifier_prefix                        :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) Creates a unique identifier beginning with the specified prefix. Conflicts with @identifer@ . -}
    , _instance_class                           :: !(TF.Argument Text)
    {- ^ (Required) The instance class to use. For details on CPU and memory, see <https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Aurora.Managing.html> . Aurora currently supports the below instance classes. -}
    , _monitoring_interval                      :: !(TF.Argument Text)
    {- ^ (Optional) The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0. Valid Values: 0, 1, 5, 10, 15, 30, 60. -}
    , _monitoring_role_arn                      :: !(TF.Argument Text)
    {- ^ (Optional) The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to CloudWatch Logs. You can find more information on the <http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html> what IAM permissions are needed to allow Enhanced Monitoring for RDS Instances. -}
    , _performance_insights_enabled             :: !(TF.Argument TF.Bool)
    {- ^ (Optional) Specifies whether Performance Insights is enabled or not. -}
    , _performance_insights_kms_key_id          :: !(TF.Argument Text)
    {- ^ (Optional) The ARN for the KMS key to encrypt Performance Insights data. When specifying @performance_insights_kms_key_id@ , @performance_insights_enabled@ needs to be set to true. -}
    , _preferred_backup_window                  :: !(TF.Argument Text)
    {- ^ (Optional) The daily time range during which automated backups are created if automated backups are enabled. Eg: "04:00-09:00" -}
    , _preferred_maintenance_window             :: !(TF.Argument Text)
    {- ^ (Optional) The window to perform maintenance in. Syntax: "ddd:hh24:mi-ddd:hh24:mi". Eg: "Mon:00:00-Mon:03:00". -}
    , _promotion_tier                           :: !(TF.Argument Text)
    {- ^ (Optional) Default 0. Failover Priority setting on instance level. The reader who has lower tier has higher priority to get promoter to writer. -}
    , _publicly_accessible                      :: !(TF.Argument Text)
    {- ^ (Optional) Bool to control if instance is publicly accessible. Default @false@ . See the documentation on <https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBInstance.html> for more details on controlling this property. -}
    , _tags                                     :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the instance. -}
    , _computed_allocated_storage               :: !(TF.Attribute Text)
    {- ^ - The amount of allocated storage -}
    , _computed_availability_zone               :: !(TF.Attribute Text)
    {- ^ - The availability zone of the instance -}
    , _computed_cluster_identifier              :: !(TF.Attribute Text)
    {- ^ - The RDS Cluster Identifier -}
    , _computed_database_name                   :: !(TF.Attribute Text)
    {- ^ - The database name -}
    , _computed_dbi_resource_id                 :: !(TF.Attribute Text)
    {- ^ - The region-unique, immutable identifier for the DB instance. -}
    , _computed_endpoint                        :: !(TF.Attribute Text)
    {- ^ - The DNS address for this instance. May not be writable -}
    , _computed_engine                          :: !(TF.Attribute Text)
    {- ^ - The database engine -}
    , _computed_engine_version                  :: !(TF.Attribute Text)
    {- ^ - The database engine version -}
    , _computed_id                              :: !(TF.Attribute Text)
    {- ^ - The Instance identifier -}
    , _computed_identifier                      :: !(TF.Attribute Text)
    {- ^ - The Instance identifier -}
    , _computed_kms_key_id                      :: !(TF.Attribute Text)
    {- ^ - The ARN for the KMS encryption key if one is set to the cluster. -}
    , _computed_performance_insights_enabled    :: !(TF.Attribute TF.Bool)
    {- ^ - Specifies whether Performance Insights is enabled or not. -}
    , _computed_performance_insights_kms_key_id :: !(TF.Attribute Text)
    {- ^ - The ARN for the KMS encryption key used by Performance Insights. -}
    , _computed_port                            :: !(TF.Attribute Text)
    {- ^ - The database port -}
    , _computed_status                          :: !(TF.Attribute Text)
    {- ^ - The RDS instance status -}
    , _computed_storage_encrypted               :: !(TF.Attribute Text)
    {- ^ - Specifies whether the DB cluster is encrypted. -}
    , _computed_writer                          :: !(TF.Attribute Text)
    {- ^ – Boolean indicating if this instance is writable. @False@ indicates this instance is a read replica -}
    } deriving (Show, Eq)

instance TF.ToHCL RdsClusterInstanceResource where
    toHCL RdsClusterInstanceResource{..} = TF.block $ catMaybes
        [ TF.assign "apply_immediately" <$> TF.argument _apply_immediately
        , TF.assign "auto_minor_version_upgrade" <$> TF.argument _auto_minor_version_upgrade
        , TF.assign "cluster_identifier" <$> TF.argument _cluster_identifier
        , TF.assign "db_parameter_group_name" <$> TF.argument _db_parameter_group_name
        , TF.assign "db_subnet_group_name" <$> TF.argument _db_subnet_group_name
        , TF.assign "engine" <$> TF.argument _engine
        , TF.assign "engine_version" <$> TF.argument _engine_version
        , TF.assign "identifier" <$> TF.argument _identifier
        , TF.assign "identifier_prefix" <$> TF.argument _identifier_prefix
        , TF.assign "instance_class" <$> TF.argument _instance_class
        , TF.assign "monitoring_interval" <$> TF.argument _monitoring_interval
        , TF.assign "monitoring_role_arn" <$> TF.argument _monitoring_role_arn
        , TF.assign "performance_insights_enabled" <$> TF.argument _performance_insights_enabled
        , TF.assign "performance_insights_kms_key_id" <$> TF.argument _performance_insights_kms_key_id
        , TF.assign "preferred_backup_window" <$> TF.argument _preferred_backup_window
        , TF.assign "preferred_maintenance_window" <$> TF.argument _preferred_maintenance_window
        , TF.assign "promotion_tier" <$> TF.argument _promotion_tier
        , TF.assign "publicly_accessible" <$> TF.argument _publicly_accessible
        , TF.assign "tags" <$> TF.argument _tags
        ]

instance HasApplyImmediately RdsClusterInstanceResource (TF.Argument Text) where
    applyImmediately f s@RdsClusterInstanceResource{..} =
        (\a -> s { _apply_immediately = a } :: RdsClusterInstanceResource)
             <$> f _apply_immediately

instance HasAutoMinorVersionUpgrade RdsClusterInstanceResource (TF.Argument Text) where
    autoMinorVersionUpgrade f s@RdsClusterInstanceResource{..} =
        (\a -> s { _auto_minor_version_upgrade = a } :: RdsClusterInstanceResource)
             <$> f _auto_minor_version_upgrade

instance HasClusterIdentifier RdsClusterInstanceResource (TF.Argument Text) where
    clusterIdentifier f s@RdsClusterInstanceResource{..} =
        (\a -> s { _cluster_identifier = a } :: RdsClusterInstanceResource)
             <$> f _cluster_identifier

instance HasDbParameterGroupName RdsClusterInstanceResource (TF.Argument Text) where
    dbParameterGroupName f s@RdsClusterInstanceResource{..} =
        (\a -> s { _db_parameter_group_name = a } :: RdsClusterInstanceResource)
             <$> f _db_parameter_group_name

instance HasDbSubnetGroupName RdsClusterInstanceResource (TF.Argument Text) where
    dbSubnetGroupName f s@RdsClusterInstanceResource{..} =
        (\a -> s { _db_subnet_group_name = a } :: RdsClusterInstanceResource)
             <$> f _db_subnet_group_name

instance HasEngine RdsClusterInstanceResource (TF.Argument Text) where
    engine f s@RdsClusterInstanceResource{..} =
        (\a -> s { _engine = a } :: RdsClusterInstanceResource)
             <$> f _engine

instance HasEngineVersion RdsClusterInstanceResource (TF.Argument Text) where
    engineVersion f s@RdsClusterInstanceResource{..} =
        (\a -> s { _engine_version = a } :: RdsClusterInstanceResource)
             <$> f _engine_version

instance HasIdentifier RdsClusterInstanceResource (TF.Argument Text) where
    identifier f s@RdsClusterInstanceResource{..} =
        (\a -> s { _identifier = a } :: RdsClusterInstanceResource)
             <$> f _identifier

instance HasIdentifierPrefix RdsClusterInstanceResource (TF.Argument Text) where
    identifierPrefix f s@RdsClusterInstanceResource{..} =
        (\a -> s { _identifier_prefix = a } :: RdsClusterInstanceResource)
             <$> f _identifier_prefix

instance HasInstanceClass RdsClusterInstanceResource (TF.Argument Text) where
    instanceClass f s@RdsClusterInstanceResource{..} =
        (\a -> s { _instance_class = a } :: RdsClusterInstanceResource)
             <$> f _instance_class

instance HasMonitoringInterval RdsClusterInstanceResource (TF.Argument Text) where
    monitoringInterval f s@RdsClusterInstanceResource{..} =
        (\a -> s { _monitoring_interval = a } :: RdsClusterInstanceResource)
             <$> f _monitoring_interval

instance HasMonitoringRoleArn RdsClusterInstanceResource (TF.Argument Text) where
    monitoringRoleArn f s@RdsClusterInstanceResource{..} =
        (\a -> s { _monitoring_role_arn = a } :: RdsClusterInstanceResource)
             <$> f _monitoring_role_arn

instance HasPerformanceInsightsEnabled RdsClusterInstanceResource (TF.Argument TF.Bool) where
    performanceInsightsEnabled f s@RdsClusterInstanceResource{..} =
        (\a -> s { _performance_insights_enabled = a } :: RdsClusterInstanceResource)
             <$> f _performance_insights_enabled

instance HasPerformanceInsightsKmsKeyId RdsClusterInstanceResource (TF.Argument Text) where
    performanceInsightsKmsKeyId f s@RdsClusterInstanceResource{..} =
        (\a -> s { _performance_insights_kms_key_id = a } :: RdsClusterInstanceResource)
             <$> f _performance_insights_kms_key_id

instance HasPreferredBackupWindow RdsClusterInstanceResource (TF.Argument Text) where
    preferredBackupWindow f s@RdsClusterInstanceResource{..} =
        (\a -> s { _preferred_backup_window = a } :: RdsClusterInstanceResource)
             <$> f _preferred_backup_window

instance HasPreferredMaintenanceWindow RdsClusterInstanceResource (TF.Argument Text) where
    preferredMaintenanceWindow f s@RdsClusterInstanceResource{..} =
        (\a -> s { _preferred_maintenance_window = a } :: RdsClusterInstanceResource)
             <$> f _preferred_maintenance_window

instance HasPromotionTier RdsClusterInstanceResource (TF.Argument Text) where
    promotionTier f s@RdsClusterInstanceResource{..} =
        (\a -> s { _promotion_tier = a } :: RdsClusterInstanceResource)
             <$> f _promotion_tier

instance HasPubliclyAccessible RdsClusterInstanceResource (TF.Argument Text) where
    publiclyAccessible f s@RdsClusterInstanceResource{..} =
        (\a -> s { _publicly_accessible = a } :: RdsClusterInstanceResource)
             <$> f _publicly_accessible

instance HasTags RdsClusterInstanceResource (TF.Argument TF.Tags) where
    tags f s@RdsClusterInstanceResource{..} =
        (\a -> s { _tags = a } :: RdsClusterInstanceResource)
             <$> f _tags

instance HasComputedAllocatedStorage RdsClusterInstanceResource (TF.Attribute Text) where
    computedAllocatedStorage f s@RdsClusterInstanceResource{..} =
        (\a -> s { _computed_allocated_storage = a } :: RdsClusterInstanceResource)
             <$> f _computed_allocated_storage

instance HasComputedAvailabilityZone RdsClusterInstanceResource (TF.Attribute Text) where
    computedAvailabilityZone f s@RdsClusterInstanceResource{..} =
        (\a -> s { _computed_availability_zone = a } :: RdsClusterInstanceResource)
             <$> f _computed_availability_zone

instance HasComputedClusterIdentifier RdsClusterInstanceResource (TF.Attribute Text) where
    computedClusterIdentifier f s@RdsClusterInstanceResource{..} =
        (\a -> s { _computed_cluster_identifier = a } :: RdsClusterInstanceResource)
             <$> f _computed_cluster_identifier

instance HasComputedDatabaseName RdsClusterInstanceResource (TF.Attribute Text) where
    computedDatabaseName f s@RdsClusterInstanceResource{..} =
        (\a -> s { _computed_database_name = a } :: RdsClusterInstanceResource)
             <$> f _computed_database_name

instance HasComputedDbiResourceId RdsClusterInstanceResource (TF.Attribute Text) where
    computedDbiResourceId f s@RdsClusterInstanceResource{..} =
        (\a -> s { _computed_dbi_resource_id = a } :: RdsClusterInstanceResource)
             <$> f _computed_dbi_resource_id

instance HasComputedEndpoint RdsClusterInstanceResource (TF.Attribute Text) where
    computedEndpoint f s@RdsClusterInstanceResource{..} =
        (\a -> s { _computed_endpoint = a } :: RdsClusterInstanceResource)
             <$> f _computed_endpoint

instance HasComputedEngine RdsClusterInstanceResource (TF.Attribute Text) where
    computedEngine f s@RdsClusterInstanceResource{..} =
        (\a -> s { _computed_engine = a } :: RdsClusterInstanceResource)
             <$> f _computed_engine

instance HasComputedEngineVersion RdsClusterInstanceResource (TF.Attribute Text) where
    computedEngineVersion f s@RdsClusterInstanceResource{..} =
        (\a -> s { _computed_engine_version = a } :: RdsClusterInstanceResource)
             <$> f _computed_engine_version

instance HasComputedId RdsClusterInstanceResource (TF.Attribute Text) where
    computedId f s@RdsClusterInstanceResource{..} =
        (\a -> s { _computed_id = a } :: RdsClusterInstanceResource)
             <$> f _computed_id

instance HasComputedIdentifier RdsClusterInstanceResource (TF.Attribute Text) where
    computedIdentifier f s@RdsClusterInstanceResource{..} =
        (\a -> s { _computed_identifier = a } :: RdsClusterInstanceResource)
             <$> f _computed_identifier

instance HasComputedKmsKeyId RdsClusterInstanceResource (TF.Attribute Text) where
    computedKmsKeyId f s@RdsClusterInstanceResource{..} =
        (\a -> s { _computed_kms_key_id = a } :: RdsClusterInstanceResource)
             <$> f _computed_kms_key_id

instance HasComputedPerformanceInsightsEnabled RdsClusterInstanceResource (TF.Attribute TF.Bool) where
    computedPerformanceInsightsEnabled f s@RdsClusterInstanceResource{..} =
        (\a -> s { _computed_performance_insights_enabled = a } :: RdsClusterInstanceResource)
             <$> f _computed_performance_insights_enabled

instance HasComputedPerformanceInsightsKmsKeyId RdsClusterInstanceResource (TF.Attribute Text) where
    computedPerformanceInsightsKmsKeyId f s@RdsClusterInstanceResource{..} =
        (\a -> s { _computed_performance_insights_kms_key_id = a } :: RdsClusterInstanceResource)
             <$> f _computed_performance_insights_kms_key_id

instance HasComputedPort RdsClusterInstanceResource (TF.Attribute Text) where
    computedPort f s@RdsClusterInstanceResource{..} =
        (\a -> s { _computed_port = a } :: RdsClusterInstanceResource)
             <$> f _computed_port

instance HasComputedStatus RdsClusterInstanceResource (TF.Attribute Text) where
    computedStatus f s@RdsClusterInstanceResource{..} =
        (\a -> s { _computed_status = a } :: RdsClusterInstanceResource)
             <$> f _computed_status

instance HasComputedStorageEncrypted RdsClusterInstanceResource (TF.Attribute Text) where
    computedStorageEncrypted f s@RdsClusterInstanceResource{..} =
        (\a -> s { _computed_storage_encrypted = a } :: RdsClusterInstanceResource)
             <$> f _computed_storage_encrypted

instance HasComputedWriter RdsClusterInstanceResource (TF.Attribute Text) where
    computedWriter f s@RdsClusterInstanceResource{..} =
        (\a -> s { _computed_writer = a } :: RdsClusterInstanceResource)
             <$> f _computed_writer

rdsClusterInstanceResource :: TF.Resource TF.AWS RdsClusterInstanceResource
rdsClusterInstanceResource =
    TF.newResource "aws_rds_cluster_instance" $
        RdsClusterInstanceResource {
            _apply_immediately = TF.Nil
            , _auto_minor_version_upgrade = TF.Nil
            , _cluster_identifier = TF.Nil
            , _db_parameter_group_name = TF.Nil
            , _db_subnet_group_name = TF.Nil
            , _engine = TF.Nil
            , _engine_version = TF.Nil
            , _identifier = TF.Nil
            , _identifier_prefix = TF.Nil
            , _instance_class = TF.Nil
            , _monitoring_interval = TF.Nil
            , _monitoring_role_arn = TF.Nil
            , _performance_insights_enabled = TF.Nil
            , _performance_insights_kms_key_id = TF.Nil
            , _preferred_backup_window = TF.Nil
            , _preferred_maintenance_window = TF.Nil
            , _promotion_tier = TF.Nil
            , _publicly_accessible = TF.Nil
            , _tags = TF.Nil
            , _computed_allocated_storage = TF.Compute "allocated_storage"
            , _computed_availability_zone = TF.Compute "availability_zone"
            , _computed_cluster_identifier = TF.Compute "cluster_identifier"
            , _computed_database_name = TF.Compute "database_name"
            , _computed_dbi_resource_id = TF.Compute "dbi_resource_id"
            , _computed_endpoint = TF.Compute "endpoint"
            , _computed_engine = TF.Compute "engine"
            , _computed_engine_version = TF.Compute "engine_version"
            , _computed_id = TF.Compute "id"
            , _computed_identifier = TF.Compute "identifier"
            , _computed_kms_key_id = TF.Compute "kms_key_id"
            , _computed_performance_insights_enabled = TF.Compute "performance_insights_enabled"
            , _computed_performance_insights_kms_key_id = TF.Compute "performance_insights_kms_key_id"
            , _computed_port = TF.Compute "port"
            , _computed_status = TF.Compute "status"
            , _computed_storage_encrypted = TF.Compute "storage_encrypted"
            , _computed_writer = TF.Compute "writer"
            }

{- | The @aws_rds_cluster_parameter_group@ AWS resource.

Provides an RDS DB cluster parameter group resource.
-}
data RdsClusterParameterGroupResource = RdsClusterParameterGroupResource {
      _description  :: !(TF.Argument Text)
    {- ^ (Optional) The description of the DB cluster parameter group. Defaults to "Managed by Terraform". -}
    , _family'      :: !(TF.Argument Text)
    {- ^ (Required) The family of the DB cluster parameter group. -}
    , _name         :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) The name of the DB cluster parameter group. If omitted, Terraform will assign a random, unique name. -}
    , _name_prefix  :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) Creates a unique name beginning with the specified prefix. Conflicts with @name@ . -}
    , _parameter    :: !(TF.Argument Text)
    {- ^ (Optional) A list of DB parameters to apply. Note that parameters may differ from a family to an other. Full list of all parameters can be discovered via <https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-cluster-parameters.html> after initial creation of the group. -}
    , _tags         :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _computed_arn :: !(TF.Attribute Text)
    {- ^ - The ARN of the db cluster parameter group. -}
    , _computed_id  :: !(TF.Attribute Text)
    {- ^ - The db cluster parameter group name. -}
    } deriving (Show, Eq)

instance TF.ToHCL RdsClusterParameterGroupResource where
    toHCL RdsClusterParameterGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.argument _description
        , TF.assign "family" <$> TF.argument _family'
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "name_prefix" <$> TF.argument _name_prefix
        , TF.assign "parameter" <$> TF.argument _parameter
        , TF.assign "tags" <$> TF.argument _tags
        ]

instance HasDescription RdsClusterParameterGroupResource (TF.Argument Text) where
    description f s@RdsClusterParameterGroupResource{..} =
        (\a -> s { _description = a } :: RdsClusterParameterGroupResource)
             <$> f _description

instance HasFamily' RdsClusterParameterGroupResource (TF.Argument Text) where
    family' f s@RdsClusterParameterGroupResource{..} =
        (\a -> s { _family' = a } :: RdsClusterParameterGroupResource)
             <$> f _family'

instance HasName RdsClusterParameterGroupResource (TF.Argument Text) where
    name f s@RdsClusterParameterGroupResource{..} =
        (\a -> s { _name = a } :: RdsClusterParameterGroupResource)
             <$> f _name

instance HasNamePrefix RdsClusterParameterGroupResource (TF.Argument Text) where
    namePrefix f s@RdsClusterParameterGroupResource{..} =
        (\a -> s { _name_prefix = a } :: RdsClusterParameterGroupResource)
             <$> f _name_prefix

instance HasParameter RdsClusterParameterGroupResource (TF.Argument Text) where
    parameter f s@RdsClusterParameterGroupResource{..} =
        (\a -> s { _parameter = a } :: RdsClusterParameterGroupResource)
             <$> f _parameter

instance HasTags RdsClusterParameterGroupResource (TF.Argument TF.Tags) where
    tags f s@RdsClusterParameterGroupResource{..} =
        (\a -> s { _tags = a } :: RdsClusterParameterGroupResource)
             <$> f _tags

instance HasComputedArn RdsClusterParameterGroupResource (TF.Attribute Text) where
    computedArn f s@RdsClusterParameterGroupResource{..} =
        (\a -> s { _computed_arn = a } :: RdsClusterParameterGroupResource)
             <$> f _computed_arn

instance HasComputedId RdsClusterParameterGroupResource (TF.Attribute Text) where
    computedId f s@RdsClusterParameterGroupResource{..} =
        (\a -> s { _computed_id = a } :: RdsClusterParameterGroupResource)
             <$> f _computed_id

rdsClusterParameterGroupResource :: TF.Resource TF.AWS RdsClusterParameterGroupResource
rdsClusterParameterGroupResource =
    TF.newResource "aws_rds_cluster_parameter_group" $
        RdsClusterParameterGroupResource {
            _description = TF.Nil
            , _family' = TF.Nil
            , _name = TF.Nil
            , _name_prefix = TF.Nil
            , _parameter = TF.Nil
            , _tags = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_rds_cluster@ AWS resource.

Provides an RDS Cluster Resource. A Cluster Resource defines attributes that
are applied to the entire cluster of
</docs/providers/aws/r/rds_cluster_instance.html> . Use the RDS Cluster
resource and RDS Cluster Instances to create and use Amazon Aurora, a
MySQL-compatible database engine. For more information on Amazon Aurora, see
<https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html> in
the Amazon RDS User Guide. Changes to a RDS Cluster can occur when you
manually change a parameter, such as @port@ , and are reflected in the next
maintenance window. Because of this, Terraform may report a difference in
its planning phase because a modification has not yet taken place. You can
use the @apply_immediately@ flag to instruct the service to apply the change
immediately (see documentation below). ~> Note: using @apply_immediately@
can result in a brief downtime as the server reboots. See the AWS Docs on
<https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html>
for more information. ~> Note: All arguments including the username and
password will be stored in the raw state as plain-text.
</docs/state/sensitive-data.html> .
-}
data RdsClusterResource = RdsClusterResource {
      _apply_immediately                      :: !(TF.Argument Text)
    {- ^ (Optional) Specifies whether any cluster modifications are applied immediately, or during the next maintenance window. Default is @false@ . See <https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html> -}
    , _availability_zones                     :: !(TF.Argument Text)
    {- ^ (Optional) A list of EC2 Availability Zones that instances in the DB cluster can be created in -}
    , _backup_retention_period                :: !(TF.Argument Text)
    {- ^ (Optional) The days to retain backups for. Default 1 -}
    , _cluster_identifier                     :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resources) The cluster identifier. If omitted, Terraform will assign a random, unique identifier. -}
    , _cluster_identifier_prefix              :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) Creates a unique cluster identifier beginning with the specified prefix. Conflicts with @cluster_identifer@ . -}
    , _database_name                          :: !(TF.Argument Text)
    {- ^ (Optional) Name for an automatically created database on cluster creation. There are different naming restrictions per database engine: <http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Limits.html#RDS_Limits.Constraints> -}
    , _db_cluster_parameter_group_name        :: !(TF.Argument Text)
    {- ^ (Optional) A cluster parameter group to associate with the cluster. -}
    , _db_subnet_group_name                   :: !(TF.Argument Text)
    {- ^ (Optional) A DB subnet group to associate with this DB instance. NOTE: This must match the @db_subnet_group_name@ specified on every </docs/providers/aws/r/rds_cluster_instance.html> in the cluster. -}
    , _engine                                 :: !(TF.Argument Text)
    {- ^ (Optional) The name of the database engine to be used for this DB cluster. Defaults to @aurora@ . -}
    , _engine_version                         :: !(TF.Argument Text)
    {- ^ (Optional) The database engine version. -}
    , _final_snapshot_identifier              :: !(TF.Argument Text)
    {- ^ (Optional) The name of your final DB snapshot when this DB cluster is deleted. If omitted, no final snapshot will be made. -}
    , _iam_database_authentication_enabled    :: !(TF.Argument TF.Bool)
    {- ^ (Optional) Specifies whether or mappings of AWS Identity and Access Management (IAM) accounts to database accounts is enabled. -}
    , _iam_roles                              :: !(TF.Argument Text)
    {- ^ (Optional) A List of ARNs for the IAM roles to associate to the RDS Cluster. -}
    , _kms_key_id                             :: !(TF.Argument Text)
    {- ^ (Optional) The ARN for the KMS encryption key. When specifying @kms_key_id@ , @storage_encrypted@ needs to be set to true. -}
    , _master_password                        :: !(TF.Argument Text)
    {- ^ (Required unless a @snapshot_identifier@ is provided) Password for the master DB user. Note that this may show up in logs, and it will be stored in the state file. Please refer to the <http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Limits.html#RDS_Limits.Constraints> -}
    , _master_username                        :: !(TF.Argument Text)
    {- ^ (Required unless a @snapshot_identifier@ is provided) Username for the master DB user. Please refer to the <http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Limits.html#RDS_Limits.Constraints> -}
    , _port                                   :: !(TF.Argument Text)
    {- ^ (Optional) The port on which the DB accepts connections -}
    , _preferred_backup_window                :: !(TF.Argument Text)
    {- ^ (Optional) The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter.Time in UTC Default: A 30-minute window selected at random from an 8-hour block of time per region. e.g. 04:00-09:00 -}
    , _preferred_maintenance_window           :: !(TF.Argument Text)
    {- ^ (Optional) The weekly time range during which system maintenance can occur, in (UTC) e.g. wed:04:00-wed:04:30 -}
    , _skip_final_snapshot                    :: !(TF.Argument Text)
    {- ^ (Optional) Determines whether a final DB snapshot is created before the DB cluster is deleted. If true is specified, no DB snapshot is created. If false is specified, a DB snapshot is created before the DB cluster is deleted, using the value from @final_snapshot_identifier@ . Default is @false@ . -}
    , _snapshot_identifier                    :: !(TF.Argument Text)
    {- ^ (Optional) Specifies whether or not to create this cluster from a snapshot. This correlates to the snapshot ID you'd find in the RDS console, e.g: rds:production-2015-06-26-06-05. -}
    , _storage_encrypted                      :: !(TF.Argument Text)
    {- ^ (Optional) Specifies whether the DB cluster is encrypted. The default is @false@ if not specified. -}
    , _vpc_security_group_ids                 :: !(TF.Argument Text)
    {- ^ (Optional) List of VPC security groups to associate with the Cluster -}
    , _computed_allocated_storage             :: !(TF.Attribute Text)
    {- ^ - The amount of allocated storage -}
    , _computed_availability_zones            :: !(TF.Attribute Text)
    {- ^ - The availability zone of the instance -}
    , _computed_backup_retention_period       :: !(TF.Attribute Text)
    {- ^ - The backup retention period -}
    , _computed_cluster_identifier            :: !(TF.Attribute Text)
    {- ^ - The RDS Cluster Identifier -}
    , _computed_cluster_members               :: !(TF.Attribute Text)
    {- ^ – List of RDS Instances that are a part of this cluster -}
    , _computed_cluster_resource_id           :: !(TF.Attribute Text)
    {- ^ - The RDS Cluster Resource ID -}
    , _computed_database_name                 :: !(TF.Attribute Text)
    {- ^ - The database name -}
    , _computed_endpoint                      :: !(TF.Attribute Text)
    {- ^ - The DNS address of the RDS instance -}
    , _computed_engine                        :: !(TF.Attribute Text)
    {- ^ - The database engine -}
    , _computed_engine_version                :: !(TF.Attribute Text)
    {- ^ - The database engine version -}
    , _computed_id                            :: !(TF.Attribute Text)
    {- ^ - The RDS Cluster Identifier -}
    , _computed_maintenance_window            :: !(TF.Attribute Text)
    {- ^ - The instance maintenance window -}
    , _computed_master_username               :: !(TF.Attribute Text)
    {- ^ - The master username for the database -}
    , _computed_port                          :: !(TF.Attribute Text)
    {- ^ - The database port -}
    , _computed_preferred_backup_window       :: !(TF.Attribute Text)
    {- ^ - The daily time range during which the backups happen -}
    , _computed_preferred_maintenance_window  :: !(TF.Attribute Text)
    {- ^ - The maintenance window -}
    , _computed_reader_endpoint               :: !(TF.Attribute Text)
    {- ^ - A read-only endpoint for the Aurora cluster, automatically load-balanced across replicas -}
    , _computed_replication_source_identifier :: !(TF.Attribute Text)
    {- ^ - ARN  of the source DB cluster if this DB cluster is created as a Read Replica. -}
    , _computed_status                        :: !(TF.Attribute Text)
    {- ^ - The RDS instance status -}
    , _computed_storage_encrypted             :: !(TF.Attribute Text)
    {- ^ - Specifies whether the DB cluster is encrypted -}
    } deriving (Show, Eq)

instance TF.ToHCL RdsClusterResource where
    toHCL RdsClusterResource{..} = TF.block $ catMaybes
        [ TF.assign "apply_immediately" <$> TF.argument _apply_immediately
        , TF.assign "availability_zones" <$> TF.argument _availability_zones
        , TF.assign "backup_retention_period" <$> TF.argument _backup_retention_period
        , TF.assign "cluster_identifier" <$> TF.argument _cluster_identifier
        , TF.assign "cluster_identifier_prefix" <$> TF.argument _cluster_identifier_prefix
        , TF.assign "database_name" <$> TF.argument _database_name
        , TF.assign "db_cluster_parameter_group_name" <$> TF.argument _db_cluster_parameter_group_name
        , TF.assign "db_subnet_group_name" <$> TF.argument _db_subnet_group_name
        , TF.assign "engine" <$> TF.argument _engine
        , TF.assign "engine_version" <$> TF.argument _engine_version
        , TF.assign "final_snapshot_identifier" <$> TF.argument _final_snapshot_identifier
        , TF.assign "iam_database_authentication_enabled" <$> TF.argument _iam_database_authentication_enabled
        , TF.assign "iam_roles" <$> TF.argument _iam_roles
        , TF.assign "kms_key_id" <$> TF.argument _kms_key_id
        , TF.assign "master_password" <$> TF.argument _master_password
        , TF.assign "master_username" <$> TF.argument _master_username
        , TF.assign "port" <$> TF.argument _port
        , TF.assign "preferred_backup_window" <$> TF.argument _preferred_backup_window
        , TF.assign "preferred_maintenance_window" <$> TF.argument _preferred_maintenance_window
        , TF.assign "skip_final_snapshot" <$> TF.argument _skip_final_snapshot
        , TF.assign "snapshot_identifier" <$> TF.argument _snapshot_identifier
        , TF.assign "storage_encrypted" <$> TF.argument _storage_encrypted
        , TF.assign "vpc_security_group_ids" <$> TF.argument _vpc_security_group_ids
        ]

instance HasApplyImmediately RdsClusterResource (TF.Argument Text) where
    applyImmediately f s@RdsClusterResource{..} =
        (\a -> s { _apply_immediately = a } :: RdsClusterResource)
             <$> f _apply_immediately

instance HasAvailabilityZones RdsClusterResource (TF.Argument Text) where
    availabilityZones f s@RdsClusterResource{..} =
        (\a -> s { _availability_zones = a } :: RdsClusterResource)
             <$> f _availability_zones

instance HasBackupRetentionPeriod RdsClusterResource (TF.Argument Text) where
    backupRetentionPeriod f s@RdsClusterResource{..} =
        (\a -> s { _backup_retention_period = a } :: RdsClusterResource)
             <$> f _backup_retention_period

instance HasClusterIdentifier RdsClusterResource (TF.Argument Text) where
    clusterIdentifier f s@RdsClusterResource{..} =
        (\a -> s { _cluster_identifier = a } :: RdsClusterResource)
             <$> f _cluster_identifier

instance HasClusterIdentifierPrefix RdsClusterResource (TF.Argument Text) where
    clusterIdentifierPrefix f s@RdsClusterResource{..} =
        (\a -> s { _cluster_identifier_prefix = a } :: RdsClusterResource)
             <$> f _cluster_identifier_prefix

instance HasDatabaseName RdsClusterResource (TF.Argument Text) where
    databaseName f s@RdsClusterResource{..} =
        (\a -> s { _database_name = a } :: RdsClusterResource)
             <$> f _database_name

instance HasDbClusterParameterGroupName RdsClusterResource (TF.Argument Text) where
    dbClusterParameterGroupName f s@RdsClusterResource{..} =
        (\a -> s { _db_cluster_parameter_group_name = a } :: RdsClusterResource)
             <$> f _db_cluster_parameter_group_name

instance HasDbSubnetGroupName RdsClusterResource (TF.Argument Text) where
    dbSubnetGroupName f s@RdsClusterResource{..} =
        (\a -> s { _db_subnet_group_name = a } :: RdsClusterResource)
             <$> f _db_subnet_group_name

instance HasEngine RdsClusterResource (TF.Argument Text) where
    engine f s@RdsClusterResource{..} =
        (\a -> s { _engine = a } :: RdsClusterResource)
             <$> f _engine

instance HasEngineVersion RdsClusterResource (TF.Argument Text) where
    engineVersion f s@RdsClusterResource{..} =
        (\a -> s { _engine_version = a } :: RdsClusterResource)
             <$> f _engine_version

instance HasFinalSnapshotIdentifier RdsClusterResource (TF.Argument Text) where
    finalSnapshotIdentifier f s@RdsClusterResource{..} =
        (\a -> s { _final_snapshot_identifier = a } :: RdsClusterResource)
             <$> f _final_snapshot_identifier

instance HasIamDatabaseAuthenticationEnabled RdsClusterResource (TF.Argument TF.Bool) where
    iamDatabaseAuthenticationEnabled f s@RdsClusterResource{..} =
        (\a -> s { _iam_database_authentication_enabled = a } :: RdsClusterResource)
             <$> f _iam_database_authentication_enabled

instance HasIamRoles RdsClusterResource (TF.Argument Text) where
    iamRoles f s@RdsClusterResource{..} =
        (\a -> s { _iam_roles = a } :: RdsClusterResource)
             <$> f _iam_roles

instance HasKmsKeyId RdsClusterResource (TF.Argument Text) where
    kmsKeyId f s@RdsClusterResource{..} =
        (\a -> s { _kms_key_id = a } :: RdsClusterResource)
             <$> f _kms_key_id

instance HasMasterPassword RdsClusterResource (TF.Argument Text) where
    masterPassword f s@RdsClusterResource{..} =
        (\a -> s { _master_password = a } :: RdsClusterResource)
             <$> f _master_password

instance HasMasterUsername RdsClusterResource (TF.Argument Text) where
    masterUsername f s@RdsClusterResource{..} =
        (\a -> s { _master_username = a } :: RdsClusterResource)
             <$> f _master_username

instance HasPort RdsClusterResource (TF.Argument Text) where
    port f s@RdsClusterResource{..} =
        (\a -> s { _port = a } :: RdsClusterResource)
             <$> f _port

instance HasPreferredBackupWindow RdsClusterResource (TF.Argument Text) where
    preferredBackupWindow f s@RdsClusterResource{..} =
        (\a -> s { _preferred_backup_window = a } :: RdsClusterResource)
             <$> f _preferred_backup_window

instance HasPreferredMaintenanceWindow RdsClusterResource (TF.Argument Text) where
    preferredMaintenanceWindow f s@RdsClusterResource{..} =
        (\a -> s { _preferred_maintenance_window = a } :: RdsClusterResource)
             <$> f _preferred_maintenance_window

instance HasSkipFinalSnapshot RdsClusterResource (TF.Argument Text) where
    skipFinalSnapshot f s@RdsClusterResource{..} =
        (\a -> s { _skip_final_snapshot = a } :: RdsClusterResource)
             <$> f _skip_final_snapshot

instance HasSnapshotIdentifier RdsClusterResource (TF.Argument Text) where
    snapshotIdentifier f s@RdsClusterResource{..} =
        (\a -> s { _snapshot_identifier = a } :: RdsClusterResource)
             <$> f _snapshot_identifier

instance HasStorageEncrypted RdsClusterResource (TF.Argument Text) where
    storageEncrypted f s@RdsClusterResource{..} =
        (\a -> s { _storage_encrypted = a } :: RdsClusterResource)
             <$> f _storage_encrypted

instance HasVpcSecurityGroupIds RdsClusterResource (TF.Argument Text) where
    vpcSecurityGroupIds f s@RdsClusterResource{..} =
        (\a -> s { _vpc_security_group_ids = a } :: RdsClusterResource)
             <$> f _vpc_security_group_ids

instance HasComputedAllocatedStorage RdsClusterResource (TF.Attribute Text) where
    computedAllocatedStorage f s@RdsClusterResource{..} =
        (\a -> s { _computed_allocated_storage = a } :: RdsClusterResource)
             <$> f _computed_allocated_storage

instance HasComputedAvailabilityZones RdsClusterResource (TF.Attribute Text) where
    computedAvailabilityZones f s@RdsClusterResource{..} =
        (\a -> s { _computed_availability_zones = a } :: RdsClusterResource)
             <$> f _computed_availability_zones

instance HasComputedBackupRetentionPeriod RdsClusterResource (TF.Attribute Text) where
    computedBackupRetentionPeriod f s@RdsClusterResource{..} =
        (\a -> s { _computed_backup_retention_period = a } :: RdsClusterResource)
             <$> f _computed_backup_retention_period

instance HasComputedClusterIdentifier RdsClusterResource (TF.Attribute Text) where
    computedClusterIdentifier f s@RdsClusterResource{..} =
        (\a -> s { _computed_cluster_identifier = a } :: RdsClusterResource)
             <$> f _computed_cluster_identifier

instance HasComputedClusterMembers RdsClusterResource (TF.Attribute Text) where
    computedClusterMembers f s@RdsClusterResource{..} =
        (\a -> s { _computed_cluster_members = a } :: RdsClusterResource)
             <$> f _computed_cluster_members

instance HasComputedClusterResourceId RdsClusterResource (TF.Attribute Text) where
    computedClusterResourceId f s@RdsClusterResource{..} =
        (\a -> s { _computed_cluster_resource_id = a } :: RdsClusterResource)
             <$> f _computed_cluster_resource_id

instance HasComputedDatabaseName RdsClusterResource (TF.Attribute Text) where
    computedDatabaseName f s@RdsClusterResource{..} =
        (\a -> s { _computed_database_name = a } :: RdsClusterResource)
             <$> f _computed_database_name

instance HasComputedEndpoint RdsClusterResource (TF.Attribute Text) where
    computedEndpoint f s@RdsClusterResource{..} =
        (\a -> s { _computed_endpoint = a } :: RdsClusterResource)
             <$> f _computed_endpoint

instance HasComputedEngine RdsClusterResource (TF.Attribute Text) where
    computedEngine f s@RdsClusterResource{..} =
        (\a -> s { _computed_engine = a } :: RdsClusterResource)
             <$> f _computed_engine

instance HasComputedEngineVersion RdsClusterResource (TF.Attribute Text) where
    computedEngineVersion f s@RdsClusterResource{..} =
        (\a -> s { _computed_engine_version = a } :: RdsClusterResource)
             <$> f _computed_engine_version

instance HasComputedId RdsClusterResource (TF.Attribute Text) where
    computedId f s@RdsClusterResource{..} =
        (\a -> s { _computed_id = a } :: RdsClusterResource)
             <$> f _computed_id

instance HasComputedMaintenanceWindow RdsClusterResource (TF.Attribute Text) where
    computedMaintenanceWindow f s@RdsClusterResource{..} =
        (\a -> s { _computed_maintenance_window = a } :: RdsClusterResource)
             <$> f _computed_maintenance_window

instance HasComputedMasterUsername RdsClusterResource (TF.Attribute Text) where
    computedMasterUsername f s@RdsClusterResource{..} =
        (\a -> s { _computed_master_username = a } :: RdsClusterResource)
             <$> f _computed_master_username

instance HasComputedPort RdsClusterResource (TF.Attribute Text) where
    computedPort f s@RdsClusterResource{..} =
        (\a -> s { _computed_port = a } :: RdsClusterResource)
             <$> f _computed_port

instance HasComputedPreferredBackupWindow RdsClusterResource (TF.Attribute Text) where
    computedPreferredBackupWindow f s@RdsClusterResource{..} =
        (\a -> s { _computed_preferred_backup_window = a } :: RdsClusterResource)
             <$> f _computed_preferred_backup_window

instance HasComputedPreferredMaintenanceWindow RdsClusterResource (TF.Attribute Text) where
    computedPreferredMaintenanceWindow f s@RdsClusterResource{..} =
        (\a -> s { _computed_preferred_maintenance_window = a } :: RdsClusterResource)
             <$> f _computed_preferred_maintenance_window

instance HasComputedReaderEndpoint RdsClusterResource (TF.Attribute Text) where
    computedReaderEndpoint f s@RdsClusterResource{..} =
        (\a -> s { _computed_reader_endpoint = a } :: RdsClusterResource)
             <$> f _computed_reader_endpoint

instance HasComputedReplicationSourceIdentifier RdsClusterResource (TF.Attribute Text) where
    computedReplicationSourceIdentifier f s@RdsClusterResource{..} =
        (\a -> s { _computed_replication_source_identifier = a } :: RdsClusterResource)
             <$> f _computed_replication_source_identifier

instance HasComputedStatus RdsClusterResource (TF.Attribute Text) where
    computedStatus f s@RdsClusterResource{..} =
        (\a -> s { _computed_status = a } :: RdsClusterResource)
             <$> f _computed_status

instance HasComputedStorageEncrypted RdsClusterResource (TF.Attribute Text) where
    computedStorageEncrypted f s@RdsClusterResource{..} =
        (\a -> s { _computed_storage_encrypted = a } :: RdsClusterResource)
             <$> f _computed_storage_encrypted

rdsClusterResource :: TF.Resource TF.AWS RdsClusterResource
rdsClusterResource =
    TF.newResource "aws_rds_cluster" $
        RdsClusterResource {
            _apply_immediately = TF.Nil
            , _availability_zones = TF.Nil
            , _backup_retention_period = TF.Nil
            , _cluster_identifier = TF.Nil
            , _cluster_identifier_prefix = TF.Nil
            , _database_name = TF.Nil
            , _db_cluster_parameter_group_name = TF.Nil
            , _db_subnet_group_name = TF.Nil
            , _engine = TF.Nil
            , _engine_version = TF.Nil
            , _final_snapshot_identifier = TF.Nil
            , _iam_database_authentication_enabled = TF.Nil
            , _iam_roles = TF.Nil
            , _kms_key_id = TF.Nil
            , _master_password = TF.Nil
            , _master_username = TF.Nil
            , _port = TF.Nil
            , _preferred_backup_window = TF.Nil
            , _preferred_maintenance_window = TF.Nil
            , _skip_final_snapshot = TF.Nil
            , _snapshot_identifier = TF.Nil
            , _storage_encrypted = TF.Nil
            , _vpc_security_group_ids = TF.Nil
            , _computed_allocated_storage = TF.Compute "allocated_storage"
            , _computed_availability_zones = TF.Compute "availability_zones"
            , _computed_backup_retention_period = TF.Compute "backup_retention_period"
            , _computed_cluster_identifier = TF.Compute "cluster_identifier"
            , _computed_cluster_members = TF.Compute "cluster_members"
            , _computed_cluster_resource_id = TF.Compute "cluster_resource_id"
            , _computed_database_name = TF.Compute "database_name"
            , _computed_endpoint = TF.Compute "endpoint"
            , _computed_engine = TF.Compute "engine"
            , _computed_engine_version = TF.Compute "engine_version"
            , _computed_id = TF.Compute "id"
            , _computed_maintenance_window = TF.Compute "maintenance_window"
            , _computed_master_username = TF.Compute "master_username"
            , _computed_port = TF.Compute "port"
            , _computed_preferred_backup_window = TF.Compute "preferred_backup_window"
            , _computed_preferred_maintenance_window = TF.Compute "preferred_maintenance_window"
            , _computed_reader_endpoint = TF.Compute "reader_endpoint"
            , _computed_replication_source_identifier = TF.Compute "replication_source_identifier"
            , _computed_status = TF.Compute "status"
            , _computed_storage_encrypted = TF.Compute "storage_encrypted"
            }

{- | The @aws_redshift_cluster@ AWS resource.

Provides a Redshift Cluster Resource. ~> Note: All arguments including the
username and password will be stored in the raw state as plain-text.
</docs/state/sensitive-data.html> .
-}
data RedshiftClusterResource = RedshiftClusterResource {
      _allow_version_upgrade               :: !(TF.Argument Text)
    {- ^ (Optional) If true , major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster. Default is true -}
    , _automated_snapshot_retention_period :: !(TF.Argument Text)
    {- ^ (Optional) The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with create-cluster-snapshot. Default is 1. -}
    , _availability_zone                   :: !(TF.Argument Text)
    {- ^ (Optional) The EC2 Availability Zone (AZ) in which you want Amazon Redshift to provision the cluster. For example, if you have several EC2 instances running in a specific Availability Zone, then you might want the cluster to be provisioned in the same zone in order to decrease network latency. -}
    , _cluster_identifier                  :: !(TF.Argument Text)
    {- ^ (Required) The Cluster Identifier. Must be a lower case string. -}
    , _cluster_parameter_group_name        :: !(TF.Argument Text)
    {- ^ (Optional) The name of the parameter group to be associated with this cluster. -}
    , _cluster_security_groups             :: !(TF.Argument Text)
    {- ^ (Optional) A list of security groups to be associated with this cluster. -}
    , _cluster_subnet_group_name           :: !(TF.Argument Text)
    {- ^ (Optional) The name of a cluster subnet group to be associated with this cluster. If this parameter is not provided the resulting cluster will be deployed outside virtual private cloud (VPC). -}
    , _cluster_type                        :: !(TF.Argument Text)
    {- ^ (Optional) The cluster type to use. Either @single-node@ or @multi-node@ . -}
    , _cluster_version                     :: !(TF.Argument Text)
    {- ^ (Optional) The version of the Amazon Redshift engine software that you want to deploy on the cluster. The version selected runs on all the nodes in the cluster. -}
    , _database_name                       :: !(TF.Argument Text)
    {- ^ (Optional) The name of the first database to be created when the cluster is created. If you do not provide a name, Amazon Redshift will create a default database called @dev@ . -}
    , _elastic_ip                          :: !(TF.Argument Text)
    {- ^ (Optional) The Elastic IP (EIP) address for the cluster. -}
    , _encrypted                           :: !(TF.Argument Text)
    {- ^ (Optional) If true , the data in the cluster is encrypted at rest. -}
    , _enhanced_vpc_routing                :: !(TF.Argument Text)
    {- ^ (Optional) If true , enhanced VPC routing is enabled. -}
    , _final_snapshot_identifier           :: !(TF.Argument Text)
    {- ^ (Optional) The identifier of the final snapshot that is to be created immediately before deleting the cluster. If this parameter is provided, @skip_final_snapshot@ must be false. -}
    , _iam_roles                           :: !(TF.Argument Text)
    {- ^ (Optional) A list of IAM Role ARNs to associate with the cluster. A Maximum of 10 can be associated to the cluster at any time. -}
    , _kms_key_id                          :: !(TF.Argument Text)
    {- ^ (Optional) The ARN for the KMS encryption key. When specifying @kms_key_id@ , @encrypted@ needs to be set to true. -}
    , _logging                             :: !(TF.Argument Text)
    {- ^ (Optional) Logging, documented below. -}
    , _master_password                     :: !(TF.Argument Text)
    {- ^ (Required unless a @snapshot_identifier@ is provided) Password for the master DB user. Note that this may show up in logs, and it will be stored in the state file. Password must contain at least 8 chars and contain at least one uppercase letter, one lowercase letter, and one number. -}
    , _master_username                     :: !(TF.Argument Text)
    {- ^ (Required unless a @snapshot_identifier@ is provided) Username for the master DB user. -}
    , _node_type                           :: !(TF.Argument Text)
    {- ^ (Required) The node type to be provisioned for the cluster. -}
    , _number_of_nodes                     :: !(TF.Argument Text)
    {- ^ (Optional) The number of compute nodes in the cluster. This parameter is required when the ClusterType parameter is specified as multi-node. Default is 1. -}
    , _owner_account                       :: !(TF.Argument Text)
    {- ^ (Optional) The AWS customer account used to create or copy the snapshot. Required if you are restoring a snapshot you do not own, optional if you own the snapshot. -}
    , _port                                :: !(TF.Argument Text)
    {- ^ (Optional) The port number on which the cluster accepts incoming connections. The cluster is accessible only via the JDBC and ODBC connection strings. Part of the connection string requires the port on which the cluster will listen for incoming connections. Default port is 5439. -}
    , _preferred_maintenance_window        :: !(TF.Argument Text)
    {- ^ (Optional) The weekly time range (in UTC) during which automated cluster maintenance can occur. Format: ddd:hh24:mi-ddd:hh24:mi -}
    , _publicly_accessible                 :: !(TF.Argument Text)
    {- ^ (Optional) If true, the cluster can be accessed from a public network. Default is @true@ . -}
    , _skip_final_snapshot                 :: !(TF.Argument Text)
    {- ^ (Optional) Determines whether a final snapshot of the cluster is created before Amazon Redshift deletes the cluster. If true , a final cluster snapshot is not created. If false , a final cluster snapshot is created before the cluster is deleted. Default is false. -}
    , _snapshot_cluster_identifier         :: !(TF.Argument Text)
    {- ^ (Optional) The name of the cluster the source snapshot was created from. -}
    , _snapshot_copy                       :: !(TF.Argument Text)
    {- ^ (Optional) Configuration of automatic copy of snapshots from one region to another. Documented below. -}
    , _snapshot_identifier                 :: !(TF.Argument Text)
    {- ^ (Optional) The name of the snapshot from which to create the new cluster. -}
    , _tags                                :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _vpc_security_group_ids              :: !(TF.Argument Text)
    {- ^ (Optional) A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster. -}
    } deriving (Show, Eq)

instance TF.ToHCL RedshiftClusterResource where
    toHCL RedshiftClusterResource{..} = TF.block $ catMaybes
        [ TF.assign "allow_version_upgrade" <$> TF.argument _allow_version_upgrade
        , TF.assign "automated_snapshot_retention_period" <$> TF.argument _automated_snapshot_retention_period
        , TF.assign "availability_zone" <$> TF.argument _availability_zone
        , TF.assign "cluster_identifier" <$> TF.argument _cluster_identifier
        , TF.assign "cluster_parameter_group_name" <$> TF.argument _cluster_parameter_group_name
        , TF.assign "cluster_security_groups" <$> TF.argument _cluster_security_groups
        , TF.assign "cluster_subnet_group_name" <$> TF.argument _cluster_subnet_group_name
        , TF.assign "cluster_type" <$> TF.argument _cluster_type
        , TF.assign "cluster_version" <$> TF.argument _cluster_version
        , TF.assign "database_name" <$> TF.argument _database_name
        , TF.assign "elastic_ip" <$> TF.argument _elastic_ip
        , TF.assign "encrypted" <$> TF.argument _encrypted
        , TF.assign "enhanced_vpc_routing" <$> TF.argument _enhanced_vpc_routing
        , TF.assign "final_snapshot_identifier" <$> TF.argument _final_snapshot_identifier
        , TF.assign "iam_roles" <$> TF.argument _iam_roles
        , TF.assign "kms_key_id" <$> TF.argument _kms_key_id
        , TF.assign "logging" <$> TF.argument _logging
        , TF.assign "master_password" <$> TF.argument _master_password
        , TF.assign "master_username" <$> TF.argument _master_username
        , TF.assign "node_type" <$> TF.argument _node_type
        , TF.assign "number_of_nodes" <$> TF.argument _number_of_nodes
        , TF.assign "owner_account" <$> TF.argument _owner_account
        , TF.assign "port" <$> TF.argument _port
        , TF.assign "preferred_maintenance_window" <$> TF.argument _preferred_maintenance_window
        , TF.assign "publicly_accessible" <$> TF.argument _publicly_accessible
        , TF.assign "skip_final_snapshot" <$> TF.argument _skip_final_snapshot
        , TF.assign "snapshot_cluster_identifier" <$> TF.argument _snapshot_cluster_identifier
        , TF.assign "snapshot_copy" <$> TF.argument _snapshot_copy
        , TF.assign "snapshot_identifier" <$> TF.argument _snapshot_identifier
        , TF.assign "tags" <$> TF.argument _tags
        , TF.assign "vpc_security_group_ids" <$> TF.argument _vpc_security_group_ids
        ]

instance HasAllowVersionUpgrade RedshiftClusterResource (TF.Argument Text) where
    allowVersionUpgrade f s@RedshiftClusterResource{..} =
        (\a -> s { _allow_version_upgrade = a } :: RedshiftClusterResource)
             <$> f _allow_version_upgrade

instance HasAutomatedSnapshotRetentionPeriod RedshiftClusterResource (TF.Argument Text) where
    automatedSnapshotRetentionPeriod f s@RedshiftClusterResource{..} =
        (\a -> s { _automated_snapshot_retention_period = a } :: RedshiftClusterResource)
             <$> f _automated_snapshot_retention_period

instance HasAvailabilityZone RedshiftClusterResource (TF.Argument Text) where
    availabilityZone f s@RedshiftClusterResource{..} =
        (\a -> s { _availability_zone = a } :: RedshiftClusterResource)
             <$> f _availability_zone

instance HasClusterIdentifier RedshiftClusterResource (TF.Argument Text) where
    clusterIdentifier f s@RedshiftClusterResource{..} =
        (\a -> s { _cluster_identifier = a } :: RedshiftClusterResource)
             <$> f _cluster_identifier

instance HasClusterParameterGroupName RedshiftClusterResource (TF.Argument Text) where
    clusterParameterGroupName f s@RedshiftClusterResource{..} =
        (\a -> s { _cluster_parameter_group_name = a } :: RedshiftClusterResource)
             <$> f _cluster_parameter_group_name

instance HasClusterSecurityGroups RedshiftClusterResource (TF.Argument Text) where
    clusterSecurityGroups f s@RedshiftClusterResource{..} =
        (\a -> s { _cluster_security_groups = a } :: RedshiftClusterResource)
             <$> f _cluster_security_groups

instance HasClusterSubnetGroupName RedshiftClusterResource (TF.Argument Text) where
    clusterSubnetGroupName f s@RedshiftClusterResource{..} =
        (\a -> s { _cluster_subnet_group_name = a } :: RedshiftClusterResource)
             <$> f _cluster_subnet_group_name

instance HasClusterType RedshiftClusterResource (TF.Argument Text) where
    clusterType f s@RedshiftClusterResource{..} =
        (\a -> s { _cluster_type = a } :: RedshiftClusterResource)
             <$> f _cluster_type

instance HasClusterVersion RedshiftClusterResource (TF.Argument Text) where
    clusterVersion f s@RedshiftClusterResource{..} =
        (\a -> s { _cluster_version = a } :: RedshiftClusterResource)
             <$> f _cluster_version

instance HasDatabaseName RedshiftClusterResource (TF.Argument Text) where
    databaseName f s@RedshiftClusterResource{..} =
        (\a -> s { _database_name = a } :: RedshiftClusterResource)
             <$> f _database_name

instance HasElasticIp RedshiftClusterResource (TF.Argument Text) where
    elasticIp f s@RedshiftClusterResource{..} =
        (\a -> s { _elastic_ip = a } :: RedshiftClusterResource)
             <$> f _elastic_ip

instance HasEncrypted RedshiftClusterResource (TF.Argument Text) where
    encrypted f s@RedshiftClusterResource{..} =
        (\a -> s { _encrypted = a } :: RedshiftClusterResource)
             <$> f _encrypted

instance HasEnhancedVpcRouting RedshiftClusterResource (TF.Argument Text) where
    enhancedVpcRouting f s@RedshiftClusterResource{..} =
        (\a -> s { _enhanced_vpc_routing = a } :: RedshiftClusterResource)
             <$> f _enhanced_vpc_routing

instance HasFinalSnapshotIdentifier RedshiftClusterResource (TF.Argument Text) where
    finalSnapshotIdentifier f s@RedshiftClusterResource{..} =
        (\a -> s { _final_snapshot_identifier = a } :: RedshiftClusterResource)
             <$> f _final_snapshot_identifier

instance HasIamRoles RedshiftClusterResource (TF.Argument Text) where
    iamRoles f s@RedshiftClusterResource{..} =
        (\a -> s { _iam_roles = a } :: RedshiftClusterResource)
             <$> f _iam_roles

instance HasKmsKeyId RedshiftClusterResource (TF.Argument Text) where
    kmsKeyId f s@RedshiftClusterResource{..} =
        (\a -> s { _kms_key_id = a } :: RedshiftClusterResource)
             <$> f _kms_key_id

instance HasLogging RedshiftClusterResource (TF.Argument Text) where
    logging f s@RedshiftClusterResource{..} =
        (\a -> s { _logging = a } :: RedshiftClusterResource)
             <$> f _logging

instance HasMasterPassword RedshiftClusterResource (TF.Argument Text) where
    masterPassword f s@RedshiftClusterResource{..} =
        (\a -> s { _master_password = a } :: RedshiftClusterResource)
             <$> f _master_password

instance HasMasterUsername RedshiftClusterResource (TF.Argument Text) where
    masterUsername f s@RedshiftClusterResource{..} =
        (\a -> s { _master_username = a } :: RedshiftClusterResource)
             <$> f _master_username

instance HasNodeType RedshiftClusterResource (TF.Argument Text) where
    nodeType f s@RedshiftClusterResource{..} =
        (\a -> s { _node_type = a } :: RedshiftClusterResource)
             <$> f _node_type

instance HasNumberOfNodes RedshiftClusterResource (TF.Argument Text) where
    numberOfNodes f s@RedshiftClusterResource{..} =
        (\a -> s { _number_of_nodes = a } :: RedshiftClusterResource)
             <$> f _number_of_nodes

instance HasOwnerAccount RedshiftClusterResource (TF.Argument Text) where
    ownerAccount f s@RedshiftClusterResource{..} =
        (\a -> s { _owner_account = a } :: RedshiftClusterResource)
             <$> f _owner_account

instance HasPort RedshiftClusterResource (TF.Argument Text) where
    port f s@RedshiftClusterResource{..} =
        (\a -> s { _port = a } :: RedshiftClusterResource)
             <$> f _port

instance HasPreferredMaintenanceWindow RedshiftClusterResource (TF.Argument Text) where
    preferredMaintenanceWindow f s@RedshiftClusterResource{..} =
        (\a -> s { _preferred_maintenance_window = a } :: RedshiftClusterResource)
             <$> f _preferred_maintenance_window

instance HasPubliclyAccessible RedshiftClusterResource (TF.Argument Text) where
    publiclyAccessible f s@RedshiftClusterResource{..} =
        (\a -> s { _publicly_accessible = a } :: RedshiftClusterResource)
             <$> f _publicly_accessible

instance HasSkipFinalSnapshot RedshiftClusterResource (TF.Argument Text) where
    skipFinalSnapshot f s@RedshiftClusterResource{..} =
        (\a -> s { _skip_final_snapshot = a } :: RedshiftClusterResource)
             <$> f _skip_final_snapshot

instance HasSnapshotClusterIdentifier RedshiftClusterResource (TF.Argument Text) where
    snapshotClusterIdentifier f s@RedshiftClusterResource{..} =
        (\a -> s { _snapshot_cluster_identifier = a } :: RedshiftClusterResource)
             <$> f _snapshot_cluster_identifier

instance HasSnapshotCopy RedshiftClusterResource (TF.Argument Text) where
    snapshotCopy f s@RedshiftClusterResource{..} =
        (\a -> s { _snapshot_copy = a } :: RedshiftClusterResource)
             <$> f _snapshot_copy

instance HasSnapshotIdentifier RedshiftClusterResource (TF.Argument Text) where
    snapshotIdentifier f s@RedshiftClusterResource{..} =
        (\a -> s { _snapshot_identifier = a } :: RedshiftClusterResource)
             <$> f _snapshot_identifier

instance HasTags RedshiftClusterResource (TF.Argument TF.Tags) where
    tags f s@RedshiftClusterResource{..} =
        (\a -> s { _tags = a } :: RedshiftClusterResource)
             <$> f _tags

instance HasVpcSecurityGroupIds RedshiftClusterResource (TF.Argument Text) where
    vpcSecurityGroupIds f s@RedshiftClusterResource{..} =
        (\a -> s { _vpc_security_group_ids = a } :: RedshiftClusterResource)
             <$> f _vpc_security_group_ids

redshiftClusterResource :: TF.Resource TF.AWS RedshiftClusterResource
redshiftClusterResource =
    TF.newResource "aws_redshift_cluster" $
        RedshiftClusterResource {
            _allow_version_upgrade = TF.Nil
            , _automated_snapshot_retention_period = TF.Nil
            , _availability_zone = TF.Nil
            , _cluster_identifier = TF.Nil
            , _cluster_parameter_group_name = TF.Nil
            , _cluster_security_groups = TF.Nil
            , _cluster_subnet_group_name = TF.Nil
            , _cluster_type = TF.Nil
            , _cluster_version = TF.Nil
            , _database_name = TF.Nil
            , _elastic_ip = TF.Nil
            , _encrypted = TF.Nil
            , _enhanced_vpc_routing = TF.Nil
            , _final_snapshot_identifier = TF.Nil
            , _iam_roles = TF.Nil
            , _kms_key_id = TF.Nil
            , _logging = TF.Nil
            , _master_password = TF.Nil
            , _master_username = TF.Nil
            , _node_type = TF.Nil
            , _number_of_nodes = TF.Nil
            , _owner_account = TF.Nil
            , _port = TF.Nil
            , _preferred_maintenance_window = TF.Nil
            , _publicly_accessible = TF.Nil
            , _skip_final_snapshot = TF.Nil
            , _snapshot_cluster_identifier = TF.Nil
            , _snapshot_copy = TF.Nil
            , _snapshot_identifier = TF.Nil
            , _tags = TF.Nil
            , _vpc_security_group_ids = TF.Nil
            }

{- | The @aws_redshift_parameter_group@ AWS resource.

Provides a Redshift Cluster parameter group resource.
-}
data RedshiftParameterGroupResource = RedshiftParameterGroupResource {
      _description :: !(TF.Argument Text)
    {- ^ (Optional) The description of the Redshift parameter group. Defaults to "Managed by Terraform". -}
    , _family'     :: !(TF.Argument Text)
    {- ^ (Required) The family of the Redshift parameter group. -}
    , _name        :: !(TF.Argument Text)
    {- ^ (Required) The name of the Redshift parameter group. -}
    , _parameter   :: !(TF.Argument Text)
    {- ^ (Optional) A list of Redshift parameters to apply. -}
    , _computed_id :: !(TF.Attribute Text)
    {- ^ - The Redshift parameter group name. -}
    } deriving (Show, Eq)

instance TF.ToHCL RedshiftParameterGroupResource where
    toHCL RedshiftParameterGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.argument _description
        , TF.assign "family" <$> TF.argument _family'
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "parameter" <$> TF.argument _parameter
        ]

instance HasDescription RedshiftParameterGroupResource (TF.Argument Text) where
    description f s@RedshiftParameterGroupResource{..} =
        (\a -> s { _description = a } :: RedshiftParameterGroupResource)
             <$> f _description

instance HasFamily' RedshiftParameterGroupResource (TF.Argument Text) where
    family' f s@RedshiftParameterGroupResource{..} =
        (\a -> s { _family' = a } :: RedshiftParameterGroupResource)
             <$> f _family'

instance HasName RedshiftParameterGroupResource (TF.Argument Text) where
    name f s@RedshiftParameterGroupResource{..} =
        (\a -> s { _name = a } :: RedshiftParameterGroupResource)
             <$> f _name

instance HasParameter RedshiftParameterGroupResource (TF.Argument Text) where
    parameter f s@RedshiftParameterGroupResource{..} =
        (\a -> s { _parameter = a } :: RedshiftParameterGroupResource)
             <$> f _parameter

instance HasComputedId RedshiftParameterGroupResource (TF.Attribute Text) where
    computedId f s@RedshiftParameterGroupResource{..} =
        (\a -> s { _computed_id = a } :: RedshiftParameterGroupResource)
             <$> f _computed_id

redshiftParameterGroupResource :: TF.Resource TF.AWS RedshiftParameterGroupResource
redshiftParameterGroupResource =
    TF.newResource "aws_redshift_parameter_group" $
        RedshiftParameterGroupResource {
            _description = TF.Nil
            , _family' = TF.Nil
            , _name = TF.Nil
            , _parameter = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_redshift_security_group@ AWS resource.

Creates a new Amazon Redshift security group. You use security groups to
control access to non-VPC clusters
-}
data RedshiftSecurityGroupResource = RedshiftSecurityGroupResource {
      _description :: !(TF.Argument Text)
    {- ^ (Optional) The description of the Redshift security group. Defaults to "Managed by Terraform". -}
    , _ingress     :: !(TF.Argument Text)
    {- ^ (Optional) A list of ingress rules. -}
    , _name        :: !(TF.Argument Text)
    {- ^ (Required) The name of the Redshift security group. -}
    , _computed_id :: !(TF.Attribute Text)
    {- ^ - The Redshift security group ID. -}
    } deriving (Show, Eq)

instance TF.ToHCL RedshiftSecurityGroupResource where
    toHCL RedshiftSecurityGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.argument _description
        , TF.assign "ingress" <$> TF.argument _ingress
        , TF.assign "name" <$> TF.argument _name
        ]

instance HasDescription RedshiftSecurityGroupResource (TF.Argument Text) where
    description f s@RedshiftSecurityGroupResource{..} =
        (\a -> s { _description = a } :: RedshiftSecurityGroupResource)
             <$> f _description

instance HasIngress RedshiftSecurityGroupResource (TF.Argument Text) where
    ingress f s@RedshiftSecurityGroupResource{..} =
        (\a -> s { _ingress = a } :: RedshiftSecurityGroupResource)
             <$> f _ingress

instance HasName RedshiftSecurityGroupResource (TF.Argument Text) where
    name f s@RedshiftSecurityGroupResource{..} =
        (\a -> s { _name = a } :: RedshiftSecurityGroupResource)
             <$> f _name

instance HasComputedId RedshiftSecurityGroupResource (TF.Attribute Text) where
    computedId f s@RedshiftSecurityGroupResource{..} =
        (\a -> s { _computed_id = a } :: RedshiftSecurityGroupResource)
             <$> f _computed_id

redshiftSecurityGroupResource :: TF.Resource TF.AWS RedshiftSecurityGroupResource
redshiftSecurityGroupResource =
    TF.newResource "aws_redshift_security_group" $
        RedshiftSecurityGroupResource {
            _description = TF.Nil
            , _ingress = TF.Nil
            , _name = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_redshift_subnet_group@ AWS resource.

Creates a new Amazon Redshift subnet group. You must provide a list of one
or more subnets in your existing Amazon Virtual Private Cloud (Amazon VPC)
when creating Amazon Redshift subnet group.
-}
data RedshiftSubnetGroupResource = RedshiftSubnetGroupResource {
      _description :: !(TF.Argument Text)
    {- ^ (Optional) The description of the Redshift Subnet group. Defaults to "Managed by Terraform". -}
    , _name        :: !(TF.Argument Text)
    {- ^ (Required) The name of the Redshift Subnet group. -}
    , _subnet_ids  :: !(TF.Argument Text)
    {- ^ (Required) An array of VPC subnet IDs. -}
    , _tags        :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _computed_id :: !(TF.Attribute Text)
    {- ^ - The Redshift Subnet group ID. -}
    } deriving (Show, Eq)

instance TF.ToHCL RedshiftSubnetGroupResource where
    toHCL RedshiftSubnetGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.argument _description
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "subnet_ids" <$> TF.argument _subnet_ids
        , TF.assign "tags" <$> TF.argument _tags
        ]

instance HasDescription RedshiftSubnetGroupResource (TF.Argument Text) where
    description f s@RedshiftSubnetGroupResource{..} =
        (\a -> s { _description = a } :: RedshiftSubnetGroupResource)
             <$> f _description

instance HasName RedshiftSubnetGroupResource (TF.Argument Text) where
    name f s@RedshiftSubnetGroupResource{..} =
        (\a -> s { _name = a } :: RedshiftSubnetGroupResource)
             <$> f _name

instance HasSubnetIds RedshiftSubnetGroupResource (TF.Argument Text) where
    subnetIds f s@RedshiftSubnetGroupResource{..} =
        (\a -> s { _subnet_ids = a } :: RedshiftSubnetGroupResource)
             <$> f _subnet_ids

instance HasTags RedshiftSubnetGroupResource (TF.Argument TF.Tags) where
    tags f s@RedshiftSubnetGroupResource{..} =
        (\a -> s { _tags = a } :: RedshiftSubnetGroupResource)
             <$> f _tags

instance HasComputedId RedshiftSubnetGroupResource (TF.Attribute Text) where
    computedId f s@RedshiftSubnetGroupResource{..} =
        (\a -> s { _computed_id = a } :: RedshiftSubnetGroupResource)
             <$> f _computed_id

redshiftSubnetGroupResource :: TF.Resource TF.AWS RedshiftSubnetGroupResource
redshiftSubnetGroupResource =
    TF.newResource "aws_redshift_subnet_group" $
        RedshiftSubnetGroupResource {
            _description = TF.Nil
            , _name = TF.Nil
            , _subnet_ids = TF.Nil
            , _tags = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_route53_delegation_set@ AWS resource.

Provides a
<https://docs.aws.amazon.com/Route53/latest/APIReference/actions-on-reusable-delegation-sets.html>
resource.
-}
data Route53DelegationSetResource = Route53DelegationSetResource {
      _reference_name        :: !(TF.Argument Text)
    {- ^ (Optional) This is a reference name used in Caller Reference (helpful for identifying single delegation set amongst others) -}
    , _computed_id           :: !(TF.Attribute Text)
    {- ^ - The delegation set ID -}
    , _computed_name_servers :: !(TF.Attribute Text)
    {- ^ - A list of authoritative name servers for the hosted zone (effectively a list of NS records). -}
    } deriving (Show, Eq)

instance TF.ToHCL Route53DelegationSetResource where
    toHCL Route53DelegationSetResource{..} = TF.block $ catMaybes
        [ TF.assign "reference_name" <$> TF.argument _reference_name
        ]

instance HasReferenceName Route53DelegationSetResource (TF.Argument Text) where
    referenceName f s@Route53DelegationSetResource{..} =
        (\a -> s { _reference_name = a } :: Route53DelegationSetResource)
             <$> f _reference_name

instance HasComputedId Route53DelegationSetResource (TF.Attribute Text) where
    computedId f s@Route53DelegationSetResource{..} =
        (\a -> s { _computed_id = a } :: Route53DelegationSetResource)
             <$> f _computed_id

instance HasComputedNameServers Route53DelegationSetResource (TF.Attribute Text) where
    computedNameServers f s@Route53DelegationSetResource{..} =
        (\a -> s { _computed_name_servers = a } :: Route53DelegationSetResource)
             <$> f _computed_name_servers

route53DelegationSetResource :: TF.Resource TF.AWS Route53DelegationSetResource
route53DelegationSetResource =
    TF.newResource "aws_route53_delegation_set" $
        Route53DelegationSetResource {
            _reference_name = TF.Nil
            , _computed_id = TF.Compute "id"
            , _computed_name_servers = TF.Compute "name_servers"
            }

{- | The @aws_route53_health_check@ AWS resource.

Provides a Route53 health check.
-}
data Route53HealthCheckResource = Route53HealthCheckResource {
      _child_health_threshold          :: !(TF.Argument Text)
    {- ^ (Optional) The minimum number of child health checks that must be healthy for Route 53 to consider the parent health check to be healthy. Valid values are integers between 0 and 256, inclusive -}
    , _child_healthchecks              :: !(TF.Argument Text)
    {- ^ (Optional) For a specified parent health check, a list of HealthCheckId values for the associated child health checks. -}
    , _cloudwatch_alarm_name           :: !(TF.Argument Text)
    {- ^ (Optional) The name of the CloudWatch alarm. -}
    , _cloudwatch_alarm_region         :: !(TF.Argument Text)
    {- ^ (Optional) The CloudWatchRegion that the CloudWatch alarm was created in. -}
    , _enable_sni                      :: !(TF.Argument TF.Bool)
    {- ^ (Optional) A boolean value that indicates whether Route53 should send the @fqdn@ to the endpoint when performing the health check. This defaults to AWS' defaults: when the @type@ is "HTTPS" @enable_sni@ defaults to @true@ , when @type@ is anything else @enable_sni@ defaults to @false@ . -}
    , _failure_threshold               :: !(TF.Argument Text)
    {- ^ (Required) The number of consecutive health checks that an endpoint must pass or fail. -}
    , _fqdn                            :: !(TF.Argument Text)
    {- ^ (Optional) The fully qualified domain name of the endpoint to be checked. -}
    , _insufficient_data_health_status :: !(TF.Argument Text)
    {- ^ (Optional) The status of the health check when CloudWatch has insufficient data about the state of associated alarm. Valid values are @Healthy@ , @Unhealthy@ and @LastKnownStatus@ . -}
    , _invert_healthcheck              :: !(TF.Argument Text)
    {- ^ (Optional) A boolean value that indicates whether the status of health check should be inverted. For example, if a health check is healthy but Inverted is True , then Route 53 considers the health check to be unhealthy. -}
    , _ip_address                      :: !(TF.Argument Text)
    {- ^ (Optional) The IP address of the endpoint to be checked. -}
    , _measure_latency                 :: !(TF.Argument Text)
    {- ^ (Optional) A Boolean value that indicates whether you want Route 53 to measure the latency between health checkers in multiple AWS regions and your endpoint and to display CloudWatch latency graphs in the Route 53 console. -}
    , _port                            :: !(TF.Argument Text)
    {- ^ (Optional) The port of the endpoint to be checked. -}
    , _reference_name                  :: !(TF.Argument Text)
    {- ^ (Optional) This is a reference name used in Caller Reference (helpful for identifying single health_check set amongst others) -}
    , _regions                         :: !(TF.Argument Text)
    {- ^ (Optional) A list of AWS regions that you want Amazon Route 53 health checkers to check the specified endpoint from. -}
    , _request_interval                :: !(TF.Argument Text)
    {- ^ (Required) The number of seconds between the time that Amazon Route 53 gets a response from your endpoint and the time that it sends the next health-check request. -}
    , _resource_path                   :: !(TF.Argument Text)
    {- ^ (Optional) The path that you want Amazon Route 53 to request when performing health checks. -}
    , _search_string                   :: !(TF.Argument Text)
    {- ^ (Optional) String searched in the first 5120 bytes of the response body for check to be considered healthy. -}
    , _tags                            :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the health check. -}
    , _type'                           :: !(TF.Argument Text)
    {- ^ (Required) The protocol to use when performing health checks. Valid values are @HTTP@ , @HTTPS@ , @HTTP_STR_MATCH@ , @HTTPS_STR_MATCH@ , @TCP@ , @CALCULATED@ and @CLOUDWATCH_METRIC@ . -}
    } deriving (Show, Eq)

instance TF.ToHCL Route53HealthCheckResource where
    toHCL Route53HealthCheckResource{..} = TF.block $ catMaybes
        [ TF.assign "child_health_threshold" <$> TF.argument _child_health_threshold
        , TF.assign "child_healthchecks" <$> TF.argument _child_healthchecks
        , TF.assign "cloudwatch_alarm_name" <$> TF.argument _cloudwatch_alarm_name
        , TF.assign "cloudwatch_alarm_region" <$> TF.argument _cloudwatch_alarm_region
        , TF.assign "enable_sni" <$> TF.argument _enable_sni
        , TF.assign "failure_threshold" <$> TF.argument _failure_threshold
        , TF.assign "fqdn" <$> TF.argument _fqdn
        , TF.assign "insufficient_data_health_status" <$> TF.argument _insufficient_data_health_status
        , TF.assign "invert_healthcheck" <$> TF.argument _invert_healthcheck
        , TF.assign "ip_address" <$> TF.argument _ip_address
        , TF.assign "measure_latency" <$> TF.argument _measure_latency
        , TF.assign "port" <$> TF.argument _port
        , TF.assign "reference_name" <$> TF.argument _reference_name
        , TF.assign "regions" <$> TF.argument _regions
        , TF.assign "request_interval" <$> TF.argument _request_interval
        , TF.assign "resource_path" <$> TF.argument _resource_path
        , TF.assign "search_string" <$> TF.argument _search_string
        , TF.assign "tags" <$> TF.argument _tags
        , TF.assign "type" <$> TF.argument _type'
        ]

instance HasChildHealthThreshold Route53HealthCheckResource (TF.Argument Text) where
    childHealthThreshold f s@Route53HealthCheckResource{..} =
        (\a -> s { _child_health_threshold = a } :: Route53HealthCheckResource)
             <$> f _child_health_threshold

instance HasChildHealthchecks Route53HealthCheckResource (TF.Argument Text) where
    childHealthchecks f s@Route53HealthCheckResource{..} =
        (\a -> s { _child_healthchecks = a } :: Route53HealthCheckResource)
             <$> f _child_healthchecks

instance HasCloudwatchAlarmName Route53HealthCheckResource (TF.Argument Text) where
    cloudwatchAlarmName f s@Route53HealthCheckResource{..} =
        (\a -> s { _cloudwatch_alarm_name = a } :: Route53HealthCheckResource)
             <$> f _cloudwatch_alarm_name

instance HasCloudwatchAlarmRegion Route53HealthCheckResource (TF.Argument Text) where
    cloudwatchAlarmRegion f s@Route53HealthCheckResource{..} =
        (\a -> s { _cloudwatch_alarm_region = a } :: Route53HealthCheckResource)
             <$> f _cloudwatch_alarm_region

instance HasEnableSni Route53HealthCheckResource (TF.Argument TF.Bool) where
    enableSni f s@Route53HealthCheckResource{..} =
        (\a -> s { _enable_sni = a } :: Route53HealthCheckResource)
             <$> f _enable_sni

instance HasFailureThreshold Route53HealthCheckResource (TF.Argument Text) where
    failureThreshold f s@Route53HealthCheckResource{..} =
        (\a -> s { _failure_threshold = a } :: Route53HealthCheckResource)
             <$> f _failure_threshold

instance HasFqdn Route53HealthCheckResource (TF.Argument Text) where
    fqdn f s@Route53HealthCheckResource{..} =
        (\a -> s { _fqdn = a } :: Route53HealthCheckResource)
             <$> f _fqdn

instance HasInsufficientDataHealthStatus Route53HealthCheckResource (TF.Argument Text) where
    insufficientDataHealthStatus f s@Route53HealthCheckResource{..} =
        (\a -> s { _insufficient_data_health_status = a } :: Route53HealthCheckResource)
             <$> f _insufficient_data_health_status

instance HasInvertHealthcheck Route53HealthCheckResource (TF.Argument Text) where
    invertHealthcheck f s@Route53HealthCheckResource{..} =
        (\a -> s { _invert_healthcheck = a } :: Route53HealthCheckResource)
             <$> f _invert_healthcheck

instance HasIpAddress Route53HealthCheckResource (TF.Argument Text) where
    ipAddress f s@Route53HealthCheckResource{..} =
        (\a -> s { _ip_address = a } :: Route53HealthCheckResource)
             <$> f _ip_address

instance HasMeasureLatency Route53HealthCheckResource (TF.Argument Text) where
    measureLatency f s@Route53HealthCheckResource{..} =
        (\a -> s { _measure_latency = a } :: Route53HealthCheckResource)
             <$> f _measure_latency

instance HasPort Route53HealthCheckResource (TF.Argument Text) where
    port f s@Route53HealthCheckResource{..} =
        (\a -> s { _port = a } :: Route53HealthCheckResource)
             <$> f _port

instance HasReferenceName Route53HealthCheckResource (TF.Argument Text) where
    referenceName f s@Route53HealthCheckResource{..} =
        (\a -> s { _reference_name = a } :: Route53HealthCheckResource)
             <$> f _reference_name

instance HasRegions Route53HealthCheckResource (TF.Argument Text) where
    regions f s@Route53HealthCheckResource{..} =
        (\a -> s { _regions = a } :: Route53HealthCheckResource)
             <$> f _regions

instance HasRequestInterval Route53HealthCheckResource (TF.Argument Text) where
    requestInterval f s@Route53HealthCheckResource{..} =
        (\a -> s { _request_interval = a } :: Route53HealthCheckResource)
             <$> f _request_interval

instance HasResourcePath Route53HealthCheckResource (TF.Argument Text) where
    resourcePath f s@Route53HealthCheckResource{..} =
        (\a -> s { _resource_path = a } :: Route53HealthCheckResource)
             <$> f _resource_path

instance HasSearchString Route53HealthCheckResource (TF.Argument Text) where
    searchString f s@Route53HealthCheckResource{..} =
        (\a -> s { _search_string = a } :: Route53HealthCheckResource)
             <$> f _search_string

instance HasTags Route53HealthCheckResource (TF.Argument TF.Tags) where
    tags f s@Route53HealthCheckResource{..} =
        (\a -> s { _tags = a } :: Route53HealthCheckResource)
             <$> f _tags

instance HasType' Route53HealthCheckResource (TF.Argument Text) where
    type' f s@Route53HealthCheckResource{..} =
        (\a -> s { _type' = a } :: Route53HealthCheckResource)
             <$> f _type'

route53HealthCheckResource :: TF.Resource TF.AWS Route53HealthCheckResource
route53HealthCheckResource =
    TF.newResource "aws_route53_health_check" $
        Route53HealthCheckResource {
            _child_health_threshold = TF.Nil
            , _child_healthchecks = TF.Nil
            , _cloudwatch_alarm_name = TF.Nil
            , _cloudwatch_alarm_region = TF.Nil
            , _enable_sni = TF.Nil
            , _failure_threshold = TF.Nil
            , _fqdn = TF.Nil
            , _insufficient_data_health_status = TF.Nil
            , _invert_healthcheck = TF.Nil
            , _ip_address = TF.Nil
            , _measure_latency = TF.Nil
            , _port = TF.Nil
            , _reference_name = TF.Nil
            , _regions = TF.Nil
            , _request_interval = TF.Nil
            , _resource_path = TF.Nil
            , _search_string = TF.Nil
            , _tags = TF.Nil
            , _type' = TF.Nil
            }

{- | The @aws_route53_query_log@ AWS resource.

Provides a Route53 query logging configuration resource. ~> NOTE: There are
restrictions on the configuration of query logging. Notably, the CloudWatch
log group must be in the @us-east-1@ region, a permissive CloudWatch log
resource policy must be in place, and the Route53 hosted zone must be
public. See
<https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/query-logs.html?console_help=true#query-logs-configuring>
for additional details.
-}
data Route53QueryLogResource = Route53QueryLogResource {
      _cloudwatch_log_group_arn :: !(TF.Argument Text)
    {- ^ (Required) CloudWatch log group ARN to send query logs. -}
    , _zone_id                  :: !(TF.Argument Text)
    {- ^ (Required) Route53 hosted zone ID to enable query logs. -}
    , _computed_id              :: !(TF.Attribute Text)
    {- ^ - The query logging configuration ID -}
    } deriving (Show, Eq)

instance TF.ToHCL Route53QueryLogResource where
    toHCL Route53QueryLogResource{..} = TF.block $ catMaybes
        [ TF.assign "cloudwatch_log_group_arn" <$> TF.argument _cloudwatch_log_group_arn
        , TF.assign "zone_id" <$> TF.argument _zone_id
        ]

instance HasCloudwatchLogGroupArn Route53QueryLogResource (TF.Argument Text) where
    cloudwatchLogGroupArn f s@Route53QueryLogResource{..} =
        (\a -> s { _cloudwatch_log_group_arn = a } :: Route53QueryLogResource)
             <$> f _cloudwatch_log_group_arn

instance HasZoneId Route53QueryLogResource (TF.Argument Text) where
    zoneId f s@Route53QueryLogResource{..} =
        (\a -> s { _zone_id = a } :: Route53QueryLogResource)
             <$> f _zone_id

instance HasComputedId Route53QueryLogResource (TF.Attribute Text) where
    computedId f s@Route53QueryLogResource{..} =
        (\a -> s { _computed_id = a } :: Route53QueryLogResource)
             <$> f _computed_id

route53QueryLogResource :: TF.Resource TF.AWS Route53QueryLogResource
route53QueryLogResource =
    TF.newResource "aws_route53_query_log" $
        Route53QueryLogResource {
            _cloudwatch_log_group_arn = TF.Nil
            , _zone_id = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_route53_record@ AWS resource.

Provides a Route53 record resource.
-}
data Route53RecordResource = Route53RecordResource {
      _alias                            :: !(TF.Argument Text)
    {- ^ (Optional) An alias block. Conflicts with @ttl@ & @records@ . Alias record documented below. -}
    , _failover_routing_policy          :: !(TF.Argument Text)
    {- ^ (Optional) A block indicating the routing behavior when associated health check fails. Conflicts with any other routing policy. Documented below. -}
    , _geolocation_routing_policy       :: !(TF.Argument Text)
    {- ^ (Optional) A block indicating a routing policy based on the geolocation of the requestor. Conflicts with any other routing policy. Documented below. -}
    , _health_check_id                  :: !(TF.Argument Text)
    {- ^ (Optional) The health check the record should be associated with. -}
    , _latency_routing_policy           :: !(TF.Argument Text)
    {- ^ (Optional) A block indicating a routing policy based on the latency between the requestor and an AWS region. Conflicts with any other routing policy. Documented below. -}
    , _multivalue_answer_routing_policy :: !(TF.Argument Text)
    {- ^ (Optional) A block indicating a multivalue answer routing policy. Conflicts with any other routing policy. -}
    , _name                             :: !(TF.Argument Text)
    {- ^ (Required) The name of the record. -}
    , _records                          :: !(TF.Argument Text)
    {- ^ (Required for non-alias records) A string list of records. To specify a single record value longer than 255 characters such as a TXT record for DKIM, add @\"\"@ inside the Terraform configuration string (e.g. @"first255characters\"\"morecharacters"@ ). -}
    , _set_identifier                   :: !(TF.Argument Text)
    {- ^ (Optional) Unique identifier to differentiate records with routing policies from one another. Required if using @failover@ , @geolocation@ , @latency@ , or @weighted@ routing policies documented below. -}
    , _ttl                              :: !(TF.Argument Text)
    {- ^ (Required for non-alias records) The TTL of the record. -}
    , _type'                            :: !(TF.Argument Text)
    {- ^ (Required) The record type. Valid values are @A@ , @AAAA@ , @CAA@ , @CNAME@ , @MX@ , @NAPTR@ , @NS@ , @PTR@ , @SOA@ , @SPF@ , @SRV@ and @TXT@ . -}
    , _weighted_routing_policy          :: !(TF.Argument Text)
    {- ^ (Optional) A block indicating a weighted routing policy. Conflicts with any other routing policy. Documented below. -}
    , _zone_id                          :: !(TF.Argument Text)
    {- ^ (Required) The ID of the hosted zone to contain this record. -}
    , _computed_fqdn                    :: !(TF.Attribute Text)
    {- ^ - <https://en.wikipedia.org/wiki/Fully_qualified_domain_name> built using the zone domain and @name@ -}
    } deriving (Show, Eq)

instance TF.ToHCL Route53RecordResource where
    toHCL Route53RecordResource{..} = TF.block $ catMaybes
        [ TF.assign "alias" <$> TF.argument _alias
        , TF.assign "failover_routing_policy" <$> TF.argument _failover_routing_policy
        , TF.assign "geolocation_routing_policy" <$> TF.argument _geolocation_routing_policy
        , TF.assign "health_check_id" <$> TF.argument _health_check_id
        , TF.assign "latency_routing_policy" <$> TF.argument _latency_routing_policy
        , TF.assign "multivalue_answer_routing_policy" <$> TF.argument _multivalue_answer_routing_policy
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "records" <$> TF.argument _records
        , TF.assign "set_identifier" <$> TF.argument _set_identifier
        , TF.assign "ttl" <$> TF.argument _ttl
        , TF.assign "type" <$> TF.argument _type'
        , TF.assign "weighted_routing_policy" <$> TF.argument _weighted_routing_policy
        , TF.assign "zone_id" <$> TF.argument _zone_id
        ]

instance HasAlias Route53RecordResource (TF.Argument Text) where
    alias f s@Route53RecordResource{..} =
        (\a -> s { _alias = a } :: Route53RecordResource)
             <$> f _alias

instance HasFailoverRoutingPolicy Route53RecordResource (TF.Argument Text) where
    failoverRoutingPolicy f s@Route53RecordResource{..} =
        (\a -> s { _failover_routing_policy = a } :: Route53RecordResource)
             <$> f _failover_routing_policy

instance HasGeolocationRoutingPolicy Route53RecordResource (TF.Argument Text) where
    geolocationRoutingPolicy f s@Route53RecordResource{..} =
        (\a -> s { _geolocation_routing_policy = a } :: Route53RecordResource)
             <$> f _geolocation_routing_policy

instance HasHealthCheckId Route53RecordResource (TF.Argument Text) where
    healthCheckId f s@Route53RecordResource{..} =
        (\a -> s { _health_check_id = a } :: Route53RecordResource)
             <$> f _health_check_id

instance HasLatencyRoutingPolicy Route53RecordResource (TF.Argument Text) where
    latencyRoutingPolicy f s@Route53RecordResource{..} =
        (\a -> s { _latency_routing_policy = a } :: Route53RecordResource)
             <$> f _latency_routing_policy

instance HasMultivalueAnswerRoutingPolicy Route53RecordResource (TF.Argument Text) where
    multivalueAnswerRoutingPolicy f s@Route53RecordResource{..} =
        (\a -> s { _multivalue_answer_routing_policy = a } :: Route53RecordResource)
             <$> f _multivalue_answer_routing_policy

instance HasName Route53RecordResource (TF.Argument Text) where
    name f s@Route53RecordResource{..} =
        (\a -> s { _name = a } :: Route53RecordResource)
             <$> f _name

instance HasRecords Route53RecordResource (TF.Argument Text) where
    records f s@Route53RecordResource{..} =
        (\a -> s { _records = a } :: Route53RecordResource)
             <$> f _records

instance HasSetIdentifier Route53RecordResource (TF.Argument Text) where
    setIdentifier f s@Route53RecordResource{..} =
        (\a -> s { _set_identifier = a } :: Route53RecordResource)
             <$> f _set_identifier

instance HasTtl Route53RecordResource (TF.Argument Text) where
    ttl f s@Route53RecordResource{..} =
        (\a -> s { _ttl = a } :: Route53RecordResource)
             <$> f _ttl

instance HasType' Route53RecordResource (TF.Argument Text) where
    type' f s@Route53RecordResource{..} =
        (\a -> s { _type' = a } :: Route53RecordResource)
             <$> f _type'

instance HasWeightedRoutingPolicy Route53RecordResource (TF.Argument Text) where
    weightedRoutingPolicy f s@Route53RecordResource{..} =
        (\a -> s { _weighted_routing_policy = a } :: Route53RecordResource)
             <$> f _weighted_routing_policy

instance HasZoneId Route53RecordResource (TF.Argument Text) where
    zoneId f s@Route53RecordResource{..} =
        (\a -> s { _zone_id = a } :: Route53RecordResource)
             <$> f _zone_id

instance HasComputedFqdn Route53RecordResource (TF.Attribute Text) where
    computedFqdn f s@Route53RecordResource{..} =
        (\a -> s { _computed_fqdn = a } :: Route53RecordResource)
             <$> f _computed_fqdn

route53RecordResource :: TF.Resource TF.AWS Route53RecordResource
route53RecordResource =
    TF.newResource "aws_route53_record" $
        Route53RecordResource {
            _alias = TF.Nil
            , _failover_routing_policy = TF.Nil
            , _geolocation_routing_policy = TF.Nil
            , _health_check_id = TF.Nil
            , _latency_routing_policy = TF.Nil
            , _multivalue_answer_routing_policy = TF.Nil
            , _name = TF.Nil
            , _records = TF.Nil
            , _set_identifier = TF.Nil
            , _ttl = TF.Nil
            , _type' = TF.Nil
            , _weighted_routing_policy = TF.Nil
            , _zone_id = TF.Nil
            , _computed_fqdn = TF.Compute "fqdn"
            }

{- | The @aws_route53_zone_association@ AWS resource.

Provides a Route53 private Hosted Zone to VPC association resource.
-}
data Route53ZoneAssociationResource = Route53ZoneAssociationResource {
      _vpc_id              :: !(TF.Argument Text)
    {- ^ (Required) The VPC to associate with the private hosted zone. -}
    , _vpc_region          :: !(TF.Argument Text)
    {- ^ (Optional) The VPC's region. Defaults to the region of the AWS provider. -}
    , _zone_id             :: !(TF.Argument Text)
    {- ^ (Required) The private hosted zone to associate. -}
    , _computed_id         :: !(TF.Attribute Text)
    {- ^ - The calculated unique identifier for the association. -}
    , _computed_vpc_id     :: !(TF.Attribute Text)
    {- ^ - The ID of the VPC for the association. -}
    , _computed_vpc_region :: !(TF.Attribute Text)
    {- ^ - The region in which the VPC identified by @vpc_id@ was created. -}
    , _computed_zone_id    :: !(TF.Attribute Text)
    {- ^ - The ID of the hosted zone for the association. -}
    } deriving (Show, Eq)

instance TF.ToHCL Route53ZoneAssociationResource where
    toHCL Route53ZoneAssociationResource{..} = TF.block $ catMaybes
        [ TF.assign "vpc_id" <$> TF.argument _vpc_id
        , TF.assign "vpc_region" <$> TF.argument _vpc_region
        , TF.assign "zone_id" <$> TF.argument _zone_id
        ]

instance HasVpcId Route53ZoneAssociationResource (TF.Argument Text) where
    vpcId f s@Route53ZoneAssociationResource{..} =
        (\a -> s { _vpc_id = a } :: Route53ZoneAssociationResource)
             <$> f _vpc_id

instance HasVpcRegion Route53ZoneAssociationResource (TF.Argument Text) where
    vpcRegion f s@Route53ZoneAssociationResource{..} =
        (\a -> s { _vpc_region = a } :: Route53ZoneAssociationResource)
             <$> f _vpc_region

instance HasZoneId Route53ZoneAssociationResource (TF.Argument Text) where
    zoneId f s@Route53ZoneAssociationResource{..} =
        (\a -> s { _zone_id = a } :: Route53ZoneAssociationResource)
             <$> f _zone_id

instance HasComputedId Route53ZoneAssociationResource (TF.Attribute Text) where
    computedId f s@Route53ZoneAssociationResource{..} =
        (\a -> s { _computed_id = a } :: Route53ZoneAssociationResource)
             <$> f _computed_id

instance HasComputedVpcId Route53ZoneAssociationResource (TF.Attribute Text) where
    computedVpcId f s@Route53ZoneAssociationResource{..} =
        (\a -> s { _computed_vpc_id = a } :: Route53ZoneAssociationResource)
             <$> f _computed_vpc_id

instance HasComputedVpcRegion Route53ZoneAssociationResource (TF.Attribute Text) where
    computedVpcRegion f s@Route53ZoneAssociationResource{..} =
        (\a -> s { _computed_vpc_region = a } :: Route53ZoneAssociationResource)
             <$> f _computed_vpc_region

instance HasComputedZoneId Route53ZoneAssociationResource (TF.Attribute Text) where
    computedZoneId f s@Route53ZoneAssociationResource{..} =
        (\a -> s { _computed_zone_id = a } :: Route53ZoneAssociationResource)
             <$> f _computed_zone_id

route53ZoneAssociationResource :: TF.Resource TF.AWS Route53ZoneAssociationResource
route53ZoneAssociationResource =
    TF.newResource "aws_route53_zone_association" $
        Route53ZoneAssociationResource {
            _vpc_id = TF.Nil
            , _vpc_region = TF.Nil
            , _zone_id = TF.Nil
            , _computed_id = TF.Compute "id"
            , _computed_vpc_id = TF.Compute "vpc_id"
            , _computed_vpc_region = TF.Compute "vpc_region"
            , _computed_zone_id = TF.Compute "zone_id"
            }

{- | The @aws_route53_zone@ AWS resource.

Provides a Route53 Hosted Zone resource.
-}
data Route53ZoneResource = Route53ZoneResource {
      _comment               :: !(TF.Argument Text)
    {- ^ (Optional) A comment for the hosted zone. Defaults to 'Managed by Terraform'. -}
    , _delegation_set_id     :: !(TF.Argument Text)
    {- ^ (Optional) The ID of the reusable delegation set whose NS records you want to assign to the hosted zone. Conflicts w/ @vpc_id@ as delegation sets can only be used for public zones. -}
    , _force_destroy         :: !(TF.Argument Text)
    {- ^ (Optional) Whether to destroy all records (possibly managed outside of Terraform) in the zone when destroying the zone. -}
    , _name                  :: !(TF.Argument Text)
    {- ^ (Required) This is the name of the hosted zone. -}
    , _tags                  :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the zone. -}
    , _vpc_id                :: !(TF.Argument Text)
    {- ^ (Optional) The VPC to associate with a private hosted zone. Specifying @vpc_id@ will create a private hosted zone. Conflicts w/ @delegation_set_id@ as delegation sets can only be used for public zones. -}
    , _vpc_region            :: !(TF.Argument Text)
    {- ^ (Optional) The VPC's region. Defaults to the region of the AWS provider. -}
    , _computed_name_servers :: !(TF.Attribute Text)
    {- ^ - A list of name servers in associated (or default) delegation set. Find more about delegation sets in <https://docs.aws.amazon.com/Route53/latest/APIReference/actions-on-reusable-delegation-sets.html> . -}
    , _computed_zone_id      :: !(TF.Attribute Text)
    {- ^ - The Hosted Zone ID. This can be referenced by zone records. -}
    } deriving (Show, Eq)

instance TF.ToHCL Route53ZoneResource where
    toHCL Route53ZoneResource{..} = TF.block $ catMaybes
        [ TF.assign "comment" <$> TF.argument _comment
        , TF.assign "delegation_set_id" <$> TF.argument _delegation_set_id
        , TF.assign "force_destroy" <$> TF.argument _force_destroy
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "tags" <$> TF.argument _tags
        , TF.assign "vpc_id" <$> TF.argument _vpc_id
        , TF.assign "vpc_region" <$> TF.argument _vpc_region
        ]

instance HasComment Route53ZoneResource (TF.Argument Text) where
    comment f s@Route53ZoneResource{..} =
        (\a -> s { _comment = a } :: Route53ZoneResource)
             <$> f _comment

instance HasDelegationSetId Route53ZoneResource (TF.Argument Text) where
    delegationSetId f s@Route53ZoneResource{..} =
        (\a -> s { _delegation_set_id = a } :: Route53ZoneResource)
             <$> f _delegation_set_id

instance HasForceDestroy Route53ZoneResource (TF.Argument Text) where
    forceDestroy f s@Route53ZoneResource{..} =
        (\a -> s { _force_destroy = a } :: Route53ZoneResource)
             <$> f _force_destroy

instance HasName Route53ZoneResource (TF.Argument Text) where
    name f s@Route53ZoneResource{..} =
        (\a -> s { _name = a } :: Route53ZoneResource)
             <$> f _name

instance HasTags Route53ZoneResource (TF.Argument TF.Tags) where
    tags f s@Route53ZoneResource{..} =
        (\a -> s { _tags = a } :: Route53ZoneResource)
             <$> f _tags

instance HasVpcId Route53ZoneResource (TF.Argument Text) where
    vpcId f s@Route53ZoneResource{..} =
        (\a -> s { _vpc_id = a } :: Route53ZoneResource)
             <$> f _vpc_id

instance HasVpcRegion Route53ZoneResource (TF.Argument Text) where
    vpcRegion f s@Route53ZoneResource{..} =
        (\a -> s { _vpc_region = a } :: Route53ZoneResource)
             <$> f _vpc_region

instance HasComputedNameServers Route53ZoneResource (TF.Attribute Text) where
    computedNameServers f s@Route53ZoneResource{..} =
        (\a -> s { _computed_name_servers = a } :: Route53ZoneResource)
             <$> f _computed_name_servers

instance HasComputedZoneId Route53ZoneResource (TF.Attribute Text) where
    computedZoneId f s@Route53ZoneResource{..} =
        (\a -> s { _computed_zone_id = a } :: Route53ZoneResource)
             <$> f _computed_zone_id

route53ZoneResource :: TF.Resource TF.AWS Route53ZoneResource
route53ZoneResource =
    TF.newResource "aws_route53_zone" $
        Route53ZoneResource {
            _comment = TF.Nil
            , _delegation_set_id = TF.Nil
            , _force_destroy = TF.Nil
            , _name = TF.Nil
            , _tags = TF.Nil
            , _vpc_id = TF.Nil
            , _vpc_region = TF.Nil
            , _computed_name_servers = TF.Compute "name_servers"
            , _computed_zone_id = TF.Compute "zone_id"
            }

{- | The @aws_route@ AWS resource.

Provides a resource to create a routing table entry (a route) in a VPC
routing table. ~> NOTE on Route Tables and Routes: Terraform currently
provides both a standalone Route resource and a <route_table.html> resource
with routes defined in-line. At this time you cannot use a Route Table with
in-line routes in conjunction with any Route resources. Doing so will cause
a conflict of rule settings and will overwrite rules.
-}
data RouteResource = RouteResource {
      _destination_cidr_block               :: !(TF.Argument Text)
    {- ^ (Optional) The destination CIDR block. -}
    , _destination_ipv6_cidr_block          :: !(TF.Argument Text)
    {- ^ (Optional) The destination IPv6 CIDR block. -}
    , _egress_only_gateway_id               :: !(TF.Argument Text)
    {- ^ (Optional) An ID of a VPC Egress Only Internet Gateway. -}
    , _gateway_id                           :: !(TF.Argument Text)
    {- ^ (Optional) An ID of a VPC internet gateway or a virtual private gateway. -}
    , _instance_id                          :: !(TF.Argument Text)
    {- ^ (Optional) An ID of an EC2 instance. -}
    , _nat_gateway_id                       :: !(TF.Argument Text)
    {- ^ (Optional) An ID of a VPC NAT gateway. -}
    , _network_interface_id                 :: !(TF.Argument Text)
    {- ^ (Optional) An ID of a network interface. -}
    , _route_table_id                       :: !(TF.Argument Text)
    {- ^ (Required) The ID of the routing table. -}
    , _vpc_peering_connection_id            :: !(TF.Argument Text)
    {- ^ (Optional) An ID of a VPC peering connection. -}
    , _computed_destination_cidr_block      :: !(TF.Attribute Text)
    {- ^ - The destination CIDR block. -}
    , _computed_destination_ipv6_cidr_block :: !(TF.Attribute Text)
    {- ^ - The destination IPv6 CIDR block. -}
    , _computed_egress_only_gateway_id      :: !(TF.Attribute Text)
    {- ^ - An ID of a VPC Egress Only Internet Gateway. -}
    , _computed_gateway_id                  :: !(TF.Attribute Text)
    {- ^ - An ID of a VPC internet gateway or a virtual private gateway. -}
    , _computed_instance_id                 :: !(TF.Attribute Text)
    {- ^ - An ID of a NAT instance. -}
    , _computed_nat_gateway_id              :: !(TF.Attribute Text)
    {- ^ - An ID of a VPC NAT gateway. -}
    , _computed_network_interface_id        :: !(TF.Attribute Text)
    {- ^ - An ID of a network interface. -}
    , _computed_route_table_id              :: !(TF.Attribute Text)
    {- ^ - The ID of the routing table. -}
    , _computed_vpc_peering_connection_id   :: !(TF.Attribute Text)
    {- ^ - An ID of a VPC peering connection. -}
    } deriving (Show, Eq)

instance TF.ToHCL RouteResource where
    toHCL RouteResource{..} = TF.block $ catMaybes
        [ TF.assign "destination_cidr_block" <$> TF.argument _destination_cidr_block
        , TF.assign "destination_ipv6_cidr_block" <$> TF.argument _destination_ipv6_cidr_block
        , TF.assign "egress_only_gateway_id" <$> TF.argument _egress_only_gateway_id
        , TF.assign "gateway_id" <$> TF.argument _gateway_id
        , TF.assign "instance_id" <$> TF.argument _instance_id
        , TF.assign "nat_gateway_id" <$> TF.argument _nat_gateway_id
        , TF.assign "network_interface_id" <$> TF.argument _network_interface_id
        , TF.assign "route_table_id" <$> TF.argument _route_table_id
        , TF.assign "vpc_peering_connection_id" <$> TF.argument _vpc_peering_connection_id
        ]

instance HasDestinationCidrBlock RouteResource (TF.Argument Text) where
    destinationCidrBlock f s@RouteResource{..} =
        (\a -> s { _destination_cidr_block = a } :: RouteResource)
             <$> f _destination_cidr_block

instance HasDestinationIpv6CidrBlock RouteResource (TF.Argument Text) where
    destinationIpv6CidrBlock f s@RouteResource{..} =
        (\a -> s { _destination_ipv6_cidr_block = a } :: RouteResource)
             <$> f _destination_ipv6_cidr_block

instance HasEgressOnlyGatewayId RouteResource (TF.Argument Text) where
    egressOnlyGatewayId f s@RouteResource{..} =
        (\a -> s { _egress_only_gateway_id = a } :: RouteResource)
             <$> f _egress_only_gateway_id

instance HasGatewayId RouteResource (TF.Argument Text) where
    gatewayId f s@RouteResource{..} =
        (\a -> s { _gateway_id = a } :: RouteResource)
             <$> f _gateway_id

instance HasInstanceId RouteResource (TF.Argument Text) where
    instanceId f s@RouteResource{..} =
        (\a -> s { _instance_id = a } :: RouteResource)
             <$> f _instance_id

instance HasNatGatewayId RouteResource (TF.Argument Text) where
    natGatewayId f s@RouteResource{..} =
        (\a -> s { _nat_gateway_id = a } :: RouteResource)
             <$> f _nat_gateway_id

instance HasNetworkInterfaceId RouteResource (TF.Argument Text) where
    networkInterfaceId f s@RouteResource{..} =
        (\a -> s { _network_interface_id = a } :: RouteResource)
             <$> f _network_interface_id

instance HasRouteTableId RouteResource (TF.Argument Text) where
    routeTableId f s@RouteResource{..} =
        (\a -> s { _route_table_id = a } :: RouteResource)
             <$> f _route_table_id

instance HasVpcPeeringConnectionId RouteResource (TF.Argument Text) where
    vpcPeeringConnectionId f s@RouteResource{..} =
        (\a -> s { _vpc_peering_connection_id = a } :: RouteResource)
             <$> f _vpc_peering_connection_id

instance HasComputedDestinationCidrBlock RouteResource (TF.Attribute Text) where
    computedDestinationCidrBlock f s@RouteResource{..} =
        (\a -> s { _computed_destination_cidr_block = a } :: RouteResource)
             <$> f _computed_destination_cidr_block

instance HasComputedDestinationIpv6CidrBlock RouteResource (TF.Attribute Text) where
    computedDestinationIpv6CidrBlock f s@RouteResource{..} =
        (\a -> s { _computed_destination_ipv6_cidr_block = a } :: RouteResource)
             <$> f _computed_destination_ipv6_cidr_block

instance HasComputedEgressOnlyGatewayId RouteResource (TF.Attribute Text) where
    computedEgressOnlyGatewayId f s@RouteResource{..} =
        (\a -> s { _computed_egress_only_gateway_id = a } :: RouteResource)
             <$> f _computed_egress_only_gateway_id

instance HasComputedGatewayId RouteResource (TF.Attribute Text) where
    computedGatewayId f s@RouteResource{..} =
        (\a -> s { _computed_gateway_id = a } :: RouteResource)
             <$> f _computed_gateway_id

instance HasComputedInstanceId RouteResource (TF.Attribute Text) where
    computedInstanceId f s@RouteResource{..} =
        (\a -> s { _computed_instance_id = a } :: RouteResource)
             <$> f _computed_instance_id

instance HasComputedNatGatewayId RouteResource (TF.Attribute Text) where
    computedNatGatewayId f s@RouteResource{..} =
        (\a -> s { _computed_nat_gateway_id = a } :: RouteResource)
             <$> f _computed_nat_gateway_id

instance HasComputedNetworkInterfaceId RouteResource (TF.Attribute Text) where
    computedNetworkInterfaceId f s@RouteResource{..} =
        (\a -> s { _computed_network_interface_id = a } :: RouteResource)
             <$> f _computed_network_interface_id

instance HasComputedRouteTableId RouteResource (TF.Attribute Text) where
    computedRouteTableId f s@RouteResource{..} =
        (\a -> s { _computed_route_table_id = a } :: RouteResource)
             <$> f _computed_route_table_id

instance HasComputedVpcPeeringConnectionId RouteResource (TF.Attribute Text) where
    computedVpcPeeringConnectionId f s@RouteResource{..} =
        (\a -> s { _computed_vpc_peering_connection_id = a } :: RouteResource)
             <$> f _computed_vpc_peering_connection_id

routeResource :: TF.Resource TF.AWS RouteResource
routeResource =
    TF.newResource "aws_route" $
        RouteResource {
            _destination_cidr_block = TF.Nil
            , _destination_ipv6_cidr_block = TF.Nil
            , _egress_only_gateway_id = TF.Nil
            , _gateway_id = TF.Nil
            , _instance_id = TF.Nil
            , _nat_gateway_id = TF.Nil
            , _network_interface_id = TF.Nil
            , _route_table_id = TF.Nil
            , _vpc_peering_connection_id = TF.Nil
            , _computed_destination_cidr_block = TF.Compute "destination_cidr_block"
            , _computed_destination_ipv6_cidr_block = TF.Compute "destination_ipv6_cidr_block"
            , _computed_egress_only_gateway_id = TF.Compute "egress_only_gateway_id"
            , _computed_gateway_id = TF.Compute "gateway_id"
            , _computed_instance_id = TF.Compute "instance_id"
            , _computed_nat_gateway_id = TF.Compute "nat_gateway_id"
            , _computed_network_interface_id = TF.Compute "network_interface_id"
            , _computed_route_table_id = TF.Compute "route_table_id"
            , _computed_vpc_peering_connection_id = TF.Compute "vpc_peering_connection_id"
            }

{- | The @aws_route_table_association@ AWS resource.

Provides a resource to create an association between a subnet and routing
table.
-}
data RouteTableAssociationResource = RouteTableAssociationResource {
      _route_table_id :: !(TF.Argument Text)
    {- ^ (Required) The ID of the routing table to associate with. -}
    , _subnet_id      :: !(TF.Argument Text)
    {- ^ (Required) The subnet ID to create an association. -}
    , _computed_id    :: !(TF.Attribute Text)
    {- ^ - The ID of the association -}
    } deriving (Show, Eq)

instance TF.ToHCL RouteTableAssociationResource where
    toHCL RouteTableAssociationResource{..} = TF.block $ catMaybes
        [ TF.assign "route_table_id" <$> TF.argument _route_table_id
        , TF.assign "subnet_id" <$> TF.argument _subnet_id
        ]

instance HasRouteTableId RouteTableAssociationResource (TF.Argument Text) where
    routeTableId f s@RouteTableAssociationResource{..} =
        (\a -> s { _route_table_id = a } :: RouteTableAssociationResource)
             <$> f _route_table_id

instance HasSubnetId RouteTableAssociationResource (TF.Argument Text) where
    subnetId f s@RouteTableAssociationResource{..} =
        (\a -> s { _subnet_id = a } :: RouteTableAssociationResource)
             <$> f _subnet_id

instance HasComputedId RouteTableAssociationResource (TF.Attribute Text) where
    computedId f s@RouteTableAssociationResource{..} =
        (\a -> s { _computed_id = a } :: RouteTableAssociationResource)
             <$> f _computed_id

routeTableAssociationResource :: TF.Resource TF.AWS RouteTableAssociationResource
routeTableAssociationResource =
    TF.newResource "aws_route_table_association" $
        RouteTableAssociationResource {
            _route_table_id = TF.Nil
            , _subnet_id = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_route_table@ AWS resource.

Provides a resource to create a VPC routing table. ~> NOTE on Route Tables
and Routes: Terraform currently provides both a standalone <route.html> and
a Route Table resource with routes defined in-line. At this time you cannot
use a Route Table with in-line routes in conjunction with any Route
resources. Doing so will cause a conflict of rule settings and will
overwrite rules. ~> NOTE on @gateway_id@ and @nat_gateway_id@ : The AWS API
is very forgiving with these two attributes and the @aws_route_table@
resource can be created with a NAT ID specified as a Gateway ID attribute.
This will lead to a permanent diff between your configuration and statefile,
as the API returns the correct parameters in the returned route table. If
you're experiencing constant diffs in your @aws_route_table@ resources, the
first thing to check is whether or not you're specifying a NAT ID instead of
a Gateway ID, or vice-versa. ~> NOTE on @propagating_vgws@ and the
@aws_vpn_gateway_route_propagation@ resource: If the @propagating_vgws@
argument is present, it's not supported to also define route propagations
using @aws_vpn_gateway_route_propagation@ , since this resource will delete
any propagating gateways not explicitly listed in @propagating_vgws@ . Omit
this argument when defining route propagation using the separate resource.
-}
data RouteTableResource = RouteTableResource {
      _propagating_vgws :: !(TF.Argument Text)
    {- ^ (Optional) A list of virtual gateways for propagation. -}
    , _route            :: !(TF.Argument Text)
    {- ^ (Optional) A list of route objects. Their keys are documented below. -}
    , _tags             :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _vpc_id           :: !(TF.Argument Text)
    {- ^ (Required) The VPC ID. -}
    , _computed_id      :: !(TF.Attribute Text)
    {- ^ - The ID of the routing table -}
    } deriving (Show, Eq)

instance TF.ToHCL RouteTableResource where
    toHCL RouteTableResource{..} = TF.block $ catMaybes
        [ TF.assign "propagating_vgws" <$> TF.argument _propagating_vgws
        , TF.assign "route" <$> TF.argument _route
        , TF.assign "tags" <$> TF.argument _tags
        , TF.assign "vpc_id" <$> TF.argument _vpc_id
        ]

instance HasPropagatingVgws RouteTableResource (TF.Argument Text) where
    propagatingVgws f s@RouteTableResource{..} =
        (\a -> s { _propagating_vgws = a } :: RouteTableResource)
             <$> f _propagating_vgws

instance HasRoute RouteTableResource (TF.Argument Text) where
    route f s@RouteTableResource{..} =
        (\a -> s { _route = a } :: RouteTableResource)
             <$> f _route

instance HasTags RouteTableResource (TF.Argument TF.Tags) where
    tags f s@RouteTableResource{..} =
        (\a -> s { _tags = a } :: RouteTableResource)
             <$> f _tags

instance HasVpcId RouteTableResource (TF.Argument Text) where
    vpcId f s@RouteTableResource{..} =
        (\a -> s { _vpc_id = a } :: RouteTableResource)
             <$> f _vpc_id

instance HasComputedId RouteTableResource (TF.Attribute Text) where
    computedId f s@RouteTableResource{..} =
        (\a -> s { _computed_id = a } :: RouteTableResource)
             <$> f _computed_id

routeTableResource :: TF.Resource TF.AWS RouteTableResource
routeTableResource =
    TF.newResource "aws_route_table" $
        RouteTableResource {
            _propagating_vgws = TF.Nil
            , _route = TF.Nil
            , _tags = TF.Nil
            , _vpc_id = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_s3_bucket_notification@ AWS resource.

Provides a S3 bucket notification resource.
-}
data S3BucketNotificationResource = S3BucketNotificationResource {
      _bucket          :: !(TF.Argument Text)
    {- ^ (Required) The name of the bucket to put notification configuration. -}
    , _lambda_function :: !(TF.Argument Text)
    {- ^ (Optional, Multiple) Used to configure notifications to a Lambda Function (documented below). -}
    , _queue           :: !(TF.Argument Text)
    {- ^ (Optional) The notification configuration to SQS Queue (documented below). -}
    , _topic           :: !(TF.Argument Text)
    {- ^ (Optional) The notification configuration to SNS Topic (documented below). -}
    } deriving (Show, Eq)

instance TF.ToHCL S3BucketNotificationResource where
    toHCL S3BucketNotificationResource{..} = TF.block $ catMaybes
        [ TF.assign "bucket" <$> TF.argument _bucket
        , TF.assign "lambda_function" <$> TF.argument _lambda_function
        , TF.assign "queue" <$> TF.argument _queue
        , TF.assign "topic" <$> TF.argument _topic
        ]

instance HasBucket S3BucketNotificationResource (TF.Argument Text) where
    bucket f s@S3BucketNotificationResource{..} =
        (\a -> s { _bucket = a } :: S3BucketNotificationResource)
             <$> f _bucket

instance HasLambdaFunction S3BucketNotificationResource (TF.Argument Text) where
    lambdaFunction f s@S3BucketNotificationResource{..} =
        (\a -> s { _lambda_function = a } :: S3BucketNotificationResource)
             <$> f _lambda_function

instance HasQueue S3BucketNotificationResource (TF.Argument Text) where
    queue f s@S3BucketNotificationResource{..} =
        (\a -> s { _queue = a } :: S3BucketNotificationResource)
             <$> f _queue

instance HasTopic S3BucketNotificationResource (TF.Argument Text) where
    topic f s@S3BucketNotificationResource{..} =
        (\a -> s { _topic = a } :: S3BucketNotificationResource)
             <$> f _topic

s3BucketNotificationResource :: TF.Resource TF.AWS S3BucketNotificationResource
s3BucketNotificationResource =
    TF.newResource "aws_s3_bucket_notification" $
        S3BucketNotificationResource {
            _bucket = TF.Nil
            , _lambda_function = TF.Nil
            , _queue = TF.Nil
            , _topic = TF.Nil
            }

{- | The @aws_s3_bucket_object@ AWS resource.

Provides a S3 bucket object resource.
-}
data S3BucketObjectResource = S3BucketObjectResource {
      _acl                    :: !(TF.Argument Text)
    {- ^ (Optional) The <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl> to apply. Defaults to "private". -}
    , _bucket                 :: !(TF.Argument Text)
    {- ^ (Required) The name of the bucket to put the file in. -}
    , _cache_control          :: !(TF.Argument Text)
    {- ^ (Optional) Specifies caching behavior along the request/reply chain Read <http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9> for further details. -}
    , _content                :: !(TF.Argument Text)
    {- ^ (Required unless @source@ given) The literal content being uploaded to the bucket. -}
    , _content_disposition    :: !(TF.Argument Text)
    {- ^ (Optional) Specifies presentational information for the object. Read <http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.5.1> for further information. -}
    , _content_encoding       :: !(TF.Argument Text)
    {- ^ (Optional) Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field. Read <http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11> for further information. -}
    , _content_language       :: !(TF.Argument Text)
    {- ^ (Optional) The language the content is in e.g. en-US or en-GB. -}
    , _content_type           :: !(TF.Argument Text)
    {- ^ (Optional) A standard MIME type describing the format of the object data, e.g. application/octet-stream. All Valid MIME Types are valid for this input. -}
    , _etag                   :: !(TF.Argument Text)
    {- ^ (Optional) Used to trigger updates. The only meaningful value is @${md5(file("path/to/file"))}@ . This attribute is not compatible with @kms_key_id@ . -}
    , _key                    :: !(TF.Argument Text)
    {- ^ (Required) The name of the object once it is in the bucket. -}
    , _kms_key_id             :: !(TF.Argument Text)
    {- ^ (Optional) Specifies the AWS KMS Key ARN to use for object encryption. This value is a fully qualified ARN of the KMS Key. If using @aws_kms_key@ , use the exported @arn@ attribute: @kms_key_id = "${aws_kms_key.foo.arn}"@ -}
    , _server_side_encryption :: !(TF.Argument Text)
    {- ^ (Optional) Specifies server-side encryption of the object in S3. Valid values are " @AES256@ " and " @aws:kms@ ". -}
    , _source                 :: !(TF.Argument Text)
    {- ^ (Required) The path to the source file being uploaded to the bucket. -}
    , _storage_class          :: !(TF.Argument Text)
    {- ^ (Optional) Specifies the desired <http://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html> for the object. Can be either " @STANDARD@ ", " @REDUCED_REDUNDANCY@ ", or " @STANDARD_IA@ ". Defaults to " @STANDARD@ ". -}
    , _tags                   :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the object. -}
    , _website_redirect       :: !(TF.Argument Text)
    {- ^ (Optional) Specifies a target URL for <http://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html> . -}
    , _computed_etag          :: !(TF.Attribute Text)
    {- ^ - the ETag generated for the object (an MD5 sum of the object content). -}
    , _computed_id            :: !(TF.Attribute Text)
    {- ^ - the @key@ of the resource supplied above -}
    , _computed_version_id    :: !(TF.Attribute Text)
    {- ^ - A unique version ID value for the object, if bucket versioning is enabled. -}
    } deriving (Show, Eq)

instance TF.ToHCL S3BucketObjectResource where
    toHCL S3BucketObjectResource{..} = TF.block $ catMaybes
        [ TF.assign "acl" <$> TF.argument _acl
        , TF.assign "bucket" <$> TF.argument _bucket
        , TF.assign "cache_control" <$> TF.argument _cache_control
        , TF.assign "content" <$> TF.argument _content
        , TF.assign "content_disposition" <$> TF.argument _content_disposition
        , TF.assign "content_encoding" <$> TF.argument _content_encoding
        , TF.assign "content_language" <$> TF.argument _content_language
        , TF.assign "content_type" <$> TF.argument _content_type
        , TF.assign "etag" <$> TF.argument _etag
        , TF.assign "key" <$> TF.argument _key
        , TF.assign "kms_key_id" <$> TF.argument _kms_key_id
        , TF.assign "server_side_encryption" <$> TF.argument _server_side_encryption
        , TF.assign "source" <$> TF.argument _source
        , TF.assign "storage_class" <$> TF.argument _storage_class
        , TF.assign "tags" <$> TF.argument _tags
        , TF.assign "website_redirect" <$> TF.argument _website_redirect
        ]

instance HasAcl S3BucketObjectResource (TF.Argument Text) where
    acl f s@S3BucketObjectResource{..} =
        (\a -> s { _acl = a } :: S3BucketObjectResource)
             <$> f _acl

instance HasBucket S3BucketObjectResource (TF.Argument Text) where
    bucket f s@S3BucketObjectResource{..} =
        (\a -> s { _bucket = a } :: S3BucketObjectResource)
             <$> f _bucket

instance HasCacheControl S3BucketObjectResource (TF.Argument Text) where
    cacheControl f s@S3BucketObjectResource{..} =
        (\a -> s { _cache_control = a } :: S3BucketObjectResource)
             <$> f _cache_control

instance HasContent S3BucketObjectResource (TF.Argument Text) where
    content f s@S3BucketObjectResource{..} =
        (\a -> s { _content = a } :: S3BucketObjectResource)
             <$> f _content

instance HasContentDisposition S3BucketObjectResource (TF.Argument Text) where
    contentDisposition f s@S3BucketObjectResource{..} =
        (\a -> s { _content_disposition = a } :: S3BucketObjectResource)
             <$> f _content_disposition

instance HasContentEncoding S3BucketObjectResource (TF.Argument Text) where
    contentEncoding f s@S3BucketObjectResource{..} =
        (\a -> s { _content_encoding = a } :: S3BucketObjectResource)
             <$> f _content_encoding

instance HasContentLanguage S3BucketObjectResource (TF.Argument Text) where
    contentLanguage f s@S3BucketObjectResource{..} =
        (\a -> s { _content_language = a } :: S3BucketObjectResource)
             <$> f _content_language

instance HasContentType S3BucketObjectResource (TF.Argument Text) where
    contentType f s@S3BucketObjectResource{..} =
        (\a -> s { _content_type = a } :: S3BucketObjectResource)
             <$> f _content_type

instance HasEtag S3BucketObjectResource (TF.Argument Text) where
    etag f s@S3BucketObjectResource{..} =
        (\a -> s { _etag = a } :: S3BucketObjectResource)
             <$> f _etag

instance HasKey S3BucketObjectResource (TF.Argument Text) where
    key f s@S3BucketObjectResource{..} =
        (\a -> s { _key = a } :: S3BucketObjectResource)
             <$> f _key

instance HasKmsKeyId S3BucketObjectResource (TF.Argument Text) where
    kmsKeyId f s@S3BucketObjectResource{..} =
        (\a -> s { _kms_key_id = a } :: S3BucketObjectResource)
             <$> f _kms_key_id

instance HasServerSideEncryption S3BucketObjectResource (TF.Argument Text) where
    serverSideEncryption f s@S3BucketObjectResource{..} =
        (\a -> s { _server_side_encryption = a } :: S3BucketObjectResource)
             <$> f _server_side_encryption

instance HasSource S3BucketObjectResource (TF.Argument Text) where
    source f s@S3BucketObjectResource{..} =
        (\a -> s { _source = a } :: S3BucketObjectResource)
             <$> f _source

instance HasStorageClass S3BucketObjectResource (TF.Argument Text) where
    storageClass f s@S3BucketObjectResource{..} =
        (\a -> s { _storage_class = a } :: S3BucketObjectResource)
             <$> f _storage_class

instance HasTags S3BucketObjectResource (TF.Argument TF.Tags) where
    tags f s@S3BucketObjectResource{..} =
        (\a -> s { _tags = a } :: S3BucketObjectResource)
             <$> f _tags

instance HasWebsiteRedirect S3BucketObjectResource (TF.Argument Text) where
    websiteRedirect f s@S3BucketObjectResource{..} =
        (\a -> s { _website_redirect = a } :: S3BucketObjectResource)
             <$> f _website_redirect

instance HasComputedEtag S3BucketObjectResource (TF.Attribute Text) where
    computedEtag f s@S3BucketObjectResource{..} =
        (\a -> s { _computed_etag = a } :: S3BucketObjectResource)
             <$> f _computed_etag

instance HasComputedId S3BucketObjectResource (TF.Attribute Text) where
    computedId f s@S3BucketObjectResource{..} =
        (\a -> s { _computed_id = a } :: S3BucketObjectResource)
             <$> f _computed_id

instance HasComputedVersionId S3BucketObjectResource (TF.Attribute Text) where
    computedVersionId f s@S3BucketObjectResource{..} =
        (\a -> s { _computed_version_id = a } :: S3BucketObjectResource)
             <$> f _computed_version_id

s3BucketObjectResource :: TF.Resource TF.AWS S3BucketObjectResource
s3BucketObjectResource =
    TF.newResource "aws_s3_bucket_object" $
        S3BucketObjectResource {
            _acl = TF.Nil
            , _bucket = TF.Nil
            , _cache_control = TF.Nil
            , _content = TF.Nil
            , _content_disposition = TF.Nil
            , _content_encoding = TF.Nil
            , _content_language = TF.Nil
            , _content_type = TF.Nil
            , _etag = TF.Nil
            , _key = TF.Nil
            , _kms_key_id = TF.Nil
            , _server_side_encryption = TF.Nil
            , _source = TF.Nil
            , _storage_class = TF.Nil
            , _tags = TF.Nil
            , _website_redirect = TF.Nil
            , _computed_etag = TF.Compute "etag"
            , _computed_id = TF.Compute "id"
            , _computed_version_id = TF.Compute "version_id"
            }

{- | The @aws_s3_bucket_policy@ AWS resource.

Attaches a policy to an S3 bucket resource.
-}
data S3BucketPolicyResource = S3BucketPolicyResource {
      _bucket :: !(TF.Argument Text)
    {- ^ (Required) The name of the bucket to which to apply the policy. -}
    , _policy :: !(TF.Argument Text)
    {- ^ (Required) The text of the policy. -}
    } deriving (Show, Eq)

instance TF.ToHCL S3BucketPolicyResource where
    toHCL S3BucketPolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "bucket" <$> TF.argument _bucket
        , TF.assign "policy" <$> TF.argument _policy
        ]

instance HasBucket S3BucketPolicyResource (TF.Argument Text) where
    bucket f s@S3BucketPolicyResource{..} =
        (\a -> s { _bucket = a } :: S3BucketPolicyResource)
             <$> f _bucket

instance HasPolicy S3BucketPolicyResource (TF.Argument Text) where
    policy f s@S3BucketPolicyResource{..} =
        (\a -> s { _policy = a } :: S3BucketPolicyResource)
             <$> f _policy

s3BucketPolicyResource :: TF.Resource TF.AWS S3BucketPolicyResource
s3BucketPolicyResource =
    TF.newResource "aws_s3_bucket_policy" $
        S3BucketPolicyResource {
            _bucket = TF.Nil
            , _policy = TF.Nil
            }

{- | The @aws_s3_bucket@ AWS resource.

Provides a S3 bucket resource.
-}
data S3BucketResource = S3BucketResource {
      _acceleration_status                  :: !(TF.Argument Text)
    {- ^ (Optional) Sets the accelerate configuration of an existing bucket. Can be @Enabled@ or @Suspended@ . -}
    , _acl                                  :: !(TF.Argument Text)
    {- ^ (Optional) The <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl> to apply. Defaults to "private". -}
    , _bucket                               :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) The name of the bucket. If omitted, Terraform will assign a random, unique name. -}
    , _bucket_prefix                        :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) Creates a unique bucket name beginning with the specified prefix. Conflicts with @bucket@ . -}
    , _cors_rule                            :: !(TF.Argument Text)
    {- ^ (Optional) A rule of <https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html> (documented below). -}
    , _force_destroy                        :: !(TF.Argument Text)
    {- ^ (Optional, Default:false ) A boolean that indicates all objects should be deleted from the bucket so that the bucket can be destroyed without error. These objects are not recoverable. -}
    , _lifecycle_rule                       :: !(TF.Argument Text)
    {- ^ (Optional) A configuration of <http://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html> (documented below). -}
    , _logging                              :: !(TF.Argument Text)
    {- ^ (Optional) A settings of <https://docs.aws.amazon.com/AmazonS3/latest/UG/ManagingBucketLogging.html> (documented below). -}
    , _policy                               :: !(TF.Argument Text)
    {- ^ (Optional) A valid <https://docs.aws.amazon.com/AmazonS3/latest/dev/example-bucket-policies.html> JSON document. Note that if the policy document is not specific enough (but still valid), Terraform may view the policy as constantly changing in a @terraform plan@ . In this case, please make sure you use the verbose/specific version of the policy. -}
    , _region                               :: !(TF.Argument Text)
    {- ^ (Optional) If specified, the AWS region this bucket should reside in. Otherwise, the region used by the callee. -}
    , _replication_configuration            :: !(TF.Argument Text)
    {- ^ (Optional) A configuration of <http://docs.aws.amazon.com/AmazonS3/latest/dev/crr.html> (documented below). -}
    , _request_payer                        :: !(TF.Argument Text)
    {- ^ (Optional) Specifies who should bear the cost of Amazon S3 data transfer. Can be either @BucketOwner@ or @Requester@ . By default, the owner of the S3 bucket would incur the costs of any data transfer. See <http://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html> developer guide for more information. -}
    , _server_side_encryption_configuration :: !(TF.Argument Text)
    {- ^ (Optional) A configuration of <http://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html> (documented below) -}
    , _tags                                 :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the bucket. -}
    , _versioning                           :: !(TF.Argument Text)
    {- ^ (Optional) A state of <https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html> (documented below) -}
    , _website                              :: !(TF.Argument Text)
    {- ^ (Optional) A website object (documented below). -}
    , _computed_arn                         :: !(TF.Attribute Text)
    {- ^ - The ARN of the bucket. Will be of format @arn:aws:s3:::bucketname@ . -}
    , _computed_bucket_domain_name          :: !(TF.Attribute Text)
    {- ^ - The bucket domain name. Will be of format @bucketname.s3.amazonaws.com@ . -}
    , _computed_hosted_zone_id              :: !(TF.Attribute Text)
    {- ^ - The <https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_website_region_endpoints> for this bucket's region. -}
    , _computed_id                          :: !(TF.Attribute Text)
    {- ^ - The name of the bucket. -}
    , _computed_region                      :: !(TF.Attribute Text)
    {- ^ - The AWS region this bucket resides in. -}
    , _computed_website_domain              :: !(TF.Attribute Text)
    {- ^ - The domain of the website endpoint, if the bucket is configured with a website. If not, this will be an empty string. This is used to create Route 53 alias records. -}
    , _computed_website_endpoint            :: !(TF.Attribute Text)
    {- ^ - The website endpoint, if the bucket is configured with a website. If not, this will be an empty string. -}
    } deriving (Show, Eq)

instance TF.ToHCL S3BucketResource where
    toHCL S3BucketResource{..} = TF.block $ catMaybes
        [ TF.assign "acceleration_status" <$> TF.argument _acceleration_status
        , TF.assign "acl" <$> TF.argument _acl
        , TF.assign "bucket" <$> TF.argument _bucket
        , TF.assign "bucket_prefix" <$> TF.argument _bucket_prefix
        , TF.assign "cors_rule" <$> TF.argument _cors_rule
        , TF.assign "force_destroy" <$> TF.argument _force_destroy
        , TF.assign "lifecycle_rule" <$> TF.argument _lifecycle_rule
        , TF.assign "logging" <$> TF.argument _logging
        , TF.assign "policy" <$> TF.argument _policy
        , TF.assign "region" <$> TF.argument _region
        , TF.assign "replication_configuration" <$> TF.argument _replication_configuration
        , TF.assign "request_payer" <$> TF.argument _request_payer
        , TF.assign "server_side_encryption_configuration" <$> TF.argument _server_side_encryption_configuration
        , TF.assign "tags" <$> TF.argument _tags
        , TF.assign "versioning" <$> TF.argument _versioning
        , TF.assign "website" <$> TF.argument _website
        ]

instance HasAccelerationStatus S3BucketResource (TF.Argument Text) where
    accelerationStatus f s@S3BucketResource{..} =
        (\a -> s { _acceleration_status = a } :: S3BucketResource)
             <$> f _acceleration_status

instance HasAcl S3BucketResource (TF.Argument Text) where
    acl f s@S3BucketResource{..} =
        (\a -> s { _acl = a } :: S3BucketResource)
             <$> f _acl

instance HasBucket S3BucketResource (TF.Argument Text) where
    bucket f s@S3BucketResource{..} =
        (\a -> s { _bucket = a } :: S3BucketResource)
             <$> f _bucket

instance HasBucketPrefix S3BucketResource (TF.Argument Text) where
    bucketPrefix f s@S3BucketResource{..} =
        (\a -> s { _bucket_prefix = a } :: S3BucketResource)
             <$> f _bucket_prefix

instance HasCorsRule S3BucketResource (TF.Argument Text) where
    corsRule f s@S3BucketResource{..} =
        (\a -> s { _cors_rule = a } :: S3BucketResource)
             <$> f _cors_rule

instance HasForceDestroy S3BucketResource (TF.Argument Text) where
    forceDestroy f s@S3BucketResource{..} =
        (\a -> s { _force_destroy = a } :: S3BucketResource)
             <$> f _force_destroy

instance HasLifecycleRule S3BucketResource (TF.Argument Text) where
    lifecycleRule f s@S3BucketResource{..} =
        (\a -> s { _lifecycle_rule = a } :: S3BucketResource)
             <$> f _lifecycle_rule

instance HasLogging S3BucketResource (TF.Argument Text) where
    logging f s@S3BucketResource{..} =
        (\a -> s { _logging = a } :: S3BucketResource)
             <$> f _logging

instance HasPolicy S3BucketResource (TF.Argument Text) where
    policy f s@S3BucketResource{..} =
        (\a -> s { _policy = a } :: S3BucketResource)
             <$> f _policy

instance HasRegion S3BucketResource (TF.Argument Text) where
    region f s@S3BucketResource{..} =
        (\a -> s { _region = a } :: S3BucketResource)
             <$> f _region

instance HasReplicationConfiguration S3BucketResource (TF.Argument Text) where
    replicationConfiguration f s@S3BucketResource{..} =
        (\a -> s { _replication_configuration = a } :: S3BucketResource)
             <$> f _replication_configuration

instance HasRequestPayer S3BucketResource (TF.Argument Text) where
    requestPayer f s@S3BucketResource{..} =
        (\a -> s { _request_payer = a } :: S3BucketResource)
             <$> f _request_payer

instance HasServerSideEncryptionConfiguration S3BucketResource (TF.Argument Text) where
    serverSideEncryptionConfiguration f s@S3BucketResource{..} =
        (\a -> s { _server_side_encryption_configuration = a } :: S3BucketResource)
             <$> f _server_side_encryption_configuration

instance HasTags S3BucketResource (TF.Argument TF.Tags) where
    tags f s@S3BucketResource{..} =
        (\a -> s { _tags = a } :: S3BucketResource)
             <$> f _tags

instance HasVersioning S3BucketResource (TF.Argument Text) where
    versioning f s@S3BucketResource{..} =
        (\a -> s { _versioning = a } :: S3BucketResource)
             <$> f _versioning

instance HasWebsite S3BucketResource (TF.Argument Text) where
    website f s@S3BucketResource{..} =
        (\a -> s { _website = a } :: S3BucketResource)
             <$> f _website

instance HasComputedArn S3BucketResource (TF.Attribute Text) where
    computedArn f s@S3BucketResource{..} =
        (\a -> s { _computed_arn = a } :: S3BucketResource)
             <$> f _computed_arn

instance HasComputedBucketDomainName S3BucketResource (TF.Attribute Text) where
    computedBucketDomainName f s@S3BucketResource{..} =
        (\a -> s { _computed_bucket_domain_name = a } :: S3BucketResource)
             <$> f _computed_bucket_domain_name

instance HasComputedHostedZoneId S3BucketResource (TF.Attribute Text) where
    computedHostedZoneId f s@S3BucketResource{..} =
        (\a -> s { _computed_hosted_zone_id = a } :: S3BucketResource)
             <$> f _computed_hosted_zone_id

instance HasComputedId S3BucketResource (TF.Attribute Text) where
    computedId f s@S3BucketResource{..} =
        (\a -> s { _computed_id = a } :: S3BucketResource)
             <$> f _computed_id

instance HasComputedRegion S3BucketResource (TF.Attribute Text) where
    computedRegion f s@S3BucketResource{..} =
        (\a -> s { _computed_region = a } :: S3BucketResource)
             <$> f _computed_region

instance HasComputedWebsiteDomain S3BucketResource (TF.Attribute Text) where
    computedWebsiteDomain f s@S3BucketResource{..} =
        (\a -> s { _computed_website_domain = a } :: S3BucketResource)
             <$> f _computed_website_domain

instance HasComputedWebsiteEndpoint S3BucketResource (TF.Attribute Text) where
    computedWebsiteEndpoint f s@S3BucketResource{..} =
        (\a -> s { _computed_website_endpoint = a } :: S3BucketResource)
             <$> f _computed_website_endpoint

s3BucketResource :: TF.Resource TF.AWS S3BucketResource
s3BucketResource =
    TF.newResource "aws_s3_bucket" $
        S3BucketResource {
            _acceleration_status = TF.Nil
            , _acl = TF.Nil
            , _bucket = TF.Nil
            , _bucket_prefix = TF.Nil
            , _cors_rule = TF.Nil
            , _force_destroy = TF.Nil
            , _lifecycle_rule = TF.Nil
            , _logging = TF.Nil
            , _policy = TF.Nil
            , _region = TF.Nil
            , _replication_configuration = TF.Nil
            , _request_payer = TF.Nil
            , _server_side_encryption_configuration = TF.Nil
            , _tags = TF.Nil
            , _versioning = TF.Nil
            , _website = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_bucket_domain_name = TF.Compute "bucket_domain_name"
            , _computed_hosted_zone_id = TF.Compute "hosted_zone_id"
            , _computed_id = TF.Compute "id"
            , _computed_region = TF.Compute "region"
            , _computed_website_domain = TF.Compute "website_domain"
            , _computed_website_endpoint = TF.Compute "website_endpoint"
            }

{- | The @aws_security_group@ AWS resource.

Provides a security group resource. ~> NOTE on Security Groups and Security
Group Rules: Terraform currently provides both a standalone
<security_group_rule.html> (a single @ingress@ or @egress@ rule), and a
Security Group resource with @ingress@ and @egress@ rules defined in-line.
At this time you cannot use a Security Group with in-line rules in
conjunction with any Security Group Rule resources. Doing so will cause a
conflict of rule settings and will overwrite rules.
-}
data SecurityGroupResource = SecurityGroupResource {
      _description            :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) The security group description. Defaults to "Managed by Terraform". Cannot be "". NOTE : This field maps to the AWS @GroupDescription@ attribute, for which there is no Update API. If you'd like to classify your security groups in a way that can be updated, use @tags@ . -}
    , _egress                 :: !(TF.Argument Text)
    {- ^ (Optional, VPC only) Can be specified multiple times for each egress rule. Each egress block supports fields documented below. -}
    , _ingress                :: !(TF.Argument Text)
    {- ^ (Optional) Can be specified multiple times for each ingress rule. Each ingress block supports fields documented below. -}
    , _name                   :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) The name of the security group. If omitted, Terraform will assign a random, unique name -}
    , _name_prefix            :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) Creates a unique name beginning with the specified prefix. Conflicts with @name@ . -}
    , _revoke_rules_on_delete :: !(TF.Argument Text)
    {- ^ (Optional) Instruct Terraform to revoke all of the Security Groups attached ingress and egress rules before deleting the rule itself. This is normally not needed, however certain AWS services such as Elastic Map Reduce may automatically add required rules to security groups used with the service, and those rules may contain a cyclic dependency that prevent the security groups from being destroyed without removing the dependency first. Default @false@ -}
    , _tags                   :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _vpc_id                 :: !(TF.Argument Text)
    {- ^ (Optional, Forces new resource) The VPC ID. -}
    } deriving (Show, Eq)

instance TF.ToHCL SecurityGroupResource where
    toHCL SecurityGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.argument _description
        , TF.assign "egress" <$> TF.argument _egress
        , TF.assign "ingress" <$> TF.argument _ingress
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "name_prefix" <$> TF.argument _name_prefix
        , TF.assign "revoke_rules_on_delete" <$> TF.argument _revoke_rules_on_delete
        , TF.assign "tags" <$> TF.argument _tags
        , TF.assign "vpc_id" <$> TF.argument _vpc_id
        ]

instance HasDescription SecurityGroupResource (TF.Argument Text) where
    description f s@SecurityGroupResource{..} =
        (\a -> s { _description = a } :: SecurityGroupResource)
             <$> f _description

instance HasEgress SecurityGroupResource (TF.Argument Text) where
    egress f s@SecurityGroupResource{..} =
        (\a -> s { _egress = a } :: SecurityGroupResource)
             <$> f _egress

instance HasIngress SecurityGroupResource (TF.Argument Text) where
    ingress f s@SecurityGroupResource{..} =
        (\a -> s { _ingress = a } :: SecurityGroupResource)
             <$> f _ingress

instance HasName SecurityGroupResource (TF.Argument Text) where
    name f s@SecurityGroupResource{..} =
        (\a -> s { _name = a } :: SecurityGroupResource)
             <$> f _name

instance HasNamePrefix SecurityGroupResource (TF.Argument Text) where
    namePrefix f s@SecurityGroupResource{..} =
        (\a -> s { _name_prefix = a } :: SecurityGroupResource)
             <$> f _name_prefix

instance HasRevokeRulesOnDelete SecurityGroupResource (TF.Argument Text) where
    revokeRulesOnDelete f s@SecurityGroupResource{..} =
        (\a -> s { _revoke_rules_on_delete = a } :: SecurityGroupResource)
             <$> f _revoke_rules_on_delete

instance HasTags SecurityGroupResource (TF.Argument TF.Tags) where
    tags f s@SecurityGroupResource{..} =
        (\a -> s { _tags = a } :: SecurityGroupResource)
             <$> f _tags

instance HasVpcId SecurityGroupResource (TF.Argument Text) where
    vpcId f s@SecurityGroupResource{..} =
        (\a -> s { _vpc_id = a } :: SecurityGroupResource)
             <$> f _vpc_id

securityGroupResource :: TF.Resource TF.AWS SecurityGroupResource
securityGroupResource =
    TF.newResource "aws_security_group" $
        SecurityGroupResource {
            _description = TF.Nil
            , _egress = TF.Nil
            , _ingress = TF.Nil
            , _name = TF.Nil
            , _name_prefix = TF.Nil
            , _revoke_rules_on_delete = TF.Nil
            , _tags = TF.Nil
            , _vpc_id = TF.Nil
            }

{- | The @aws_security_group_rule@ AWS resource.

Provides a security group rule resource. Represents a single @ingress@ or
@egress@ group rule, which can be added to external Security Groups. ~> NOTE
on Security Groups and Security Group Rules: Terraform currently provides
both a standalone Security Group Rule resource (a single @ingress@ or
@egress@ rule), and a <security_group.html> with @ingress@ and @egress@
rules defined in-line. At this time you cannot use a Security Group with
in-line rules in conjunction with any Security Group Rule resources. Doing
so will cause a conflict of rule settings and will overwrite rules.
-}
data SecurityGroupRuleResource = SecurityGroupRuleResource {
      _cidr_blocks              :: !(TF.Argument Text)
    {- ^ (Optional) List of CIDR blocks. Cannot be specified with @source_security_group_id@ . -}
    , _description              :: !(TF.Argument Text)
    {- ^ (Optional) Description of the rule. -}
    , _from_port                :: !(TF.Argument TF.Word16)
    {- ^ (Required) The start port (or ICMP type number if protocol is "icmp"). -}
    , _ipv6_cidr_blocks         :: !(TF.Argument Text)
    {- ^ (Optional) List of IPv6 CIDR blocks. -}
    , _prefix_list_ids          :: !(TF.Argument Text)
    {- ^ (Optional) List of prefix list IDs (for allowing access to VPC endpoints). Only valid with @egress@ . -}
    , _protocol                 :: !(TF.Argument Text)
    {- ^ (Required) The protocol. If not icmp, tcp, udp, or all use the <https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml> -}
    , _security_group_id        :: !(TF.Argument Text)
    {- ^ (Required) The security group to apply this rule to. -}
    , _self                     :: !(TF.Argument Text)
    {- ^ (Optional) If true, the security group itself will be added as a source to this ingress rule. -}
    , _source_security_group_id :: !(TF.Argument Text)
    {- ^ (Optional) The security group id to allow access to/from, depending on the @type@ . Cannot be specified with @cidr_blocks@ . -}
    , _to_port                  :: !(TF.Argument TF.Word16)
    {- ^ (Required) The end port (or ICMP code if protocol is "icmp"). -}
    , _type'                    :: !(TF.Argument Text)
    {- ^ (Required) The type of rule being created. Valid options are @ingress@ (inbound) or @egress@ (outbound). -}
    } deriving (Show, Eq)

instance TF.ToHCL SecurityGroupRuleResource where
    toHCL SecurityGroupRuleResource{..} = TF.block $ catMaybes
        [ TF.assign "cidr_blocks" <$> TF.argument _cidr_blocks
        , TF.assign "description" <$> TF.argument _description
        , TF.assign "from_port" <$> TF.argument _from_port
        , TF.assign "ipv6_cidr_blocks" <$> TF.argument _ipv6_cidr_blocks
        , TF.assign "prefix_list_ids" <$> TF.argument _prefix_list_ids
        , TF.assign "protocol" <$> TF.argument _protocol
        , TF.assign "security_group_id" <$> TF.argument _security_group_id
        , TF.assign "self" <$> TF.argument _self
        , TF.assign "source_security_group_id" <$> TF.argument _source_security_group_id
        , TF.assign "to_port" <$> TF.argument _to_port
        , TF.assign "type" <$> TF.argument _type'
        ]

instance HasCidrBlocks SecurityGroupRuleResource (TF.Argument Text) where
    cidrBlocks f s@SecurityGroupRuleResource{..} =
        (\a -> s { _cidr_blocks = a } :: SecurityGroupRuleResource)
             <$> f _cidr_blocks

instance HasDescription SecurityGroupRuleResource (TF.Argument Text) where
    description f s@SecurityGroupRuleResource{..} =
        (\a -> s { _description = a } :: SecurityGroupRuleResource)
             <$> f _description

instance HasFromPort SecurityGroupRuleResource (TF.Argument TF.Word16) where
    fromPort f s@SecurityGroupRuleResource{..} =
        (\a -> s { _from_port = a } :: SecurityGroupRuleResource)
             <$> f _from_port

instance HasIpv6CidrBlocks SecurityGroupRuleResource (TF.Argument Text) where
    ipv6CidrBlocks f s@SecurityGroupRuleResource{..} =
        (\a -> s { _ipv6_cidr_blocks = a } :: SecurityGroupRuleResource)
             <$> f _ipv6_cidr_blocks

instance HasPrefixListIds SecurityGroupRuleResource (TF.Argument Text) where
    prefixListIds f s@SecurityGroupRuleResource{..} =
        (\a -> s { _prefix_list_ids = a } :: SecurityGroupRuleResource)
             <$> f _prefix_list_ids

instance HasProtocol SecurityGroupRuleResource (TF.Argument Text) where
    protocol f s@SecurityGroupRuleResource{..} =
        (\a -> s { _protocol = a } :: SecurityGroupRuleResource)
             <$> f _protocol

instance HasSecurityGroupId SecurityGroupRuleResource (TF.Argument Text) where
    securityGroupId f s@SecurityGroupRuleResource{..} =
        (\a -> s { _security_group_id = a } :: SecurityGroupRuleResource)
             <$> f _security_group_id

instance HasSelf SecurityGroupRuleResource (TF.Argument Text) where
    self f s@SecurityGroupRuleResource{..} =
        (\a -> s { _self = a } :: SecurityGroupRuleResource)
             <$> f _self

instance HasSourceSecurityGroupId SecurityGroupRuleResource (TF.Argument Text) where
    sourceSecurityGroupId f s@SecurityGroupRuleResource{..} =
        (\a -> s { _source_security_group_id = a } :: SecurityGroupRuleResource)
             <$> f _source_security_group_id

instance HasToPort SecurityGroupRuleResource (TF.Argument TF.Word16) where
    toPort f s@SecurityGroupRuleResource{..} =
        (\a -> s { _to_port = a } :: SecurityGroupRuleResource)
             <$> f _to_port

instance HasType' SecurityGroupRuleResource (TF.Argument Text) where
    type' f s@SecurityGroupRuleResource{..} =
        (\a -> s { _type' = a } :: SecurityGroupRuleResource)
             <$> f _type'

securityGroupRuleResource :: TF.Resource TF.AWS SecurityGroupRuleResource
securityGroupRuleResource =
    TF.newResource "aws_security_group_rule" $
        SecurityGroupRuleResource {
            _cidr_blocks = TF.Nil
            , _description = TF.Nil
            , _from_port = TF.Nil
            , _ipv6_cidr_blocks = TF.Nil
            , _prefix_list_ids = TF.Nil
            , _protocol = TF.Nil
            , _security_group_id = TF.Nil
            , _self = TF.Nil
            , _source_security_group_id = TF.Nil
            , _to_port = TF.Nil
            , _type' = TF.Nil
            }

{- | The @aws_service_discovery_private_dns_namespace@ AWS resource.

Provides a Service Discovery Private DNS Namespace resource.
-}
data ServiceDiscoveryPrivateDnsNamespaceResource = ServiceDiscoveryPrivateDnsNamespaceResource {
      _description          :: !(TF.Argument Text)
    {- ^ (Optional) The description that you specify for the namespace when you create it. -}
    , _name                 :: !(TF.Argument Text)
    {- ^ (Required) The name of the namespace. -}
    , _vpc                  :: !(TF.Argument Text)
    {- ^ (Required) The ID of VPC that you want to associate the namespace with. -}
    , _computed_arn         :: !(TF.Attribute Text)
    {- ^ - The ARN that Amazon Route 53 assigns to the namespace when you create it. -}
    , _computed_hosted_zone :: !(TF.Attribute Text)
    {- ^ - The ID for the hosted zone that Amazon Route 53 creates when you create a namespace. -}
    , _computed_id          :: !(TF.Attribute Text)
    {- ^ - The ID of a namespace. -}
    } deriving (Show, Eq)

instance TF.ToHCL ServiceDiscoveryPrivateDnsNamespaceResource where
    toHCL ServiceDiscoveryPrivateDnsNamespaceResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.argument _description
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "vpc" <$> TF.argument _vpc
        ]

instance HasDescription ServiceDiscoveryPrivateDnsNamespaceResource (TF.Argument Text) where
    description f s@ServiceDiscoveryPrivateDnsNamespaceResource{..} =
        (\a -> s { _description = a } :: ServiceDiscoveryPrivateDnsNamespaceResource)
             <$> f _description

instance HasName ServiceDiscoveryPrivateDnsNamespaceResource (TF.Argument Text) where
    name f s@ServiceDiscoveryPrivateDnsNamespaceResource{..} =
        (\a -> s { _name = a } :: ServiceDiscoveryPrivateDnsNamespaceResource)
             <$> f _name

instance HasVpc ServiceDiscoveryPrivateDnsNamespaceResource (TF.Argument Text) where
    vpc f s@ServiceDiscoveryPrivateDnsNamespaceResource{..} =
        (\a -> s { _vpc = a } :: ServiceDiscoveryPrivateDnsNamespaceResource)
             <$> f _vpc

instance HasComputedArn ServiceDiscoveryPrivateDnsNamespaceResource (TF.Attribute Text) where
    computedArn f s@ServiceDiscoveryPrivateDnsNamespaceResource{..} =
        (\a -> s { _computed_arn = a } :: ServiceDiscoveryPrivateDnsNamespaceResource)
             <$> f _computed_arn

instance HasComputedHostedZone ServiceDiscoveryPrivateDnsNamespaceResource (TF.Attribute Text) where
    computedHostedZone f s@ServiceDiscoveryPrivateDnsNamespaceResource{..} =
        (\a -> s { _computed_hosted_zone = a } :: ServiceDiscoveryPrivateDnsNamespaceResource)
             <$> f _computed_hosted_zone

instance HasComputedId ServiceDiscoveryPrivateDnsNamespaceResource (TF.Attribute Text) where
    computedId f s@ServiceDiscoveryPrivateDnsNamespaceResource{..} =
        (\a -> s { _computed_id = a } :: ServiceDiscoveryPrivateDnsNamespaceResource)
             <$> f _computed_id

serviceDiscoveryPrivateDnsNamespaceResource :: TF.Resource TF.AWS ServiceDiscoveryPrivateDnsNamespaceResource
serviceDiscoveryPrivateDnsNamespaceResource =
    TF.newResource "aws_service_discovery_private_dns_namespace" $
        ServiceDiscoveryPrivateDnsNamespaceResource {
            _description = TF.Nil
            , _name = TF.Nil
            , _vpc = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_hosted_zone = TF.Compute "hosted_zone"
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_service_discovery_public_dns_namespace@ AWS resource.

Provides a Service Discovery Public DNS Namespace resource.
-}
data ServiceDiscoveryPublicDnsNamespaceResource = ServiceDiscoveryPublicDnsNamespaceResource {
      _description          :: !(TF.Argument Text)
    {- ^ (Optional) The description that you specify for the namespace when you create it. -}
    , _name                 :: !(TF.Argument Text)
    {- ^ (Required) The name of the namespace. -}
    , _computed_arn         :: !(TF.Attribute Text)
    {- ^ - The ARN that Amazon Route 53 assigns to the namespace when you create it. -}
    , _computed_hosted_zone :: !(TF.Attribute Text)
    {- ^ - The ID for the hosted zone that Amazon Route 53 creates when you create a namespace. -}
    , _computed_id          :: !(TF.Attribute Text)
    {- ^ - The ID of a namespace. -}
    } deriving (Show, Eq)

instance TF.ToHCL ServiceDiscoveryPublicDnsNamespaceResource where
    toHCL ServiceDiscoveryPublicDnsNamespaceResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.argument _description
        , TF.assign "name" <$> TF.argument _name
        ]

instance HasDescription ServiceDiscoveryPublicDnsNamespaceResource (TF.Argument Text) where
    description f s@ServiceDiscoveryPublicDnsNamespaceResource{..} =
        (\a -> s { _description = a } :: ServiceDiscoveryPublicDnsNamespaceResource)
             <$> f _description

instance HasName ServiceDiscoveryPublicDnsNamespaceResource (TF.Argument Text) where
    name f s@ServiceDiscoveryPublicDnsNamespaceResource{..} =
        (\a -> s { _name = a } :: ServiceDiscoveryPublicDnsNamespaceResource)
             <$> f _name

instance HasComputedArn ServiceDiscoveryPublicDnsNamespaceResource (TF.Attribute Text) where
    computedArn f s@ServiceDiscoveryPublicDnsNamespaceResource{..} =
        (\a -> s { _computed_arn = a } :: ServiceDiscoveryPublicDnsNamespaceResource)
             <$> f _computed_arn

instance HasComputedHostedZone ServiceDiscoveryPublicDnsNamespaceResource (TF.Attribute Text) where
    computedHostedZone f s@ServiceDiscoveryPublicDnsNamespaceResource{..} =
        (\a -> s { _computed_hosted_zone = a } :: ServiceDiscoveryPublicDnsNamespaceResource)
             <$> f _computed_hosted_zone

instance HasComputedId ServiceDiscoveryPublicDnsNamespaceResource (TF.Attribute Text) where
    computedId f s@ServiceDiscoveryPublicDnsNamespaceResource{..} =
        (\a -> s { _computed_id = a } :: ServiceDiscoveryPublicDnsNamespaceResource)
             <$> f _computed_id

serviceDiscoveryPublicDnsNamespaceResource :: TF.Resource TF.AWS ServiceDiscoveryPublicDnsNamespaceResource
serviceDiscoveryPublicDnsNamespaceResource =
    TF.newResource "aws_service_discovery_public_dns_namespace" $
        ServiceDiscoveryPublicDnsNamespaceResource {
            _description = TF.Nil
            , _name = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_hosted_zone = TF.Compute "hosted_zone"
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_service_discovery_service@ AWS resource.

Provides a Service Discovery Service resource.
-}
data ServiceDiscoveryServiceResource = ServiceDiscoveryServiceResource {
      _description         :: !(TF.Argument Text)
    {- ^ (Optional) The description of the service. -}
    , _dns_config          :: !(TF.Argument Text)
    {- ^ (Required) A complex type that contains information about the resource record sets that you want Amazon Route 53 to create when you register an instance. -}
    , _health_check_config :: !(TF.Argument Text)
    {- ^ (Optional) A complex type that contains settings for an optional health check. Only for Public DNS namespaces. -}
    , _name                :: !(TF.Argument Text)
    {- ^ (Required, ForceNew) The name of the service. -}
    } deriving (Show, Eq)

instance TF.ToHCL ServiceDiscoveryServiceResource where
    toHCL ServiceDiscoveryServiceResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.argument _description
        , TF.assign "dns_config" <$> TF.argument _dns_config
        , TF.assign "health_check_config" <$> TF.argument _health_check_config
        , TF.assign "name" <$> TF.argument _name
        ]

instance HasDescription ServiceDiscoveryServiceResource (TF.Argument Text) where
    description f s@ServiceDiscoveryServiceResource{..} =
        (\a -> s { _description = a } :: ServiceDiscoveryServiceResource)
             <$> f _description

instance HasDnsConfig ServiceDiscoveryServiceResource (TF.Argument Text) where
    dnsConfig f s@ServiceDiscoveryServiceResource{..} =
        (\a -> s { _dns_config = a } :: ServiceDiscoveryServiceResource)
             <$> f _dns_config

instance HasHealthCheckConfig ServiceDiscoveryServiceResource (TF.Argument Text) where
    healthCheckConfig f s@ServiceDiscoveryServiceResource{..} =
        (\a -> s { _health_check_config = a } :: ServiceDiscoveryServiceResource)
             <$> f _health_check_config

instance HasName ServiceDiscoveryServiceResource (TF.Argument Text) where
    name f s@ServiceDiscoveryServiceResource{..} =
        (\a -> s { _name = a } :: ServiceDiscoveryServiceResource)
             <$> f _name

serviceDiscoveryServiceResource :: TF.Resource TF.AWS ServiceDiscoveryServiceResource
serviceDiscoveryServiceResource =
    TF.newResource "aws_service_discovery_service" $
        ServiceDiscoveryServiceResource {
            _description = TF.Nil
            , _dns_config = TF.Nil
            , _health_check_config = TF.Nil
            , _name = TF.Nil
            }

{- | The @aws_servicecatalog_portfolio@ AWS resource.

Provides a resource to create a Service Catalog Portfolio.
-}
data ServicecatalogPortfolioResource = ServicecatalogPortfolioResource {
      _description   :: !(TF.Argument Text)
    {- ^ (Required) Description of the portfolio -}
    , _name          :: !(TF.Argument Text)
    {- ^ (Required) The name of the portfolio. -}
    , _provider_name :: !(TF.Argument Text)
    {- ^ (Required) Name of the person or organization who owns the portfolio. -}
    , _tags          :: !(TF.Argument TF.Tags)
    {- ^ (Optional) Tags to apply to the connection. -}
    , _computed_id   :: !(TF.Attribute Text)
    {- ^ - The ID of the Service Catalog Portfolio. -}
    } deriving (Show, Eq)

instance TF.ToHCL ServicecatalogPortfolioResource where
    toHCL ServicecatalogPortfolioResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.argument _description
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "provider_name" <$> TF.argument _provider_name
        , TF.assign "tags" <$> TF.argument _tags
        ]

instance HasDescription ServicecatalogPortfolioResource (TF.Argument Text) where
    description f s@ServicecatalogPortfolioResource{..} =
        (\a -> s { _description = a } :: ServicecatalogPortfolioResource)
             <$> f _description

instance HasName ServicecatalogPortfolioResource (TF.Argument Text) where
    name f s@ServicecatalogPortfolioResource{..} =
        (\a -> s { _name = a } :: ServicecatalogPortfolioResource)
             <$> f _name

instance HasProviderName ServicecatalogPortfolioResource (TF.Argument Text) where
    providerName f s@ServicecatalogPortfolioResource{..} =
        (\a -> s { _provider_name = a } :: ServicecatalogPortfolioResource)
             <$> f _provider_name

instance HasTags ServicecatalogPortfolioResource (TF.Argument TF.Tags) where
    tags f s@ServicecatalogPortfolioResource{..} =
        (\a -> s { _tags = a } :: ServicecatalogPortfolioResource)
             <$> f _tags

instance HasComputedId ServicecatalogPortfolioResource (TF.Attribute Text) where
    computedId f s@ServicecatalogPortfolioResource{..} =
        (\a -> s { _computed_id = a } :: ServicecatalogPortfolioResource)
             <$> f _computed_id

servicecatalogPortfolioResource :: TF.Resource TF.AWS ServicecatalogPortfolioResource
servicecatalogPortfolioResource =
    TF.newResource "aws_servicecatalog_portfolio" $
        ServicecatalogPortfolioResource {
            _description = TF.Nil
            , _name = TF.Nil
            , _provider_name = TF.Nil
            , _tags = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_ses_active_receipt_rule_set@ AWS resource.

Provides a resource to designate the active SES receipt rule set
-}
data SesActiveReceiptRuleSetResource = SesActiveReceiptRuleSetResource {
      _rule_set_name :: !(TF.Argument Text)
    {- ^ (Required) The name of the rule set -}
    } deriving (Show, Eq)

instance TF.ToHCL SesActiveReceiptRuleSetResource where
    toHCL SesActiveReceiptRuleSetResource{..} = TF.block $ catMaybes
        [ TF.assign "rule_set_name" <$> TF.argument _rule_set_name
        ]

instance HasRuleSetName SesActiveReceiptRuleSetResource (TF.Argument Text) where
    ruleSetName f s@SesActiveReceiptRuleSetResource{..} =
        (\a -> s { _rule_set_name = a } :: SesActiveReceiptRuleSetResource)
             <$> f _rule_set_name

sesActiveReceiptRuleSetResource :: TF.Resource TF.AWS SesActiveReceiptRuleSetResource
sesActiveReceiptRuleSetResource =
    TF.newResource "aws_ses_active_receipt_rule_set" $
        SesActiveReceiptRuleSetResource {
            _rule_set_name = TF.Nil
            }

{- | The @aws_ses_configuration_set@ AWS resource.

Provides an SES configuration set resource
-}
data SesConfigurationSetResource = SesConfigurationSetResource {
      _name :: !(TF.Argument Text)
    {- ^ (Required) The name of the configuration set -}
    } deriving (Show, Eq)

instance TF.ToHCL SesConfigurationSetResource where
    toHCL SesConfigurationSetResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.argument _name
        ]

instance HasName SesConfigurationSetResource (TF.Argument Text) where
    name f s@SesConfigurationSetResource{..} =
        (\a -> s { _name = a } :: SesConfigurationSetResource)
             <$> f _name

sesConfigurationSetResource :: TF.Resource TF.AWS SesConfigurationSetResource
sesConfigurationSetResource =
    TF.newResource "aws_ses_configuration_set" $
        SesConfigurationSetResource {
            _name = TF.Nil
            }

{- | The @aws_ses_domain_dkim@ AWS resource.

Provides an SES domain DKIM generation resource. Domain ownership needs to
be confirmed first using </docs/providers/aws/r/ses_domain_identity.html>
-}
data SesDomainDkimResource = SesDomainDkimResource {
      _domain               :: !(TF.Argument Text)
    {- ^ (Required) Verified domain name to generate DKIM tokens for. -}
    , _computed_dkim_tokens :: !(TF.Attribute Text)
    {- ^ - DKIM tokens generated by SES. These tokens should be used to create CNAME records used to verify SES Easy DKIM. See below for an example of how this might be achieved when the domain is hosted in Route 53 and managed by Terraform. Find out more about verifying domains in Amazon SES in the <http://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html> . -}
    } deriving (Show, Eq)

instance TF.ToHCL SesDomainDkimResource where
    toHCL SesDomainDkimResource{..} = TF.block $ catMaybes
        [ TF.assign "domain" <$> TF.argument _domain
        ]

instance HasDomain SesDomainDkimResource (TF.Argument Text) where
    domain f s@SesDomainDkimResource{..} =
        (\a -> s { _domain = a } :: SesDomainDkimResource)
             <$> f _domain

instance HasComputedDkimTokens SesDomainDkimResource (TF.Attribute Text) where
    computedDkimTokens f s@SesDomainDkimResource{..} =
        (\a -> s { _computed_dkim_tokens = a } :: SesDomainDkimResource)
             <$> f _computed_dkim_tokens

sesDomainDkimResource :: TF.Resource TF.AWS SesDomainDkimResource
sesDomainDkimResource =
    TF.newResource "aws_ses_domain_dkim" $
        SesDomainDkimResource {
            _domain = TF.Nil
            , _computed_dkim_tokens = TF.Compute "dkim_tokens"
            }

{- | The @aws_ses_domain_identity@ AWS resource.

Provides an SES domain identity resource
-}
data SesDomainIdentityResource = SesDomainIdentityResource {
      _domain                      :: !(TF.Argument Text)
    {- ^ (Required) The domain name to assign to SES -}
    , _computed_arn                :: !(TF.Attribute Text)
    {- ^ - The ARN of the domain identity. -}
    , _computed_verification_token :: !(TF.Attribute Text)
    {- ^ - A code which when added to the domain as a TXT record will signal to SES that the owner of the domain has authorised SES to act on their behalf. The domain identity will be in state "verification pending" until this is done. See below for an example of how this might be achieved when the domain is hosted in Route 53 and managed by Terraform.  Find out more about verifying domains in Amazon SES in the <http://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html> . -}
    } deriving (Show, Eq)

instance TF.ToHCL SesDomainIdentityResource where
    toHCL SesDomainIdentityResource{..} = TF.block $ catMaybes
        [ TF.assign "domain" <$> TF.argument _domain
        ]

instance HasDomain SesDomainIdentityResource (TF.Argument Text) where
    domain f s@SesDomainIdentityResource{..} =
        (\a -> s { _domain = a } :: SesDomainIdentityResource)
             <$> f _domain

instance HasComputedArn SesDomainIdentityResource (TF.Attribute Text) where
    computedArn f s@SesDomainIdentityResource{..} =
        (\a -> s { _computed_arn = a } :: SesDomainIdentityResource)
             <$> f _computed_arn

instance HasComputedVerificationToken SesDomainIdentityResource (TF.Attribute Text) where
    computedVerificationToken f s@SesDomainIdentityResource{..} =
        (\a -> s { _computed_verification_token = a } :: SesDomainIdentityResource)
             <$> f _computed_verification_token

sesDomainIdentityResource :: TF.Resource TF.AWS SesDomainIdentityResource
sesDomainIdentityResource =
    TF.newResource "aws_ses_domain_identity" $
        SesDomainIdentityResource {
            _domain = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_verification_token = TF.Compute "verification_token"
            }

{- | The @aws_ses_event_destination@ AWS resource.

Provides an SES event destination
-}
data SesEventDestinationResource = SesEventDestinationResource {
      _cloudwatch_destination :: !(TF.Argument Text)
    {- ^ (Optional) CloudWatch destination for the events -}
    , _configuration_set_name :: !(TF.Argument Text)
    {- ^ (Required) The name of the configuration set -}
    , _enabled                :: !(TF.Argument TF.Bool)
    {- ^ (Optional) If true, the event destination will be enabled -}
    , _kinesis_destination    :: !(TF.Argument Text)
    {- ^ (Optional) Send the events to a kinesis firehose destination -}
    , _matching_types         :: !(TF.Argument Text)
    {- ^ (Required) A list of matching types. May be any of @"send"@ , @"reject"@ , @"bounce"@ , @"complaint"@ , @"delivery"@ , @"open"@ , or @"click"@ . -}
    , _name                   :: !(TF.Argument Text)
    {- ^ (Required) The name of the event destination -}
    , _sns_destination        :: !(TF.Argument Text)
    {- ^ (Optional) Send the events to an SNS Topic destination -}
    } deriving (Show, Eq)

instance TF.ToHCL SesEventDestinationResource where
    toHCL SesEventDestinationResource{..} = TF.block $ catMaybes
        [ TF.assign "cloudwatch_destination" <$> TF.argument _cloudwatch_destination
        , TF.assign "configuration_set_name" <$> TF.argument _configuration_set_name
        , TF.assign "enabled" <$> TF.argument _enabled
        , TF.assign "kinesis_destination" <$> TF.argument _kinesis_destination
        , TF.assign "matching_types" <$> TF.argument _matching_types
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "sns_destination" <$> TF.argument _sns_destination
        ]

instance HasCloudwatchDestination SesEventDestinationResource (TF.Argument Text) where
    cloudwatchDestination f s@SesEventDestinationResource{..} =
        (\a -> s { _cloudwatch_destination = a } :: SesEventDestinationResource)
             <$> f _cloudwatch_destination

instance HasConfigurationSetName SesEventDestinationResource (TF.Argument Text) where
    configurationSetName f s@SesEventDestinationResource{..} =
        (\a -> s { _configuration_set_name = a } :: SesEventDestinationResource)
             <$> f _configuration_set_name

instance HasEnabled SesEventDestinationResource (TF.Argument TF.Bool) where
    enabled f s@SesEventDestinationResource{..} =
        (\a -> s { _enabled = a } :: SesEventDestinationResource)
             <$> f _enabled

instance HasKinesisDestination SesEventDestinationResource (TF.Argument Text) where
    kinesisDestination f s@SesEventDestinationResource{..} =
        (\a -> s { _kinesis_destination = a } :: SesEventDestinationResource)
             <$> f _kinesis_destination

instance HasMatchingTypes SesEventDestinationResource (TF.Argument Text) where
    matchingTypes f s@SesEventDestinationResource{..} =
        (\a -> s { _matching_types = a } :: SesEventDestinationResource)
             <$> f _matching_types

instance HasName SesEventDestinationResource (TF.Argument Text) where
    name f s@SesEventDestinationResource{..} =
        (\a -> s { _name = a } :: SesEventDestinationResource)
             <$> f _name

instance HasSnsDestination SesEventDestinationResource (TF.Argument Text) where
    snsDestination f s@SesEventDestinationResource{..} =
        (\a -> s { _sns_destination = a } :: SesEventDestinationResource)
             <$> f _sns_destination

sesEventDestinationResource :: TF.Resource TF.AWS SesEventDestinationResource
sesEventDestinationResource =
    TF.newResource "aws_ses_event_destination" $
        SesEventDestinationResource {
            _cloudwatch_destination = TF.Nil
            , _configuration_set_name = TF.Nil
            , _enabled = TF.Nil
            , _kinesis_destination = TF.Nil
            , _matching_types = TF.Nil
            , _name = TF.Nil
            , _sns_destination = TF.Nil
            }

{- | The @aws_ses_receipt_filter@ AWS resource.

Provides an SES receipt filter resource
-}
data SesReceiptFilterResource = SesReceiptFilterResource {
      _cidr   :: !(TF.Argument Text)
    {- ^ (Required) The IP address or address range to filter, in CIDR notation -}
    , _name   :: !(TF.Argument Text)
    {- ^ (Required) The name of the filter -}
    , _policy :: !(TF.Argument Text)
    {- ^ (Required) Block or Allow -}
    } deriving (Show, Eq)

instance TF.ToHCL SesReceiptFilterResource where
    toHCL SesReceiptFilterResource{..} = TF.block $ catMaybes
        [ TF.assign "cidr" <$> TF.argument _cidr
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "policy" <$> TF.argument _policy
        ]

instance HasCidr SesReceiptFilterResource (TF.Argument Text) where
    cidr f s@SesReceiptFilterResource{..} =
        (\a -> s { _cidr = a } :: SesReceiptFilterResource)
             <$> f _cidr

instance HasName SesReceiptFilterResource (TF.Argument Text) where
    name f s@SesReceiptFilterResource{..} =
        (\a -> s { _name = a } :: SesReceiptFilterResource)
             <$> f _name

instance HasPolicy SesReceiptFilterResource (TF.Argument Text) where
    policy f s@SesReceiptFilterResource{..} =
        (\a -> s { _policy = a } :: SesReceiptFilterResource)
             <$> f _policy

sesReceiptFilterResource :: TF.Resource TF.AWS SesReceiptFilterResource
sesReceiptFilterResource =
    TF.newResource "aws_ses_receipt_filter" $
        SesReceiptFilterResource {
            _cidr = TF.Nil
            , _name = TF.Nil
            , _policy = TF.Nil
            }

{- | The @aws_ses_receipt_rule@ AWS resource.

Provides an SES receipt rule resource
-}
data SesReceiptRuleResource = SesReceiptRuleResource {
      _add_header_action :: !(TF.Argument Text)
    {- ^ (Optional) A list of Add Header Action blocks. Documented below. -}
    , _after             :: !(TF.Argument Text)
    {- ^ (Optional) The name of the rule to place this rule after -}
    , _bounce_action     :: !(TF.Argument Text)
    {- ^ (Optional) A list of Bounce Action blocks. Documented below. -}
    , _enabled           :: !(TF.Argument TF.Bool)
    {- ^ (Optional) If true, the rule will be enabled -}
    , _lambda_action     :: !(TF.Argument Text)
    {- ^ (Optional) A list of Lambda Action blocks. Documented below. -}
    , _name              :: !(TF.Argument Text)
    {- ^ (Required) The name of the rule -}
    , _recipients        :: !(TF.Argument Text)
    {- ^ (Optional) A list of email addresses -}
    , _rule_set_name     :: !(TF.Argument Text)
    {- ^ (Required) The name of the rule set -}
    , _s3_action         :: !(TF.Argument Text)
    {- ^ (Optional) A list of S3 Action blocks. Documented below. -}
    , _scan_enabled      :: !(TF.Argument TF.Bool)
    {- ^ (Optional) If true, incoming emails will be scanned for spam and viruses -}
    , _sns_action        :: !(TF.Argument Text)
    {- ^ (Optional) A list of SNS Action blocks. Documented below. -}
    , _stop_action       :: !(TF.Argument Text)
    {- ^ (Optional) A list of Stop Action blocks. Documented below. -}
    , _tls_policy        :: !(TF.Argument Text)
    {- ^ (Optional) Require or Optional -}
    , _workmail_action   :: !(TF.Argument Text)
    {- ^ (Optional) A list of WorkMail Action blocks. Documented below. -}
    } deriving (Show, Eq)

instance TF.ToHCL SesReceiptRuleResource where
    toHCL SesReceiptRuleResource{..} = TF.block $ catMaybes
        [ TF.assign "add_header_action" <$> TF.argument _add_header_action
        , TF.assign "after" <$> TF.argument _after
        , TF.assign "bounce_action" <$> TF.argument _bounce_action
        , TF.assign "enabled" <$> TF.argument _enabled
        , TF.assign "lambda_action" <$> TF.argument _lambda_action
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "recipients" <$> TF.argument _recipients
        , TF.assign "rule_set_name" <$> TF.argument _rule_set_name
        , TF.assign "s3_action" <$> TF.argument _s3_action
        , TF.assign "scan_enabled" <$> TF.argument _scan_enabled
        , TF.assign "sns_action" <$> TF.argument _sns_action
        , TF.assign "stop_action" <$> TF.argument _stop_action
        , TF.assign "tls_policy" <$> TF.argument _tls_policy
        , TF.assign "workmail_action" <$> TF.argument _workmail_action
        ]

instance HasAddHeaderAction SesReceiptRuleResource (TF.Argument Text) where
    addHeaderAction f s@SesReceiptRuleResource{..} =
        (\a -> s { _add_header_action = a } :: SesReceiptRuleResource)
             <$> f _add_header_action

instance HasAfter SesReceiptRuleResource (TF.Argument Text) where
    after f s@SesReceiptRuleResource{..} =
        (\a -> s { _after = a } :: SesReceiptRuleResource)
             <$> f _after

instance HasBounceAction SesReceiptRuleResource (TF.Argument Text) where
    bounceAction f s@SesReceiptRuleResource{..} =
        (\a -> s { _bounce_action = a } :: SesReceiptRuleResource)
             <$> f _bounce_action

instance HasEnabled SesReceiptRuleResource (TF.Argument TF.Bool) where
    enabled f s@SesReceiptRuleResource{..} =
        (\a -> s { _enabled = a } :: SesReceiptRuleResource)
             <$> f _enabled

instance HasLambdaAction SesReceiptRuleResource (TF.Argument Text) where
    lambdaAction f s@SesReceiptRuleResource{..} =
        (\a -> s { _lambda_action = a } :: SesReceiptRuleResource)
             <$> f _lambda_action

instance HasName SesReceiptRuleResource (TF.Argument Text) where
    name f s@SesReceiptRuleResource{..} =
        (\a -> s { _name = a } :: SesReceiptRuleResource)
             <$> f _name

instance HasRecipients SesReceiptRuleResource (TF.Argument Text) where
    recipients f s@SesReceiptRuleResource{..} =
        (\a -> s { _recipients = a } :: SesReceiptRuleResource)
             <$> f _recipients

instance HasRuleSetName SesReceiptRuleResource (TF.Argument Text) where
    ruleSetName f s@SesReceiptRuleResource{..} =
        (\a -> s { _rule_set_name = a } :: SesReceiptRuleResource)
             <$> f _rule_set_name

instance HasS3Action SesReceiptRuleResource (TF.Argument Text) where
    s3Action f s@SesReceiptRuleResource{..} =
        (\a -> s { _s3_action = a } :: SesReceiptRuleResource)
             <$> f _s3_action

instance HasScanEnabled SesReceiptRuleResource (TF.Argument TF.Bool) where
    scanEnabled f s@SesReceiptRuleResource{..} =
        (\a -> s { _scan_enabled = a } :: SesReceiptRuleResource)
             <$> f _scan_enabled

instance HasSnsAction SesReceiptRuleResource (TF.Argument Text) where
    snsAction f s@SesReceiptRuleResource{..} =
        (\a -> s { _sns_action = a } :: SesReceiptRuleResource)
             <$> f _sns_action

instance HasStopAction SesReceiptRuleResource (TF.Argument Text) where
    stopAction f s@SesReceiptRuleResource{..} =
        (\a -> s { _stop_action = a } :: SesReceiptRuleResource)
             <$> f _stop_action

instance HasTlsPolicy SesReceiptRuleResource (TF.Argument Text) where
    tlsPolicy f s@SesReceiptRuleResource{..} =
        (\a -> s { _tls_policy = a } :: SesReceiptRuleResource)
             <$> f _tls_policy

instance HasWorkmailAction SesReceiptRuleResource (TF.Argument Text) where
    workmailAction f s@SesReceiptRuleResource{..} =
        (\a -> s { _workmail_action = a } :: SesReceiptRuleResource)
             <$> f _workmail_action

sesReceiptRuleResource :: TF.Resource TF.AWS SesReceiptRuleResource
sesReceiptRuleResource =
    TF.newResource "aws_ses_receipt_rule" $
        SesReceiptRuleResource {
            _add_header_action = TF.Nil
            , _after = TF.Nil
            , _bounce_action = TF.Nil
            , _enabled = TF.Nil
            , _lambda_action = TF.Nil
            , _name = TF.Nil
            , _recipients = TF.Nil
            , _rule_set_name = TF.Nil
            , _s3_action = TF.Nil
            , _scan_enabled = TF.Nil
            , _sns_action = TF.Nil
            , _stop_action = TF.Nil
            , _tls_policy = TF.Nil
            , _workmail_action = TF.Nil
            }

{- | The @aws_ses_receipt_rule_set@ AWS resource.

Provides an SES receipt rule set resource
-}
data SesReceiptRuleSetResource = SesReceiptRuleSetResource {
      _rule_set_name :: !(TF.Argument Text)
    {- ^ (Required) The name of the rule set -}
    } deriving (Show, Eq)

instance TF.ToHCL SesReceiptRuleSetResource where
    toHCL SesReceiptRuleSetResource{..} = TF.block $ catMaybes
        [ TF.assign "rule_set_name" <$> TF.argument _rule_set_name
        ]

instance HasRuleSetName SesReceiptRuleSetResource (TF.Argument Text) where
    ruleSetName f s@SesReceiptRuleSetResource{..} =
        (\a -> s { _rule_set_name = a } :: SesReceiptRuleSetResource)
             <$> f _rule_set_name

sesReceiptRuleSetResource :: TF.Resource TF.AWS SesReceiptRuleSetResource
sesReceiptRuleSetResource =
    TF.newResource "aws_ses_receipt_rule_set" $
        SesReceiptRuleSetResource {
            _rule_set_name = TF.Nil
            }

{- | The @aws_ses_template@ AWS resource.

Provides a resource to create a SES template.
-}
data SesTemplateResource = SesTemplateResource {
      _html        :: !(TF.Argument Text)
    {- ^ (Optional) The HTML body of the email. Must be less than 500KB in size, including both the text and HTML parts. -}
    , _name        :: !(TF.Argument Text)
    {- ^ (Required) The name of the template. Cannot exceed 64 characters. You will refer to this name when you send email. -}
    , _subject     :: !(TF.Argument Text)
    {- ^ (Optional) The subject line of the email. -}
    , _text        :: !(TF.Argument Text)
    {- ^ (Optional) The email body that will be visible to recipients whose email clients do not display HTML. Must be less than 500KB in size, including both the text and HTML parts. -}
    , _computed_id :: !(TF.Attribute Text)
    {- ^ - The name of the SES template -}
    } deriving (Show, Eq)

instance TF.ToHCL SesTemplateResource where
    toHCL SesTemplateResource{..} = TF.block $ catMaybes
        [ TF.assign "html" <$> TF.argument _html
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "subject" <$> TF.argument _subject
        , TF.assign "text" <$> TF.argument _text
        ]

instance HasHtml SesTemplateResource (TF.Argument Text) where
    html f s@SesTemplateResource{..} =
        (\a -> s { _html = a } :: SesTemplateResource)
             <$> f _html

instance HasName SesTemplateResource (TF.Argument Text) where
    name f s@SesTemplateResource{..} =
        (\a -> s { _name = a } :: SesTemplateResource)
             <$> f _name

instance HasSubject SesTemplateResource (TF.Argument Text) where
    subject f s@SesTemplateResource{..} =
        (\a -> s { _subject = a } :: SesTemplateResource)
             <$> f _subject

instance HasText SesTemplateResource (TF.Argument Text) where
    text f s@SesTemplateResource{..} =
        (\a -> s { _text = a } :: SesTemplateResource)
             <$> f _text

instance HasComputedId SesTemplateResource (TF.Attribute Text) where
    computedId f s@SesTemplateResource{..} =
        (\a -> s { _computed_id = a } :: SesTemplateResource)
             <$> f _computed_id

sesTemplateResource :: TF.Resource TF.AWS SesTemplateResource
sesTemplateResource =
    TF.newResource "aws_ses_template" $
        SesTemplateResource {
            _html = TF.Nil
            , _name = TF.Nil
            , _subject = TF.Nil
            , _text = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_simpledb_domain@ AWS resource.

Provides a SimpleDB domain resource
-}
data SimpledbDomainResource = SimpledbDomainResource {
      _name        :: !(TF.Argument Text)
    {- ^ (Required) The name of the SimpleDB domain -}
    , _computed_id :: !(TF.Attribute Text)
    {- ^ - The name of the SimpleDB domain -}
    } deriving (Show, Eq)

instance TF.ToHCL SimpledbDomainResource where
    toHCL SimpledbDomainResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.argument _name
        ]

instance HasName SimpledbDomainResource (TF.Argument Text) where
    name f s@SimpledbDomainResource{..} =
        (\a -> s { _name = a } :: SimpledbDomainResource)
             <$> f _name

instance HasComputedId SimpledbDomainResource (TF.Attribute Text) where
    computedId f s@SimpledbDomainResource{..} =
        (\a -> s { _computed_id = a } :: SimpledbDomainResource)
             <$> f _computed_id

simpledbDomainResource :: TF.Resource TF.AWS SimpledbDomainResource
simpledbDomainResource =
    TF.newResource "aws_simpledb_domain" $
        SimpledbDomainResource {
            _name = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_snapshot_create_volume_permission@ AWS resource.

Adds permission to create volumes off of a given EBS Snapshot.
-}
data SnapshotCreateVolumePermissionResource = SnapshotCreateVolumePermissionResource {
      _account_id  :: !(TF.Argument Text)
    {- ^ - (required) An AWS Account ID to add create volume permissions -}
    , _snapshot_id :: !(TF.Argument Text)
    {- ^ - (required) A snapshot ID -}
    , _computed_id :: !(TF.Attribute Text)
    {- ^ - A combination of " @snapshot_id@ - @account_id@ ". -}
    } deriving (Show, Eq)

instance TF.ToHCL SnapshotCreateVolumePermissionResource where
    toHCL SnapshotCreateVolumePermissionResource{..} = TF.block $ catMaybes
        [ TF.assign "account_id" <$> TF.argument _account_id
        , TF.assign "snapshot_id" <$> TF.argument _snapshot_id
        ]

instance HasAccountId SnapshotCreateVolumePermissionResource (TF.Argument Text) where
    accountId f s@SnapshotCreateVolumePermissionResource{..} =
        (\a -> s { _account_id = a } :: SnapshotCreateVolumePermissionResource)
             <$> f _account_id

instance HasSnapshotId SnapshotCreateVolumePermissionResource (TF.Argument Text) where
    snapshotId f s@SnapshotCreateVolumePermissionResource{..} =
        (\a -> s { _snapshot_id = a } :: SnapshotCreateVolumePermissionResource)
             <$> f _snapshot_id

instance HasComputedId SnapshotCreateVolumePermissionResource (TF.Attribute Text) where
    computedId f s@SnapshotCreateVolumePermissionResource{..} =
        (\a -> s { _computed_id = a } :: SnapshotCreateVolumePermissionResource)
             <$> f _computed_id

snapshotCreateVolumePermissionResource :: TF.Resource TF.AWS SnapshotCreateVolumePermissionResource
snapshotCreateVolumePermissionResource =
    TF.newResource "aws_snapshot_create_volume_permission" $
        SnapshotCreateVolumePermissionResource {
            _account_id = TF.Nil
            , _snapshot_id = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_sns_topic_policy@ AWS resource.

Provides an SNS topic policy resource ~> NOTE: If a Principal is specified
as just an AWS account ID rather than an ARN, AWS silently converts it to
the ARN for the root user, causing future terraform plans to differ. To
avoid this problem, just specify the full ARN, e.g.
@arn:aws:iam::123456789012:root@
-}
data SnsTopicPolicyResource = SnsTopicPolicyResource {
      _arn    :: !(TF.Argument Text)
    {- ^ (Required) The ARN of the SNS topic -}
    , _policy :: !(TF.Argument Text)
    {- ^ (Required) The fully-formed AWS policy as JSON -}
    } deriving (Show, Eq)

instance TF.ToHCL SnsTopicPolicyResource where
    toHCL SnsTopicPolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "arn" <$> TF.argument _arn
        , TF.assign "policy" <$> TF.argument _policy
        ]

instance HasArn SnsTopicPolicyResource (TF.Argument Text) where
    arn f s@SnsTopicPolicyResource{..} =
        (\a -> s { _arn = a } :: SnsTopicPolicyResource)
             <$> f _arn

instance HasPolicy SnsTopicPolicyResource (TF.Argument Text) where
    policy f s@SnsTopicPolicyResource{..} =
        (\a -> s { _policy = a } :: SnsTopicPolicyResource)
             <$> f _policy

snsTopicPolicyResource :: TF.Resource TF.AWS SnsTopicPolicyResource
snsTopicPolicyResource =
    TF.newResource "aws_sns_topic_policy" $
        SnsTopicPolicyResource {
            _arn = TF.Nil
            , _policy = TF.Nil
            }

{- | The @aws_sns_topic@ AWS resource.

Provides an SNS topic resource
-}
data SnsTopicResource = SnsTopicResource {
      _delivery_policy :: !(TF.Argument Text)
    {- ^ (Optional) The SNS delivery policy -}
    , _display_name    :: !(TF.Argument Text)
    {- ^ (Optional) The display name for the SNS topic -}
    , _name            :: !(TF.Argument Text)
    {- ^ (Required) The friendly name for the SNS topic -}
    , _policy          :: !(TF.Argument Text)
    {- ^ (Optional) The fully-formed AWS policy as JSON -}
    , _computed_arn    :: !(TF.Attribute Text)
    {- ^ - The ARN of the SNS topic, as a more obvious property (clone of id) -}
    , _computed_id     :: !(TF.Attribute Text)
    {- ^ - The ARN of the SNS topic -}
    } deriving (Show, Eq)

instance TF.ToHCL SnsTopicResource where
    toHCL SnsTopicResource{..} = TF.block $ catMaybes
        [ TF.assign "delivery_policy" <$> TF.argument _delivery_policy
        , TF.assign "display_name" <$> TF.argument _display_name
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "policy" <$> TF.argument _policy
        ]

instance HasDeliveryPolicy SnsTopicResource (TF.Argument Text) where
    deliveryPolicy f s@SnsTopicResource{..} =
        (\a -> s { _delivery_policy = a } :: SnsTopicResource)
             <$> f _delivery_policy

instance HasDisplayName SnsTopicResource (TF.Argument Text) where
    displayName f s@SnsTopicResource{..} =
        (\a -> s { _display_name = a } :: SnsTopicResource)
             <$> f _display_name

instance HasName SnsTopicResource (TF.Argument Text) where
    name f s@SnsTopicResource{..} =
        (\a -> s { _name = a } :: SnsTopicResource)
             <$> f _name

instance HasPolicy SnsTopicResource (TF.Argument Text) where
    policy f s@SnsTopicResource{..} =
        (\a -> s { _policy = a } :: SnsTopicResource)
             <$> f _policy

instance HasComputedArn SnsTopicResource (TF.Attribute Text) where
    computedArn f s@SnsTopicResource{..} =
        (\a -> s { _computed_arn = a } :: SnsTopicResource)
             <$> f _computed_arn

instance HasComputedId SnsTopicResource (TF.Attribute Text) where
    computedId f s@SnsTopicResource{..} =
        (\a -> s { _computed_id = a } :: SnsTopicResource)
             <$> f _computed_id

snsTopicResource :: TF.Resource TF.AWS SnsTopicResource
snsTopicResource =
    TF.newResource "aws_sns_topic" $
        SnsTopicResource {
            _delivery_policy = TF.Nil
            , _display_name = TF.Nil
            , _name = TF.Nil
            , _policy = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_sns_topic_subscription@ AWS resource.

Provides a resource for subscribing to SNS topics. Requires that an SNS
topic exist for the subscription to attach to. This resource allows you to
automatically place messages sent to SNS topics in SQS queues, send them as
HTTP(S) POST requests to a given endpoint, send SMS messages, or notify
devices / applications. The most likely use case for Terraform users will
probably be SQS queues. ~> NOTE: If SNS topic and SQS queue are in different
AWS regions it is important to place the "aws_sns_topic_subscription" into
the terraform configuration of the region with the SQS queue. If
"aws_sns_topic_subscription" is placed in the terraform configuration of the
region with the SNS topic terraform will fail to create the subscription. ~>
NOTE: Setup of cross-account subscriptions from SNS topics to SQS queues
requires Terraform to have access to BOTH accounts. ~> NOTE: If SNS topic
and SQS queue are in different AWS accounts but the same region it is
important to place the "aws_sns_topic_subscription" into the terraform
configuration of the account with the SQS queue. If
"aws_sns_topic_subscription" is placed in the terraform configuration of the
account with the SNS topic terraform creates the subscriptions but does not
keep state and tries to re-create the subscription at every apply. ~> NOTE:
If SNS topic and SQS queue are in different AWS accounts and different AWS
regions it is important to recognize that the subscription needs to be
initiated from the account with the SQS queue but in the region of the SNS
topic.
-}
data SnsTopicSubscriptionResource = SnsTopicSubscriptionResource {
      _confirmation_timeout_in_minutes :: !(TF.Argument Text)
    {- ^ (Optional) Integer indicating number of minutes to wait in retying mode for fetching subscription arn before marking it as failure. Only applicable for http and https protocols (default is 1 minute). -}
    , _endpoint                        :: !(TF.Argument Text)
    {- ^ (Required) The endpoint to send data to, the contents will vary with the protocol. (see below for more information) -}
    , _endpoint_auto_confirms          :: !(TF.Argument Text)
    {- ^ (Optional) Boolean indicating whether the end point is capable of <http://docs.aws.amazon.com/sns/latest/dg/SendMessageToHttp.html#SendMessageToHttp.prepare> e.g., PagerDuty (default is false) -}
    , _protocol                        :: !(TF.Argument Text)
    {- ^ (Required) The protocol to use. The possible values for this are: @sqs@ , @sms@ , @lambda@ , @application@ . ( @http@ or @https@ are partially supported, see below) ( @email@ is option but unsupported, see below). -}
    , _raw_message_delivery            :: !(TF.Argument Text)
    {- ^ (Optional) Boolean indicating whether or not to enable raw message delivery (the original message is directly passed, not wrapped in JSON with the original message in the message property) (default is false). -}
    , _topic_arn                       :: !(TF.Argument Text)
    {- ^ (Required) The ARN of the SNS topic to subscribe to -}
    } deriving (Show, Eq)

instance TF.ToHCL SnsTopicSubscriptionResource where
    toHCL SnsTopicSubscriptionResource{..} = TF.block $ catMaybes
        [ TF.assign "confirmation_timeout_in_minutes" <$> TF.argument _confirmation_timeout_in_minutes
        , TF.assign "endpoint" <$> TF.argument _endpoint
        , TF.assign "endpoint_auto_confirms" <$> TF.argument _endpoint_auto_confirms
        , TF.assign "protocol" <$> TF.argument _protocol
        , TF.assign "raw_message_delivery" <$> TF.argument _raw_message_delivery
        , TF.assign "topic_arn" <$> TF.argument _topic_arn
        ]

instance HasConfirmationTimeoutInMinutes SnsTopicSubscriptionResource (TF.Argument Text) where
    confirmationTimeoutInMinutes f s@SnsTopicSubscriptionResource{..} =
        (\a -> s { _confirmation_timeout_in_minutes = a } :: SnsTopicSubscriptionResource)
             <$> f _confirmation_timeout_in_minutes

instance HasEndpoint SnsTopicSubscriptionResource (TF.Argument Text) where
    endpoint f s@SnsTopicSubscriptionResource{..} =
        (\a -> s { _endpoint = a } :: SnsTopicSubscriptionResource)
             <$> f _endpoint

instance HasEndpointAutoConfirms SnsTopicSubscriptionResource (TF.Argument Text) where
    endpointAutoConfirms f s@SnsTopicSubscriptionResource{..} =
        (\a -> s { _endpoint_auto_confirms = a } :: SnsTopicSubscriptionResource)
             <$> f _endpoint_auto_confirms

instance HasProtocol SnsTopicSubscriptionResource (TF.Argument Text) where
    protocol f s@SnsTopicSubscriptionResource{..} =
        (\a -> s { _protocol = a } :: SnsTopicSubscriptionResource)
             <$> f _protocol

instance HasRawMessageDelivery SnsTopicSubscriptionResource (TF.Argument Text) where
    rawMessageDelivery f s@SnsTopicSubscriptionResource{..} =
        (\a -> s { _raw_message_delivery = a } :: SnsTopicSubscriptionResource)
             <$> f _raw_message_delivery

instance HasTopicArn SnsTopicSubscriptionResource (TF.Argument Text) where
    topicArn f s@SnsTopicSubscriptionResource{..} =
        (\a -> s { _topic_arn = a } :: SnsTopicSubscriptionResource)
             <$> f _topic_arn

snsTopicSubscriptionResource :: TF.Resource TF.AWS SnsTopicSubscriptionResource
snsTopicSubscriptionResource =
    TF.newResource "aws_sns_topic_subscription" $
        SnsTopicSubscriptionResource {
            _confirmation_timeout_in_minutes = TF.Nil
            , _endpoint = TF.Nil
            , _endpoint_auto_confirms = TF.Nil
            , _protocol = TF.Nil
            , _raw_message_delivery = TF.Nil
            , _topic_arn = TF.Nil
            }

{- | The @aws_spot_datafeed_subscription@ AWS resource.

-> Note: There is only a single subscription allowed per account. To help
you understand the charges for your Spot instances, Amazon EC2 provides a
data feed that describes your Spot instance usage and pricing. This data
feed is sent to an Amazon S3 bucket that you specify when you subscribe to
the data feed.
-}
data SpotDatafeedSubscriptionResource = SpotDatafeedSubscriptionResource {
      _bucket :: !(TF.Argument Text)
    {- ^ (Required) The Amazon S3 bucket in which to store the Spot instance data feed. -}
    , _prefix :: !(TF.Argument Text)
    {- ^ (Optional) Path of folder inside bucket to place spot pricing data. -}
    } deriving (Show, Eq)

instance TF.ToHCL SpotDatafeedSubscriptionResource where
    toHCL SpotDatafeedSubscriptionResource{..} = TF.block $ catMaybes
        [ TF.assign "bucket" <$> TF.argument _bucket
        , TF.assign "prefix" <$> TF.argument _prefix
        ]

instance HasBucket SpotDatafeedSubscriptionResource (TF.Argument Text) where
    bucket f s@SpotDatafeedSubscriptionResource{..} =
        (\a -> s { _bucket = a } :: SpotDatafeedSubscriptionResource)
             <$> f _bucket

instance HasPrefix SpotDatafeedSubscriptionResource (TF.Argument Text) where
    prefix f s@SpotDatafeedSubscriptionResource{..} =
        (\a -> s { _prefix = a } :: SpotDatafeedSubscriptionResource)
             <$> f _prefix

spotDatafeedSubscriptionResource :: TF.Resource TF.AWS SpotDatafeedSubscriptionResource
spotDatafeedSubscriptionResource =
    TF.newResource "aws_spot_datafeed_subscription" $
        SpotDatafeedSubscriptionResource {
            _bucket = TF.Nil
            , _prefix = TF.Nil
            }

{- | The @aws_spot_fleet_request@ AWS resource.

Provides an EC2 Spot Fleet Request resource. This allows a fleet of Spot
instances to be requested on the Spot market.
-}
data SpotFleetRequestResource = SpotFleetRequestResource {
      _allocation_strategy                 :: !(TF.Argument Text)
    {- ^ - Indicates how to allocate the target capacity across the Spot pools specified by the Spot fleet request. The default is lowestPrice. -}
    , _excess_capacity_termination_policy  :: !(TF.Argument Text)
    {- ^ - Indicates whether running Spot instances should be terminated if the target capacity of the Spot fleet request is decreased below the current size of the Spot fleet. -}
    , _iam_fleet_role                      :: !(TF.Argument Text)
    {- ^ (Required) Grants the Spot fleet permission to terminate Spot instances on your behalf when you cancel its Spot fleet request using CancelSpotFleetRequests or when the Spot fleet request expires, if you set terminateInstancesWithExpiration. -}
    , _instance_interruption_behavior      :: !(TF.Argument Text)
    {- ^ (Optional) Indicates whether a Spot instance stops or terminates when it is interrupted. Default is @terminate@ . -}
    , _launch_specification                :: !(TF.Argument Text)
    {- ^ - Used to define the launch configuration of the spot-fleet request. Can be specified multiple times to define different bids across different markets and instance types. -}
    , _replace_unhealthy_instances         :: !(TF.Argument Text)
    {- ^ (Optional) Indicates whether Spot fleet should replace unhealthy instances. Default @false@ . -}
    , _spot_price                          :: !(TF.Argument Text)
    {- ^ (Required) The bid price per unit hour. -}
    , _target_capacity                     :: !(TF.Argument Text)
    {- ^ - The number of units to request. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. -}
    , _terminate_instances_with_expiration :: !(TF.Argument Text)
    {- ^ - Indicates whether running Spot instances should be terminated when the Spot fleet request expires. -}
    , _valid_until                         :: !(TF.Argument Text)
    {- ^ - The end date and time of the request, in UTC ISO8601 format (for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new Spot instance requests are placed or enabled to fulfill the request. Defaults to 24 hours. -}
    , _wait_for_fulfillment                :: !(TF.Argument Text)
    {- ^ (Optional; Default: false) If set, Terraform will wait for the Spot Request to be fulfilled, and will throw an error if the timeout of 10m is reached. -}
    } deriving (Show, Eq)

instance TF.ToHCL SpotFleetRequestResource where
    toHCL SpotFleetRequestResource{..} = TF.block $ catMaybes
        [ TF.assign "allocation_strategy" <$> TF.argument _allocation_strategy
        , TF.assign "excess_capacity_termination_policy" <$> TF.argument _excess_capacity_termination_policy
        , TF.assign "iam_fleet_role" <$> TF.argument _iam_fleet_role
        , TF.assign "instance_interruption_behavior" <$> TF.argument _instance_interruption_behavior
        , TF.assign "launch_specification" <$> TF.argument _launch_specification
        , TF.assign "replace_unhealthy_instances" <$> TF.argument _replace_unhealthy_instances
        , TF.assign "spot_price" <$> TF.argument _spot_price
        , TF.assign "target_capacity" <$> TF.argument _target_capacity
        , TF.assign "terminate_instances_with_expiration" <$> TF.argument _terminate_instances_with_expiration
        , TF.assign "valid_until" <$> TF.argument _valid_until
        , TF.assign "wait_for_fulfillment" <$> TF.argument _wait_for_fulfillment
        ]

instance HasAllocationStrategy SpotFleetRequestResource (TF.Argument Text) where
    allocationStrategy f s@SpotFleetRequestResource{..} =
        (\a -> s { _allocation_strategy = a } :: SpotFleetRequestResource)
             <$> f _allocation_strategy

instance HasExcessCapacityTerminationPolicy SpotFleetRequestResource (TF.Argument Text) where
    excessCapacityTerminationPolicy f s@SpotFleetRequestResource{..} =
        (\a -> s { _excess_capacity_termination_policy = a } :: SpotFleetRequestResource)
             <$> f _excess_capacity_termination_policy

instance HasIamFleetRole SpotFleetRequestResource (TF.Argument Text) where
    iamFleetRole f s@SpotFleetRequestResource{..} =
        (\a -> s { _iam_fleet_role = a } :: SpotFleetRequestResource)
             <$> f _iam_fleet_role

instance HasInstanceInterruptionBehavior SpotFleetRequestResource (TF.Argument Text) where
    instanceInterruptionBehavior f s@SpotFleetRequestResource{..} =
        (\a -> s { _instance_interruption_behavior = a } :: SpotFleetRequestResource)
             <$> f _instance_interruption_behavior

instance HasLaunchSpecification SpotFleetRequestResource (TF.Argument Text) where
    launchSpecification f s@SpotFleetRequestResource{..} =
        (\a -> s { _launch_specification = a } :: SpotFleetRequestResource)
             <$> f _launch_specification

instance HasReplaceUnhealthyInstances SpotFleetRequestResource (TF.Argument Text) where
    replaceUnhealthyInstances f s@SpotFleetRequestResource{..} =
        (\a -> s { _replace_unhealthy_instances = a } :: SpotFleetRequestResource)
             <$> f _replace_unhealthy_instances

instance HasSpotPrice SpotFleetRequestResource (TF.Argument Text) where
    spotPrice f s@SpotFleetRequestResource{..} =
        (\a -> s { _spot_price = a } :: SpotFleetRequestResource)
             <$> f _spot_price

instance HasTargetCapacity SpotFleetRequestResource (TF.Argument Text) where
    targetCapacity f s@SpotFleetRequestResource{..} =
        (\a -> s { _target_capacity = a } :: SpotFleetRequestResource)
             <$> f _target_capacity

instance HasTerminateInstancesWithExpiration SpotFleetRequestResource (TF.Argument Text) where
    terminateInstancesWithExpiration f s@SpotFleetRequestResource{..} =
        (\a -> s { _terminate_instances_with_expiration = a } :: SpotFleetRequestResource)
             <$> f _terminate_instances_with_expiration

instance HasValidUntil SpotFleetRequestResource (TF.Argument Text) where
    validUntil f s@SpotFleetRequestResource{..} =
        (\a -> s { _valid_until = a } :: SpotFleetRequestResource)
             <$> f _valid_until

instance HasWaitForFulfillment SpotFleetRequestResource (TF.Argument Text) where
    waitForFulfillment f s@SpotFleetRequestResource{..} =
        (\a -> s { _wait_for_fulfillment = a } :: SpotFleetRequestResource)
             <$> f _wait_for_fulfillment

spotFleetRequestResource :: TF.Resource TF.AWS SpotFleetRequestResource
spotFleetRequestResource =
    TF.newResource "aws_spot_fleet_request" $
        SpotFleetRequestResource {
            _allocation_strategy = TF.Nil
            , _excess_capacity_termination_policy = TF.Nil
            , _iam_fleet_role = TF.Nil
            , _instance_interruption_behavior = TF.Nil
            , _launch_specification = TF.Nil
            , _replace_unhealthy_instances = TF.Nil
            , _spot_price = TF.Nil
            , _target_capacity = TF.Nil
            , _terminate_instances_with_expiration = TF.Nil
            , _valid_until = TF.Nil
            , _wait_for_fulfillment = TF.Nil
            }

{- | The @aws_spot_instance_request@ AWS resource.

Provides an EC2 Spot Instance Request resource. This allows instances to be
requested on the spot market. Terraform always creates Spot Instance
Requests with a @persistent@ type, which means that for the duration of
their lifetime, AWS will launch an instance with the configured details if
and when the spot market will accept the requested price. On destruction,
Terraform will make an attempt to terminate the associated Spot Instance if
there is one present. ~> NOTE: Because their behavior depends on the live
status of the spot market, Spot Instance Requests have a unique lifecycle
that makes them behave differently than other Terraform resources. Most
importantly: there is no guarantee that a Spot Instance exists to fulfill
the request at any given point in time. See the
<https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-spot-instances.html>
for more information.
-}
data SpotInstanceRequestResource = SpotInstanceRequestResource {
      _block_duration_minutes         :: !(TF.Argument Text)
    {- ^ (Optional) The required duration for the Spot instances, in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360). The duration period starts as soon as your Spot instance receives its instance ID. At the end of the duration period, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates. Note that you can't specify an Availability Zone group or a launch group if you specify a duration. -}
    , _instance_interruption_behavior :: !(TF.Argument Text)
    {- ^ (Optional) Indicates whether a Spot instance stops or terminates when it is interrupted. Default is @terminate@ as this is the current AWS behaviour. -}
    , _launch_group                   :: !(TF.Argument Text)
    {- ^ (Optional) A launch group is a group of spot instances that launch together and terminate together. If left empty instances are launched and terminated individually. -}
    , _spot_price                     :: !(TF.Argument Text)
    {- ^ (Required) The price to request on the spot market. -}
    , _spot_type                      :: !(TF.Argument Text)
    {- ^ (Optional; Default: "persistent") If set to "one-time", after the instance is terminated, the spot request will be closed. Also, Terraform can't manage one-time spot requests, just launch them. -}
    , _wait_for_fulfillment           :: !(TF.Argument Text)
    {- ^ (Optional; Default: false) If set, Terraform will wait for the Spot Request to be fulfilled, and will throw an error if the timeout of 10m is reached. -}
    } deriving (Show, Eq)

instance TF.ToHCL SpotInstanceRequestResource where
    toHCL SpotInstanceRequestResource{..} = TF.block $ catMaybes
        [ TF.assign "block_duration_minutes" <$> TF.argument _block_duration_minutes
        , TF.assign "instance_interruption_behavior" <$> TF.argument _instance_interruption_behavior
        , TF.assign "launch_group" <$> TF.argument _launch_group
        , TF.assign "spot_price" <$> TF.argument _spot_price
        , TF.assign "spot_type" <$> TF.argument _spot_type
        , TF.assign "wait_for_fulfillment" <$> TF.argument _wait_for_fulfillment
        ]

instance HasBlockDurationMinutes SpotInstanceRequestResource (TF.Argument Text) where
    blockDurationMinutes f s@SpotInstanceRequestResource{..} =
        (\a -> s { _block_duration_minutes = a } :: SpotInstanceRequestResource)
             <$> f _block_duration_minutes

instance HasInstanceInterruptionBehavior SpotInstanceRequestResource (TF.Argument Text) where
    instanceInterruptionBehavior f s@SpotInstanceRequestResource{..} =
        (\a -> s { _instance_interruption_behavior = a } :: SpotInstanceRequestResource)
             <$> f _instance_interruption_behavior

instance HasLaunchGroup SpotInstanceRequestResource (TF.Argument Text) where
    launchGroup f s@SpotInstanceRequestResource{..} =
        (\a -> s { _launch_group = a } :: SpotInstanceRequestResource)
             <$> f _launch_group

instance HasSpotPrice SpotInstanceRequestResource (TF.Argument Text) where
    spotPrice f s@SpotInstanceRequestResource{..} =
        (\a -> s { _spot_price = a } :: SpotInstanceRequestResource)
             <$> f _spot_price

instance HasSpotType SpotInstanceRequestResource (TF.Argument Text) where
    spotType f s@SpotInstanceRequestResource{..} =
        (\a -> s { _spot_type = a } :: SpotInstanceRequestResource)
             <$> f _spot_type

instance HasWaitForFulfillment SpotInstanceRequestResource (TF.Argument Text) where
    waitForFulfillment f s@SpotInstanceRequestResource{..} =
        (\a -> s { _wait_for_fulfillment = a } :: SpotInstanceRequestResource)
             <$> f _wait_for_fulfillment

spotInstanceRequestResource :: TF.Resource TF.AWS SpotInstanceRequestResource
spotInstanceRequestResource =
    TF.newResource "aws_spot_instance_request" $
        SpotInstanceRequestResource {
            _block_duration_minutes = TF.Nil
            , _instance_interruption_behavior = TF.Nil
            , _launch_group = TF.Nil
            , _spot_price = TF.Nil
            , _spot_type = TF.Nil
            , _wait_for_fulfillment = TF.Nil
            }

{- | The @aws_sqs_queue_policy@ AWS resource.

Allows you to set a policy of an SQS Queue while referencing ARN of the
queue within the policy.
-}
data SqsQueuePolicyResource = SqsQueuePolicyResource {
      _policy    :: !(TF.Argument Text)
    {- ^ (Required) The JSON policy for the SQS queue -}
    , _queue_url :: !(TF.Argument Text)
    {- ^ (Required) The URL of the SQS Queue to which to attach the policy -}
    } deriving (Show, Eq)

instance TF.ToHCL SqsQueuePolicyResource where
    toHCL SqsQueuePolicyResource{..} = TF.block $ catMaybes
        [ TF.assign "policy" <$> TF.argument _policy
        , TF.assign "queue_url" <$> TF.argument _queue_url
        ]

instance HasPolicy SqsQueuePolicyResource (TF.Argument Text) where
    policy f s@SqsQueuePolicyResource{..} =
        (\a -> s { _policy = a } :: SqsQueuePolicyResource)
             <$> f _policy

instance HasQueueUrl SqsQueuePolicyResource (TF.Argument Text) where
    queueUrl f s@SqsQueuePolicyResource{..} =
        (\a -> s { _queue_url = a } :: SqsQueuePolicyResource)
             <$> f _queue_url

sqsQueuePolicyResource :: TF.Resource TF.AWS SqsQueuePolicyResource
sqsQueuePolicyResource =
    TF.newResource "aws_sqs_queue_policy" $
        SqsQueuePolicyResource {
            _policy = TF.Nil
            , _queue_url = TF.Nil
            }

{- | The @aws_sqs_queue@ AWS resource.


-}
data SqsQueueResource = SqsQueueResource {
      _content_based_deduplication       :: !(TF.Argument Text)
    {- ^ (Optional) Enables content-based deduplication for FIFO queues. For more information, see the <http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html#FIFO-queues-exactly-once-processing> -}
    , _delay_seconds                     :: !(TF.Argument Text)
    {- ^ (Optional) The time in seconds that the delivery of all messages in the queue will be delayed. An integer from 0 to 900 (15 minutes). The default for this attribute is 0 seconds. -}
    , _fifo_queue                        :: !(TF.Argument Text)
    {- ^ (Optional) Boolean designating a FIFO queue. If not set, it defaults to @false@ making it standard. -}
    , _kms_data_key_reuse_period_seconds :: !(TF.Argument Text)
    {- ^ (Optional) The length of time, in seconds, for which Amazon SQS can reuse a data key to encrypt or decrypt messages before calling AWS KMS again. An integer representing seconds, between 60 seconds (1 minute) and 86,400 seconds (24 hours). The default is 300 (5 minutes). -}
    , _kms_master_key_id                 :: !(TF.Argument Text)
    {- ^ (Optional) The ID of an AWS-managed customer master key (CMK) for Amazon SQS or a custom CMK. For more information, see <http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-sse-key-terms> . -}
    , _max_message_size                  :: !(TF.Argument Text)
    {- ^ (Optional) The limit of how many bytes a message can contain before Amazon SQS rejects it. An integer from 1024 bytes (1 KiB) up to 262144 bytes (256 KiB). The default for this attribute is 262144 (256 KiB). -}
    , _message_retention_seconds         :: !(TF.Argument Text)
    {- ^ (Optional) The number of seconds Amazon SQS retains a message. Integer representing seconds, from 60 (1 minute) to 1209600 (14 days). The default for this attribute is 345600 (4 days). -}
    , _name                              :: !(TF.Argument Text)
    {- ^ (Optional) This is the human-readable name of the queue. If omitted, Terraform will assign a random name. -}
    , _name_prefix                       :: !(TF.Argument Text)
    {- ^ (Optional) Creates a unique name beginning with the specified prefix. Conflicts with @name@ . -}
    , _policy                            :: !(TF.Argument Text)
    {- ^ (Optional) The JSON policy for the SQS queue -}
    , _receive_wait_time_seconds         :: !(TF.Argument Text)
    {- ^ (Optional) The time for which a ReceiveMessage call will wait for a message to arrive (long polling) before returning. An integer from 0 to 20 (seconds). The default for this attribute is 0, meaning that the call will return immediately. -}
    , _redrive_policy                    :: !(TF.Argument Text)
    {- ^ (Optional) The JSON policy to set up the Dead Letter Queue, see <https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/SQSDeadLetterQueue.html> . Note: when specifying @maxReceiveCount@ , you must specify it as an integer ( @5@ ), and not a string ( @"5"@ ). -}
    , _tags                              :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the queue. -}
    , _visibility_timeout_seconds        :: !(TF.Argument Text)
    {- ^ (Optional) The visibility timeout for the queue. An integer from 0 to 43200 (12 hours). The default for this attribute is 30. For more information about visibility timeout, see <https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/AboutVT.html> . -}
    , _computed_arn                      :: !(TF.Attribute Text)
    {- ^ - The ARN of the SQS queue -}
    , _computed_id                       :: !(TF.Attribute Text)
    {- ^ - The URL for the created Amazon SQS queue. -}
    } deriving (Show, Eq)

instance TF.ToHCL SqsQueueResource where
    toHCL SqsQueueResource{..} = TF.block $ catMaybes
        [ TF.assign "content_based_deduplication" <$> TF.argument _content_based_deduplication
        , TF.assign "delay_seconds" <$> TF.argument _delay_seconds
        , TF.assign "fifo_queue" <$> TF.argument _fifo_queue
        , TF.assign "kms_data_key_reuse_period_seconds" <$> TF.argument _kms_data_key_reuse_period_seconds
        , TF.assign "kms_master_key_id" <$> TF.argument _kms_master_key_id
        , TF.assign "max_message_size" <$> TF.argument _max_message_size
        , TF.assign "message_retention_seconds" <$> TF.argument _message_retention_seconds
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "name_prefix" <$> TF.argument _name_prefix
        , TF.assign "policy" <$> TF.argument _policy
        , TF.assign "receive_wait_time_seconds" <$> TF.argument _receive_wait_time_seconds
        , TF.assign "redrive_policy" <$> TF.argument _redrive_policy
        , TF.assign "tags" <$> TF.argument _tags
        , TF.assign "visibility_timeout_seconds" <$> TF.argument _visibility_timeout_seconds
        ]

instance HasContentBasedDeduplication SqsQueueResource (TF.Argument Text) where
    contentBasedDeduplication f s@SqsQueueResource{..} =
        (\a -> s { _content_based_deduplication = a } :: SqsQueueResource)
             <$> f _content_based_deduplication

instance HasDelaySeconds SqsQueueResource (TF.Argument Text) where
    delaySeconds f s@SqsQueueResource{..} =
        (\a -> s { _delay_seconds = a } :: SqsQueueResource)
             <$> f _delay_seconds

instance HasFifoQueue SqsQueueResource (TF.Argument Text) where
    fifoQueue f s@SqsQueueResource{..} =
        (\a -> s { _fifo_queue = a } :: SqsQueueResource)
             <$> f _fifo_queue

instance HasKmsDataKeyReusePeriodSeconds SqsQueueResource (TF.Argument Text) where
    kmsDataKeyReusePeriodSeconds f s@SqsQueueResource{..} =
        (\a -> s { _kms_data_key_reuse_period_seconds = a } :: SqsQueueResource)
             <$> f _kms_data_key_reuse_period_seconds

instance HasKmsMasterKeyId SqsQueueResource (TF.Argument Text) where
    kmsMasterKeyId f s@SqsQueueResource{..} =
        (\a -> s { _kms_master_key_id = a } :: SqsQueueResource)
             <$> f _kms_master_key_id

instance HasMaxMessageSize SqsQueueResource (TF.Argument Text) where
    maxMessageSize f s@SqsQueueResource{..} =
        (\a -> s { _max_message_size = a } :: SqsQueueResource)
             <$> f _max_message_size

instance HasMessageRetentionSeconds SqsQueueResource (TF.Argument Text) where
    messageRetentionSeconds f s@SqsQueueResource{..} =
        (\a -> s { _message_retention_seconds = a } :: SqsQueueResource)
             <$> f _message_retention_seconds

instance HasName SqsQueueResource (TF.Argument Text) where
    name f s@SqsQueueResource{..} =
        (\a -> s { _name = a } :: SqsQueueResource)
             <$> f _name

instance HasNamePrefix SqsQueueResource (TF.Argument Text) where
    namePrefix f s@SqsQueueResource{..} =
        (\a -> s { _name_prefix = a } :: SqsQueueResource)
             <$> f _name_prefix

instance HasPolicy SqsQueueResource (TF.Argument Text) where
    policy f s@SqsQueueResource{..} =
        (\a -> s { _policy = a } :: SqsQueueResource)
             <$> f _policy

instance HasReceiveWaitTimeSeconds SqsQueueResource (TF.Argument Text) where
    receiveWaitTimeSeconds f s@SqsQueueResource{..} =
        (\a -> s { _receive_wait_time_seconds = a } :: SqsQueueResource)
             <$> f _receive_wait_time_seconds

instance HasRedrivePolicy SqsQueueResource (TF.Argument Text) where
    redrivePolicy f s@SqsQueueResource{..} =
        (\a -> s { _redrive_policy = a } :: SqsQueueResource)
             <$> f _redrive_policy

instance HasTags SqsQueueResource (TF.Argument TF.Tags) where
    tags f s@SqsQueueResource{..} =
        (\a -> s { _tags = a } :: SqsQueueResource)
             <$> f _tags

instance HasVisibilityTimeoutSeconds SqsQueueResource (TF.Argument Text) where
    visibilityTimeoutSeconds f s@SqsQueueResource{..} =
        (\a -> s { _visibility_timeout_seconds = a } :: SqsQueueResource)
             <$> f _visibility_timeout_seconds

instance HasComputedArn SqsQueueResource (TF.Attribute Text) where
    computedArn f s@SqsQueueResource{..} =
        (\a -> s { _computed_arn = a } :: SqsQueueResource)
             <$> f _computed_arn

instance HasComputedId SqsQueueResource (TF.Attribute Text) where
    computedId f s@SqsQueueResource{..} =
        (\a -> s { _computed_id = a } :: SqsQueueResource)
             <$> f _computed_id

sqsQueueResource :: TF.Resource TF.AWS SqsQueueResource
sqsQueueResource =
    TF.newResource "aws_sqs_queue" $
        SqsQueueResource {
            _content_based_deduplication = TF.Nil
            , _delay_seconds = TF.Nil
            , _fifo_queue = TF.Nil
            , _kms_data_key_reuse_period_seconds = TF.Nil
            , _kms_master_key_id = TF.Nil
            , _max_message_size = TF.Nil
            , _message_retention_seconds = TF.Nil
            , _name = TF.Nil
            , _name_prefix = TF.Nil
            , _policy = TF.Nil
            , _receive_wait_time_seconds = TF.Nil
            , _redrive_policy = TF.Nil
            , _tags = TF.Nil
            , _visibility_timeout_seconds = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_ssm_activation@ AWS resource.

Registers an on-premises server or virtual machine with Amazon EC2 so that
it can be managed using Run Command.
-}
data SsmActivationResource = SsmActivationResource {
      _description                 :: !(TF.Argument Text)
    {- ^ (Optional) The description of the resource that you want to register. -}
    , _expiration_date             :: !(TF.Argument Text)
    {- ^ (Optional) The date by which this activation request should expire. The default value is 24 hours. -}
    , _iam_role                    :: !(TF.Argument Text)
    {- ^ (Required) The IAM Role to attach to the managed instance. -}
    , _name                        :: !(TF.Argument Text)
    {- ^ (Optional) The default name of the registerd managed instance. -}
    , _registration_limit          :: !(TF.Argument Text)
    {- ^ (Optional) The maximum number of managed instances you want to register. The default value is 1 instance. -}
    , _computed_activation_code    :: !(TF.Attribute Text)
    {- ^ - The code the system generates when it processes the activation. -}
    , _computed_description        :: !(TF.Attribute Text)
    {- ^ - The description of the resource that was registered. -}
    , _computed_expiration_date    :: !(TF.Attribute Text)
    {- ^ - The date by which this activation request should expire. The default value is 24 hours. -}
    , _computed_expired            :: !(TF.Attribute Text)
    {- ^ - If the current activation has expired. -}
    , _computed_iam_role           :: !(TF.Attribute Text)
    {- ^ - The IAM Role attached to the managed instance. -}
    , _computed_name               :: !(TF.Attribute Text)
    {- ^ - The default name of the registerd managed instance. -}
    , _computed_registration_count :: !(TF.Attribute Text)
    {- ^ - The number of managed instances that are currently registered using this activation. -}
    , _computed_registration_limit :: !(TF.Attribute Text)
    {- ^ - The maximum number of managed instances you want to be registered. The default value is 1 instance. -}
    } deriving (Show, Eq)

instance TF.ToHCL SsmActivationResource where
    toHCL SsmActivationResource{..} = TF.block $ catMaybes
        [ TF.assign "description" <$> TF.argument _description
        , TF.assign "expiration_date" <$> TF.argument _expiration_date
        , TF.assign "iam_role" <$> TF.argument _iam_role
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "registration_limit" <$> TF.argument _registration_limit
        ]

instance HasDescription SsmActivationResource (TF.Argument Text) where
    description f s@SsmActivationResource{..} =
        (\a -> s { _description = a } :: SsmActivationResource)
             <$> f _description

instance HasExpirationDate SsmActivationResource (TF.Argument Text) where
    expirationDate f s@SsmActivationResource{..} =
        (\a -> s { _expiration_date = a } :: SsmActivationResource)
             <$> f _expiration_date

instance HasIamRole SsmActivationResource (TF.Argument Text) where
    iamRole f s@SsmActivationResource{..} =
        (\a -> s { _iam_role = a } :: SsmActivationResource)
             <$> f _iam_role

instance HasName SsmActivationResource (TF.Argument Text) where
    name f s@SsmActivationResource{..} =
        (\a -> s { _name = a } :: SsmActivationResource)
             <$> f _name

instance HasRegistrationLimit SsmActivationResource (TF.Argument Text) where
    registrationLimit f s@SsmActivationResource{..} =
        (\a -> s { _registration_limit = a } :: SsmActivationResource)
             <$> f _registration_limit

instance HasComputedActivationCode SsmActivationResource (TF.Attribute Text) where
    computedActivationCode f s@SsmActivationResource{..} =
        (\a -> s { _computed_activation_code = a } :: SsmActivationResource)
             <$> f _computed_activation_code

instance HasComputedDescription SsmActivationResource (TF.Attribute Text) where
    computedDescription f s@SsmActivationResource{..} =
        (\a -> s { _computed_description = a } :: SsmActivationResource)
             <$> f _computed_description

instance HasComputedExpirationDate SsmActivationResource (TF.Attribute Text) where
    computedExpirationDate f s@SsmActivationResource{..} =
        (\a -> s { _computed_expiration_date = a } :: SsmActivationResource)
             <$> f _computed_expiration_date

instance HasComputedExpired SsmActivationResource (TF.Attribute Text) where
    computedExpired f s@SsmActivationResource{..} =
        (\a -> s { _computed_expired = a } :: SsmActivationResource)
             <$> f _computed_expired

instance HasComputedIamRole SsmActivationResource (TF.Attribute Text) where
    computedIamRole f s@SsmActivationResource{..} =
        (\a -> s { _computed_iam_role = a } :: SsmActivationResource)
             <$> f _computed_iam_role

instance HasComputedName SsmActivationResource (TF.Attribute Text) where
    computedName f s@SsmActivationResource{..} =
        (\a -> s { _computed_name = a } :: SsmActivationResource)
             <$> f _computed_name

instance HasComputedRegistrationCount SsmActivationResource (TF.Attribute Text) where
    computedRegistrationCount f s@SsmActivationResource{..} =
        (\a -> s { _computed_registration_count = a } :: SsmActivationResource)
             <$> f _computed_registration_count

instance HasComputedRegistrationLimit SsmActivationResource (TF.Attribute Text) where
    computedRegistrationLimit f s@SsmActivationResource{..} =
        (\a -> s { _computed_registration_limit = a } :: SsmActivationResource)
             <$> f _computed_registration_limit

ssmActivationResource :: TF.Resource TF.AWS SsmActivationResource
ssmActivationResource =
    TF.newResource "aws_ssm_activation" $
        SsmActivationResource {
            _description = TF.Nil
            , _expiration_date = TF.Nil
            , _iam_role = TF.Nil
            , _name = TF.Nil
            , _registration_limit = TF.Nil
            , _computed_activation_code = TF.Compute "activation_code"
            , _computed_description = TF.Compute "description"
            , _computed_expiration_date = TF.Compute "expiration_date"
            , _computed_expired = TF.Compute "expired"
            , _computed_iam_role = TF.Compute "iam_role"
            , _computed_name = TF.Compute "name"
            , _computed_registration_count = TF.Compute "registration_count"
            , _computed_registration_limit = TF.Compute "registration_limit"
            }

{- | The @aws_ssm_association@ AWS resource.

Associates an SSM Document to an instance or EC2 tag.
-}
data SsmAssociationResource = SsmAssociationResource {
      _association_name      :: !(TF.Argument Text)
    {- ^ (Optional) The descriptive name for the association. -}
    , _document_version      :: !(TF.Argument Text)
    {- ^ (Optional) The document version you want to associate with the target(s). Can be a specific version or the default version. -}
    , _instance_id           :: !(TF.Argument Text)
    {- ^ (Optional) The instance ID to apply an SSM document to. -}
    , _name                  :: !(TF.Argument Text)
    {- ^ (Required) The name of the SSM document to apply. -}
    , _output_location       :: !(TF.Argument Text)
    {- ^ (Optional) An output location block. Output Location is documented below. -}
    , _parameters            :: !(TF.Argument Text)
    {- ^ (Optional) A block of arbitrary string parameters to pass to the SSM document. -}
    , _schedule_expression   :: !(TF.Argument Text)
    {- ^ (Optional) A cron expression when the association will be applied to the target(s). -}
    , _targets               :: !(TF.Argument Text)
    {- ^ (Optional) A block containing the targets of the SSM association. Targets are documented below. AWS currently supports a maximum of 5 targets. -}
    , _computed_instance_ids :: !(TF.Attribute Text)
    {- ^ - The instance id that the SSM document was applied to. -}
    , _computed_name         :: !(TF.Attribute Text)
    {- ^ - The name of the SSM document to apply. -}
    , _computed_parameters   :: !(TF.Attribute Text)
    {- ^ - Additional parameters passed to the SSM document. -}
    } deriving (Show, Eq)

instance TF.ToHCL SsmAssociationResource where
    toHCL SsmAssociationResource{..} = TF.block $ catMaybes
        [ TF.assign "association_name" <$> TF.argument _association_name
        , TF.assign "document_version" <$> TF.argument _document_version
        , TF.assign "instance_id" <$> TF.argument _instance_id
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "output_location" <$> TF.argument _output_location
        , TF.assign "parameters" <$> TF.argument _parameters
        , TF.assign "schedule_expression" <$> TF.argument _schedule_expression
        , TF.assign "targets" <$> TF.argument _targets
        ]

instance HasAssociationName SsmAssociationResource (TF.Argument Text) where
    associationName f s@SsmAssociationResource{..} =
        (\a -> s { _association_name = a } :: SsmAssociationResource)
             <$> f _association_name

instance HasDocumentVersion SsmAssociationResource (TF.Argument Text) where
    documentVersion f s@SsmAssociationResource{..} =
        (\a -> s { _document_version = a } :: SsmAssociationResource)
             <$> f _document_version

instance HasInstanceId SsmAssociationResource (TF.Argument Text) where
    instanceId f s@SsmAssociationResource{..} =
        (\a -> s { _instance_id = a } :: SsmAssociationResource)
             <$> f _instance_id

instance HasName SsmAssociationResource (TF.Argument Text) where
    name f s@SsmAssociationResource{..} =
        (\a -> s { _name = a } :: SsmAssociationResource)
             <$> f _name

instance HasOutputLocation SsmAssociationResource (TF.Argument Text) where
    outputLocation f s@SsmAssociationResource{..} =
        (\a -> s { _output_location = a } :: SsmAssociationResource)
             <$> f _output_location

instance HasParameters SsmAssociationResource (TF.Argument Text) where
    parameters f s@SsmAssociationResource{..} =
        (\a -> s { _parameters = a } :: SsmAssociationResource)
             <$> f _parameters

instance HasScheduleExpression SsmAssociationResource (TF.Argument Text) where
    scheduleExpression f s@SsmAssociationResource{..} =
        (\a -> s { _schedule_expression = a } :: SsmAssociationResource)
             <$> f _schedule_expression

instance HasTargets SsmAssociationResource (TF.Argument Text) where
    targets f s@SsmAssociationResource{..} =
        (\a -> s { _targets = a } :: SsmAssociationResource)
             <$> f _targets

instance HasComputedInstanceIds SsmAssociationResource (TF.Attribute Text) where
    computedInstanceIds f s@SsmAssociationResource{..} =
        (\a -> s { _computed_instance_ids = a } :: SsmAssociationResource)
             <$> f _computed_instance_ids

instance HasComputedName SsmAssociationResource (TF.Attribute Text) where
    computedName f s@SsmAssociationResource{..} =
        (\a -> s { _computed_name = a } :: SsmAssociationResource)
             <$> f _computed_name

instance HasComputedParameters SsmAssociationResource (TF.Attribute Text) where
    computedParameters f s@SsmAssociationResource{..} =
        (\a -> s { _computed_parameters = a } :: SsmAssociationResource)
             <$> f _computed_parameters

ssmAssociationResource :: TF.Resource TF.AWS SsmAssociationResource
ssmAssociationResource =
    TF.newResource "aws_ssm_association" $
        SsmAssociationResource {
            _association_name = TF.Nil
            , _document_version = TF.Nil
            , _instance_id = TF.Nil
            , _name = TF.Nil
            , _output_location = TF.Nil
            , _parameters = TF.Nil
            , _schedule_expression = TF.Nil
            , _targets = TF.Nil
            , _computed_instance_ids = TF.Compute "instance_ids"
            , _computed_name = TF.Compute "name"
            , _computed_parameters = TF.Compute "parameters"
            }

{- | The @aws_ssm_document@ AWS resource.

Provides an SSM Document resource ~> NOTE on updating SSM documents: Only
documents with a schema version of 2.0 or greater can update their content
once created, see
<http://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-ssm-docs.html#document-schemas-features>
. To update a document with an older schema version you must recreate the
resource.
-}
data SsmDocumentResource = SsmDocumentResource {
      _content                  :: !(TF.Argument Text)
    {- ^ (Required) The json content of the document. -}
    , _document_type            :: !(TF.Argument Text)
    {- ^ (Required) The type of the document. Valid document types include: @Command@ , @Policy@ and @Automation@ -}
    , _name                     :: !(TF.Argument Text)
    {- ^ (Required) The name of the document. -}
    , _permissions              :: !(TF.Argument Text)
    {- ^ (Optional) Additional Permissions to attach to the document. See <#permissions> below for details. -}
    , _computed_content         :: !(TF.Attribute Text)
    {- ^ -  The json content of the document. -}
    , _computed_created_date    :: !(TF.Attribute Text)
    {- ^ - The date the document was created. -}
    , _computed_default_version :: !(TF.Attribute Text)
    {- ^ - The default version of the document. -}
    , _computed_description     :: !(TF.Attribute Text)
    {- ^ - The description of the document. -}
    , _computed_document_type   :: !(TF.Attribute Text)
    {- ^ - The type of document created. -}
    , _computed_hash            :: !(TF.Attribute Text)
    {- ^ - The sha1 or sha256 of the document content -}
    , _computed_hash_type       :: !(TF.Attribute Text)
    {- ^ - "Sha1" "Sha256". The hashing algorithm used when hashing the content. -}
    , _computed_latest_version  :: !(TF.Attribute Text)
    {- ^ - The latest version of the document. -}
    , _computed_name            :: !(TF.Attribute Text)
    {- ^ - The name of the document. -}
    , _computed_owner           :: !(TF.Attribute Text)
    {- ^ - The AWS user account of the person who created the document. -}
    , _computed_parameter       :: !(TF.Attribute Text)
    {- ^ - The parameters that are available to this document. -}
    , _computed_permissions     :: !(TF.Attribute Text)
    {- ^ - The permissions of how this document should be shared. -}
    , _computed_platform_types  :: !(TF.Attribute Text)
    {- ^ - A list of OS platforms compatible with this SSM document, either "Windows" or "Linux". -}
    , _computed_schema_version  :: !(TF.Attribute Text)
    {- ^ - The schema version of the document. -}
    , _computed_status          :: !(TF.Attribute Text)
    {- ^ - "Creating", "Active" or "Deleting". The current status of the document. -}
    } deriving (Show, Eq)

instance TF.ToHCL SsmDocumentResource where
    toHCL SsmDocumentResource{..} = TF.block $ catMaybes
        [ TF.assign "content" <$> TF.argument _content
        , TF.assign "document_type" <$> TF.argument _document_type
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "permissions" <$> TF.argument _permissions
        ]

instance HasContent SsmDocumentResource (TF.Argument Text) where
    content f s@SsmDocumentResource{..} =
        (\a -> s { _content = a } :: SsmDocumentResource)
             <$> f _content

instance HasDocumentType SsmDocumentResource (TF.Argument Text) where
    documentType f s@SsmDocumentResource{..} =
        (\a -> s { _document_type = a } :: SsmDocumentResource)
             <$> f _document_type

instance HasName SsmDocumentResource (TF.Argument Text) where
    name f s@SsmDocumentResource{..} =
        (\a -> s { _name = a } :: SsmDocumentResource)
             <$> f _name

instance HasPermissions SsmDocumentResource (TF.Argument Text) where
    permissions f s@SsmDocumentResource{..} =
        (\a -> s { _permissions = a } :: SsmDocumentResource)
             <$> f _permissions

instance HasComputedContent SsmDocumentResource (TF.Attribute Text) where
    computedContent f s@SsmDocumentResource{..} =
        (\a -> s { _computed_content = a } :: SsmDocumentResource)
             <$> f _computed_content

instance HasComputedCreatedDate SsmDocumentResource (TF.Attribute Text) where
    computedCreatedDate f s@SsmDocumentResource{..} =
        (\a -> s { _computed_created_date = a } :: SsmDocumentResource)
             <$> f _computed_created_date

instance HasComputedDefaultVersion SsmDocumentResource (TF.Attribute Text) where
    computedDefaultVersion f s@SsmDocumentResource{..} =
        (\a -> s { _computed_default_version = a } :: SsmDocumentResource)
             <$> f _computed_default_version

instance HasComputedDescription SsmDocumentResource (TF.Attribute Text) where
    computedDescription f s@SsmDocumentResource{..} =
        (\a -> s { _computed_description = a } :: SsmDocumentResource)
             <$> f _computed_description

instance HasComputedDocumentType SsmDocumentResource (TF.Attribute Text) where
    computedDocumentType f s@SsmDocumentResource{..} =
        (\a -> s { _computed_document_type = a } :: SsmDocumentResource)
             <$> f _computed_document_type

instance HasComputedHash SsmDocumentResource (TF.Attribute Text) where
    computedHash f s@SsmDocumentResource{..} =
        (\a -> s { _computed_hash = a } :: SsmDocumentResource)
             <$> f _computed_hash

instance HasComputedHashType SsmDocumentResource (TF.Attribute Text) where
    computedHashType f s@SsmDocumentResource{..} =
        (\a -> s { _computed_hash_type = a } :: SsmDocumentResource)
             <$> f _computed_hash_type

instance HasComputedLatestVersion SsmDocumentResource (TF.Attribute Text) where
    computedLatestVersion f s@SsmDocumentResource{..} =
        (\a -> s { _computed_latest_version = a } :: SsmDocumentResource)
             <$> f _computed_latest_version

instance HasComputedName SsmDocumentResource (TF.Attribute Text) where
    computedName f s@SsmDocumentResource{..} =
        (\a -> s { _computed_name = a } :: SsmDocumentResource)
             <$> f _computed_name

instance HasComputedOwner SsmDocumentResource (TF.Attribute Text) where
    computedOwner f s@SsmDocumentResource{..} =
        (\a -> s { _computed_owner = a } :: SsmDocumentResource)
             <$> f _computed_owner

instance HasComputedParameter SsmDocumentResource (TF.Attribute Text) where
    computedParameter f s@SsmDocumentResource{..} =
        (\a -> s { _computed_parameter = a } :: SsmDocumentResource)
             <$> f _computed_parameter

instance HasComputedPermissions SsmDocumentResource (TF.Attribute Text) where
    computedPermissions f s@SsmDocumentResource{..} =
        (\a -> s { _computed_permissions = a } :: SsmDocumentResource)
             <$> f _computed_permissions

instance HasComputedPlatformTypes SsmDocumentResource (TF.Attribute Text) where
    computedPlatformTypes f s@SsmDocumentResource{..} =
        (\a -> s { _computed_platform_types = a } :: SsmDocumentResource)
             <$> f _computed_platform_types

instance HasComputedSchemaVersion SsmDocumentResource (TF.Attribute Text) where
    computedSchemaVersion f s@SsmDocumentResource{..} =
        (\a -> s { _computed_schema_version = a } :: SsmDocumentResource)
             <$> f _computed_schema_version

instance HasComputedStatus SsmDocumentResource (TF.Attribute Text) where
    computedStatus f s@SsmDocumentResource{..} =
        (\a -> s { _computed_status = a } :: SsmDocumentResource)
             <$> f _computed_status

ssmDocumentResource :: TF.Resource TF.AWS SsmDocumentResource
ssmDocumentResource =
    TF.newResource "aws_ssm_document" $
        SsmDocumentResource {
            _content = TF.Nil
            , _document_type = TF.Nil
            , _name = TF.Nil
            , _permissions = TF.Nil
            , _computed_content = TF.Compute "content"
            , _computed_created_date = TF.Compute "created_date"
            , _computed_default_version = TF.Compute "default_version"
            , _computed_description = TF.Compute "description"
            , _computed_document_type = TF.Compute "document_type"
            , _computed_hash = TF.Compute "hash"
            , _computed_hash_type = TF.Compute "hash_type"
            , _computed_latest_version = TF.Compute "latest_version"
            , _computed_name = TF.Compute "name"
            , _computed_owner = TF.Compute "owner"
            , _computed_parameter = TF.Compute "parameter"
            , _computed_permissions = TF.Compute "permissions"
            , _computed_platform_types = TF.Compute "platform_types"
            , _computed_schema_version = TF.Compute "schema_version"
            , _computed_status = TF.Compute "status"
            }

{- | The @aws_ssm_maintenance_window@ AWS resource.

Provides an SSM Maintenance Window resource
-}
data SsmMaintenanceWindowResource = SsmMaintenanceWindowResource {
      _allow_unassociated_targets :: !(TF.Argument Text)
    {- ^ (Optional) Whether targets must be registered with the Maintenance Window before tasks can be defined for those targets. -}
    , _cutoff                     :: !(TF.Argument Text)
    {- ^ (Required) The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution. -}
    , _duration                   :: !(TF.Argument Text)
    {- ^ (Required) The duration of the Maintenance Window in hours. -}
    , _name                       :: !(TF.Argument Text)
    {- ^ (Required) The name of the maintenance window. -}
    , _schedule                   :: !(TF.Argument Text)
    {- ^ (Required) The schedule of the Maintenance Window in the form of a <https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-maintenance-cron.html> or rate expression. -}
    , _computed_id                :: !(TF.Attribute Text)
    {- ^ - The ID of the maintenance window. -}
    } deriving (Show, Eq)

instance TF.ToHCL SsmMaintenanceWindowResource where
    toHCL SsmMaintenanceWindowResource{..} = TF.block $ catMaybes
        [ TF.assign "allow_unassociated_targets" <$> TF.argument _allow_unassociated_targets
        , TF.assign "cutoff" <$> TF.argument _cutoff
        , TF.assign "duration" <$> TF.argument _duration
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "schedule" <$> TF.argument _schedule
        ]

instance HasAllowUnassociatedTargets SsmMaintenanceWindowResource (TF.Argument Text) where
    allowUnassociatedTargets f s@SsmMaintenanceWindowResource{..} =
        (\a -> s { _allow_unassociated_targets = a } :: SsmMaintenanceWindowResource)
             <$> f _allow_unassociated_targets

instance HasCutoff SsmMaintenanceWindowResource (TF.Argument Text) where
    cutoff f s@SsmMaintenanceWindowResource{..} =
        (\a -> s { _cutoff = a } :: SsmMaintenanceWindowResource)
             <$> f _cutoff

instance HasDuration SsmMaintenanceWindowResource (TF.Argument Text) where
    duration f s@SsmMaintenanceWindowResource{..} =
        (\a -> s { _duration = a } :: SsmMaintenanceWindowResource)
             <$> f _duration

instance HasName SsmMaintenanceWindowResource (TF.Argument Text) where
    name f s@SsmMaintenanceWindowResource{..} =
        (\a -> s { _name = a } :: SsmMaintenanceWindowResource)
             <$> f _name

instance HasSchedule SsmMaintenanceWindowResource (TF.Argument Text) where
    schedule f s@SsmMaintenanceWindowResource{..} =
        (\a -> s { _schedule = a } :: SsmMaintenanceWindowResource)
             <$> f _schedule

instance HasComputedId SsmMaintenanceWindowResource (TF.Attribute Text) where
    computedId f s@SsmMaintenanceWindowResource{..} =
        (\a -> s { _computed_id = a } :: SsmMaintenanceWindowResource)
             <$> f _computed_id

ssmMaintenanceWindowResource :: TF.Resource TF.AWS SsmMaintenanceWindowResource
ssmMaintenanceWindowResource =
    TF.newResource "aws_ssm_maintenance_window" $
        SsmMaintenanceWindowResource {
            _allow_unassociated_targets = TF.Nil
            , _cutoff = TF.Nil
            , _duration = TF.Nil
            , _name = TF.Nil
            , _schedule = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_ssm_maintenance_window_target@ AWS resource.

Provides an SSM Maintenance Window Target resource
-}
data SsmMaintenanceWindowTargetResource = SsmMaintenanceWindowTargetResource {
      _owner_information :: !(TF.Argument Text)
    {- ^ (Optional) User-provided value that will be included in any CloudWatch events raised while running tasks for these targets in this Maintenance Window. -}
    , _resource_type     :: !(TF.Argument Text)
    {- ^ (Required) The type of target being registered with the Maintenance Window. Possible values @INSTANCE@ . -}
    , _targets           :: !(TF.Argument Text)
    {- ^ (Required) The targets (either instances or tags). Instances are specified using Key=instanceids,Values=instanceid1,instanceid2. Tags are specified using Key=tag name,Values=tag value. -}
    , _window_id         :: !(TF.Argument Text)
    {- ^ (Required) The Id of the maintenance window to register the target with. -}
    , _computed_id       :: !(TF.Attribute Text)
    {- ^ - The ID of the maintenance window target. -}
    } deriving (Show, Eq)

instance TF.ToHCL SsmMaintenanceWindowTargetResource where
    toHCL SsmMaintenanceWindowTargetResource{..} = TF.block $ catMaybes
        [ TF.assign "owner_information" <$> TF.argument _owner_information
        , TF.assign "resource_type" <$> TF.argument _resource_type
        , TF.assign "targets" <$> TF.argument _targets
        , TF.assign "window_id" <$> TF.argument _window_id
        ]

instance HasOwnerInformation SsmMaintenanceWindowTargetResource (TF.Argument Text) where
    ownerInformation f s@SsmMaintenanceWindowTargetResource{..} =
        (\a -> s { _owner_information = a } :: SsmMaintenanceWindowTargetResource)
             <$> f _owner_information

instance HasResourceType SsmMaintenanceWindowTargetResource (TF.Argument Text) where
    resourceType f s@SsmMaintenanceWindowTargetResource{..} =
        (\a -> s { _resource_type = a } :: SsmMaintenanceWindowTargetResource)
             <$> f _resource_type

instance HasTargets SsmMaintenanceWindowTargetResource (TF.Argument Text) where
    targets f s@SsmMaintenanceWindowTargetResource{..} =
        (\a -> s { _targets = a } :: SsmMaintenanceWindowTargetResource)
             <$> f _targets

instance HasWindowId SsmMaintenanceWindowTargetResource (TF.Argument Text) where
    windowId f s@SsmMaintenanceWindowTargetResource{..} =
        (\a -> s { _window_id = a } :: SsmMaintenanceWindowTargetResource)
             <$> f _window_id

instance HasComputedId SsmMaintenanceWindowTargetResource (TF.Attribute Text) where
    computedId f s@SsmMaintenanceWindowTargetResource{..} =
        (\a -> s { _computed_id = a } :: SsmMaintenanceWindowTargetResource)
             <$> f _computed_id

ssmMaintenanceWindowTargetResource :: TF.Resource TF.AWS SsmMaintenanceWindowTargetResource
ssmMaintenanceWindowTargetResource =
    TF.newResource "aws_ssm_maintenance_window_target" $
        SsmMaintenanceWindowTargetResource {
            _owner_information = TF.Nil
            , _resource_type = TF.Nil
            , _targets = TF.Nil
            , _window_id = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_ssm_maintenance_window_task@ AWS resource.

Provides an SSM Maintenance Window Task resource
-}
data SsmMaintenanceWindowTaskResource = SsmMaintenanceWindowTaskResource {
      _logging_info     :: !(TF.Argument Text)
    {- ^ (Optional) A structure containing information about an Amazon S3 bucket to write instance-level logs to. Documented below. -}
    , _max_concurrency  :: !(TF.Argument Text)
    {- ^ (Required) The maximum number of targets this task can be run for in parallel. -}
    , _max_errors       :: !(TF.Argument Text)
    {- ^ (Required) The maximum number of errors allowed before this task stops being scheduled. -}
    , _priority         :: !(TF.Argument Text)
    {- ^ (Optional) The priority of the task in the Maintenance Window, the lower the number the higher the priority. Tasks in a Maintenance Window are scheduled in priority order with tasks that have the same priority scheduled in parallel. -}
    , _service_role_arn :: !(TF.Argument Text)
    {- ^ (Required) The role that should be assumed when executing the task. -}
    , _targets          :: !(TF.Argument Text)
    {- ^ (Required) The targets (either instances or window target ids). Instances are specified using Key=InstanceIds,Values=instanceid1,instanceid2. Window target ids are specified using Key=WindowTargetIds,Values=window target id1, window target id2. -}
    , _task_arn         :: !(TF.Argument Text)
    {- ^ (Required) The ARN of the task to execute. -}
    , _task_parameters  :: !(TF.Argument Text)
    {- ^ (Optional) A structure containing information about parameters required by the particular @task_arn@ . Documented below. -}
    , _task_type        :: !(TF.Argument Text)
    {- ^ (Required) The type of task being registered. The only allowed value is @RUN_COMMAND@ . -}
    , _window_id        :: !(TF.Argument Text)
    {- ^ (Required) The Id of the maintenance window to register the task with. -}
    , _computed_id      :: !(TF.Attribute Text)
    {- ^ - The ID of the maintenance window task. -}
    } deriving (Show, Eq)

instance TF.ToHCL SsmMaintenanceWindowTaskResource where
    toHCL SsmMaintenanceWindowTaskResource{..} = TF.block $ catMaybes
        [ TF.assign "logging_info" <$> TF.argument _logging_info
        , TF.assign "max_concurrency" <$> TF.argument _max_concurrency
        , TF.assign "max_errors" <$> TF.argument _max_errors
        , TF.assign "priority" <$> TF.argument _priority
        , TF.assign "service_role_arn" <$> TF.argument _service_role_arn
        , TF.assign "targets" <$> TF.argument _targets
        , TF.assign "task_arn" <$> TF.argument _task_arn
        , TF.assign "task_parameters" <$> TF.argument _task_parameters
        , TF.assign "task_type" <$> TF.argument _task_type
        , TF.assign "window_id" <$> TF.argument _window_id
        ]

instance HasLoggingInfo SsmMaintenanceWindowTaskResource (TF.Argument Text) where
    loggingInfo f s@SsmMaintenanceWindowTaskResource{..} =
        (\a -> s { _logging_info = a } :: SsmMaintenanceWindowTaskResource)
             <$> f _logging_info

instance HasMaxConcurrency SsmMaintenanceWindowTaskResource (TF.Argument Text) where
    maxConcurrency f s@SsmMaintenanceWindowTaskResource{..} =
        (\a -> s { _max_concurrency = a } :: SsmMaintenanceWindowTaskResource)
             <$> f _max_concurrency

instance HasMaxErrors SsmMaintenanceWindowTaskResource (TF.Argument Text) where
    maxErrors f s@SsmMaintenanceWindowTaskResource{..} =
        (\a -> s { _max_errors = a } :: SsmMaintenanceWindowTaskResource)
             <$> f _max_errors

instance HasPriority SsmMaintenanceWindowTaskResource (TF.Argument Text) where
    priority f s@SsmMaintenanceWindowTaskResource{..} =
        (\a -> s { _priority = a } :: SsmMaintenanceWindowTaskResource)
             <$> f _priority

instance HasServiceRoleArn SsmMaintenanceWindowTaskResource (TF.Argument Text) where
    serviceRoleArn f s@SsmMaintenanceWindowTaskResource{..} =
        (\a -> s { _service_role_arn = a } :: SsmMaintenanceWindowTaskResource)
             <$> f _service_role_arn

instance HasTargets SsmMaintenanceWindowTaskResource (TF.Argument Text) where
    targets f s@SsmMaintenanceWindowTaskResource{..} =
        (\a -> s { _targets = a } :: SsmMaintenanceWindowTaskResource)
             <$> f _targets

instance HasTaskArn SsmMaintenanceWindowTaskResource (TF.Argument Text) where
    taskArn f s@SsmMaintenanceWindowTaskResource{..} =
        (\a -> s { _task_arn = a } :: SsmMaintenanceWindowTaskResource)
             <$> f _task_arn

instance HasTaskParameters SsmMaintenanceWindowTaskResource (TF.Argument Text) where
    taskParameters f s@SsmMaintenanceWindowTaskResource{..} =
        (\a -> s { _task_parameters = a } :: SsmMaintenanceWindowTaskResource)
             <$> f _task_parameters

instance HasTaskType SsmMaintenanceWindowTaskResource (TF.Argument Text) where
    taskType f s@SsmMaintenanceWindowTaskResource{..} =
        (\a -> s { _task_type = a } :: SsmMaintenanceWindowTaskResource)
             <$> f _task_type

instance HasWindowId SsmMaintenanceWindowTaskResource (TF.Argument Text) where
    windowId f s@SsmMaintenanceWindowTaskResource{..} =
        (\a -> s { _window_id = a } :: SsmMaintenanceWindowTaskResource)
             <$> f _window_id

instance HasComputedId SsmMaintenanceWindowTaskResource (TF.Attribute Text) where
    computedId f s@SsmMaintenanceWindowTaskResource{..} =
        (\a -> s { _computed_id = a } :: SsmMaintenanceWindowTaskResource)
             <$> f _computed_id

ssmMaintenanceWindowTaskResource :: TF.Resource TF.AWS SsmMaintenanceWindowTaskResource
ssmMaintenanceWindowTaskResource =
    TF.newResource "aws_ssm_maintenance_window_task" $
        SsmMaintenanceWindowTaskResource {
            _logging_info = TF.Nil
            , _max_concurrency = TF.Nil
            , _max_errors = TF.Nil
            , _priority = TF.Nil
            , _service_role_arn = TF.Nil
            , _targets = TF.Nil
            , _task_arn = TF.Nil
            , _task_parameters = TF.Nil
            , _task_type = TF.Nil
            , _window_id = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_ssm_parameter@ AWS resource.

Provides an SSM Parameter resource.
-}
data SsmParameterResource = SsmParameterResource {
      _key_id         :: !(TF.Argument Text)
    {- ^ (Optional) The KMS key id or arn for encrypting a SecureString. -}
    , _name           :: !(TF.Argument Text)
    {- ^ (Required) The name of the parameter. -}
    , _overwrite      :: !(TF.Argument Text)
    {- ^ (Optional) Overwrite an existing parameter. If not specified, will default to @false@ . -}
    , _type'          :: !(TF.Argument Text)
    {- ^ (Required) The type of the parameter. Valid types are @String@ , @StringList@ and @SecureString@ . -}
    , _value          :: !(TF.Argument Text)
    {- ^ (Required) The value of the parameter. -}
    , _computed_arn   :: !(TF.Attribute Text)
    {- ^ - The ARN of the parameter. -}
    , _computed_name  :: !(TF.Attribute Text)
    {- ^ - (Required) The name of the parameter. -}
    , _computed_type' :: !(TF.Attribute Text)
    {- ^ - (Required) The type of the parameter. Valid types are @String@ , @StringList@ and @SecureString@ . -}
    , _computed_value :: !(TF.Attribute Text)
    {- ^ - (Required) The value of the parameter. -}
    } deriving (Show, Eq)

instance TF.ToHCL SsmParameterResource where
    toHCL SsmParameterResource{..} = TF.block $ catMaybes
        [ TF.assign "key_id" <$> TF.argument _key_id
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "overwrite" <$> TF.argument _overwrite
        , TF.assign "type" <$> TF.argument _type'
        , TF.assign "value" <$> TF.argument _value
        ]

instance HasKeyId SsmParameterResource (TF.Argument Text) where
    keyId f s@SsmParameterResource{..} =
        (\a -> s { _key_id = a } :: SsmParameterResource)
             <$> f _key_id

instance HasName SsmParameterResource (TF.Argument Text) where
    name f s@SsmParameterResource{..} =
        (\a -> s { _name = a } :: SsmParameterResource)
             <$> f _name

instance HasOverwrite SsmParameterResource (TF.Argument Text) where
    overwrite f s@SsmParameterResource{..} =
        (\a -> s { _overwrite = a } :: SsmParameterResource)
             <$> f _overwrite

instance HasType' SsmParameterResource (TF.Argument Text) where
    type' f s@SsmParameterResource{..} =
        (\a -> s { _type' = a } :: SsmParameterResource)
             <$> f _type'

instance HasValue SsmParameterResource (TF.Argument Text) where
    value f s@SsmParameterResource{..} =
        (\a -> s { _value = a } :: SsmParameterResource)
             <$> f _value

instance HasComputedArn SsmParameterResource (TF.Attribute Text) where
    computedArn f s@SsmParameterResource{..} =
        (\a -> s { _computed_arn = a } :: SsmParameterResource)
             <$> f _computed_arn

instance HasComputedName SsmParameterResource (TF.Attribute Text) where
    computedName f s@SsmParameterResource{..} =
        (\a -> s { _computed_name = a } :: SsmParameterResource)
             <$> f _computed_name

instance HasComputedType' SsmParameterResource (TF.Attribute Text) where
    computedType' f s@SsmParameterResource{..} =
        (\a -> s { _computed_type' = a } :: SsmParameterResource)
             <$> f _computed_type'

instance HasComputedValue SsmParameterResource (TF.Attribute Text) where
    computedValue f s@SsmParameterResource{..} =
        (\a -> s { _computed_value = a } :: SsmParameterResource)
             <$> f _computed_value

ssmParameterResource :: TF.Resource TF.AWS SsmParameterResource
ssmParameterResource =
    TF.newResource "aws_ssm_parameter" $
        SsmParameterResource {
            _key_id = TF.Nil
            , _name = TF.Nil
            , _overwrite = TF.Nil
            , _type' = TF.Nil
            , _value = TF.Nil
            , _computed_arn = TF.Compute "arn"
            , _computed_name = TF.Compute "name"
            , _computed_type' = TF.Compute "type"
            , _computed_value = TF.Compute "value"
            }

{- | The @aws_ssm_patch_baseline@ AWS resource.

Provides an SSM Patch Baseline resource ~> NOTE on Patch Baselines: The
@approved_patches@ and @approval_rule@ are both marked as optional fields,
but the Patch Baseline requires that at least one of them is specified.
-}
data SsmPatchBaselineResource = SsmPatchBaselineResource {
      _approval_rule                     :: !(TF.Argument Text)
    {- ^ (Optional) A set of rules used to include patches in the baseline. up to 10 approval rules can be specified. Each approval_rule block requires the fields documented below. -}
    , _approved_patches                  :: !(TF.Argument Text)
    {- ^ (Optional) A list of explicitly approved patches for the baseline. -}
    , _approved_patches_compliance_level :: !(TF.Argument Text)
    {- ^ (Optional) Defines the compliance level for approved patches. This means that if an approved patch is reported as missing, this is the severity of the compliance violation. Valid compliance levels include the following: @CRITICAL@ , @HIGH@ , @MEDIUM@ , @LOW@ , @INFORMATIONAL@ , @UNSPECIFIED@ . The default value is @UNSPECIFIED@ . -}
    , _description                       :: !(TF.Argument Text)
    {- ^ (Optional) The description of the patch baseline. -}
    , _global_filter                     :: !(TF.Argument Text)
    {- ^ (Optional) A set of global filters used to exclude patches from the baseline. Up to 4 global filters can be specified using Key/Value pairs. Valid Keys are @PRODUCT | CLASSIFICATION | MSRC_SEVERITY | PATCH_ID@ . -}
    , _name                              :: !(TF.Argument Text)
    {- ^ (Required) The name of the patch baseline. -}
    , _operating_system                  :: !(TF.Argument Text)
    {- ^ (Optional) Defines the operating system the patch baseline applies to. Supported operating systems include @WINDOWS@ , @AMAZON_LINUX@ , @UBUNTU@ and @REDHAT_ENTERPRISE_LINUX@ . The Default value is @WINDOWS@ . -}
    , _rejected_patches                  :: !(TF.Argument Text)
    {- ^ (Optional) A list of rejected patches. -}
    , _computed_id                       :: !(TF.Attribute Text)
    {- ^ - The ID of the patch baseline. -}
    } deriving (Show, Eq)

instance TF.ToHCL SsmPatchBaselineResource where
    toHCL SsmPatchBaselineResource{..} = TF.block $ catMaybes
        [ TF.assign "approval_rule" <$> TF.argument _approval_rule
        , TF.assign "approved_patches" <$> TF.argument _approved_patches
        , TF.assign "approved_patches_compliance_level" <$> TF.argument _approved_patches_compliance_level
        , TF.assign "description" <$> TF.argument _description
        , TF.assign "global_filter" <$> TF.argument _global_filter
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "operating_system" <$> TF.argument _operating_system
        , TF.assign "rejected_patches" <$> TF.argument _rejected_patches
        ]

instance HasApprovalRule SsmPatchBaselineResource (TF.Argument Text) where
    approvalRule f s@SsmPatchBaselineResource{..} =
        (\a -> s { _approval_rule = a } :: SsmPatchBaselineResource)
             <$> f _approval_rule

instance HasApprovedPatches SsmPatchBaselineResource (TF.Argument Text) where
    approvedPatches f s@SsmPatchBaselineResource{..} =
        (\a -> s { _approved_patches = a } :: SsmPatchBaselineResource)
             <$> f _approved_patches

instance HasApprovedPatchesComplianceLevel SsmPatchBaselineResource (TF.Argument Text) where
    approvedPatchesComplianceLevel f s@SsmPatchBaselineResource{..} =
        (\a -> s { _approved_patches_compliance_level = a } :: SsmPatchBaselineResource)
             <$> f _approved_patches_compliance_level

instance HasDescription SsmPatchBaselineResource (TF.Argument Text) where
    description f s@SsmPatchBaselineResource{..} =
        (\a -> s { _description = a } :: SsmPatchBaselineResource)
             <$> f _description

instance HasGlobalFilter SsmPatchBaselineResource (TF.Argument Text) where
    globalFilter f s@SsmPatchBaselineResource{..} =
        (\a -> s { _global_filter = a } :: SsmPatchBaselineResource)
             <$> f _global_filter

instance HasName SsmPatchBaselineResource (TF.Argument Text) where
    name f s@SsmPatchBaselineResource{..} =
        (\a -> s { _name = a } :: SsmPatchBaselineResource)
             <$> f _name

instance HasOperatingSystem SsmPatchBaselineResource (TF.Argument Text) where
    operatingSystem f s@SsmPatchBaselineResource{..} =
        (\a -> s { _operating_system = a } :: SsmPatchBaselineResource)
             <$> f _operating_system

instance HasRejectedPatches SsmPatchBaselineResource (TF.Argument Text) where
    rejectedPatches f s@SsmPatchBaselineResource{..} =
        (\a -> s { _rejected_patches = a } :: SsmPatchBaselineResource)
             <$> f _rejected_patches

instance HasComputedId SsmPatchBaselineResource (TF.Attribute Text) where
    computedId f s@SsmPatchBaselineResource{..} =
        (\a -> s { _computed_id = a } :: SsmPatchBaselineResource)
             <$> f _computed_id

ssmPatchBaselineResource :: TF.Resource TF.AWS SsmPatchBaselineResource
ssmPatchBaselineResource =
    TF.newResource "aws_ssm_patch_baseline" $
        SsmPatchBaselineResource {
            _approval_rule = TF.Nil
            , _approved_patches = TF.Nil
            , _approved_patches_compliance_level = TF.Nil
            , _description = TF.Nil
            , _global_filter = TF.Nil
            , _name = TF.Nil
            , _operating_system = TF.Nil
            , _rejected_patches = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_ssm_patch_group@ AWS resource.

Provides an SSM Patch Group resource
-}
data SsmPatchGroupResource = SsmPatchGroupResource {
      _baseline_id :: !(TF.Argument Text)
    {- ^ (Required) The ID of the patch baseline to register the patch group with. -}
    , _patch_group :: !(TF.Argument Text)
    {- ^ (Required) The name of the patch group that should be registered with the patch baseline. -}
    , _computed_id :: !(TF.Attribute Text)
    {- ^ - The ID of the patch baseline. -}
    } deriving (Show, Eq)

instance TF.ToHCL SsmPatchGroupResource where
    toHCL SsmPatchGroupResource{..} = TF.block $ catMaybes
        [ TF.assign "baseline_id" <$> TF.argument _baseline_id
        , TF.assign "patch_group" <$> TF.argument _patch_group
        ]

instance HasBaselineId SsmPatchGroupResource (TF.Argument Text) where
    baselineId f s@SsmPatchGroupResource{..} =
        (\a -> s { _baseline_id = a } :: SsmPatchGroupResource)
             <$> f _baseline_id

instance HasPatchGroup SsmPatchGroupResource (TF.Argument Text) where
    patchGroup f s@SsmPatchGroupResource{..} =
        (\a -> s { _patch_group = a } :: SsmPatchGroupResource)
             <$> f _patch_group

instance HasComputedId SsmPatchGroupResource (TF.Attribute Text) where
    computedId f s@SsmPatchGroupResource{..} =
        (\a -> s { _computed_id = a } :: SsmPatchGroupResource)
             <$> f _computed_id

ssmPatchGroupResource :: TF.Resource TF.AWS SsmPatchGroupResource
ssmPatchGroupResource =
    TF.newResource "aws_ssm_patch_group" $
        SsmPatchGroupResource {
            _baseline_id = TF.Nil
            , _patch_group = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @sfn_state_machine@ AWS resource.

Provides a Step Function State Machine resource
-}
data StateMachineResource = StateMachineResource {
      _definition             :: !(TF.Argument Text)
    {- ^ (Required) The Amazon States Language definition of the state machine. -}
    , _name                   :: !(TF.Argument Text)
    {- ^ (Required) The name of the state machine. -}
    , _role_arn               :: !(TF.Argument Text)
    {- ^ (Required) The Amazon Resource Name (ARN) of the IAM role to use for this state machine. -}
    , _computed_creation_date :: !(TF.Attribute Text)
    {- ^ - The date the state machine was created. -}
    , _computed_id            :: !(TF.Attribute Text)
    {- ^ - The ARN of the state machine. -}
    , _computed_status        :: !(TF.Attribute Text)
    {- ^ - The current status of the state machine. Either "ACTIVE" or "DELETING". -}
    } deriving (Show, Eq)

instance TF.ToHCL StateMachineResource where
    toHCL StateMachineResource{..} = TF.block $ catMaybes
        [ TF.assign "definition" <$> TF.argument _definition
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "role_arn" <$> TF.argument _role_arn
        ]

instance HasDefinition StateMachineResource (TF.Argument Text) where
    definition f s@StateMachineResource{..} =
        (\a -> s { _definition = a } :: StateMachineResource)
             <$> f _definition

instance HasName StateMachineResource (TF.Argument Text) where
    name f s@StateMachineResource{..} =
        (\a -> s { _name = a } :: StateMachineResource)
             <$> f _name

instance HasRoleArn StateMachineResource (TF.Argument Text) where
    roleArn f s@StateMachineResource{..} =
        (\a -> s { _role_arn = a } :: StateMachineResource)
             <$> f _role_arn

instance HasComputedCreationDate StateMachineResource (TF.Attribute Text) where
    computedCreationDate f s@StateMachineResource{..} =
        (\a -> s { _computed_creation_date = a } :: StateMachineResource)
             <$> f _computed_creation_date

instance HasComputedId StateMachineResource (TF.Attribute Text) where
    computedId f s@StateMachineResource{..} =
        (\a -> s { _computed_id = a } :: StateMachineResource)
             <$> f _computed_id

instance HasComputedStatus StateMachineResource (TF.Attribute Text) where
    computedStatus f s@StateMachineResource{..} =
        (\a -> s { _computed_status = a } :: StateMachineResource)
             <$> f _computed_status

stateMachineResource :: TF.Resource TF.AWS StateMachineResource
stateMachineResource =
    TF.newResource "sfn_state_machine" $
        StateMachineResource {
            _definition = TF.Nil
            , _name = TF.Nil
            , _role_arn = TF.Nil
            , _computed_creation_date = TF.Compute "creation_date"
            , _computed_id = TF.Compute "id"
            , _computed_status = TF.Compute "status"
            }

{- | The @aws_subnet@ AWS resource.

Provides an VPC subnet resource.
-}
data SubnetResource = SubnetResource {
      _assign_ipv6_address_on_creation :: !(TF.Argument Text)
    {- ^ (Optional) Specify true to indicate that network interfaces created in the specified subnet should be assigned an IPv6 address. Default is @false@ -}
    , _availability_zone               :: !(TF.Argument Text)
    {- ^ (Optional) The AZ for the subnet. -}
    , _cidr_block                      :: !(TF.Argument Text)
    {- ^ (Required) The CIDR block for the subnet. -}
    , _ipv6_cidr_block                 :: !(TF.Argument Text)
    {- ^ (Optional) The IPv6 network range for the subnet, in CIDR notation. The subnet size must use a /64 prefix length. -}
    , _map_public_ip_on_launch         :: !(TF.Argument Text)
    {- ^ -  (Optional) Specify true to indicate that instances launched into the subnet should be assigned a public IP address. Default is @false@ . -}
    , _tags                            :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _vpc_id                          :: !(TF.Argument Text)
    {- ^ (Required) The VPC ID. -}
    , _computed_availability_zone      :: !(TF.Attribute Text)
    {- ^ - The AZ for the subnet. -}
    , _computed_cidr_block             :: !(TF.Attribute Text)
    {- ^ - The CIDR block for the subnet. -}
    , _computed_id                     :: !(TF.Attribute Text)
    {- ^ - The ID of the subnet -}
    , _computed_ipv6_association_id    :: !(TF.Attribute Text)
    {- ^ - The association ID for the IPv6 CIDR block. -}
    , _computed_ipv6_cidr_block        :: !(TF.Attribute Text)
    {- ^ - The IPv6 CIDR block. -}
    , _computed_vpc_id                 :: !(TF.Attribute Text)
    {- ^ - The VPC ID. -}
    } deriving (Show, Eq)

instance TF.ToHCL SubnetResource where
    toHCL SubnetResource{..} = TF.block $ catMaybes
        [ TF.assign "assign_ipv6_address_on_creation" <$> TF.argument _assign_ipv6_address_on_creation
        , TF.assign "availability_zone" <$> TF.argument _availability_zone
        , TF.assign "cidr_block" <$> TF.argument _cidr_block
        , TF.assign "ipv6_cidr_block" <$> TF.argument _ipv6_cidr_block
        , TF.assign "map_public_ip_on_launch" <$> TF.argument _map_public_ip_on_launch
        , TF.assign "tags" <$> TF.argument _tags
        , TF.assign "vpc_id" <$> TF.argument _vpc_id
        ]

instance HasAssignIpv6AddressOnCreation SubnetResource (TF.Argument Text) where
    assignIpv6AddressOnCreation f s@SubnetResource{..} =
        (\a -> s { _assign_ipv6_address_on_creation = a } :: SubnetResource)
             <$> f _assign_ipv6_address_on_creation

instance HasAvailabilityZone SubnetResource (TF.Argument Text) where
    availabilityZone f s@SubnetResource{..} =
        (\a -> s { _availability_zone = a } :: SubnetResource)
             <$> f _availability_zone

instance HasCidrBlock SubnetResource (TF.Argument Text) where
    cidrBlock f s@SubnetResource{..} =
        (\a -> s { _cidr_block = a } :: SubnetResource)
             <$> f _cidr_block

instance HasIpv6CidrBlock SubnetResource (TF.Argument Text) where
    ipv6CidrBlock f s@SubnetResource{..} =
        (\a -> s { _ipv6_cidr_block = a } :: SubnetResource)
             <$> f _ipv6_cidr_block

instance HasMapPublicIpOnLaunch SubnetResource (TF.Argument Text) where
    mapPublicIpOnLaunch f s@SubnetResource{..} =
        (\a -> s { _map_public_ip_on_launch = a } :: SubnetResource)
             <$> f _map_public_ip_on_launch

instance HasTags SubnetResource (TF.Argument TF.Tags) where
    tags f s@SubnetResource{..} =
        (\a -> s { _tags = a } :: SubnetResource)
             <$> f _tags

instance HasVpcId SubnetResource (TF.Argument Text) where
    vpcId f s@SubnetResource{..} =
        (\a -> s { _vpc_id = a } :: SubnetResource)
             <$> f _vpc_id

instance HasComputedAvailabilityZone SubnetResource (TF.Attribute Text) where
    computedAvailabilityZone f s@SubnetResource{..} =
        (\a -> s { _computed_availability_zone = a } :: SubnetResource)
             <$> f _computed_availability_zone

instance HasComputedCidrBlock SubnetResource (TF.Attribute Text) where
    computedCidrBlock f s@SubnetResource{..} =
        (\a -> s { _computed_cidr_block = a } :: SubnetResource)
             <$> f _computed_cidr_block

instance HasComputedId SubnetResource (TF.Attribute Text) where
    computedId f s@SubnetResource{..} =
        (\a -> s { _computed_id = a } :: SubnetResource)
             <$> f _computed_id

instance HasComputedIpv6AssociationId SubnetResource (TF.Attribute Text) where
    computedIpv6AssociationId f s@SubnetResource{..} =
        (\a -> s { _computed_ipv6_association_id = a } :: SubnetResource)
             <$> f _computed_ipv6_association_id

instance HasComputedIpv6CidrBlock SubnetResource (TF.Attribute Text) where
    computedIpv6CidrBlock f s@SubnetResource{..} =
        (\a -> s { _computed_ipv6_cidr_block = a } :: SubnetResource)
             <$> f _computed_ipv6_cidr_block

instance HasComputedVpcId SubnetResource (TF.Attribute Text) where
    computedVpcId f s@SubnetResource{..} =
        (\a -> s { _computed_vpc_id = a } :: SubnetResource)
             <$> f _computed_vpc_id

subnetResource :: TF.Resource TF.AWS SubnetResource
subnetResource =
    TF.newResource "aws_subnet" $
        SubnetResource {
            _assign_ipv6_address_on_creation = TF.Nil
            , _availability_zone = TF.Nil
            , _cidr_block = TF.Nil
            , _ipv6_cidr_block = TF.Nil
            , _map_public_ip_on_launch = TF.Nil
            , _tags = TF.Nil
            , _vpc_id = TF.Nil
            , _computed_availability_zone = TF.Compute "availability_zone"
            , _computed_cidr_block = TF.Compute "cidr_block"
            , _computed_id = TF.Compute "id"
            , _computed_ipv6_association_id = TF.Compute "ipv6_association_id"
            , _computed_ipv6_cidr_block = TF.Compute "ipv6_cidr_block"
            , _computed_vpc_id = TF.Compute "vpc_id"
            }

{- | The @aws_volume_attachment@ AWS resource.

Provides an AWS EBS Volume Attachment as a top level resource, to attach and
detach volumes from AWS Instances. ~> NOTE on EBS block devices: If you use
@ebs_block_device@ on an @aws_instance@ , Terraform will assume management
over the full set of non-root EBS block devices for the instance, and treats
additional block devices as drift. For this reason, @ebs_block_device@
cannot be mixed with external @aws_ebs_volume@ + @aws_ebs_volume_attachment@
resources for a given instance.
-}
data VolumeAttachmentResource = VolumeAttachmentResource {
      _device_name          :: !(TF.Argument Text)
    {- ^ (Required) The device name to expose to the instance (for example, @/dev/sdh@ or @xvdh@ ) -}
    , _force_detach         :: !(TF.Argument Text)
    {- ^ (Optional, Boolean) Set to @true@ if you want to force the volume to detach. Useful if previous attempts failed, but use this option only as a last resort, as this can result in data loss . See <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-detaching-volume.html> for more information. -}
    , _instance_id          :: !(TF.Argument Text)
    {- ^ (Required) ID of the Instance to attach to -}
    , _skip_destroy         :: !(TF.Argument Text)
    {- ^ (Optional, Boolean) Set this to true if you do not wish to detach the volume from the instance to which it is attached at destroy time, and instead just remove the attachment from Terraform state. This is useful when destroying an instance which has volumes created by some other means attached. -}
    , _volume_id            :: !(TF.Argument Text)
    {- ^ (Required) ID of the Volume to be attached -}
    , _computed_device_name :: !(TF.Attribute Text)
    {- ^ - The device name exposed to the instance -}
    , _computed_instance_id :: !(TF.Attribute Text)
    {- ^ - ID of the Instance -}
    , _computed_volume_id   :: !(TF.Attribute Text)
    {- ^ - ID of the Volume -}
    } deriving (Show, Eq)

instance TF.ToHCL VolumeAttachmentResource where
    toHCL VolumeAttachmentResource{..} = TF.block $ catMaybes
        [ TF.assign "device_name" <$> TF.argument _device_name
        , TF.assign "force_detach" <$> TF.argument _force_detach
        , TF.assign "instance_id" <$> TF.argument _instance_id
        , TF.assign "skip_destroy" <$> TF.argument _skip_destroy
        , TF.assign "volume_id" <$> TF.argument _volume_id
        ]

instance HasDeviceName VolumeAttachmentResource (TF.Argument Text) where
    deviceName f s@VolumeAttachmentResource{..} =
        (\a -> s { _device_name = a } :: VolumeAttachmentResource)
             <$> f _device_name

instance HasForceDetach VolumeAttachmentResource (TF.Argument Text) where
    forceDetach f s@VolumeAttachmentResource{..} =
        (\a -> s { _force_detach = a } :: VolumeAttachmentResource)
             <$> f _force_detach

instance HasInstanceId VolumeAttachmentResource (TF.Argument Text) where
    instanceId f s@VolumeAttachmentResource{..} =
        (\a -> s { _instance_id = a } :: VolumeAttachmentResource)
             <$> f _instance_id

instance HasSkipDestroy VolumeAttachmentResource (TF.Argument Text) where
    skipDestroy f s@VolumeAttachmentResource{..} =
        (\a -> s { _skip_destroy = a } :: VolumeAttachmentResource)
             <$> f _skip_destroy

instance HasVolumeId VolumeAttachmentResource (TF.Argument Text) where
    volumeId f s@VolumeAttachmentResource{..} =
        (\a -> s { _volume_id = a } :: VolumeAttachmentResource)
             <$> f _volume_id

instance HasComputedDeviceName VolumeAttachmentResource (TF.Attribute Text) where
    computedDeviceName f s@VolumeAttachmentResource{..} =
        (\a -> s { _computed_device_name = a } :: VolumeAttachmentResource)
             <$> f _computed_device_name

instance HasComputedInstanceId VolumeAttachmentResource (TF.Attribute Text) where
    computedInstanceId f s@VolumeAttachmentResource{..} =
        (\a -> s { _computed_instance_id = a } :: VolumeAttachmentResource)
             <$> f _computed_instance_id

instance HasComputedVolumeId VolumeAttachmentResource (TF.Attribute Text) where
    computedVolumeId f s@VolumeAttachmentResource{..} =
        (\a -> s { _computed_volume_id = a } :: VolumeAttachmentResource)
             <$> f _computed_volume_id

volumeAttachmentResource :: TF.Resource TF.AWS VolumeAttachmentResource
volumeAttachmentResource =
    TF.newResource "aws_volume_attachment" $
        VolumeAttachmentResource {
            _device_name = TF.Nil
            , _force_detach = TF.Nil
            , _instance_id = TF.Nil
            , _skip_destroy = TF.Nil
            , _volume_id = TF.Nil
            , _computed_device_name = TF.Compute "device_name"
            , _computed_instance_id = TF.Compute "instance_id"
            , _computed_volume_id = TF.Compute "volume_id"
            }

{- | The @aws_vpc_dhcp_options_association@ AWS resource.

Provides a VPC DHCP Options Association resource.
-}
data VpcDhcpOptionsAssociationResource = VpcDhcpOptionsAssociationResource {
      _dhcp_options_id :: !(TF.Argument Text)
    {- ^ (Required) The ID of the DHCP Options Set to associate to the VPC. -}
    , _vpc_id          :: !(TF.Argument Text)
    {- ^ (Required) The ID of the VPC to which we would like to associate a DHCP Options Set. -}
    } deriving (Show, Eq)

instance TF.ToHCL VpcDhcpOptionsAssociationResource where
    toHCL VpcDhcpOptionsAssociationResource{..} = TF.block $ catMaybes
        [ TF.assign "dhcp_options_id" <$> TF.argument _dhcp_options_id
        , TF.assign "vpc_id" <$> TF.argument _vpc_id
        ]

instance HasDhcpOptionsId VpcDhcpOptionsAssociationResource (TF.Argument Text) where
    dhcpOptionsId f s@VpcDhcpOptionsAssociationResource{..} =
        (\a -> s { _dhcp_options_id = a } :: VpcDhcpOptionsAssociationResource)
             <$> f _dhcp_options_id

instance HasVpcId VpcDhcpOptionsAssociationResource (TF.Argument Text) where
    vpcId f s@VpcDhcpOptionsAssociationResource{..} =
        (\a -> s { _vpc_id = a } :: VpcDhcpOptionsAssociationResource)
             <$> f _vpc_id

vpcDhcpOptionsAssociationResource :: TF.Resource TF.AWS VpcDhcpOptionsAssociationResource
vpcDhcpOptionsAssociationResource =
    TF.newResource "aws_vpc_dhcp_options_association" $
        VpcDhcpOptionsAssociationResource {
            _dhcp_options_id = TF.Nil
            , _vpc_id = TF.Nil
            }

{- | The @aws_vpc_dhcp_options@ AWS resource.

Provides a VPC DHCP Options resource.
-}
data VpcDhcpOptionsResource = VpcDhcpOptionsResource {
      _domain_name          :: !(TF.Argument Text)
    {- ^ (Optional) the suffix domain name to use by default when resolving non Fully Qualified Domain Names. In other words, this is what ends up being the @search@ value in the @/etc/resolv.conf@ file. -}
    , _domain_name_servers  :: !(TF.Argument Text)
    {- ^ (Optional) List of name servers to configure in @/etc/resolv.conf@ . If you want to use the default AWS nameservers you should set this to @AmazonProvidedDNS@ . -}
    , _netbios_name_servers :: !(TF.Argument Text)
    {- ^ (Optional) List of NETBIOS name servers. -}
    , _netbios_node_type    :: !(TF.Argument Text)
    {- ^ (Optional) The NetBIOS node type (1, 2, 4, or 8). AWS recommends to specify 2 since broadcast and multicast are not supported in their network. For more information about these node types, see <http://www.ietf.org/rfc/rfc2132.txt> . -}
    , _ntp_servers          :: !(TF.Argument Text)
    {- ^ (Optional) List of NTP servers to configure. -}
    , _tags                 :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    } deriving (Show, Eq)

instance TF.ToHCL VpcDhcpOptionsResource where
    toHCL VpcDhcpOptionsResource{..} = TF.block $ catMaybes
        [ TF.assign "domain_name" <$> TF.argument _domain_name
        , TF.assign "domain_name_servers" <$> TF.argument _domain_name_servers
        , TF.assign "netbios_name_servers" <$> TF.argument _netbios_name_servers
        , TF.assign "netbios_node_type" <$> TF.argument _netbios_node_type
        , TF.assign "ntp_servers" <$> TF.argument _ntp_servers
        , TF.assign "tags" <$> TF.argument _tags
        ]

instance HasDomainName VpcDhcpOptionsResource (TF.Argument Text) where
    domainName f s@VpcDhcpOptionsResource{..} =
        (\a -> s { _domain_name = a } :: VpcDhcpOptionsResource)
             <$> f _domain_name

instance HasDomainNameServers VpcDhcpOptionsResource (TF.Argument Text) where
    domainNameServers f s@VpcDhcpOptionsResource{..} =
        (\a -> s { _domain_name_servers = a } :: VpcDhcpOptionsResource)
             <$> f _domain_name_servers

instance HasNetbiosNameServers VpcDhcpOptionsResource (TF.Argument Text) where
    netbiosNameServers f s@VpcDhcpOptionsResource{..} =
        (\a -> s { _netbios_name_servers = a } :: VpcDhcpOptionsResource)
             <$> f _netbios_name_servers

instance HasNetbiosNodeType VpcDhcpOptionsResource (TF.Argument Text) where
    netbiosNodeType f s@VpcDhcpOptionsResource{..} =
        (\a -> s { _netbios_node_type = a } :: VpcDhcpOptionsResource)
             <$> f _netbios_node_type

instance HasNtpServers VpcDhcpOptionsResource (TF.Argument Text) where
    ntpServers f s@VpcDhcpOptionsResource{..} =
        (\a -> s { _ntp_servers = a } :: VpcDhcpOptionsResource)
             <$> f _ntp_servers

instance HasTags VpcDhcpOptionsResource (TF.Argument TF.Tags) where
    tags f s@VpcDhcpOptionsResource{..} =
        (\a -> s { _tags = a } :: VpcDhcpOptionsResource)
             <$> f _tags

vpcDhcpOptionsResource :: TF.Resource TF.AWS VpcDhcpOptionsResource
vpcDhcpOptionsResource =
    TF.newResource "aws_vpc_dhcp_options" $
        VpcDhcpOptionsResource {
            _domain_name = TF.Nil
            , _domain_name_servers = TF.Nil
            , _netbios_name_servers = TF.Nil
            , _netbios_node_type = TF.Nil
            , _ntp_servers = TF.Nil
            , _tags = TF.Nil
            }

{- | The @aws_vpc_endpoint@ AWS resource.

Provides a VPC Endpoint resource. ~> NOTE on VPC Endpoints and VPC Endpoint
Route Table Associations: Terraform provides both a standalone
<vpc_endpoint_route_table_association.html> (an association between a VPC
endpoint and a single @route_table_id@ ) and a VPC Endpoint resource with a
@route_table_ids@ attribute. Do not use the same route table ID in both a
VPC Endpoint resource and a VPC Endpoint Route Table Association resource.
Doing so will cause a conflict of associations and will overwrite the
association.
-}
data VpcEndpointResource = VpcEndpointResource {
      _policy                  :: !(TF.Argument Text)
    {- ^ (Optional) A policy to attach to the endpoint that controls access to the service. -}
    , _route_table_ids         :: !(TF.Argument Text)
    {- ^ (Optional) One or more route table IDs. -}
    , _service_name            :: !(TF.Argument Text)
    {- ^ (Required) The AWS service name, in the form @com.amazonaws.region.service@ . -}
    , _vpc_id                  :: !(TF.Argument Text)
    {- ^ (Required) The ID of the VPC in which the endpoint will be used. -}
    , _computed_cidr_blocks    :: !(TF.Attribute Text)
    {- ^ - The list of CIDR blocks for the exposed service. -}
    , _computed_id             :: !(TF.Attribute Text)
    {- ^ - The ID of the VPC endpoint. -}
    , _computed_prefix_list_id :: !(TF.Attribute Text)
    {- ^ - The prefix list ID of the exposed service. -}
    } deriving (Show, Eq)

instance TF.ToHCL VpcEndpointResource where
    toHCL VpcEndpointResource{..} = TF.block $ catMaybes
        [ TF.assign "policy" <$> TF.argument _policy
        , TF.assign "route_table_ids" <$> TF.argument _route_table_ids
        , TF.assign "service_name" <$> TF.argument _service_name
        , TF.assign "vpc_id" <$> TF.argument _vpc_id
        ]

instance HasPolicy VpcEndpointResource (TF.Argument Text) where
    policy f s@VpcEndpointResource{..} =
        (\a -> s { _policy = a } :: VpcEndpointResource)
             <$> f _policy

instance HasRouteTableIds VpcEndpointResource (TF.Argument Text) where
    routeTableIds f s@VpcEndpointResource{..} =
        (\a -> s { _route_table_ids = a } :: VpcEndpointResource)
             <$> f _route_table_ids

instance HasServiceName VpcEndpointResource (TF.Argument Text) where
    serviceName f s@VpcEndpointResource{..} =
        (\a -> s { _service_name = a } :: VpcEndpointResource)
             <$> f _service_name

instance HasVpcId VpcEndpointResource (TF.Argument Text) where
    vpcId f s@VpcEndpointResource{..} =
        (\a -> s { _vpc_id = a } :: VpcEndpointResource)
             <$> f _vpc_id

instance HasComputedCidrBlocks VpcEndpointResource (TF.Attribute Text) where
    computedCidrBlocks f s@VpcEndpointResource{..} =
        (\a -> s { _computed_cidr_blocks = a } :: VpcEndpointResource)
             <$> f _computed_cidr_blocks

instance HasComputedId VpcEndpointResource (TF.Attribute Text) where
    computedId f s@VpcEndpointResource{..} =
        (\a -> s { _computed_id = a } :: VpcEndpointResource)
             <$> f _computed_id

instance HasComputedPrefixListId VpcEndpointResource (TF.Attribute Text) where
    computedPrefixListId f s@VpcEndpointResource{..} =
        (\a -> s { _computed_prefix_list_id = a } :: VpcEndpointResource)
             <$> f _computed_prefix_list_id

vpcEndpointResource :: TF.Resource TF.AWS VpcEndpointResource
vpcEndpointResource =
    TF.newResource "aws_vpc_endpoint" $
        VpcEndpointResource {
            _policy = TF.Nil
            , _route_table_ids = TF.Nil
            , _service_name = TF.Nil
            , _vpc_id = TF.Nil
            , _computed_cidr_blocks = TF.Compute "cidr_blocks"
            , _computed_id = TF.Compute "id"
            , _computed_prefix_list_id = TF.Compute "prefix_list_id"
            }

{- | The @aws_vpc_endpoint_route_table_association@ AWS resource.

Provides a resource to create an association between a VPC endpoint and
routing table. ~> NOTE on VPC Endpoints and VPC Endpoint Route Table
Associations: Terraform provides both a standalone VPC Endpoint Route Table
Association (an association between a VPC endpoint and a single
@route_table_id@ ) and a <vpc_endpoint.html> resource with a
@route_table_ids@ attribute. Do not use the same route table ID in both a
VPC Endpoint resource and a VPC Endpoint Route Table Association resource.
Doing so will cause a conflict of associations and will overwrite the
association.
-}
data VpcEndpointRouteTableAssociationResource = VpcEndpointRouteTableAssociationResource {
      _route_table_id  :: !(TF.Argument Text)
    {- ^ (Required) The ID of the routing table to be associated with the VPC endpoint. -}
    , _vpc_endpoint_id :: !(TF.Argument Text)
    {- ^ (Required) The ID of the VPC endpoint with which the routing table will be associated. -}
    , _computed_id     :: !(TF.Attribute Text)
    {- ^ - The ID of the association. -}
    } deriving (Show, Eq)

instance TF.ToHCL VpcEndpointRouteTableAssociationResource where
    toHCL VpcEndpointRouteTableAssociationResource{..} = TF.block $ catMaybes
        [ TF.assign "route_table_id" <$> TF.argument _route_table_id
        , TF.assign "vpc_endpoint_id" <$> TF.argument _vpc_endpoint_id
        ]

instance HasRouteTableId VpcEndpointRouteTableAssociationResource (TF.Argument Text) where
    routeTableId f s@VpcEndpointRouteTableAssociationResource{..} =
        (\a -> s { _route_table_id = a } :: VpcEndpointRouteTableAssociationResource)
             <$> f _route_table_id

instance HasVpcEndpointId VpcEndpointRouteTableAssociationResource (TF.Argument Text) where
    vpcEndpointId f s@VpcEndpointRouteTableAssociationResource{..} =
        (\a -> s { _vpc_endpoint_id = a } :: VpcEndpointRouteTableAssociationResource)
             <$> f _vpc_endpoint_id

instance HasComputedId VpcEndpointRouteTableAssociationResource (TF.Attribute Text) where
    computedId f s@VpcEndpointRouteTableAssociationResource{..} =
        (\a -> s { _computed_id = a } :: VpcEndpointRouteTableAssociationResource)
             <$> f _computed_id

vpcEndpointRouteTableAssociationResource :: TF.Resource TF.AWS VpcEndpointRouteTableAssociationResource
vpcEndpointRouteTableAssociationResource =
    TF.newResource "aws_vpc_endpoint_route_table_association" $
        VpcEndpointRouteTableAssociationResource {
            _route_table_id = TF.Nil
            , _vpc_endpoint_id = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_vpc_peering_connection_accepter@ AWS resource.

Provides a resource to manage the accepter's side of a VPC Peering
Connection. When a cross-account (requester's AWS account differs from the
accepter's AWS account) or an inter-region VPC Peering Connection is
created, a VPC Peering Connection resource is automatically created in the
accepter's account. The requester can use the @aws_vpc_peering_connection@
resource to manage its side of the connection and the accepter can use the
@aws_vpc_peering_connection_accepter@ resource to "adopt" its side of the
connection into management.
-}
data VpcPeeringConnectionAccepterResource = VpcPeeringConnectionAccepterResource {
      _auto_accept               :: !(TF.Argument Text)
    {- ^ (Optional) Whether or not to accept the peering request. Defaults to @false@ . -}
    , _tags                      :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _vpc_peering_connection_id :: !(TF.Argument Text)
    {- ^ (Required) The VPC Peering Connection ID to manage. -}
    } deriving (Show, Eq)

instance TF.ToHCL VpcPeeringConnectionAccepterResource where
    toHCL VpcPeeringConnectionAccepterResource{..} = TF.block $ catMaybes
        [ TF.assign "auto_accept" <$> TF.argument _auto_accept
        , TF.assign "tags" <$> TF.argument _tags
        , TF.assign "vpc_peering_connection_id" <$> TF.argument _vpc_peering_connection_id
        ]

instance HasAutoAccept VpcPeeringConnectionAccepterResource (TF.Argument Text) where
    autoAccept f s@VpcPeeringConnectionAccepterResource{..} =
        (\a -> s { _auto_accept = a } :: VpcPeeringConnectionAccepterResource)
             <$> f _auto_accept

instance HasTags VpcPeeringConnectionAccepterResource (TF.Argument TF.Tags) where
    tags f s@VpcPeeringConnectionAccepterResource{..} =
        (\a -> s { _tags = a } :: VpcPeeringConnectionAccepterResource)
             <$> f _tags

instance HasVpcPeeringConnectionId VpcPeeringConnectionAccepterResource (TF.Argument Text) where
    vpcPeeringConnectionId f s@VpcPeeringConnectionAccepterResource{..} =
        (\a -> s { _vpc_peering_connection_id = a } :: VpcPeeringConnectionAccepterResource)
             <$> f _vpc_peering_connection_id

vpcPeeringConnectionAccepterResource :: TF.Resource TF.AWS VpcPeeringConnectionAccepterResource
vpcPeeringConnectionAccepterResource =
    TF.newResource "aws_vpc_peering_connection_accepter" $
        VpcPeeringConnectionAccepterResource {
            _auto_accept = TF.Nil
            , _tags = TF.Nil
            , _vpc_peering_connection_id = TF.Nil
            }

{- | The @aws_vpc_peering_connection@ AWS resource.

Provides a resource to manage a VPC Peering Connection resource. -> Note:
For cross-account (requester's AWS account differs from the accepter's AWS
account) or inter-region VPC Peering Connections use the
@aws_vpc_peering_connection@ resource to manage the requester's side of the
connection and use the @aws_vpc_peering_connection_accepter@ resource to
manage the accepter's side of the connection.
-}
data VpcPeeringConnectionResource = VpcPeeringConnectionResource {
      _accepter      :: !(TF.Argument Text)
    {- ^ (Optional) - An optional configuration block that allows for [VPC Peering Connection] (http://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide) options to be set for the VPC that accepts the peering connection (a maximum of one). -}
    , _auto_accept   :: !(TF.Argument Text)
    {- ^ (Optional) Accept the peering (both VPCs need to be in the same AWS account). -}
    , _peer_owner_id :: !(TF.Argument Text)
    {- ^ (Optional) The AWS account ID of the owner of the peer VPC. Defaults to the account ID the </docs/providers/aws/index.html> is currently connected to. -}
    , _peer_region   :: !(TF.Argument Text)
    {- ^ (Optional) The region of the accepter VPC of the [VPC Peering Connection]. @auto_accept@ must be @false@ , and use the @aws_vpc_peering_connection_accepter@ to manage the accepter side. -}
    , _peer_vpc_id   :: !(TF.Argument Text)
    {- ^ (Required) The ID of the VPC with which you are creating the VPC Peering Connection. -}
    , _requester     :: !(TF.Argument Text)
    {- ^ (Optional) - A optional configuration block that allows for [VPC Peering Connection] (http://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide) options to be set for the VPC that requests the peering connection (a maximum of one). -}
    , _tags          :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _vpc_id        :: !(TF.Argument Text)
    {- ^ (Required) The ID of the requester VPC. -}
    } deriving (Show, Eq)

instance TF.ToHCL VpcPeeringConnectionResource where
    toHCL VpcPeeringConnectionResource{..} = TF.block $ catMaybes
        [ TF.assign "accepter" <$> TF.argument _accepter
        , TF.assign "auto_accept" <$> TF.argument _auto_accept
        , TF.assign "peer_owner_id" <$> TF.argument _peer_owner_id
        , TF.assign "peer_region" <$> TF.argument _peer_region
        , TF.assign "peer_vpc_id" <$> TF.argument _peer_vpc_id
        , TF.assign "requester" <$> TF.argument _requester
        , TF.assign "tags" <$> TF.argument _tags
        , TF.assign "vpc_id" <$> TF.argument _vpc_id
        ]

instance HasAccepter VpcPeeringConnectionResource (TF.Argument Text) where
    accepter f s@VpcPeeringConnectionResource{..} =
        (\a -> s { _accepter = a } :: VpcPeeringConnectionResource)
             <$> f _accepter

instance HasAutoAccept VpcPeeringConnectionResource (TF.Argument Text) where
    autoAccept f s@VpcPeeringConnectionResource{..} =
        (\a -> s { _auto_accept = a } :: VpcPeeringConnectionResource)
             <$> f _auto_accept

instance HasPeerOwnerId VpcPeeringConnectionResource (TF.Argument Text) where
    peerOwnerId f s@VpcPeeringConnectionResource{..} =
        (\a -> s { _peer_owner_id = a } :: VpcPeeringConnectionResource)
             <$> f _peer_owner_id

instance HasPeerRegion VpcPeeringConnectionResource (TF.Argument Text) where
    peerRegion f s@VpcPeeringConnectionResource{..} =
        (\a -> s { _peer_region = a } :: VpcPeeringConnectionResource)
             <$> f _peer_region

instance HasPeerVpcId VpcPeeringConnectionResource (TF.Argument Text) where
    peerVpcId f s@VpcPeeringConnectionResource{..} =
        (\a -> s { _peer_vpc_id = a } :: VpcPeeringConnectionResource)
             <$> f _peer_vpc_id

instance HasRequester VpcPeeringConnectionResource (TF.Argument Text) where
    requester f s@VpcPeeringConnectionResource{..} =
        (\a -> s { _requester = a } :: VpcPeeringConnectionResource)
             <$> f _requester

instance HasTags VpcPeeringConnectionResource (TF.Argument TF.Tags) where
    tags f s@VpcPeeringConnectionResource{..} =
        (\a -> s { _tags = a } :: VpcPeeringConnectionResource)
             <$> f _tags

instance HasVpcId VpcPeeringConnectionResource (TF.Argument Text) where
    vpcId f s@VpcPeeringConnectionResource{..} =
        (\a -> s { _vpc_id = a } :: VpcPeeringConnectionResource)
             <$> f _vpc_id

vpcPeeringConnectionResource :: TF.Resource TF.AWS VpcPeeringConnectionResource
vpcPeeringConnectionResource =
    TF.newResource "aws_vpc_peering_connection" $
        VpcPeeringConnectionResource {
            _accepter = TF.Nil
            , _auto_accept = TF.Nil
            , _peer_owner_id = TF.Nil
            , _peer_region = TF.Nil
            , _peer_vpc_id = TF.Nil
            , _requester = TF.Nil
            , _tags = TF.Nil
            , _vpc_id = TF.Nil
            }

{- | The @aws_vpc@ AWS resource.

Provides an VPC resource.
-}
data VpcResource = VpcResource {
      _assign_generated_ipv6_cidr_block   :: !(TF.Argument Text)
    {- ^ (Optional) Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block. Default is @false@ . -}
    , _cidr_block                         :: !(TF.Argument Text)
    {- ^ (Required) The CIDR block for the VPC. -}
    , _enable_classiclink                 :: !(TF.Argument TF.Bool)
    {- ^ (Optional) A boolean flag to enable/disable ClassicLink for the VPC. Only valid in regions and accounts that support EC2 Classic. See the <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html> for more information. Defaults false. -}
    , _enable_classiclink_dns_support     :: !(TF.Argument TF.Bool)
    {- ^ (Optional) A boolean flag to enable/disable ClassicLink DNS Support for the VPC. Only valid in regions and accounts that support EC2 Classic. -}
    , _enable_dns_hostnames               :: !(TF.Argument TF.Bool)
    {- ^ (Optional) A boolean flag to enable/disable DNS hostnames in the VPC. Defaults false. -}
    , _enable_dns_support                 :: !(TF.Argument TF.Bool)
    {- ^ (Optional) A boolean flag to enable/disable DNS support in the VPC. Defaults true. -}
    , _instance_tenancy                   :: !(TF.Argument Text)
    {- ^ (Optional) A tenancy option for instances launched into the VPC -}
    , _tags                               :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _computed_cidr_block                :: !(TF.Attribute Text)
    {- ^ - The CIDR block of the VPC -}
    , _computed_default_network_acl_id    :: !(TF.Attribute Text)
    {- ^ - The ID of the network ACL created by default on VPC creation -}
    , _computed_default_route_table_id    :: !(TF.Attribute Text)
    {- ^ - The ID of the route table created by default on VPC creation -}
    , _computed_default_security_group_id :: !(TF.Attribute Text)
    {- ^ - The ID of the security group created by default on VPC creation -}
    , _computed_enable_classiclink        :: !(TF.Attribute TF.Bool)
    {- ^ - Whether or not the VPC has Classiclink enabled -}
    , _computed_enable_dns_hostnames      :: !(TF.Attribute TF.Bool)
    {- ^ - Whether or not the VPC has DNS hostname support -}
    , _computed_enable_dns_support        :: !(TF.Attribute TF.Bool)
    {- ^ - Whether or not the VPC has DNS support -}
    , _computed_id                        :: !(TF.Attribute Text)
    {- ^ - The ID of the VPC -}
    , _computed_instance_tenancy          :: !(TF.Attribute Text)
    {- ^ - Tenancy of instances spin up within VPC. -}
    , _computed_ipv6_association_id       :: !(TF.Attribute Text)
    {- ^ - The association ID for the IPv6 CIDR block. -}
    , _computed_ipv6_cidr_block           :: !(TF.Attribute Text)
    {- ^ - The IPv6 CIDR block. -}
    , _computed_main_route_table_id       :: !(TF.Attribute Text)
    {- ^ - The ID of the main route table associated with this VPC. Note that you can change a VPC's main route table by using an </docs/providers/aws/r/main_route_table_assoc.html> . -}
    } deriving (Show, Eq)

instance TF.ToHCL VpcResource where
    toHCL VpcResource{..} = TF.block $ catMaybes
        [ TF.assign "assign_generated_ipv6_cidr_block" <$> TF.argument _assign_generated_ipv6_cidr_block
        , TF.assign "cidr_block" <$> TF.argument _cidr_block
        , TF.assign "enable_classiclink" <$> TF.argument _enable_classiclink
        , TF.assign "enable_classiclink_dns_support" <$> TF.argument _enable_classiclink_dns_support
        , TF.assign "enable_dns_hostnames" <$> TF.argument _enable_dns_hostnames
        , TF.assign "enable_dns_support" <$> TF.argument _enable_dns_support
        , TF.assign "instance_tenancy" <$> TF.argument _instance_tenancy
        , TF.assign "tags" <$> TF.argument _tags
        ]

instance HasAssignGeneratedIpv6CidrBlock VpcResource (TF.Argument Text) where
    assignGeneratedIpv6CidrBlock f s@VpcResource{..} =
        (\a -> s { _assign_generated_ipv6_cidr_block = a } :: VpcResource)
             <$> f _assign_generated_ipv6_cidr_block

instance HasCidrBlock VpcResource (TF.Argument Text) where
    cidrBlock f s@VpcResource{..} =
        (\a -> s { _cidr_block = a } :: VpcResource)
             <$> f _cidr_block

instance HasEnableClassiclink VpcResource (TF.Argument TF.Bool) where
    enableClassiclink f s@VpcResource{..} =
        (\a -> s { _enable_classiclink = a } :: VpcResource)
             <$> f _enable_classiclink

instance HasEnableClassiclinkDnsSupport VpcResource (TF.Argument TF.Bool) where
    enableClassiclinkDnsSupport f s@VpcResource{..} =
        (\a -> s { _enable_classiclink_dns_support = a } :: VpcResource)
             <$> f _enable_classiclink_dns_support

instance HasEnableDnsHostnames VpcResource (TF.Argument TF.Bool) where
    enableDnsHostnames f s@VpcResource{..} =
        (\a -> s { _enable_dns_hostnames = a } :: VpcResource)
             <$> f _enable_dns_hostnames

instance HasEnableDnsSupport VpcResource (TF.Argument TF.Bool) where
    enableDnsSupport f s@VpcResource{..} =
        (\a -> s { _enable_dns_support = a } :: VpcResource)
             <$> f _enable_dns_support

instance HasInstanceTenancy VpcResource (TF.Argument Text) where
    instanceTenancy f s@VpcResource{..} =
        (\a -> s { _instance_tenancy = a } :: VpcResource)
             <$> f _instance_tenancy

instance HasTags VpcResource (TF.Argument TF.Tags) where
    tags f s@VpcResource{..} =
        (\a -> s { _tags = a } :: VpcResource)
             <$> f _tags

instance HasComputedCidrBlock VpcResource (TF.Attribute Text) where
    computedCidrBlock f s@VpcResource{..} =
        (\a -> s { _computed_cidr_block = a } :: VpcResource)
             <$> f _computed_cidr_block

instance HasComputedDefaultNetworkAclId VpcResource (TF.Attribute Text) where
    computedDefaultNetworkAclId f s@VpcResource{..} =
        (\a -> s { _computed_default_network_acl_id = a } :: VpcResource)
             <$> f _computed_default_network_acl_id

instance HasComputedDefaultRouteTableId VpcResource (TF.Attribute Text) where
    computedDefaultRouteTableId f s@VpcResource{..} =
        (\a -> s { _computed_default_route_table_id = a } :: VpcResource)
             <$> f _computed_default_route_table_id

instance HasComputedDefaultSecurityGroupId VpcResource (TF.Attribute Text) where
    computedDefaultSecurityGroupId f s@VpcResource{..} =
        (\a -> s { _computed_default_security_group_id = a } :: VpcResource)
             <$> f _computed_default_security_group_id

instance HasComputedEnableClassiclink VpcResource (TF.Attribute TF.Bool) where
    computedEnableClassiclink f s@VpcResource{..} =
        (\a -> s { _computed_enable_classiclink = a } :: VpcResource)
             <$> f _computed_enable_classiclink

instance HasComputedEnableDnsHostnames VpcResource (TF.Attribute TF.Bool) where
    computedEnableDnsHostnames f s@VpcResource{..} =
        (\a -> s { _computed_enable_dns_hostnames = a } :: VpcResource)
             <$> f _computed_enable_dns_hostnames

instance HasComputedEnableDnsSupport VpcResource (TF.Attribute TF.Bool) where
    computedEnableDnsSupport f s@VpcResource{..} =
        (\a -> s { _computed_enable_dns_support = a } :: VpcResource)
             <$> f _computed_enable_dns_support

instance HasComputedId VpcResource (TF.Attribute Text) where
    computedId f s@VpcResource{..} =
        (\a -> s { _computed_id = a } :: VpcResource)
             <$> f _computed_id

instance HasComputedInstanceTenancy VpcResource (TF.Attribute Text) where
    computedInstanceTenancy f s@VpcResource{..} =
        (\a -> s { _computed_instance_tenancy = a } :: VpcResource)
             <$> f _computed_instance_tenancy

instance HasComputedIpv6AssociationId VpcResource (TF.Attribute Text) where
    computedIpv6AssociationId f s@VpcResource{..} =
        (\a -> s { _computed_ipv6_association_id = a } :: VpcResource)
             <$> f _computed_ipv6_association_id

instance HasComputedIpv6CidrBlock VpcResource (TF.Attribute Text) where
    computedIpv6CidrBlock f s@VpcResource{..} =
        (\a -> s { _computed_ipv6_cidr_block = a } :: VpcResource)
             <$> f _computed_ipv6_cidr_block

instance HasComputedMainRouteTableId VpcResource (TF.Attribute Text) where
    computedMainRouteTableId f s@VpcResource{..} =
        (\a -> s { _computed_main_route_table_id = a } :: VpcResource)
             <$> f _computed_main_route_table_id

vpcResource :: TF.Resource TF.AWS VpcResource
vpcResource =
    TF.newResource "aws_vpc" $
        VpcResource {
            _assign_generated_ipv6_cidr_block = TF.Nil
            , _cidr_block = TF.Nil
            , _enable_classiclink = TF.Nil
            , _enable_classiclink_dns_support = TF.Nil
            , _enable_dns_hostnames = TF.Nil
            , _enable_dns_support = TF.Nil
            , _instance_tenancy = TF.Nil
            , _tags = TF.Nil
            , _computed_cidr_block = TF.Compute "cidr_block"
            , _computed_default_network_acl_id = TF.Compute "default_network_acl_id"
            , _computed_default_route_table_id = TF.Compute "default_route_table_id"
            , _computed_default_security_group_id = TF.Compute "default_security_group_id"
            , _computed_enable_classiclink = TF.Compute "enable_classiclink"
            , _computed_enable_dns_hostnames = TF.Compute "enable_dns_hostnames"
            , _computed_enable_dns_support = TF.Compute "enable_dns_support"
            , _computed_id = TF.Compute "id"
            , _computed_instance_tenancy = TF.Compute "instance_tenancy"
            , _computed_ipv6_association_id = TF.Compute "ipv6_association_id"
            , _computed_ipv6_cidr_block = TF.Compute "ipv6_cidr_block"
            , _computed_main_route_table_id = TF.Compute "main_route_table_id"
            }

{- | The @aws_vpn_connection@ AWS resource.

Provides a VPN connection connected to a VPC. These objects can be connected
to customer gateways, and allow you to establish tunnels between your
network and the VPC. ~> Note: All arguments including
@tunnel1_preshared_key@ and @tunnel2_preshared_key@ will be stored in the
raw state as plain-text. </docs/state/sensitive-data.html> .
-}
data VpnConnectionResource = VpnConnectionResource {
      _customer_gateway_id                     :: !(TF.Argument Text)
    {- ^ (Required) The ID of the customer gateway. -}
    , _static_routes_only                      :: !(TF.Argument Text)
    {- ^ (Optional, Default @false@ ) Whether the VPN connection uses static routes exclusively. Static routes must be used for devices that don't support BGP. -}
    , _tags                                    :: !(TF.Argument TF.Tags)
    {- ^ (Optional) Tags to apply to the connection. -}
    , _type'                                   :: !(TF.Argument Text)
    {- ^ (Required) The type of VPN connection. The only type AWS supports at this time is "ipsec.1". -}
    , _vpn_gateway_id                          :: !(TF.Argument Text)
    {- ^ (Required) The ID of the virtual private gateway. -}
    , _computed_customer_gateway_configuration :: !(TF.Attribute Text)
    {- ^ - The configuration information for the VPN connection's customer gateway (in the native XML format). -}
    , _computed_customer_gateway_id            :: !(TF.Attribute Text)
    {- ^ - The ID of the customer gateway to which the connection is attached. -}
    , _computed_id                             :: !(TF.Attribute Text)
    {- ^ - The amazon-assigned ID of the VPN connection. -}
    , _computed_static_routes_only             :: !(TF.Attribute Text)
    {- ^ - Whether the VPN connection uses static routes exclusively. -}
    , _computed_tags                           :: !(TF.Attribute TF.Tags)
    {- ^ - Tags applied to the connection. -}
    , _computed_tunnel1_address                :: !(TF.Attribute Text)
    {- ^ - The public IP address of the first VPN tunnel. -}
    , _computed_tunnel1_bgp_asn                :: !(TF.Attribute Text)
    {- ^ - The bgp asn number of the first VPN tunnel. -}
    , _computed_tunnel1_bgp_holdtime           :: !(TF.Attribute Text)
    {- ^ - The bgp holdtime of the first VPN tunnel. -}
    , _computed_tunnel1_cgw_inside_address     :: !(TF.Attribute Text)
    {- ^ - The RFC 6890 link-local address of the first VPN tunnel (Customer Gateway Side). -}
    , _computed_tunnel1_preshared_key          :: !(TF.Attribute Text)
    {- ^ - The preshared key of the first VPN tunnel. -}
    , _computed_tunnel1_vgw_inside_address     :: !(TF.Attribute Text)
    {- ^ - The RFC 6890 link-local address of the first VPN tunnel (VPN Gateway Side). -}
    , _computed_tunnel2_address                :: !(TF.Attribute Text)
    {- ^ - The public IP address of the second VPN tunnel. -}
    , _computed_tunnel2_bgp_asn                :: !(TF.Attribute Text)
    {- ^ - The bgp asn number of the second VPN tunnel. -}
    , _computed_tunnel2_bgp_holdtime           :: !(TF.Attribute Text)
    {- ^ - The bgp holdtime of the second VPN tunnel. -}
    , _computed_tunnel2_cgw_inside_address     :: !(TF.Attribute Text)
    {- ^ - The RFC 6890 link-local address of the second VPN tunnel (Customer Gateway Side). -}
    , _computed_tunnel2_preshared_key          :: !(TF.Attribute Text)
    {- ^ - The preshared key of the second VPN tunnel. -}
    , _computed_tunnel2_vgw_inside_address     :: !(TF.Attribute Text)
    {- ^ - The RFC 6890 link-local address of the second VPN tunnel (VPN Gateway Side). -}
    , _computed_type'                          :: !(TF.Attribute Text)
    {- ^ - The type of VPN connection. -}
    , _computed_vpn_gateway_id                 :: !(TF.Attribute Text)
    {- ^ - The ID of the virtual private gateway to which the connection is attached. -}
    } deriving (Show, Eq)

instance TF.ToHCL VpnConnectionResource where
    toHCL VpnConnectionResource{..} = TF.block $ catMaybes
        [ TF.assign "customer_gateway_id" <$> TF.argument _customer_gateway_id
        , TF.assign "static_routes_only" <$> TF.argument _static_routes_only
        , TF.assign "tags" <$> TF.argument _tags
        , TF.assign "type" <$> TF.argument _type'
        , TF.assign "vpn_gateway_id" <$> TF.argument _vpn_gateway_id
        ]

instance HasCustomerGatewayId VpnConnectionResource (TF.Argument Text) where
    customerGatewayId f s@VpnConnectionResource{..} =
        (\a -> s { _customer_gateway_id = a } :: VpnConnectionResource)
             <$> f _customer_gateway_id

instance HasStaticRoutesOnly VpnConnectionResource (TF.Argument Text) where
    staticRoutesOnly f s@VpnConnectionResource{..} =
        (\a -> s { _static_routes_only = a } :: VpnConnectionResource)
             <$> f _static_routes_only

instance HasTags VpnConnectionResource (TF.Argument TF.Tags) where
    tags f s@VpnConnectionResource{..} =
        (\a -> s { _tags = a } :: VpnConnectionResource)
             <$> f _tags

instance HasType' VpnConnectionResource (TF.Argument Text) where
    type' f s@VpnConnectionResource{..} =
        (\a -> s { _type' = a } :: VpnConnectionResource)
             <$> f _type'

instance HasVpnGatewayId VpnConnectionResource (TF.Argument Text) where
    vpnGatewayId f s@VpnConnectionResource{..} =
        (\a -> s { _vpn_gateway_id = a } :: VpnConnectionResource)
             <$> f _vpn_gateway_id

instance HasComputedCustomerGatewayConfiguration VpnConnectionResource (TF.Attribute Text) where
    computedCustomerGatewayConfiguration f s@VpnConnectionResource{..} =
        (\a -> s { _computed_customer_gateway_configuration = a } :: VpnConnectionResource)
             <$> f _computed_customer_gateway_configuration

instance HasComputedCustomerGatewayId VpnConnectionResource (TF.Attribute Text) where
    computedCustomerGatewayId f s@VpnConnectionResource{..} =
        (\a -> s { _computed_customer_gateway_id = a } :: VpnConnectionResource)
             <$> f _computed_customer_gateway_id

instance HasComputedId VpnConnectionResource (TF.Attribute Text) where
    computedId f s@VpnConnectionResource{..} =
        (\a -> s { _computed_id = a } :: VpnConnectionResource)
             <$> f _computed_id

instance HasComputedStaticRoutesOnly VpnConnectionResource (TF.Attribute Text) where
    computedStaticRoutesOnly f s@VpnConnectionResource{..} =
        (\a -> s { _computed_static_routes_only = a } :: VpnConnectionResource)
             <$> f _computed_static_routes_only

instance HasComputedTags VpnConnectionResource (TF.Attribute TF.Tags) where
    computedTags f s@VpnConnectionResource{..} =
        (\a -> s { _computed_tags = a } :: VpnConnectionResource)
             <$> f _computed_tags

instance HasComputedTunnel1Address VpnConnectionResource (TF.Attribute Text) where
    computedTunnel1Address f s@VpnConnectionResource{..} =
        (\a -> s { _computed_tunnel1_address = a } :: VpnConnectionResource)
             <$> f _computed_tunnel1_address

instance HasComputedTunnel1BgpAsn VpnConnectionResource (TF.Attribute Text) where
    computedTunnel1BgpAsn f s@VpnConnectionResource{..} =
        (\a -> s { _computed_tunnel1_bgp_asn = a } :: VpnConnectionResource)
             <$> f _computed_tunnel1_bgp_asn

instance HasComputedTunnel1BgpHoldtime VpnConnectionResource (TF.Attribute Text) where
    computedTunnel1BgpHoldtime f s@VpnConnectionResource{..} =
        (\a -> s { _computed_tunnel1_bgp_holdtime = a } :: VpnConnectionResource)
             <$> f _computed_tunnel1_bgp_holdtime

instance HasComputedTunnel1CgwInsideAddress VpnConnectionResource (TF.Attribute Text) where
    computedTunnel1CgwInsideAddress f s@VpnConnectionResource{..} =
        (\a -> s { _computed_tunnel1_cgw_inside_address = a } :: VpnConnectionResource)
             <$> f _computed_tunnel1_cgw_inside_address

instance HasComputedTunnel1PresharedKey VpnConnectionResource (TF.Attribute Text) where
    computedTunnel1PresharedKey f s@VpnConnectionResource{..} =
        (\a -> s { _computed_tunnel1_preshared_key = a } :: VpnConnectionResource)
             <$> f _computed_tunnel1_preshared_key

instance HasComputedTunnel1VgwInsideAddress VpnConnectionResource (TF.Attribute Text) where
    computedTunnel1VgwInsideAddress f s@VpnConnectionResource{..} =
        (\a -> s { _computed_tunnel1_vgw_inside_address = a } :: VpnConnectionResource)
             <$> f _computed_tunnel1_vgw_inside_address

instance HasComputedTunnel2Address VpnConnectionResource (TF.Attribute Text) where
    computedTunnel2Address f s@VpnConnectionResource{..} =
        (\a -> s { _computed_tunnel2_address = a } :: VpnConnectionResource)
             <$> f _computed_tunnel2_address

instance HasComputedTunnel2BgpAsn VpnConnectionResource (TF.Attribute Text) where
    computedTunnel2BgpAsn f s@VpnConnectionResource{..} =
        (\a -> s { _computed_tunnel2_bgp_asn = a } :: VpnConnectionResource)
             <$> f _computed_tunnel2_bgp_asn

instance HasComputedTunnel2BgpHoldtime VpnConnectionResource (TF.Attribute Text) where
    computedTunnel2BgpHoldtime f s@VpnConnectionResource{..} =
        (\a -> s { _computed_tunnel2_bgp_holdtime = a } :: VpnConnectionResource)
             <$> f _computed_tunnel2_bgp_holdtime

instance HasComputedTunnel2CgwInsideAddress VpnConnectionResource (TF.Attribute Text) where
    computedTunnel2CgwInsideAddress f s@VpnConnectionResource{..} =
        (\a -> s { _computed_tunnel2_cgw_inside_address = a } :: VpnConnectionResource)
             <$> f _computed_tunnel2_cgw_inside_address

instance HasComputedTunnel2PresharedKey VpnConnectionResource (TF.Attribute Text) where
    computedTunnel2PresharedKey f s@VpnConnectionResource{..} =
        (\a -> s { _computed_tunnel2_preshared_key = a } :: VpnConnectionResource)
             <$> f _computed_tunnel2_preshared_key

instance HasComputedTunnel2VgwInsideAddress VpnConnectionResource (TF.Attribute Text) where
    computedTunnel2VgwInsideAddress f s@VpnConnectionResource{..} =
        (\a -> s { _computed_tunnel2_vgw_inside_address = a } :: VpnConnectionResource)
             <$> f _computed_tunnel2_vgw_inside_address

instance HasComputedType' VpnConnectionResource (TF.Attribute Text) where
    computedType' f s@VpnConnectionResource{..} =
        (\a -> s { _computed_type' = a } :: VpnConnectionResource)
             <$> f _computed_type'

instance HasComputedVpnGatewayId VpnConnectionResource (TF.Attribute Text) where
    computedVpnGatewayId f s@VpnConnectionResource{..} =
        (\a -> s { _computed_vpn_gateway_id = a } :: VpnConnectionResource)
             <$> f _computed_vpn_gateway_id

vpnConnectionResource :: TF.Resource TF.AWS VpnConnectionResource
vpnConnectionResource =
    TF.newResource "aws_vpn_connection" $
        VpnConnectionResource {
            _customer_gateway_id = TF.Nil
            , _static_routes_only = TF.Nil
            , _tags = TF.Nil
            , _type' = TF.Nil
            , _vpn_gateway_id = TF.Nil
            , _computed_customer_gateway_configuration = TF.Compute "customer_gateway_configuration"
            , _computed_customer_gateway_id = TF.Compute "customer_gateway_id"
            , _computed_id = TF.Compute "id"
            , _computed_static_routes_only = TF.Compute "static_routes_only"
            , _computed_tags = TF.Compute "tags"
            , _computed_tunnel1_address = TF.Compute "tunnel1_address"
            , _computed_tunnel1_bgp_asn = TF.Compute "tunnel1_bgp_asn"
            , _computed_tunnel1_bgp_holdtime = TF.Compute "tunnel1_bgp_holdtime"
            , _computed_tunnel1_cgw_inside_address = TF.Compute "tunnel1_cgw_inside_address"
            , _computed_tunnel1_preshared_key = TF.Compute "tunnel1_preshared_key"
            , _computed_tunnel1_vgw_inside_address = TF.Compute "tunnel1_vgw_inside_address"
            , _computed_tunnel2_address = TF.Compute "tunnel2_address"
            , _computed_tunnel2_bgp_asn = TF.Compute "tunnel2_bgp_asn"
            , _computed_tunnel2_bgp_holdtime = TF.Compute "tunnel2_bgp_holdtime"
            , _computed_tunnel2_cgw_inside_address = TF.Compute "tunnel2_cgw_inside_address"
            , _computed_tunnel2_preshared_key = TF.Compute "tunnel2_preshared_key"
            , _computed_tunnel2_vgw_inside_address = TF.Compute "tunnel2_vgw_inside_address"
            , _computed_type' = TF.Compute "type"
            , _computed_vpn_gateway_id = TF.Compute "vpn_gateway_id"
            }

{- | The @aws_vpn_connection_route@ AWS resource.

Provides a static route between a VPN connection and a customer gateway.
-}
data VpnConnectionRouteResource = VpnConnectionRouteResource {
      _destination_cidr_block          :: !(TF.Argument Text)
    {- ^ (Required) The CIDR block associated with the local subnet of the customer network. -}
    , _vpn_connection_id               :: !(TF.Argument Text)
    {- ^ (Required) The ID of the VPN connection. -}
    , _computed_destination_cidr_block :: !(TF.Attribute Text)
    {- ^ - The CIDR block associated with the local subnet of the customer network. -}
    , _computed_vpn_connection_id      :: !(TF.Attribute Text)
    {- ^ - The ID of the VPN connection. -}
    } deriving (Show, Eq)

instance TF.ToHCL VpnConnectionRouteResource where
    toHCL VpnConnectionRouteResource{..} = TF.block $ catMaybes
        [ TF.assign "destination_cidr_block" <$> TF.argument _destination_cidr_block
        , TF.assign "vpn_connection_id" <$> TF.argument _vpn_connection_id
        ]

instance HasDestinationCidrBlock VpnConnectionRouteResource (TF.Argument Text) where
    destinationCidrBlock f s@VpnConnectionRouteResource{..} =
        (\a -> s { _destination_cidr_block = a } :: VpnConnectionRouteResource)
             <$> f _destination_cidr_block

instance HasVpnConnectionId VpnConnectionRouteResource (TF.Argument Text) where
    vpnConnectionId f s@VpnConnectionRouteResource{..} =
        (\a -> s { _vpn_connection_id = a } :: VpnConnectionRouteResource)
             <$> f _vpn_connection_id

instance HasComputedDestinationCidrBlock VpnConnectionRouteResource (TF.Attribute Text) where
    computedDestinationCidrBlock f s@VpnConnectionRouteResource{..} =
        (\a -> s { _computed_destination_cidr_block = a } :: VpnConnectionRouteResource)
             <$> f _computed_destination_cidr_block

instance HasComputedVpnConnectionId VpnConnectionRouteResource (TF.Attribute Text) where
    computedVpnConnectionId f s@VpnConnectionRouteResource{..} =
        (\a -> s { _computed_vpn_connection_id = a } :: VpnConnectionRouteResource)
             <$> f _computed_vpn_connection_id

vpnConnectionRouteResource :: TF.Resource TF.AWS VpnConnectionRouteResource
vpnConnectionRouteResource =
    TF.newResource "aws_vpn_connection_route" $
        VpnConnectionRouteResource {
            _destination_cidr_block = TF.Nil
            , _vpn_connection_id = TF.Nil
            , _computed_destination_cidr_block = TF.Compute "destination_cidr_block"
            , _computed_vpn_connection_id = TF.Compute "vpn_connection_id"
            }

{- | The @aws_vpn_gateway_attachment@ AWS resource.

Provides a Virtual Private Gateway attachment resource, allowing for an
existing hardware VPN gateway to be attached and/or detached from a VPC. ->
Note: The <vpn_gateway.html> resource can also automatically attach the
Virtual Private Gateway it creates to an existing VPC by setting the
<vpn_gateway.html#vpc_id> attribute accordingly.
-}
data VpnGatewayAttachmentResource = VpnGatewayAttachmentResource {
      _vpc_id                  :: !(TF.Argument Text)
    {- ^ (Required) The ID of the VPC. -}
    , _vpn_gateway_id          :: !(TF.Argument Text)
    {- ^ (Required) The ID of the Virtual Private Gateway. -}
    , _computed_vpc_id         :: !(TF.Attribute Text)
    {- ^ - The ID of the VPC that Virtual Private Gateway is attached to. -}
    , _computed_vpn_gateway_id :: !(TF.Attribute Text)
    {- ^ - The ID of the Virtual Private Gateway. -}
    } deriving (Show, Eq)

instance TF.ToHCL VpnGatewayAttachmentResource where
    toHCL VpnGatewayAttachmentResource{..} = TF.block $ catMaybes
        [ TF.assign "vpc_id" <$> TF.argument _vpc_id
        , TF.assign "vpn_gateway_id" <$> TF.argument _vpn_gateway_id
        ]

instance HasVpcId VpnGatewayAttachmentResource (TF.Argument Text) where
    vpcId f s@VpnGatewayAttachmentResource{..} =
        (\a -> s { _vpc_id = a } :: VpnGatewayAttachmentResource)
             <$> f _vpc_id

instance HasVpnGatewayId VpnGatewayAttachmentResource (TF.Argument Text) where
    vpnGatewayId f s@VpnGatewayAttachmentResource{..} =
        (\a -> s { _vpn_gateway_id = a } :: VpnGatewayAttachmentResource)
             <$> f _vpn_gateway_id

instance HasComputedVpcId VpnGatewayAttachmentResource (TF.Attribute Text) where
    computedVpcId f s@VpnGatewayAttachmentResource{..} =
        (\a -> s { _computed_vpc_id = a } :: VpnGatewayAttachmentResource)
             <$> f _computed_vpc_id

instance HasComputedVpnGatewayId VpnGatewayAttachmentResource (TF.Attribute Text) where
    computedVpnGatewayId f s@VpnGatewayAttachmentResource{..} =
        (\a -> s { _computed_vpn_gateway_id = a } :: VpnGatewayAttachmentResource)
             <$> f _computed_vpn_gateway_id

vpnGatewayAttachmentResource :: TF.Resource TF.AWS VpnGatewayAttachmentResource
vpnGatewayAttachmentResource =
    TF.newResource "aws_vpn_gateway_attachment" $
        VpnGatewayAttachmentResource {
            _vpc_id = TF.Nil
            , _vpn_gateway_id = TF.Nil
            , _computed_vpc_id = TF.Compute "vpc_id"
            , _computed_vpn_gateway_id = TF.Compute "vpn_gateway_id"
            }

{- | The @aws_vpn_gateway@ AWS resource.

Provides a resource to create a VPC VPN Gateway.
-}
data VpnGatewayResource = VpnGatewayResource {
      _availability_zone :: !(TF.Argument Text)
    {- ^ (Optional) The Availability Zone for the virtual private gateway. -}
    , _tags              :: !(TF.Argument TF.Tags)
    {- ^ (Optional) A mapping of tags to assign to the resource. -}
    , _vpc_id            :: !(TF.Argument Text)
    {- ^ (Optional) The VPC ID to create in. -}
    , _computed_id       :: !(TF.Attribute Text)
    {- ^ - The ID of the VPN Gateway. -}
    } deriving (Show, Eq)

instance TF.ToHCL VpnGatewayResource where
    toHCL VpnGatewayResource{..} = TF.block $ catMaybes
        [ TF.assign "availability_zone" <$> TF.argument _availability_zone
        , TF.assign "tags" <$> TF.argument _tags
        , TF.assign "vpc_id" <$> TF.argument _vpc_id
        ]

instance HasAvailabilityZone VpnGatewayResource (TF.Argument Text) where
    availabilityZone f s@VpnGatewayResource{..} =
        (\a -> s { _availability_zone = a } :: VpnGatewayResource)
             <$> f _availability_zone

instance HasTags VpnGatewayResource (TF.Argument TF.Tags) where
    tags f s@VpnGatewayResource{..} =
        (\a -> s { _tags = a } :: VpnGatewayResource)
             <$> f _tags

instance HasVpcId VpnGatewayResource (TF.Argument Text) where
    vpcId f s@VpnGatewayResource{..} =
        (\a -> s { _vpc_id = a } :: VpnGatewayResource)
             <$> f _vpc_id

instance HasComputedId VpnGatewayResource (TF.Attribute Text) where
    computedId f s@VpnGatewayResource{..} =
        (\a -> s { _computed_id = a } :: VpnGatewayResource)
             <$> f _computed_id

vpnGatewayResource :: TF.Resource TF.AWS VpnGatewayResource
vpnGatewayResource =
    TF.newResource "aws_vpn_gateway" $
        VpnGatewayResource {
            _availability_zone = TF.Nil
            , _tags = TF.Nil
            , _vpc_id = TF.Nil
            , _computed_id = TF.Compute "id"
            }

{- | The @aws_vpn_gateway_route_propagation@ AWS resource.

Requests automatic route propagation between a VPN gateway and a route
table. ~> Note: This resource should not be used with a route table that has
the @propagating_vgws@ argument set. If that argument is set, any route
propagation not explicitly listed in its value will be removed.
-}
data VpnGatewayRoutePropagationResource = VpnGatewayRoutePropagationResource {
      _route_table_id :: !(TF.Argument Text)
    {- ^ - The id of the @aws_route_table@ to propagate routes into. -}
    , _vpn_gateway_id :: !(TF.Argument Text)
    {- ^ - The id of the @aws_vpn_gateway@ to propagate routes from. -}
    } deriving (Show, Eq)

instance TF.ToHCL VpnGatewayRoutePropagationResource where
    toHCL VpnGatewayRoutePropagationResource{..} = TF.block $ catMaybes
        [ TF.assign "route_table_id" <$> TF.argument _route_table_id
        , TF.assign "vpn_gateway_id" <$> TF.argument _vpn_gateway_id
        ]

instance HasRouteTableId VpnGatewayRoutePropagationResource (TF.Argument Text) where
    routeTableId f s@VpnGatewayRoutePropagationResource{..} =
        (\a -> s { _route_table_id = a } :: VpnGatewayRoutePropagationResource)
             <$> f _route_table_id

instance HasVpnGatewayId VpnGatewayRoutePropagationResource (TF.Argument Text) where
    vpnGatewayId f s@VpnGatewayRoutePropagationResource{..} =
        (\a -> s { _vpn_gateway_id = a } :: VpnGatewayRoutePropagationResource)
             <$> f _vpn_gateway_id

vpnGatewayRoutePropagationResource :: TF.Resource TF.AWS VpnGatewayRoutePropagationResource
vpnGatewayRoutePropagationResource =
    TF.newResource "aws_vpn_gateway_route_propagation" $
        VpnGatewayRoutePropagationResource {
            _route_table_id = TF.Nil
            , _vpn_gateway_id = TF.Nil
            }

{- | The @aws_waf_byte_match_set@ AWS resource.

Provides a WAF Byte Match Set Resource
-}
data WafByteMatchSetResource = WafByteMatchSetResource {
      _byte_match_tuples :: !(TF.Argument Text)
    {- ^ - Specifies the bytes (typically a string that corresponds with ASCII characters) that you want to search for in web requests, the location in requests that you want to search, and other settings. -}
    , _name              :: !(TF.Argument Text)
    {- ^ (Required) The name or description of the Byte Match Set. -}
    } deriving (Show, Eq)

instance TF.ToHCL WafByteMatchSetResource where
    toHCL WafByteMatchSetResource{..} = TF.block $ catMaybes
        [ TF.assign "byte_match_tuples" <$> TF.argument _byte_match_tuples
        , TF.assign "name" <$> TF.argument _name
        ]

instance HasByteMatchTuples WafByteMatchSetResource (TF.Argument Text) where
    byteMatchTuples f s@WafByteMatchSetResource{..} =
        (\a -> s { _byte_match_tuples = a } :: WafByteMatchSetResource)
             <$> f _byte_match_tuples

instance HasName WafByteMatchSetResource (TF.Argument Text) where
    name f s@WafByteMatchSetResource{..} =
        (\a -> s { _name = a } :: WafByteMatchSetResource)
             <$> f _name

wafByteMatchSetResource :: TF.Resource TF.AWS WafByteMatchSetResource
wafByteMatchSetResource =
    TF.newResource "aws_waf_byte_match_set" $
        WafByteMatchSetResource {
            _byte_match_tuples = TF.Nil
            , _name = TF.Nil
            }

{- | The @aws_waf_ipset@ AWS resource.

Provides a WAF IPSet Resource
-}
data WafIpsetResource = WafIpsetResource {
      _ip_set_descriptors :: !(TF.Argument Text)
    {- ^ (Optional) Specifies the IP address type (IPV4 or IPV6) and the IP address range (in CIDR format) that web requests originate from. -}
    , _name               :: !(TF.Argument Text)
    {- ^ (Required) The name or description of the IPSet. -}
    } deriving (Show, Eq)

instance TF.ToHCL WafIpsetResource where
    toHCL WafIpsetResource{..} = TF.block $ catMaybes
        [ TF.assign "ip_set_descriptors" <$> TF.argument _ip_set_descriptors
        , TF.assign "name" <$> TF.argument _name
        ]

instance HasIpSetDescriptors WafIpsetResource (TF.Argument Text) where
    ipSetDescriptors f s@WafIpsetResource{..} =
        (\a -> s { _ip_set_descriptors = a } :: WafIpsetResource)
             <$> f _ip_set_descriptors

instance HasName WafIpsetResource (TF.Argument Text) where
    name f s@WafIpsetResource{..} =
        (\a -> s { _name = a } :: WafIpsetResource)
             <$> f _name

wafIpsetResource :: TF.Resource TF.AWS WafIpsetResource
wafIpsetResource =
    TF.newResource "aws_waf_ipset" $
        WafIpsetResource {
            _ip_set_descriptors = TF.Nil
            , _name = TF.Nil
            }

{- | The @aws_waf_rate_based_rule@ AWS resource.

Provides a WAF Rate Based Rule Resource
-}
data WafRateBasedRuleResource = WafRateBasedRuleResource {
      _metric_name :: !(TF.Argument Text)
    {- ^ (Required) The name or description for the Amazon CloudWatch metric of this rule. -}
    , _name        :: !(TF.Argument Text)
    {- ^ (Required) The name or description of the rule. -}
    , _predicates  :: !(TF.Argument Text)
    {- ^ (Optional) One of ByteMatchSet, IPSet, SizeConstraintSet, SqlInjectionMatchSet, or XssMatchSet objects to include in a rule. -}
    , _rate_key    :: !(TF.Argument Text)
    {- ^ (Required) Valid value is IP. -}
    , _rate_limit  :: !(TF.Argument Text)
    {- ^ (Required) The maximum number of requests, which have an identical value in the field specified by the RateKey, allowed in a five-minute period. Minimum value is 2000. -}
    } deriving (Show, Eq)

instance TF.ToHCL WafRateBasedRuleResource where
    toHCL WafRateBasedRuleResource{..} = TF.block $ catMaybes
        [ TF.assign "metric_name" <$> TF.argument _metric_name
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "predicates" <$> TF.argument _predicates
        , TF.assign "rate_key" <$> TF.argument _rate_key
        , TF.assign "rate_limit" <$> TF.argument _rate_limit
        ]

instance HasMetricName WafRateBasedRuleResource (TF.Argument Text) where
    metricName f s@WafRateBasedRuleResource{..} =
        (\a -> s { _metric_name = a } :: WafRateBasedRuleResource)
             <$> f _metric_name

instance HasName WafRateBasedRuleResource (TF.Argument Text) where
    name f s@WafRateBasedRuleResource{..} =
        (\a -> s { _name = a } :: WafRateBasedRuleResource)
             <$> f _name

instance HasPredicates WafRateBasedRuleResource (TF.Argument Text) where
    predicates f s@WafRateBasedRuleResource{..} =
        (\a -> s { _predicates = a } :: WafRateBasedRuleResource)
             <$> f _predicates

instance HasRateKey WafRateBasedRuleResource (TF.Argument Text) where
    rateKey f s@WafRateBasedRuleResource{..} =
        (\a -> s { _rate_key = a } :: WafRateBasedRuleResource)
             <$> f _rate_key

instance HasRateLimit WafRateBasedRuleResource (TF.Argument Text) where
    rateLimit f s@WafRateBasedRuleResource{..} =
        (\a -> s { _rate_limit = a } :: WafRateBasedRuleResource)
             <$> f _rate_limit

wafRateBasedRuleResource :: TF.Resource TF.AWS WafRateBasedRuleResource
wafRateBasedRuleResource =
    TF.newResource "aws_waf_rate_based_rule" $
        WafRateBasedRuleResource {
            _metric_name = TF.Nil
            , _name = TF.Nil
            , _predicates = TF.Nil
            , _rate_key = TF.Nil
            , _rate_limit = TF.Nil
            }

{- | The @aws_waf_rule@ AWS resource.

Provides a WAF Rule Resource
-}
data WafRuleResource = WafRuleResource {
      _metric_name :: !(TF.Argument Text)
    {- ^ (Required) The name or description for the Amazon CloudWatch metric of this rule. -}
    , _name        :: !(TF.Argument Text)
    {- ^ (Required) The name or description of the rule. -}
    , _predicates  :: !(TF.Argument Text)
    {- ^ (Optional) One of ByteMatchSet, IPSet, SizeConstraintSet, SqlInjectionMatchSet, or XssMatchSet objects to include in a rule. -}
    } deriving (Show, Eq)

instance TF.ToHCL WafRuleResource where
    toHCL WafRuleResource{..} = TF.block $ catMaybes
        [ TF.assign "metric_name" <$> TF.argument _metric_name
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "predicates" <$> TF.argument _predicates
        ]

instance HasMetricName WafRuleResource (TF.Argument Text) where
    metricName f s@WafRuleResource{..} =
        (\a -> s { _metric_name = a } :: WafRuleResource)
             <$> f _metric_name

instance HasName WafRuleResource (TF.Argument Text) where
    name f s@WafRuleResource{..} =
        (\a -> s { _name = a } :: WafRuleResource)
             <$> f _name

instance HasPredicates WafRuleResource (TF.Argument Text) where
    predicates f s@WafRuleResource{..} =
        (\a -> s { _predicates = a } :: WafRuleResource)
             <$> f _predicates

wafRuleResource :: TF.Resource TF.AWS WafRuleResource
wafRuleResource =
    TF.newResource "aws_waf_rule" $
        WafRuleResource {
            _metric_name = TF.Nil
            , _name = TF.Nil
            , _predicates = TF.Nil
            }

{- | The @aws_waf_size_constraint_set@ AWS resource.

Provides a WAF Size Constraint Set Resource
-}
data WafSizeConstraintSetResource = WafSizeConstraintSetResource {
      _name             :: !(TF.Argument Text)
    {- ^ (Required) The name or description of the Size Constraint Set. -}
    , _size_constraints :: !(TF.Argument Text)
    {- ^ (Optional) Specifies the parts of web requests that you want to inspect the size of. -}
    } deriving (Show, Eq)

instance TF.ToHCL WafSizeConstraintSetResource where
    toHCL WafSizeConstraintSetResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.argument _name
        , TF.assign "size_constraints" <$> TF.argument _size_constraints
        ]

instance HasName WafSizeConstraintSetResource (TF.Argument Text) where
    name f s@WafSizeConstraintSetResource{..} =
        (\a -> s { _name = a } :: WafSizeConstraintSetResource)
             <$> f _name

instance HasSizeConstraints WafSizeConstraintSetResource (TF.Argument Text) where
    sizeConstraints f s@WafSizeConstraintSetResource{..} =
        (\a -> s { _size_constraints = a } :: WafSizeConstraintSetResource)
             <$> f _size_constraints

wafSizeConstraintSetResource :: TF.Resource TF.AWS WafSizeConstraintSetResource
wafSizeConstraintSetResource =
    TF.newResource "aws_waf_size_constraint_set" $
        WafSizeConstraintSetResource {
            _name = TF.Nil
            , _size_constraints = TF.Nil
            }

{- | The @aws_waf_sql_injection_match_set@ AWS resource.

Provides a WAF SQL Injection Match Set Resource
-}
data WafSqlInjectionMatchSetResource = WafSqlInjectionMatchSetResource {
      _name                       :: !(TF.Argument Text)
    {- ^ (Required) The name or description of the SizeConstraintSet. -}
    , _sql_injection_match_tuples :: !(TF.Argument Text)
    {- ^ (Optional) The parts of web requests that you want AWS WAF to inspect for malicious SQL code and, if you want AWS WAF to inspect a header, the name of the header. -}
    } deriving (Show, Eq)

instance TF.ToHCL WafSqlInjectionMatchSetResource where
    toHCL WafSqlInjectionMatchSetResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.argument _name
        , TF.assign "sql_injection_match_tuples" <$> TF.argument _sql_injection_match_tuples
        ]

instance HasName WafSqlInjectionMatchSetResource (TF.Argument Text) where
    name f s@WafSqlInjectionMatchSetResource{..} =
        (\a -> s { _name = a } :: WafSqlInjectionMatchSetResource)
             <$> f _name

instance HasSqlInjectionMatchTuples WafSqlInjectionMatchSetResource (TF.Argument Text) where
    sqlInjectionMatchTuples f s@WafSqlInjectionMatchSetResource{..} =
        (\a -> s { _sql_injection_match_tuples = a } :: WafSqlInjectionMatchSetResource)
             <$> f _sql_injection_match_tuples

wafSqlInjectionMatchSetResource :: TF.Resource TF.AWS WafSqlInjectionMatchSetResource
wafSqlInjectionMatchSetResource =
    TF.newResource "aws_waf_sql_injection_match_set" $
        WafSqlInjectionMatchSetResource {
            _name = TF.Nil
            , _sql_injection_match_tuples = TF.Nil
            }

{- | The @aws_waf_web_acl@ AWS resource.

Provides a WAF Web ACL Resource
-}
data WafWebAclResource = WafWebAclResource {
      _default_action :: !(TF.Argument Text)
    {- ^ (Required) The action that you want AWS WAF to take when a request doesn't match the criteria in any of the rules that are associated with the web ACL. -}
    , _metric_name    :: !(TF.Argument Text)
    {- ^ (Required) The name or description for the Amazon CloudWatch metric of this web ACL. -}
    , _name           :: !(TF.Argument Text)
    {- ^ (Required) The name or description of the web ACL. -}
    , _rules          :: !(TF.Argument Text)
    {- ^ (Required) The rules to associate with the web ACL and the settings for each rule. -}
    } deriving (Show, Eq)

instance TF.ToHCL WafWebAclResource where
    toHCL WafWebAclResource{..} = TF.block $ catMaybes
        [ TF.assign "default_action" <$> TF.argument _default_action
        , TF.assign "metric_name" <$> TF.argument _metric_name
        , TF.assign "name" <$> TF.argument _name
        , TF.assign "rules" <$> TF.argument _rules
        ]

instance HasDefaultAction WafWebAclResource (TF.Argument Text) where
    defaultAction f s@WafWebAclResource{..} =
        (\a -> s { _default_action = a } :: WafWebAclResource)
             <$> f _default_action

instance HasMetricName WafWebAclResource (TF.Argument Text) where
    metricName f s@WafWebAclResource{..} =
        (\a -> s { _metric_name = a } :: WafWebAclResource)
             <$> f _metric_name

instance HasName WafWebAclResource (TF.Argument Text) where
    name f s@WafWebAclResource{..} =
        (\a -> s { _name = a } :: WafWebAclResource)
             <$> f _name

instance HasRules WafWebAclResource (TF.Argument Text) where
    rules f s@WafWebAclResource{..} =
        (\a -> s { _rules = a } :: WafWebAclResource)
             <$> f _rules

wafWebAclResource :: TF.Resource TF.AWS WafWebAclResource
wafWebAclResource =
    TF.newResource "aws_waf_web_acl" $
        WafWebAclResource {
            _default_action = TF.Nil
            , _metric_name = TF.Nil
            , _name = TF.Nil
            , _rules = TF.Nil
            }

{- | The @aws_waf_xss_match_set@ AWS resource.

Provides a WAF XSS Match Set Resource
-}
data WafXssMatchSetResource = WafXssMatchSetResource {
      _name             :: !(TF.Argument Text)
    {- ^ (Required) The name or description of the SizeConstraintSet. -}
    , _xss_match_tuples :: !(TF.Argument Text)
    {- ^ (Optional) The parts of web requests that you want to inspect for cross-site scripting attacks. -}
    } deriving (Show, Eq)

instance TF.ToHCL WafXssMatchSetResource where
    toHCL WafXssMatchSetResource{..} = TF.block $ catMaybes
        [ TF.assign "name" <$> TF.argument _name
        , TF.assign "xss_match_tuples" <$> TF.argument _xss_match_tuples
        ]

instance HasName WafXssMatchSetResource (TF.Argument Text) where
    name f s@WafXssMatchSetResource{..} =
        (\a -> s { _name = a } :: WafXssMatchSetResource)
             <$> f _name

instance HasXssMatchTuples WafXssMatchSetResource (TF.Argument Text) where
    xssMatchTuples f s@WafXssMatchSetResource{..} =
        (\a -> s { _xss_match_tuples = a } :: WafXssMatchSetResource)
             <$> f _xss_match_tuples

wafXssMatchSetResource :: TF.Resource TF.AWS WafXssMatchSetResource
wafXssMatchSetResource =
    TF.newResource "aws_waf_xss_match_set" $
        WafXssMatchSetResource {
            _name = TF.Nil
            , _xss_match_tuples = TF.Nil
            }

{- | The @aws_wafregional_byte_match_set@ AWS resource.

Provides a WAF Regional Byte Match Set Resource for use with Application
Load Balancer.
-}
data WafregionalByteMatchSetResource = WafregionalByteMatchSetResource {
      _byte_match_tuple :: !(TF.Argument Text)
    {- ^ (Optional)Settings for the ByteMatchSet, such as the bytes (typically a string that corresponds with ASCII characters) that you want AWS WAF to search for in web requests. ByteMatchTuple documented below. -}
    , _name             :: !(TF.Argument Text)
    {- ^ (Required) The name or description of the ByteMatchSet. -}
    } deriving (Show, Eq)

instance TF.ToHCL WafregionalByteMatchSetResource where
    toHCL WafregionalByteMatchSetResource{..} = TF.block $ catMaybes
        [ TF.assign "byte_match_tuple" <$> TF.argument _byte_match_tuple
        , TF.assign "name" <$> TF.argument _name
        ]

instance HasByteMatchTuple WafregionalByteMatchSetResource (TF.Argument Text) where
    byteMatchTuple f s@WafregionalByteMatchSetResource{..} =
        (\a -> s { _byte_match_tuple = a } :: WafregionalByteMatchSetResource)
             <$> f _byte_match_tuple

instance HasName WafregionalByteMatchSetResource (TF.Argument Text) where
    name f s@WafregionalByteMatchSetResource{..} =
        (\a -> s { _name = a } :: WafregionalByteMatchSetResource)
             <$> f _name

wafregionalByteMatchSetResource :: TF.Resource TF.AWS WafregionalByteMatchSetResource
wafregionalByteMatchSetResource =
    TF.newResource "aws_wafregional_byte_match_set" $
        WafregionalByteMatchSetResource {
            _byte_match_tuple = TF.Nil
            , _name = TF.Nil
            }

{- | The @aws_wafregional_ipset@ AWS resource.

Provides a WAF Regional IPSet Resource for use with Application Load
Balancer.
-}
data WafregionalIpsetResource = WafregionalIpsetResource {
      _ip_set_descriptor :: !(TF.Argument Text)
    {- ^ (Optional) The IP address type and IP address range (in CIDR notation) from which web requests originate. -}
    , _name              :: !(TF.Argument Text)
    {- ^ (Required) The name or description of the IPSet. -}
    } deriving (Show, Eq)

instance TF.ToHCL WafregionalIpsetResource where
    toHCL WafregionalIpsetResource{..} = TF.block $ catMaybes
        [ TF.assign "ip_set_descriptor" <$> TF.argument _ip_set_descriptor
        , TF.assign "name" <$> TF.argument _name
        ]

instance HasIpSetDescriptor WafregionalIpsetResource (TF.Argument Text) where
    ipSetDescriptor f s@WafregionalIpsetResource{..} =
        (\a -> s { _ip_set_descriptor = a } :: WafregionalIpsetResource)
             <$> f _ip_set_descriptor

instance HasName WafregionalIpsetResource (TF.Argument Text) where
    name f s@WafregionalIpsetResource{..} =
        (\a -> s { _name = a } :: WafregionalIpsetResource)
             <$> f _name

wafregionalIpsetResource :: TF.Resource TF.AWS WafregionalIpsetResource
wafregionalIpsetResource =
    TF.newResource "aws_wafregional_ipset" $
        WafregionalIpsetResource {
            _ip_set_descriptor = TF.Nil
            , _name = TF.Nil
            }

class HasAccelerationStatus s a | s -> a where
    accelerationStatus :: Functor f => (a -> f a) -> s -> f s

instance HasAccelerationStatus s a => HasAccelerationStatus (TF.Resource p s) a where
    accelerationStatus = TF.configuration . accelerationStatus

class HasAccepter s a | s -> a where
    accepter :: Functor f => (a -> f a) -> s -> f s

instance HasAccepter s a => HasAccepter (TF.Resource p s) a where
    accepter = TF.configuration . accepter

class HasAccessLogs s a | s -> a where
    accessLogs :: Functor f => (a -> f a) -> s -> f s

instance HasAccessLogs s a => HasAccessLogs (TF.Resource p s) a where
    accessLogs = TF.configuration . accessLogs

class HasAccessPolicies s a | s -> a where
    accessPolicies :: Functor f => (a -> f a) -> s -> f s

instance HasAccessPolicies s a => HasAccessPolicies (TF.Resource p s) a where
    accessPolicies = TF.configuration . accessPolicies

class HasAccessPolicy s a | s -> a where
    accessPolicy :: Functor f => (a -> f a) -> s -> f s

instance HasAccessPolicy s a => HasAccessPolicy (TF.Resource p s) a where
    accessPolicy = TF.configuration . accessPolicy

class HasAccountAlias s a | s -> a where
    accountAlias :: Functor f => (a -> f a) -> s -> f s

instance HasAccountAlias s a => HasAccountAlias (TF.Resource p s) a where
    accountAlias = TF.configuration . accountAlias

class HasAccountId s a | s -> a where
    accountId :: Functor f => (a -> f a) -> s -> f s

instance HasAccountId s a => HasAccountId (TF.Resource p s) a where
    accountId = TF.configuration . accountId

class HasAcl s a | s -> a where
    acl :: Functor f => (a -> f a) -> s -> f s

instance HasAcl s a => HasAcl (TF.Resource p s) a where
    acl = TF.configuration . acl

class HasAction s a | s -> a where
    action :: Functor f => (a -> f a) -> s -> f s

instance HasAction s a => HasAction (TF.Resource p s) a where
    action = TF.configuration . action

class HasActionsEnabled s a | s -> a where
    actionsEnabled :: Functor f => (a -> f a) -> s -> f s

instance HasActionsEnabled s a => HasActionsEnabled (TF.Resource p s) a where
    actionsEnabled = TF.configuration . actionsEnabled

class HasActive s a | s -> a where
    active :: Functor f => (a -> f a) -> s -> f s

instance HasActive s a => HasActive (TF.Resource p s) a where
    active = TF.configuration . active

class HasAddHeaderAction s a | s -> a where
    addHeaderAction :: Functor f => (a -> f a) -> s -> f s

instance HasAddHeaderAction s a => HasAddHeaderAction (TF.Resource p s) a where
    addHeaderAction = TF.configuration . addHeaderAction

class HasAdjustmentType s a | s -> a where
    adjustmentType :: Functor f => (a -> f a) -> s -> f s

instance HasAdjustmentType s a => HasAdjustmentType (TF.Resource p s) a where
    adjustmentType = TF.configuration . adjustmentType

class HasAdminCreateUserConfig s a | s -> a where
    adminCreateUserConfig :: Functor f => (a -> f a) -> s -> f s

instance HasAdminCreateUserConfig s a => HasAdminCreateUserConfig (TF.Resource p s) a where
    adminCreateUserConfig = TF.configuration . adminCreateUserConfig

class HasAdvancedOptions s a | s -> a where
    advancedOptions :: Functor f => (a -> f a) -> s -> f s

instance HasAdvancedOptions s a => HasAdvancedOptions (TF.Resource p s) a where
    advancedOptions = TF.configuration . advancedOptions

class HasAfter s a | s -> a where
    after :: Functor f => (a -> f a) -> s -> f s

instance HasAfter s a => HasAfter (TF.Resource p s) a where
    after = TF.configuration . after

class HasAgentVersion s a | s -> a where
    agentVersion :: Functor f => (a -> f a) -> s -> f s

instance HasAgentVersion s a => HasAgentVersion (TF.Resource p s) a where
    agentVersion = TF.configuration . agentVersion

class HasAlarmActions s a | s -> a where
    alarmActions :: Functor f => (a -> f a) -> s -> f s

instance HasAlarmActions s a => HasAlarmActions (TF.Resource p s) a where
    alarmActions = TF.configuration . alarmActions

class HasAlarmConfiguration s a | s -> a where
    alarmConfiguration :: Functor f => (a -> f a) -> s -> f s

instance HasAlarmConfiguration s a => HasAlarmConfiguration (TF.Resource p s) a where
    alarmConfiguration = TF.configuration . alarmConfiguration

class HasAlarmDescription s a | s -> a where
    alarmDescription :: Functor f => (a -> f a) -> s -> f s

instance HasAlarmDescription s a => HasAlarmDescription (TF.Resource p s) a where
    alarmDescription = TF.configuration . alarmDescription

class HasAlarmName s a | s -> a where
    alarmName :: Functor f => (a -> f a) -> s -> f s

instance HasAlarmName s a => HasAlarmName (TF.Resource p s) a where
    alarmName = TF.configuration . alarmName

class HasAlbTargetGroupArn s a | s -> a where
    albTargetGroupArn :: Functor f => (a -> f a) -> s -> f s

instance HasAlbTargetGroupArn s a => HasAlbTargetGroupArn (TF.Resource p s) a where
    albTargetGroupArn = TF.configuration . albTargetGroupArn

class HasAlias s a | s -> a where
    alias :: Functor f => (a -> f a) -> s -> f s

instance HasAlias s a => HasAlias (TF.Resource p s) a where
    alias = TF.configuration . alias

class HasAliasAttributes s a | s -> a where
    aliasAttributes :: Functor f => (a -> f a) -> s -> f s

instance HasAliasAttributes s a => HasAliasAttributes (TF.Resource p s) a where
    aliasAttributes = TF.configuration . aliasAttributes

class HasAliases s a | s -> a where
    aliases :: Functor f => (a -> f a) -> s -> f s

instance HasAliases s a => HasAliases (TF.Resource p s) a where
    aliases = TF.configuration . aliases

class HasAllocatedMemory s a | s -> a where
    allocatedMemory :: Functor f => (a -> f a) -> s -> f s

instance HasAllocatedMemory s a => HasAllocatedMemory (TF.Resource p s) a where
    allocatedMemory = TF.configuration . allocatedMemory

class HasAllocatedStorage s a | s -> a where
    allocatedStorage :: Functor f => (a -> f a) -> s -> f s

instance HasAllocatedStorage s a => HasAllocatedStorage (TF.Resource p s) a where
    allocatedStorage = TF.configuration . allocatedStorage

class HasAllocationId s a | s -> a where
    allocationId :: Functor f => (a -> f a) -> s -> f s

instance HasAllocationId s a => HasAllocationId (TF.Resource p s) a where
    allocationId = TF.configuration . allocationId

class HasAllocationStrategy s a | s -> a where
    allocationStrategy :: Functor f => (a -> f a) -> s -> f s

instance HasAllocationStrategy s a => HasAllocationStrategy (TF.Resource p s) a where
    allocationStrategy = TF.configuration . allocationStrategy

class HasAllowMajorVersionUpgrade s a | s -> a where
    allowMajorVersionUpgrade :: Functor f => (a -> f a) -> s -> f s

instance HasAllowMajorVersionUpgrade s a => HasAllowMajorVersionUpgrade (TF.Resource p s) a where
    allowMajorVersionUpgrade = TF.configuration . allowMajorVersionUpgrade

class HasAllowReassociation s a | s -> a where
    allowReassociation :: Functor f => (a -> f a) -> s -> f s

instance HasAllowReassociation s a => HasAllowReassociation (TF.Resource p s) a where
    allowReassociation = TF.configuration . allowReassociation

class HasAllowSelfManagement s a | s -> a where
    allowSelfManagement :: Functor f => (a -> f a) -> s -> f s

instance HasAllowSelfManagement s a => HasAllowSelfManagement (TF.Resource p s) a where
    allowSelfManagement = TF.configuration . allowSelfManagement

class HasAllowSsh s a | s -> a where
    allowSsh :: Functor f => (a -> f a) -> s -> f s

instance HasAllowSsh s a => HasAllowSsh (TF.Resource p s) a where
    allowSsh = TF.configuration . allowSsh

class HasAllowSudo s a | s -> a where
    allowSudo :: Functor f => (a -> f a) -> s -> f s

instance HasAllowSudo s a => HasAllowSudo (TF.Resource p s) a where
    allowSudo = TF.configuration . allowSudo

class HasAllowUnassociatedTargets s a | s -> a where
    allowUnassociatedTargets :: Functor f => (a -> f a) -> s -> f s

instance HasAllowUnassociatedTargets s a => HasAllowUnassociatedTargets (TF.Resource p s) a where
    allowUnassociatedTargets = TF.configuration . allowUnassociatedTargets

class HasAllowUnauthenticatedIdentities s a | s -> a where
    allowUnauthenticatedIdentities :: Functor f => (a -> f a) -> s -> f s

instance HasAllowUnauthenticatedIdentities s a => HasAllowUnauthenticatedIdentities (TF.Resource p s) a where
    allowUnauthenticatedIdentities = TF.configuration . allowUnauthenticatedIdentities

class HasAllowUsersToChangePassword s a | s -> a where
    allowUsersToChangePassword :: Functor f => (a -> f a) -> s -> f s

instance HasAllowUsersToChangePassword s a => HasAllowUsersToChangePassword (TF.Resource p s) a where
    allowUsersToChangePassword = TF.configuration . allowUsersToChangePassword

class HasAllowVersionUpgrade s a | s -> a where
    allowVersionUpgrade :: Functor f => (a -> f a) -> s -> f s

instance HasAllowVersionUpgrade s a => HasAllowVersionUpgrade (TF.Resource p s) a where
    allowVersionUpgrade = TF.configuration . allowVersionUpgrade

class HasAllowedOauthFlows s a | s -> a where
    allowedOauthFlows :: Functor f => (a -> f a) -> s -> f s

instance HasAllowedOauthFlows s a => HasAllowedOauthFlows (TF.Resource p s) a where
    allowedOauthFlows = TF.configuration . allowedOauthFlows

class HasAllowedOauthFlowsUserPoolClient s a | s -> a where
    allowedOauthFlowsUserPoolClient :: Functor f => (a -> f a) -> s -> f s

instance HasAllowedOauthFlowsUserPoolClient s a => HasAllowedOauthFlowsUserPoolClient (TF.Resource p s) a where
    allowedOauthFlowsUserPoolClient = TF.configuration . allowedOauthFlowsUserPoolClient

class HasAllowedOauthScopes s a | s -> a where
    allowedOauthScopes :: Functor f => (a -> f a) -> s -> f s

instance HasAllowedOauthScopes s a => HasAllowedOauthScopes (TF.Resource p s) a where
    allowedOauthScopes = TF.configuration . allowedOauthScopes

class HasAmi s a | s -> a where
    ami :: Functor f => (a -> f a) -> s -> f s

instance HasAmi s a => HasAmi (TF.Resource p s) a where
    ami = TF.configuration . ami

class HasAmiId s a | s -> a where
    amiId :: Functor f => (a -> f a) -> s -> f s

instance HasAmiId s a => HasAmiId (TF.Resource p s) a where
    amiId = TF.configuration . amiId

class HasApiId s a | s -> a where
    apiId :: Functor f => (a -> f a) -> s -> f s

instance HasApiId s a => HasApiId (TF.Resource p s) a where
    apiId = TF.configuration . apiId

class HasApiKeyRequired s a | s -> a where
    apiKeyRequired :: Functor f => (a -> f a) -> s -> f s

instance HasApiKeyRequired s a => HasApiKeyRequired (TF.Resource p s) a where
    apiKeyRequired = TF.configuration . apiKeyRequired

class HasApiStages s a | s -> a where
    apiStages :: Functor f => (a -> f a) -> s -> f s

instance HasApiStages s a => HasApiStages (TF.Resource p s) a where
    apiStages = TF.configuration . apiStages

class HasAppName s a | s -> a where
    appName :: Functor f => (a -> f a) -> s -> f s

instance HasAppName s a => HasAppName (TF.Resource p s) a where
    appName = TF.configuration . appName

class HasAppServer s a | s -> a where
    appServer :: Functor f => (a -> f a) -> s -> f s

instance HasAppServer s a => HasAppServer (TF.Resource p s) a where
    appServer = TF.configuration . appServer

class HasAppServerVersion s a | s -> a where
    appServerVersion :: Functor f => (a -> f a) -> s -> f s

instance HasAppServerVersion s a => HasAppServerVersion (TF.Resource p s) a where
    appServerVersion = TF.configuration . appServerVersion

class HasAppSource s a | s -> a where
    appSource :: Functor f => (a -> f a) -> s -> f s

instance HasAppSource s a => HasAppSource (TF.Resource p s) a where
    appSource = TF.configuration . appSource

class HasApplication s a | s -> a where
    application :: Functor f => (a -> f a) -> s -> f s

instance HasApplication s a => HasApplication (TF.Resource p s) a where
    application = TF.configuration . application

class HasApplications s a | s -> a where
    applications :: Functor f => (a -> f a) -> s -> f s

instance HasApplications s a => HasApplications (TF.Resource p s) a where
    applications = TF.configuration . applications

class HasApplyImmediately s a | s -> a where
    applyImmediately :: Functor f => (a -> f a) -> s -> f s

instance HasApplyImmediately s a => HasApplyImmediately (TF.Resource p s) a where
    applyImmediately = TF.configuration . applyImmediately

class HasApprovalRule s a | s -> a where
    approvalRule :: Functor f => (a -> f a) -> s -> f s

instance HasApprovalRule s a => HasApprovalRule (TF.Resource p s) a where
    approvalRule = TF.configuration . approvalRule

class HasApprovedPatches s a | s -> a where
    approvedPatches :: Functor f => (a -> f a) -> s -> f s

instance HasApprovedPatches s a => HasApprovedPatches (TF.Resource p s) a where
    approvedPatches = TF.configuration . approvedPatches

class HasApprovedPatchesComplianceLevel s a | s -> a where
    approvedPatchesComplianceLevel :: Functor f => (a -> f a) -> s -> f s

instance HasApprovedPatchesComplianceLevel s a => HasApprovedPatchesComplianceLevel (TF.Resource p s) a where
    approvedPatchesComplianceLevel = TF.configuration . approvedPatchesComplianceLevel

class HasArchitecture s a | s -> a where
    architecture :: Functor f => (a -> f a) -> s -> f s

instance HasArchitecture s a => HasArchitecture (TF.Resource p s) a where
    architecture = TF.configuration . architecture

class HasArn s a | s -> a where
    arn :: Functor f => (a -> f a) -> s -> f s

instance HasArn s a => HasArn (TF.Resource p s) a where
    arn = TF.configuration . arn

class HasArtifactStore s a | s -> a where
    artifactStore :: Functor f => (a -> f a) -> s -> f s

instance HasArtifactStore s a => HasArtifactStore (TF.Resource p s) a where
    artifactStore = TF.configuration . artifactStore

class HasArtifacts s a | s -> a where
    artifacts :: Functor f => (a -> f a) -> s -> f s

instance HasArtifacts s a => HasArtifacts (TF.Resource p s) a where
    artifacts = TF.configuration . artifacts

class HasAssignGeneratedIpv6CidrBlock s a | s -> a where
    assignGeneratedIpv6CidrBlock :: Functor f => (a -> f a) -> s -> f s

instance HasAssignGeneratedIpv6CidrBlock s a => HasAssignGeneratedIpv6CidrBlock (TF.Resource p s) a where
    assignGeneratedIpv6CidrBlock = TF.configuration . assignGeneratedIpv6CidrBlock

class HasAssignIpv6AddressOnCreation s a | s -> a where
    assignIpv6AddressOnCreation :: Functor f => (a -> f a) -> s -> f s

instance HasAssignIpv6AddressOnCreation s a => HasAssignIpv6AddressOnCreation (TF.Resource p s) a where
    assignIpv6AddressOnCreation = TF.configuration . assignIpv6AddressOnCreation

class HasAssociatePublicIpAddress s a | s -> a where
    associatePublicIpAddress :: Functor f => (a -> f a) -> s -> f s

instance HasAssociatePublicIpAddress s a => HasAssociatePublicIpAddress (TF.Resource p s) a where
    associatePublicIpAddress = TF.configuration . associatePublicIpAddress

class HasAssociateWithPrivateIp s a | s -> a where
    associateWithPrivateIp :: Functor f => (a -> f a) -> s -> f s

instance HasAssociateWithPrivateIp s a => HasAssociateWithPrivateIp (TF.Resource p s) a where
    associateWithPrivateIp = TF.configuration . associateWithPrivateIp

class HasAssociationName s a | s -> a where
    associationName :: Functor f => (a -> f a) -> s -> f s

instance HasAssociationName s a => HasAssociationName (TF.Resource p s) a where
    associationName = TF.configuration . associationName

class HasAssumeRolePolicy s a | s -> a where
    assumeRolePolicy :: Functor f => (a -> f a) -> s -> f s

instance HasAssumeRolePolicy s a => HasAssumeRolePolicy (TF.Resource p s) a where
    assumeRolePolicy = TF.configuration . assumeRolePolicy

class HasAtRestEncryptionEnabled s a | s -> a where
    atRestEncryptionEnabled :: Functor f => (a -> f a) -> s -> f s

instance HasAtRestEncryptionEnabled s a => HasAtRestEncryptionEnabled (TF.Resource p s) a where
    atRestEncryptionEnabled = TF.configuration . atRestEncryptionEnabled

class HasAttachment s a | s -> a where
    attachment :: Functor f => (a -> f a) -> s -> f s

instance HasAttachment s a => HasAttachment (TF.Resource p s) a where
    attachment = TF.configuration . attachment

class HasAttribute s a | s -> a where
    attribute :: Functor f => (a -> f a) -> s -> f s

instance HasAttribute s a => HasAttribute (TF.Resource p s) a where
    attribute = TF.configuration . attribute

class HasAudio s a | s -> a where
    audio :: Functor f => (a -> f a) -> s -> f s

instance HasAudio s a => HasAudio (TF.Resource p s) a where
    audio = TF.configuration . audio

class HasAudioCodecOptions s a | s -> a where
    audioCodecOptions :: Functor f => (a -> f a) -> s -> f s

instance HasAudioCodecOptions s a => HasAudioCodecOptions (TF.Resource p s) a where
    audioCodecOptions = TF.configuration . audioCodecOptions

class HasAuthToken s a | s -> a where
    authToken :: Functor f => (a -> f a) -> s -> f s

instance HasAuthToken s a => HasAuthToken (TF.Resource p s) a where
    authToken = TF.configuration . authToken

class HasAuthorization s a | s -> a where
    authorization :: Functor f => (a -> f a) -> s -> f s

instance HasAuthorization s a => HasAuthorization (TF.Resource p s) a where
    authorization = TF.configuration . authorization

class HasAuthorizerCredentials s a | s -> a where
    authorizerCredentials :: Functor f => (a -> f a) -> s -> f s

instance HasAuthorizerCredentials s a => HasAuthorizerCredentials (TF.Resource p s) a where
    authorizerCredentials = TF.configuration . authorizerCredentials

class HasAuthorizerId s a | s -> a where
    authorizerId :: Functor f => (a -> f a) -> s -> f s

instance HasAuthorizerId s a => HasAuthorizerId (TF.Resource p s) a where
    authorizerId = TF.configuration . authorizerId

class HasAuthorizerResultTtlInSeconds s a | s -> a where
    authorizerResultTtlInSeconds :: Functor f => (a -> f a) -> s -> f s

instance HasAuthorizerResultTtlInSeconds s a => HasAuthorizerResultTtlInSeconds (TF.Resource p s) a where
    authorizerResultTtlInSeconds = TF.configuration . authorizerResultTtlInSeconds

class HasAuthorizerUri s a | s -> a where
    authorizerUri :: Functor f => (a -> f a) -> s -> f s

instance HasAuthorizerUri s a => HasAuthorizerUri (TF.Resource p s) a where
    authorizerUri = TF.configuration . authorizerUri

class HasAutoAccept s a | s -> a where
    autoAccept :: Functor f => (a -> f a) -> s -> f s

instance HasAutoAccept s a => HasAutoAccept (TF.Resource p s) a where
    autoAccept = TF.configuration . autoAccept

class HasAutoAssignElasticIps s a | s -> a where
    autoAssignElasticIps :: Functor f => (a -> f a) -> s -> f s

instance HasAutoAssignElasticIps s a => HasAutoAssignElasticIps (TF.Resource p s) a where
    autoAssignElasticIps = TF.configuration . autoAssignElasticIps

class HasAutoAssignPublicIps s a | s -> a where
    autoAssignPublicIps :: Functor f => (a -> f a) -> s -> f s

instance HasAutoAssignPublicIps s a => HasAutoAssignPublicIps (TF.Resource p s) a where
    autoAssignPublicIps = TF.configuration . autoAssignPublicIps

class HasAutoBundleOnDeploy s a | s -> a where
    autoBundleOnDeploy :: Functor f => (a -> f a) -> s -> f s

instance HasAutoBundleOnDeploy s a => HasAutoBundleOnDeploy (TF.Resource p s) a where
    autoBundleOnDeploy = TF.configuration . autoBundleOnDeploy

class HasAutoHealing s a | s -> a where
    autoHealing :: Functor f => (a -> f a) -> s -> f s

instance HasAutoHealing s a => HasAutoHealing (TF.Resource p s) a where
    autoHealing = TF.configuration . autoHealing

class HasAutoMinorVersionUpgrade s a | s -> a where
    autoMinorVersionUpgrade :: Functor f => (a -> f a) -> s -> f s

instance HasAutoMinorVersionUpgrade s a => HasAutoMinorVersionUpgrade (TF.Resource p s) a where
    autoMinorVersionUpgrade = TF.configuration . autoMinorVersionUpgrade

class HasAutoRollbackConfiguration s a | s -> a where
    autoRollbackConfiguration :: Functor f => (a -> f a) -> s -> f s

instance HasAutoRollbackConfiguration s a => HasAutoRollbackConfiguration (TF.Resource p s) a where
    autoRollbackConfiguration = TF.configuration . autoRollbackConfiguration

class HasAutoScalingType s a | s -> a where
    autoScalingType :: Functor f => (a -> f a) -> s -> f s

instance HasAutoScalingType s a => HasAutoScalingType (TF.Resource p s) a where
    autoScalingType = TF.configuration . autoScalingType

class HasAutoVerifiedAttributes s a | s -> a where
    autoVerifiedAttributes :: Functor f => (a -> f a) -> s -> f s

instance HasAutoVerifiedAttributes s a => HasAutoVerifiedAttributes (TF.Resource p s) a where
    autoVerifiedAttributes = TF.configuration . autoVerifiedAttributes

class HasAutomatedSnapshotRetentionPeriod s a | s -> a where
    automatedSnapshotRetentionPeriod :: Functor f => (a -> f a) -> s -> f s

instance HasAutomatedSnapshotRetentionPeriod s a => HasAutomatedSnapshotRetentionPeriod (TF.Resource p s) a where
    automatedSnapshotRetentionPeriod = TF.configuration . automatedSnapshotRetentionPeriod

class HasAutomaticFailoverEnabled s a | s -> a where
    automaticFailoverEnabled :: Functor f => (a -> f a) -> s -> f s

instance HasAutomaticFailoverEnabled s a => HasAutomaticFailoverEnabled (TF.Resource p s) a where
    automaticFailoverEnabled = TF.configuration . automaticFailoverEnabled

class HasAutoscalingGroupName s a | s -> a where
    autoscalingGroupName :: Functor f => (a -> f a) -> s -> f s

instance HasAutoscalingGroupName s a => HasAutoscalingGroupName (TF.Resource p s) a where
    autoscalingGroupName = TF.configuration . autoscalingGroupName

class HasAutoscalingGroups s a | s -> a where
    autoscalingGroups :: Functor f => (a -> f a) -> s -> f s

instance HasAutoscalingGroups s a => HasAutoscalingGroups (TF.Resource p s) a where
    autoscalingGroups = TF.configuration . autoscalingGroups

class HasAutoscalingRole s a | s -> a where
    autoscalingRole :: Functor f => (a -> f a) -> s -> f s

instance HasAutoscalingRole s a => HasAutoscalingRole (TF.Resource p s) a where
    autoscalingRole = TF.configuration . autoscalingRole

class HasAvailabilityZone s a | s -> a where
    availabilityZone :: Functor f => (a -> f a) -> s -> f s

instance HasAvailabilityZone s a => HasAvailabilityZone (TF.Resource p s) a where
    availabilityZone = TF.configuration . availabilityZone

class HasAvailabilityZones s a | s -> a where
    availabilityZones :: Functor f => (a -> f a) -> s -> f s

instance HasAvailabilityZones s a => HasAvailabilityZones (TF.Resource p s) a where
    availabilityZones = TF.configuration . availabilityZones

class HasAwsFlowRubySettings s a | s -> a where
    awsFlowRubySettings :: Functor f => (a -> f a) -> s -> f s

instance HasAwsFlowRubySettings s a => HasAwsFlowRubySettings (TF.Resource p s) a where
    awsFlowRubySettings = TF.configuration . awsFlowRubySettings

class HasAwsKmsKeyArn s a | s -> a where
    awsKmsKeyArn :: Functor f => (a -> f a) -> s -> f s

instance HasAwsKmsKeyArn s a => HasAwsKmsKeyArn (TF.Resource p s) a where
    awsKmsKeyArn = TF.configuration . awsKmsKeyArn

class HasAzMode s a | s -> a where
    azMode :: Functor f => (a -> f a) -> s -> f s

instance HasAzMode s a => HasAzMode (TF.Resource p s) a where
    azMode = TF.configuration . azMode

class HasBackupRetentionPeriod s a | s -> a where
    backupRetentionPeriod :: Functor f => (a -> f a) -> s -> f s

instance HasBackupRetentionPeriod s a => HasBackupRetentionPeriod (TF.Resource p s) a where
    backupRetentionPeriod = TF.configuration . backupRetentionPeriod

class HasBackupWindow s a | s -> a where
    backupWindow :: Functor f => (a -> f a) -> s -> f s

instance HasBackupWindow s a => HasBackupWindow (TF.Resource p s) a where
    backupWindow = TF.configuration . backupWindow

class HasBandwidth s a | s -> a where
    bandwidth :: Functor f => (a -> f a) -> s -> f s

instance HasBandwidth s a => HasBandwidth (TF.Resource p s) a where
    bandwidth = TF.configuration . bandwidth

class HasBasePath s a | s -> a where
    basePath :: Functor f => (a -> f a) -> s -> f s

instance HasBasePath s a => HasBasePath (TF.Resource p s) a where
    basePath = TF.configuration . basePath

class HasBaselineId s a | s -> a where
    baselineId :: Functor f => (a -> f a) -> s -> f s

instance HasBaselineId s a => HasBaselineId (TF.Resource p s) a where
    baselineId = TF.configuration . baselineId

class HasBatchSize s a | s -> a where
    batchSize :: Functor f => (a -> f a) -> s -> f s

instance HasBatchSize s a => HasBatchSize (TF.Resource p s) a where
    batchSize = TF.configuration . batchSize

class HasBerkshelfVersion s a | s -> a where
    berkshelfVersion :: Functor f => (a -> f a) -> s -> f s

instance HasBerkshelfVersion s a => HasBerkshelfVersion (TF.Resource p s) a where
    berkshelfVersion = TF.configuration . berkshelfVersion

class HasBgpAsn s a | s -> a where
    bgpAsn :: Functor f => (a -> f a) -> s -> f s

instance HasBgpAsn s a => HasBgpAsn (TF.Resource p s) a where
    bgpAsn = TF.configuration . bgpAsn

class HasBinaryMediaTypes s a | s -> a where
    binaryMediaTypes :: Functor f => (a -> f a) -> s -> f s

instance HasBinaryMediaTypes s a => HasBinaryMediaTypes (TF.Resource p s) a where
    binaryMediaTypes = TF.configuration . binaryMediaTypes

class HasBlockDurationMinutes s a | s -> a where
    blockDurationMinutes :: Functor f => (a -> f a) -> s -> f s

instance HasBlockDurationMinutes s a => HasBlockDurationMinutes (TF.Resource p s) a where
    blockDurationMinutes = TF.configuration . blockDurationMinutes

class HasBlueGreenDeploymentConfig s a | s -> a where
    blueGreenDeploymentConfig :: Functor f => (a -> f a) -> s -> f s

instance HasBlueGreenDeploymentConfig s a => HasBlueGreenDeploymentConfig (TF.Resource p s) a where
    blueGreenDeploymentConfig = TF.configuration . blueGreenDeploymentConfig

class HasBlueprintId s a | s -> a where
    blueprintId :: Functor f => (a -> f a) -> s -> f s

instance HasBlueprintId s a => HasBlueprintId (TF.Resource p s) a where
    blueprintId = TF.configuration . blueprintId

class HasBody s a | s -> a where
    body :: Functor f => (a -> f a) -> s -> f s

instance HasBody s a => HasBody (TF.Resource p s) a where
    body = TF.configuration . body

class HasBootstrapAction s a | s -> a where
    bootstrapAction :: Functor f => (a -> f a) -> s -> f s

instance HasBootstrapAction s a => HasBootstrapAction (TF.Resource p s) a where
    bootstrapAction = TF.configuration . bootstrapAction

class HasBounceAction s a | s -> a where
    bounceAction :: Functor f => (a -> f a) -> s -> f s

instance HasBounceAction s a => HasBounceAction (TF.Resource p s) a where
    bounceAction = TF.configuration . bounceAction

class HasBranches s a | s -> a where
    branches :: Functor f => (a -> f a) -> s -> f s

instance HasBranches s a => HasBranches (TF.Resource p s) a where
    branches = TF.configuration . branches

class HasBrokerName s a | s -> a where
    brokerName :: Functor f => (a -> f a) -> s -> f s

instance HasBrokerName s a => HasBrokerName (TF.Resource p s) a where
    brokerName = TF.configuration . brokerName

class HasBucket s a | s -> a where
    bucket :: Functor f => (a -> f a) -> s -> f s

instance HasBucket s a => HasBucket (TF.Resource p s) a where
    bucket = TF.configuration . bucket

class HasBucketPrefix s a | s -> a where
    bucketPrefix :: Functor f => (a -> f a) -> s -> f s

instance HasBucketPrefix s a => HasBucketPrefix (TF.Resource p s) a where
    bucketPrefix = TF.configuration . bucketPrefix

class HasBuildTimeout s a | s -> a where
    buildTimeout :: Functor f => (a -> f a) -> s -> f s

instance HasBuildTimeout s a => HasBuildTimeout (TF.Resource p s) a where
    buildTimeout = TF.configuration . buildTimeout

class HasBundleId s a | s -> a where
    bundleId :: Functor f => (a -> f a) -> s -> f s

instance HasBundleId s a => HasBundleId (TF.Resource p s) a where
    bundleId = TF.configuration . bundleId

class HasBundlerVersion s a | s -> a where
    bundlerVersion :: Functor f => (a -> f a) -> s -> f s

instance HasBundlerVersion s a => HasBundlerVersion (TF.Resource p s) a where
    bundlerVersion = TF.configuration . bundlerVersion

class HasByteMatchTuple s a | s -> a where
    byteMatchTuple :: Functor f => (a -> f a) -> s -> f s

instance HasByteMatchTuple s a => HasByteMatchTuple (TF.Resource p s) a where
    byteMatchTuple = TF.configuration . byteMatchTuple

class HasByteMatchTuples s a | s -> a where
    byteMatchTuples :: Functor f => (a -> f a) -> s -> f s

instance HasByteMatchTuples s a => HasByteMatchTuples (TF.Resource p s) a where
    byteMatchTuples = TF.configuration . byteMatchTuples

class HasCacheBehavior s a | s -> a where
    cacheBehavior :: Functor f => (a -> f a) -> s -> f s

instance HasCacheBehavior s a => HasCacheBehavior (TF.Resource p s) a where
    cacheBehavior = TF.configuration . cacheBehavior

class HasCacheClusterEnabled s a | s -> a where
    cacheClusterEnabled :: Functor f => (a -> f a) -> s -> f s

instance HasCacheClusterEnabled s a => HasCacheClusterEnabled (TF.Resource p s) a where
    cacheClusterEnabled = TF.configuration . cacheClusterEnabled

class HasCacheClusterSize s a | s -> a where
    cacheClusterSize :: Functor f => (a -> f a) -> s -> f s

instance HasCacheClusterSize s a => HasCacheClusterSize (TF.Resource p s) a where
    cacheClusterSize = TF.configuration . cacheClusterSize

class HasCacheControl s a | s -> a where
    cacheControl :: Functor f => (a -> f a) -> s -> f s

instance HasCacheControl s a => HasCacheControl (TF.Resource p s) a where
    cacheControl = TF.configuration . cacheControl

class HasCacheKeyNamespace s a | s -> a where
    cacheKeyNamespace :: Functor f => (a -> f a) -> s -> f s

instance HasCacheKeyNamespace s a => HasCacheKeyNamespace (TF.Resource p s) a where
    cacheKeyNamespace = TF.configuration . cacheKeyNamespace

class HasCacheKeyParameters s a | s -> a where
    cacheKeyParameters :: Functor f => (a -> f a) -> s -> f s

instance HasCacheKeyParameters s a => HasCacheKeyParameters (TF.Resource p s) a where
    cacheKeyParameters = TF.configuration . cacheKeyParameters

class HasCallbackUrls s a | s -> a where
    callbackUrls :: Functor f => (a -> f a) -> s -> f s

instance HasCallbackUrls s a => HasCallbackUrls (TF.Resource p s) a where
    callbackUrls = TF.configuration . callbackUrls

class HasCapabilities s a | s -> a where
    capabilities :: Functor f => (a -> f a) -> s -> f s

instance HasCapabilities s a => HasCapabilities (TF.Resource p s) a where
    capabilities = TF.configuration . capabilities

class HasCatalogId s a | s -> a where
    catalogId :: Functor f => (a -> f a) -> s -> f s

instance HasCatalogId s a => HasCatalogId (TF.Resource p s) a where
    catalogId = TF.configuration . catalogId

class HasCdcStartTime s a | s -> a where
    cdcStartTime :: Functor f => (a -> f a) -> s -> f s

instance HasCdcStartTime s a => HasCdcStartTime (TF.Resource p s) a where
    cdcStartTime = TF.configuration . cdcStartTime

class HasCertificateArn s a | s -> a where
    certificateArn :: Functor f => (a -> f a) -> s -> f s

instance HasCertificateArn s a => HasCertificateArn (TF.Resource p s) a where
    certificateArn = TF.configuration . certificateArn

class HasCertificateBody s a | s -> a where
    certificateBody :: Functor f => (a -> f a) -> s -> f s

instance HasCertificateBody s a => HasCertificateBody (TF.Resource p s) a where
    certificateBody = TF.configuration . certificateBody

class HasCertificateChain s a | s -> a where
    certificateChain :: Functor f => (a -> f a) -> s -> f s

instance HasCertificateChain s a => HasCertificateChain (TF.Resource p s) a where
    certificateChain = TF.configuration . certificateChain

class HasCertificateId s a | s -> a where
    certificateId :: Functor f => (a -> f a) -> s -> f s

instance HasCertificateId s a => HasCertificateId (TF.Resource p s) a where
    certificateId = TF.configuration . certificateId

class HasCertificateName s a | s -> a where
    certificateName :: Functor f => (a -> f a) -> s -> f s

instance HasCertificateName s a => HasCertificateName (TF.Resource p s) a where
    certificateName = TF.configuration . certificateName

class HasCertificatePem s a | s -> a where
    certificatePem :: Functor f => (a -> f a) -> s -> f s

instance HasCertificatePem s a => HasCertificatePem (TF.Resource p s) a where
    certificatePem = TF.configuration . certificatePem

class HasCertificatePrivateKey s a | s -> a where
    certificatePrivateKey :: Functor f => (a -> f a) -> s -> f s

instance HasCertificatePrivateKey s a => HasCertificatePrivateKey (TF.Resource p s) a where
    certificatePrivateKey = TF.configuration . certificatePrivateKey

class HasCertificateWallet s a | s -> a where
    certificateWallet :: Functor f => (a -> f a) -> s -> f s

instance HasCertificateWallet s a => HasCertificateWallet (TF.Resource p s) a where
    certificateWallet = TF.configuration . certificateWallet

class HasCharacterSetName s a | s -> a where
    characterSetName :: Functor f => (a -> f a) -> s -> f s

instance HasCharacterSetName s a => HasCharacterSetName (TF.Resource p s) a where
    characterSetName = TF.configuration . characterSetName

class HasChildHealthThreshold s a | s -> a where
    childHealthThreshold :: Functor f => (a -> f a) -> s -> f s

instance HasChildHealthThreshold s a => HasChildHealthThreshold (TF.Resource p s) a where
    childHealthThreshold = TF.configuration . childHealthThreshold

class HasChildHealthchecks s a | s -> a where
    childHealthchecks :: Functor f => (a -> f a) -> s -> f s

instance HasChildHealthchecks s a => HasChildHealthchecks (TF.Resource p s) a where
    childHealthchecks = TF.configuration . childHealthchecks

class HasCidr s a | s -> a where
    cidr :: Functor f => (a -> f a) -> s -> f s

instance HasCidr s a => HasCidr (TF.Resource p s) a where
    cidr = TF.configuration . cidr

class HasCidrBlock s a | s -> a where
    cidrBlock :: Functor f => (a -> f a) -> s -> f s

instance HasCidrBlock s a => HasCidrBlock (TF.Resource p s) a where
    cidrBlock = TF.configuration . cidrBlock

class HasCidrBlocks s a | s -> a where
    cidrBlocks :: Functor f => (a -> f a) -> s -> f s

instance HasCidrBlocks s a => HasCidrBlocks (TF.Resource p s) a where
    cidrBlocks = TF.configuration . cidrBlocks

class HasClientCertificateId s a | s -> a where
    clientCertificateId :: Functor f => (a -> f a) -> s -> f s

instance HasClientCertificateId s a => HasClientCertificateId (TF.Resource p s) a where
    clientCertificateId = TF.configuration . clientCertificateId

class HasClientIdList s a | s -> a where
    clientIdList :: Functor f => (a -> f a) -> s -> f s

instance HasClientIdList s a => HasClientIdList (TF.Resource p s) a where
    clientIdList = TF.configuration . clientIdList

class HasCloudWatchLogsGroupArn s a | s -> a where
    cloudWatchLogsGroupArn :: Functor f => (a -> f a) -> s -> f s

instance HasCloudWatchLogsGroupArn s a => HasCloudWatchLogsGroupArn (TF.Resource p s) a where
    cloudWatchLogsGroupArn = TF.configuration . cloudWatchLogsGroupArn

class HasCloudWatchLogsRoleArn s a | s -> a where
    cloudWatchLogsRoleArn :: Functor f => (a -> f a) -> s -> f s

instance HasCloudWatchLogsRoleArn s a => HasCloudWatchLogsRoleArn (TF.Resource p s) a where
    cloudWatchLogsRoleArn = TF.configuration . cloudWatchLogsRoleArn

class HasCloudwatchAlarmName s a | s -> a where
    cloudwatchAlarmName :: Functor f => (a -> f a) -> s -> f s

instance HasCloudwatchAlarmName s a => HasCloudwatchAlarmName (TF.Resource p s) a where
    cloudwatchAlarmName = TF.configuration . cloudwatchAlarmName

class HasCloudwatchAlarmRegion s a | s -> a where
    cloudwatchAlarmRegion :: Functor f => (a -> f a) -> s -> f s

instance HasCloudwatchAlarmRegion s a => HasCloudwatchAlarmRegion (TF.Resource p s) a where
    cloudwatchAlarmRegion = TF.configuration . cloudwatchAlarmRegion

class HasCloudwatchDestination s a | s -> a where
    cloudwatchDestination :: Functor f => (a -> f a) -> s -> f s

instance HasCloudwatchDestination s a => HasCloudwatchDestination (TF.Resource p s) a where
    cloudwatchDestination = TF.configuration . cloudwatchDestination

class HasCloudwatchLogGroupArn s a | s -> a where
    cloudwatchLogGroupArn :: Functor f => (a -> f a) -> s -> f s

instance HasCloudwatchLogGroupArn s a => HasCloudwatchLogGroupArn (TF.Resource p s) a where
    cloudwatchLogGroupArn = TF.configuration . cloudwatchLogGroupArn

class HasCloudwatchRoleArn s a | s -> a where
    cloudwatchRoleArn :: Functor f => (a -> f a) -> s -> f s

instance HasCloudwatchRoleArn s a => HasCloudwatchRoleArn (TF.Resource p s) a where
    cloudwatchRoleArn = TF.configuration . cloudwatchRoleArn

class HasCluster s a | s -> a where
    cluster :: Functor f => (a -> f a) -> s -> f s

instance HasCluster s a => HasCluster (TF.Resource p s) a where
    cluster = TF.configuration . cluster

class HasClusterConfig s a | s -> a where
    clusterConfig :: Functor f => (a -> f a) -> s -> f s

instance HasClusterConfig s a => HasClusterConfig (TF.Resource p s) a where
    clusterConfig = TF.configuration . clusterConfig

class HasClusterId s a | s -> a where
    clusterId :: Functor f => (a -> f a) -> s -> f s

instance HasClusterId s a => HasClusterId (TF.Resource p s) a where
    clusterId = TF.configuration . clusterId

class HasClusterIdentifier s a | s -> a where
    clusterIdentifier :: Functor f => (a -> f a) -> s -> f s

instance HasClusterIdentifier s a => HasClusterIdentifier (TF.Resource p s) a where
    clusterIdentifier = TF.configuration . clusterIdentifier

class HasClusterIdentifierPrefix s a | s -> a where
    clusterIdentifierPrefix :: Functor f => (a -> f a) -> s -> f s

instance HasClusterIdentifierPrefix s a => HasClusterIdentifierPrefix (TF.Resource p s) a where
    clusterIdentifierPrefix = TF.configuration . clusterIdentifierPrefix

class HasClusterMode s a | s -> a where
    clusterMode :: Functor f => (a -> f a) -> s -> f s

instance HasClusterMode s a => HasClusterMode (TF.Resource p s) a where
    clusterMode = TF.configuration . clusterMode

class HasClusterParameterGroupName s a | s -> a where
    clusterParameterGroupName :: Functor f => (a -> f a) -> s -> f s

instance HasClusterParameterGroupName s a => HasClusterParameterGroupName (TF.Resource p s) a where
    clusterParameterGroupName = TF.configuration . clusterParameterGroupName

class HasClusterSecurityGroups s a | s -> a where
    clusterSecurityGroups :: Functor f => (a -> f a) -> s -> f s

instance HasClusterSecurityGroups s a => HasClusterSecurityGroups (TF.Resource p s) a where
    clusterSecurityGroups = TF.configuration . clusterSecurityGroups

class HasClusterSubnetGroupName s a | s -> a where
    clusterSubnetGroupName :: Functor f => (a -> f a) -> s -> f s

instance HasClusterSubnetGroupName s a => HasClusterSubnetGroupName (TF.Resource p s) a where
    clusterSubnetGroupName = TF.configuration . clusterSubnetGroupName

class HasClusterType s a | s -> a where
    clusterType :: Functor f => (a -> f a) -> s -> f s

instance HasClusterType s a => HasClusterType (TF.Resource p s) a where
    clusterType = TF.configuration . clusterType

class HasClusterVersion s a | s -> a where
    clusterVersion :: Functor f => (a -> f a) -> s -> f s

instance HasClusterVersion s a => HasClusterVersion (TF.Resource p s) a where
    clusterVersion = TF.configuration . clusterVersion

class HasCnamePrefix s a | s -> a where
    cnamePrefix :: Functor f => (a -> f a) -> s -> f s

instance HasCnamePrefix s a => HasCnamePrefix (TF.Resource p s) a where
    cnamePrefix = TF.configuration . cnamePrefix

class HasCognitoIdentityProviders s a | s -> a where
    cognitoIdentityProviders :: Functor f => (a -> f a) -> s -> f s

instance HasCognitoIdentityProviders s a => HasCognitoIdentityProviders (TF.Resource p s) a where
    cognitoIdentityProviders = TF.configuration . cognitoIdentityProviders

class HasColor s a | s -> a where
    color :: Functor f => (a -> f a) -> s -> f s

instance HasColor s a => HasColor (TF.Resource p s) a where
    color = TF.configuration . color

class HasComment s a | s -> a where
    comment :: Functor f => (a -> f a) -> s -> f s

instance HasComment s a => HasComment (TF.Resource p s) a where
    comment = TF.configuration . comment

class HasComparisonOperator s a | s -> a where
    comparisonOperator :: Functor f => (a -> f a) -> s -> f s

instance HasComparisonOperator s a => HasComparisonOperator (TF.Resource p s) a where
    comparisonOperator = TF.configuration . comparisonOperator

class HasComputeEnvironmentName s a | s -> a where
    computeEnvironmentName :: Functor f => (a -> f a) -> s -> f s

instance HasComputeEnvironmentName s a => HasComputeEnvironmentName (TF.Resource p s) a where
    computeEnvironmentName = TF.configuration . computeEnvironmentName

class HasComputeEnvironments s a | s -> a where
    computeEnvironments :: Functor f => (a -> f a) -> s -> f s

instance HasComputeEnvironments s a => HasComputeEnvironments (TF.Resource p s) a where
    computeEnvironments = TF.configuration . computeEnvironments

class HasComputeResources s a | s -> a where
    computeResources :: Functor f => (a -> f a) -> s -> f s

instance HasComputeResources s a => HasComputeResources (TF.Resource p s) a where
    computeResources = TF.configuration . computeResources

class HasComputedAccessUrl s a | s -> a where
    computedAccessUrl :: Functor f => (a -> f a) -> s -> f s

instance HasComputedAccessUrl s a => HasComputedAccessUrl (TF.Resource p s) a where
    computedAccessUrl = TF.configuration . computedAccessUrl

class HasComputedAccountId s a | s -> a where
    computedAccountId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedAccountId s a => HasComputedAccountId (TF.Resource p s) a where
    computedAccountId = TF.configuration . computedAccountId

class HasComputedActivationCode s a | s -> a where
    computedActivationCode :: Functor f => (a -> f a) -> s -> f s

instance HasComputedActivationCode s a => HasComputedActivationCode (TF.Resource p s) a where
    computedActivationCode = TF.configuration . computedActivationCode

class HasComputedAddress s a | s -> a where
    computedAddress :: Functor f => (a -> f a) -> s -> f s

instance HasComputedAddress s a => HasComputedAddress (TF.Resource p s) a where
    computedAddress = TF.configuration . computedAddress

class HasComputedAdjustmentType s a | s -> a where
    computedAdjustmentType :: Functor f => (a -> f a) -> s -> f s

instance HasComputedAdjustmentType s a => HasComputedAdjustmentType (TF.Resource p s) a where
    computedAdjustmentType = TF.configuration . computedAdjustmentType

class HasComputedAllocatedStorage s a | s -> a where
    computedAllocatedStorage :: Functor f => (a -> f a) -> s -> f s

instance HasComputedAllocatedStorage s a => HasComputedAllocatedStorage (TF.Resource p s) a where
    computedAllocatedStorage = TF.configuration . computedAllocatedStorage

class HasComputedAllocationId s a | s -> a where
    computedAllocationId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedAllocationId s a => HasComputedAllocationId (TF.Resource p s) a where
    computedAllocationId = TF.configuration . computedAllocationId

class HasComputedArn s a | s -> a where
    computedArn :: Functor f => (a -> f a) -> s -> f s

instance HasComputedArn s a => HasComputedArn (TF.Resource p s) a where
    computedArn = TF.configuration . computedArn

class HasComputedArnSuffix s a | s -> a where
    computedArnSuffix :: Functor f => (a -> f a) -> s -> f s

instance HasComputedArnSuffix s a => HasComputedArnSuffix (TF.Resource p s) a where
    computedArnSuffix = TF.configuration . computedArnSuffix

class HasComputedAssociateWithPrivateIp s a | s -> a where
    computedAssociateWithPrivateIp :: Functor f => (a -> f a) -> s -> f s

instance HasComputedAssociateWithPrivateIp s a => HasComputedAssociateWithPrivateIp (TF.Resource p s) a where
    computedAssociateWithPrivateIp = TF.configuration . computedAssociateWithPrivateIp

class HasComputedAssociationId s a | s -> a where
    computedAssociationId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedAssociationId s a => HasComputedAssociationId (TF.Resource p s) a where
    computedAssociationId = TF.configuration . computedAssociationId

class HasComputedAttachment s a | s -> a where
    computedAttachment :: Functor f => (a -> f a) -> s -> f s

instance HasComputedAttachment s a => HasComputedAttachment (TF.Resource p s) a where
    computedAttachment = TF.configuration . computedAttachment

class HasComputedAttachmentId s a | s -> a where
    computedAttachmentId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedAttachmentId s a => HasComputedAttachmentId (TF.Resource p s) a where
    computedAttachmentId = TF.configuration . computedAttachmentId

class HasComputedAttribute s a | s -> a where
    computedAttribute :: Functor f => (a -> f a) -> s -> f s

instance HasComputedAttribute s a => HasComputedAttribute (TF.Resource p s) a where
    computedAttribute = TF.configuration . computedAttribute

class HasComputedAutoscalingGroupName s a | s -> a where
    computedAutoscalingGroupName :: Functor f => (a -> f a) -> s -> f s

instance HasComputedAutoscalingGroupName s a => HasComputedAutoscalingGroupName (TF.Resource p s) a where
    computedAutoscalingGroupName = TF.configuration . computedAutoscalingGroupName

class HasComputedAvailabilityZone s a | s -> a where
    computedAvailabilityZone :: Functor f => (a -> f a) -> s -> f s

instance HasComputedAvailabilityZone s a => HasComputedAvailabilityZone (TF.Resource p s) a where
    computedAvailabilityZone = TF.configuration . computedAvailabilityZone

class HasComputedAvailabilityZones s a | s -> a where
    computedAvailabilityZones :: Functor f => (a -> f a) -> s -> f s

instance HasComputedAvailabilityZones s a => HasComputedAvailabilityZones (TF.Resource p s) a where
    computedAvailabilityZones = TF.configuration . computedAvailabilityZones

class HasComputedAwsAccountId s a | s -> a where
    computedAwsAccountId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedAwsAccountId s a => HasComputedAwsAccountId (TF.Resource p s) a where
    computedAwsAccountId = TF.configuration . computedAwsAccountId

class HasComputedBackupRetentionPeriod s a | s -> a where
    computedBackupRetentionPeriod :: Functor f => (a -> f a) -> s -> f s

instance HasComputedBackupRetentionPeriod s a => HasComputedBackupRetentionPeriod (TF.Resource p s) a where
    computedBackupRetentionPeriod = TF.configuration . computedBackupRetentionPeriod

class HasComputedBackupWindow s a | s -> a where
    computedBackupWindow :: Functor f => (a -> f a) -> s -> f s

instance HasComputedBackupWindow s a => HasComputedBackupWindow (TF.Resource p s) a where
    computedBackupWindow = TF.configuration . computedBackupWindow

class HasComputedBgpAsn s a | s -> a where
    computedBgpAsn :: Functor f => (a -> f a) -> s -> f s

instance HasComputedBgpAsn s a => HasComputedBgpAsn (TF.Resource p s) a where
    computedBgpAsn = TF.configuration . computedBgpAsn

class HasComputedBucketDomainName s a | s -> a where
    computedBucketDomainName :: Functor f => (a -> f a) -> s -> f s

instance HasComputedBucketDomainName s a => HasComputedBucketDomainName (TF.Resource p s) a where
    computedBucketDomainName = TF.configuration . computedBucketDomainName

class HasComputedCaCertIdentifier s a | s -> a where
    computedCaCertIdentifier :: Functor f => (a -> f a) -> s -> f s

instance HasComputedCaCertIdentifier s a => HasComputedCaCertIdentifier (TF.Resource p s) a where
    computedCaCertIdentifier = TF.configuration . computedCaCertIdentifier

class HasComputedCacheNodes s a | s -> a where
    computedCacheNodes :: Functor f => (a -> f a) -> s -> f s

instance HasComputedCacheNodes s a => HasComputedCacheNodes (TF.Resource p s) a where
    computedCacheNodes = TF.configuration . computedCacheNodes

class HasComputedCallerReference s a | s -> a where
    computedCallerReference :: Functor f => (a -> f a) -> s -> f s

instance HasComputedCallerReference s a => HasComputedCallerReference (TF.Resource p s) a where
    computedCallerReference = TF.configuration . computedCallerReference

class HasComputedCanonicalHostedZoneId s a | s -> a where
    computedCanonicalHostedZoneId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedCanonicalHostedZoneId s a => HasComputedCanonicalHostedZoneId (TF.Resource p s) a where
    computedCanonicalHostedZoneId = TF.configuration . computedCanonicalHostedZoneId

class HasComputedCertificateArn s a | s -> a where
    computedCertificateArn :: Functor f => (a -> f a) -> s -> f s

instance HasComputedCertificateArn s a => HasComputedCertificateArn (TF.Resource p s) a where
    computedCertificateArn = TF.configuration . computedCertificateArn

class HasComputedCertificateUploadDate s a | s -> a where
    computedCertificateUploadDate :: Functor f => (a -> f a) -> s -> f s

instance HasComputedCertificateUploadDate s a => HasComputedCertificateUploadDate (TF.Resource p s) a where
    computedCertificateUploadDate = TF.configuration . computedCertificateUploadDate

class HasComputedCidrBlock s a | s -> a where
    computedCidrBlock :: Functor f => (a -> f a) -> s -> f s

instance HasComputedCidrBlock s a => HasComputedCidrBlock (TF.Resource p s) a where
    computedCidrBlock = TF.configuration . computedCidrBlock

class HasComputedCidrBlocks s a | s -> a where
    computedCidrBlocks :: Functor f => (a -> f a) -> s -> f s

instance HasComputedCidrBlocks s a => HasComputedCidrBlocks (TF.Resource p s) a where
    computedCidrBlocks = TF.configuration . computedCidrBlocks

class HasComputedClientSecret s a | s -> a where
    computedClientSecret :: Functor f => (a -> f a) -> s -> f s

instance HasComputedClientSecret s a => HasComputedClientSecret (TF.Resource p s) a where
    computedClientSecret = TF.configuration . computedClientSecret

class HasComputedCloneUrlHttp s a | s -> a where
    computedCloneUrlHttp :: Functor f => (a -> f a) -> s -> f s

instance HasComputedCloneUrlHttp s a => HasComputedCloneUrlHttp (TF.Resource p s) a where
    computedCloneUrlHttp = TF.configuration . computedCloneUrlHttp

class HasComputedCloneUrlSsh s a | s -> a where
    computedCloneUrlSsh :: Functor f => (a -> f a) -> s -> f s

instance HasComputedCloneUrlSsh s a => HasComputedCloneUrlSsh (TF.Resource p s) a where
    computedCloneUrlSsh = TF.configuration . computedCloneUrlSsh

class HasComputedCloudfrontAccessIdentityPath s a | s -> a where
    computedCloudfrontAccessIdentityPath :: Functor f => (a -> f a) -> s -> f s

instance HasComputedCloudfrontAccessIdentityPath s a => HasComputedCloudfrontAccessIdentityPath (TF.Resource p s) a where
    computedCloudfrontAccessIdentityPath = TF.configuration . computedCloudfrontAccessIdentityPath

class HasComputedCloudfrontDistributionArn s a | s -> a where
    computedCloudfrontDistributionArn :: Functor f => (a -> f a) -> s -> f s

instance HasComputedCloudfrontDistributionArn s a => HasComputedCloudfrontDistributionArn (TF.Resource p s) a where
    computedCloudfrontDistributionArn = TF.configuration . computedCloudfrontDistributionArn

class HasComputedCloudfrontDomainName s a | s -> a where
    computedCloudfrontDomainName :: Functor f => (a -> f a) -> s -> f s

instance HasComputedCloudfrontDomainName s a => HasComputedCloudfrontDomainName (TF.Resource p s) a where
    computedCloudfrontDomainName = TF.configuration . computedCloudfrontDomainName

class HasComputedCloudfrontZoneId s a | s -> a where
    computedCloudfrontZoneId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedCloudfrontZoneId s a => HasComputedCloudfrontZoneId (TF.Resource p s) a where
    computedCloudfrontZoneId = TF.configuration . computedCloudfrontZoneId

class HasComputedClusterAddress s a | s -> a where
    computedClusterAddress :: Functor f => (a -> f a) -> s -> f s

instance HasComputedClusterAddress s a => HasComputedClusterAddress (TF.Resource p s) a where
    computedClusterAddress = TF.configuration . computedClusterAddress

class HasComputedClusterIdentifier s a | s -> a where
    computedClusterIdentifier :: Functor f => (a -> f a) -> s -> f s

instance HasComputedClusterIdentifier s a => HasComputedClusterIdentifier (TF.Resource p s) a where
    computedClusterIdentifier = TF.configuration . computedClusterIdentifier

class HasComputedClusterMembers s a | s -> a where
    computedClusterMembers :: Functor f => (a -> f a) -> s -> f s

instance HasComputedClusterMembers s a => HasComputedClusterMembers (TF.Resource p s) a where
    computedClusterMembers = TF.configuration . computedClusterMembers

class HasComputedClusterResourceId s a | s -> a where
    computedClusterResourceId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedClusterResourceId s a => HasComputedClusterResourceId (TF.Resource p s) a where
    computedClusterResourceId = TF.configuration . computedClusterResourceId

class HasComputedConfiguration s a | s -> a where
    computedConfiguration :: Functor f => (a -> f a) -> s -> f s

instance HasComputedConfiguration s a => HasComputedConfiguration (TF.Resource p s) a where
    computedConfiguration = TF.configuration . computedConfiguration

class HasComputedConfigurationEndpoint s a | s -> a where
    computedConfigurationEndpoint :: Functor f => (a -> f a) -> s -> f s

instance HasComputedConfigurationEndpoint s a => HasComputedConfigurationEndpoint (TF.Resource p s) a where
    computedConfigurationEndpoint = TF.configuration . computedConfigurationEndpoint

class HasComputedConfigurationEndpointAddress s a | s -> a where
    computedConfigurationEndpointAddress :: Functor f => (a -> f a) -> s -> f s

instance HasComputedConfigurationEndpointAddress s a => HasComputedConfigurationEndpointAddress (TF.Resource p s) a where
    computedConfigurationEndpointAddress = TF.configuration . computedConfigurationEndpointAddress

class HasComputedContent s a | s -> a where
    computedContent :: Functor f => (a -> f a) -> s -> f s

instance HasComputedContent s a => HasComputedContent (TF.Resource p s) a where
    computedContent = TF.configuration . computedContent

class HasComputedCookieExpirationPeriod s a | s -> a where
    computedCookieExpirationPeriod :: Functor f => (a -> f a) -> s -> f s

instance HasComputedCookieExpirationPeriod s a => HasComputedCookieExpirationPeriod (TF.Resource p s) a where
    computedCookieExpirationPeriod = TF.configuration . computedCookieExpirationPeriod

class HasComputedCookieName s a | s -> a where
    computedCookieName :: Functor f => (a -> f a) -> s -> f s

instance HasComputedCookieName s a => HasComputedCookieName (TF.Resource p s) a where
    computedCookieName = TF.configuration . computedCookieName

class HasComputedCreateDate s a | s -> a where
    computedCreateDate :: Functor f => (a -> f a) -> s -> f s

instance HasComputedCreateDate s a => HasComputedCreateDate (TF.Resource p s) a where
    computedCreateDate = TF.configuration . computedCreateDate

class HasComputedCreatedDate s a | s -> a where
    computedCreatedDate :: Functor f => (a -> f a) -> s -> f s

instance HasComputedCreatedDate s a => HasComputedCreatedDate (TF.Resource p s) a where
    computedCreatedDate = TF.configuration . computedCreatedDate

class HasComputedCreationDate s a | s -> a where
    computedCreationDate :: Functor f => (a -> f a) -> s -> f s

instance HasComputedCreationDate s a => HasComputedCreationDate (TF.Resource p s) a where
    computedCreationDate = TF.configuration . computedCreationDate

class HasComputedCustomerGatewayConfiguration s a | s -> a where
    computedCustomerGatewayConfiguration :: Functor f => (a -> f a) -> s -> f s

instance HasComputedCustomerGatewayConfiguration s a => HasComputedCustomerGatewayConfiguration (TF.Resource p s) a where
    computedCustomerGatewayConfiguration = TF.configuration . computedCustomerGatewayConfiguration

class HasComputedCustomerGatewayId s a | s -> a where
    computedCustomerGatewayId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedCustomerGatewayId s a => HasComputedCustomerGatewayId (TF.Resource p s) a where
    computedCustomerGatewayId = TF.configuration . computedCustomerGatewayId

class HasComputedDashboardArn s a | s -> a where
    computedDashboardArn :: Functor f => (a -> f a) -> s -> f s

instance HasComputedDashboardArn s a => HasComputedDashboardArn (TF.Resource p s) a where
    computedDashboardArn = TF.configuration . computedDashboardArn

class HasComputedDataEncryptionKeyId s a | s -> a where
    computedDataEncryptionKeyId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedDataEncryptionKeyId s a => HasComputedDataEncryptionKeyId (TF.Resource p s) a where
    computedDataEncryptionKeyId = TF.configuration . computedDataEncryptionKeyId

class HasComputedDatabaseName s a | s -> a where
    computedDatabaseName :: Functor f => (a -> f a) -> s -> f s

instance HasComputedDatabaseName s a => HasComputedDatabaseName (TF.Resource p s) a where
    computedDatabaseName = TF.configuration . computedDatabaseName

class HasComputedDbSnapshotArn s a | s -> a where
    computedDbSnapshotArn :: Functor f => (a -> f a) -> s -> f s

instance HasComputedDbSnapshotArn s a => HasComputedDbSnapshotArn (TF.Resource p s) a where
    computedDbSnapshotArn = TF.configuration . computedDbSnapshotArn

class HasComputedDbiResourceId s a | s -> a where
    computedDbiResourceId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedDbiResourceId s a => HasComputedDbiResourceId (TF.Resource p s) a where
    computedDbiResourceId = TF.configuration . computedDbiResourceId

class HasComputedDefaultCooldown s a | s -> a where
    computedDefaultCooldown :: Functor f => (a -> f a) -> s -> f s

instance HasComputedDefaultCooldown s a => HasComputedDefaultCooldown (TF.Resource p s) a where
    computedDefaultCooldown = TF.configuration . computedDefaultCooldown

class HasComputedDefaultNetworkAclId s a | s -> a where
    computedDefaultNetworkAclId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedDefaultNetworkAclId s a => HasComputedDefaultNetworkAclId (TF.Resource p s) a where
    computedDefaultNetworkAclId = TF.configuration . computedDefaultNetworkAclId

class HasComputedDefaultRouteTableId s a | s -> a where
    computedDefaultRouteTableId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedDefaultRouteTableId s a => HasComputedDefaultRouteTableId (TF.Resource p s) a where
    computedDefaultRouteTableId = TF.configuration . computedDefaultRouteTableId

class HasComputedDefaultSecurityGroupId s a | s -> a where
    computedDefaultSecurityGroupId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedDefaultSecurityGroupId s a => HasComputedDefaultSecurityGroupId (TF.Resource p s) a where
    computedDefaultSecurityGroupId = TF.configuration . computedDefaultSecurityGroupId

class HasComputedDefaultVersion s a | s -> a where
    computedDefaultVersion :: Functor f => (a -> f a) -> s -> f s

instance HasComputedDefaultVersion s a => HasComputedDefaultVersion (TF.Resource p s) a where
    computedDefaultVersion = TF.configuration . computedDefaultVersion

class HasComputedDefaultVersionId s a | s -> a where
    computedDefaultVersionId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedDefaultVersionId s a => HasComputedDefaultVersionId (TF.Resource p s) a where
    computedDefaultVersionId = TF.configuration . computedDefaultVersionId

class HasComputedDeploymentConfigId s a | s -> a where
    computedDeploymentConfigId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedDeploymentConfigId s a => HasComputedDeploymentConfigId (TF.Resource p s) a where
    computedDeploymentConfigId = TF.configuration . computedDeploymentConfigId

class HasComputedDescription s a | s -> a where
    computedDescription :: Functor f => (a -> f a) -> s -> f s

instance HasComputedDescription s a => HasComputedDescription (TF.Resource p s) a where
    computedDescription = TF.configuration . computedDescription

class HasComputedDesiredCapacity s a | s -> a where
    computedDesiredCapacity :: Functor f => (a -> f a) -> s -> f s

instance HasComputedDesiredCapacity s a => HasComputedDesiredCapacity (TF.Resource p s) a where
    computedDesiredCapacity = TF.configuration . computedDesiredCapacity

class HasComputedDestinationCidrBlock s a | s -> a where
    computedDestinationCidrBlock :: Functor f => (a -> f a) -> s -> f s

instance HasComputedDestinationCidrBlock s a => HasComputedDestinationCidrBlock (TF.Resource p s) a where
    computedDestinationCidrBlock = TF.configuration . computedDestinationCidrBlock

class HasComputedDestinationIpv6CidrBlock s a | s -> a where
    computedDestinationIpv6CidrBlock :: Functor f => (a -> f a) -> s -> f s

instance HasComputedDestinationIpv6CidrBlock s a => HasComputedDestinationIpv6CidrBlock (TF.Resource p s) a where
    computedDestinationIpv6CidrBlock = TF.configuration . computedDestinationIpv6CidrBlock

class HasComputedDeviceName s a | s -> a where
    computedDeviceName :: Functor f => (a -> f a) -> s -> f s

instance HasComputedDeviceName s a => HasComputedDeviceName (TF.Resource p s) a where
    computedDeviceName = TF.configuration . computedDeviceName

class HasComputedDkimTokens s a | s -> a where
    computedDkimTokens :: Functor f => (a -> f a) -> s -> f s

instance HasComputedDkimTokens s a => HasComputedDkimTokens (TF.Resource p s) a where
    computedDkimTokens = TF.configuration . computedDkimTokens

class HasComputedDnsIpAddresses s a | s -> a where
    computedDnsIpAddresses :: Functor f => (a -> f a) -> s -> f s

instance HasComputedDnsIpAddresses s a => HasComputedDnsIpAddresses (TF.Resource p s) a where
    computedDnsIpAddresses = TF.configuration . computedDnsIpAddresses

class HasComputedDnsName s a | s -> a where
    computedDnsName :: Functor f => (a -> f a) -> s -> f s

instance HasComputedDnsName s a => HasComputedDnsName (TF.Resource p s) a where
    computedDnsName = TF.configuration . computedDnsName

class HasComputedDocumentType s a | s -> a where
    computedDocumentType :: Functor f => (a -> f a) -> s -> f s

instance HasComputedDocumentType s a => HasComputedDocumentType (TF.Resource p s) a where
    computedDocumentType = TF.configuration . computedDocumentType

class HasComputedDomainId s a | s -> a where
    computedDomainId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedDomainId s a => HasComputedDomainId (TF.Resource p s) a where
    computedDomainId = TF.configuration . computedDomainId

class HasComputedEcsClusterArn s a | s -> a where
    computedEcsClusterArn :: Functor f => (a -> f a) -> s -> f s

instance HasComputedEcsClusterArn s a => HasComputedEcsClusterArn (TF.Resource p s) a where
    computedEcsClusterArn = TF.configuration . computedEcsClusterArn

class HasComputedEgressOnlyGatewayId s a | s -> a where
    computedEgressOnlyGatewayId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedEgressOnlyGatewayId s a => HasComputedEgressOnlyGatewayId (TF.Resource p s) a where
    computedEgressOnlyGatewayId = TF.configuration . computedEgressOnlyGatewayId

class HasComputedEnableClassiclink s a | s -> a where
    computedEnableClassiclink :: Functor f => (a -> f a) -> s -> f s

instance HasComputedEnableClassiclink s a => HasComputedEnableClassiclink (TF.Resource p s) a where
    computedEnableClassiclink = TF.configuration . computedEnableClassiclink

class HasComputedEnableDnsHostnames s a | s -> a where
    computedEnableDnsHostnames :: Functor f => (a -> f a) -> s -> f s

instance HasComputedEnableDnsHostnames s a => HasComputedEnableDnsHostnames (TF.Resource p s) a where
    computedEnableDnsHostnames = TF.configuration . computedEnableDnsHostnames

class HasComputedEnableDnsSupport s a | s -> a where
    computedEnableDnsSupport :: Functor f => (a -> f a) -> s -> f s

instance HasComputedEnableDnsSupport s a => HasComputedEnableDnsSupport (TF.Resource p s) a where
    computedEnableDnsSupport = TF.configuration . computedEnableDnsSupport

class HasComputedEncrypted s a | s -> a where
    computedEncrypted :: Functor f => (a -> f a) -> s -> f s

instance HasComputedEncrypted s a => HasComputedEncrypted (TF.Resource p s) a where
    computedEncrypted = TF.configuration . computedEncrypted

class HasComputedEncryptedFingerprint s a | s -> a where
    computedEncryptedFingerprint :: Functor f => (a -> f a) -> s -> f s

instance HasComputedEncryptedFingerprint s a => HasComputedEncryptedFingerprint (TF.Resource p s) a where
    computedEncryptedFingerprint = TF.configuration . computedEncryptedFingerprint

class HasComputedEncryptedPassword s a | s -> a where
    computedEncryptedPassword :: Functor f => (a -> f a) -> s -> f s

instance HasComputedEncryptedPassword s a => HasComputedEncryptedPassword (TF.Resource p s) a where
    computedEncryptedPassword = TF.configuration . computedEncryptedPassword

class HasComputedEncryptedPrivateKey s a | s -> a where
    computedEncryptedPrivateKey :: Functor f => (a -> f a) -> s -> f s

instance HasComputedEncryptedPrivateKey s a => HasComputedEncryptedPrivateKey (TF.Resource p s) a where
    computedEncryptedPrivateKey = TF.configuration . computedEncryptedPrivateKey

class HasComputedEncryptedSecret s a | s -> a where
    computedEncryptedSecret :: Functor f => (a -> f a) -> s -> f s

instance HasComputedEncryptedSecret s a => HasComputedEncryptedSecret (TF.Resource p s) a where
    computedEncryptedSecret = TF.configuration . computedEncryptedSecret

class HasComputedEncryptionKey s a | s -> a where
    computedEncryptionKey :: Functor f => (a -> f a) -> s -> f s

instance HasComputedEncryptionKey s a => HasComputedEncryptionKey (TF.Resource p s) a where
    computedEncryptionKey = TF.configuration . computedEncryptionKey

class HasComputedEndpoint s a | s -> a where
    computedEndpoint :: Functor f => (a -> f a) -> s -> f s

instance HasComputedEndpoint s a => HasComputedEndpoint (TF.Resource p s) a where
    computedEndpoint = TF.configuration . computedEndpoint

class HasComputedEndpointArn s a | s -> a where
    computedEndpointArn :: Functor f => (a -> f a) -> s -> f s

instance HasComputedEndpointArn s a => HasComputedEndpointArn (TF.Resource p s) a where
    computedEndpointArn = TF.configuration . computedEndpointArn

class HasComputedEngine s a | s -> a where
    computedEngine :: Functor f => (a -> f a) -> s -> f s

instance HasComputedEngine s a => HasComputedEngine (TF.Resource p s) a where
    computedEngine = TF.configuration . computedEngine

class HasComputedEngineVersion s a | s -> a where
    computedEngineVersion :: Functor f => (a -> f a) -> s -> f s

instance HasComputedEngineVersion s a => HasComputedEngineVersion (TF.Resource p s) a where
    computedEngineVersion = TF.configuration . computedEngineVersion

class HasComputedEtag s a | s -> a where
    computedEtag :: Functor f => (a -> f a) -> s -> f s

instance HasComputedEtag s a => HasComputedEtag (TF.Resource p s) a where
    computedEtag = TF.configuration . computedEtag

class HasComputedExecutionArn s a | s -> a where
    computedExecutionArn :: Functor f => (a -> f a) -> s -> f s

instance HasComputedExecutionArn s a => HasComputedExecutionArn (TF.Resource p s) a where
    computedExecutionArn = TF.configuration . computedExecutionArn

class HasComputedExpirationDate s a | s -> a where
    computedExpirationDate :: Functor f => (a -> f a) -> s -> f s

instance HasComputedExpirationDate s a => HasComputedExpirationDate (TF.Resource p s) a where
    computedExpirationDate = TF.configuration . computedExpirationDate

class HasComputedExpirePasswords s a | s -> a where
    computedExpirePasswords :: Functor f => (a -> f a) -> s -> f s

instance HasComputedExpirePasswords s a => HasComputedExpirePasswords (TF.Resource p s) a where
    computedExpirePasswords = TF.configuration . computedExpirePasswords

class HasComputedExpired s a | s -> a where
    computedExpired :: Functor f => (a -> f a) -> s -> f s

instance HasComputedExpired s a => HasComputedExpired (TF.Resource p s) a where
    computedExpired = TF.configuration . computedExpired

class HasComputedFingerprint s a | s -> a where
    computedFingerprint :: Functor f => (a -> f a) -> s -> f s

instance HasComputedFingerprint s a => HasComputedFingerprint (TF.Resource p s) a where
    computedFingerprint = TF.configuration . computedFingerprint

class HasComputedFqdn s a | s -> a where
    computedFqdn :: Functor f => (a -> f a) -> s -> f s

instance HasComputedFqdn s a => HasComputedFqdn (TF.Resource p s) a where
    computedFqdn = TF.configuration . computedFqdn

class HasComputedFunctionArn s a | s -> a where
    computedFunctionArn :: Functor f => (a -> f a) -> s -> f s

instance HasComputedFunctionArn s a => HasComputedFunctionArn (TF.Resource p s) a where
    computedFunctionArn = TF.configuration . computedFunctionArn

class HasComputedGatewayId s a | s -> a where
    computedGatewayId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedGatewayId s a => HasComputedGatewayId (TF.Resource p s) a where
    computedGatewayId = TF.configuration . computedGatewayId

class HasComputedGroup s a | s -> a where
    computedGroup :: Functor f => (a -> f a) -> s -> f s

instance HasComputedGroup s a => HasComputedGroup (TF.Resource p s) a where
    computedGroup = TF.configuration . computedGroup

class HasComputedHash s a | s -> a where
    computedHash :: Functor f => (a -> f a) -> s -> f s

instance HasComputedHash s a => HasComputedHash (TF.Resource p s) a where
    computedHash = TF.configuration . computedHash

class HasComputedHashType s a | s -> a where
    computedHashType :: Functor f => (a -> f a) -> s -> f s

instance HasComputedHashType s a => HasComputedHashType (TF.Resource p s) a where
    computedHashType = TF.configuration . computedHashType

class HasComputedHealthCheckGracePeriod s a | s -> a where
    computedHealthCheckGracePeriod :: Functor f => (a -> f a) -> s -> f s

instance HasComputedHealthCheckGracePeriod s a => HasComputedHealthCheckGracePeriod (TF.Resource p s) a where
    computedHealthCheckGracePeriod = TF.configuration . computedHealthCheckGracePeriod

class HasComputedHealthCheckType s a | s -> a where
    computedHealthCheckType :: Functor f => (a -> f a) -> s -> f s

instance HasComputedHealthCheckType s a => HasComputedHealthCheckType (TF.Resource p s) a where
    computedHealthCheckType = TF.configuration . computedHealthCheckType

class HasComputedHomeRegion s a | s -> a where
    computedHomeRegion :: Functor f => (a -> f a) -> s -> f s

instance HasComputedHomeRegion s a => HasComputedHomeRegion (TF.Resource p s) a where
    computedHomeRegion = TF.configuration . computedHomeRegion

class HasComputedHostedZone s a | s -> a where
    computedHostedZone :: Functor f => (a -> f a) -> s -> f s

instance HasComputedHostedZone s a => HasComputedHostedZone (TF.Resource p s) a where
    computedHostedZone = TF.configuration . computedHostedZone

class HasComputedHostedZoneId s a | s -> a where
    computedHostedZoneId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedHostedZoneId s a => HasComputedHostedZoneId (TF.Resource p s) a where
    computedHostedZoneId = TF.configuration . computedHostedZoneId

class HasComputedIamArn s a | s -> a where
    computedIamArn :: Functor f => (a -> f a) -> s -> f s

instance HasComputedIamArn s a => HasComputedIamArn (TF.Resource p s) a where
    computedIamArn = TF.configuration . computedIamArn

class HasComputedIamRole s a | s -> a where
    computedIamRole :: Functor f => (a -> f a) -> s -> f s

instance HasComputedIamRole s a => HasComputedIamRole (TF.Resource p s) a where
    computedIamRole = TF.configuration . computedIamRole

class HasComputedId s a | s -> a where
    computedId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedId s a => HasComputedId (TF.Resource p s) a where
    computedId = TF.configuration . computedId

class HasComputedIdentifier s a | s -> a where
    computedIdentifier :: Functor f => (a -> f a) -> s -> f s

instance HasComputedIdentifier s a => HasComputedIdentifier (TF.Resource p s) a where
    computedIdentifier = TF.configuration . computedIdentifier

class HasComputedInstance' s a | s -> a where
    computedInstance' :: Functor f => (a -> f a) -> s -> f s

instance HasComputedInstance' s a => HasComputedInstance' (TF.Resource p s) a where
    computedInstance' = TF.configuration . computedInstance'

class HasComputedInstanceClass s a | s -> a where
    computedInstanceClass :: Functor f => (a -> f a) -> s -> f s

instance HasComputedInstanceClass s a => HasComputedInstanceClass (TF.Resource p s) a where
    computedInstanceClass = TF.configuration . computedInstanceClass

class HasComputedInstanceId s a | s -> a where
    computedInstanceId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedInstanceId s a => HasComputedInstanceId (TF.Resource p s) a where
    computedInstanceId = TF.configuration . computedInstanceId

class HasComputedInstanceIds s a | s -> a where
    computedInstanceIds :: Functor f => (a -> f a) -> s -> f s

instance HasComputedInstanceIds s a => HasComputedInstanceIds (TF.Resource p s) a where
    computedInstanceIds = TF.configuration . computedInstanceIds

class HasComputedInstancePort s a | s -> a where
    computedInstancePort :: Functor f => (a -> f a) -> s -> f s

instance HasComputedInstancePort s a => HasComputedInstancePort (TF.Resource p s) a where
    computedInstancePort = TF.configuration . computedInstancePort

class HasComputedInstanceTenancy s a | s -> a where
    computedInstanceTenancy :: Functor f => (a -> f a) -> s -> f s

instance HasComputedInstanceTenancy s a => HasComputedInstanceTenancy (TF.Resource p s) a where
    computedInstanceTenancy = TF.configuration . computedInstanceTenancy

class HasComputedInvokeArn s a | s -> a where
    computedInvokeArn :: Functor f => (a -> f a) -> s -> f s

instance HasComputedInvokeArn s a => HasComputedInvokeArn (TF.Resource p s) a where
    computedInvokeArn = TF.configuration . computedInvokeArn

class HasComputedInvokeUrl s a | s -> a where
    computedInvokeUrl :: Functor f => (a -> f a) -> s -> f s

instance HasComputedInvokeUrl s a => HasComputedInvokeUrl (TF.Resource p s) a where
    computedInvokeUrl = TF.configuration . computedInvokeUrl

class HasComputedIops s a | s -> a where
    computedIops :: Functor f => (a -> f a) -> s -> f s

instance HasComputedIops s a => HasComputedIops (TF.Resource p s) a where
    computedIops = TF.configuration . computedIops

class HasComputedIpAddress s a | s -> a where
    computedIpAddress :: Functor f => (a -> f a) -> s -> f s

instance HasComputedIpAddress s a => HasComputedIpAddress (TF.Resource p s) a where
    computedIpAddress = TF.configuration . computedIpAddress

class HasComputedIpv6AssociationId s a | s -> a where
    computedIpv6AssociationId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedIpv6AssociationId s a => HasComputedIpv6AssociationId (TF.Resource p s) a where
    computedIpv6AssociationId = TF.configuration . computedIpv6AssociationId

class HasComputedIpv6CidrBlock s a | s -> a where
    computedIpv6CidrBlock :: Functor f => (a -> f a) -> s -> f s

instance HasComputedIpv6CidrBlock s a => HasComputedIpv6CidrBlock (TF.Resource p s) a where
    computedIpv6CidrBlock = TF.configuration . computedIpv6CidrBlock

class HasComputedKeyFingerprint s a | s -> a where
    computedKeyFingerprint :: Functor f => (a -> f a) -> s -> f s

instance HasComputedKeyFingerprint s a => HasComputedKeyFingerprint (TF.Resource p s) a where
    computedKeyFingerprint = TF.configuration . computedKeyFingerprint

class HasComputedKeyId s a | s -> a where
    computedKeyId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedKeyId s a => HasComputedKeyId (TF.Resource p s) a where
    computedKeyId = TF.configuration . computedKeyId

class HasComputedKeyName s a | s -> a where
    computedKeyName :: Functor f => (a -> f a) -> s -> f s

instance HasComputedKeyName s a => HasComputedKeyName (TF.Resource p s) a where
    computedKeyName = TF.configuration . computedKeyName

class HasComputedKeyType s a | s -> a where
    computedKeyType :: Functor f => (a -> f a) -> s -> f s

instance HasComputedKeyType s a => HasComputedKeyType (TF.Resource p s) a where
    computedKeyType = TF.configuration . computedKeyType

class HasComputedKibanaEndpoint s a | s -> a where
    computedKibanaEndpoint :: Functor f => (a -> f a) -> s -> f s

instance HasComputedKibanaEndpoint s a => HasComputedKibanaEndpoint (TF.Resource p s) a where
    computedKibanaEndpoint = TF.configuration . computedKibanaEndpoint

class HasComputedKmsKeyArn s a | s -> a where
    computedKmsKeyArn :: Functor f => (a -> f a) -> s -> f s

instance HasComputedKmsKeyArn s a => HasComputedKmsKeyArn (TF.Resource p s) a where
    computedKmsKeyArn = TF.configuration . computedKmsKeyArn

class HasComputedKmsKeyId s a | s -> a where
    computedKmsKeyId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedKmsKeyId s a => HasComputedKmsKeyId (TF.Resource p s) a where
    computedKmsKeyId = TF.configuration . computedKmsKeyId

class HasComputedLastModified s a | s -> a where
    computedLastModified :: Functor f => (a -> f a) -> s -> f s

instance HasComputedLastModified s a => HasComputedLastModified (TF.Resource p s) a where
    computedLastModified = TF.configuration . computedLastModified

class HasComputedLastProcessingResult s a | s -> a where
    computedLastProcessingResult :: Functor f => (a -> f a) -> s -> f s

instance HasComputedLastProcessingResult s a => HasComputedLastProcessingResult (TF.Resource p s) a where
    computedLastProcessingResult = TF.configuration . computedLastProcessingResult

class HasComputedLastUpdatedDate s a | s -> a where
    computedLastUpdatedDate :: Functor f => (a -> f a) -> s -> f s

instance HasComputedLastUpdatedDate s a => HasComputedLastUpdatedDate (TF.Resource p s) a where
    computedLastUpdatedDate = TF.configuration . computedLastUpdatedDate

class HasComputedLatestRevision s a | s -> a where
    computedLatestRevision :: Functor f => (a -> f a) -> s -> f s

instance HasComputedLatestRevision s a => HasComputedLatestRevision (TF.Resource p s) a where
    computedLatestRevision = TF.configuration . computedLatestRevision

class HasComputedLatestVersion s a | s -> a where
    computedLatestVersion :: Functor f => (a -> f a) -> s -> f s

instance HasComputedLatestVersion s a => HasComputedLatestVersion (TF.Resource p s) a where
    computedLatestVersion = TF.configuration . computedLatestVersion

class HasComputedLaunchConfiguration s a | s -> a where
    computedLaunchConfiguration :: Functor f => (a -> f a) -> s -> f s

instance HasComputedLaunchConfiguration s a => HasComputedLaunchConfiguration (TF.Resource p s) a where
    computedLaunchConfiguration = TF.configuration . computedLaunchConfiguration

class HasComputedLbPort s a | s -> a where
    computedLbPort :: Functor f => (a -> f a) -> s -> f s

instance HasComputedLbPort s a => HasComputedLbPort (TF.Resource p s) a where
    computedLbPort = TF.configuration . computedLbPort

class HasComputedLicenseModel s a | s -> a where
    computedLicenseModel :: Functor f => (a -> f a) -> s -> f s

instance HasComputedLicenseModel s a => HasComputedLicenseModel (TF.Resource p s) a where
    computedLicenseModel = TF.configuration . computedLicenseModel

class HasComputedLoadBalancer s a | s -> a where
    computedLoadBalancer :: Functor f => (a -> f a) -> s -> f s

instance HasComputedLoadBalancer s a => HasComputedLoadBalancer (TF.Resource p s) a where
    computedLoadBalancer = TF.configuration . computedLoadBalancer

class HasComputedLoadBalancerName s a | s -> a where
    computedLoadBalancerName :: Functor f => (a -> f a) -> s -> f s

instance HasComputedLoadBalancerName s a => HasComputedLoadBalancerName (TF.Resource p s) a where
    computedLoadBalancerName = TF.configuration . computedLoadBalancerName

class HasComputedLoadBalancerPort s a | s -> a where
    computedLoadBalancerPort :: Functor f => (a -> f a) -> s -> f s

instance HasComputedLoadBalancerPort s a => HasComputedLoadBalancerPort (TF.Resource p s) a where
    computedLoadBalancerPort = TF.configuration . computedLoadBalancerPort

class HasComputedLoadBalancers s a | s -> a where
    computedLoadBalancers :: Functor f => (a -> f a) -> s -> f s

instance HasComputedLoadBalancers s a => HasComputedLoadBalancers (TF.Resource p s) a where
    computedLoadBalancers = TF.configuration . computedLoadBalancers

class HasComputedLocation s a | s -> a where
    computedLocation :: Functor f => (a -> f a) -> s -> f s

instance HasComputedLocation s a => HasComputedLocation (TF.Resource p s) a where
    computedLocation = TF.configuration . computedLocation

class HasComputedMainRouteTableId s a | s -> a where
    computedMainRouteTableId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedMainRouteTableId s a => HasComputedMainRouteTableId (TF.Resource p s) a where
    computedMainRouteTableId = TF.configuration . computedMainRouteTableId

class HasComputedMaintenanceWindow s a | s -> a where
    computedMaintenanceWindow :: Functor f => (a -> f a) -> s -> f s

instance HasComputedMaintenanceWindow s a => HasComputedMaintenanceWindow (TF.Resource p s) a where
    computedMaintenanceWindow = TF.configuration . computedMaintenanceWindow

class HasComputedMasterUsername s a | s -> a where
    computedMasterUsername :: Functor f => (a -> f a) -> s -> f s

instance HasComputedMasterUsername s a => HasComputedMasterUsername (TF.Resource p s) a where
    computedMasterUsername = TF.configuration . computedMasterUsername

class HasComputedMaxSize s a | s -> a where
    computedMaxSize :: Functor f => (a -> f a) -> s -> f s

instance HasComputedMaxSize s a => HasComputedMaxSize (TF.Resource p s) a where
    computedMaxSize = TF.configuration . computedMaxSize

class HasComputedMinSize s a | s -> a where
    computedMinSize :: Functor f => (a -> f a) -> s -> f s

instance HasComputedMinSize s a => HasComputedMinSize (TF.Resource p s) a where
    computedMinSize = TF.configuration . computedMinSize

class HasComputedMultiAz s a | s -> a where
    computedMultiAz :: Functor f => (a -> f a) -> s -> f s

instance HasComputedMultiAz s a => HasComputedMultiAz (TF.Resource p s) a where
    computedMultiAz = TF.configuration . computedMultiAz

class HasComputedName s a | s -> a where
    computedName :: Functor f => (a -> f a) -> s -> f s

instance HasComputedName s a => HasComputedName (TF.Resource p s) a where
    computedName = TF.configuration . computedName

class HasComputedNameServers s a | s -> a where
    computedNameServers :: Functor f => (a -> f a) -> s -> f s

instance HasComputedNameServers s a => HasComputedNameServers (TF.Resource p s) a where
    computedNameServers = TF.configuration . computedNameServers

class HasComputedNatGatewayId s a | s -> a where
    computedNatGatewayId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedNatGatewayId s a => HasComputedNatGatewayId (TF.Resource p s) a where
    computedNatGatewayId = TF.configuration . computedNatGatewayId

class HasComputedNetworkInterface s a | s -> a where
    computedNetworkInterface :: Functor f => (a -> f a) -> s -> f s

instance HasComputedNetworkInterface s a => HasComputedNetworkInterface (TF.Resource p s) a where
    computedNetworkInterface = TF.configuration . computedNetworkInterface

class HasComputedNetworkInterfaceId s a | s -> a where
    computedNetworkInterfaceId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedNetworkInterfaceId s a => HasComputedNetworkInterfaceId (TF.Resource p s) a where
    computedNetworkInterfaceId = TF.configuration . computedNetworkInterfaceId

class HasComputedOptionGroupName s a | s -> a where
    computedOptionGroupName :: Functor f => (a -> f a) -> s -> f s

instance HasComputedOptionGroupName s a => HasComputedOptionGroupName (TF.Resource p s) a where
    computedOptionGroupName = TF.configuration . computedOptionGroupName

class HasComputedOriginalRouteTableId s a | s -> a where
    computedOriginalRouteTableId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedOriginalRouteTableId s a => HasComputedOriginalRouteTableId (TF.Resource p s) a where
    computedOriginalRouteTableId = TF.configuration . computedOriginalRouteTableId

class HasComputedOutputs s a | s -> a where
    computedOutputs :: Functor f => (a -> f a) -> s -> f s

instance HasComputedOutputs s a => HasComputedOutputs (TF.Resource p s) a where
    computedOutputs = TF.configuration . computedOutputs

class HasComputedOwner s a | s -> a where
    computedOwner :: Functor f => (a -> f a) -> s -> f s

instance HasComputedOwner s a => HasComputedOwner (TF.Resource p s) a where
    computedOwner = TF.configuration . computedOwner

class HasComputedOwnerAlias s a | s -> a where
    computedOwnerAlias :: Functor f => (a -> f a) -> s -> f s

instance HasComputedOwnerAlias s a => HasComputedOwnerAlias (TF.Resource p s) a where
    computedOwnerAlias = TF.configuration . computedOwnerAlias

class HasComputedOwnerId s a | s -> a where
    computedOwnerId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedOwnerId s a => HasComputedOwnerId (TF.Resource p s) a where
    computedOwnerId = TF.configuration . computedOwnerId

class HasComputedParameter s a | s -> a where
    computedParameter :: Functor f => (a -> f a) -> s -> f s

instance HasComputedParameter s a => HasComputedParameter (TF.Resource p s) a where
    computedParameter = TF.configuration . computedParameter

class HasComputedParameters s a | s -> a where
    computedParameters :: Functor f => (a -> f a) -> s -> f s

instance HasComputedParameters s a => HasComputedParameters (TF.Resource p s) a where
    computedParameters = TF.configuration . computedParameters

class HasComputedPath s a | s -> a where
    computedPath :: Functor f => (a -> f a) -> s -> f s

instance HasComputedPath s a => HasComputedPath (TF.Resource p s) a where
    computedPath = TF.configuration . computedPath

class HasComputedPemEncodedCertificate s a | s -> a where
    computedPemEncodedCertificate :: Functor f => (a -> f a) -> s -> f s

instance HasComputedPemEncodedCertificate s a => HasComputedPemEncodedCertificate (TF.Resource p s) a where
    computedPemEncodedCertificate = TF.configuration . computedPemEncodedCertificate

class HasComputedPerformanceInsightsEnabled s a | s -> a where
    computedPerformanceInsightsEnabled :: Functor f => (a -> f a) -> s -> f s

instance HasComputedPerformanceInsightsEnabled s a => HasComputedPerformanceInsightsEnabled (TF.Resource p s) a where
    computedPerformanceInsightsEnabled = TF.configuration . computedPerformanceInsightsEnabled

class HasComputedPerformanceInsightsKmsKeyId s a | s -> a where
    computedPerformanceInsightsKmsKeyId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedPerformanceInsightsKmsKeyId s a => HasComputedPerformanceInsightsKmsKeyId (TF.Resource p s) a where
    computedPerformanceInsightsKmsKeyId = TF.configuration . computedPerformanceInsightsKmsKeyId

class HasComputedPermissions s a | s -> a where
    computedPermissions :: Functor f => (a -> f a) -> s -> f s

instance HasComputedPermissions s a => HasComputedPermissions (TF.Resource p s) a where
    computedPermissions = TF.configuration . computedPermissions

class HasComputedPlatformTypes s a | s -> a where
    computedPlatformTypes :: Functor f => (a -> f a) -> s -> f s

instance HasComputedPlatformTypes s a => HasComputedPlatformTypes (TF.Resource p s) a where
    computedPlatformTypes = TF.configuration . computedPlatformTypes

class HasComputedPolicy s a | s -> a where
    computedPolicy :: Functor f => (a -> f a) -> s -> f s

instance HasComputedPolicy s a => HasComputedPolicy (TF.Resource p s) a where
    computedPolicy = TF.configuration . computedPolicy

class HasComputedPolicyName s a | s -> a where
    computedPolicyName :: Functor f => (a -> f a) -> s -> f s

instance HasComputedPolicyName s a => HasComputedPolicyName (TF.Resource p s) a where
    computedPolicyName = TF.configuration . computedPolicyName

class HasComputedPolicyType s a | s -> a where
    computedPolicyType :: Functor f => (a -> f a) -> s -> f s

instance HasComputedPolicyType s a => HasComputedPolicyType (TF.Resource p s) a where
    computedPolicyType = TF.configuration . computedPolicyType

class HasComputedPolicyTypeName s a | s -> a where
    computedPolicyTypeName :: Functor f => (a -> f a) -> s -> f s

instance HasComputedPolicyTypeName s a => HasComputedPolicyTypeName (TF.Resource p s) a where
    computedPolicyTypeName = TF.configuration . computedPolicyTypeName

class HasComputedPort s a | s -> a where
    computedPort :: Functor f => (a -> f a) -> s -> f s

instance HasComputedPort s a => HasComputedPort (TF.Resource p s) a where
    computedPort = TF.configuration . computedPort

class HasComputedPreferredBackupWindow s a | s -> a where
    computedPreferredBackupWindow :: Functor f => (a -> f a) -> s -> f s

instance HasComputedPreferredBackupWindow s a => HasComputedPreferredBackupWindow (TF.Resource p s) a where
    computedPreferredBackupWindow = TF.configuration . computedPreferredBackupWindow

class HasComputedPreferredMaintenanceWindow s a | s -> a where
    computedPreferredMaintenanceWindow :: Functor f => (a -> f a) -> s -> f s

instance HasComputedPreferredMaintenanceWindow s a => HasComputedPreferredMaintenanceWindow (TF.Resource p s) a where
    computedPreferredMaintenanceWindow = TF.configuration . computedPreferredMaintenanceWindow

class HasComputedPrefixListId s a | s -> a where
    computedPrefixListId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedPrefixListId s a => HasComputedPrefixListId (TF.Resource p s) a where
    computedPrefixListId = TF.configuration . computedPrefixListId

class HasComputedPrimaryEndpointAddress s a | s -> a where
    computedPrimaryEndpointAddress :: Functor f => (a -> f a) -> s -> f s

instance HasComputedPrimaryEndpointAddress s a => HasComputedPrimaryEndpointAddress (TF.Resource p s) a where
    computedPrimaryEndpointAddress = TF.configuration . computedPrimaryEndpointAddress

class HasComputedPrivateIp s a | s -> a where
    computedPrivateIp :: Functor f => (a -> f a) -> s -> f s

instance HasComputedPrivateIp s a => HasComputedPrivateIp (TF.Resource p s) a where
    computedPrivateIp = TF.configuration . computedPrivateIp

class HasComputedPrivateIpAddress s a | s -> a where
    computedPrivateIpAddress :: Functor f => (a -> f a) -> s -> f s

instance HasComputedPrivateIpAddress s a => HasComputedPrivateIpAddress (TF.Resource p s) a where
    computedPrivateIpAddress = TF.configuration . computedPrivateIpAddress

class HasComputedPrivateIps s a | s -> a where
    computedPrivateIps :: Functor f => (a -> f a) -> s -> f s

instance HasComputedPrivateIps s a => HasComputedPrivateIps (TF.Resource p s) a where
    computedPrivateIps = TF.configuration . computedPrivateIps

class HasComputedPrivateKey s a | s -> a where
    computedPrivateKey :: Functor f => (a -> f a) -> s -> f s

instance HasComputedPrivateKey s a => HasComputedPrivateKey (TF.Resource p s) a where
    computedPrivateKey = TF.configuration . computedPrivateKey

class HasComputedPublicIp s a | s -> a where
    computedPublicIp :: Functor f => (a -> f a) -> s -> f s

instance HasComputedPublicIp s a => HasComputedPublicIp (TF.Resource p s) a where
    computedPublicIp = TF.configuration . computedPublicIp

class HasComputedPublicKey s a | s -> a where
    computedPublicKey :: Functor f => (a -> f a) -> s -> f s

instance HasComputedPublicKey s a => HasComputedPublicKey (TF.Resource p s) a where
    computedPublicKey = TF.configuration . computedPublicKey

class HasComputedQualifiedArn s a | s -> a where
    computedQualifiedArn :: Functor f => (a -> f a) -> s -> f s

instance HasComputedQualifiedArn s a => HasComputedQualifiedArn (TF.Resource p s) a where
    computedQualifiedArn = TF.configuration . computedQualifiedArn

class HasComputedReaderEndpoint s a | s -> a where
    computedReaderEndpoint :: Functor f => (a -> f a) -> s -> f s

instance HasComputedReaderEndpoint s a => HasComputedReaderEndpoint (TF.Resource p s) a where
    computedReaderEndpoint = TF.configuration . computedReaderEndpoint

class HasComputedRegion s a | s -> a where
    computedRegion :: Functor f => (a -> f a) -> s -> f s

instance HasComputedRegion s a => HasComputedRegion (TF.Resource p s) a where
    computedRegion = TF.configuration . computedRegion

class HasComputedRegistrationCount s a | s -> a where
    computedRegistrationCount :: Functor f => (a -> f a) -> s -> f s

instance HasComputedRegistrationCount s a => HasComputedRegistrationCount (TF.Resource p s) a where
    computedRegistrationCount = TF.configuration . computedRegistrationCount

class HasComputedRegistrationLimit s a | s -> a where
    computedRegistrationLimit :: Functor f => (a -> f a) -> s -> f s

instance HasComputedRegistrationLimit s a => HasComputedRegistrationLimit (TF.Resource p s) a where
    computedRegistrationLimit = TF.configuration . computedRegistrationLimit

class HasComputedRegistryId s a | s -> a where
    computedRegistryId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedRegistryId s a => HasComputedRegistryId (TF.Resource p s) a where
    computedRegistryId = TF.configuration . computedRegistryId

class HasComputedReplicationInstanceArn s a | s -> a where
    computedReplicationInstanceArn :: Functor f => (a -> f a) -> s -> f s

instance HasComputedReplicationInstanceArn s a => HasComputedReplicationInstanceArn (TF.Resource p s) a where
    computedReplicationInstanceArn = TF.configuration . computedReplicationInstanceArn

class HasComputedReplicationInstancePrivateIps s a | s -> a where
    computedReplicationInstancePrivateIps :: Functor f => (a -> f a) -> s -> f s

instance HasComputedReplicationInstancePrivateIps s a => HasComputedReplicationInstancePrivateIps (TF.Resource p s) a where
    computedReplicationInstancePrivateIps = TF.configuration . computedReplicationInstancePrivateIps

class HasComputedReplicationInstancePublicIps s a | s -> a where
    computedReplicationInstancePublicIps :: Functor f => (a -> f a) -> s -> f s

instance HasComputedReplicationInstancePublicIps s a => HasComputedReplicationInstancePublicIps (TF.Resource p s) a where
    computedReplicationInstancePublicIps = TF.configuration . computedReplicationInstancePublicIps

class HasComputedReplicationSourceIdentifier s a | s -> a where
    computedReplicationSourceIdentifier :: Functor f => (a -> f a) -> s -> f s

instance HasComputedReplicationSourceIdentifier s a => HasComputedReplicationSourceIdentifier (TF.Resource p s) a where
    computedReplicationSourceIdentifier = TF.configuration . computedReplicationSourceIdentifier

class HasComputedReplicationTaskArn s a | s -> a where
    computedReplicationTaskArn :: Functor f => (a -> f a) -> s -> f s

instance HasComputedReplicationTaskArn s a => HasComputedReplicationTaskArn (TF.Resource p s) a where
    computedReplicationTaskArn = TF.configuration . computedReplicationTaskArn

class HasComputedRepository s a | s -> a where
    computedRepository :: Functor f => (a -> f a) -> s -> f s

instance HasComputedRepository s a => HasComputedRepository (TF.Resource p s) a where
    computedRepository = TF.configuration . computedRepository

class HasComputedRepositoryId s a | s -> a where
    computedRepositoryId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedRepositoryId s a => HasComputedRepositoryId (TF.Resource p s) a where
    computedRepositoryId = TF.configuration . computedRepositoryId

class HasComputedRepositoryUrl s a | s -> a where
    computedRepositoryUrl :: Functor f => (a -> f a) -> s -> f s

instance HasComputedRepositoryUrl s a => HasComputedRepositoryUrl (TF.Resource p s) a where
    computedRepositoryUrl = TF.configuration . computedRepositoryUrl

class HasComputedResourceId s a | s -> a where
    computedResourceId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedResourceId s a => HasComputedResourceId (TF.Resource p s) a where
    computedResourceId = TF.configuration . computedResourceId

class HasComputedRole s a | s -> a where
    computedRole :: Functor f => (a -> f a) -> s -> f s

instance HasComputedRole s a => HasComputedRole (TF.Resource p s) a where
    computedRole = TF.configuration . computedRole

class HasComputedRoles s a | s -> a where
    computedRoles :: Functor f => (a -> f a) -> s -> f s

instance HasComputedRoles s a => HasComputedRoles (TF.Resource p s) a where
    computedRoles = TF.configuration . computedRoles

class HasComputedRootResourceId s a | s -> a where
    computedRootResourceId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedRootResourceId s a => HasComputedRootResourceId (TF.Resource p s) a where
    computedRootResourceId = TF.configuration . computedRootResourceId

class HasComputedRouteTableId s a | s -> a where
    computedRouteTableId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedRouteTableId s a => HasComputedRouteTableId (TF.Resource p s) a where
    computedRouteTableId = TF.configuration . computedRouteTableId

class HasComputedRunningInstanceCount s a | s -> a where
    computedRunningInstanceCount :: Functor f => (a -> f a) -> s -> f s

instance HasComputedRunningInstanceCount s a => HasComputedRunningInstanceCount (TF.Resource p s) a where
    computedRunningInstanceCount = TF.configuration . computedRunningInstanceCount

class HasComputedS3Bucket s a | s -> a where
    computedS3Bucket :: Functor f => (a -> f a) -> s -> f s

instance HasComputedS3Bucket s a => HasComputedS3Bucket (TF.Resource p s) a where
    computedS3Bucket = TF.configuration . computedS3Bucket

class HasComputedS3CanonicalUserId s a | s -> a where
    computedS3CanonicalUserId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedS3CanonicalUserId s a => HasComputedS3CanonicalUserId (TF.Resource p s) a where
    computedS3CanonicalUserId = TF.configuration . computedS3CanonicalUserId

class HasComputedSchemaVersion s a | s -> a where
    computedSchemaVersion :: Functor f => (a -> f a) -> s -> f s

instance HasComputedSchemaVersion s a => HasComputedSchemaVersion (TF.Resource p s) a where
    computedSchemaVersion = TF.configuration . computedSchemaVersion

class HasComputedSecret s a | s -> a where
    computedSecret :: Functor f => (a -> f a) -> s -> f s

instance HasComputedSecret s a => HasComputedSecret (TF.Resource p s) a where
    computedSecret = TF.configuration . computedSecret

class HasComputedSecurityGroupId s a | s -> a where
    computedSecurityGroupId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedSecurityGroupId s a => HasComputedSecurityGroupId (TF.Resource p s) a where
    computedSecurityGroupId = TF.configuration . computedSecurityGroupId

class HasComputedSecurityGroups s a | s -> a where
    computedSecurityGroups :: Functor f => (a -> f a) -> s -> f s

instance HasComputedSecurityGroups s a => HasComputedSecurityGroups (TF.Resource p s) a where
    computedSecurityGroups = TF.configuration . computedSecurityGroups

class HasComputedServiceRole s a | s -> a where
    computedServiceRole :: Functor f => (a -> f a) -> s -> f s

instance HasComputedServiceRole s a => HasComputedServiceRole (TF.Resource p s) a where
    computedServiceRole = TF.configuration . computedServiceRole

class HasComputedSesSmtpPassword s a | s -> a where
    computedSesSmtpPassword :: Functor f => (a -> f a) -> s -> f s

instance HasComputedSesSmtpPassword s a => HasComputedSesSmtpPassword (TF.Resource p s) a where
    computedSesSmtpPassword = TF.configuration . computedSesSmtpPassword

class HasComputedShardCount s a | s -> a where
    computedShardCount :: Functor f => (a -> f a) -> s -> f s

instance HasComputedShardCount s a => HasComputedShardCount (TF.Resource p s) a where
    computedShardCount = TF.configuration . computedShardCount

class HasComputedSourceCodeHash s a | s -> a where
    computedSourceCodeHash :: Functor f => (a -> f a) -> s -> f s

instance HasComputedSourceCodeHash s a => HasComputedSourceCodeHash (TF.Resource p s) a where
    computedSourceCodeHash = TF.configuration . computedSourceCodeHash

class HasComputedSourceDbSnapshotIdentifier s a | s -> a where
    computedSourceDbSnapshotIdentifier :: Functor f => (a -> f a) -> s -> f s

instance HasComputedSourceDbSnapshotIdentifier s a => HasComputedSourceDbSnapshotIdentifier (TF.Resource p s) a where
    computedSourceDbSnapshotIdentifier = TF.configuration . computedSourceDbSnapshotIdentifier

class HasComputedSourceDestCheck s a | s -> a where
    computedSourceDestCheck :: Functor f => (a -> f a) -> s -> f s

instance HasComputedSourceDestCheck s a => HasComputedSourceDestCheck (TF.Resource p s) a where
    computedSourceDestCheck = TF.configuration . computedSourceDestCheck

class HasComputedSourceRegion s a | s -> a where
    computedSourceRegion :: Functor f => (a -> f a) -> s -> f s

instance HasComputedSourceRegion s a => HasComputedSourceRegion (TF.Resource p s) a where
    computedSourceRegion = TF.configuration . computedSourceRegion

class HasComputedSshPublicKeyId s a | s -> a where
    computedSshPublicKeyId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedSshPublicKeyId s a => HasComputedSshPublicKeyId (TF.Resource p s) a where
    computedSshPublicKeyId = TF.configuration . computedSshPublicKeyId

class HasComputedState s a | s -> a where
    computedState :: Functor f => (a -> f a) -> s -> f s

instance HasComputedState s a => HasComputedState (TF.Resource p s) a where
    computedState = TF.configuration . computedState

class HasComputedStateTransitionReason s a | s -> a where
    computedStateTransitionReason :: Functor f => (a -> f a) -> s -> f s

instance HasComputedStateTransitionReason s a => HasComputedStateTransitionReason (TF.Resource p s) a where
    computedStateTransitionReason = TF.configuration . computedStateTransitionReason

class HasComputedStaticRoutesOnly s a | s -> a where
    computedStaticRoutesOnly :: Functor f => (a -> f a) -> s -> f s

instance HasComputedStaticRoutesOnly s a => HasComputedStaticRoutesOnly (TF.Resource p s) a where
    computedStaticRoutesOnly = TF.configuration . computedStaticRoutesOnly

class HasComputedStatus s a | s -> a where
    computedStatus :: Functor f => (a -> f a) -> s -> f s

instance HasComputedStatus s a => HasComputedStatus (TF.Resource p s) a where
    computedStatus = TF.configuration . computedStatus

class HasComputedStatusReason s a | s -> a where
    computedStatusReason :: Functor f => (a -> f a) -> s -> f s

instance HasComputedStatusReason s a => HasComputedStatusReason (TF.Resource p s) a where
    computedStatusReason = TF.configuration . computedStatusReason

class HasComputedStorageEncrypted s a | s -> a where
    computedStorageEncrypted :: Functor f => (a -> f a) -> s -> f s

instance HasComputedStorageEncrypted s a => HasComputedStorageEncrypted (TF.Resource p s) a where
    computedStorageEncrypted = TF.configuration . computedStorageEncrypted

class HasComputedStorageType s a | s -> a where
    computedStorageType :: Functor f => (a -> f a) -> s -> f s

instance HasComputedStorageType s a => HasComputedStorageType (TF.Resource p s) a where
    computedStorageType = TF.configuration . computedStorageType

class HasComputedSubnetId s a | s -> a where
    computedSubnetId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedSubnetId s a => HasComputedSubnetId (TF.Resource p s) a where
    computedSubnetId = TF.configuration . computedSubnetId

class HasComputedSupportCode s a | s -> a where
    computedSupportCode :: Functor f => (a -> f a) -> s -> f s

instance HasComputedSupportCode s a => HasComputedSupportCode (TF.Resource p s) a where
    computedSupportCode = TF.configuration . computedSupportCode

class HasComputedTags s a | s -> a where
    computedTags :: Functor f => (a -> f a) -> s -> f s

instance HasComputedTags s a => HasComputedTags (TF.Resource p s) a where
    computedTags = TF.configuration . computedTags

class HasComputedTargetGroupArns s a | s -> a where
    computedTargetGroupArns :: Functor f => (a -> f a) -> s -> f s

instance HasComputedTargetGroupArns s a => HasComputedTargetGroupArns (TF.Resource p s) a where
    computedTargetGroupArns = TF.configuration . computedTargetGroupArns

class HasComputedThrottleSettings s a | s -> a where
    computedThrottleSettings :: Functor f => (a -> f a) -> s -> f s

instance HasComputedThrottleSettings s a => HasComputedThrottleSettings (TF.Resource p s) a where
    computedThrottleSettings = TF.configuration . computedThrottleSettings

class HasComputedTunnel1Address s a | s -> a where
    computedTunnel1Address :: Functor f => (a -> f a) -> s -> f s

instance HasComputedTunnel1Address s a => HasComputedTunnel1Address (TF.Resource p s) a where
    computedTunnel1Address = TF.configuration . computedTunnel1Address

class HasComputedTunnel1BgpAsn s a | s -> a where
    computedTunnel1BgpAsn :: Functor f => (a -> f a) -> s -> f s

instance HasComputedTunnel1BgpAsn s a => HasComputedTunnel1BgpAsn (TF.Resource p s) a where
    computedTunnel1BgpAsn = TF.configuration . computedTunnel1BgpAsn

class HasComputedTunnel1BgpHoldtime s a | s -> a where
    computedTunnel1BgpHoldtime :: Functor f => (a -> f a) -> s -> f s

instance HasComputedTunnel1BgpHoldtime s a => HasComputedTunnel1BgpHoldtime (TF.Resource p s) a where
    computedTunnel1BgpHoldtime = TF.configuration . computedTunnel1BgpHoldtime

class HasComputedTunnel1CgwInsideAddress s a | s -> a where
    computedTunnel1CgwInsideAddress :: Functor f => (a -> f a) -> s -> f s

instance HasComputedTunnel1CgwInsideAddress s a => HasComputedTunnel1CgwInsideAddress (TF.Resource p s) a where
    computedTunnel1CgwInsideAddress = TF.configuration . computedTunnel1CgwInsideAddress

class HasComputedTunnel1PresharedKey s a | s -> a where
    computedTunnel1PresharedKey :: Functor f => (a -> f a) -> s -> f s

instance HasComputedTunnel1PresharedKey s a => HasComputedTunnel1PresharedKey (TF.Resource p s) a where
    computedTunnel1PresharedKey = TF.configuration . computedTunnel1PresharedKey

class HasComputedTunnel1VgwInsideAddress s a | s -> a where
    computedTunnel1VgwInsideAddress :: Functor f => (a -> f a) -> s -> f s

instance HasComputedTunnel1VgwInsideAddress s a => HasComputedTunnel1VgwInsideAddress (TF.Resource p s) a where
    computedTunnel1VgwInsideAddress = TF.configuration . computedTunnel1VgwInsideAddress

class HasComputedTunnel2Address s a | s -> a where
    computedTunnel2Address :: Functor f => (a -> f a) -> s -> f s

instance HasComputedTunnel2Address s a => HasComputedTunnel2Address (TF.Resource p s) a where
    computedTunnel2Address = TF.configuration . computedTunnel2Address

class HasComputedTunnel2BgpAsn s a | s -> a where
    computedTunnel2BgpAsn :: Functor f => (a -> f a) -> s -> f s

instance HasComputedTunnel2BgpAsn s a => HasComputedTunnel2BgpAsn (TF.Resource p s) a where
    computedTunnel2BgpAsn = TF.configuration . computedTunnel2BgpAsn

class HasComputedTunnel2BgpHoldtime s a | s -> a where
    computedTunnel2BgpHoldtime :: Functor f => (a -> f a) -> s -> f s

instance HasComputedTunnel2BgpHoldtime s a => HasComputedTunnel2BgpHoldtime (TF.Resource p s) a where
    computedTunnel2BgpHoldtime = TF.configuration . computedTunnel2BgpHoldtime

class HasComputedTunnel2CgwInsideAddress s a | s -> a where
    computedTunnel2CgwInsideAddress :: Functor f => (a -> f a) -> s -> f s

instance HasComputedTunnel2CgwInsideAddress s a => HasComputedTunnel2CgwInsideAddress (TF.Resource p s) a where
    computedTunnel2CgwInsideAddress = TF.configuration . computedTunnel2CgwInsideAddress

class HasComputedTunnel2PresharedKey s a | s -> a where
    computedTunnel2PresharedKey :: Functor f => (a -> f a) -> s -> f s

instance HasComputedTunnel2PresharedKey s a => HasComputedTunnel2PresharedKey (TF.Resource p s) a where
    computedTunnel2PresharedKey = TF.configuration . computedTunnel2PresharedKey

class HasComputedTunnel2VgwInsideAddress s a | s -> a where
    computedTunnel2VgwInsideAddress :: Functor f => (a -> f a) -> s -> f s

instance HasComputedTunnel2VgwInsideAddress s a => HasComputedTunnel2VgwInsideAddress (TF.Resource p s) a where
    computedTunnel2VgwInsideAddress = TF.configuration . computedTunnel2VgwInsideAddress

class HasComputedType' s a | s -> a where
    computedType' :: Functor f => (a -> f a) -> s -> f s

instance HasComputedType' s a => HasComputedType' (TF.Resource p s) a where
    computedType' = TF.configuration . computedType'

class HasComputedUniqueId s a | s -> a where
    computedUniqueId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedUniqueId s a => HasComputedUniqueId (TF.Resource p s) a where
    computedUniqueId = TF.configuration . computedUniqueId

class HasComputedUsagePlanId s a | s -> a where
    computedUsagePlanId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedUsagePlanId s a => HasComputedUsagePlanId (TF.Resource p s) a where
    computedUsagePlanId = TF.configuration . computedUsagePlanId

class HasComputedUser s a | s -> a where
    computedUser :: Functor f => (a -> f a) -> s -> f s

instance HasComputedUser s a => HasComputedUser (TF.Resource p s) a where
    computedUser = TF.configuration . computedUser

class HasComputedUsername s a | s -> a where
    computedUsername :: Functor f => (a -> f a) -> s -> f s

instance HasComputedUsername s a => HasComputedUsername (TF.Resource p s) a where
    computedUsername = TF.configuration . computedUsername

class HasComputedUsers s a | s -> a where
    computedUsers :: Functor f => (a -> f a) -> s -> f s

instance HasComputedUsers s a => HasComputedUsers (TF.Resource p s) a where
    computedUsers = TF.configuration . computedUsers

class HasComputedUuid s a | s -> a where
    computedUuid :: Functor f => (a -> f a) -> s -> f s

instance HasComputedUuid s a => HasComputedUuid (TF.Resource p s) a where
    computedUuid = TF.configuration . computedUuid

class HasComputedValidUntil s a | s -> a where
    computedValidUntil :: Functor f => (a -> f a) -> s -> f s

instance HasComputedValidUntil s a => HasComputedValidUntil (TF.Resource p s) a where
    computedValidUntil = TF.configuration . computedValidUntil

class HasComputedValue s a | s -> a where
    computedValue :: Functor f => (a -> f a) -> s -> f s

instance HasComputedValue s a => HasComputedValue (TF.Resource p s) a where
    computedValue = TF.configuration . computedValue

class HasComputedVerificationToken s a | s -> a where
    computedVerificationToken :: Functor f => (a -> f a) -> s -> f s

instance HasComputedVerificationToken s a => HasComputedVerificationToken (TF.Resource p s) a where
    computedVerificationToken = TF.configuration . computedVerificationToken

class HasComputedVersion s a | s -> a where
    computedVersion :: Functor f => (a -> f a) -> s -> f s

instance HasComputedVersion s a => HasComputedVersion (TF.Resource p s) a where
    computedVersion = TF.configuration . computedVersion

class HasComputedVersionId s a | s -> a where
    computedVersionId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedVersionId s a => HasComputedVersionId (TF.Resource p s) a where
    computedVersionId = TF.configuration . computedVersionId

class HasComputedVolumeId s a | s -> a where
    computedVolumeId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedVolumeId s a => HasComputedVolumeId (TF.Resource p s) a where
    computedVolumeId = TF.configuration . computedVolumeId

class HasComputedVolumeSize s a | s -> a where
    computedVolumeSize :: Functor f => (a -> f a) -> s -> f s

instance HasComputedVolumeSize s a => HasComputedVolumeSize (TF.Resource p s) a where
    computedVolumeSize = TF.configuration . computedVolumeSize

class HasComputedVpcId s a | s -> a where
    computedVpcId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedVpcId s a => HasComputedVpcId (TF.Resource p s) a where
    computedVpcId = TF.configuration . computedVpcId

class HasComputedVpcOptions0AvailabilityZones s a | s -> a where
    computedVpcOptions0AvailabilityZones :: Functor f => (a -> f a) -> s -> f s

instance HasComputedVpcOptions0AvailabilityZones s a => HasComputedVpcOptions0AvailabilityZones (TF.Resource p s) a where
    computedVpcOptions0AvailabilityZones = TF.configuration . computedVpcOptions0AvailabilityZones

class HasComputedVpcOptions0VpcId s a | s -> a where
    computedVpcOptions0VpcId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedVpcOptions0VpcId s a => HasComputedVpcOptions0VpcId (TF.Resource p s) a where
    computedVpcOptions0VpcId = TF.configuration . computedVpcOptions0VpcId

class HasComputedVpcPeeringConnectionId s a | s -> a where
    computedVpcPeeringConnectionId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedVpcPeeringConnectionId s a => HasComputedVpcPeeringConnectionId (TF.Resource p s) a where
    computedVpcPeeringConnectionId = TF.configuration . computedVpcPeeringConnectionId

class HasComputedVpcRegion s a | s -> a where
    computedVpcRegion :: Functor f => (a -> f a) -> s -> f s

instance HasComputedVpcRegion s a => HasComputedVpcRegion (TF.Resource p s) a where
    computedVpcRegion = TF.configuration . computedVpcRegion

class HasComputedVpcZoneIdentifier s a | s -> a where
    computedVpcZoneIdentifier :: Functor f => (a -> f a) -> s -> f s

instance HasComputedVpcZoneIdentifier s a => HasComputedVpcZoneIdentifier (TF.Resource p s) a where
    computedVpcZoneIdentifier = TF.configuration . computedVpcZoneIdentifier

class HasComputedVpnConnectionId s a | s -> a where
    computedVpnConnectionId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedVpnConnectionId s a => HasComputedVpnConnectionId (TF.Resource p s) a where
    computedVpnConnectionId = TF.configuration . computedVpnConnectionId

class HasComputedVpnGatewayId s a | s -> a where
    computedVpnGatewayId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedVpnGatewayId s a => HasComputedVpnGatewayId (TF.Resource p s) a where
    computedVpnGatewayId = TF.configuration . computedVpnGatewayId

class HasComputedWebsiteDomain s a | s -> a where
    computedWebsiteDomain :: Functor f => (a -> f a) -> s -> f s

instance HasComputedWebsiteDomain s a => HasComputedWebsiteDomain (TF.Resource p s) a where
    computedWebsiteDomain = TF.configuration . computedWebsiteDomain

class HasComputedWebsiteEndpoint s a | s -> a where
    computedWebsiteEndpoint :: Functor f => (a -> f a) -> s -> f s

instance HasComputedWebsiteEndpoint s a => HasComputedWebsiteEndpoint (TF.Resource p s) a where
    computedWebsiteEndpoint = TF.configuration . computedWebsiteEndpoint

class HasComputedWriter s a | s -> a where
    computedWriter :: Functor f => (a -> f a) -> s -> f s

instance HasComputedWriter s a => HasComputedWriter (TF.Resource p s) a where
    computedWriter = TF.configuration . computedWriter

class HasComputedZoneId s a | s -> a where
    computedZoneId :: Functor f => (a -> f a) -> s -> f s

instance HasComputedZoneId s a => HasComputedZoneId (TF.Resource p s) a where
    computedZoneId = TF.configuration . computedZoneId

class HasCondition s a | s -> a where
    condition :: Functor f => (a -> f a) -> s -> f s

instance HasCondition s a => HasCondition (TF.Resource p s) a where
    condition = TF.configuration . condition

class HasConfiguration s a | s -> a where
    configuration :: Functor f => (a -> f a) -> s -> f s

instance HasConfiguration s a => HasConfiguration (TF.Resource p s) a where
    configuration = TF.configuration . configuration

class HasConfigurationManagerName s a | s -> a where
    configurationManagerName :: Functor f => (a -> f a) -> s -> f s

instance HasConfigurationManagerName s a => HasConfigurationManagerName (TF.Resource p s) a where
    configurationManagerName = TF.configuration . configurationManagerName

class HasConfigurationManagerVersion s a | s -> a where
    configurationManagerVersion :: Functor f => (a -> f a) -> s -> f s

instance HasConfigurationManagerVersion s a => HasConfigurationManagerVersion (TF.Resource p s) a where
    configurationManagerVersion = TF.configuration . configurationManagerVersion

class HasConfigurationSetName s a | s -> a where
    configurationSetName :: Functor f => (a -> f a) -> s -> f s

instance HasConfigurationSetName s a => HasConfigurationSetName (TF.Resource p s) a where
    configurationSetName = TF.configuration . configurationSetName

class HasConfigurations s a | s -> a where
    configurations :: Functor f => (a -> f a) -> s -> f s

instance HasConfigurations s a => HasConfigurations (TF.Resource p s) a where
    configurations = TF.configuration . configurations

class HasConfirmationTimeoutInMinutes s a | s -> a where
    confirmationTimeoutInMinutes :: Functor f => (a -> f a) -> s -> f s

instance HasConfirmationTimeoutInMinutes s a => HasConfirmationTimeoutInMinutes (TF.Resource p s) a where
    confirmationTimeoutInMinutes = TF.configuration . confirmationTimeoutInMinutes

class HasConnectSettings s a | s -> a where
    connectSettings :: Functor f => (a -> f a) -> s -> f s

instance HasConnectSettings s a => HasConnectSettings (TF.Resource p s) a where
    connectSettings = TF.configuration . connectSettings

class HasConnectionDraining s a | s -> a where
    connectionDraining :: Functor f => (a -> f a) -> s -> f s

instance HasConnectionDraining s a => HasConnectionDraining (TF.Resource p s) a where
    connectionDraining = TF.configuration . connectionDraining

class HasConnectionDrainingTimeout s a | s -> a where
    connectionDrainingTimeout :: Functor f => (a -> f a) -> s -> f s

instance HasConnectionDrainingTimeout s a => HasConnectionDrainingTimeout (TF.Resource p s) a where
    connectionDrainingTimeout = TF.configuration . connectionDrainingTimeout

class HasConnectionId s a | s -> a where
    connectionId :: Functor f => (a -> f a) -> s -> f s

instance HasConnectionId s a => HasConnectionId (TF.Resource p s) a where
    connectionId = TF.configuration . connectionId

class HasConnectionsBandwidth s a | s -> a where
    connectionsBandwidth :: Functor f => (a -> f a) -> s -> f s

instance HasConnectionsBandwidth s a => HasConnectionsBandwidth (TF.Resource p s) a where
    connectionsBandwidth = TF.configuration . connectionsBandwidth

class HasContainer s a | s -> a where
    container :: Functor f => (a -> f a) -> s -> f s

instance HasContainer s a => HasContainer (TF.Resource p s) a where
    container = TF.configuration . container

class HasContainerDefinitions s a | s -> a where
    containerDefinitions :: Functor f => (a -> f a) -> s -> f s

instance HasContainerDefinitions s a => HasContainerDefinitions (TF.Resource p s) a where
    containerDefinitions = TF.configuration . containerDefinitions

class HasContainerProperties s a | s -> a where
    containerProperties :: Functor f => (a -> f a) -> s -> f s

instance HasContainerProperties s a => HasContainerProperties (TF.Resource p s) a where
    containerProperties = TF.configuration . containerProperties

class HasContent s a | s -> a where
    content :: Functor f => (a -> f a) -> s -> f s

instance HasContent s a => HasContent (TF.Resource p s) a where
    content = TF.configuration . content

class HasContentBasedDeduplication s a | s -> a where
    contentBasedDeduplication :: Functor f => (a -> f a) -> s -> f s

instance HasContentBasedDeduplication s a => HasContentBasedDeduplication (TF.Resource p s) a where
    contentBasedDeduplication = TF.configuration . contentBasedDeduplication

class HasContentConfig s a | s -> a where
    contentConfig :: Functor f => (a -> f a) -> s -> f s

instance HasContentConfig s a => HasContentConfig (TF.Resource p s) a where
    contentConfig = TF.configuration . contentConfig

class HasContentConfigPermissions s a | s -> a where
    contentConfigPermissions :: Functor f => (a -> f a) -> s -> f s

instance HasContentConfigPermissions s a => HasContentConfigPermissions (TF.Resource p s) a where
    contentConfigPermissions = TF.configuration . contentConfigPermissions

class HasContentDisposition s a | s -> a where
    contentDisposition :: Functor f => (a -> f a) -> s -> f s

instance HasContentDisposition s a => HasContentDisposition (TF.Resource p s) a where
    contentDisposition = TF.configuration . contentDisposition

class HasContentEncoding s a | s -> a where
    contentEncoding :: Functor f => (a -> f a) -> s -> f s

instance HasContentEncoding s a => HasContentEncoding (TF.Resource p s) a where
    contentEncoding = TF.configuration . contentEncoding

class HasContentHandling s a | s -> a where
    contentHandling :: Functor f => (a -> f a) -> s -> f s

instance HasContentHandling s a => HasContentHandling (TF.Resource p s) a where
    contentHandling = TF.configuration . contentHandling

class HasContentLanguage s a | s -> a where
    contentLanguage :: Functor f => (a -> f a) -> s -> f s

instance HasContentLanguage s a => HasContentLanguage (TF.Resource p s) a where
    contentLanguage = TF.configuration . contentLanguage

class HasContentType s a | s -> a where
    contentType :: Functor f => (a -> f a) -> s -> f s

instance HasContentType s a => HasContentType (TF.Resource p s) a where
    contentType = TF.configuration . contentType

class HasCookieExpirationPeriod s a | s -> a where
    cookieExpirationPeriod :: Functor f => (a -> f a) -> s -> f s

instance HasCookieExpirationPeriod s a => HasCookieExpirationPeriod (TF.Resource p s) a where
    cookieExpirationPeriod = TF.configuration . cookieExpirationPeriod

class HasCookieName s a | s -> a where
    cookieName :: Functor f => (a -> f a) -> s -> f s

instance HasCookieName s a => HasCookieName (TF.Resource p s) a where
    cookieName = TF.configuration . cookieName

class HasCopyTagsToSnapshot s a | s -> a where
    copyTagsToSnapshot :: Functor f => (a -> f a) -> s -> f s

instance HasCopyTagsToSnapshot s a => HasCopyTagsToSnapshot (TF.Resource p s) a where
    copyTagsToSnapshot = TF.configuration . copyTagsToSnapshot

class HasCoreInstanceCount s a | s -> a where
    coreInstanceCount :: Functor f => (a -> f a) -> s -> f s

instance HasCoreInstanceCount s a => HasCoreInstanceCount (TF.Resource p s) a where
    coreInstanceCount = TF.configuration . coreInstanceCount

class HasCoreInstanceType s a | s -> a where
    coreInstanceType :: Functor f => (a -> f a) -> s -> f s

instance HasCoreInstanceType s a => HasCoreInstanceType (TF.Resource p s) a where
    coreInstanceType = TF.configuration . coreInstanceType

class HasCorsRule s a | s -> a where
    corsRule :: Functor f => (a -> f a) -> s -> f s

instance HasCorsRule s a => HasCorsRule (TF.Resource p s) a where
    corsRule = TF.configuration . corsRule

class HasCreationToken s a | s -> a where
    creationToken :: Functor f => (a -> f a) -> s -> f s

instance HasCreationToken s a => HasCreationToken (TF.Resource p s) a where
    creationToken = TF.configuration . creationToken

class HasCredentials s a | s -> a where
    credentials :: Functor f => (a -> f a) -> s -> f s

instance HasCredentials s a => HasCredentials (TF.Resource p s) a where
    credentials = TF.configuration . credentials

class HasCrossZoneLoadBalancing s a | s -> a where
    crossZoneLoadBalancing :: Functor f => (a -> f a) -> s -> f s

instance HasCrossZoneLoadBalancing s a => HasCrossZoneLoadBalancing (TF.Resource p s) a where
    crossZoneLoadBalancing = TF.configuration . crossZoneLoadBalancing

class HasCsr s a | s -> a where
    csr :: Functor f => (a -> f a) -> s -> f s

instance HasCsr s a => HasCsr (TF.Resource p s) a where
    csr = TF.configuration . csr

class HasCustomCookbooksSource s a | s -> a where
    customCookbooksSource :: Functor f => (a -> f a) -> s -> f s

instance HasCustomCookbooksSource s a => HasCustomCookbooksSource (TF.Resource p s) a where
    customCookbooksSource = TF.configuration . customCookbooksSource

class HasCustomData s a | s -> a where
    customData :: Functor f => (a -> f a) -> s -> f s

instance HasCustomData s a => HasCustomData (TF.Resource p s) a where
    customData = TF.configuration . customData

class HasCustomErrorResponse s a | s -> a where
    customErrorResponse :: Functor f => (a -> f a) -> s -> f s

instance HasCustomErrorResponse s a => HasCustomErrorResponse (TF.Resource p s) a where
    customErrorResponse = TF.configuration . customErrorResponse

class HasCustomInstanceProfileArn s a | s -> a where
    customInstanceProfileArn :: Functor f => (a -> f a) -> s -> f s

instance HasCustomInstanceProfileArn s a => HasCustomInstanceProfileArn (TF.Resource p s) a where
    customInstanceProfileArn = TF.configuration . customInstanceProfileArn

class HasCustomJson s a | s -> a where
    customJson :: Functor f => (a -> f a) -> s -> f s

instance HasCustomJson s a => HasCustomJson (TF.Resource p s) a where
    customJson = TF.configuration . customJson

class HasCustomSecurityGroupIds s a | s -> a where
    customSecurityGroupIds :: Functor f => (a -> f a) -> s -> f s

instance HasCustomSecurityGroupIds s a => HasCustomSecurityGroupIds (TF.Resource p s) a where
    customSecurityGroupIds = TF.configuration . customSecurityGroupIds

class HasCustomerGatewayId s a | s -> a where
    customerGatewayId :: Functor f => (a -> f a) -> s -> f s

instance HasCustomerGatewayId s a => HasCustomerGatewayId (TF.Resource p s) a where
    customerGatewayId = TF.configuration . customerGatewayId

class HasCutoff s a | s -> a where
    cutoff :: Functor f => (a -> f a) -> s -> f s

instance HasCutoff s a => HasCutoff (TF.Resource p s) a where
    cutoff = TF.configuration . cutoff

class HasDashboardBody s a | s -> a where
    dashboardBody :: Functor f => (a -> f a) -> s -> f s

instance HasDashboardBody s a => HasDashboardBody (TF.Resource p s) a where
    dashboardBody = TF.configuration . dashboardBody

class HasDashboardName s a | s -> a where
    dashboardName :: Functor f => (a -> f a) -> s -> f s

instance HasDashboardName s a => HasDashboardName (TF.Resource p s) a where
    dashboardName = TF.configuration . dashboardName

class HasData' s a | s -> a where
    data' :: Functor f => (a -> f a) -> s -> f s

instance HasData' s a => HasData' (TF.Resource p s) a where
    data' = TF.configuration . data'

class HasDataSourceArn s a | s -> a where
    dataSourceArn :: Functor f => (a -> f a) -> s -> f s

instance HasDataSourceArn s a => HasDataSourceArn (TF.Resource p s) a where
    dataSourceArn = TF.configuration . dataSourceArn

class HasDataSourceDatabaseName s a | s -> a where
    dataSourceDatabaseName :: Functor f => (a -> f a) -> s -> f s

instance HasDataSourceDatabaseName s a => HasDataSourceDatabaseName (TF.Resource p s) a where
    dataSourceDatabaseName = TF.configuration . dataSourceDatabaseName

class HasDataSourceType s a | s -> a where
    dataSourceType :: Functor f => (a -> f a) -> s -> f s

instance HasDataSourceType s a => HasDataSourceType (TF.Resource p s) a where
    dataSourceType = TF.configuration . dataSourceType

class HasDatabase s a | s -> a where
    database :: Functor f => (a -> f a) -> s -> f s

instance HasDatabase s a => HasDatabase (TF.Resource p s) a where
    database = TF.configuration . database

class HasDatabaseName s a | s -> a where
    databaseName :: Functor f => (a -> f a) -> s -> f s

instance HasDatabaseName s a => HasDatabaseName (TF.Resource p s) a where
    databaseName = TF.configuration . databaseName

class HasDatapointsToAlarm s a | s -> a where
    datapointsToAlarm :: Functor f => (a -> f a) -> s -> f s

instance HasDatapointsToAlarm s a => HasDatapointsToAlarm (TF.Resource p s) a where
    datapointsToAlarm = TF.configuration . datapointsToAlarm

class HasDbClusterParameterGroupName s a | s -> a where
    dbClusterParameterGroupName :: Functor f => (a -> f a) -> s -> f s

instance HasDbClusterParameterGroupName s a => HasDbClusterParameterGroupName (TF.Resource p s) a where
    dbClusterParameterGroupName = TF.configuration . dbClusterParameterGroupName

class HasDbInstanceIdentifier s a | s -> a where
    dbInstanceIdentifier :: Functor f => (a -> f a) -> s -> f s

instance HasDbInstanceIdentifier s a => HasDbInstanceIdentifier (TF.Resource p s) a where
    dbInstanceIdentifier = TF.configuration . dbInstanceIdentifier

class HasDbParameterGroupName s a | s -> a where
    dbParameterGroupName :: Functor f => (a -> f a) -> s -> f s

instance HasDbParameterGroupName s a => HasDbParameterGroupName (TF.Resource p s) a where
    dbParameterGroupName = TF.configuration . dbParameterGroupName

class HasDbPassword s a | s -> a where
    dbPassword :: Functor f => (a -> f a) -> s -> f s

instance HasDbPassword s a => HasDbPassword (TF.Resource p s) a where
    dbPassword = TF.configuration . dbPassword

class HasDbSnapshotIdentifier s a | s -> a where
    dbSnapshotIdentifier :: Functor f => (a -> f a) -> s -> f s

instance HasDbSnapshotIdentifier s a => HasDbSnapshotIdentifier (TF.Resource p s) a where
    dbSnapshotIdentifier = TF.configuration . dbSnapshotIdentifier

class HasDbSubnetGroupName s a | s -> a where
    dbSubnetGroupName :: Functor f => (a -> f a) -> s -> f s

instance HasDbSubnetGroupName s a => HasDbSubnetGroupName (TF.Resource p s) a where
    dbSubnetGroupName = TF.configuration . dbSubnetGroupName

class HasDbUser s a | s -> a where
    dbUser :: Functor f => (a -> f a) -> s -> f s

instance HasDbUser s a => HasDbUser (TF.Resource p s) a where
    dbUser = TF.configuration . dbUser

class HasDeadLetterConfig s a | s -> a where
    deadLetterConfig :: Functor f => (a -> f a) -> s -> f s

instance HasDeadLetterConfig s a => HasDeadLetterConfig (TF.Resource p s) a where
    deadLetterConfig = TF.configuration . deadLetterConfig

class HasDefaultAction s a | s -> a where
    defaultAction :: Functor f => (a -> f a) -> s -> f s

instance HasDefaultAction s a => HasDefaultAction (TF.Resource p s) a where
    defaultAction = TF.configuration . defaultAction

class HasDefaultAvailabilityZone s a | s -> a where
    defaultAvailabilityZone :: Functor f => (a -> f a) -> s -> f s

instance HasDefaultAvailabilityZone s a => HasDefaultAvailabilityZone (TF.Resource p s) a where
    defaultAvailabilityZone = TF.configuration . defaultAvailabilityZone

class HasDefaultBranch s a | s -> a where
    defaultBranch :: Functor f => (a -> f a) -> s -> f s

instance HasDefaultBranch s a => HasDefaultBranch (TF.Resource p s) a where
    defaultBranch = TF.configuration . defaultBranch

class HasDefaultCacheBehavior s a | s -> a where
    defaultCacheBehavior :: Functor f => (a -> f a) -> s -> f s

instance HasDefaultCacheBehavior s a => HasDefaultCacheBehavior (TF.Resource p s) a where
    defaultCacheBehavior = TF.configuration . defaultCacheBehavior

class HasDefaultCooldown s a | s -> a where
    defaultCooldown :: Functor f => (a -> f a) -> s -> f s

instance HasDefaultCooldown s a => HasDefaultCooldown (TF.Resource p s) a where
    defaultCooldown = TF.configuration . defaultCooldown

class HasDefaultInstanceProfileArn s a | s -> a where
    defaultInstanceProfileArn :: Functor f => (a -> f a) -> s -> f s

instance HasDefaultInstanceProfileArn s a => HasDefaultInstanceProfileArn (TF.Resource p s) a where
    defaultInstanceProfileArn = TF.configuration . defaultInstanceProfileArn

class HasDefaultNetworkAclId s a | s -> a where
    defaultNetworkAclId :: Functor f => (a -> f a) -> s -> f s

instance HasDefaultNetworkAclId s a => HasDefaultNetworkAclId (TF.Resource p s) a where
    defaultNetworkAclId = TF.configuration . defaultNetworkAclId

class HasDefaultOs s a | s -> a where
    defaultOs :: Functor f => (a -> f a) -> s -> f s

instance HasDefaultOs s a => HasDefaultOs (TF.Resource p s) a where
    defaultOs = TF.configuration . defaultOs

class HasDefaultRedirectUri s a | s -> a where
    defaultRedirectUri :: Functor f => (a -> f a) -> s -> f s

instance HasDefaultRedirectUri s a => HasDefaultRedirectUri (TF.Resource p s) a where
    defaultRedirectUri = TF.configuration . defaultRedirectUri

class HasDefaultResult s a | s -> a where
    defaultResult :: Functor f => (a -> f a) -> s -> f s

instance HasDefaultResult s a => HasDefaultResult (TF.Resource p s) a where
    defaultResult = TF.configuration . defaultResult

class HasDefaultRootDeviceType s a | s -> a where
    defaultRootDeviceType :: Functor f => (a -> f a) -> s -> f s

instance HasDefaultRootDeviceType s a => HasDefaultRootDeviceType (TF.Resource p s) a where
    defaultRootDeviceType = TF.configuration . defaultRootDeviceType

class HasDefaultRootObject s a | s -> a where
    defaultRootObject :: Functor f => (a -> f a) -> s -> f s

instance HasDefaultRootObject s a => HasDefaultRootObject (TF.Resource p s) a where
    defaultRootObject = TF.configuration . defaultRootObject

class HasDefaultRouteTableId s a | s -> a where
    defaultRouteTableId :: Functor f => (a -> f a) -> s -> f s

instance HasDefaultRouteTableId s a => HasDefaultRouteTableId (TF.Resource p s) a where
    defaultRouteTableId = TF.configuration . defaultRouteTableId

class HasDefaultSshKeyName s a | s -> a where
    defaultSshKeyName :: Functor f => (a -> f a) -> s -> f s

instance HasDefaultSshKeyName s a => HasDefaultSshKeyName (TF.Resource p s) a where
    defaultSshKeyName = TF.configuration . defaultSshKeyName

class HasDefaultSubnetId s a | s -> a where
    defaultSubnetId :: Functor f => (a -> f a) -> s -> f s

instance HasDefaultSubnetId s a => HasDefaultSubnetId (TF.Resource p s) a where
    defaultSubnetId = TF.configuration . defaultSubnetId

class HasDefinition s a | s -> a where
    definition :: Functor f => (a -> f a) -> s -> f s

instance HasDefinition s a => HasDefinition (TF.Resource p s) a where
    definition = TF.configuration . definition

class HasDelaySeconds s a | s -> a where
    delaySeconds :: Functor f => (a -> f a) -> s -> f s

instance HasDelaySeconds s a => HasDelaySeconds (TF.Resource p s) a where
    delaySeconds = TF.configuration . delaySeconds

class HasDelegationSetId s a | s -> a where
    delegationSetId :: Functor f => (a -> f a) -> s -> f s

instance HasDelegationSetId s a => HasDelegationSetId (TF.Resource p s) a where
    delegationSetId = TF.configuration . delegationSetId

class HasDeletionWindowInDays s a | s -> a where
    deletionWindowInDays :: Functor f => (a -> f a) -> s -> f s

instance HasDeletionWindowInDays s a => HasDeletionWindowInDays (TF.Resource p s) a where
    deletionWindowInDays = TF.configuration . deletionWindowInDays

class HasDeliveryPolicy s a | s -> a where
    deliveryPolicy :: Functor f => (a -> f a) -> s -> f s

instance HasDeliveryPolicy s a => HasDeliveryPolicy (TF.Resource p s) a where
    deliveryPolicy = TF.configuration . deliveryPolicy

class HasDeploymentConfigName s a | s -> a where
    deploymentConfigName :: Functor f => (a -> f a) -> s -> f s

instance HasDeploymentConfigName s a => HasDeploymentConfigName (TF.Resource p s) a where
    deploymentConfigName = TF.configuration . deploymentConfigName

class HasDeploymentGroupName s a | s -> a where
    deploymentGroupName :: Functor f => (a -> f a) -> s -> f s

instance HasDeploymentGroupName s a => HasDeploymentGroupName (TF.Resource p s) a where
    deploymentGroupName = TF.configuration . deploymentGroupName

class HasDeploymentId s a | s -> a where
    deploymentId :: Functor f => (a -> f a) -> s -> f s

instance HasDeploymentId s a => HasDeploymentId (TF.Resource p s) a where
    deploymentId = TF.configuration . deploymentId

class HasDeploymentMaximumPercent s a | s -> a where
    deploymentMaximumPercent :: Functor f => (a -> f a) -> s -> f s

instance HasDeploymentMaximumPercent s a => HasDeploymentMaximumPercent (TF.Resource p s) a where
    deploymentMaximumPercent = TF.configuration . deploymentMaximumPercent

class HasDeploymentMinimumHealthyPercent s a | s -> a where
    deploymentMinimumHealthyPercent :: Functor f => (a -> f a) -> s -> f s

instance HasDeploymentMinimumHealthyPercent s a => HasDeploymentMinimumHealthyPercent (TF.Resource p s) a where
    deploymentMinimumHealthyPercent = TF.configuration . deploymentMinimumHealthyPercent

class HasDeploymentMode s a | s -> a where
    deploymentMode :: Functor f => (a -> f a) -> s -> f s

instance HasDeploymentMode s a => HasDeploymentMode (TF.Resource p s) a where
    deploymentMode = TF.configuration . deploymentMode

class HasDeploymentStyle s a | s -> a where
    deploymentStyle :: Functor f => (a -> f a) -> s -> f s

instance HasDeploymentStyle s a => HasDeploymentStyle (TF.Resource p s) a where
    deploymentStyle = TF.configuration . deploymentStyle

class HasDeregistrationDelay s a | s -> a where
    deregistrationDelay :: Functor f => (a -> f a) -> s -> f s

instance HasDeregistrationDelay s a => HasDeregistrationDelay (TF.Resource p s) a where
    deregistrationDelay = TF.configuration . deregistrationDelay

class HasDescription s a | s -> a where
    description :: Functor f => (a -> f a) -> s -> f s

instance HasDescription s a => HasDescription (TF.Resource p s) a where
    description = TF.configuration . description

class HasDesiredCapacity s a | s -> a where
    desiredCapacity :: Functor f => (a -> f a) -> s -> f s

instance HasDesiredCapacity s a => HasDesiredCapacity (TF.Resource p s) a where
    desiredCapacity = TF.configuration . desiredCapacity

class HasDesiredCount s a | s -> a where
    desiredCount :: Functor f => (a -> f a) -> s -> f s

instance HasDesiredCount s a => HasDesiredCount (TF.Resource p s) a where
    desiredCount = TF.configuration . desiredCount

class HasDestination s a | s -> a where
    destination :: Functor f => (a -> f a) -> s -> f s

instance HasDestination s a => HasDestination (TF.Resource p s) a where
    destination = TF.configuration . destination

class HasDestinationArn s a | s -> a where
    destinationArn :: Functor f => (a -> f a) -> s -> f s

instance HasDestinationArn s a => HasDestinationArn (TF.Resource p s) a where
    destinationArn = TF.configuration . destinationArn

class HasDestinationCidrBlock s a | s -> a where
    destinationCidrBlock :: Functor f => (a -> f a) -> s -> f s

instance HasDestinationCidrBlock s a => HasDestinationCidrBlock (TF.Resource p s) a where
    destinationCidrBlock = TF.configuration . destinationCidrBlock

class HasDestinationIpv6CidrBlock s a | s -> a where
    destinationIpv6CidrBlock :: Functor f => (a -> f a) -> s -> f s

instance HasDestinationIpv6CidrBlock s a => HasDestinationIpv6CidrBlock (TF.Resource p s) a where
    destinationIpv6CidrBlock = TF.configuration . destinationIpv6CidrBlock

class HasDestinationName s a | s -> a where
    destinationName :: Functor f => (a -> f a) -> s -> f s

instance HasDestinationName s a => HasDestinationName (TF.Resource p s) a where
    destinationName = TF.configuration . destinationName

class HasDetectorId s a | s -> a where
    detectorId :: Functor f => (a -> f a) -> s -> f s

instance HasDetectorId s a => HasDetectorId (TF.Resource p s) a where
    detectorId = TF.configuration . detectorId

class HasDeveloperProviderName s a | s -> a where
    developerProviderName :: Functor f => (a -> f a) -> s -> f s

instance HasDeveloperProviderName s a => HasDeveloperProviderName (TF.Resource p s) a where
    developerProviderName = TF.configuration . developerProviderName

class HasDeviceConfiguration s a | s -> a where
    deviceConfiguration :: Functor f => (a -> f a) -> s -> f s

instance HasDeviceConfiguration s a => HasDeviceConfiguration (TF.Resource p s) a where
    deviceConfiguration = TF.configuration . deviceConfiguration

class HasDeviceIndex s a | s -> a where
    deviceIndex :: Functor f => (a -> f a) -> s -> f s

instance HasDeviceIndex s a => HasDeviceIndex (TF.Resource p s) a where
    deviceIndex = TF.configuration . deviceIndex

class HasDeviceName s a | s -> a where
    deviceName :: Functor f => (a -> f a) -> s -> f s

instance HasDeviceName s a => HasDeviceName (TF.Resource p s) a where
    deviceName = TF.configuration . deviceName

class HasDhcpOptionsId s a | s -> a where
    dhcpOptionsId :: Functor f => (a -> f a) -> s -> f s

instance HasDhcpOptionsId s a => HasDhcpOptionsId (TF.Resource p s) a where
    dhcpOptionsId = TF.configuration . dhcpOptionsId

class HasDimensions s a | s -> a where
    dimensions :: Functor f => (a -> f a) -> s -> f s

instance HasDimensions s a => HasDimensions (TF.Resource p s) a where
    dimensions = TF.configuration . dimensions

class HasDisableApiTermination s a | s -> a where
    disableApiTermination :: Functor f => (a -> f a) -> s -> f s

instance HasDisableApiTermination s a => HasDisableApiTermination (TF.Resource p s) a where
    disableApiTermination = TF.configuration . disableApiTermination

class HasDisableRollback s a | s -> a where
    disableRollback :: Functor f => (a -> f a) -> s -> f s

instance HasDisableRollback s a => HasDisableRollback (TF.Resource p s) a where
    disableRollback = TF.configuration . disableRollback

class HasDisplayName s a | s -> a where
    displayName :: Functor f => (a -> f a) -> s -> f s

instance HasDisplayName s a => HasDisplayName (TF.Resource p s) a where
    displayName = TF.configuration . displayName

class HasDnsConfig s a | s -> a where
    dnsConfig :: Functor f => (a -> f a) -> s -> f s

instance HasDnsConfig s a => HasDnsConfig (TF.Resource p s) a where
    dnsConfig = TF.configuration . dnsConfig

class HasDocumentRoot s a | s -> a where
    documentRoot :: Functor f => (a -> f a) -> s -> f s

instance HasDocumentRoot s a => HasDocumentRoot (TF.Resource p s) a where
    documentRoot = TF.configuration . documentRoot

class HasDocumentType s a | s -> a where
    documentType :: Functor f => (a -> f a) -> s -> f s

instance HasDocumentType s a => HasDocumentType (TF.Resource p s) a where
    documentType = TF.configuration . documentType

class HasDocumentVersion s a | s -> a where
    documentVersion :: Functor f => (a -> f a) -> s -> f s

instance HasDocumentVersion s a => HasDocumentVersion (TF.Resource p s) a where
    documentVersion = TF.configuration . documentVersion

class HasDocumentationVersion s a | s -> a where
    documentationVersion :: Functor f => (a -> f a) -> s -> f s

instance HasDocumentationVersion s a => HasDocumentationVersion (TF.Resource p s) a where
    documentationVersion = TF.configuration . documentationVersion

class HasDomain s a | s -> a where
    domain :: Functor f => (a -> f a) -> s -> f s

instance HasDomain s a => HasDomain (TF.Resource p s) a where
    domain = TF.configuration . domain

class HasDomainName s a | s -> a where
    domainName :: Functor f => (a -> f a) -> s -> f s

instance HasDomainName s a => HasDomainName (TF.Resource p s) a where
    domainName = TF.configuration . domainName

class HasDomainNameServers s a | s -> a where
    domainNameServers :: Functor f => (a -> f a) -> s -> f s

instance HasDomainNameServers s a => HasDomainNameServers (TF.Resource p s) a where
    domainNameServers = TF.configuration . domainNameServers

class HasDomains s a | s -> a where
    domains :: Functor f => (a -> f a) -> s -> f s

instance HasDomains s a => HasDomains (TF.Resource p s) a where
    domains = TF.configuration . domains

class HasDrainElbOnShutdown s a | s -> a where
    drainElbOnShutdown :: Functor f => (a -> f a) -> s -> f s

instance HasDrainElbOnShutdown s a => HasDrainElbOnShutdown (TF.Resource p s) a where
    drainElbOnShutdown = TF.configuration . drainElbOnShutdown

class HasDuration s a | s -> a where
    duration :: Functor f => (a -> f a) -> s -> f s

instance HasDuration s a => HasDuration (TF.Resource p s) a where
    duration = TF.configuration . duration

class HasEbsBlockDevice s a | s -> a where
    ebsBlockDevice :: Functor f => (a -> f a) -> s -> f s

instance HasEbsBlockDevice s a => HasEbsBlockDevice (TF.Resource p s) a where
    ebsBlockDevice = TF.configuration . ebsBlockDevice

class HasEbsConfig s a | s -> a where
    ebsConfig :: Functor f => (a -> f a) -> s -> f s

instance HasEbsConfig s a => HasEbsConfig (TF.Resource p s) a where
    ebsConfig = TF.configuration . ebsConfig

class HasEbsOptimized s a | s -> a where
    ebsOptimized :: Functor f => (a -> f a) -> s -> f s

instance HasEbsOptimized s a => HasEbsOptimized (TF.Resource p s) a where
    ebsOptimized = TF.configuration . ebsOptimized

class HasEbsOptions s a | s -> a where
    ebsOptions :: Functor f => (a -> f a) -> s -> f s

instance HasEbsOptions s a => HasEbsOptions (TF.Resource p s) a where
    ebsOptions = TF.configuration . ebsOptions

class HasEbsRootVolumeSize s a | s -> a where
    ebsRootVolumeSize :: Functor f => (a -> f a) -> s -> f s

instance HasEbsRootVolumeSize s a => HasEbsRootVolumeSize (TF.Resource p s) a where
    ebsRootVolumeSize = TF.configuration . ebsRootVolumeSize

class HasEbsVolume s a | s -> a where
    ebsVolume :: Functor f => (a -> f a) -> s -> f s

instance HasEbsVolume s a => HasEbsVolume (TF.Resource p s) a where
    ebsVolume = TF.configuration . ebsVolume

class HasEc2Attributes s a | s -> a where
    ec2Attributes :: Functor f => (a -> f a) -> s -> f s

instance HasEc2Attributes s a => HasEc2Attributes (TF.Resource p s) a where
    ec2Attributes = TF.configuration . ec2Attributes

class HasEc2TagFilter s a | s -> a where
    ec2TagFilter :: Functor f => (a -> f a) -> s -> f s

instance HasEc2TagFilter s a => HasEc2TagFilter (TF.Resource p s) a where
    ec2TagFilter = TF.configuration . ec2TagFilter

class HasEcsTarget s a | s -> a where
    ecsTarget :: Functor f => (a -> f a) -> s -> f s

instance HasEcsTarget s a => HasEcsTarget (TF.Resource p s) a where
    ecsTarget = TF.configuration . ecsTarget

class HasEgress s a | s -> a where
    egress :: Functor f => (a -> f a) -> s -> f s

instance HasEgress s a => HasEgress (TF.Resource p s) a where
    egress = TF.configuration . egress

class HasEgressOnlyGatewayId s a | s -> a where
    egressOnlyGatewayId :: Functor f => (a -> f a) -> s -> f s

instance HasEgressOnlyGatewayId s a => HasEgressOnlyGatewayId (TF.Resource p s) a where
    egressOnlyGatewayId = TF.configuration . egressOnlyGatewayId

class HasElasticIp s a | s -> a where
    elasticIp :: Functor f => (a -> f a) -> s -> f s

instance HasElasticIp s a => HasElasticIp (TF.Resource p s) a where
    elasticIp = TF.configuration . elasticIp

class HasElasticLoadBalancer s a | s -> a where
    elasticLoadBalancer :: Functor f => (a -> f a) -> s -> f s

instance HasElasticLoadBalancer s a => HasElasticLoadBalancer (TF.Resource p s) a where
    elasticLoadBalancer = TF.configuration . elasticLoadBalancer

class HasElasticsearchVersion s a | s -> a where
    elasticsearchVersion :: Functor f => (a -> f a) -> s -> f s

instance HasElasticsearchVersion s a => HasElasticsearchVersion (TF.Resource p s) a where
    elasticsearchVersion = TF.configuration . elasticsearchVersion

class HasElb s a | s -> a where
    elb :: Functor f => (a -> f a) -> s -> f s

instance HasElb s a => HasElb (TF.Resource p s) a where
    elb = TF.configuration . elb

class HasEmail s a | s -> a where
    email :: Functor f => (a -> f a) -> s -> f s

instance HasEmail s a => HasEmail (TF.Resource p s) a where
    email = TF.configuration . email

class HasEmailConfiguration s a | s -> a where
    emailConfiguration :: Functor f => (a -> f a) -> s -> f s

instance HasEmailConfiguration s a => HasEmailConfiguration (TF.Resource p s) a where
    emailConfiguration = TF.configuration . emailConfiguration

class HasEmailVerificationMessage s a | s -> a where
    emailVerificationMessage :: Functor f => (a -> f a) -> s -> f s

instance HasEmailVerificationMessage s a => HasEmailVerificationMessage (TF.Resource p s) a where
    emailVerificationMessage = TF.configuration . emailVerificationMessage

class HasEmailVerificationSubject s a | s -> a where
    emailVerificationSubject :: Functor f => (a -> f a) -> s -> f s

instance HasEmailVerificationSubject s a => HasEmailVerificationSubject (TF.Resource p s) a where
    emailVerificationSubject = TF.configuration . emailVerificationSubject

class HasEnable s a | s -> a where
    enable :: Functor f => (a -> f a) -> s -> f s

instance HasEnable s a => HasEnable (TF.Resource p s) a where
    enable = TF.configuration . enable

class HasEnableClassiclink s a | s -> a where
    enableClassiclink :: Functor f => (a -> f a) -> s -> f s

instance HasEnableClassiclink s a => HasEnableClassiclink (TF.Resource p s) a where
    enableClassiclink = TF.configuration . enableClassiclink

class HasEnableClassiclinkDnsSupport s a | s -> a where
    enableClassiclinkDnsSupport :: Functor f => (a -> f a) -> s -> f s

instance HasEnableClassiclinkDnsSupport s a => HasEnableClassiclinkDnsSupport (TF.Resource p s) a where
    enableClassiclinkDnsSupport = TF.configuration . enableClassiclinkDnsSupport

class HasEnableDeletionProtection s a | s -> a where
    enableDeletionProtection :: Functor f => (a -> f a) -> s -> f s

instance HasEnableDeletionProtection s a => HasEnableDeletionProtection (TF.Resource p s) a where
    enableDeletionProtection = TF.configuration . enableDeletionProtection

class HasEnableDnsHostnames s a | s -> a where
    enableDnsHostnames :: Functor f => (a -> f a) -> s -> f s

instance HasEnableDnsHostnames s a => HasEnableDnsHostnames (TF.Resource p s) a where
    enableDnsHostnames = TF.configuration . enableDnsHostnames

class HasEnableDnsSupport s a | s -> a where
    enableDnsSupport :: Functor f => (a -> f a) -> s -> f s

instance HasEnableDnsSupport s a => HasEnableDnsSupport (TF.Resource p s) a where
    enableDnsSupport = TF.configuration . enableDnsSupport

class HasEnableKeyRotation s a | s -> a where
    enableKeyRotation :: Functor f => (a -> f a) -> s -> f s

instance HasEnableKeyRotation s a => HasEnableKeyRotation (TF.Resource p s) a where
    enableKeyRotation = TF.configuration . enableKeyRotation

class HasEnableLogFileValidation s a | s -> a where
    enableLogFileValidation :: Functor f => (a -> f a) -> s -> f s

instance HasEnableLogFileValidation s a => HasEnableLogFileValidation (TF.Resource p s) a where
    enableLogFileValidation = TF.configuration . enableLogFileValidation

class HasEnableLogging s a | s -> a where
    enableLogging :: Functor f => (a -> f a) -> s -> f s

instance HasEnableLogging s a => HasEnableLogging (TF.Resource p s) a where
    enableLogging = TF.configuration . enableLogging

class HasEnableMonitoring s a | s -> a where
    enableMonitoring :: Functor f => (a -> f a) -> s -> f s

instance HasEnableMonitoring s a => HasEnableMonitoring (TF.Resource p s) a where
    enableMonitoring = TF.configuration . enableMonitoring

class HasEnableSni s a | s -> a where
    enableSni :: Functor f => (a -> f a) -> s -> f s

instance HasEnableSni s a => HasEnableSni (TF.Resource p s) a where
    enableSni = TF.configuration . enableSni

class HasEnableSsl s a | s -> a where
    enableSsl :: Functor f => (a -> f a) -> s -> f s

instance HasEnableSsl s a => HasEnableSsl (TF.Resource p s) a where
    enableSsl = TF.configuration . enableSsl

class HasEnableSso s a | s -> a where
    enableSso :: Functor f => (a -> f a) -> s -> f s

instance HasEnableSso s a => HasEnableSso (TF.Resource p s) a where
    enableSso = TF.configuration . enableSso

class HasEnabled s a | s -> a where
    enabled :: Functor f => (a -> f a) -> s -> f s

instance HasEnabled s a => HasEnabled (TF.Resource p s) a where
    enabled = TF.configuration . enabled

class HasEnabledMetrics s a | s -> a where
    enabledMetrics :: Functor f => (a -> f a) -> s -> f s

instance HasEnabledMetrics s a => HasEnabledMetrics (TF.Resource p s) a where
    enabledMetrics = TF.configuration . enabledMetrics

class HasEncoding s a | s -> a where
    encoding :: Functor f => (a -> f a) -> s -> f s

instance HasEncoding s a => HasEncoding (TF.Resource p s) a where
    encoding = TF.configuration . encoding

class HasEncrypted s a | s -> a where
    encrypted :: Functor f => (a -> f a) -> s -> f s

instance HasEncrypted s a => HasEncrypted (TF.Resource p s) a where
    encrypted = TF.configuration . encrypted

class HasEncryptionKey s a | s -> a where
    encryptionKey :: Functor f => (a -> f a) -> s -> f s

instance HasEncryptionKey s a => HasEncryptionKey (TF.Resource p s) a where
    encryptionKey = TF.configuration . encryptionKey

class HasEncryptionType s a | s -> a where
    encryptionType :: Functor f => (a -> f a) -> s -> f s

instance HasEncryptionType s a => HasEncryptionType (TF.Resource p s) a where
    encryptionType = TF.configuration . encryptionType

class HasEndTime s a | s -> a where
    endTime :: Functor f => (a -> f a) -> s -> f s

instance HasEndTime s a => HasEndTime (TF.Resource p s) a where
    endTime = TF.configuration . endTime

class HasEndpoint s a | s -> a where
    endpoint :: Functor f => (a -> f a) -> s -> f s

instance HasEndpoint s a => HasEndpoint (TF.Resource p s) a where
    endpoint = TF.configuration . endpoint

class HasEndpointAutoConfirms s a | s -> a where
    endpointAutoConfirms :: Functor f => (a -> f a) -> s -> f s

instance HasEndpointAutoConfirms s a => HasEndpointAutoConfirms (TF.Resource p s) a where
    endpointAutoConfirms = TF.configuration . endpointAutoConfirms

class HasEndpointId s a | s -> a where
    endpointId :: Functor f => (a -> f a) -> s -> f s

instance HasEndpointId s a => HasEndpointId (TF.Resource p s) a where
    endpointId = TF.configuration . endpointId

class HasEndpointType s a | s -> a where
    endpointType :: Functor f => (a -> f a) -> s -> f s

instance HasEndpointType s a => HasEndpointType (TF.Resource p s) a where
    endpointType = TF.configuration . endpointType

class HasEngine s a | s -> a where
    engine :: Functor f => (a -> f a) -> s -> f s

instance HasEngine s a => HasEngine (TF.Resource p s) a where
    engine = TF.configuration . engine

class HasEngineName s a | s -> a where
    engineName :: Functor f => (a -> f a) -> s -> f s

instance HasEngineName s a => HasEngineName (TF.Resource p s) a where
    engineName = TF.configuration . engineName

class HasEngineType s a | s -> a where
    engineType :: Functor f => (a -> f a) -> s -> f s

instance HasEngineType s a => HasEngineType (TF.Resource p s) a where
    engineType = TF.configuration . engineType

class HasEngineVersion s a | s -> a where
    engineVersion :: Functor f => (a -> f a) -> s -> f s

instance HasEngineVersion s a => HasEngineVersion (TF.Resource p s) a where
    engineVersion = TF.configuration . engineVersion

class HasEnhancedVpcRouting s a | s -> a where
    enhancedVpcRouting :: Functor f => (a -> f a) -> s -> f s

instance HasEnhancedVpcRouting s a => HasEnhancedVpcRouting (TF.Resource p s) a where
    enhancedVpcRouting = TF.configuration . enhancedVpcRouting

class HasEniId s a | s -> a where
    eniId :: Functor f => (a -> f a) -> s -> f s

instance HasEniId s a => HasEniId (TF.Resource p s) a where
    eniId = TF.configuration . eniId

class HasEnvironment s a | s -> a where
    environment :: Functor f => (a -> f a) -> s -> f s

instance HasEnvironment s a => HasEnvironment (TF.Resource p s) a where
    environment = TF.configuration . environment

class HasEnvironmentId s a | s -> a where
    environmentId :: Functor f => (a -> f a) -> s -> f s

instance HasEnvironmentId s a => HasEnvironmentId (TF.Resource p s) a where
    environmentId = TF.configuration . environmentId

class HasEphemeralBlockDevice s a | s -> a where
    ephemeralBlockDevice :: Functor f => (a -> f a) -> s -> f s

instance HasEphemeralBlockDevice s a => HasEphemeralBlockDevice (TF.Resource p s) a where
    ephemeralBlockDevice = TF.configuration . ephemeralBlockDevice

class HasEtag s a | s -> a where
    etag :: Functor f => (a -> f a) -> s -> f s

instance HasEtag s a => HasEtag (TF.Resource p s) a where
    etag = TF.configuration . etag

class HasEvaluateLowSampleCountPercentiles s a | s -> a where
    evaluateLowSampleCountPercentiles :: Functor f => (a -> f a) -> s -> f s

instance HasEvaluateLowSampleCountPercentiles s a => HasEvaluateLowSampleCountPercentiles (TF.Resource p s) a where
    evaluateLowSampleCountPercentiles = TF.configuration . evaluateLowSampleCountPercentiles

class HasEvaluationPeriods s a | s -> a where
    evaluationPeriods :: Functor f => (a -> f a) -> s -> f s

instance HasEvaluationPeriods s a => HasEvaluationPeriods (TF.Resource p s) a where
    evaluationPeriods = TF.configuration . evaluationPeriods

class HasEventCategories s a | s -> a where
    eventCategories :: Functor f => (a -> f a) -> s -> f s

instance HasEventCategories s a => HasEventCategories (TF.Resource p s) a where
    eventCategories = TF.configuration . eventCategories

class HasEventPattern s a | s -> a where
    eventPattern :: Functor f => (a -> f a) -> s -> f s

instance HasEventPattern s a => HasEventPattern (TF.Resource p s) a where
    eventPattern = TF.configuration . eventPattern

class HasEventSourceArn s a | s -> a where
    eventSourceArn :: Functor f => (a -> f a) -> s -> f s

instance HasEventSourceArn s a => HasEventSourceArn (TF.Resource p s) a where
    eventSourceArn = TF.configuration . eventSourceArn

class HasEvents s a | s -> a where
    events :: Functor f => (a -> f a) -> s -> f s

instance HasEvents s a => HasEvents (TF.Resource p s) a where
    events = TF.configuration . events

class HasExcessCapacityTerminationPolicy s a | s -> a where
    excessCapacityTerminationPolicy :: Functor f => (a -> f a) -> s -> f s

instance HasExcessCapacityTerminationPolicy s a => HasExcessCapacityTerminationPolicy (TF.Resource p s) a where
    excessCapacityTerminationPolicy = TF.configuration . excessCapacityTerminationPolicy

class HasExpirationDate s a | s -> a where
    expirationDate :: Functor f => (a -> f a) -> s -> f s

instance HasExpirationDate s a => HasExpirationDate (TF.Resource p s) a where
    expirationDate = TF.configuration . expirationDate

class HasExplicitAuthFlows s a | s -> a where
    explicitAuthFlows :: Functor f => (a -> f a) -> s -> f s

instance HasExplicitAuthFlows s a => HasExplicitAuthFlows (TF.Resource p s) a where
    explicitAuthFlows = TF.configuration . explicitAuthFlows

class HasExtendedS3Configuration s a | s -> a where
    extendedS3Configuration :: Functor f => (a -> f a) -> s -> f s

instance HasExtendedS3Configuration s a => HasExtendedS3Configuration (TF.Resource p s) a where
    extendedS3Configuration = TF.configuration . extendedS3Configuration

class HasExtendedStatistic s a | s -> a where
    extendedStatistic :: Functor f => (a -> f a) -> s -> f s

instance HasExtendedStatistic s a => HasExtendedStatistic (TF.Resource p s) a where
    extendedStatistic = TF.configuration . extendedStatistic

class HasExtraConnectionAttributes s a | s -> a where
    extraConnectionAttributes :: Functor f => (a -> f a) -> s -> f s

instance HasExtraConnectionAttributes s a => HasExtraConnectionAttributes (TF.Resource p s) a where
    extraConnectionAttributes = TF.configuration . extraConnectionAttributes

class HasFailoverRoutingPolicy s a | s -> a where
    failoverRoutingPolicy :: Functor f => (a -> f a) -> s -> f s

instance HasFailoverRoutingPolicy s a => HasFailoverRoutingPolicy (TF.Resource p s) a where
    failoverRoutingPolicy = TF.configuration . failoverRoutingPolicy

class HasFailureThreshold s a | s -> a where
    failureThreshold :: Functor f => (a -> f a) -> s -> f s

instance HasFailureThreshold s a => HasFailureThreshold (TF.Resource p s) a where
    failureThreshold = TF.configuration . failureThreshold

class HasFamily' s a | s -> a where
    family' :: Functor f => (a -> f a) -> s -> f s

instance HasFamily' s a => HasFamily' (TF.Resource p s) a where
    family' = TF.configuration . family'

class HasFifoQueue s a | s -> a where
    fifoQueue :: Functor f => (a -> f a) -> s -> f s

instance HasFifoQueue s a => HasFifoQueue (TF.Resource p s) a where
    fifoQueue = TF.configuration . fifoQueue

class HasFileSystemId s a | s -> a where
    fileSystemId :: Functor f => (a -> f a) -> s -> f s

instance HasFileSystemId s a => HasFileSystemId (TF.Resource p s) a where
    fileSystemId = TF.configuration . fileSystemId

class HasFilename s a | s -> a where
    filename :: Functor f => (a -> f a) -> s -> f s

instance HasFilename s a => HasFilename (TF.Resource p s) a where
    filename = TF.configuration . filename

class HasFilterPattern s a | s -> a where
    filterPattern :: Functor f => (a -> f a) -> s -> f s

instance HasFilterPattern s a => HasFilterPattern (TF.Resource p s) a where
    filterPattern = TF.configuration . filterPattern

class HasFinalSnapshotIdentifier s a | s -> a where
    finalSnapshotIdentifier :: Functor f => (a -> f a) -> s -> f s

instance HasFinalSnapshotIdentifier s a => HasFinalSnapshotIdentifier (TF.Resource p s) a where
    finalSnapshotIdentifier = TF.configuration . finalSnapshotIdentifier

class HasForceDelete s a | s -> a where
    forceDelete :: Functor f => (a -> f a) -> s -> f s

instance HasForceDelete s a => HasForceDelete (TF.Resource p s) a where
    forceDelete = TF.configuration . forceDelete

class HasForceDestroy s a | s -> a where
    forceDestroy :: Functor f => (a -> f a) -> s -> f s

instance HasForceDestroy s a => HasForceDestroy (TF.Resource p s) a where
    forceDestroy = TF.configuration . forceDestroy

class HasForceDetach s a | s -> a where
    forceDetach :: Functor f => (a -> f a) -> s -> f s

instance HasForceDetach s a => HasForceDetach (TF.Resource p s) a where
    forceDetach = TF.configuration . forceDetach

class HasFqdn s a | s -> a where
    fqdn :: Functor f => (a -> f a) -> s -> f s

instance HasFqdn s a => HasFqdn (TF.Resource p s) a where
    fqdn = TF.configuration . fqdn

class HasFromPort s a | s -> a where
    fromPort :: Functor f => (a -> f a) -> s -> f s

instance HasFromPort s a => HasFromPort (TF.Resource p s) a where
    fromPort = TF.configuration . fromPort

class HasFunctionName s a | s -> a where
    functionName :: Functor f => (a -> f a) -> s -> f s

instance HasFunctionName s a => HasFunctionName (TF.Resource p s) a where
    functionName = TF.configuration . functionName

class HasFunctionVersion s a | s -> a where
    functionVersion :: Functor f => (a -> f a) -> s -> f s

instance HasFunctionVersion s a => HasFunctionVersion (TF.Resource p s) a where
    functionVersion = TF.configuration . functionVersion

class HasGatewayId s a | s -> a where
    gatewayId :: Functor f => (a -> f a) -> s -> f s

instance HasGatewayId s a => HasGatewayId (TF.Resource p s) a where
    gatewayId = TF.configuration . gatewayId

class HasGenerateSecret s a | s -> a where
    generateSecret :: Functor f => (a -> f a) -> s -> f s

instance HasGenerateSecret s a => HasGenerateSecret (TF.Resource p s) a where
    generateSecret = TF.configuration . generateSecret

class HasGeolocationRoutingPolicy s a | s -> a where
    geolocationRoutingPolicy :: Functor f => (a -> f a) -> s -> f s

instance HasGeolocationRoutingPolicy s a => HasGeolocationRoutingPolicy (TF.Resource p s) a where
    geolocationRoutingPolicy = TF.configuration . geolocationRoutingPolicy

class HasGlobalFilter s a | s -> a where
    globalFilter :: Functor f => (a -> f a) -> s -> f s

instance HasGlobalFilter s a => HasGlobalFilter (TF.Resource p s) a where
    globalFilter = TF.configuration . globalFilter

class HasGlobalSecondaryIndex s a | s -> a where
    globalSecondaryIndex :: Functor f => (a -> f a) -> s -> f s

instance HasGlobalSecondaryIndex s a => HasGlobalSecondaryIndex (TF.Resource p s) a where
    globalSecondaryIndex = TF.configuration . globalSecondaryIndex

class HasGroup s a | s -> a where
    group :: Functor f => (a -> f a) -> s -> f s

instance HasGroup s a => HasGroup (TF.Resource p s) a where
    group = TF.configuration . group

class HasGroupNames s a | s -> a where
    groupNames :: Functor f => (a -> f a) -> s -> f s

instance HasGroupNames s a => HasGroupNames (TF.Resource p s) a where
    groupNames = TF.configuration . groupNames

class HasGroups s a | s -> a where
    groups :: Functor f => (a -> f a) -> s -> f s

instance HasGroups s a => HasGroups (TF.Resource p s) a where
    groups = TF.configuration . groups

class HasHandler s a | s -> a where
    handler :: Functor f => (a -> f a) -> s -> f s

instance HasHandler s a => HasHandler (TF.Resource p s) a where
    handler = TF.configuration . handler

class HasHardExpiry s a | s -> a where
    hardExpiry :: Functor f => (a -> f a) -> s -> f s

instance HasHardExpiry s a => HasHardExpiry (TF.Resource p s) a where
    hardExpiry = TF.configuration . hardExpiry

class HasHashKey s a | s -> a where
    hashKey :: Functor f => (a -> f a) -> s -> f s

instance HasHashKey s a => HasHashKey (TF.Resource p s) a where
    hashKey = TF.configuration . hashKey

class HasHealthCheck s a | s -> a where
    healthCheck :: Functor f => (a -> f a) -> s -> f s

instance HasHealthCheck s a => HasHealthCheck (TF.Resource p s) a where
    healthCheck = TF.configuration . healthCheck

class HasHealthCheckConfig s a | s -> a where
    healthCheckConfig :: Functor f => (a -> f a) -> s -> f s

instance HasHealthCheckConfig s a => HasHealthCheckConfig (TF.Resource p s) a where
    healthCheckConfig = TF.configuration . healthCheckConfig

class HasHealthCheckGracePeriod s a | s -> a where
    healthCheckGracePeriod :: Functor f => (a -> f a) -> s -> f s

instance HasHealthCheckGracePeriod s a => HasHealthCheckGracePeriod (TF.Resource p s) a where
    healthCheckGracePeriod = TF.configuration . healthCheckGracePeriod

class HasHealthCheckGracePeriodSeconds s a | s -> a where
    healthCheckGracePeriodSeconds :: Functor f => (a -> f a) -> s -> f s

instance HasHealthCheckGracePeriodSeconds s a => HasHealthCheckGracePeriodSeconds (TF.Resource p s) a where
    healthCheckGracePeriodSeconds = TF.configuration . healthCheckGracePeriodSeconds

class HasHealthCheckId s a | s -> a where
    healthCheckId :: Functor f => (a -> f a) -> s -> f s

instance HasHealthCheckId s a => HasHealthCheckId (TF.Resource p s) a where
    healthCheckId = TF.configuration . healthCheckId

class HasHealthCheckType s a | s -> a where
    healthCheckType :: Functor f => (a -> f a) -> s -> f s

instance HasHealthCheckType s a => HasHealthCheckType (TF.Resource p s) a where
    healthCheckType = TF.configuration . healthCheckType

class HasHealthcheckMethod s a | s -> a where
    healthcheckMethod :: Functor f => (a -> f a) -> s -> f s

instance HasHealthcheckMethod s a => HasHealthcheckMethod (TF.Resource p s) a where
    healthcheckMethod = TF.configuration . healthcheckMethod

class HasHealthcheckUrl s a | s -> a where
    healthcheckUrl :: Functor f => (a -> f a) -> s -> f s

instance HasHealthcheckUrl s a => HasHealthcheckUrl (TF.Resource p s) a where
    healthcheckUrl = TF.configuration . healthcheckUrl

class HasHeartbeatTimeout s a | s -> a where
    heartbeatTimeout :: Functor f => (a -> f a) -> s -> f s

instance HasHeartbeatTimeout s a => HasHeartbeatTimeout (TF.Resource p s) a where
    heartbeatTimeout = TF.configuration . heartbeatTimeout

class HasHostInstanceType s a | s -> a where
    hostInstanceType :: Functor f => (a -> f a) -> s -> f s

instance HasHostInstanceType s a => HasHostInstanceType (TF.Resource p s) a where
    hostInstanceType = TF.configuration . hostInstanceType

class HasHostname s a | s -> a where
    hostname :: Functor f => (a -> f a) -> s -> f s

instance HasHostname s a => HasHostname (TF.Resource p s) a where
    hostname = TF.configuration . hostname

class HasHostnameTheme s a | s -> a where
    hostnameTheme :: Functor f => (a -> f a) -> s -> f s

instance HasHostnameTheme s a => HasHostnameTheme (TF.Resource p s) a where
    hostnameTheme = TF.configuration . hostnameTheme

class HasHtml s a | s -> a where
    html :: Functor f => (a -> f a) -> s -> f s

instance HasHtml s a => HasHtml (TF.Resource p s) a where
    html = TF.configuration . html

class HasHttpMethod s a | s -> a where
    httpMethod :: Functor f => (a -> f a) -> s -> f s

instance HasHttpMethod s a => HasHttpMethod (TF.Resource p s) a where
    httpMethod = TF.configuration . httpMethod

class HasHttpVersion s a | s -> a where
    httpVersion :: Functor f => (a -> f a) -> s -> f s

instance HasHttpVersion s a => HasHttpVersion (TF.Resource p s) a where
    httpVersion = TF.configuration . httpVersion

class HasIamDatabaseAuthenticationEnabled s a | s -> a where
    iamDatabaseAuthenticationEnabled :: Functor f => (a -> f a) -> s -> f s

instance HasIamDatabaseAuthenticationEnabled s a => HasIamDatabaseAuthenticationEnabled (TF.Resource p s) a where
    iamDatabaseAuthenticationEnabled = TF.configuration . iamDatabaseAuthenticationEnabled

class HasIamFleetRole s a | s -> a where
    iamFleetRole :: Functor f => (a -> f a) -> s -> f s

instance HasIamFleetRole s a => HasIamFleetRole (TF.Resource p s) a where
    iamFleetRole = TF.configuration . iamFleetRole

class HasIamInstanceProfile s a | s -> a where
    iamInstanceProfile :: Functor f => (a -> f a) -> s -> f s

instance HasIamInstanceProfile s a => HasIamInstanceProfile (TF.Resource p s) a where
    iamInstanceProfile = TF.configuration . iamInstanceProfile

class HasIamRole s a | s -> a where
    iamRole :: Functor f => (a -> f a) -> s -> f s

instance HasIamRole s a => HasIamRole (TF.Resource p s) a where
    iamRole = TF.configuration . iamRole

class HasIamRoleArn s a | s -> a where
    iamRoleArn :: Functor f => (a -> f a) -> s -> f s

instance HasIamRoleArn s a => HasIamRoleArn (TF.Resource p s) a where
    iamRoleArn = TF.configuration . iamRoleArn

class HasIamRoles s a | s -> a where
    iamRoles :: Functor f => (a -> f a) -> s -> f s

instance HasIamRoles s a => HasIamRoles (TF.Resource p s) a where
    iamRoles = TF.configuration . iamRoles

class HasIcmpCode s a | s -> a where
    icmpCode :: Functor f => (a -> f a) -> s -> f s

instance HasIcmpCode s a => HasIcmpCode (TF.Resource p s) a where
    icmpCode = TF.configuration . icmpCode

class HasIcmpType s a | s -> a where
    icmpType :: Functor f => (a -> f a) -> s -> f s

instance HasIcmpType s a => HasIcmpType (TF.Resource p s) a where
    icmpType = TF.configuration . icmpType

class HasIdentifier s a | s -> a where
    identifier :: Functor f => (a -> f a) -> s -> f s

instance HasIdentifier s a => HasIdentifier (TF.Resource p s) a where
    identifier = TF.configuration . identifier

class HasIdentifierPrefix s a | s -> a where
    identifierPrefix :: Functor f => (a -> f a) -> s -> f s

instance HasIdentifierPrefix s a => HasIdentifierPrefix (TF.Resource p s) a where
    identifierPrefix = TF.configuration . identifierPrefix

class HasIdentityPoolId s a | s -> a where
    identityPoolId :: Functor f => (a -> f a) -> s -> f s

instance HasIdentityPoolId s a => HasIdentityPoolId (TF.Resource p s) a where
    identityPoolId = TF.configuration . identityPoolId

class HasIdentityPoolName s a | s -> a where
    identityPoolName :: Functor f => (a -> f a) -> s -> f s

instance HasIdentityPoolName s a => HasIdentityPoolName (TF.Resource p s) a where
    identityPoolName = TF.configuration . identityPoolName

class HasIdentitySource s a | s -> a where
    identitySource :: Functor f => (a -> f a) -> s -> f s

instance HasIdentitySource s a => HasIdentitySource (TF.Resource p s) a where
    identitySource = TF.configuration . identitySource

class HasIdentityValidationExpression s a | s -> a where
    identityValidationExpression :: Functor f => (a -> f a) -> s -> f s

instance HasIdentityValidationExpression s a => HasIdentityValidationExpression (TF.Resource p s) a where
    identityValidationExpression = TF.configuration . identityValidationExpression

class HasIdleTimeout s a | s -> a where
    idleTimeout :: Functor f => (a -> f a) -> s -> f s

instance HasIdleTimeout s a => HasIdleTimeout (TF.Resource p s) a where
    idleTimeout = TF.configuration . idleTimeout

class HasImageId s a | s -> a where
    imageId :: Functor f => (a -> f a) -> s -> f s

instance HasImageId s a => HasImageId (TF.Resource p s) a where
    imageId = TF.configuration . imageId

class HasIncludeGlobalServiceEvents s a | s -> a where
    includeGlobalServiceEvents :: Functor f => (a -> f a) -> s -> f s

instance HasIncludeGlobalServiceEvents s a => HasIncludeGlobalServiceEvents (TF.Resource p s) a where
    includeGlobalServiceEvents = TF.configuration . includeGlobalServiceEvents

class HasIngress s a | s -> a where
    ingress :: Functor f => (a -> f a) -> s -> f s

instance HasIngress s a => HasIngress (TF.Resource p s) a where
    ingress = TF.configuration . ingress

class HasInitialLifecycleHook s a | s -> a where
    initialLifecycleHook :: Functor f => (a -> f a) -> s -> f s

instance HasInitialLifecycleHook s a => HasInitialLifecycleHook (TF.Resource p s) a where
    initialLifecycleHook = TF.configuration . initialLifecycleHook

class HasInput s a | s -> a where
    input :: Functor f => (a -> f a) -> s -> f s

instance HasInput s a => HasInput (TF.Resource p s) a where
    input = TF.configuration . input

class HasInputBucket s a | s -> a where
    inputBucket :: Functor f => (a -> f a) -> s -> f s

instance HasInputBucket s a => HasInputBucket (TF.Resource p s) a where
    inputBucket = TF.configuration . inputBucket

class HasInputParameters s a | s -> a where
    inputParameters :: Functor f => (a -> f a) -> s -> f s

instance HasInputParameters s a => HasInputParameters (TF.Resource p s) a where
    inputParameters = TF.configuration . inputParameters

class HasInputPath s a | s -> a where
    inputPath :: Functor f => (a -> f a) -> s -> f s

instance HasInputPath s a => HasInputPath (TF.Resource p s) a where
    inputPath = TF.configuration . inputPath

class HasInputTransformer s a | s -> a where
    inputTransformer :: Functor f => (a -> f a) -> s -> f s

instance HasInputTransformer s a => HasInputTransformer (TF.Resource p s) a where
    inputTransformer = TF.configuration . inputTransformer

class HasInstallUpdatesOnBoot s a | s -> a where
    installUpdatesOnBoot :: Functor f => (a -> f a) -> s -> f s

instance HasInstallUpdatesOnBoot s a => HasInstallUpdatesOnBoot (TF.Resource p s) a where
    installUpdatesOnBoot = TF.configuration . installUpdatesOnBoot

class HasInstance' s a | s -> a where
    instance' :: Functor f => (a -> f a) -> s -> f s

instance HasInstance' s a => HasInstance' (TF.Resource p s) a where
    instance' = TF.configuration . instance'

class HasInstanceClass s a | s -> a where
    instanceClass :: Functor f => (a -> f a) -> s -> f s

instance HasInstanceClass s a => HasInstanceClass (TF.Resource p s) a where
    instanceClass = TF.configuration . instanceClass

class HasInstanceCount s a | s -> a where
    instanceCount :: Functor f => (a -> f a) -> s -> f s

instance HasInstanceCount s a => HasInstanceCount (TF.Resource p s) a where
    instanceCount = TF.configuration . instanceCount

class HasInstanceGroup s a | s -> a where
    instanceGroup :: Functor f => (a -> f a) -> s -> f s

instance HasInstanceGroup s a => HasInstanceGroup (TF.Resource p s) a where
    instanceGroup = TF.configuration . instanceGroup

class HasInstanceId s a | s -> a where
    instanceId :: Functor f => (a -> f a) -> s -> f s

instance HasInstanceId s a => HasInstanceId (TF.Resource p s) a where
    instanceId = TF.configuration . instanceId

class HasInstanceInitiatedShutdownBehavior s a | s -> a where
    instanceInitiatedShutdownBehavior :: Functor f => (a -> f a) -> s -> f s

instance HasInstanceInitiatedShutdownBehavior s a => HasInstanceInitiatedShutdownBehavior (TF.Resource p s) a where
    instanceInitiatedShutdownBehavior = TF.configuration . instanceInitiatedShutdownBehavior

class HasInstanceInterruptionBehavior s a | s -> a where
    instanceInterruptionBehavior :: Functor f => (a -> f a) -> s -> f s

instance HasInstanceInterruptionBehavior s a => HasInstanceInterruptionBehavior (TF.Resource p s) a where
    instanceInterruptionBehavior = TF.configuration . instanceInterruptionBehavior

class HasInstanceName s a | s -> a where
    instanceName :: Functor f => (a -> f a) -> s -> f s

instance HasInstanceName s a => HasInstanceName (TF.Resource p s) a where
    instanceName = TF.configuration . instanceName

class HasInstancePort s a | s -> a where
    instancePort :: Functor f => (a -> f a) -> s -> f s

instance HasInstancePort s a => HasInstancePort (TF.Resource p s) a where
    instancePort = TF.configuration . instancePort

class HasInstancePorts s a | s -> a where
    instancePorts :: Functor f => (a -> f a) -> s -> f s

instance HasInstancePorts s a => HasInstancePorts (TF.Resource p s) a where
    instancePorts = TF.configuration . instancePorts

class HasInstanceShutdownTimeout s a | s -> a where
    instanceShutdownTimeout :: Functor f => (a -> f a) -> s -> f s

instance HasInstanceShutdownTimeout s a => HasInstanceShutdownTimeout (TF.Resource p s) a where
    instanceShutdownTimeout = TF.configuration . instanceShutdownTimeout

class HasInstanceTenancy s a | s -> a where
    instanceTenancy :: Functor f => (a -> f a) -> s -> f s

instance HasInstanceTenancy s a => HasInstanceTenancy (TF.Resource p s) a where
    instanceTenancy = TF.configuration . instanceTenancy

class HasInstanceType s a | s -> a where
    instanceType :: Functor f => (a -> f a) -> s -> f s

instance HasInstanceType s a => HasInstanceType (TF.Resource p s) a where
    instanceType = TF.configuration . instanceType

class HasInstances s a | s -> a where
    instances :: Functor f => (a -> f a) -> s -> f s

instance HasInstances s a => HasInstances (TF.Resource p s) a where
    instances = TF.configuration . instances

class HasInsufficientDataActions s a | s -> a where
    insufficientDataActions :: Functor f => (a -> f a) -> s -> f s

instance HasInsufficientDataActions s a => HasInsufficientDataActions (TF.Resource p s) a where
    insufficientDataActions = TF.configuration . insufficientDataActions

class HasInsufficientDataHealthStatus s a | s -> a where
    insufficientDataHealthStatus :: Functor f => (a -> f a) -> s -> f s

instance HasInsufficientDataHealthStatus s a => HasInsufficientDataHealthStatus (TF.Resource p s) a where
    insufficientDataHealthStatus = TF.configuration . insufficientDataHealthStatus

class HasIntegrationHttpMethod s a | s -> a where
    integrationHttpMethod :: Functor f => (a -> f a) -> s -> f s

instance HasIntegrationHttpMethod s a => HasIntegrationHttpMethod (TF.Resource p s) a where
    integrationHttpMethod = TF.configuration . integrationHttpMethod

class HasInternal s a | s -> a where
    internal :: Functor f => (a -> f a) -> s -> f s

instance HasInternal s a => HasInternal (TF.Resource p s) a where
    internal = TF.configuration . internal

class HasInvertHealthcheck s a | s -> a where
    invertHealthcheck :: Functor f => (a -> f a) -> s -> f s

instance HasInvertHealthcheck s a => HasInvertHealthcheck (TF.Resource p s) a where
    invertHealthcheck = TF.configuration . invertHealthcheck

class HasIops s a | s -> a where
    iops :: Functor f => (a -> f a) -> s -> f s

instance HasIops s a => HasIops (TF.Resource p s) a where
    iops = TF.configuration . iops

class HasIpAddress s a | s -> a where
    ipAddress :: Functor f => (a -> f a) -> s -> f s

instance HasIpAddress s a => HasIpAddress (TF.Resource p s) a where
    ipAddress = TF.configuration . ipAddress

class HasIpAddressType s a | s -> a where
    ipAddressType :: Functor f => (a -> f a) -> s -> f s

instance HasIpAddressType s a => HasIpAddressType (TF.Resource p s) a where
    ipAddressType = TF.configuration . ipAddressType

class HasIpSetDescriptor s a | s -> a where
    ipSetDescriptor :: Functor f => (a -> f a) -> s -> f s

instance HasIpSetDescriptor s a => HasIpSetDescriptor (TF.Resource p s) a where
    ipSetDescriptor = TF.configuration . ipSetDescriptor

class HasIpSetDescriptors s a | s -> a where
    ipSetDescriptors :: Functor f => (a -> f a) -> s -> f s

instance HasIpSetDescriptors s a => HasIpSetDescriptors (TF.Resource p s) a where
    ipSetDescriptors = TF.configuration . ipSetDescriptors

class HasIpv6AddressCount s a | s -> a where
    ipv6AddressCount :: Functor f => (a -> f a) -> s -> f s

instance HasIpv6AddressCount s a => HasIpv6AddressCount (TF.Resource p s) a where
    ipv6AddressCount = TF.configuration . ipv6AddressCount

class HasIpv6Addresses s a | s -> a where
    ipv6Addresses :: Functor f => (a -> f a) -> s -> f s

instance HasIpv6Addresses s a => HasIpv6Addresses (TF.Resource p s) a where
    ipv6Addresses = TF.configuration . ipv6Addresses

class HasIpv6CidrBlock s a | s -> a where
    ipv6CidrBlock :: Functor f => (a -> f a) -> s -> f s

instance HasIpv6CidrBlock s a => HasIpv6CidrBlock (TF.Resource p s) a where
    ipv6CidrBlock = TF.configuration . ipv6CidrBlock

class HasIpv6CidrBlocks s a | s -> a where
    ipv6CidrBlocks :: Functor f => (a -> f a) -> s -> f s

instance HasIpv6CidrBlocks s a => HasIpv6CidrBlocks (TF.Resource p s) a where
    ipv6CidrBlocks = TF.configuration . ipv6CidrBlocks

class HasIsEnabled s a | s -> a where
    isEnabled :: Functor f => (a -> f a) -> s -> f s

instance HasIsEnabled s a => HasIsEnabled (TF.Resource p s) a where
    isEnabled = TF.configuration . isEnabled

class HasIsIpv6Enabled s a | s -> a where
    isIpv6Enabled :: Functor f => (a -> f a) -> s -> f s

instance HasIsIpv6Enabled s a => HasIsIpv6Enabled (TF.Resource p s) a where
    isIpv6Enabled = TF.configuration . isIpv6Enabled

class HasIsMultiRegionTrail s a | s -> a where
    isMultiRegionTrail :: Functor f => (a -> f a) -> s -> f s

instance HasIsMultiRegionTrail s a => HasIsMultiRegionTrail (TF.Resource p s) a where
    isMultiRegionTrail = TF.configuration . isMultiRegionTrail

class HasJvmOptions s a | s -> a where
    jvmOptions :: Functor f => (a -> f a) -> s -> f s

instance HasJvmOptions s a => HasJvmOptions (TF.Resource p s) a where
    jvmOptions = TF.configuration . jvmOptions

class HasJvmType s a | s -> a where
    jvmType :: Functor f => (a -> f a) -> s -> f s

instance HasJvmType s a => HasJvmType (TF.Resource p s) a where
    jvmType = TF.configuration . jvmType

class HasJvmVersion s a | s -> a where
    jvmVersion :: Functor f => (a -> f a) -> s -> f s

instance HasJvmVersion s a => HasJvmVersion (TF.Resource p s) a where
    jvmVersion = TF.configuration . jvmVersion

class HasKeepJobFlowAliveWhenNoSteps s a | s -> a where
    keepJobFlowAliveWhenNoSteps :: Functor f => (a -> f a) -> s -> f s

instance HasKeepJobFlowAliveWhenNoSteps s a => HasKeepJobFlowAliveWhenNoSteps (TF.Resource p s) a where
    keepJobFlowAliveWhenNoSteps = TF.configuration . keepJobFlowAliveWhenNoSteps

class HasKey s a | s -> a where
    key :: Functor f => (a -> f a) -> s -> f s

instance HasKey s a => HasKey (TF.Resource p s) a where
    key = TF.configuration . key

class HasKeyId s a | s -> a where
    keyId :: Functor f => (a -> f a) -> s -> f s

instance HasKeyId s a => HasKeyId (TF.Resource p s) a where
    keyId = TF.configuration . keyId

class HasKeyName s a | s -> a where
    keyName :: Functor f => (a -> f a) -> s -> f s

instance HasKeyName s a => HasKeyName (TF.Resource p s) a where
    keyName = TF.configuration . keyName

class HasKeyNamePrefix s a | s -> a where
    keyNamePrefix :: Functor f => (a -> f a) -> s -> f s

instance HasKeyNamePrefix s a => HasKeyNamePrefix (TF.Resource p s) a where
    keyNamePrefix = TF.configuration . keyNamePrefix

class HasKeyPairName s a | s -> a where
    keyPairName :: Functor f => (a -> f a) -> s -> f s

instance HasKeyPairName s a => HasKeyPairName (TF.Resource p s) a where
    keyPairName = TF.configuration . keyPairName

class HasKeyType s a | s -> a where
    keyType :: Functor f => (a -> f a) -> s -> f s

instance HasKeyType s a => HasKeyType (TF.Resource p s) a where
    keyType = TF.configuration . keyType

class HasKeyUsage s a | s -> a where
    keyUsage :: Functor f => (a -> f a) -> s -> f s

instance HasKeyUsage s a => HasKeyUsage (TF.Resource p s) a where
    keyUsage = TF.configuration . keyUsage

class HasKinesisDestination s a | s -> a where
    kinesisDestination :: Functor f => (a -> f a) -> s -> f s

instance HasKinesisDestination s a => HasKinesisDestination (TF.Resource p s) a where
    kinesisDestination = TF.configuration . kinesisDestination

class HasKinesisSourceConfiguration s a | s -> a where
    kinesisSourceConfiguration :: Functor f => (a -> f a) -> s -> f s

instance HasKinesisSourceConfiguration s a => HasKinesisSourceConfiguration (TF.Resource p s) a where
    kinesisSourceConfiguration = TF.configuration . kinesisSourceConfiguration

class HasKmsDataKeyReusePeriodSeconds s a | s -> a where
    kmsDataKeyReusePeriodSeconds :: Functor f => (a -> f a) -> s -> f s

instance HasKmsDataKeyReusePeriodSeconds s a => HasKmsDataKeyReusePeriodSeconds (TF.Resource p s) a where
    kmsDataKeyReusePeriodSeconds = TF.configuration . kmsDataKeyReusePeriodSeconds

class HasKmsKeyArn s a | s -> a where
    kmsKeyArn :: Functor f => (a -> f a) -> s -> f s

instance HasKmsKeyArn s a => HasKmsKeyArn (TF.Resource p s) a where
    kmsKeyArn = TF.configuration . kmsKeyArn

class HasKmsKeyId s a | s -> a where
    kmsKeyId :: Functor f => (a -> f a) -> s -> f s

instance HasKmsKeyId s a => HasKmsKeyId (TF.Resource p s) a where
    kmsKeyId = TF.configuration . kmsKeyId

class HasKmsMasterKeyId s a | s -> a where
    kmsMasterKeyId :: Functor f => (a -> f a) -> s -> f s

instance HasKmsMasterKeyId s a => HasKmsMasterKeyId (TF.Resource p s) a where
    kmsMasterKeyId = TF.configuration . kmsMasterKeyId

class HasLagId s a | s -> a where
    lagId :: Functor f => (a -> f a) -> s -> f s

instance HasLagId s a => HasLagId (TF.Resource p s) a where
    lagId = TF.configuration . lagId

class HasLambdaAction s a | s -> a where
    lambdaAction :: Functor f => (a -> f a) -> s -> f s

instance HasLambdaAction s a => HasLambdaAction (TF.Resource p s) a where
    lambdaAction = TF.configuration . lambdaAction

class HasLambdaConfig s a | s -> a where
    lambdaConfig :: Functor f => (a -> f a) -> s -> f s

instance HasLambdaConfig s a => HasLambdaConfig (TF.Resource p s) a where
    lambdaConfig = TF.configuration . lambdaConfig

class HasLambdaFunction s a | s -> a where
    lambdaFunction :: Functor f => (a -> f a) -> s -> f s

instance HasLambdaFunction s a => HasLambdaFunction (TF.Resource p s) a where
    lambdaFunction = TF.configuration . lambdaFunction

class HasLatencyRoutingPolicy s a | s -> a where
    latencyRoutingPolicy :: Functor f => (a -> f a) -> s -> f s

instance HasLatencyRoutingPolicy s a => HasLatencyRoutingPolicy (TF.Resource p s) a where
    latencyRoutingPolicy = TF.configuration . latencyRoutingPolicy

class HasLaunchConfiguration s a | s -> a where
    launchConfiguration :: Functor f => (a -> f a) -> s -> f s

instance HasLaunchConfiguration s a => HasLaunchConfiguration (TF.Resource p s) a where
    launchConfiguration = TF.configuration . launchConfiguration

class HasLaunchGroup s a | s -> a where
    launchGroup :: Functor f => (a -> f a) -> s -> f s

instance HasLaunchGroup s a => HasLaunchGroup (TF.Resource p s) a where
    launchGroup = TF.configuration . launchGroup

class HasLaunchSpecification s a | s -> a where
    launchSpecification :: Functor f => (a -> f a) -> s -> f s

instance HasLaunchSpecification s a => HasLaunchSpecification (TF.Resource p s) a where
    launchSpecification = TF.configuration . launchSpecification

class HasLaunchType s a | s -> a where
    launchType :: Functor f => (a -> f a) -> s -> f s

instance HasLaunchType s a => HasLaunchType (TF.Resource p s) a where
    launchType = TF.configuration . launchType

class HasLayerIds s a | s -> a where
    layerIds :: Functor f => (a -> f a) -> s -> f s

instance HasLayerIds s a => HasLayerIds (TF.Resource p s) a where
    layerIds = TF.configuration . layerIds

class HasLbPort s a | s -> a where
    lbPort :: Functor f => (a -> f a) -> s -> f s

instance HasLbPort s a => HasLbPort (TF.Resource p s) a where
    lbPort = TF.configuration . lbPort

class HasLevel s a | s -> a where
    level :: Functor f => (a -> f a) -> s -> f s

instance HasLevel s a => HasLevel (TF.Resource p s) a where
    level = TF.configuration . level

class HasLicenseModel s a | s -> a where
    licenseModel :: Functor f => (a -> f a) -> s -> f s

instance HasLicenseModel s a => HasLicenseModel (TF.Resource p s) a where
    licenseModel = TF.configuration . licenseModel

class HasLifecycleRule s a | s -> a where
    lifecycleRule :: Functor f => (a -> f a) -> s -> f s

instance HasLifecycleRule s a => HasLifecycleRule (TF.Resource p s) a where
    lifecycleRule = TF.configuration . lifecycleRule

class HasLifecycleTransition s a | s -> a where
    lifecycleTransition :: Functor f => (a -> f a) -> s -> f s

instance HasLifecycleTransition s a => HasLifecycleTransition (TF.Resource p s) a where
    lifecycleTransition = TF.configuration . lifecycleTransition

class HasListener s a | s -> a where
    listener :: Functor f => (a -> f a) -> s -> f s

instance HasListener s a => HasListener (TF.Resource p s) a where
    listener = TF.configuration . listener

class HasListenerArn s a | s -> a where
    listenerArn :: Functor f => (a -> f a) -> s -> f s

instance HasListenerArn s a => HasListenerArn (TF.Resource p s) a where
    listenerArn = TF.configuration . listenerArn

class HasLoadBalancer s a | s -> a where
    loadBalancer :: Functor f => (a -> f a) -> s -> f s

instance HasLoadBalancer s a => HasLoadBalancer (TF.Resource p s) a where
    loadBalancer = TF.configuration . loadBalancer

class HasLoadBalancerArn s a | s -> a where
    loadBalancerArn :: Functor f => (a -> f a) -> s -> f s

instance HasLoadBalancerArn s a => HasLoadBalancerArn (TF.Resource p s) a where
    loadBalancerArn = TF.configuration . loadBalancerArn

class HasLoadBalancerInfo s a | s -> a where
    loadBalancerInfo :: Functor f => (a -> f a) -> s -> f s

instance HasLoadBalancerInfo s a => HasLoadBalancerInfo (TF.Resource p s) a where
    loadBalancerInfo = TF.configuration . loadBalancerInfo

class HasLoadBalancerName s a | s -> a where
    loadBalancerName :: Functor f => (a -> f a) -> s -> f s

instance HasLoadBalancerName s a => HasLoadBalancerName (TF.Resource p s) a where
    loadBalancerName = TF.configuration . loadBalancerName

class HasLoadBalancerPort s a | s -> a where
    loadBalancerPort :: Functor f => (a -> f a) -> s -> f s

instance HasLoadBalancerPort s a => HasLoadBalancerPort (TF.Resource p s) a where
    loadBalancerPort = TF.configuration . loadBalancerPort

class HasLoadBalancerType s a | s -> a where
    loadBalancerType :: Functor f => (a -> f a) -> s -> f s

instance HasLoadBalancerType s a => HasLoadBalancerType (TF.Resource p s) a where
    loadBalancerType = TF.configuration . loadBalancerType

class HasLoadBalancers s a | s -> a where
    loadBalancers :: Functor f => (a -> f a) -> s -> f s

instance HasLoadBalancers s a => HasLoadBalancers (TF.Resource p s) a where
    loadBalancers = TF.configuration . loadBalancers

class HasLocalSecondaryIndex s a | s -> a where
    localSecondaryIndex :: Functor f => (a -> f a) -> s -> f s

instance HasLocalSecondaryIndex s a => HasLocalSecondaryIndex (TF.Resource p s) a where
    localSecondaryIndex = TF.configuration . localSecondaryIndex

class HasLocation s a | s -> a where
    location :: Functor f => (a -> f a) -> s -> f s

instance HasLocation s a => HasLocation (TF.Resource p s) a where
    location = TF.configuration . location

class HasLocationUri s a | s -> a where
    locationUri :: Functor f => (a -> f a) -> s -> f s

instance HasLocationUri s a => HasLocationUri (TF.Resource p s) a where
    locationUri = TF.configuration . locationUri

class HasLogGroupName s a | s -> a where
    logGroupName :: Functor f => (a -> f a) -> s -> f s

instance HasLogGroupName s a => HasLogGroupName (TF.Resource p s) a where
    logGroupName = TF.configuration . logGroupName

class HasLogPublishingOptions s a | s -> a where
    logPublishingOptions :: Functor f => (a -> f a) -> s -> f s

instance HasLogPublishingOptions s a => HasLogPublishingOptions (TF.Resource p s) a where
    logPublishingOptions = TF.configuration . logPublishingOptions

class HasLogUri s a | s -> a where
    logUri :: Functor f => (a -> f a) -> s -> f s

instance HasLogUri s a => HasLogUri (TF.Resource p s) a where
    logUri = TF.configuration . logUri

class HasLogging s a | s -> a where
    logging :: Functor f => (a -> f a) -> s -> f s

instance HasLogging s a => HasLogging (TF.Resource p s) a where
    logging = TF.configuration . logging

class HasLoggingConfig s a | s -> a where
    loggingConfig :: Functor f => (a -> f a) -> s -> f s

instance HasLoggingConfig s a => HasLoggingConfig (TF.Resource p s) a where
    loggingConfig = TF.configuration . loggingConfig

class HasLoggingInfo s a | s -> a where
    loggingInfo :: Functor f => (a -> f a) -> s -> f s

instance HasLoggingInfo s a => HasLoggingInfo (TF.Resource p s) a where
    loggingInfo = TF.configuration . loggingInfo

class HasLogoutUrls s a | s -> a where
    logoutUrls :: Functor f => (a -> f a) -> s -> f s

instance HasLogoutUrls s a => HasLogoutUrls (TF.Resource p s) a where
    logoutUrls = TF.configuration . logoutUrls

class HasMaintenanceWindow s a | s -> a where
    maintenanceWindow :: Functor f => (a -> f a) -> s -> f s

instance HasMaintenanceWindow s a => HasMaintenanceWindow (TF.Resource p s) a where
    maintenanceWindow = TF.configuration . maintenanceWindow

class HasMaintenanceWindowStartTime s a | s -> a where
    maintenanceWindowStartTime :: Functor f => (a -> f a) -> s -> f s

instance HasMaintenanceWindowStartTime s a => HasMaintenanceWindowStartTime (TF.Resource p s) a where
    maintenanceWindowStartTime = TF.configuration . maintenanceWindowStartTime

class HasMajorEngineVersion s a | s -> a where
    majorEngineVersion :: Functor f => (a -> f a) -> s -> f s

instance HasMajorEngineVersion s a => HasMajorEngineVersion (TF.Resource p s) a where
    majorEngineVersion = TF.configuration . majorEngineVersion

class HasManageBerkshelf s a | s -> a where
    manageBerkshelf :: Functor f => (a -> f a) -> s -> f s

instance HasManageBerkshelf s a => HasManageBerkshelf (TF.Resource p s) a where
    manageBerkshelf = TF.configuration . manageBerkshelf

class HasManageBundler s a | s -> a where
    manageBundler :: Functor f => (a -> f a) -> s -> f s

instance HasManageBundler s a => HasManageBundler (TF.Resource p s) a where
    manageBundler = TF.configuration . manageBundler

class HasMapPublicIpOnLaunch s a | s -> a where
    mapPublicIpOnLaunch :: Functor f => (a -> f a) -> s -> f s

instance HasMapPublicIpOnLaunch s a => HasMapPublicIpOnLaunch (TF.Resource p s) a where
    mapPublicIpOnLaunch = TF.configuration . mapPublicIpOnLaunch

class HasMasterInstanceType s a | s -> a where
    masterInstanceType :: Functor f => (a -> f a) -> s -> f s

instance HasMasterInstanceType s a => HasMasterInstanceType (TF.Resource p s) a where
    masterInstanceType = TF.configuration . masterInstanceType

class HasMasterPassword s a | s -> a where
    masterPassword :: Functor f => (a -> f a) -> s -> f s

instance HasMasterPassword s a => HasMasterPassword (TF.Resource p s) a where
    masterPassword = TF.configuration . masterPassword

class HasMasterUsername s a | s -> a where
    masterUsername :: Functor f => (a -> f a) -> s -> f s

instance HasMasterUsername s a => HasMasterUsername (TF.Resource p s) a where
    masterUsername = TF.configuration . masterUsername

class HasMatchingTypes s a | s -> a where
    matchingTypes :: Functor f => (a -> f a) -> s -> f s

instance HasMatchingTypes s a => HasMatchingTypes (TF.Resource p s) a where
    matchingTypes = TF.configuration . matchingTypes

class HasMaxCapacity s a | s -> a where
    maxCapacity :: Functor f => (a -> f a) -> s -> f s

instance HasMaxCapacity s a => HasMaxCapacity (TF.Resource p s) a where
    maxCapacity = TF.configuration . maxCapacity

class HasMaxConcurrency s a | s -> a where
    maxConcurrency :: Functor f => (a -> f a) -> s -> f s

instance HasMaxConcurrency s a => HasMaxConcurrency (TF.Resource p s) a where
    maxConcurrency = TF.configuration . maxConcurrency

class HasMaxErrors s a | s -> a where
    maxErrors :: Functor f => (a -> f a) -> s -> f s

instance HasMaxErrors s a => HasMaxErrors (TF.Resource p s) a where
    maxErrors = TF.configuration . maxErrors

class HasMaxMessageSize s a | s -> a where
    maxMessageSize :: Functor f => (a -> f a) -> s -> f s

instance HasMaxMessageSize s a => HasMaxMessageSize (TF.Resource p s) a where
    maxMessageSize = TF.configuration . maxMessageSize

class HasMaxPasswordAge s a | s -> a where
    maxPasswordAge :: Functor f => (a -> f a) -> s -> f s

instance HasMaxPasswordAge s a => HasMaxPasswordAge (TF.Resource p s) a where
    maxPasswordAge = TF.configuration . maxPasswordAge

class HasMaxSize s a | s -> a where
    maxSize :: Functor f => (a -> f a) -> s -> f s

instance HasMaxSize s a => HasMaxSize (TF.Resource p s) a where
    maxSize = TF.configuration . maxSize

class HasMaximumExecutionFrequency s a | s -> a where
    maximumExecutionFrequency :: Functor f => (a -> f a) -> s -> f s

instance HasMaximumExecutionFrequency s a => HasMaximumExecutionFrequency (TF.Resource p s) a where
    maximumExecutionFrequency = TF.configuration . maximumExecutionFrequency

class HasMeasureLatency s a | s -> a where
    measureLatency :: Functor f => (a -> f a) -> s -> f s

instance HasMeasureLatency s a => HasMeasureLatency (TF.Resource p s) a where
    measureLatency = TF.configuration . measureLatency

class HasMemorySize s a | s -> a where
    memorySize :: Functor f => (a -> f a) -> s -> f s

instance HasMemorySize s a => HasMemorySize (TF.Resource p s) a where
    memorySize = TF.configuration . memorySize

class HasMessageRetentionSeconds s a | s -> a where
    messageRetentionSeconds :: Functor f => (a -> f a) -> s -> f s

instance HasMessageRetentionSeconds s a => HasMessageRetentionSeconds (TF.Resource p s) a where
    messageRetentionSeconds = TF.configuration . messageRetentionSeconds

class HasMethodPath s a | s -> a where
    methodPath :: Functor f => (a -> f a) -> s -> f s

instance HasMethodPath s a => HasMethodPath (TF.Resource p s) a where
    methodPath = TF.configuration . methodPath

class HasMetricName s a | s -> a where
    metricName :: Functor f => (a -> f a) -> s -> f s

instance HasMetricName s a => HasMetricName (TF.Resource p s) a where
    metricName = TF.configuration . metricName

class HasMetricTransformation s a | s -> a where
    metricTransformation :: Functor f => (a -> f a) -> s -> f s

instance HasMetricTransformation s a => HasMetricTransformation (TF.Resource p s) a where
    metricTransformation = TF.configuration . metricTransformation

class HasMetricsGranularity s a | s -> a where
    metricsGranularity :: Functor f => (a -> f a) -> s -> f s

instance HasMetricsGranularity s a => HasMetricsGranularity (TF.Resource p s) a where
    metricsGranularity = TF.configuration . metricsGranularity

class HasMfaConfiguration s a | s -> a where
    mfaConfiguration :: Functor f => (a -> f a) -> s -> f s

instance HasMfaConfiguration s a => HasMfaConfiguration (TF.Resource p s) a where
    mfaConfiguration = TF.configuration . mfaConfiguration

class HasMigrationType s a | s -> a where
    migrationType :: Functor f => (a -> f a) -> s -> f s

instance HasMigrationType s a => HasMigrationType (TF.Resource p s) a where
    migrationType = TF.configuration . migrationType

class HasMinCapacity s a | s -> a where
    minCapacity :: Functor f => (a -> f a) -> s -> f s

instance HasMinCapacity s a => HasMinCapacity (TF.Resource p s) a where
    minCapacity = TF.configuration . minCapacity

class HasMinElbCapacity s a | s -> a where
    minElbCapacity :: Functor f => (a -> f a) -> s -> f s

instance HasMinElbCapacity s a => HasMinElbCapacity (TF.Resource p s) a where
    minElbCapacity = TF.configuration . minElbCapacity

class HasMinSize s a | s -> a where
    minSize :: Functor f => (a -> f a) -> s -> f s

instance HasMinSize s a => HasMinSize (TF.Resource p s) a where
    minSize = TF.configuration . minSize

class HasMinimumHealthyHosts s a | s -> a where
    minimumHealthyHosts :: Functor f => (a -> f a) -> s -> f s

instance HasMinimumHealthyHosts s a => HasMinimumHealthyHosts (TF.Resource p s) a where
    minimumHealthyHosts = TF.configuration . minimumHealthyHosts

class HasMinimumPasswordLength s a | s -> a where
    minimumPasswordLength :: Functor f => (a -> f a) -> s -> f s

instance HasMinimumPasswordLength s a => HasMinimumPasswordLength (TF.Resource p s) a where
    minimumPasswordLength = TF.configuration . minimumPasswordLength

class HasMonitoring s a | s -> a where
    monitoring :: Functor f => (a -> f a) -> s -> f s

instance HasMonitoring s a => HasMonitoring (TF.Resource p s) a where
    monitoring = TF.configuration . monitoring

class HasMonitoringInterval s a | s -> a where
    monitoringInterval :: Functor f => (a -> f a) -> s -> f s

instance HasMonitoringInterval s a => HasMonitoringInterval (TF.Resource p s) a where
    monitoringInterval = TF.configuration . monitoringInterval

class HasMonitoringRoleArn s a | s -> a where
    monitoringRoleArn :: Functor f => (a -> f a) -> s -> f s

instance HasMonitoringRoleArn s a => HasMonitoringRoleArn (TF.Resource p s) a where
    monitoringRoleArn = TF.configuration . monitoringRoleArn

class HasMultiAz s a | s -> a where
    multiAz :: Functor f => (a -> f a) -> s -> f s

instance HasMultiAz s a => HasMultiAz (TF.Resource p s) a where
    multiAz = TF.configuration . multiAz

class HasMultivalueAnswerRoutingPolicy s a | s -> a where
    multivalueAnswerRoutingPolicy :: Functor f => (a -> f a) -> s -> f s

instance HasMultivalueAnswerRoutingPolicy s a => HasMultivalueAnswerRoutingPolicy (TF.Resource p s) a where
    multivalueAnswerRoutingPolicy = TF.configuration . multivalueAnswerRoutingPolicy

class HasName s a | s -> a where
    name :: Functor f => (a -> f a) -> s -> f s

instance HasName s a => HasName (TF.Resource p s) a where
    name = TF.configuration . name

class HasNamePrefix s a | s -> a where
    namePrefix :: Functor f => (a -> f a) -> s -> f s

instance HasNamePrefix s a => HasNamePrefix (TF.Resource p s) a where
    namePrefix = TF.configuration . namePrefix

class HasNamespace s a | s -> a where
    namespace :: Functor f => (a -> f a) -> s -> f s

instance HasNamespace s a => HasNamespace (TF.Resource p s) a where
    namespace = TF.configuration . namespace

class HasNatGatewayId s a | s -> a where
    natGatewayId :: Functor f => (a -> f a) -> s -> f s

instance HasNatGatewayId s a => HasNatGatewayId (TF.Resource p s) a where
    natGatewayId = TF.configuration . natGatewayId

class HasNetbiosNameServers s a | s -> a where
    netbiosNameServers :: Functor f => (a -> f a) -> s -> f s

instance HasNetbiosNameServers s a => HasNetbiosNameServers (TF.Resource p s) a where
    netbiosNameServers = TF.configuration . netbiosNameServers

class HasNetbiosNodeType s a | s -> a where
    netbiosNodeType :: Functor f => (a -> f a) -> s -> f s

instance HasNetbiosNodeType s a => HasNetbiosNodeType (TF.Resource p s) a where
    netbiosNodeType = TF.configuration . netbiosNodeType

class HasNetworkAclId s a | s -> a where
    networkAclId :: Functor f => (a -> f a) -> s -> f s

instance HasNetworkAclId s a => HasNetworkAclId (TF.Resource p s) a where
    networkAclId = TF.configuration . networkAclId

class HasNetworkConfiguration s a | s -> a where
    networkConfiguration :: Functor f => (a -> f a) -> s -> f s

instance HasNetworkConfiguration s a => HasNetworkConfiguration (TF.Resource p s) a where
    networkConfiguration = TF.configuration . networkConfiguration

class HasNetworkInterface s a | s -> a where
    networkInterface :: Functor f => (a -> f a) -> s -> f s

instance HasNetworkInterface s a => HasNetworkInterface (TF.Resource p s) a where
    networkInterface = TF.configuration . networkInterface

class HasNetworkInterfaceId s a | s -> a where
    networkInterfaceId :: Functor f => (a -> f a) -> s -> f s

instance HasNetworkInterfaceId s a => HasNetworkInterfaceId (TF.Resource p s) a where
    networkInterfaceId = TF.configuration . networkInterfaceId

class HasNodeType s a | s -> a where
    nodeType :: Functor f => (a -> f a) -> s -> f s

instance HasNodeType s a => HasNodeType (TF.Resource p s) a where
    nodeType = TF.configuration . nodeType

class HasNodejsVersion s a | s -> a where
    nodejsVersion :: Functor f => (a -> f a) -> s -> f s

instance HasNodejsVersion s a => HasNodejsVersion (TF.Resource p s) a where
    nodejsVersion = TF.configuration . nodejsVersion

class HasNotification s a | s -> a where
    notification :: Functor f => (a -> f a) -> s -> f s

instance HasNotification s a => HasNotification (TF.Resource p s) a where
    notification = TF.configuration . notification

class HasNotificationArns s a | s -> a where
    notificationArns :: Functor f => (a -> f a) -> s -> f s

instance HasNotificationArns s a => HasNotificationArns (TF.Resource p s) a where
    notificationArns = TF.configuration . notificationArns

class HasNotificationMetadata s a | s -> a where
    notificationMetadata :: Functor f => (a -> f a) -> s -> f s

instance HasNotificationMetadata s a => HasNotificationMetadata (TF.Resource p s) a where
    notificationMetadata = TF.configuration . notificationMetadata

class HasNotificationTargetArn s a | s -> a where
    notificationTargetArn :: Functor f => (a -> f a) -> s -> f s

instance HasNotificationTargetArn s a => HasNotificationTargetArn (TF.Resource p s) a where
    notificationTargetArn = TF.configuration . notificationTargetArn

class HasNotificationTopicArn s a | s -> a where
    notificationTopicArn :: Functor f => (a -> f a) -> s -> f s

instance HasNotificationTopicArn s a => HasNotificationTopicArn (TF.Resource p s) a where
    notificationTopicArn = TF.configuration . notificationTopicArn

class HasNotifications s a | s -> a where
    notifications :: Functor f => (a -> f a) -> s -> f s

instance HasNotifications s a => HasNotifications (TF.Resource p s) a where
    notifications = TF.configuration . notifications

class HasNtpServers s a | s -> a where
    ntpServers :: Functor f => (a -> f a) -> s -> f s

instance HasNtpServers s a => HasNtpServers (TF.Resource p s) a where
    ntpServers = TF.configuration . ntpServers

class HasNumCacheNodes s a | s -> a where
    numCacheNodes :: Functor f => (a -> f a) -> s -> f s

instance HasNumCacheNodes s a => HasNumCacheNodes (TF.Resource p s) a where
    numCacheNodes = TF.configuration . numCacheNodes

class HasNumberCacheClusters s a | s -> a where
    numberCacheClusters :: Functor f => (a -> f a) -> s -> f s

instance HasNumberCacheClusters s a => HasNumberCacheClusters (TF.Resource p s) a where
    numberCacheClusters = TF.configuration . numberCacheClusters

class HasNumberOfConnections s a | s -> a where
    numberOfConnections :: Functor f => (a -> f a) -> s -> f s

instance HasNumberOfConnections s a => HasNumberOfConnections (TF.Resource p s) a where
    numberOfConnections = TF.configuration . numberOfConnections

class HasNumberOfNodes s a | s -> a where
    numberOfNodes :: Functor f => (a -> f a) -> s -> f s

instance HasNumberOfNodes s a => HasNumberOfNodes (TF.Resource p s) a where
    numberOfNodes = TF.configuration . numberOfNodes

class HasOkActions s a | s -> a where
    okActions :: Functor f => (a -> f a) -> s -> f s

instance HasOkActions s a => HasOkActions (TF.Resource p s) a where
    okActions = TF.configuration . okActions

class HasOnFailure s a | s -> a where
    onFailure :: Functor f => (a -> f a) -> s -> f s

instance HasOnFailure s a => HasOnFailure (TF.Resource p s) a where
    onFailure = TF.configuration . onFailure

class HasOnPremisesInstanceTagFilter s a | s -> a where
    onPremisesInstanceTagFilter :: Functor f => (a -> f a) -> s -> f s

instance HasOnPremisesInstanceTagFilter s a => HasOnPremisesInstanceTagFilter (TF.Resource p s) a where
    onPremisesInstanceTagFilter = TF.configuration . onPremisesInstanceTagFilter

class HasOpenidConnectProviderArns s a | s -> a where
    openidConnectProviderArns :: Functor f => (a -> f a) -> s -> f s

instance HasOpenidConnectProviderArns s a => HasOpenidConnectProviderArns (TF.Resource p s) a where
    openidConnectProviderArns = TF.configuration . openidConnectProviderArns

class HasOperatingSystem s a | s -> a where
    operatingSystem :: Functor f => (a -> f a) -> s -> f s

instance HasOperatingSystem s a => HasOperatingSystem (TF.Resource p s) a where
    operatingSystem = TF.configuration . operatingSystem

class HasOption s a | s -> a where
    option :: Functor f => (a -> f a) -> s -> f s

instance HasOption s a => HasOption (TF.Resource p s) a where
    option = TF.configuration . option

class HasOptionGroupDescription s a | s -> a where
    optionGroupDescription :: Functor f => (a -> f a) -> s -> f s

instance HasOptionGroupDescription s a => HasOptionGroupDescription (TF.Resource p s) a where
    optionGroupDescription = TF.configuration . optionGroupDescription

class HasOptionGroupName s a | s -> a where
    optionGroupName :: Functor f => (a -> f a) -> s -> f s

instance HasOptionGroupName s a => HasOptionGroupName (TF.Resource p s) a where
    optionGroupName = TF.configuration . optionGroupName

class HasOrigin s a | s -> a where
    origin :: Functor f => (a -> f a) -> s -> f s

instance HasOrigin s a => HasOrigin (TF.Resource p s) a where
    origin = TF.configuration . origin

class HasOs s a | s -> a where
    os :: Functor f => (a -> f a) -> s -> f s

instance HasOs s a => HasOs (TF.Resource p s) a where
    os = TF.configuration . os

class HasOutputBucket s a | s -> a where
    outputBucket :: Functor f => (a -> f a) -> s -> f s

instance HasOutputBucket s a => HasOutputBucket (TF.Resource p s) a where
    outputBucket = TF.configuration . outputBucket

class HasOutputLocation s a | s -> a where
    outputLocation :: Functor f => (a -> f a) -> s -> f s

instance HasOutputLocation s a => HasOutputLocation (TF.Resource p s) a where
    outputLocation = TF.configuration . outputLocation

class HasOverwrite s a | s -> a where
    overwrite :: Functor f => (a -> f a) -> s -> f s

instance HasOverwrite s a => HasOverwrite (TF.Resource p s) a where
    overwrite = TF.configuration . overwrite

class HasOwnerAccount s a | s -> a where
    ownerAccount :: Functor f => (a -> f a) -> s -> f s

instance HasOwnerAccount s a => HasOwnerAccount (TF.Resource p s) a where
    ownerAccount = TF.configuration . ownerAccount

class HasOwnerInformation s a | s -> a where
    ownerInformation :: Functor f => (a -> f a) -> s -> f s

instance HasOwnerInformation s a => HasOwnerInformation (TF.Resource p s) a where
    ownerInformation = TF.configuration . ownerInformation

class HasParameter s a | s -> a where
    parameter :: Functor f => (a -> f a) -> s -> f s

instance HasParameter s a => HasParameter (TF.Resource p s) a where
    parameter = TF.configuration . parameter

class HasParameterGroupName s a | s -> a where
    parameterGroupName :: Functor f => (a -> f a) -> s -> f s

instance HasParameterGroupName s a => HasParameterGroupName (TF.Resource p s) a where
    parameterGroupName = TF.configuration . parameterGroupName

class HasParameters s a | s -> a where
    parameters :: Functor f => (a -> f a) -> s -> f s

instance HasParameters s a => HasParameters (TF.Resource p s) a where
    parameters = TF.configuration . parameters

class HasParentId s a | s -> a where
    parentId :: Functor f => (a -> f a) -> s -> f s

instance HasParentId s a => HasParentId (TF.Resource p s) a where
    parentId = TF.configuration . parentId

class HasPassengerVersion s a | s -> a where
    passengerVersion :: Functor f => (a -> f a) -> s -> f s

instance HasPassengerVersion s a => HasPassengerVersion (TF.Resource p s) a where
    passengerVersion = TF.configuration . passengerVersion

class HasPassthroughBehavior s a | s -> a where
    passthroughBehavior :: Functor f => (a -> f a) -> s -> f s

instance HasPassthroughBehavior s a => HasPassthroughBehavior (TF.Resource p s) a where
    passthroughBehavior = TF.configuration . passthroughBehavior

class HasPassword s a | s -> a where
    password :: Functor f => (a -> f a) -> s -> f s

instance HasPassword s a => HasPassword (TF.Resource p s) a where
    password = TF.configuration . password

class HasPasswordLength s a | s -> a where
    passwordLength :: Functor f => (a -> f a) -> s -> f s

instance HasPasswordLength s a => HasPasswordLength (TF.Resource p s) a where
    passwordLength = TF.configuration . passwordLength

class HasPasswordPolicy s a | s -> a where
    passwordPolicy :: Functor f => (a -> f a) -> s -> f s

instance HasPasswordPolicy s a => HasPasswordPolicy (TF.Resource p s) a where
    passwordPolicy = TF.configuration . passwordPolicy

class HasPasswordResetRequired s a | s -> a where
    passwordResetRequired :: Functor f => (a -> f a) -> s -> f s

instance HasPasswordResetRequired s a => HasPasswordResetRequired (TF.Resource p s) a where
    passwordResetRequired = TF.configuration . passwordResetRequired

class HasPasswordReusePrevention s a | s -> a where
    passwordReusePrevention :: Functor f => (a -> f a) -> s -> f s

instance HasPasswordReusePrevention s a => HasPasswordReusePrevention (TF.Resource p s) a where
    passwordReusePrevention = TF.configuration . passwordReusePrevention

class HasPatchGroup s a | s -> a where
    patchGroup :: Functor f => (a -> f a) -> s -> f s

instance HasPatchGroup s a => HasPatchGroup (TF.Resource p s) a where
    patchGroup = TF.configuration . patchGroup

class HasPath s a | s -> a where
    path :: Functor f => (a -> f a) -> s -> f s

instance HasPath s a => HasPath (TF.Resource p s) a where
    path = TF.configuration . path

class HasPathPart s a | s -> a where
    pathPart :: Functor f => (a -> f a) -> s -> f s

instance HasPathPart s a => HasPathPart (TF.Resource p s) a where
    pathPart = TF.configuration . pathPart

class HasPattern s a | s -> a where
    pattern :: Functor f => (a -> f a) -> s -> f s

instance HasPattern s a => HasPattern (TF.Resource p s) a where
    pattern = TF.configuration . pattern

class HasPeerOwnerId s a | s -> a where
    peerOwnerId :: Functor f => (a -> f a) -> s -> f s

instance HasPeerOwnerId s a => HasPeerOwnerId (TF.Resource p s) a where
    peerOwnerId = TF.configuration . peerOwnerId

class HasPeerRegion s a | s -> a where
    peerRegion :: Functor f => (a -> f a) -> s -> f s

instance HasPeerRegion s a => HasPeerRegion (TF.Resource p s) a where
    peerRegion = TF.configuration . peerRegion

class HasPeerVpcId s a | s -> a where
    peerVpcId :: Functor f => (a -> f a) -> s -> f s

instance HasPeerVpcId s a => HasPeerVpcId (TF.Resource p s) a where
    peerVpcId = TF.configuration . peerVpcId

class HasPerformanceInsightsEnabled s a | s -> a where
    performanceInsightsEnabled :: Functor f => (a -> f a) -> s -> f s

instance HasPerformanceInsightsEnabled s a => HasPerformanceInsightsEnabled (TF.Resource p s) a where
    performanceInsightsEnabled = TF.configuration . performanceInsightsEnabled

class HasPerformanceInsightsKmsKeyId s a | s -> a where
    performanceInsightsKmsKeyId :: Functor f => (a -> f a) -> s -> f s

instance HasPerformanceInsightsKmsKeyId s a => HasPerformanceInsightsKmsKeyId (TF.Resource p s) a where
    performanceInsightsKmsKeyId = TF.configuration . performanceInsightsKmsKeyId

class HasPerformanceMode s a | s -> a where
    performanceMode :: Functor f => (a -> f a) -> s -> f s

instance HasPerformanceMode s a => HasPerformanceMode (TF.Resource p s) a where
    performanceMode = TF.configuration . performanceMode

class HasPeriod s a | s -> a where
    period :: Functor f => (a -> f a) -> s -> f s

instance HasPeriod s a => HasPeriod (TF.Resource p s) a where
    period = TF.configuration . period

class HasPermissions s a | s -> a where
    permissions :: Functor f => (a -> f a) -> s -> f s

instance HasPermissions s a => HasPermissions (TF.Resource p s) a where
    permissions = TF.configuration . permissions

class HasPgpKey s a | s -> a where
    pgpKey :: Functor f => (a -> f a) -> s -> f s

instance HasPgpKey s a => HasPgpKey (TF.Resource p s) a where
    pgpKey = TF.configuration . pgpKey

class HasPlacementConstraints s a | s -> a where
    placementConstraints :: Functor f => (a -> f a) -> s -> f s

instance HasPlacementConstraints s a => HasPlacementConstraints (TF.Resource p s) a where
    placementConstraints = TF.configuration . placementConstraints

class HasPlacementGroup s a | s -> a where
    placementGroup :: Functor f => (a -> f a) -> s -> f s

instance HasPlacementGroup s a => HasPlacementGroup (TF.Resource p s) a where
    placementGroup = TF.configuration . placementGroup

class HasPlacementStrategy s a | s -> a where
    placementStrategy :: Functor f => (a -> f a) -> s -> f s

instance HasPlacementStrategy s a => HasPlacementStrategy (TF.Resource p s) a where
    placementStrategy = TF.configuration . placementStrategy

class HasPlacementTenancy s a | s -> a where
    placementTenancy :: Functor f => (a -> f a) -> s -> f s

instance HasPlacementTenancy s a => HasPlacementTenancy (TF.Resource p s) a where
    placementTenancy = TF.configuration . placementTenancy

class HasPolicy s a | s -> a where
    policy :: Functor f => (a -> f a) -> s -> f s

instance HasPolicy s a => HasPolicy (TF.Resource p s) a where
    policy = TF.configuration . policy

class HasPolicyArn s a | s -> a where
    policyArn :: Functor f => (a -> f a) -> s -> f s

instance HasPolicyArn s a => HasPolicyArn (TF.Resource p s) a where
    policyArn = TF.configuration . policyArn

class HasPolicyAttribute s a | s -> a where
    policyAttribute :: Functor f => (a -> f a) -> s -> f s

instance HasPolicyAttribute s a => HasPolicyAttribute (TF.Resource p s) a where
    policyAttribute = TF.configuration . policyAttribute

class HasPolicyBody s a | s -> a where
    policyBody :: Functor f => (a -> f a) -> s -> f s

instance HasPolicyBody s a => HasPolicyBody (TF.Resource p s) a where
    policyBody = TF.configuration . policyBody

class HasPolicyDocument s a | s -> a where
    policyDocument :: Functor f => (a -> f a) -> s -> f s

instance HasPolicyDocument s a => HasPolicyDocument (TF.Resource p s) a where
    policyDocument = TF.configuration . policyDocument

class HasPolicyName s a | s -> a where
    policyName :: Functor f => (a -> f a) -> s -> f s

instance HasPolicyName s a => HasPolicyName (TF.Resource p s) a where
    policyName = TF.configuration . policyName

class HasPolicyNames s a | s -> a where
    policyNames :: Functor f => (a -> f a) -> s -> f s

instance HasPolicyNames s a => HasPolicyNames (TF.Resource p s) a where
    policyNames = TF.configuration . policyNames

class HasPolicyType s a | s -> a where
    policyType :: Functor f => (a -> f a) -> s -> f s

instance HasPolicyType s a => HasPolicyType (TF.Resource p s) a where
    policyType = TF.configuration . policyType

class HasPolicyTypeName s a | s -> a where
    policyTypeName :: Functor f => (a -> f a) -> s -> f s

instance HasPolicyTypeName s a => HasPolicyTypeName (TF.Resource p s) a where
    policyTypeName = TF.configuration . policyTypeName

class HasPolicyUrl s a | s -> a where
    policyUrl :: Functor f => (a -> f a) -> s -> f s

instance HasPolicyUrl s a => HasPolicyUrl (TF.Resource p s) a where
    policyUrl = TF.configuration . policyUrl

class HasPollInterval s a | s -> a where
    pollInterval :: Functor f => (a -> f a) -> s -> f s

instance HasPollInterval s a => HasPollInterval (TF.Resource p s) a where
    pollInterval = TF.configuration . pollInterval

class HasPort s a | s -> a where
    port :: Functor f => (a -> f a) -> s -> f s

instance HasPort s a => HasPort (TF.Resource p s) a where
    port = TF.configuration . port

class HasPredicates s a | s -> a where
    predicates :: Functor f => (a -> f a) -> s -> f s

instance HasPredicates s a => HasPredicates (TF.Resource p s) a where
    predicates = TF.configuration . predicates

class HasPreferredBackupWindow s a | s -> a where
    preferredBackupWindow :: Functor f => (a -> f a) -> s -> f s

instance HasPreferredBackupWindow s a => HasPreferredBackupWindow (TF.Resource p s) a where
    preferredBackupWindow = TF.configuration . preferredBackupWindow

class HasPreferredMaintenanceWindow s a | s -> a where
    preferredMaintenanceWindow :: Functor f => (a -> f a) -> s -> f s

instance HasPreferredMaintenanceWindow s a => HasPreferredMaintenanceWindow (TF.Resource p s) a where
    preferredMaintenanceWindow = TF.configuration . preferredMaintenanceWindow

class HasPrefix s a | s -> a where
    prefix :: Functor f => (a -> f a) -> s -> f s

instance HasPrefix s a => HasPrefix (TF.Resource p s) a where
    prefix = TF.configuration . prefix

class HasPrefixListIds s a | s -> a where
    prefixListIds :: Functor f => (a -> f a) -> s -> f s

instance HasPrefixListIds s a => HasPrefixListIds (TF.Resource p s) a where
    prefixListIds = TF.configuration . prefixListIds

class HasPriceClass s a | s -> a where
    priceClass :: Functor f => (a -> f a) -> s -> f s

instance HasPriceClass s a => HasPriceClass (TF.Resource p s) a where
    priceClass = TF.configuration . priceClass

class HasPrincipal s a | s -> a where
    principal :: Functor f => (a -> f a) -> s -> f s

instance HasPrincipal s a => HasPrincipal (TF.Resource p s) a where
    principal = TF.configuration . principal

class HasPriority s a | s -> a where
    priority :: Functor f => (a -> f a) -> s -> f s

instance HasPriority s a => HasPriority (TF.Resource p s) a where
    priority = TF.configuration . priority

class HasPrivateIp s a | s -> a where
    privateIp :: Functor f => (a -> f a) -> s -> f s

instance HasPrivateIp s a => HasPrivateIp (TF.Resource p s) a where
    privateIp = TF.configuration . privateIp

class HasPrivateIpAddress s a | s -> a where
    privateIpAddress :: Functor f => (a -> f a) -> s -> f s

instance HasPrivateIpAddress s a => HasPrivateIpAddress (TF.Resource p s) a where
    privateIpAddress = TF.configuration . privateIpAddress

class HasPrivateIps s a | s -> a where
    privateIps :: Functor f => (a -> f a) -> s -> f s

instance HasPrivateIps s a => HasPrivateIps (TF.Resource p s) a where
    privateIps = TF.configuration . privateIps

class HasPrivateIpsCount s a | s -> a where
    privateIpsCount :: Functor f => (a -> f a) -> s -> f s

instance HasPrivateIpsCount s a => HasPrivateIpsCount (TF.Resource p s) a where
    privateIpsCount = TF.configuration . privateIpsCount

class HasPrivateKey s a | s -> a where
    privateKey :: Functor f => (a -> f a) -> s -> f s

instance HasPrivateKey s a => HasPrivateKey (TF.Resource p s) a where
    privateKey = TF.configuration . privateKey

class HasProductCode s a | s -> a where
    productCode :: Functor f => (a -> f a) -> s -> f s

instance HasProductCode s a => HasProductCode (TF.Resource p s) a where
    productCode = TF.configuration . productCode

class HasPromotionTier s a | s -> a where
    promotionTier :: Functor f => (a -> f a) -> s -> f s

instance HasPromotionTier s a => HasPromotionTier (TF.Resource p s) a where
    promotionTier = TF.configuration . promotionTier

class HasPropagatingVgws s a | s -> a where
    propagatingVgws :: Functor f => (a -> f a) -> s -> f s

instance HasPropagatingVgws s a => HasPropagatingVgws (TF.Resource p s) a where
    propagatingVgws = TF.configuration . propagatingVgws

class HasProperties s a | s -> a where
    properties :: Functor f => (a -> f a) -> s -> f s

instance HasProperties s a => HasProperties (TF.Resource p s) a where
    properties = TF.configuration . properties

class HasProtectFromScaleIn s a | s -> a where
    protectFromScaleIn :: Functor f => (a -> f a) -> s -> f s

instance HasProtectFromScaleIn s a => HasProtectFromScaleIn (TF.Resource p s) a where
    protectFromScaleIn = TF.configuration . protectFromScaleIn

class HasProtocol s a | s -> a where
    protocol :: Functor f => (a -> f a) -> s -> f s

instance HasProtocol s a => HasProtocol (TF.Resource p s) a where
    protocol = TF.configuration . protocol

class HasProviderName s a | s -> a where
    providerName :: Functor f => (a -> f a) -> s -> f s

instance HasProviderName s a => HasProviderName (TF.Resource p s) a where
    providerName = TF.configuration . providerName

class HasPublicIp s a | s -> a where
    publicIp :: Functor f => (a -> f a) -> s -> f s

instance HasPublicIp s a => HasPublicIp (TF.Resource p s) a where
    publicIp = TF.configuration . publicIp

class HasPublicKey s a | s -> a where
    publicKey :: Functor f => (a -> f a) -> s -> f s

instance HasPublicKey s a => HasPublicKey (TF.Resource p s) a where
    publicKey = TF.configuration . publicKey

class HasPubliclyAccessible s a | s -> a where
    publiclyAccessible :: Functor f => (a -> f a) -> s -> f s

instance HasPubliclyAccessible s a => HasPubliclyAccessible (TF.Resource p s) a where
    publiclyAccessible = TF.configuration . publiclyAccessible

class HasPublish s a | s -> a where
    publish :: Functor f => (a -> f a) -> s -> f s

instance HasPublish s a => HasPublish (TF.Resource p s) a where
    publish = TF.configuration . publish

class HasQualifier s a | s -> a where
    qualifier :: Functor f => (a -> f a) -> s -> f s

instance HasQualifier s a => HasQualifier (TF.Resource p s) a where
    qualifier = TF.configuration . qualifier

class HasQuery s a | s -> a where
    query :: Functor f => (a -> f a) -> s -> f s

instance HasQuery s a => HasQuery (TF.Resource p s) a where
    query = TF.configuration . query

class HasQueue s a | s -> a where
    queue :: Functor f => (a -> f a) -> s -> f s

instance HasQueue s a => HasQueue (TF.Resource p s) a where
    queue = TF.configuration . queue

class HasQueueUrl s a | s -> a where
    queueUrl :: Functor f => (a -> f a) -> s -> f s

instance HasQueueUrl s a => HasQueueUrl (TF.Resource p s) a where
    queueUrl = TF.configuration . queueUrl

class HasQuotaSettings s a | s -> a where
    quotaSettings :: Functor f => (a -> f a) -> s -> f s

instance HasQuotaSettings s a => HasQuotaSettings (TF.Resource p s) a where
    quotaSettings = TF.configuration . quotaSettings

class HasRailsEnv s a | s -> a where
    railsEnv :: Functor f => (a -> f a) -> s -> f s

instance HasRailsEnv s a => HasRailsEnv (TF.Resource p s) a where
    railsEnv = TF.configuration . railsEnv

class HasRangeKey s a | s -> a where
    rangeKey :: Functor f => (a -> f a) -> s -> f s

instance HasRangeKey s a => HasRangeKey (TF.Resource p s) a where
    rangeKey = TF.configuration . rangeKey

class HasRateKey s a | s -> a where
    rateKey :: Functor f => (a -> f a) -> s -> f s

instance HasRateKey s a => HasRateKey (TF.Resource p s) a where
    rateKey = TF.configuration . rateKey

class HasRateLimit s a | s -> a where
    rateLimit :: Functor f => (a -> f a) -> s -> f s

instance HasRateLimit s a => HasRateLimit (TF.Resource p s) a where
    rateLimit = TF.configuration . rateLimit

class HasRawMessageDelivery s a | s -> a where
    rawMessageDelivery :: Functor f => (a -> f a) -> s -> f s

instance HasRawMessageDelivery s a => HasRawMessageDelivery (TF.Resource p s) a where
    rawMessageDelivery = TF.configuration . rawMessageDelivery

class HasRdsDbInstanceArn s a | s -> a where
    rdsDbInstanceArn :: Functor f => (a -> f a) -> s -> f s

instance HasRdsDbInstanceArn s a => HasRdsDbInstanceArn (TF.Resource p s) a where
    rdsDbInstanceArn = TF.configuration . rdsDbInstanceArn

class HasReadAttributes s a | s -> a where
    readAttributes :: Functor f => (a -> f a) -> s -> f s

instance HasReadAttributes s a => HasReadAttributes (TF.Resource p s) a where
    readAttributes = TF.configuration . readAttributes

class HasReadCapacity s a | s -> a where
    readCapacity :: Functor f => (a -> f a) -> s -> f s

instance HasReadCapacity s a => HasReadCapacity (TF.Resource p s) a where
    readCapacity = TF.configuration . readCapacity

class HasReceiveWaitTimeSeconds s a | s -> a where
    receiveWaitTimeSeconds :: Functor f => (a -> f a) -> s -> f s

instance HasReceiveWaitTimeSeconds s a => HasReceiveWaitTimeSeconds (TF.Resource p s) a where
    receiveWaitTimeSeconds = TF.configuration . receiveWaitTimeSeconds

class HasRecipients s a | s -> a where
    recipients :: Functor f => (a -> f a) -> s -> f s

instance HasRecipients s a => HasRecipients (TF.Resource p s) a where
    recipients = TF.configuration . recipients

class HasRecordingGroup s a | s -> a where
    recordingGroup :: Functor f => (a -> f a) -> s -> f s

instance HasRecordingGroup s a => HasRecordingGroup (TF.Resource p s) a where
    recordingGroup = TF.configuration . recordingGroup

class HasRecords s a | s -> a where
    records :: Functor f => (a -> f a) -> s -> f s

instance HasRecords s a => HasRecords (TF.Resource p s) a where
    records = TF.configuration . records

class HasRecurrence s a | s -> a where
    recurrence :: Functor f => (a -> f a) -> s -> f s

instance HasRecurrence s a => HasRecurrence (TF.Resource p s) a where
    recurrence = TF.configuration . recurrence

class HasRedrivePolicy s a | s -> a where
    redrivePolicy :: Functor f => (a -> f a) -> s -> f s

instance HasRedrivePolicy s a => HasRedrivePolicy (TF.Resource p s) a where
    redrivePolicy = TF.configuration . redrivePolicy

class HasRedshiftConfiguration s a | s -> a where
    redshiftConfiguration :: Functor f => (a -> f a) -> s -> f s

instance HasRedshiftConfiguration s a => HasRedshiftConfiguration (TF.Resource p s) a where
    redshiftConfiguration = TF.configuration . redshiftConfiguration

class HasReferenceName s a | s -> a where
    referenceName :: Functor f => (a -> f a) -> s -> f s

instance HasReferenceName s a => HasReferenceName (TF.Resource p s) a where
    referenceName = TF.configuration . referenceName

class HasRefreshTokenValidity s a | s -> a where
    refreshTokenValidity :: Functor f => (a -> f a) -> s -> f s

instance HasRefreshTokenValidity s a => HasRefreshTokenValidity (TF.Resource p s) a where
    refreshTokenValidity = TF.configuration . refreshTokenValidity

class HasRegion s a | s -> a where
    region :: Functor f => (a -> f a) -> s -> f s

instance HasRegion s a => HasRegion (TF.Resource p s) a where
    region = TF.configuration . region

class HasRegions s a | s -> a where
    regions :: Functor f => (a -> f a) -> s -> f s

instance HasRegions s a => HasRegions (TF.Resource p s) a where
    regions = TF.configuration . regions

class HasRegistrationLimit s a | s -> a where
    registrationLimit :: Functor f => (a -> f a) -> s -> f s

instance HasRegistrationLimit s a => HasRegistrationLimit (TF.Resource p s) a where
    registrationLimit = TF.configuration . registrationLimit

class HasRejectedPatches s a | s -> a where
    rejectedPatches :: Functor f => (a -> f a) -> s -> f s

instance HasRejectedPatches s a => HasRejectedPatches (TF.Resource p s) a where
    rejectedPatches = TF.configuration . rejectedPatches

class HasReleaseLabel s a | s -> a where
    releaseLabel :: Functor f => (a -> f a) -> s -> f s

instance HasReleaseLabel s a => HasReleaseLabel (TF.Resource p s) a where
    releaseLabel = TF.configuration . releaseLabel

class HasReplaceUnhealthyInstances s a | s -> a where
    replaceUnhealthyInstances :: Functor f => (a -> f a) -> s -> f s

instance HasReplaceUnhealthyInstances s a => HasReplaceUnhealthyInstances (TF.Resource p s) a where
    replaceUnhealthyInstances = TF.configuration . replaceUnhealthyInstances

class HasReplicateSourceDb s a | s -> a where
    replicateSourceDb :: Functor f => (a -> f a) -> s -> f s

instance HasReplicateSourceDb s a => HasReplicateSourceDb (TF.Resource p s) a where
    replicateSourceDb = TF.configuration . replicateSourceDb

class HasReplicationConfiguration s a | s -> a where
    replicationConfiguration :: Functor f => (a -> f a) -> s -> f s

instance HasReplicationConfiguration s a => HasReplicationConfiguration (TF.Resource p s) a where
    replicationConfiguration = TF.configuration . replicationConfiguration

class HasReplicationGroupDescription s a | s -> a where
    replicationGroupDescription :: Functor f => (a -> f a) -> s -> f s

instance HasReplicationGroupDescription s a => HasReplicationGroupDescription (TF.Resource p s) a where
    replicationGroupDescription = TF.configuration . replicationGroupDescription

class HasReplicationGroupId s a | s -> a where
    replicationGroupId :: Functor f => (a -> f a) -> s -> f s

instance HasReplicationGroupId s a => HasReplicationGroupId (TF.Resource p s) a where
    replicationGroupId = TF.configuration . replicationGroupId

class HasReplicationInstanceArn s a | s -> a where
    replicationInstanceArn :: Functor f => (a -> f a) -> s -> f s

instance HasReplicationInstanceArn s a => HasReplicationInstanceArn (TF.Resource p s) a where
    replicationInstanceArn = TF.configuration . replicationInstanceArn

class HasReplicationInstanceClass s a | s -> a where
    replicationInstanceClass :: Functor f => (a -> f a) -> s -> f s

instance HasReplicationInstanceClass s a => HasReplicationInstanceClass (TF.Resource p s) a where
    replicationInstanceClass = TF.configuration . replicationInstanceClass

class HasReplicationInstanceId s a | s -> a where
    replicationInstanceId :: Functor f => (a -> f a) -> s -> f s

instance HasReplicationInstanceId s a => HasReplicationInstanceId (TF.Resource p s) a where
    replicationInstanceId = TF.configuration . replicationInstanceId

class HasReplicationSubnetGroupDescription s a | s -> a where
    replicationSubnetGroupDescription :: Functor f => (a -> f a) -> s -> f s

instance HasReplicationSubnetGroupDescription s a => HasReplicationSubnetGroupDescription (TF.Resource p s) a where
    replicationSubnetGroupDescription = TF.configuration . replicationSubnetGroupDescription

class HasReplicationSubnetGroupId s a | s -> a where
    replicationSubnetGroupId :: Functor f => (a -> f a) -> s -> f s

instance HasReplicationSubnetGroupId s a => HasReplicationSubnetGroupId (TF.Resource p s) a where
    replicationSubnetGroupId = TF.configuration . replicationSubnetGroupId

class HasReplicationTaskId s a | s -> a where
    replicationTaskId :: Functor f => (a -> f a) -> s -> f s

instance HasReplicationTaskId s a => HasReplicationTaskId (TF.Resource p s) a where
    replicationTaskId = TF.configuration . replicationTaskId

class HasReplicationTaskSettings s a | s -> a where
    replicationTaskSettings :: Functor f => (a -> f a) -> s -> f s

instance HasReplicationTaskSettings s a => HasReplicationTaskSettings (TF.Resource p s) a where
    replicationTaskSettings = TF.configuration . replicationTaskSettings

class HasRepository s a | s -> a where
    repository :: Functor f => (a -> f a) -> s -> f s

instance HasRepository s a => HasRepository (TF.Resource p s) a where
    repository = TF.configuration . repository

class HasRepositoryName s a | s -> a where
    repositoryName :: Functor f => (a -> f a) -> s -> f s

instance HasRepositoryName s a => HasRepositoryName (TF.Resource p s) a where
    repositoryName = TF.configuration . repositoryName

class HasRequestInterval s a | s -> a where
    requestInterval :: Functor f => (a -> f a) -> s -> f s

instance HasRequestInterval s a => HasRequestInterval (TF.Resource p s) a where
    requestInterval = TF.configuration . requestInterval

class HasRequestModels s a | s -> a where
    requestModels :: Functor f => (a -> f a) -> s -> f s

instance HasRequestModels s a => HasRequestModels (TF.Resource p s) a where
    requestModels = TF.configuration . requestModels

class HasRequestParameters s a | s -> a where
    requestParameters :: Functor f => (a -> f a) -> s -> f s

instance HasRequestParameters s a => HasRequestParameters (TF.Resource p s) a where
    requestParameters = TF.configuration . requestParameters

class HasRequestParametersInJson s a | s -> a where
    requestParametersInJson :: Functor f => (a -> f a) -> s -> f s

instance HasRequestParametersInJson s a => HasRequestParametersInJson (TF.Resource p s) a where
    requestParametersInJson = TF.configuration . requestParametersInJson

class HasRequestPayer s a | s -> a where
    requestPayer :: Functor f => (a -> f a) -> s -> f s

instance HasRequestPayer s a => HasRequestPayer (TF.Resource p s) a where
    requestPayer = TF.configuration . requestPayer

class HasRequestTemplates s a | s -> a where
    requestTemplates :: Functor f => (a -> f a) -> s -> f s

instance HasRequestTemplates s a => HasRequestTemplates (TF.Resource p s) a where
    requestTemplates = TF.configuration . requestTemplates

class HasRequestValidatorId s a | s -> a where
    requestValidatorId :: Functor f => (a -> f a) -> s -> f s

instance HasRequestValidatorId s a => HasRequestValidatorId (TF.Resource p s) a where
    requestValidatorId = TF.configuration . requestValidatorId

class HasRequester s a | s -> a where
    requester :: Functor f => (a -> f a) -> s -> f s

instance HasRequester s a => HasRequester (TF.Resource p s) a where
    requester = TF.configuration . requester

class HasRequireLowercaseCharacters s a | s -> a where
    requireLowercaseCharacters :: Functor f => (a -> f a) -> s -> f s

instance HasRequireLowercaseCharacters s a => HasRequireLowercaseCharacters (TF.Resource p s) a where
    requireLowercaseCharacters = TF.configuration . requireLowercaseCharacters

class HasRequireNumbers s a | s -> a where
    requireNumbers :: Functor f => (a -> f a) -> s -> f s

instance HasRequireNumbers s a => HasRequireNumbers (TF.Resource p s) a where
    requireNumbers = TF.configuration . requireNumbers

class HasRequireSymbols s a | s -> a where
    requireSymbols :: Functor f => (a -> f a) -> s -> f s

instance HasRequireSymbols s a => HasRequireSymbols (TF.Resource p s) a where
    requireSymbols = TF.configuration . requireSymbols

class HasRequireUppercaseCharacters s a | s -> a where
    requireUppercaseCharacters :: Functor f => (a -> f a) -> s -> f s

instance HasRequireUppercaseCharacters s a => HasRequireUppercaseCharacters (TF.Resource p s) a where
    requireUppercaseCharacters = TF.configuration . requireUppercaseCharacters

class HasReservedConcurrentExecutions s a | s -> a where
    reservedConcurrentExecutions :: Functor f => (a -> f a) -> s -> f s

instance HasReservedConcurrentExecutions s a => HasReservedConcurrentExecutions (TF.Resource p s) a where
    reservedConcurrentExecutions = TF.configuration . reservedConcurrentExecutions

class HasResourceGroupArn s a | s -> a where
    resourceGroupArn :: Functor f => (a -> f a) -> s -> f s

instance HasResourceGroupArn s a => HasResourceGroupArn (TF.Resource p s) a where
    resourceGroupArn = TF.configuration . resourceGroupArn

class HasResourceId s a | s -> a where
    resourceId :: Functor f => (a -> f a) -> s -> f s

instance HasResourceId s a => HasResourceId (TF.Resource p s) a where
    resourceId = TF.configuration . resourceId

class HasResourcePath s a | s -> a where
    resourcePath :: Functor f => (a -> f a) -> s -> f s

instance HasResourcePath s a => HasResourcePath (TF.Resource p s) a where
    resourcePath = TF.configuration . resourcePath

class HasResourceType s a | s -> a where
    resourceType :: Functor f => (a -> f a) -> s -> f s

instance HasResourceType s a => HasResourceType (TF.Resource p s) a where
    resourceType = TF.configuration . resourceType

class HasResponseModels s a | s -> a where
    responseModels :: Functor f => (a -> f a) -> s -> f s

instance HasResponseModels s a => HasResponseModels (TF.Resource p s) a where
    responseModels = TF.configuration . responseModels

class HasResponseParameters s a | s -> a where
    responseParameters :: Functor f => (a -> f a) -> s -> f s

instance HasResponseParameters s a => HasResponseParameters (TF.Resource p s) a where
    responseParameters = TF.configuration . responseParameters

class HasResponseParametersInJson s a | s -> a where
    responseParametersInJson :: Functor f => (a -> f a) -> s -> f s

instance HasResponseParametersInJson s a => HasResponseParametersInJson (TF.Resource p s) a where
    responseParametersInJson = TF.configuration . responseParametersInJson

class HasResponseTemplates s a | s -> a where
    responseTemplates :: Functor f => (a -> f a) -> s -> f s

instance HasResponseTemplates s a => HasResponseTemplates (TF.Resource p s) a where
    responseTemplates = TF.configuration . responseTemplates

class HasResponseType s a | s -> a where
    responseType :: Functor f => (a -> f a) -> s -> f s

instance HasResponseType s a => HasResponseType (TF.Resource p s) a where
    responseType = TF.configuration . responseType

class HasRestApiId s a | s -> a where
    restApiId :: Functor f => (a -> f a) -> s -> f s

instance HasRestApiId s a => HasRestApiId (TF.Resource p s) a where
    restApiId = TF.configuration . restApiId

class HasRestrictions s a | s -> a where
    restrictions :: Functor f => (a -> f a) -> s -> f s

instance HasRestrictions s a => HasRestrictions (TF.Resource p s) a where
    restrictions = TF.configuration . restrictions

class HasRetainOnDelete s a | s -> a where
    retainOnDelete :: Functor f => (a -> f a) -> s -> f s

instance HasRetainOnDelete s a => HasRetainOnDelete (TF.Resource p s) a where
    retainOnDelete = TF.configuration . retainOnDelete

class HasRetentionInDays s a | s -> a where
    retentionInDays :: Functor f => (a -> f a) -> s -> f s

instance HasRetentionInDays s a => HasRetentionInDays (TF.Resource p s) a where
    retentionInDays = TF.configuration . retentionInDays

class HasRetentionPeriod s a | s -> a where
    retentionPeriod :: Functor f => (a -> f a) -> s -> f s

instance HasRetentionPeriod s a => HasRetentionPeriod (TF.Resource p s) a where
    retentionPeriod = TF.configuration . retentionPeriod

class HasRetryStrategy s a | s -> a where
    retryStrategy :: Functor f => (a -> f a) -> s -> f s

instance HasRetryStrategy s a => HasRetryStrategy (TF.Resource p s) a where
    retryStrategy = TF.configuration . retryStrategy

class HasRevokeRulesOnDelete s a | s -> a where
    revokeRulesOnDelete :: Functor f => (a -> f a) -> s -> f s

instance HasRevokeRulesOnDelete s a => HasRevokeRulesOnDelete (TF.Resource p s) a where
    revokeRulesOnDelete = TF.configuration . revokeRulesOnDelete

class HasRole s a | s -> a where
    role :: Functor f => (a -> f a) -> s -> f s

instance HasRole s a => HasRole (TF.Resource p s) a where
    role = TF.configuration . role

class HasRoleArn s a | s -> a where
    roleArn :: Functor f => (a -> f a) -> s -> f s

instance HasRoleArn s a => HasRoleArn (TF.Resource p s) a where
    roleArn = TF.configuration . roleArn

class HasRoleMapping s a | s -> a where
    roleMapping :: Functor f => (a -> f a) -> s -> f s

instance HasRoleMapping s a => HasRoleMapping (TF.Resource p s) a where
    roleMapping = TF.configuration . roleMapping

class HasRoles s a | s -> a where
    roles :: Functor f => (a -> f a) -> s -> f s

instance HasRoles s a => HasRoles (TF.Resource p s) a where
    roles = TF.configuration . roles

class HasRootBlockDevice s a | s -> a where
    rootBlockDevice :: Functor f => (a -> f a) -> s -> f s

instance HasRootBlockDevice s a => HasRootBlockDevice (TF.Resource p s) a where
    rootBlockDevice = TF.configuration . rootBlockDevice

class HasRootDeviceName s a | s -> a where
    rootDeviceName :: Functor f => (a -> f a) -> s -> f s

instance HasRootDeviceName s a => HasRootDeviceName (TF.Resource p s) a where
    rootDeviceName = TF.configuration . rootDeviceName

class HasRootDeviceType s a | s -> a where
    rootDeviceType :: Functor f => (a -> f a) -> s -> f s

instance HasRootDeviceType s a => HasRootDeviceType (TF.Resource p s) a where
    rootDeviceType = TF.configuration . rootDeviceType

class HasRootPassword s a | s -> a where
    rootPassword :: Functor f => (a -> f a) -> s -> f s

instance HasRootPassword s a => HasRootPassword (TF.Resource p s) a where
    rootPassword = TF.configuration . rootPassword

class HasRootPasswordOnAllInstances s a | s -> a where
    rootPasswordOnAllInstances :: Functor f => (a -> f a) -> s -> f s

instance HasRootPasswordOnAllInstances s a => HasRootPasswordOnAllInstances (TF.Resource p s) a where
    rootPasswordOnAllInstances = TF.configuration . rootPasswordOnAllInstances

class HasRoute s a | s -> a where
    route :: Functor f => (a -> f a) -> s -> f s

instance HasRoute s a => HasRoute (TF.Resource p s) a where
    route = TF.configuration . route

class HasRouteTableId s a | s -> a where
    routeTableId :: Functor f => (a -> f a) -> s -> f s

instance HasRouteTableId s a => HasRouteTableId (TF.Resource p s) a where
    routeTableId = TF.configuration . routeTableId

class HasRouteTableIds s a | s -> a where
    routeTableIds :: Functor f => (a -> f a) -> s -> f s

instance HasRouteTableIds s a => HasRouteTableIds (TF.Resource p s) a where
    routeTableIds = TF.configuration . routeTableIds

class HasRubyVersion s a | s -> a where
    rubyVersion :: Functor f => (a -> f a) -> s -> f s

instance HasRubyVersion s a => HasRubyVersion (TF.Resource p s) a where
    rubyVersion = TF.configuration . rubyVersion

class HasRubygemsVersion s a | s -> a where
    rubygemsVersion :: Functor f => (a -> f a) -> s -> f s

instance HasRubygemsVersion s a => HasRubygemsVersion (TF.Resource p s) a where
    rubygemsVersion = TF.configuration . rubygemsVersion

class HasRule s a | s -> a where
    rule :: Functor f => (a -> f a) -> s -> f s

instance HasRule s a => HasRule (TF.Resource p s) a where
    rule = TF.configuration . rule

class HasRuleAction s a | s -> a where
    ruleAction :: Functor f => (a -> f a) -> s -> f s

instance HasRuleAction s a => HasRuleAction (TF.Resource p s) a where
    ruleAction = TF.configuration . ruleAction

class HasRuleNumber s a | s -> a where
    ruleNumber :: Functor f => (a -> f a) -> s -> f s

instance HasRuleNumber s a => HasRuleNumber (TF.Resource p s) a where
    ruleNumber = TF.configuration . ruleNumber

class HasRuleSetName s a | s -> a where
    ruleSetName :: Functor f => (a -> f a) -> s -> f s

instance HasRuleSetName s a => HasRuleSetName (TF.Resource p s) a where
    ruleSetName = TF.configuration . ruleSetName

class HasRules s a | s -> a where
    rules :: Functor f => (a -> f a) -> s -> f s

instance HasRules s a => HasRules (TF.Resource p s) a where
    rules = TF.configuration . rules

class HasRulesPackageArns s a | s -> a where
    rulesPackageArns :: Functor f => (a -> f a) -> s -> f s

instance HasRulesPackageArns s a => HasRulesPackageArns (TF.Resource p s) a where
    rulesPackageArns = TF.configuration . rulesPackageArns

class HasRunCommandTargets s a | s -> a where
    runCommandTargets :: Functor f => (a -> f a) -> s -> f s

instance HasRunCommandTargets s a => HasRunCommandTargets (TF.Resource p s) a where
    runCommandTargets = TF.configuration . runCommandTargets

class HasRuntime s a | s -> a where
    runtime :: Functor f => (a -> f a) -> s -> f s

instance HasRuntime s a => HasRuntime (TF.Resource p s) a where
    runtime = TF.configuration . runtime

class HasS3Action s a | s -> a where
    s3Action :: Functor f => (a -> f a) -> s -> f s

instance HasS3Action s a => HasS3Action (TF.Resource p s) a where
    s3Action = TF.configuration . s3Action

class HasS3Bucket s a | s -> a where
    s3Bucket :: Functor f => (a -> f a) -> s -> f s

instance HasS3Bucket s a => HasS3Bucket (TF.Resource p s) a where
    s3Bucket = TF.configuration . s3Bucket

class HasS3BucketName s a | s -> a where
    s3BucketName :: Functor f => (a -> f a) -> s -> f s

instance HasS3BucketName s a => HasS3BucketName (TF.Resource p s) a where
    s3BucketName = TF.configuration . s3BucketName

class HasS3Configuration s a | s -> a where
    s3Configuration :: Functor f => (a -> f a) -> s -> f s

instance HasS3Configuration s a => HasS3Configuration (TF.Resource p s) a where
    s3Configuration = TF.configuration . s3Configuration

class HasS3Destination s a | s -> a where
    s3Destination :: Functor f => (a -> f a) -> s -> f s

instance HasS3Destination s a => HasS3Destination (TF.Resource p s) a where
    s3Destination = TF.configuration . s3Destination

class HasS3Key s a | s -> a where
    s3Key :: Functor f => (a -> f a) -> s -> f s

instance HasS3Key s a => HasS3Key (TF.Resource p s) a where
    s3Key = TF.configuration . s3Key

class HasS3KeyPrefix s a | s -> a where
    s3KeyPrefix :: Functor f => (a -> f a) -> s -> f s

instance HasS3KeyPrefix s a => HasS3KeyPrefix (TF.Resource p s) a where
    s3KeyPrefix = TF.configuration . s3KeyPrefix

class HasS3ObjectVersion s a | s -> a where
    s3ObjectVersion :: Functor f => (a -> f a) -> s -> f s

instance HasS3ObjectVersion s a => HasS3ObjectVersion (TF.Resource p s) a where
    s3ObjectVersion = TF.configuration . s3ObjectVersion

class HasSamlMetadataDocument s a | s -> a where
    samlMetadataDocument :: Functor f => (a -> f a) -> s -> f s

instance HasSamlMetadataDocument s a => HasSamlMetadataDocument (TF.Resource p s) a where
    samlMetadataDocument = TF.configuration . samlMetadataDocument

class HasSamlProviderArns s a | s -> a where
    samlProviderArns :: Functor f => (a -> f a) -> s -> f s

instance HasSamlProviderArns s a => HasSamlProviderArns (TF.Resource p s) a where
    samlProviderArns = TF.configuration . samlProviderArns

class HasScalableDimension s a | s -> a where
    scalableDimension :: Functor f => (a -> f a) -> s -> f s

instance HasScalableDimension s a => HasScalableDimension (TF.Resource p s) a where
    scalableDimension = TF.configuration . scalableDimension

class HasScalableTargetAction s a | s -> a where
    scalableTargetAction :: Functor f => (a -> f a) -> s -> f s

instance HasScalableTargetAction s a => HasScalableTargetAction (TF.Resource p s) a where
    scalableTargetAction = TF.configuration . scalableTargetAction

class HasScanEnabled s a | s -> a where
    scanEnabled :: Functor f => (a -> f a) -> s -> f s

instance HasScanEnabled s a => HasScanEnabled (TF.Resource p s) a where
    scanEnabled = TF.configuration . scanEnabled

class HasSchedule s a | s -> a where
    schedule :: Functor f => (a -> f a) -> s -> f s

instance HasSchedule s a => HasSchedule (TF.Resource p s) a where
    schedule = TF.configuration . schedule

class HasScheduleExpression s a | s -> a where
    scheduleExpression :: Functor f => (a -> f a) -> s -> f s

instance HasScheduleExpression s a => HasScheduleExpression (TF.Resource p s) a where
    scheduleExpression = TF.configuration . scheduleExpression

class HasScheduledActionName s a | s -> a where
    scheduledActionName :: Functor f => (a -> f a) -> s -> f s

instance HasScheduledActionName s a => HasScheduledActionName (TF.Resource p s) a where
    scheduledActionName = TF.configuration . scheduledActionName

class HasSchema s a | s -> a where
    schema :: Functor f => (a -> f a) -> s -> f s

instance HasSchema s a => HasSchema (TF.Resource p s) a where
    schema = TF.configuration . schema

class HasScope s a | s -> a where
    scope :: Functor f => (a -> f a) -> s -> f s

instance HasScope s a => HasScope (TF.Resource p s) a where
    scope = TF.configuration . scope

class HasSearchString s a | s -> a where
    searchString :: Functor f => (a -> f a) -> s -> f s

instance HasSearchString s a => HasSearchString (TF.Resource p s) a where
    searchString = TF.configuration . searchString

class HasSecurityConfiguration s a | s -> a where
    securityConfiguration :: Functor f => (a -> f a) -> s -> f s

instance HasSecurityConfiguration s a => HasSecurityConfiguration (TF.Resource p s) a where
    securityConfiguration = TF.configuration . securityConfiguration

class HasSecurityGroupId s a | s -> a where
    securityGroupId :: Functor f => (a -> f a) -> s -> f s

instance HasSecurityGroupId s a => HasSecurityGroupId (TF.Resource p s) a where
    securityGroupId = TF.configuration . securityGroupId

class HasSecurityGroupIds s a | s -> a where
    securityGroupIds :: Functor f => (a -> f a) -> s -> f s

instance HasSecurityGroupIds s a => HasSecurityGroupIds (TF.Resource p s) a where
    securityGroupIds = TF.configuration . securityGroupIds

class HasSecurityGroupNames s a | s -> a where
    securityGroupNames :: Functor f => (a -> f a) -> s -> f s

instance HasSecurityGroupNames s a => HasSecurityGroupNames (TF.Resource p s) a where
    securityGroupNames = TF.configuration . securityGroupNames

class HasSecurityGroups s a | s -> a where
    securityGroups :: Functor f => (a -> f a) -> s -> f s

instance HasSecurityGroups s a => HasSecurityGroups (TF.Resource p s) a where
    securityGroups = TF.configuration . securityGroups

class HasSelectionPattern s a | s -> a where
    selectionPattern :: Functor f => (a -> f a) -> s -> f s

instance HasSelectionPattern s a => HasSelectionPattern (TF.Resource p s) a where
    selectionPattern = TF.configuration . selectionPattern

class HasSelf s a | s -> a where
    self :: Functor f => (a -> f a) -> s -> f s

instance HasSelf s a => HasSelf (TF.Resource p s) a where
    self = TF.configuration . self

class HasServerName s a | s -> a where
    serverName :: Functor f => (a -> f a) -> s -> f s

instance HasServerName s a => HasServerName (TF.Resource p s) a where
    serverName = TF.configuration . serverName

class HasServerSideEncryption s a | s -> a where
    serverSideEncryption :: Functor f => (a -> f a) -> s -> f s

instance HasServerSideEncryption s a => HasServerSideEncryption (TF.Resource p s) a where
    serverSideEncryption = TF.configuration . serverSideEncryption

class HasServerSideEncryptionConfiguration s a | s -> a where
    serverSideEncryptionConfiguration :: Functor f => (a -> f a) -> s -> f s

instance HasServerSideEncryptionConfiguration s a => HasServerSideEncryptionConfiguration (TF.Resource p s) a where
    serverSideEncryptionConfiguration = TF.configuration . serverSideEncryptionConfiguration

class HasServiceAccessRole s a | s -> a where
    serviceAccessRole :: Functor f => (a -> f a) -> s -> f s

instance HasServiceAccessRole s a => HasServiceAccessRole (TF.Resource p s) a where
    serviceAccessRole = TF.configuration . serviceAccessRole

class HasServiceName s a | s -> a where
    serviceName :: Functor f => (a -> f a) -> s -> f s

instance HasServiceName s a => HasServiceName (TF.Resource p s) a where
    serviceName = TF.configuration . serviceName

class HasServiceNamespace s a | s -> a where
    serviceNamespace :: Functor f => (a -> f a) -> s -> f s

instance HasServiceNamespace s a => HasServiceNamespace (TF.Resource p s) a where
    serviceNamespace = TF.configuration . serviceNamespace

class HasServiceRole s a | s -> a where
    serviceRole :: Functor f => (a -> f a) -> s -> f s

instance HasServiceRole s a => HasServiceRole (TF.Resource p s) a where
    serviceRole = TF.configuration . serviceRole

class HasServiceRoleArn s a | s -> a where
    serviceRoleArn :: Functor f => (a -> f a) -> s -> f s

instance HasServiceRoleArn s a => HasServiceRoleArn (TF.Resource p s) a where
    serviceRoleArn = TF.configuration . serviceRoleArn

class HasSetIdentifier s a | s -> a where
    setIdentifier :: Functor f => (a -> f a) -> s -> f s

instance HasSetIdentifier s a => HasSetIdentifier (TF.Resource p s) a where
    setIdentifier = TF.configuration . setIdentifier

class HasSetting s a | s -> a where
    setting :: Functor f => (a -> f a) -> s -> f s

instance HasSetting s a => HasSetting (TF.Resource p s) a where
    setting = TF.configuration . setting

class HasSettings s a | s -> a where
    settings :: Functor f => (a -> f a) -> s -> f s

instance HasSettings s a => HasSettings (TF.Resource p s) a where
    settings = TF.configuration . settings

class HasShardCount s a | s -> a where
    shardCount :: Functor f => (a -> f a) -> s -> f s

instance HasShardCount s a => HasShardCount (TF.Resource p s) a where
    shardCount = TF.configuration . shardCount

class HasShardLevelMetrics s a | s -> a where
    shardLevelMetrics :: Functor f => (a -> f a) -> s -> f s

instance HasShardLevelMetrics s a => HasShardLevelMetrics (TF.Resource p s) a where
    shardLevelMetrics = TF.configuration . shardLevelMetrics

class HasShortName s a | s -> a where
    shortName :: Functor f => (a -> f a) -> s -> f s

instance HasShortName s a => HasShortName (TF.Resource p s) a where
    shortName = TF.configuration . shortName

class HasSize s a | s -> a where
    size :: Functor f => (a -> f a) -> s -> f s

instance HasSize s a => HasSize (TF.Resource p s) a where
    size = TF.configuration . size

class HasSizeConstraints s a | s -> a where
    sizeConstraints :: Functor f => (a -> f a) -> s -> f s

instance HasSizeConstraints s a => HasSizeConstraints (TF.Resource p s) a where
    sizeConstraints = TF.configuration . sizeConstraints

class HasSkipDestroy s a | s -> a where
    skipDestroy :: Functor f => (a -> f a) -> s -> f s

instance HasSkipDestroy s a => HasSkipDestroy (TF.Resource p s) a where
    skipDestroy = TF.configuration . skipDestroy

class HasSkipFinalSnapshot s a | s -> a where
    skipFinalSnapshot :: Functor f => (a -> f a) -> s -> f s

instance HasSkipFinalSnapshot s a => HasSkipFinalSnapshot (TF.Resource p s) a where
    skipFinalSnapshot = TF.configuration . skipFinalSnapshot

class HasSmsAuthenticationMessage s a | s -> a where
    smsAuthenticationMessage :: Functor f => (a -> f a) -> s -> f s

instance HasSmsAuthenticationMessage s a => HasSmsAuthenticationMessage (TF.Resource p s) a where
    smsAuthenticationMessage = TF.configuration . smsAuthenticationMessage

class HasSmsConfiguration s a | s -> a where
    smsConfiguration :: Functor f => (a -> f a) -> s -> f s

instance HasSmsConfiguration s a => HasSmsConfiguration (TF.Resource p s) a where
    smsConfiguration = TF.configuration . smsConfiguration

class HasSmsVerificationMessage s a | s -> a where
    smsVerificationMessage :: Functor f => (a -> f a) -> s -> f s

instance HasSmsVerificationMessage s a => HasSmsVerificationMessage (TF.Resource p s) a where
    smsVerificationMessage = TF.configuration . smsVerificationMessage

class HasSnapshotArns s a | s -> a where
    snapshotArns :: Functor f => (a -> f a) -> s -> f s

instance HasSnapshotArns s a => HasSnapshotArns (TF.Resource p s) a where
    snapshotArns = TF.configuration . snapshotArns

class HasSnapshotClusterIdentifier s a | s -> a where
    snapshotClusterIdentifier :: Functor f => (a -> f a) -> s -> f s

instance HasSnapshotClusterIdentifier s a => HasSnapshotClusterIdentifier (TF.Resource p s) a where
    snapshotClusterIdentifier = TF.configuration . snapshotClusterIdentifier

class HasSnapshotCopy s a | s -> a where
    snapshotCopy :: Functor f => (a -> f a) -> s -> f s

instance HasSnapshotCopy s a => HasSnapshotCopy (TF.Resource p s) a where
    snapshotCopy = TF.configuration . snapshotCopy

class HasSnapshotDeliveryProperties s a | s -> a where
    snapshotDeliveryProperties :: Functor f => (a -> f a) -> s -> f s

instance HasSnapshotDeliveryProperties s a => HasSnapshotDeliveryProperties (TF.Resource p s) a where
    snapshotDeliveryProperties = TF.configuration . snapshotDeliveryProperties

class HasSnapshotId s a | s -> a where
    snapshotId :: Functor f => (a -> f a) -> s -> f s

instance HasSnapshotId s a => HasSnapshotId (TF.Resource p s) a where
    snapshotId = TF.configuration . snapshotId

class HasSnapshotIdentifier s a | s -> a where
    snapshotIdentifier :: Functor f => (a -> f a) -> s -> f s

instance HasSnapshotIdentifier s a => HasSnapshotIdentifier (TF.Resource p s) a where
    snapshotIdentifier = TF.configuration . snapshotIdentifier

class HasSnapshotName s a | s -> a where
    snapshotName :: Functor f => (a -> f a) -> s -> f s

instance HasSnapshotName s a => HasSnapshotName (TF.Resource p s) a where
    snapshotName = TF.configuration . snapshotName

class HasSnapshotOptions s a | s -> a where
    snapshotOptions :: Functor f => (a -> f a) -> s -> f s

instance HasSnapshotOptions s a => HasSnapshotOptions (TF.Resource p s) a where
    snapshotOptions = TF.configuration . snapshotOptions

class HasSnapshotRetentionLimit s a | s -> a where
    snapshotRetentionLimit :: Functor f => (a -> f a) -> s -> f s

instance HasSnapshotRetentionLimit s a => HasSnapshotRetentionLimit (TF.Resource p s) a where
    snapshotRetentionLimit = TF.configuration . snapshotRetentionLimit

class HasSnapshotWindow s a | s -> a where
    snapshotWindow :: Functor f => (a -> f a) -> s -> f s

instance HasSnapshotWindow s a => HasSnapshotWindow (TF.Resource p s) a where
    snapshotWindow = TF.configuration . snapshotWindow

class HasSnapshotWithoutReboot s a | s -> a where
    snapshotWithoutReboot :: Functor f => (a -> f a) -> s -> f s

instance HasSnapshotWithoutReboot s a => HasSnapshotWithoutReboot (TF.Resource p s) a where
    snapshotWithoutReboot = TF.configuration . snapshotWithoutReboot

class HasSnsAction s a | s -> a where
    snsAction :: Functor f => (a -> f a) -> s -> f s

instance HasSnsAction s a => HasSnsAction (TF.Resource p s) a where
    snsAction = TF.configuration . snsAction

class HasSnsDestination s a | s -> a where
    snsDestination :: Functor f => (a -> f a) -> s -> f s

instance HasSnsDestination s a => HasSnsDestination (TF.Resource p s) a where
    snsDestination = TF.configuration . snsDestination

class HasSnsTopic s a | s -> a where
    snsTopic :: Functor f => (a -> f a) -> s -> f s

instance HasSnsTopic s a => HasSnsTopic (TF.Resource p s) a where
    snsTopic = TF.configuration . snsTopic

class HasSnsTopicArn s a | s -> a where
    snsTopicArn :: Functor f => (a -> f a) -> s -> f s

instance HasSnsTopicArn s a => HasSnsTopicArn (TF.Resource p s) a where
    snsTopicArn = TF.configuration . snsTopicArn

class HasSnsTopicName s a | s -> a where
    snsTopicName :: Functor f => (a -> f a) -> s -> f s

instance HasSnsTopicName s a => HasSnsTopicName (TF.Resource p s) a where
    snsTopicName = TF.configuration . snsTopicName

class HasSolutionStackName s a | s -> a where
    solutionStackName :: Functor f => (a -> f a) -> s -> f s

instance HasSolutionStackName s a => HasSolutionStackName (TF.Resource p s) a where
    solutionStackName = TF.configuration . solutionStackName

class HasSource s a | s -> a where
    source :: Functor f => (a -> f a) -> s -> f s

instance HasSource s a => HasSource (TF.Resource p s) a where
    source = TF.configuration . source

class HasSourceAccount s a | s -> a where
    sourceAccount :: Functor f => (a -> f a) -> s -> f s

instance HasSourceAccount s a => HasSourceAccount (TF.Resource p s) a where
    sourceAccount = TF.configuration . sourceAccount

class HasSourceAmiId s a | s -> a where
    sourceAmiId :: Functor f => (a -> f a) -> s -> f s

instance HasSourceAmiId s a => HasSourceAmiId (TF.Resource p s) a where
    sourceAmiId = TF.configuration . sourceAmiId

class HasSourceAmiRegion s a | s -> a where
    sourceAmiRegion :: Functor f => (a -> f a) -> s -> f s

instance HasSourceAmiRegion s a => HasSourceAmiRegion (TF.Resource p s) a where
    sourceAmiRegion = TF.configuration . sourceAmiRegion

class HasSourceArn s a | s -> a where
    sourceArn :: Functor f => (a -> f a) -> s -> f s

instance HasSourceArn s a => HasSourceArn (TF.Resource p s) a where
    sourceArn = TF.configuration . sourceArn

class HasSourceCodeHash s a | s -> a where
    sourceCodeHash :: Functor f => (a -> f a) -> s -> f s

instance HasSourceCodeHash s a => HasSourceCodeHash (TF.Resource p s) a where
    sourceCodeHash = TF.configuration . sourceCodeHash

class HasSourceDestCheck s a | s -> a where
    sourceDestCheck :: Functor f => (a -> f a) -> s -> f s

instance HasSourceDestCheck s a => HasSourceDestCheck (TF.Resource p s) a where
    sourceDestCheck = TF.configuration . sourceDestCheck

class HasSourceEndpointArn s a | s -> a where
    sourceEndpointArn :: Functor f => (a -> f a) -> s -> f s

instance HasSourceEndpointArn s a => HasSourceEndpointArn (TF.Resource p s) a where
    sourceEndpointArn = TF.configuration . sourceEndpointArn

class HasSourceIds s a | s -> a where
    sourceIds :: Functor f => (a -> f a) -> s -> f s

instance HasSourceIds s a => HasSourceIds (TF.Resource p s) a where
    sourceIds = TF.configuration . sourceIds

class HasSourceInstanceId s a | s -> a where
    sourceInstanceId :: Functor f => (a -> f a) -> s -> f s

instance HasSourceInstanceId s a => HasSourceInstanceId (TF.Resource p s) a where
    sourceInstanceId = TF.configuration . sourceInstanceId

class HasSourceSecurityGroupId s a | s -> a where
    sourceSecurityGroupId :: Functor f => (a -> f a) -> s -> f s

instance HasSourceSecurityGroupId s a => HasSourceSecurityGroupId (TF.Resource p s) a where
    sourceSecurityGroupId = TF.configuration . sourceSecurityGroupId

class HasSourceType s a | s -> a where
    sourceType :: Functor f => (a -> f a) -> s -> f s

instance HasSourceType s a => HasSourceType (TF.Resource p s) a where
    sourceType = TF.configuration . sourceType

class HasSpotPrice s a | s -> a where
    spotPrice :: Functor f => (a -> f a) -> s -> f s

instance HasSpotPrice s a => HasSpotPrice (TF.Resource p s) a where
    spotPrice = TF.configuration . spotPrice

class HasSpotType s a | s -> a where
    spotType :: Functor f => (a -> f a) -> s -> f s

instance HasSpotType s a => HasSpotType (TF.Resource p s) a where
    spotType = TF.configuration . spotType

class HasSqlInjectionMatchTuples s a | s -> a where
    sqlInjectionMatchTuples :: Functor f => (a -> f a) -> s -> f s

instance HasSqlInjectionMatchTuples s a => HasSqlInjectionMatchTuples (TF.Resource p s) a where
    sqlInjectionMatchTuples = TF.configuration . sqlInjectionMatchTuples

class HasSshKeyName s a | s -> a where
    sshKeyName :: Functor f => (a -> f a) -> s -> f s

instance HasSshKeyName s a => HasSshKeyName (TF.Resource p s) a where
    sshKeyName = TF.configuration . sshKeyName

class HasSshPublicKey s a | s -> a where
    sshPublicKey :: Functor f => (a -> f a) -> s -> f s

instance HasSshPublicKey s a => HasSshPublicKey (TF.Resource p s) a where
    sshPublicKey = TF.configuration . sshPublicKey

class HasSshUsername s a | s -> a where
    sshUsername :: Functor f => (a -> f a) -> s -> f s

instance HasSshUsername s a => HasSshUsername (TF.Resource p s) a where
    sshUsername = TF.configuration . sshUsername

class HasSslConfiguration s a | s -> a where
    sslConfiguration :: Functor f => (a -> f a) -> s -> f s

instance HasSslConfiguration s a => HasSslConfiguration (TF.Resource p s) a where
    sslConfiguration = TF.configuration . sslConfiguration

class HasSslMode s a | s -> a where
    sslMode :: Functor f => (a -> f a) -> s -> f s

instance HasSslMode s a => HasSslMode (TF.Resource p s) a where
    sslMode = TF.configuration . sslMode

class HasSslPolicy s a | s -> a where
    sslPolicy :: Functor f => (a -> f a) -> s -> f s

instance HasSslPolicy s a => HasSslPolicy (TF.Resource p s) a where
    sslPolicy = TF.configuration . sslPolicy

class HasStackId s a | s -> a where
    stackId :: Functor f => (a -> f a) -> s -> f s

instance HasStackId s a => HasStackId (TF.Resource p s) a where
    stackId = TF.configuration . stackId

class HasStage s a | s -> a where
    stage :: Functor f => (a -> f a) -> s -> f s

instance HasStage s a => HasStage (TF.Resource p s) a where
    stage = TF.configuration . stage

class HasStageDescription s a | s -> a where
    stageDescription :: Functor f => (a -> f a) -> s -> f s

instance HasStageDescription s a => HasStageDescription (TF.Resource p s) a where
    stageDescription = TF.configuration . stageDescription

class HasStageKey s a | s -> a where
    stageKey :: Functor f => (a -> f a) -> s -> f s

instance HasStageKey s a => HasStageKey (TF.Resource p s) a where
    stageKey = TF.configuration . stageKey

class HasStageName s a | s -> a where
    stageName :: Functor f => (a -> f a) -> s -> f s

instance HasStageName s a => HasStageName (TF.Resource p s) a where
    stageName = TF.configuration . stageName

class HasStartTime s a | s -> a where
    startTime :: Functor f => (a -> f a) -> s -> f s

instance HasStartTime s a => HasStartTime (TF.Resource p s) a where
    startTime = TF.configuration . startTime

class HasStartingPosition s a | s -> a where
    startingPosition :: Functor f => (a -> f a) -> s -> f s

instance HasStartingPosition s a => HasStartingPosition (TF.Resource p s) a where
    startingPosition = TF.configuration . startingPosition

class HasState s a | s -> a where
    state :: Functor f => (a -> f a) -> s -> f s

instance HasState s a => HasState (TF.Resource p s) a where
    state = TF.configuration . state

class HasStatementId s a | s -> a where
    statementId :: Functor f => (a -> f a) -> s -> f s

instance HasStatementId s a => HasStatementId (TF.Resource p s) a where
    statementId = TF.configuration . statementId

class HasStaticIpName s a | s -> a where
    staticIpName :: Functor f => (a -> f a) -> s -> f s

instance HasStaticIpName s a => HasStaticIpName (TF.Resource p s) a where
    staticIpName = TF.configuration . staticIpName

class HasStaticRoutesOnly s a | s -> a where
    staticRoutesOnly :: Functor f => (a -> f a) -> s -> f s

instance HasStaticRoutesOnly s a => HasStaticRoutesOnly (TF.Resource p s) a where
    staticRoutesOnly = TF.configuration . staticRoutesOnly

class HasStatistic s a | s -> a where
    statistic :: Functor f => (a -> f a) -> s -> f s

instance HasStatistic s a => HasStatistic (TF.Resource p s) a where
    statistic = TF.configuration . statistic

class HasStatsEnabled s a | s -> a where
    statsEnabled :: Functor f => (a -> f a) -> s -> f s

instance HasStatsEnabled s a => HasStatsEnabled (TF.Resource p s) a where
    statsEnabled = TF.configuration . statsEnabled

class HasStatsPassword s a | s -> a where
    statsPassword :: Functor f => (a -> f a) -> s -> f s

instance HasStatsPassword s a => HasStatsPassword (TF.Resource p s) a where
    statsPassword = TF.configuration . statsPassword

class HasStatsUrl s a | s -> a where
    statsUrl :: Functor f => (a -> f a) -> s -> f s

instance HasStatsUrl s a => HasStatsUrl (TF.Resource p s) a where
    statsUrl = TF.configuration . statsUrl

class HasStatsUser s a | s -> a where
    statsUser :: Functor f => (a -> f a) -> s -> f s

instance HasStatsUser s a => HasStatsUser (TF.Resource p s) a where
    statsUser = TF.configuration . statsUser

class HasStatus s a | s -> a where
    status :: Functor f => (a -> f a) -> s -> f s

instance HasStatus s a => HasStatus (TF.Resource p s) a where
    status = TF.configuration . status

class HasStatusCode s a | s -> a where
    statusCode :: Functor f => (a -> f a) -> s -> f s

instance HasStatusCode s a => HasStatusCode (TF.Resource p s) a where
    statusCode = TF.configuration . statusCode

class HasStepScalingPolicyConfiguration s a | s -> a where
    stepScalingPolicyConfiguration :: Functor f => (a -> f a) -> s -> f s

instance HasStepScalingPolicyConfiguration s a => HasStepScalingPolicyConfiguration (TF.Resource p s) a where
    stepScalingPolicyConfiguration = TF.configuration . stepScalingPolicyConfiguration

class HasStickiness s a | s -> a where
    stickiness :: Functor f => (a -> f a) -> s -> f s

instance HasStickiness s a => HasStickiness (TF.Resource p s) a where
    stickiness = TF.configuration . stickiness

class HasStopAction s a | s -> a where
    stopAction :: Functor f => (a -> f a) -> s -> f s

instance HasStopAction s a => HasStopAction (TF.Resource p s) a where
    stopAction = TF.configuration . stopAction

class HasStorageClass s a | s -> a where
    storageClass :: Functor f => (a -> f a) -> s -> f s

instance HasStorageClass s a => HasStorageClass (TF.Resource p s) a where
    storageClass = TF.configuration . storageClass

class HasStorageEncrypted s a | s -> a where
    storageEncrypted :: Functor f => (a -> f a) -> s -> f s

instance HasStorageEncrypted s a => HasStorageEncrypted (TF.Resource p s) a where
    storageEncrypted = TF.configuration . storageEncrypted

class HasStorageType s a | s -> a where
    storageType :: Functor f => (a -> f a) -> s -> f s

instance HasStorageType s a => HasStorageType (TF.Resource p s) a where
    storageType = TF.configuration . storageType

class HasStrategy s a | s -> a where
    strategy :: Functor f => (a -> f a) -> s -> f s

instance HasStrategy s a => HasStrategy (TF.Resource p s) a where
    strategy = TF.configuration . strategy

class HasStreamEnabled s a | s -> a where
    streamEnabled :: Functor f => (a -> f a) -> s -> f s

instance HasStreamEnabled s a => HasStreamEnabled (TF.Resource p s) a where
    streamEnabled = TF.configuration . streamEnabled

class HasStreamViewType s a | s -> a where
    streamViewType :: Functor f => (a -> f a) -> s -> f s

instance HasStreamViewType s a => HasStreamViewType (TF.Resource p s) a where
    streamViewType = TF.configuration . streamViewType

class HasSubject s a | s -> a where
    subject :: Functor f => (a -> f a) -> s -> f s

instance HasSubject s a => HasSubject (TF.Resource p s) a where
    subject = TF.configuration . subject

class HasSubnetGroupName s a | s -> a where
    subnetGroupName :: Functor f => (a -> f a) -> s -> f s

instance HasSubnetGroupName s a => HasSubnetGroupName (TF.Resource p s) a where
    subnetGroupName = TF.configuration . subnetGroupName

class HasSubnetId s a | s -> a where
    subnetId :: Functor f => (a -> f a) -> s -> f s

instance HasSubnetId s a => HasSubnetId (TF.Resource p s) a where
    subnetId = TF.configuration . subnetId

class HasSubnetIds s a | s -> a where
    subnetIds :: Functor f => (a -> f a) -> s -> f s

instance HasSubnetIds s a => HasSubnetIds (TF.Resource p s) a where
    subnetIds = TF.configuration . subnetIds

class HasSubnetMapping s a | s -> a where
    subnetMapping :: Functor f => (a -> f a) -> s -> f s

instance HasSubnetMapping s a => HasSubnetMapping (TF.Resource p s) a where
    subnetMapping = TF.configuration . subnetMapping

class HasSubnets s a | s -> a where
    subnets :: Functor f => (a -> f a) -> s -> f s

instance HasSubnets s a => HasSubnets (TF.Resource p s) a where
    subnets = TF.configuration . subnets

class HasSupportedIdentityProviders s a | s -> a where
    supportedIdentityProviders :: Functor f => (a -> f a) -> s -> f s

instance HasSupportedIdentityProviders s a => HasSupportedIdentityProviders (TF.Resource p s) a where
    supportedIdentityProviders = TF.configuration . supportedIdentityProviders

class HasSupportedLoginProviders s a | s -> a where
    supportedLoginProviders :: Functor f => (a -> f a) -> s -> f s

instance HasSupportedLoginProviders s a => HasSupportedLoginProviders (TF.Resource p s) a where
    supportedLoginProviders = TF.configuration . supportedLoginProviders

class HasSuspendedProcesses s a | s -> a where
    suspendedProcesses :: Functor f => (a -> f a) -> s -> f s

instance HasSuspendedProcesses s a => HasSuspendedProcesses (TF.Resource p s) a where
    suspendedProcesses = TF.configuration . suspendedProcesses

class HasSystemPackages s a | s -> a where
    systemPackages :: Functor f => (a -> f a) -> s -> f s

instance HasSystemPackages s a => HasSystemPackages (TF.Resource p s) a where
    systemPackages = TF.configuration . systemPackages

class HasTableMappings s a | s -> a where
    tableMappings :: Functor f => (a -> f a) -> s -> f s

instance HasTableMappings s a => HasTableMappings (TF.Resource p s) a where
    tableMappings = TF.configuration . tableMappings

class HasTag s a | s -> a where
    tag :: Functor f => (a -> f a) -> s -> f s

instance HasTag s a => HasTag (TF.Resource p s) a where
    tag = TF.configuration . tag

class HasTags s a | s -> a where
    tags :: Functor f => (a -> f a) -> s -> f s

instance HasTags s a => HasTags (TF.Resource p s) a where
    tags = TF.configuration . tags

class HasTargetArn s a | s -> a where
    targetArn :: Functor f => (a -> f a) -> s -> f s

instance HasTargetArn s a => HasTargetArn (TF.Resource p s) a where
    targetArn = TF.configuration . targetArn

class HasTargetCapacity s a | s -> a where
    targetCapacity :: Functor f => (a -> f a) -> s -> f s

instance HasTargetCapacity s a => HasTargetCapacity (TF.Resource p s) a where
    targetCapacity = TF.configuration . targetCapacity

class HasTargetEndpointArn s a | s -> a where
    targetEndpointArn :: Functor f => (a -> f a) -> s -> f s

instance HasTargetEndpointArn s a => HasTargetEndpointArn (TF.Resource p s) a where
    targetEndpointArn = TF.configuration . targetEndpointArn

class HasTargetGroupArn s a | s -> a where
    targetGroupArn :: Functor f => (a -> f a) -> s -> f s

instance HasTargetGroupArn s a => HasTargetGroupArn (TF.Resource p s) a where
    targetGroupArn = TF.configuration . targetGroupArn

class HasTargetGroupArns s a | s -> a where
    targetGroupArns :: Functor f => (a -> f a) -> s -> f s

instance HasTargetGroupArns s a => HasTargetGroupArns (TF.Resource p s) a where
    targetGroupArns = TF.configuration . targetGroupArns

class HasTargetId s a | s -> a where
    targetId :: Functor f => (a -> f a) -> s -> f s

instance HasTargetId s a => HasTargetId (TF.Resource p s) a where
    targetId = TF.configuration . targetId

class HasTargetKeyId s a | s -> a where
    targetKeyId :: Functor f => (a -> f a) -> s -> f s

instance HasTargetKeyId s a => HasTargetKeyId (TF.Resource p s) a where
    targetKeyId = TF.configuration . targetKeyId

class HasTargetTrackingScalingPolicyConfiguration s a | s -> a where
    targetTrackingScalingPolicyConfiguration :: Functor f => (a -> f a) -> s -> f s

instance HasTargetTrackingScalingPolicyConfiguration s a => HasTargetTrackingScalingPolicyConfiguration (TF.Resource p s) a where
    targetTrackingScalingPolicyConfiguration = TF.configuration . targetTrackingScalingPolicyConfiguration

class HasTargetType s a | s -> a where
    targetType :: Functor f => (a -> f a) -> s -> f s

instance HasTargetType s a => HasTargetType (TF.Resource p s) a where
    targetType = TF.configuration . targetType

class HasTargets s a | s -> a where
    targets :: Functor f => (a -> f a) -> s -> f s

instance HasTargets s a => HasTargets (TF.Resource p s) a where
    targets = TF.configuration . targets

class HasTaskArn s a | s -> a where
    taskArn :: Functor f => (a -> f a) -> s -> f s

instance HasTaskArn s a => HasTaskArn (TF.Resource p s) a where
    taskArn = TF.configuration . taskArn

class HasTaskDefinition s a | s -> a where
    taskDefinition :: Functor f => (a -> f a) -> s -> f s

instance HasTaskDefinition s a => HasTaskDefinition (TF.Resource p s) a where
    taskDefinition = TF.configuration . taskDefinition

class HasTaskParameters s a | s -> a where
    taskParameters :: Functor f => (a -> f a) -> s -> f s

instance HasTaskParameters s a => HasTaskParameters (TF.Resource p s) a where
    taskParameters = TF.configuration . taskParameters

class HasTaskType s a | s -> a where
    taskType :: Functor f => (a -> f a) -> s -> f s

instance HasTaskType s a => HasTaskType (TF.Resource p s) a where
    taskType = TF.configuration . taskType

class HasTemplateBody s a | s -> a where
    templateBody :: Functor f => (a -> f a) -> s -> f s

instance HasTemplateBody s a => HasTemplateBody (TF.Resource p s) a where
    templateBody = TF.configuration . templateBody

class HasTemplateName s a | s -> a where
    templateName :: Functor f => (a -> f a) -> s -> f s

instance HasTemplateName s a => HasTemplateName (TF.Resource p s) a where
    templateName = TF.configuration . templateName

class HasTemplateUrl s a | s -> a where
    templateUrl :: Functor f => (a -> f a) -> s -> f s

instance HasTemplateUrl s a => HasTemplateUrl (TF.Resource p s) a where
    templateUrl = TF.configuration . templateUrl

class HasTenancy s a | s -> a where
    tenancy :: Functor f => (a -> f a) -> s -> f s

instance HasTenancy s a => HasTenancy (TF.Resource p s) a where
    tenancy = TF.configuration . tenancy

class HasTerminateInstancesWithExpiration s a | s -> a where
    terminateInstancesWithExpiration :: Functor f => (a -> f a) -> s -> f s

instance HasTerminateInstancesWithExpiration s a => HasTerminateInstancesWithExpiration (TF.Resource p s) a where
    terminateInstancesWithExpiration = TF.configuration . terminateInstancesWithExpiration

class HasTerminationPolicies s a | s -> a where
    terminationPolicies :: Functor f => (a -> f a) -> s -> f s

instance HasTerminationPolicies s a => HasTerminationPolicies (TF.Resource p s) a where
    terminationPolicies = TF.configuration . terminationPolicies

class HasTerminationProtection s a | s -> a where
    terminationProtection :: Functor f => (a -> f a) -> s -> f s

instance HasTerminationProtection s a => HasTerminationProtection (TF.Resource p s) a where
    terminationProtection = TF.configuration . terminationProtection

class HasText s a | s -> a where
    text :: Functor f => (a -> f a) -> s -> f s

instance HasText s a => HasText (TF.Resource p s) a where
    text = TF.configuration . text

class HasThreshold s a | s -> a where
    threshold :: Functor f => (a -> f a) -> s -> f s

instance HasThreshold s a => HasThreshold (TF.Resource p s) a where
    threshold = TF.configuration . threshold

class HasThrottleSettings s a | s -> a where
    throttleSettings :: Functor f => (a -> f a) -> s -> f s

instance HasThrottleSettings s a => HasThrottleSettings (TF.Resource p s) a where
    throttleSettings = TF.configuration . throttleSettings

class HasThumbnailConfig s a | s -> a where
    thumbnailConfig :: Functor f => (a -> f a) -> s -> f s

instance HasThumbnailConfig s a => HasThumbnailConfig (TF.Resource p s) a where
    thumbnailConfig = TF.configuration . thumbnailConfig

class HasThumbnailConfigPermissions s a | s -> a where
    thumbnailConfigPermissions :: Functor f => (a -> f a) -> s -> f s

instance HasThumbnailConfigPermissions s a => HasThumbnailConfigPermissions (TF.Resource p s) a where
    thumbnailConfigPermissions = TF.configuration . thumbnailConfigPermissions

class HasThumbnails s a | s -> a where
    thumbnails :: Functor f => (a -> f a) -> s -> f s

instance HasThumbnails s a => HasThumbnails (TF.Resource p s) a where
    thumbnails = TF.configuration . thumbnails

class HasThumbprintList s a | s -> a where
    thumbprintList :: Functor f => (a -> f a) -> s -> f s

instance HasThumbprintList s a => HasThumbprintList (TF.Resource p s) a where
    thumbprintList = TF.configuration . thumbprintList

class HasTier s a | s -> a where
    tier :: Functor f => (a -> f a) -> s -> f s

instance HasTier s a => HasTier (TF.Resource p s) a where
    tier = TF.configuration . tier

class HasTimeout s a | s -> a where
    timeout :: Functor f => (a -> f a) -> s -> f s

instance HasTimeout s a => HasTimeout (TF.Resource p s) a where
    timeout = TF.configuration . timeout

class HasTimeoutInMinutes s a | s -> a where
    timeoutInMinutes :: Functor f => (a -> f a) -> s -> f s

instance HasTimeoutInMinutes s a => HasTimeoutInMinutes (TF.Resource p s) a where
    timeoutInMinutes = TF.configuration . timeoutInMinutes

class HasTimezone s a | s -> a where
    timezone :: Functor f => (a -> f a) -> s -> f s

instance HasTimezone s a => HasTimezone (TF.Resource p s) a where
    timezone = TF.configuration . timezone

class HasTlsPolicy s a | s -> a where
    tlsPolicy :: Functor f => (a -> f a) -> s -> f s

instance HasTlsPolicy s a => HasTlsPolicy (TF.Resource p s) a where
    tlsPolicy = TF.configuration . tlsPolicy

class HasToPort s a | s -> a where
    toPort :: Functor f => (a -> f a) -> s -> f s

instance HasToPort s a => HasToPort (TF.Resource p s) a where
    toPort = TF.configuration . toPort

class HasTopic s a | s -> a where
    topic :: Functor f => (a -> f a) -> s -> f s

instance HasTopic s a => HasTopic (TF.Resource p s) a where
    topic = TF.configuration . topic

class HasTopicArn s a | s -> a where
    topicArn :: Functor f => (a -> f a) -> s -> f s

instance HasTopicArn s a => HasTopicArn (TF.Resource p s) a where
    topicArn = TF.configuration . topicArn

class HasTrafficType s a | s -> a where
    trafficType :: Functor f => (a -> f a) -> s -> f s

instance HasTrafficType s a => HasTrafficType (TF.Resource p s) a where
    trafficType = TF.configuration . trafficType

class HasTransitEncryptionEnabled s a | s -> a where
    transitEncryptionEnabled :: Functor f => (a -> f a) -> s -> f s

instance HasTransitEncryptionEnabled s a => HasTransitEncryptionEnabled (TF.Resource p s) a where
    transitEncryptionEnabled = TF.configuration . transitEncryptionEnabled

class HasTreatMissingData s a | s -> a where
    treatMissingData :: Functor f => (a -> f a) -> s -> f s

instance HasTreatMissingData s a => HasTreatMissingData (TF.Resource p s) a where
    treatMissingData = TF.configuration . treatMissingData

class HasTriggerConfiguration s a | s -> a where
    triggerConfiguration :: Functor f => (a -> f a) -> s -> f s

instance HasTriggerConfiguration s a => HasTriggerConfiguration (TF.Resource p s) a where
    triggerConfiguration = TF.configuration . triggerConfiguration

class HasTtl s a | s -> a where
    ttl :: Functor f => (a -> f a) -> s -> f s

instance HasTtl s a => HasTtl (TF.Resource p s) a where
    ttl = TF.configuration . ttl

class HasType' s a | s -> a where
    type' :: Functor f => (a -> f a) -> s -> f s

instance HasType' s a => HasType' (TF.Resource p s) a where
    type' = TF.configuration . type'

class HasUnit s a | s -> a where
    unit :: Functor f => (a -> f a) -> s -> f s

instance HasUnit s a => HasUnit (TF.Resource p s) a where
    unit = TF.configuration . unit

class HasUri s a | s -> a where
    uri :: Functor f => (a -> f a) -> s -> f s

instance HasUri s a => HasUri (TF.Resource p s) a where
    uri = TF.configuration . uri

class HasUrl s a | s -> a where
    url :: Functor f => (a -> f a) -> s -> f s

instance HasUrl s a => HasUrl (TF.Resource p s) a where
    url = TF.configuration . url

class HasUsagePlanId s a | s -> a where
    usagePlanId :: Functor f => (a -> f a) -> s -> f s

instance HasUsagePlanId s a => HasUsagePlanId (TF.Resource p s) a where
    usagePlanId = TF.configuration . usagePlanId

class HasUseCustomCookbooks s a | s -> a where
    useCustomCookbooks :: Functor f => (a -> f a) -> s -> f s

instance HasUseCustomCookbooks s a => HasUseCustomCookbooks (TF.Resource p s) a where
    useCustomCookbooks = TF.configuration . useCustomCookbooks

class HasUseEbsOptimizedInstances s a | s -> a where
    useEbsOptimizedInstances :: Functor f => (a -> f a) -> s -> f s

instance HasUseEbsOptimizedInstances s a => HasUseEbsOptimizedInstances (TF.Resource p s) a where
    useEbsOptimizedInstances = TF.configuration . useEbsOptimizedInstances

class HasUseOpsworksSecurityGroups s a | s -> a where
    useOpsworksSecurityGroups :: Functor f => (a -> f a) -> s -> f s

instance HasUseOpsworksSecurityGroups s a => HasUseOpsworksSecurityGroups (TF.Resource p s) a where
    useOpsworksSecurityGroups = TF.configuration . useOpsworksSecurityGroups

class HasUser s a | s -> a where
    user :: Functor f => (a -> f a) -> s -> f s

instance HasUser s a => HasUser (TF.Resource p s) a where
    user = TF.configuration . user

class HasUserArn s a | s -> a where
    userArn :: Functor f => (a -> f a) -> s -> f s

instance HasUserArn s a => HasUserArn (TF.Resource p s) a where
    userArn = TF.configuration . userArn

class HasUserData s a | s -> a where
    userData :: Functor f => (a -> f a) -> s -> f s

instance HasUserData s a => HasUserData (TF.Resource p s) a where
    userData = TF.configuration . userData

class HasUserDataBase64 s a | s -> a where
    userDataBase64 :: Functor f => (a -> f a) -> s -> f s

instance HasUserDataBase64 s a => HasUserDataBase64 (TF.Resource p s) a where
    userDataBase64 = TF.configuration . userDataBase64

class HasUserPoolId s a | s -> a where
    userPoolId :: Functor f => (a -> f a) -> s -> f s

instance HasUserPoolId s a => HasUserPoolId (TF.Resource p s) a where
    userPoolId = TF.configuration . userPoolId

class HasUsername s a | s -> a where
    username :: Functor f => (a -> f a) -> s -> f s

instance HasUsername s a => HasUsername (TF.Resource p s) a where
    username = TF.configuration . username

class HasUsernameAttributes s a | s -> a where
    usernameAttributes :: Functor f => (a -> f a) -> s -> f s

instance HasUsernameAttributes s a => HasUsernameAttributes (TF.Resource p s) a where
    usernameAttributes = TF.configuration . usernameAttributes

class HasUsers s a | s -> a where
    users :: Functor f => (a -> f a) -> s -> f s

instance HasUsers s a => HasUsers (TF.Resource p s) a where
    users = TF.configuration . users

class HasValidUntil s a | s -> a where
    validUntil :: Functor f => (a -> f a) -> s -> f s

instance HasValidUntil s a => HasValidUntil (TF.Resource p s) a where
    validUntil = TF.configuration . validUntil

class HasValue s a | s -> a where
    value :: Functor f => (a -> f a) -> s -> f s

instance HasValue s a => HasValue (TF.Resource p s) a where
    value = TF.configuration . value

class HasVariables s a | s -> a where
    variables :: Functor f => (a -> f a) -> s -> f s

instance HasVariables s a => HasVariables (TF.Resource p s) a where
    variables = TF.configuration . variables

class HasVerificationMessageTemplate s a | s -> a where
    verificationMessageTemplate :: Functor f => (a -> f a) -> s -> f s

instance HasVerificationMessageTemplate s a => HasVerificationMessageTemplate (TF.Resource p s) a where
    verificationMessageTemplate = TF.configuration . verificationMessageTemplate

class HasVersionLabel s a | s -> a where
    versionLabel :: Functor f => (a -> f a) -> s -> f s

instance HasVersionLabel s a => HasVersionLabel (TF.Resource p s) a where
    versionLabel = TF.configuration . versionLabel

class HasVersioning s a | s -> a where
    versioning :: Functor f => (a -> f a) -> s -> f s

instance HasVersioning s a => HasVersioning (TF.Resource p s) a where
    versioning = TF.configuration . versioning

class HasVideo s a | s -> a where
    video :: Functor f => (a -> f a) -> s -> f s

instance HasVideo s a => HasVideo (TF.Resource p s) a where
    video = TF.configuration . video

class HasVideoCodecOptions s a | s -> a where
    videoCodecOptions :: Functor f => (a -> f a) -> s -> f s

instance HasVideoCodecOptions s a => HasVideoCodecOptions (TF.Resource p s) a where
    videoCodecOptions = TF.configuration . videoCodecOptions

class HasVideoWatermarks s a | s -> a where
    videoWatermarks :: Functor f => (a -> f a) -> s -> f s

instance HasVideoWatermarks s a => HasVideoWatermarks (TF.Resource p s) a where
    videoWatermarks = TF.configuration . videoWatermarks

class HasViewerCertificate s a | s -> a where
    viewerCertificate :: Functor f => (a -> f a) -> s -> f s

instance HasViewerCertificate s a => HasViewerCertificate (TF.Resource p s) a where
    viewerCertificate = TF.configuration . viewerCertificate

class HasVirtualizationType s a | s -> a where
    virtualizationType :: Functor f => (a -> f a) -> s -> f s

instance HasVirtualizationType s a => HasVirtualizationType (TF.Resource p s) a where
    virtualizationType = TF.configuration . virtualizationType

class HasVisibilityTimeoutSeconds s a | s -> a where
    visibilityTimeoutSeconds :: Functor f => (a -> f a) -> s -> f s

instance HasVisibilityTimeoutSeconds s a => HasVisibilityTimeoutSeconds (TF.Resource p s) a where
    visibilityTimeoutSeconds = TF.configuration . visibilityTimeoutSeconds

class HasVisibleToAllUsers s a | s -> a where
    visibleToAllUsers :: Functor f => (a -> f a) -> s -> f s

instance HasVisibleToAllUsers s a => HasVisibleToAllUsers (TF.Resource p s) a where
    visibleToAllUsers = TF.configuration . visibleToAllUsers

class HasVolumeId s a | s -> a where
    volumeId :: Functor f => (a -> f a) -> s -> f s

instance HasVolumeId s a => HasVolumeId (TF.Resource p s) a where
    volumeId = TF.configuration . volumeId

class HasVolumeTags s a | s -> a where
    volumeTags :: Functor f => (a -> f a) -> s -> f s

instance HasVolumeTags s a => HasVolumeTags (TF.Resource p s) a where
    volumeTags = TF.configuration . volumeTags

class HasVpc s a | s -> a where
    vpc :: Functor f => (a -> f a) -> s -> f s

instance HasVpc s a => HasVpc (TF.Resource p s) a where
    vpc = TF.configuration . vpc

class HasVpcClassicLinkId s a | s -> a where
    vpcClassicLinkId :: Functor f => (a -> f a) -> s -> f s

instance HasVpcClassicLinkId s a => HasVpcClassicLinkId (TF.Resource p s) a where
    vpcClassicLinkId = TF.configuration . vpcClassicLinkId

class HasVpcClassicLinkSecurityGroups s a | s -> a where
    vpcClassicLinkSecurityGroups :: Functor f => (a -> f a) -> s -> f s

instance HasVpcClassicLinkSecurityGroups s a => HasVpcClassicLinkSecurityGroups (TF.Resource p s) a where
    vpcClassicLinkSecurityGroups = TF.configuration . vpcClassicLinkSecurityGroups

class HasVpcConfig s a | s -> a where
    vpcConfig :: Functor f => (a -> f a) -> s -> f s

instance HasVpcConfig s a => HasVpcConfig (TF.Resource p s) a where
    vpcConfig = TF.configuration . vpcConfig

class HasVpcEndpointId s a | s -> a where
    vpcEndpointId :: Functor f => (a -> f a) -> s -> f s

instance HasVpcEndpointId s a => HasVpcEndpointId (TF.Resource p s) a where
    vpcEndpointId = TF.configuration . vpcEndpointId

class HasVpcId s a | s -> a where
    vpcId :: Functor f => (a -> f a) -> s -> f s

instance HasVpcId s a => HasVpcId (TF.Resource p s) a where
    vpcId = TF.configuration . vpcId

class HasVpcOptions s a | s -> a where
    vpcOptions :: Functor f => (a -> f a) -> s -> f s

instance HasVpcOptions s a => HasVpcOptions (TF.Resource p s) a where
    vpcOptions = TF.configuration . vpcOptions

class HasVpcPeeringConnectionId s a | s -> a where
    vpcPeeringConnectionId :: Functor f => (a -> f a) -> s -> f s

instance HasVpcPeeringConnectionId s a => HasVpcPeeringConnectionId (TF.Resource p s) a where
    vpcPeeringConnectionId = TF.configuration . vpcPeeringConnectionId

class HasVpcRegion s a | s -> a where
    vpcRegion :: Functor f => (a -> f a) -> s -> f s

instance HasVpcRegion s a => HasVpcRegion (TF.Resource p s) a where
    vpcRegion = TF.configuration . vpcRegion

class HasVpcSecurityGroupIds s a | s -> a where
    vpcSecurityGroupIds :: Functor f => (a -> f a) -> s -> f s

instance HasVpcSecurityGroupIds s a => HasVpcSecurityGroupIds (TF.Resource p s) a where
    vpcSecurityGroupIds = TF.configuration . vpcSecurityGroupIds

class HasVpcSettings s a | s -> a where
    vpcSettings :: Functor f => (a -> f a) -> s -> f s

instance HasVpcSettings s a => HasVpcSettings (TF.Resource p s) a where
    vpcSettings = TF.configuration . vpcSettings

class HasVpcZoneIdentifier s a | s -> a where
    vpcZoneIdentifier :: Functor f => (a -> f a) -> s -> f s

instance HasVpcZoneIdentifier s a => HasVpcZoneIdentifier (TF.Resource p s) a where
    vpcZoneIdentifier = TF.configuration . vpcZoneIdentifier

class HasVpnConnectionId s a | s -> a where
    vpnConnectionId :: Functor f => (a -> f a) -> s -> f s

instance HasVpnConnectionId s a => HasVpnConnectionId (TF.Resource p s) a where
    vpnConnectionId = TF.configuration . vpnConnectionId

class HasVpnGatewayId s a | s -> a where
    vpnGatewayId :: Functor f => (a -> f a) -> s -> f s

instance HasVpnGatewayId s a => HasVpnGatewayId (TF.Resource p s) a where
    vpnGatewayId = TF.configuration . vpnGatewayId

class HasWaitForCapacityTimeout s a | s -> a where
    waitForCapacityTimeout :: Functor f => (a -> f a) -> s -> f s

instance HasWaitForCapacityTimeout s a => HasWaitForCapacityTimeout (TF.Resource p s) a where
    waitForCapacityTimeout = TF.configuration . waitForCapacityTimeout

class HasWaitForElbCapacity s a | s -> a where
    waitForElbCapacity :: Functor f => (a -> f a) -> s -> f s

instance HasWaitForElbCapacity s a => HasWaitForElbCapacity (TF.Resource p s) a where
    waitForElbCapacity = TF.configuration . waitForElbCapacity

class HasWaitForFulfillment s a | s -> a where
    waitForFulfillment :: Functor f => (a -> f a) -> s -> f s

instance HasWaitForFulfillment s a => HasWaitForFulfillment (TF.Resource p s) a where
    waitForFulfillment = TF.configuration . waitForFulfillment

class HasWaitForReadyTimeout s a | s -> a where
    waitForReadyTimeout :: Functor f => (a -> f a) -> s -> f s

instance HasWaitForReadyTimeout s a => HasWaitForReadyTimeout (TF.Resource p s) a where
    waitForReadyTimeout = TF.configuration . waitForReadyTimeout

class HasWebAclId s a | s -> a where
    webAclId :: Functor f => (a -> f a) -> s -> f s

instance HasWebAclId s a => HasWebAclId (TF.Resource p s) a where
    webAclId = TF.configuration . webAclId

class HasWebsite s a | s -> a where
    website :: Functor f => (a -> f a) -> s -> f s

instance HasWebsite s a => HasWebsite (TF.Resource p s) a where
    website = TF.configuration . website

class HasWebsiteRedirect s a | s -> a where
    websiteRedirect :: Functor f => (a -> f a) -> s -> f s

instance HasWebsiteRedirect s a => HasWebsiteRedirect (TF.Resource p s) a where
    websiteRedirect = TF.configuration . websiteRedirect

class HasWeightedRoutingPolicy s a | s -> a where
    weightedRoutingPolicy :: Functor f => (a -> f a) -> s -> f s

instance HasWeightedRoutingPolicy s a => HasWeightedRoutingPolicy (TF.Resource p s) a where
    weightedRoutingPolicy = TF.configuration . weightedRoutingPolicy

class HasWindowId s a | s -> a where
    windowId :: Functor f => (a -> f a) -> s -> f s

instance HasWindowId s a => HasWindowId (TF.Resource p s) a where
    windowId = TF.configuration . windowId

class HasWorkmailAction s a | s -> a where
    workmailAction :: Functor f => (a -> f a) -> s -> f s

instance HasWorkmailAction s a => HasWorkmailAction (TF.Resource p s) a where
    workmailAction = TF.configuration . workmailAction

class HasWriteAttributes s a | s -> a where
    writeAttributes :: Functor f => (a -> f a) -> s -> f s

instance HasWriteAttributes s a => HasWriteAttributes (TF.Resource p s) a where
    writeAttributes = TF.configuration . writeAttributes

class HasWriteCapacity s a | s -> a where
    writeCapacity :: Functor f => (a -> f a) -> s -> f s

instance HasWriteCapacity s a => HasWriteCapacity (TF.Resource p s) a where
    writeCapacity = TF.configuration . writeCapacity

class HasXssMatchTuples s a | s -> a where
    xssMatchTuples :: Functor f => (a -> f a) -> s -> f s

instance HasXssMatchTuples s a => HasXssMatchTuples (TF.Resource p s) a where
    xssMatchTuples = TF.configuration . xssMatchTuples

class HasZoneId s a | s -> a where
    zoneId :: Functor f => (a -> f a) -> s -> f s

instance HasZoneId s a => HasZoneId (TF.Resource p s) a where
    zoneId = TF.configuration . zoneId
