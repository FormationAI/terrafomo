-- This module is auto-generated.

{-# LANGUAGE DataKinds              #-}
{-# LANGUAGE DuplicateRecordFields  #-}
{-# LANGUAGE FlexibleInstances      #-}
{-# LANGUAGE FunctionalDependencies #-}
{-# LANGUAGE MultiParamTypeClasses  #-}
{-# LANGUAGE NoImplicitPrelude      #-}
{-# LANGUAGE OverloadedStrings      #-}
{-# LANGUAGE RankNTypes             #-}
{-# LANGUAGE RecordWildCards        #-}
{-# LANGUAGE ScopedTypeVariables    #-}
{-# LANGUAGE TypeFamilies           #-}
{-# LANGUAGE UndecidableInstances   #-}

{-# OPTIONS_GHC -fno-warn-unused-imports #-}

-- |
-- Module      : Terrafomo.Vault.DataSource
-- Copyright   : (c) 2017 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+terrafomo@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
module Terrafomo.Vault.DataSource
    (
    -- * Types
      AwsAccessCredentialsDataSource (..)
    , awsAccessCredentialsDataSource

    , GenericSecretDataSource (..)
    , genericSecretDataSource

    -- * Overloaded Fields
    -- ** Arguments
    , HasBackend (..)
    , HasPath (..)
    , HasRole (..)
    , HasType' (..)

    -- ** Computed Attributes
    , HasComputedAccessKey (..)
    , HasComputedLeaseDuration (..)
    , HasComputedLeaseId (..)
    , HasComputedLeaseRenewable (..)
    , HasComputedLeaseStartTime (..)
    , HasComputedSecretKey (..)
    , HasComputedSecurityToken (..)
    ) where

import Data.Maybe (catMaybes)
import Data.Text  (Text)

import GHC.Base (Eq, ($), (.))
import GHC.Show (Show)

import Lens.Micro (Getting, Lens', lens, to)

import qualified Terrafomo.Attribute      as TF
import qualified Terrafomo.DataSource     as TF
import qualified Terrafomo.HCL            as TF
import qualified Terrafomo.IP             as TF
import qualified Terrafomo.Meta           as TF (configuration)
import qualified Terrafomo.Name           as TF
import qualified Terrafomo.Resource       as TF
import qualified Terrafomo.Vault.Provider as TF
import qualified Terrafomo.Vault.Types    as TF

{- | The @vault_aws_access_credentials@ Vault datasource.

Reads AWS credentials from an AWS secret backend in Vault. ~> Important All
data retrieved from Vault will be written in cleartext to state file
generated by Terraform, will appear in the console output when Terraform
runs, and may be included in plan files if secrets are interpolated into any
resource attributes. Protect these artifacts accordingly. See
<../index.html> for more details.
-}
data AwsAccessCredentialsDataSource s = AwsAccessCredentialsDataSource {
      _backend :: !(TF.Attribute s "backend" Text)
    {- ^ (Required) The path to the AWS secret backend to read credentials from, with no leading or trailing @/@ s. -}
    , _role    :: !(TF.Attribute s "role" Text)
    {- ^ (Required) The name of the AWS secret backend role to read credentials from, with no leading or trailing @/@ s. -}
    , _type'   :: !(TF.Attribute s "type" Text)
    {- ^ (Optional) The type of credentials to read. Defaults to @"creds"@ , which just returns an AWS Access Key ID and Secret Key. Can also be set to @"sts"@ , which will return a security token in addition to the keys. -}
    } deriving (Show, Eq)

instance TF.ToHCL (AwsAccessCredentialsDataSource s) where
    toHCL AwsAccessCredentialsDataSource{..} = TF.block $ catMaybes
        [ TF.attribute _backend
        , TF.attribute _role
        , TF.attribute _type'
        ]

instance HasBackend (AwsAccessCredentialsDataSource s) Text where
    type HasBackendThread (AwsAccessCredentialsDataSource s) Text = s

    backend =
        lens (_backend :: AwsAccessCredentialsDataSource s -> TF.Attribute s "backend" Text)
             (\s a -> s { _backend = a } :: AwsAccessCredentialsDataSource s)

instance HasRole (AwsAccessCredentialsDataSource s) Text where
    type HasRoleThread (AwsAccessCredentialsDataSource s) Text = s

    role =
        lens (_role :: AwsAccessCredentialsDataSource s -> TF.Attribute s "role" Text)
             (\s a -> s { _role = a } :: AwsAccessCredentialsDataSource s)

instance HasType' (AwsAccessCredentialsDataSource s) Text where
    type HasType'Thread (AwsAccessCredentialsDataSource s) Text = s

    type' =
        lens (_type' :: AwsAccessCredentialsDataSource s -> TF.Attribute s "type" Text)
             (\s a -> s { _type' = a } :: AwsAccessCredentialsDataSource s)

instance HasComputedAccessKey (AwsAccessCredentialsDataSource s) Text where
    computedAccessKey =
        to (\x -> TF.Computed (TF.referenceKey x) "access_key")

instance HasComputedLeaseDuration (AwsAccessCredentialsDataSource s) Text where
    computedLeaseDuration =
        to (\x -> TF.Computed (TF.referenceKey x) "lease_duration")

instance HasComputedLeaseId (AwsAccessCredentialsDataSource s) Text where
    computedLeaseId =
        to (\x -> TF.Computed (TF.referenceKey x) "lease_id")

instance HasComputedLeaseRenewable (AwsAccessCredentialsDataSource s) Text where
    computedLeaseRenewable =
        to (\x -> TF.Computed (TF.referenceKey x) "lease_renewable")

instance HasComputedLeaseStartTime (AwsAccessCredentialsDataSource s) Text where
    computedLeaseStartTime =
        to (\x -> TF.Computed (TF.referenceKey x) "lease_start_time")

instance HasComputedSecretKey (AwsAccessCredentialsDataSource s) Text where
    computedSecretKey =
        to (\x -> TF.Computed (TF.referenceKey x) "secret_key")

instance HasComputedSecurityToken (AwsAccessCredentialsDataSource s) Text where
    computedSecurityToken =
        to (\x -> TF.Computed (TF.referenceKey x) "security_token")

awsAccessCredentialsDataSource :: TF.DataSource TF.Vault (AwsAccessCredentialsDataSource s)
awsAccessCredentialsDataSource =
    TF.newDataSource "vault_aws_access_credentials" $
        AwsAccessCredentialsDataSource {
              _backend = TF.Nil
            , _role = TF.Nil
            , _type' = TF.Nil
            }

{- | The @vault_generic_secret@ Vault datasource.

Reads arbitrary data from a given path in Vault. This resource is primarily
intended to be used with
<https://www.vaultproject.io/docs/secrets/generic/index.html> , but it is
also compatible with any other Vault endpoint that supports the @vault read@
command. ~> Important All data retrieved from Vault will be written in
cleartext to state file generated by Terraform, will appear in the console
output when Terraform runs, and may be included in plan files if secrets are
interpolated into any resource attributes. Protect these artifacts
accordingly. See <../index.html> for more details.
-}
data GenericSecretDataSource s = GenericSecretDataSource {
      _path :: !(TF.Attribute s "path" Text)
    {- ^ (Required) The full logical path from which to request data. To read data from the "generic" secret backend mounted in Vault by default, this should be prefixed with @secret/@ . Reading from other backends with this data source is possible; consult each backend's documentation to see which endpoints support the @GET@ method. -}
    } deriving (Show, Eq)

instance TF.ToHCL (GenericSecretDataSource s) where
    toHCL GenericSecretDataSource{..} = TF.block $ catMaybes
        [ TF.attribute _path
        ]

instance HasPath (GenericSecretDataSource s) Text where
    type HasPathThread (GenericSecretDataSource s) Text = s

    path =
        lens (_path :: GenericSecretDataSource s -> TF.Attribute s "path" Text)
             (\s a -> s { _path = a } :: GenericSecretDataSource s)

genericSecretDataSource :: TF.DataSource TF.Vault (GenericSecretDataSource s)
genericSecretDataSource =
    TF.newDataSource "vault_generic_secret" $
        GenericSecretDataSource {
              _path = TF.Nil
            }

class HasBackend a b | a -> b where
    type HasBackendThread a b :: *

    backend :: Lens' a (TF.Attribute (HasBackendThread a b) "backend" b)

instance HasBackend a b => HasBackend (TF.DataSource p a) b where
    type HasBackendThread (TF.DataSource p a) b =
         HasBackendThread a b

    backend = TF.configuration . backend

class HasPath a b | a -> b where
    type HasPathThread a b :: *

    path :: Lens' a (TF.Attribute (HasPathThread a b) "path" b)

instance HasPath a b => HasPath (TF.DataSource p a) b where
    type HasPathThread (TF.DataSource p a) b =
         HasPathThread a b

    path = TF.configuration . path

class HasRole a b | a -> b where
    type HasRoleThread a b :: *

    role :: Lens' a (TF.Attribute (HasRoleThread a b) "role" b)

instance HasRole a b => HasRole (TF.DataSource p a) b where
    type HasRoleThread (TF.DataSource p a) b =
         HasRoleThread a b

    role = TF.configuration . role

class HasType' a b | a -> b where
    type HasType'Thread a b :: *

    type' :: Lens' a (TF.Attribute (HasType'Thread a b) "type" b)

instance HasType' a b => HasType' (TF.DataSource p a) b where
    type HasType'Thread (TF.DataSource p a) b =
         HasType'Thread a b

    type' = TF.configuration . type'

class HasComputedAccessKey a b | a -> b where
    computedAccessKey :: forall r s n. Getting r (TF.Reference s a) (TF.Attribute s n b)

class HasComputedLeaseDuration a b | a -> b where
    computedLeaseDuration :: forall r s n. Getting r (TF.Reference s a) (TF.Attribute s n b)

class HasComputedLeaseId a b | a -> b where
    computedLeaseId :: forall r s n. Getting r (TF.Reference s a) (TF.Attribute s n b)

class HasComputedLeaseRenewable a b | a -> b where
    computedLeaseRenewable :: forall r s n. Getting r (TF.Reference s a) (TF.Attribute s n b)

class HasComputedLeaseStartTime a b | a -> b where
    computedLeaseStartTime :: forall r s n. Getting r (TF.Reference s a) (TF.Attribute s n b)

class HasComputedSecretKey a b | a -> b where
    computedSecretKey :: forall r s n. Getting r (TF.Reference s a) (TF.Attribute s n b)

class HasComputedSecurityToken a b | a -> b where
    computedSecurityToken :: forall r s n. Getting r (TF.Reference s a) (TF.Attribute s n b)
