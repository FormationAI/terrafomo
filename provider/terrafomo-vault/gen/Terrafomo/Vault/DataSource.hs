-- This module is auto-generated.

{-# LANGUAGE DuplicateRecordFields  #-}
{-# LANGUAGE FlexibleContexts       #-}
{-# LANGUAGE FlexibleInstances      #-}
{-# LANGUAGE FunctionalDependencies #-}
{-# LANGUAGE MultiParamTypeClasses  #-}
{-# LANGUAGE NoImplicitPrelude      #-}
{-# LANGUAGE OverloadedStrings      #-}
{-# LANGUAGE RecordWildCards        #-}
{-# LANGUAGE TemplateHaskell        #-}
{-# LANGUAGE UndecidableInstances   #-}

{-# OPTIONS_GHC -fno-warn-unused-imports #-}

-- |
-- Module      : Terrafomo.Vault.DataSource
-- Copyright   : (c) 2017 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+terrafomo@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
module Terrafomo.Vault.DataSource where

import Data.Functor ((<$>))
import Data.Maybe   (catMaybes)
import Data.Text    (Text)

import GHC.Base (Eq, const, ($))
import GHC.Show (Show)

import qualified Terrafomo.Syntax.DataSource as TF
import qualified Terrafomo.Syntax.HCL        as TF
import qualified Terrafomo.Syntax.Variable   as TF
import qualified Terrafomo.TH                as TF
import qualified Terrafomo.Vault             as TF

{- | The @vault_aws_access_credentials@ Vault datasource.

Reads AWS credentials from an AWS secret backend in Vault. ~> Important All
data retrieved from Vault will be written in cleartext to state file
generated by Terraform, will appear in the console output when Terraform
runs, and may be included in plan files if secrets are interpolated into any
resource attributes. Protect these artifacts accordingly. See
<../index.html> for more details.
-}
data AwsAccessCredentialsDataSource = AwsAccessCredentialsDataSource {
      _backend                   :: !(TF.Argument Text)
    {- ^ (Required) The path to the AWS secret backend to read credentials from, with no leading or trailing @/@ s. -}
    , _role                      :: !(TF.Argument Text)
    {- ^ (Required) The name of the AWS secret backend role to read credentials from, with no leading or trailing @/@ s. -}
    , _type'                     :: !(TF.Argument Text)
    {- ^ (Optional) The type of credentials to read. Defaults to @"creds"@ , which just returns an AWS Access Key ID and Secret Key. Can also be set to @"sts"@ , which will return a security token in addition to the keys. -}
    , _computed_access_key       :: !(TF.Attribute Text)
    {- ^ - The AWS Access Key ID returned by Vault. -}
    , _computed_lease_duration   :: !(TF.Attribute Text)
    {- ^ - The duration of the secret lease, in seconds relative to the time the data was requested. Once this time has passed any plan generated with this data may fail to apply. -}
    , _computed_lease_id         :: !(TF.Attribute Text)
    {- ^ - The lease identifier assigned by Vault. -}
    , _computed_lease_renewable  :: !(TF.Attribute Text)
    {- ^ - @true@ if the lease can be renewed using Vault's @sys/renew/{lease-id}@ endpoint. Terraform does not currently support lease renewal, and so it will request a new lease each time this data source is refreshed. -}
    , _computed_lease_start_time :: !(TF.Attribute Text)
    {- ^ - As a convenience, this records the current time on the computer where Terraform is running when the data is requested. This can be used to approximate the absolute time represented by @lease_duration@ , though users must allow for any clock drift and response latency relative to the Vault server. -}
    , _computed_secret_key       :: !(TF.Attribute Text)
    {- ^ - The AWS Secret Key returned by Vault. -}
    , _computed_security_token   :: !(TF.Attribute Text)
    {- ^ - The STS token returned by Vault, if any. -}
    } deriving (Show, Eq)

awsAccessCredentialsDataSource :: TF.DataSource TF.Vault AwsAccessCredentialsDataSource
awsAccessCredentialsDataSource =
    TF.newDataSource "vault_aws_access_credentials" $
        AwsAccessCredentialsDataSource {
            _backend = TF.Absent
            , _role = TF.Absent
            , _type' = TF.Absent
            , _computed_access_key = TF.Computed "access_key"
            , _computed_lease_duration = TF.Computed "lease_duration"
            , _computed_lease_id = TF.Computed "lease_id"
            , _computed_lease_renewable = TF.Computed "lease_renewable"
            , _computed_lease_start_time = TF.Computed "lease_start_time"
            , _computed_secret_key = TF.Computed "secret_key"
            , _computed_security_token = TF.Computed "security_token"
            }

instance TF.ToHCL AwsAccessCredentialsDataSource where
    toHCL AwsAccessCredentialsDataSource{..} = TF.arguments
        [ TF.assign "backend" <$> _backend
        , TF.assign "role" <$> _role
        , TF.assign "type" <$> _type'
        ]

$(TF.makeSchemaLenses
    ''AwsAccessCredentialsDataSource
    ''TF.Vault
    ''TF.DataSource
    'TF.schema)

{- | The @vault_generic_secret@ Vault datasource.

Reads arbitrary data from a given path in Vault. This resource is primarily
intended to be used with
<https://www.vaultproject.io/docs/secrets/generic/index.html> , but it is
also compatible with any other Vault endpoint that supports the @vault read@
command. ~> Important All data retrieved from Vault will be written in
cleartext to state file generated by Terraform, will appear in the console
output when Terraform runs, and may be included in plan files if secrets are
interpolated into any resource attributes. Protect these artifacts
accordingly. See <../index.html> for more details.
-}
data GenericSecretDataSource = GenericSecretDataSource {
      _path :: !(TF.Argument Text)
    {- ^ (Required) The full logical path from which to request data. To read data from the "generic" secret backend mounted in Vault by default, this should be prefixed with @secret/@ . Reading from other backends with this data source is possible; consult each backend's documentation to see which endpoints support the @GET@ method. -}
    } deriving (Show, Eq)

genericSecretDataSource :: TF.DataSource TF.Vault GenericSecretDataSource
genericSecretDataSource =
    TF.newDataSource "vault_generic_secret" $
        GenericSecretDataSource {
            _path = TF.Absent
            }

instance TF.ToHCL GenericSecretDataSource where
    toHCL GenericSecretDataSource{..} = TF.arguments
        [ TF.assign "path" <$> _path
        ]

$(TF.makeSchemaLenses
    ''GenericSecretDataSource
    ''TF.Vault
    ''TF.DataSource
    'TF.schema)
