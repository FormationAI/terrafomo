-- This module is auto-generated.

{-# LANGUAGE DataKinds              #-}
{-# LANGUAGE DuplicateRecordFields  #-}
{-# LANGUAGE FlexibleInstances      #-}
{-# LANGUAGE FunctionalDependencies #-}
{-# LANGUAGE MultiParamTypeClasses  #-}
{-# LANGUAGE NoImplicitPrelude      #-}
{-# LANGUAGE OverloadedStrings      #-}
{-# LANGUAGE PolyKinds              #-}
{-# LANGUAGE RankNTypes             #-}
{-# LANGUAGE RecordWildCards        #-}
{-# LANGUAGE UndecidableInstances   #-}

{-# OPTIONS_GHC -fno-warn-unused-imports #-}

-- |
-- Module      : Terrafomo.Vault.DataSource
-- Copyright   : (c) 2017 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+terrafomo@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
module Terrafomo.Vault.DataSource
    (
    -- * Types
      AwsAccessCredentialsDataSource (..)
    , awsAccessCredentialsDataSource

    , GenericSecretDataSource (..)
    , genericSecretDataSource

    -- * Overloaded Fields
    -- ** Arguments
    , HasBackend (..)
    , HasPath (..)
    , HasRole (..)
    , HasType' (..)

    -- ** Computed Attributes
    , HasComputedAccessKey (..)
    , HasComputedLeaseDuration (..)
    , HasComputedLeaseId (..)
    , HasComputedLeaseRenewable (..)
    , HasComputedLeaseStartTime (..)
    , HasComputedSecretKey (..)
    , HasComputedSecurityToken (..)
    ) where

import Data.Maybe (catMaybes)
import Data.Text  (Text)

import GHC.Base (Eq, ($), (.))
import GHC.Show (Show)

import Lens.Micro (Getting, Lens', lens, to)

import qualified Terrafomo.Syntax.DataSource as TF
import qualified Terrafomo.Syntax.HCL        as TF
import qualified Terrafomo.Syntax.IP         as TF
import qualified Terrafomo.Syntax.Meta       as TF (configuration)
import qualified Terrafomo.Syntax.Resource   as TF
import qualified Terrafomo.Syntax.Variable   as TF
import qualified Terrafomo.Vault.Provider    as TF
import qualified Terrafomo.Vault.Types       as TF

{- | The @vault_aws_access_credentials@ Vault datasource.

Reads AWS credentials from an AWS secret backend in Vault. ~> Important All
data retrieved from Vault will be written in cleartext to state file
generated by Terraform, will appear in the console output when Terraform
runs, and may be included in plan files if secrets are interpolated into any
resource attributes. Protect these artifacts accordingly. See
<../index.html> for more details.
-}
data AwsAccessCredentialsDataSource = AwsAccessCredentialsDataSource {
      _backend :: !(TF.Argument "backend" Text)
    {- ^ (Required) The path to the AWS secret backend to read credentials from, with no leading or trailing @/@ s. -}
    , _role    :: !(TF.Argument "role" Text)
    {- ^ (Required) The name of the AWS secret backend role to read credentials from, with no leading or trailing @/@ s. -}
    , _type'   :: !(TF.Argument "type" Text)
    {- ^ (Optional) The type of credentials to read. Defaults to @"creds"@ , which just returns an AWS Access Key ID and Secret Key. Can also be set to @"sts"@ , which will return a security token in addition to the keys. -}
    } deriving (Show, Eq)

instance TF.ToHCL AwsAccessCredentialsDataSource where
    toHCL AwsAccessCredentialsDataSource{..} = TF.block $ catMaybes
        [ TF.argument _backend
        , TF.argument _role
        , TF.argument _type'
        ]

instance HasBackend AwsAccessCredentialsDataSource Text where
    backend =
        lens (_backend :: AwsAccessCredentialsDataSource -> TF.Argument "backend" Text)
             (\s a -> s { _backend = a } :: AwsAccessCredentialsDataSource)

instance HasRole AwsAccessCredentialsDataSource Text where
    role =
        lens (_role :: AwsAccessCredentialsDataSource -> TF.Argument "role" Text)
             (\s a -> s { _role = a } :: AwsAccessCredentialsDataSource)

instance HasType' AwsAccessCredentialsDataSource Text where
    type' =
        lens (_type' :: AwsAccessCredentialsDataSource -> TF.Argument "type" Text)
             (\s a -> s { _type' = a } :: AwsAccessCredentialsDataSource)

instance HasComputedAccessKey AwsAccessCredentialsDataSource Text where
    computedAccessKey =
        to (\_  -> TF.Compute "access_key")

instance HasComputedLeaseDuration AwsAccessCredentialsDataSource Text where
    computedLeaseDuration =
        to (\_  -> TF.Compute "lease_duration")

instance HasComputedLeaseId AwsAccessCredentialsDataSource Text where
    computedLeaseId =
        to (\_  -> TF.Compute "lease_id")

instance HasComputedLeaseRenewable AwsAccessCredentialsDataSource Text where
    computedLeaseRenewable =
        to (\_  -> TF.Compute "lease_renewable")

instance HasComputedLeaseStartTime AwsAccessCredentialsDataSource Text where
    computedLeaseStartTime =
        to (\_  -> TF.Compute "lease_start_time")

instance HasComputedSecretKey AwsAccessCredentialsDataSource Text where
    computedSecretKey =
        to (\_  -> TF.Compute "secret_key")

instance HasComputedSecurityToken AwsAccessCredentialsDataSource Text where
    computedSecurityToken =
        to (\_  -> TF.Compute "security_token")

awsAccessCredentialsDataSource :: TF.DataSource TF.Vault AwsAccessCredentialsDataSource
awsAccessCredentialsDataSource =
    TF.newDataSource "vault_aws_access_credentials" $
        AwsAccessCredentialsDataSource {
            _backend = TF.Nil
            , _role = TF.Nil
            , _type' = TF.Nil
            }

{- | The @vault_generic_secret@ Vault datasource.

Reads arbitrary data from a given path in Vault. This resource is primarily
intended to be used with
<https://www.vaultproject.io/docs/secrets/generic/index.html> , but it is
also compatible with any other Vault endpoint that supports the @vault read@
command. ~> Important All data retrieved from Vault will be written in
cleartext to state file generated by Terraform, will appear in the console
output when Terraform runs, and may be included in plan files if secrets are
interpolated into any resource attributes. Protect these artifacts
accordingly. See <../index.html> for more details.
-}
data GenericSecretDataSource = GenericSecretDataSource {
      _path :: !(TF.Argument "path" Text)
    {- ^ (Required) The full logical path from which to request data. To read data from the "generic" secret backend mounted in Vault by default, this should be prefixed with @secret/@ . Reading from other backends with this data source is possible; consult each backend's documentation to see which endpoints support the @GET@ method. -}
    } deriving (Show, Eq)

instance TF.ToHCL GenericSecretDataSource where
    toHCL GenericSecretDataSource{..} = TF.block $ catMaybes
        [ TF.argument _path
        ]

instance HasPath GenericSecretDataSource Text where
    path =
        lens (_path :: GenericSecretDataSource -> TF.Argument "path" Text)
             (\s a -> s { _path = a } :: GenericSecretDataSource)

genericSecretDataSource :: TF.DataSource TF.Vault GenericSecretDataSource
genericSecretDataSource =
    TF.newDataSource "vault_generic_secret" $
        GenericSecretDataSource {
            _path = TF.Nil
            }

class HasBackend s a | s -> a where
    backend :: Lens' s (TF.Argument "backend" a)

instance HasBackend s a => HasBackend (TF.DataSource p s) a where
    backend = TF.configuration . backend

class HasPath s a | s -> a where
    path :: Lens' s (TF.Argument "path" a)

instance HasPath s a => HasPath (TF.DataSource p s) a where
    path = TF.configuration . path

class HasRole s a | s -> a where
    role :: Lens' s (TF.Argument "role" a)

instance HasRole s a => HasRole (TF.DataSource p s) a where
    role = TF.configuration . role

class HasType' s a | s -> a where
    type' :: Lens' s (TF.Argument "type" a)

instance HasType' s a => HasType' (TF.DataSource p s) a where
    type' = TF.configuration . type'

class HasComputedAccessKey s a | s -> a where
    computedAccessKey :: forall r. Getting r s (TF.Attribute a)

instance HasComputedAccessKey s a => HasComputedAccessKey (TF.DataSource p s) a where
    computedAccessKey = TF.configuration . computedAccessKey

class HasComputedLeaseDuration s a | s -> a where
    computedLeaseDuration :: forall r. Getting r s (TF.Attribute a)

instance HasComputedLeaseDuration s a => HasComputedLeaseDuration (TF.DataSource p s) a where
    computedLeaseDuration = TF.configuration . computedLeaseDuration

class HasComputedLeaseId s a | s -> a where
    computedLeaseId :: forall r. Getting r s (TF.Attribute a)

instance HasComputedLeaseId s a => HasComputedLeaseId (TF.DataSource p s) a where
    computedLeaseId = TF.configuration . computedLeaseId

class HasComputedLeaseRenewable s a | s -> a where
    computedLeaseRenewable :: forall r. Getting r s (TF.Attribute a)

instance HasComputedLeaseRenewable s a => HasComputedLeaseRenewable (TF.DataSource p s) a where
    computedLeaseRenewable = TF.configuration . computedLeaseRenewable

class HasComputedLeaseStartTime s a | s -> a where
    computedLeaseStartTime :: forall r. Getting r s (TF.Attribute a)

instance HasComputedLeaseStartTime s a => HasComputedLeaseStartTime (TF.DataSource p s) a where
    computedLeaseStartTime = TF.configuration . computedLeaseStartTime

class HasComputedSecretKey s a | s -> a where
    computedSecretKey :: forall r. Getting r s (TF.Attribute a)

instance HasComputedSecretKey s a => HasComputedSecretKey (TF.DataSource p s) a where
    computedSecretKey = TF.configuration . computedSecretKey

class HasComputedSecurityToken s a | s -> a where
    computedSecurityToken :: forall r. Getting r s (TF.Attribute a)

instance HasComputedSecurityToken s a => HasComputedSecurityToken (TF.DataSource p s) a where
    computedSecurityToken = TF.configuration . computedSecurityToken
