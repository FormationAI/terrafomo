-- This module is auto-generated.

{-# LANGUAGE DuplicateRecordFields  #-}
{-# LANGUAGE FlexibleInstances      #-}
{-# LANGUAGE FunctionalDependencies #-}
{-# LANGUAGE MultiParamTypeClasses  #-}
{-# LANGUAGE NoImplicitPrelude      #-}
{-# LANGUAGE OverloadedStrings      #-}
{-# LANGUAGE RecordWildCards        #-}
{-# LANGUAGE ScopedTypeVariables    #-}

{-# OPTIONS_GHC -fno-warn-unused-imports #-}

-- |
-- Module      : Terrafomo.Vault.DataSource
-- Copyright   : (c) 2017-2018 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+terrafomo@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
module Terrafomo.Vault.DataSource
    (
    -- * Types
      AwsAccessCredentialsData (..)
    , awsAccessCredentialsData

    , GenericSecretData (..)
    , genericSecretData

    -- * Overloaded Fields
    -- ** Arguments
    , P.HasBackend (..)
    , P.HasPath (..)
    , P.HasRole (..)
    , P.HasType' (..)

    -- ** Computed Attributes
    , P.HasComputedAccessKey (..)
    , P.HasComputedData' (..)
    , P.HasComputedDataJson (..)
    , P.HasComputedLeaseDuration (..)
    , P.HasComputedLeaseId (..)
    , P.HasComputedLeaseRenewable (..)
    , P.HasComputedLeaseStartTime (..)
    , P.HasComputedSecretKey (..)
    , P.HasComputedSecurityToken (..)

    -- * Re-exported Types
    , module P
    ) where

import Data.Maybe (catMaybes)
import Data.Text  (Text)

import GHC.Base (Eq, ($))
import GHC.Show (Show)

import Lens.Micro (lens)

import qualified Data.Word                as P
import qualified GHC.Base                 as P
import qualified Numeric.Natural          as P
import qualified Terrafomo.IP             as P
import qualified Terrafomo.Vault.Lens     as P
import qualified Terrafomo.Vault.Provider as P
import           Terrafomo.Vault.Types    as P

import qualified Terrafomo.Attribute as TF
import qualified Terrafomo.HCL       as TF
import qualified Terrafomo.Source    as TF

{- | The @vault_aws_access_credentials@ Vault datasource.

Reads AWS credentials from an AWS secret backend in Vault. ~> Important All
data retrieved from Vault will be written in cleartext to state file
generated by Terraform, will appear in the console output when Terraform
runs, and may be included in plan files if secrets are interpolated into any
resource attributes. Protect these artifacts accordingly. See
<../index.html> for more details.
-}
data AwsAccessCredentialsData s = AwsAccessCredentialsData {
      _backend :: !(TF.Attribute s Text)
    {- ^ (Required) The path to the AWS secret backend to read credentials from, with no leading or trailing @/@ s. -}
    , _role    :: !(TF.Attribute s Text)
    {- ^ (Required) The name of the AWS secret backend role to read credentials from, with no leading or trailing @/@ s. -}
    , _type'   :: !(TF.Attribute s Text)
    {- ^ (Optional) The type of credentials to read. Defaults to @"creds"@ , which just returns an AWS Access Key ID and Secret Key. Can also be set to @"sts"@ , which will return a security token in addition to the keys. -}
    } deriving (Show, Eq)

instance TF.ToHCL (AwsAccessCredentialsData s) where
    toHCL AwsAccessCredentialsData{..} = TF.block $ catMaybes
        [ TF.attribute "backend" _backend
        , TF.attribute "role" _role
        , TF.attribute "type" _type'
        ]

instance P.HasBackend (AwsAccessCredentialsData s) s Text where
    backend =
        lens (_backend :: AwsAccessCredentialsData s -> TF.Attribute s Text)
             (\s a -> s { _backend = a } :: AwsAccessCredentialsData s)

instance P.HasRole (AwsAccessCredentialsData s) s Text where
    role =
        lens (_role :: AwsAccessCredentialsData s -> TF.Attribute s Text)
             (\s a -> s { _role = a } :: AwsAccessCredentialsData s)

instance P.HasType' (AwsAccessCredentialsData s) s Text where
    type' =
        lens (_type' :: AwsAccessCredentialsData s -> TF.Attribute s Text)
             (\s a -> s { _type' = a } :: AwsAccessCredentialsData s)

instance P.HasComputedAccessKey (AwsAccessCredentialsData s) Text
instance P.HasComputedLeaseDuration (AwsAccessCredentialsData s) Text
instance P.HasComputedLeaseId (AwsAccessCredentialsData s) Text
instance P.HasComputedLeaseRenewable (AwsAccessCredentialsData s) Text
instance P.HasComputedLeaseStartTime (AwsAccessCredentialsData s) Text
instance P.HasComputedSecretKey (AwsAccessCredentialsData s) Text
instance P.HasComputedSecurityToken (AwsAccessCredentialsData s) Text

awsAccessCredentialsData :: TF.DataSource P.Vault (AwsAccessCredentialsData s)
awsAccessCredentialsData =
    TF.newDataSource "vault_aws_access_credentials" $
        AwsAccessCredentialsData {
              _backend = TF.Nil
            , _role = TF.Nil
            , _type' = TF.Nil
            }

{- | The @vault_generic_secret@ Vault datasource.

Reads arbitrary data from a given path in Vault. This resource is primarily
intended to be used with
<https://www.vaultproject.io/docs/secrets/generic/index.html> , but it is
also compatible with any other Vault endpoint that supports the @vault read@
command. ~> Important All data retrieved from Vault will be written in
cleartext to state file generated by Terraform, will appear in the console
output when Terraform runs, and may be included in plan files if secrets are
interpolated into any resource attributes. Protect these artifacts
accordingly. See <../index.html> for more details.
-}
data GenericSecretData s = GenericSecretData {
      _path :: !(TF.Attribute s Text)
    {- ^ (Required) The full logical path from which to request data. To read data from the "generic" secret backend mounted in Vault by default, this should be prefixed with @secret/@ . Reading from other backends with this data source is possible; consult each backend's documentation to see which endpoints support the @GET@ method. -}
    } deriving (Show, Eq)

instance TF.ToHCL (GenericSecretData s) where
    toHCL GenericSecretData{..} = TF.block $ catMaybes
        [ TF.attribute "path" _path
        ]

instance P.HasPath (GenericSecretData s) s Text where
    path =
        lens (_path :: GenericSecretData s -> TF.Attribute s Text)
             (\s a -> s { _path = a } :: GenericSecretData s)

instance P.HasComputedData' (GenericSecretData s) Text
instance P.HasComputedDataJson (GenericSecretData s) Text
instance P.HasComputedLeaseDuration (GenericSecretData s) Text
instance P.HasComputedLeaseId (GenericSecretData s) Text
instance P.HasComputedLeaseRenewable (GenericSecretData s) Text
instance P.HasComputedLeaseStartTime (GenericSecretData s) Text

genericSecretData :: TF.DataSource P.Vault (GenericSecretData s)
genericSecretData =
    TF.newDataSource "vault_generic_secret" $
        GenericSecretData {
              _path = TF.Nil
            }
