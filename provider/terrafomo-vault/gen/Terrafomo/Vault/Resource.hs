-- This module is auto-generated.

{-# LANGUAGE DuplicateRecordFields  #-}
{-# LANGUAGE FlexibleContexts       #-}
{-# LANGUAGE FlexibleInstances      #-}
{-# LANGUAGE FunctionalDependencies #-}
{-# LANGUAGE MultiParamTypeClasses  #-}
{-# LANGUAGE NoImplicitPrelude      #-}
{-# LANGUAGE OverloadedStrings      #-}
{-# LANGUAGE RecordWildCards        #-}
{-# LANGUAGE TemplateHaskell        #-}
{-# LANGUAGE UndecidableInstances   #-}

{-# OPTIONS_GHC -fno-warn-unused-imports #-}

-- |
-- Module      : Terrafomo.Vault.Resource
-- Copyright   : (c) 2017 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+terrafomo@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
module Terrafomo.Vault.Resource where

import Data.Functor ((<$>))
import Data.Maybe   (catMaybes)
import Data.Text    (Text)

import GHC.Base (Eq, const, ($))
import GHC.Show (Show)

import qualified Terrafomo.Syntax.HCL      as TF
import qualified Terrafomo.Syntax.Resource as TF
import qualified Terrafomo.Syntax.Variable as TF
import qualified Terrafomo.TH              as TF
import qualified Terrafomo.Vault           as TF

{- | The @vault_auth_backend@ Vault resource.


-}
data AuthBackendResource = AuthBackendResource {
      _description :: !(TF.Argument Text)
    {- ^ (Optional) A description of the auth backend -}
    , _path        :: !(TF.Argument Text)
    {- ^ (Optional) The path to mount the auth backend. This defaults to the name. -}
    , _type'       :: !(TF.Argument Text)
    {- ^ (Required) The name of the policy -}
    } deriving (Show, Eq)

authBackendResource :: TF.Resource TF.Vault AuthBackendResource
authBackendResource =
    TF.newResource "vault_auth_backend" $
        AuthBackendResource {
            _description = TF.Absent
            , _path = TF.Absent
            , _type' = TF.Absent
            }

instance TF.ToHCL AuthBackendResource where
    toHCL AuthBackendResource{..} = TF.arguments
        [ TF.assign "description" <$> _description
        , TF.assign "path" <$> _path
        , TF.assign "type" <$> _type'
        ]

$(TF.makeSchemaLenses
    ''AuthBackendResource
    ''TF.Vault
    ''TF.Resource
    'TF.schema)

{- | The @vault_aws_auth_backend_cert@ Vault resource.

Manages a certificate to be used with an AWS Auth Backend in Vault. This
resource sets the AWS public key and the type of document that can be
verified against the key that Vault can then use to verify the instance
identity documents making auth requests. For more information, see the
<https://www.vaultproject.io/api/auth/aws/index.html#configure-client> . ~>
Important All data provided in the resource configuration will be written in
cleartext to state and plan files generated by Terraform, and will appear in
the console output when Terraform runs. Protect these artifacts accordingly.
See <../index.html> for more details.
-}
data AwsAuthBackendCertResource = AwsAuthBackendCertResource {
      _aws_public_cert :: !(TF.Argument Text)
    {- ^ (Required) The  Base64 encoded AWS Public key required to verify PKCS7 signature of the EC2 instance metadata. You can find this key in the <http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-identity-documents.html> . -}
    , _backend         :: !(TF.Argument Text)
    {- ^ (Optional) The path the AWS auth backend being configured was mounted at.  Defaults to @aws@ . -}
    , _cert_name       :: !(TF.Argument Text)
    {- ^ (Required) The name of the certificate. -}
    , _type'           :: !(TF.Argument Text)
    {- ^ (Optional) Either "pkcs7" or "identity", indicating the type of document which can be verified using the given certificate. Defaults to "pkcs7". -}
    } deriving (Show, Eq)

awsAuthBackendCertResource :: TF.Resource TF.Vault AwsAuthBackendCertResource
awsAuthBackendCertResource =
    TF.newResource "vault_aws_auth_backend_cert" $
        AwsAuthBackendCertResource {
            _aws_public_cert = TF.Absent
            , _backend = TF.Absent
            , _cert_name = TF.Absent
            , _type' = TF.Absent
            }

instance TF.ToHCL AwsAuthBackendCertResource where
    toHCL AwsAuthBackendCertResource{..} = TF.arguments
        [ TF.assign "aws_public_cert" <$> _aws_public_cert
        , TF.assign "backend" <$> _backend
        , TF.assign "cert_name" <$> _cert_name
        , TF.assign "type" <$> _type'
        ]

$(TF.makeSchemaLenses
    ''AwsAuthBackendCertResource
    ''TF.Vault
    ''TF.Resource
    'TF.schema)

{- | The @vault_aws_auth_backend_client@ Vault resource.

Configures the client used by an AWS Auth Backend in Vault. This resource
sets the access key and secret key that Vault will use when making API
requests on behalf of an AWS Auth Backend. It can also be used to override
the URLs Vault uses when making those API requests. For more information,
see the
<https://www.vaultproject.io/api/auth/aws/index.html#configure-client> . ~>
Important All data provided in the resource configuration will be written in
cleartext to state and plan files generated by Terraform, and will appear in
the console output when Terraform runs. Protect these artifacts accordingly.
See <../index.html> for more details.
-}
data AwsAuthBackendClientResource = AwsAuthBackendClientResource {
      _access_key                 :: !(TF.Argument Text)
    {- ^ (Optional) The AWS access key that Vault should use for the auth backend. -}
    , _backend                    :: !(TF.Argument Text)
    {- ^ (Optional) The path the AWS auth backend being configured was mounted at.  Defaults to @aws@ . -}
    , _ec2_endpoint               :: !(TF.Argument Text)
    {- ^ (Optional) Override the URL Vault uses when making EC2 API calls. -}
    , _iam_endpoint               :: !(TF.Argument Text)
    {- ^ (Optional) Override the URL Vault uses when making IAM API calls. -}
    , _iam_server_id_header_value :: !(TF.Argument Text)
    {- ^ (Optional) The value to require in the @X-Vault-AWS-IAM-Server-ID@ header as part of @GetCallerIdentity@ requests that are used in the IAM auth method. -}
    , _secret_key                 :: !(TF.Argument Text)
    {- ^ (Optional) The AWS secret key that Vault should use for the auth backend. -}
    , _sts_endpoint               :: !(TF.Argument Text)
    {- ^ (Optional) Override the URL Vault uses when making STS API calls. -}
    } deriving (Show, Eq)

awsAuthBackendClientResource :: TF.Resource TF.Vault AwsAuthBackendClientResource
awsAuthBackendClientResource =
    TF.newResource "vault_aws_auth_backend_client" $
        AwsAuthBackendClientResource {
            _access_key = TF.Absent
            , _backend = TF.Absent
            , _ec2_endpoint = TF.Absent
            , _iam_endpoint = TF.Absent
            , _iam_server_id_header_value = TF.Absent
            , _secret_key = TF.Absent
            , _sts_endpoint = TF.Absent
            }

instance TF.ToHCL AwsAuthBackendClientResource where
    toHCL AwsAuthBackendClientResource{..} = TF.arguments
        [ TF.assign "access_key" <$> _access_key
        , TF.assign "backend" <$> _backend
        , TF.assign "ec2_endpoint" <$> _ec2_endpoint
        , TF.assign "iam_endpoint" <$> _iam_endpoint
        , TF.assign "iam_server_id_header_value" <$> _iam_server_id_header_value
        , TF.assign "secret_key" <$> _secret_key
        , TF.assign "sts_endpoint" <$> _sts_endpoint
        ]

$(TF.makeSchemaLenses
    ''AwsAuthBackendClientResource
    ''TF.Vault
    ''TF.Resource
    'TF.schema)

{- | The @vault_aws_auth_backend_login@ Vault resource.

Logs into a Vault server using an AWS auth backend. Login can be
accomplished using a signed identity request from IAM or using ec2 instance
metadata. For more information, see the
<https://www.vaultproject.io/docs/auth/aws.html> .
-}
data AwsAuthBackendLoginResource = AwsAuthBackendLoginResource {
      _backend                   :: !(TF.Argument Text)
    {- ^ (Optional) The unique name of the AWS auth backend. Defaults to 'aws'. -}
    , _iam_http_request_method   :: !(TF.Argument Text)
    {- ^ (Optional) The HTTP method used in the signed IAM request. -}
    , _iam_request_body          :: !(TF.Argument Text)
    {- ^ (Optional) The base64-encoded body of the signed request. -}
    , _iam_request_headers       :: !(TF.Argument Text)
    {- ^ (Optional) The base64-encoded, JSON serialized representation of the GetCallerIdentity HTTP request headers. -}
    , _iam_request_url           :: !(TF.Argument Text)
    {- ^ (Optional) The base64-encoded HTTP URL used in the signed request. -}
    , _identity                  :: !(TF.Argument Text)
    {- ^ (Optional) The base64-encoded EC2 instance identity document to authenticate with. Can be retrieved from the EC2 metadata server. -}
    , _nonce                     :: !(TF.Argument Text)
    {- ^ (Optional) The unique nonce to be used for login requests. Can be set to a user-specified value, or will contain the server-generated value once a token is issued. EC2 instances can only acquire a single token until the whitelist is tidied again unless they keep track of this nonce. -}
    , _pkcs7                     :: !(TF.Argument Text)
    {- ^ (Optional) The PKCS#7 signature of the identity document to authenticate with, with all newline characters removed. Can be retrieved from the EC2 metadata server. -}
    , _role                      :: !(TF.Argument Text)
    {- ^ (Optional) The name of the AWS auth backend role to create tokens against. -}
    , _signature                 :: !(TF.Argument Text)
    {- ^ (Optional) The base64-encoded SHA256 RSA signature of the instance identity document to authenticate with, with all newline characters removed. Can be retrieved from the EC2 metadata server. -}
    , _computed_accessor         :: !(TF.Attribute Text)
    {- ^ - The token's accessor. -}
    , _computed_auth_type        :: !(TF.Attribute Text)
    {- ^ - The authentication type used to generate this token. -}
    , _computed_client_token     :: !(TF.Attribute Text)
    {- ^ - The token returned by Vault. -}
    , _computed_lease_duration   :: !(TF.Attribute Text)
    {- ^ - The duration in seconds the token will be valid, relative to the time in @lease_start_time@ . -}
    , _computed_lease_start_time :: !(TF.Attribute Text)
    {- ^ - The approximate time at which the token was created, using the clock of the system where Terraform was running. -}
    , _computed_metadata         :: !(TF.Attribute Text)
    {- ^ - A map of information returned by the Vault server about the authentication used to generate this token. -}
    , _computed_policies         :: !(TF.Attribute Text)
    {- ^ - The Vault policies assigned to this token. -}
    , _computed_renewable        :: !(TF.Attribute Text)
    {- ^ - Set to true if the token can be extended through renewal. -}
    } deriving (Show, Eq)

awsAuthBackendLoginResource :: TF.Resource TF.Vault AwsAuthBackendLoginResource
awsAuthBackendLoginResource =
    TF.newResource "vault_aws_auth_backend_login" $
        AwsAuthBackendLoginResource {
            _backend = TF.Absent
            , _iam_http_request_method = TF.Absent
            , _iam_request_body = TF.Absent
            , _iam_request_headers = TF.Absent
            , _iam_request_url = TF.Absent
            , _identity = TF.Absent
            , _nonce = TF.Absent
            , _pkcs7 = TF.Absent
            , _role = TF.Absent
            , _signature = TF.Absent
            , _computed_accessor = TF.Computed "accessor"
            , _computed_auth_type = TF.Computed "auth_type"
            , _computed_client_token = TF.Computed "client_token"
            , _computed_lease_duration = TF.Computed "lease_duration"
            , _computed_lease_start_time = TF.Computed "lease_start_time"
            , _computed_metadata = TF.Computed "metadata"
            , _computed_policies = TF.Computed "policies"
            , _computed_renewable = TF.Computed "renewable"
            }

instance TF.ToHCL AwsAuthBackendLoginResource where
    toHCL AwsAuthBackendLoginResource{..} = TF.arguments
        [ TF.assign "backend" <$> _backend
        , TF.assign "iam_http_request_method" <$> _iam_http_request_method
        , TF.assign "iam_request_body" <$> _iam_request_body
        , TF.assign "iam_request_headers" <$> _iam_request_headers
        , TF.assign "iam_request_url" <$> _iam_request_url
        , TF.assign "identity" <$> _identity
        , TF.assign "nonce" <$> _nonce
        , TF.assign "pkcs7" <$> _pkcs7
        , TF.assign "role" <$> _role
        , TF.assign "signature" <$> _signature
        ]

$(TF.makeSchemaLenses
    ''AwsAuthBackendLoginResource
    ''TF.Vault
    ''TF.Resource
    'TF.schema)

{- | The @vault_aws_auth_backend_role@ Vault resource.

Manages an AWS auth backend role in a Vault server. Roles constrain the
instances or principals that can perform the login operation against the
backend. See the <https://www.vaultproject.io/docs/auth/aws.html> for more
information.
-}
data AwsAuthBackendRoleResource = AwsAuthBackendRoleResource {
      _allow_instance_migration       :: !(TF.Argument Text)
    {- ^ (Optional) If set to @true@ , allows migration of the underlying instance where the client resides. -}
    , _auth_type                      :: !(TF.Argument Text)
    {- ^ (Optional) The auth type permitted for this role. Valid choices are @ec2@ and @iam@ . Defaults to @iam@ . -}
    , _bound_account_id               :: !(TF.Argument Text)
    {- ^ (Optional) If set, defines a constraint on the EC2 instances that can perform the login operation that they should be using the account ID specified by this field. @auth_type@ must be set to @ec2@ or @inferred_entity_type@ must be set to @ec2_instance@ to use this constraint. -}
    , _bound_ami_id                   :: !(TF.Argument Text)
    {- ^ (Optional) If set, defines a constraint on the EC2 instances that can perform the login operation that they should be using the AMI ID specified by this field. @auth_type@ must be set to @ec2@ or @inferred_entity_type@ must be set to @ec2_instance@ to use this constraint. -}
    , _bound_iam_instance_profile_arn :: !(TF.Argument Text)
    {- ^ (Optional) If set, defines a constraint on the EC2 instances that can perform the login operation that they must be associated with an IAM instance profile ARN which has a prefix that matches the value specified by this field. The value is prefix-matched as though it were a glob ending in @*@ . @auth_type@ must be set to @ec2@ or @inferred_entity_type@ must be set to @ec2_instance@ to use this constraint. -}
    , _bound_iam_principal_arn        :: !(TF.Argument Text)
    {- ^ (Optional) If set, defines the IAM principal that must be authenticated when @auth_type@ is set to @iam@ . Wildcards are supported at the end of the ARN. -}
    , _bound_iam_role_arn             :: !(TF.Argument Text)
    {- ^ (Optional) If set, defines a constraint on the EC2 instances that can perform the login operation that they must match the IAM role ARN specified by this field. @auth_type@ must be set to @ec2@ or @inferred_entity_type@ must be set to @ec2_instance@ to use this constraint. -}
    , _bound_region                   :: !(TF.Argument Text)
    {- ^ (Optional) If set, defines a constraint on the EC2 instances that can perform the login operation that the region in their identity document must match the one specified by this field. @auth_type@ must be set to @ec2@ or @inferred_entity_type@ must be set to @ec2_instance@ to use this constraint. -}
    , _bound_subnet_id                :: !(TF.Argument Text)
    {- ^ (Optional) If set, defines a constraint on the EC2 instances that can perform the login operation that they be associated with the subnet ID that matches the value specified by this field. @auth_type@ must be set to @ec2@ or @inferred_entity_type@ must be set to @ec2_instance@ to use this constraint. -}
    , _bound_vpc_id                   :: !(TF.Argument Text)
    {- ^ (Optional) If set, defines a constraint on the EC2 instances that can perform the login operation that they be associated with the VPC ID that matches the value specified by this field. @auth_type@ must be set to @ec2@ or @inferred_entity_type@ must be set to @ec2_instance@ to use this constraint. -}
    , _disallow_reauthentication      :: !(TF.Argument Text)
    {- ^ (Optional) IF set to @true@ , only allows a single token to be granted per instance ID. This can only be set when @auth_type@ is set to @ec2@ . -}
    , _inferred_aws_region            :: !(TF.Argument Text)
    {- ^ (Optional) When @inferred_entity_type@ is set, this is the region to search for the inferred entities. Required if @inferred_entity_type@ is set. This only applies when @auth_type@ is set to @iam@ . -}
    , _inferred_entity_type           :: !(TF.Argument Text)
    {- ^ (Optional) If set, instructs Vault to turn on inferencing. The only valid value is @ec2_instance@ , which instructs Vault to infer that the role comes from an EC2 instance in an IAM instance profile. This only applies when @auth_type@ is set to @iam@ . -}
    , _max_ttl                        :: !(TF.Argument Text)
    {- ^ (Optional) The maximum allowed lifetime of tokens issued using this role, provided as a number of minutes. -}
    , _period                         :: !(TF.Argument Text)
    {- ^ (Optional) If set, indicates that the token generated using this role should never expire. The token should be renewed within the duration specified by this value. At each renewal, the token's TTL will be set to the value of this field. The maximum allowed lifetime of token issued using this role. Specified as a number of minutes. -}
    , _policies                       :: !(TF.Argument Text)
    {- ^ (Optional) An array of strings specifying the policies to be set on tokens issued using this role. -}
    , _resolve_aws_unique_ids         :: !(TF.Argument Text)
    {- ^ (Optional) If set to @true@ , the @bound_iam_principal_arn@ is resolved to an <http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-unique-ids> for the bound principal ARN. This field is ignored when @bound_iam_principal_arn@ ends in a wildcard. Resolving to unique IDs more closely mimics the behavior of AWS services in that if an IAM user or role is deleted and a new one is recreated with the same name, those new users or roles won't get access to roles in Vault that were permissioned to the prioer principals of the same name. Defaults to @true@ . Once set to @true@ , this cannot be changed to @false@ --the role must be deleted and recreated, with the value set to @true@ . -}
    , _role                           :: !(TF.Argument Text)
    {- ^ (Required) The name of the role. -}
    , _role_tag                       :: !(TF.Argument Text)
    {- ^ (Optional) If set, enable role tags for this role. The value set for this field should be the key of the tag on the EC2 instance. @auth_type@ must be set to @ec2@ or @inferred_entity_type@ must be set to @ec2_instance@ to use this constraint. -}
    , _ttl                            :: !(TF.Argument Text)
    {- ^ (Optional) The TTL period of tokens issued using this role, provided as a number of minutes. -}
    } deriving (Show, Eq)

awsAuthBackendRoleResource :: TF.Resource TF.Vault AwsAuthBackendRoleResource
awsAuthBackendRoleResource =
    TF.newResource "vault_aws_auth_backend_role" $
        AwsAuthBackendRoleResource {
            _allow_instance_migration = TF.Absent
            , _auth_type = TF.Absent
            , _bound_account_id = TF.Absent
            , _bound_ami_id = TF.Absent
            , _bound_iam_instance_profile_arn = TF.Absent
            , _bound_iam_principal_arn = TF.Absent
            , _bound_iam_role_arn = TF.Absent
            , _bound_region = TF.Absent
            , _bound_subnet_id = TF.Absent
            , _bound_vpc_id = TF.Absent
            , _disallow_reauthentication = TF.Absent
            , _inferred_aws_region = TF.Absent
            , _inferred_entity_type = TF.Absent
            , _max_ttl = TF.Absent
            , _period = TF.Absent
            , _policies = TF.Absent
            , _resolve_aws_unique_ids = TF.Absent
            , _role = TF.Absent
            , _role_tag = TF.Absent
            , _ttl = TF.Absent
            }

instance TF.ToHCL AwsAuthBackendRoleResource where
    toHCL AwsAuthBackendRoleResource{..} = TF.arguments
        [ TF.assign "allow_instance_migration" <$> _allow_instance_migration
        , TF.assign "auth_type" <$> _auth_type
        , TF.assign "bound_account_id" <$> _bound_account_id
        , TF.assign "bound_ami_id" <$> _bound_ami_id
        , TF.assign "bound_iam_instance_profile_arn" <$> _bound_iam_instance_profile_arn
        , TF.assign "bound_iam_principal_arn" <$> _bound_iam_principal_arn
        , TF.assign "bound_iam_role_arn" <$> _bound_iam_role_arn
        , TF.assign "bound_region" <$> _bound_region
        , TF.assign "bound_subnet_id" <$> _bound_subnet_id
        , TF.assign "bound_vpc_id" <$> _bound_vpc_id
        , TF.assign "disallow_reauthentication" <$> _disallow_reauthentication
        , TF.assign "inferred_aws_region" <$> _inferred_aws_region
        , TF.assign "inferred_entity_type" <$> _inferred_entity_type
        , TF.assign "max_ttl" <$> _max_ttl
        , TF.assign "period" <$> _period
        , TF.assign "policies" <$> _policies
        , TF.assign "resolve_aws_unique_ids" <$> _resolve_aws_unique_ids
        , TF.assign "role" <$> _role
        , TF.assign "role_tag" <$> _role_tag
        , TF.assign "ttl" <$> _ttl
        ]

$(TF.makeSchemaLenses
    ''AwsAuthBackendRoleResource
    ''TF.Vault
    ''TF.Resource
    'TF.schema)

{- | The @vault_aws_auth_backend_sts_role@ Vault resource.

Manages an STS role in a Vault server. STS roles are mappings between
account IDs and STS ARNs. When a login attempt is made from an EC2 instance
in the account ID specified, the associated STS role will be used to verify
the request. For more information, see the
<https://www.vaultproject.io/docs/auth/aws.html#cross-account-access> . ~>
Important All data provided in the resource configuration will be written in
cleartext to state and plan files generated by Terraform, and will appear in
the console output when Terraform runs. Protect these artifacts accordingly.
See <../../index.html> for more details.
-}
data AwsAuthBackendStsRoleResource = AwsAuthBackendStsRoleResource {
      _account_id :: !(TF.Argument Text)
    {- ^ (Optional) The AWS account ID to configure the STS role for. -}
    , _backend    :: !(TF.Argument Text)
    {- ^ (Optional) The path the AWS auth backend being configured was mounted at.  Defaults to @aws@ . -}
    , _sts_role   :: !(TF.Argument Text)
    {- ^ (Optional) The STS role to assume when verifying requests made by EC2 instances in the account specified by @account_id@ . -}
    } deriving (Show, Eq)

awsAuthBackendStsRoleResource :: TF.Resource TF.Vault AwsAuthBackendStsRoleResource
awsAuthBackendStsRoleResource =
    TF.newResource "vault_aws_auth_backend_sts_role" $
        AwsAuthBackendStsRoleResource {
            _account_id = TF.Absent
            , _backend = TF.Absent
            , _sts_role = TF.Absent
            }

instance TF.ToHCL AwsAuthBackendStsRoleResource where
    toHCL AwsAuthBackendStsRoleResource{..} = TF.arguments
        [ TF.assign "account_id" <$> _account_id
        , TF.assign "backend" <$> _backend
        , TF.assign "sts_role" <$> _sts_role
        ]

$(TF.makeSchemaLenses
    ''AwsAuthBackendStsRoleResource
    ''TF.Vault
    ''TF.Resource
    'TF.schema)

{- | The @vault_aws_secret_backend@ Vault resource.

Creates an AWS Secret Backend for Vault. AWS secret backends can then issue
AWS access keys and secret keys, once a role has been added to the backend.
~> Important All data provided in the resource configuration will be written
in cleartext to state and plan files generated by Terraform, and will appear
in the console output when Terraform runs. Protect these artifacts
accordingly. See <../index.html> for more details.
-}
data AwsSecretBackendResource = AwsSecretBackendResource {
      _access_key :: !(TF.Argument Text)
    {- ^ (Required) The AWS Access Key ID this backend should use to issue new credentials. -}
    , _secret_key :: !(TF.Argument Text)
    {- ^ (Required) The AWS Secret Key this backend should use to issue new credentials. -}
    } deriving (Show, Eq)

awsSecretBackendResource :: TF.Resource TF.Vault AwsSecretBackendResource
awsSecretBackendResource =
    TF.newResource "vault_aws_secret_backend" $
        AwsSecretBackendResource {
            _access_key = TF.Absent
            , _secret_key = TF.Absent
            }

instance TF.ToHCL AwsSecretBackendResource where
    toHCL AwsSecretBackendResource{..} = TF.arguments
        [ TF.assign "access_key" <$> _access_key
        , TF.assign "secret_key" <$> _secret_key
        ]

$(TF.makeSchemaLenses
    ''AwsSecretBackendResource
    ''TF.Vault
    ''TF.Resource
    'TF.schema)

{- | The @vault_aws_secret_backend_role@ Vault resource.

Creates a role on an AWS Secret Backend for Vault. Roles are used to map
credentials to the policies that generated them. ~> Important All data
provided in the resource configuration will be written in cleartext to state
and plan files generated by Terraform, and will appear in the console output
when Terraform runs. Protect these artifacts accordingly. See
<../index.html> for more details.
-}
data AwsSecretBackendRoleResource = AwsSecretBackendRoleResource {
      _backend    :: !(TF.Argument Text)
    {- ^ (Required) The path the AWS secret backend is mounted at, with no leading or trailing @/@ s. -}
    , _name       :: !(TF.Argument Text)
    {- ^ (Required) The name to identify this role within the backend. Must be unique within the backend. -}
    , _policy     :: !(TF.Argument Text)
    {- ^ (Optional) The JSON-formatted policy to associate with this role. Either @policy@ or @policy_arn@ must be specified. -}
    , _policy_arn :: !(TF.Argument Text)
    {- ^ (Optional) The ARN for a pre-existing policy to associate with this role. Either @policy@ or @policy_arn@ must be specified. -}
    } deriving (Show, Eq)

awsSecretBackendRoleResource :: TF.Resource TF.Vault AwsSecretBackendRoleResource
awsSecretBackendRoleResource =
    TF.newResource "vault_aws_secret_backend_role" $
        AwsSecretBackendRoleResource {
            _backend = TF.Absent
            , _name = TF.Absent
            , _policy = TF.Absent
            , _policy_arn = TF.Absent
            }

instance TF.ToHCL AwsSecretBackendRoleResource where
    toHCL AwsSecretBackendRoleResource{..} = TF.arguments
        [ TF.assign "backend" <$> _backend
        , TF.assign "name" <$> _name
        , TF.assign "policy" <$> _policy
        , TF.assign "policy_arn" <$> _policy_arn
        ]

$(TF.makeSchemaLenses
    ''AwsSecretBackendRoleResource
    ''TF.Vault
    ''TF.Resource
    'TF.schema)

{- | The @vault_generic_secret@ Vault resource.

Writes and manages arbitrary data at a given path in Vault. This resource is
primarily intended to be used with
<https://www.vaultproject.io/docs/secrets/generic/index.html> , but it is
also compatible with any other Vault endpoint that supports the @vault
write@ command to create and the @vault delete@ command to delete. ~>
Important All data provided in the resource configuration will be written in
cleartext to state and plan files generated by Terraform, and will appear in
the console output when Terraform runs. Protect these artifacts accordingly.
See <../index.html> for more details.
-}
data GenericSecretResource = GenericSecretResource {
      _allow_read   :: !(TF.Argument Text)
    {- ^ (Optional, Deprecated) True/false. Set this to true if your vault authentication is able to read the data, this allows the resource to be compared and updated. Defaults to false. -}
    , _data_json    :: !(TF.Argument Text)
    {- ^ (Required) String containing a JSON-encoded object that will be written as the secret data at the given path. -}
    , _disable_read :: !(TF.Argument Text)
    {- ^ (Optional) True/false. Set this to true if your vault authentication is not able to read the data. Setting this to @true@ will break drift detection. Defaults to false. -}
    , _path         :: !(TF.Argument Text)
    {- ^ (Required) The full logical path at which to write the given data. To write data into the "generic" secret backend mounted in Vault by default, this should be prefixed with @secret/@ . Writing to other backends with this resource is possible; consult each backend's documentation to see which endpoints support the @PUT@ and @DELETE@ methods. -}
    } deriving (Show, Eq)

genericSecretResource :: TF.Resource TF.Vault GenericSecretResource
genericSecretResource =
    TF.newResource "vault_generic_secret" $
        GenericSecretResource {
            _allow_read = TF.Absent
            , _data_json = TF.Absent
            , _disable_read = TF.Absent
            , _path = TF.Absent
            }

instance TF.ToHCL GenericSecretResource where
    toHCL GenericSecretResource{..} = TF.arguments
        [ TF.assign "allow_read" <$> _allow_read
        , TF.assign "data_json" <$> _data_json
        , TF.assign "disable_read" <$> _disable_read
        , TF.assign "path" <$> _path
        ]

$(TF.makeSchemaLenses
    ''GenericSecretResource
    ''TF.Vault
    ''TF.Resource
    'TF.schema)

{- | The @vault_mount@ Vault resource.


-}
data MountResource = MountResource {
      _default_lease_ttl_seconds :: !(TF.Argument Text)
    {- ^ (Optional) Default lease duration for tokens and secrets in seconds -}
    , _description               :: !(TF.Argument Text)
    {- ^ (Optional) Human-friendly description of the mount -}
    , _max_lease_ttl_seconds     :: !(TF.Argument Text)
    {- ^ (Optional) Maximum possible lease duration for tokens and secrets in seconds -}
    , _path                      :: !(TF.Argument Text)
    {- ^ (Required) Where the secret backend will be mounted -}
    , _type'                     :: !(TF.Argument Text)
    {- ^ (Required) Type of the backend, such as "aws" -}
    } deriving (Show, Eq)

mountResource :: TF.Resource TF.Vault MountResource
mountResource =
    TF.newResource "vault_mount" $
        MountResource {
            _default_lease_ttl_seconds = TF.Absent
            , _description = TF.Absent
            , _max_lease_ttl_seconds = TF.Absent
            , _path = TF.Absent
            , _type' = TF.Absent
            }

instance TF.ToHCL MountResource where
    toHCL MountResource{..} = TF.arguments
        [ TF.assign "default_lease_ttl_seconds" <$> _default_lease_ttl_seconds
        , TF.assign "description" <$> _description
        , TF.assign "max_lease_ttl_seconds" <$> _max_lease_ttl_seconds
        , TF.assign "path" <$> _path
        , TF.assign "type" <$> _type'
        ]

$(TF.makeSchemaLenses
    ''MountResource
    ''TF.Vault
    ''TF.Resource
    'TF.schema)

{- | The @vault_policy@ Vault resource.


-}
data PolicyResource = PolicyResource {
      _name   :: !(TF.Argument Text)
    {- ^ (Required) The name of the policy -}
    , _policy :: !(TF.Argument Text)
    {- ^ (Required) String containing a Vault policy -}
    } deriving (Show, Eq)

policyResource :: TF.Resource TF.Vault PolicyResource
policyResource =
    TF.newResource "vault_policy" $
        PolicyResource {
            _name = TF.Absent
            , _policy = TF.Absent
            }

instance TF.ToHCL PolicyResource where
    toHCL PolicyResource{..} = TF.arguments
        [ TF.assign "name" <$> _name
        , TF.assign "policy" <$> _policy
        ]

$(TF.makeSchemaLenses
    ''PolicyResource
    ''TF.Vault
    ''TF.Resource
    'TF.schema)
