-- This module is auto-generated.

{-# LANGUAGE DuplicateRecordFields  #-}
{-# LANGUAGE FlexibleContexts       #-}
{-# LANGUAGE FlexibleInstances      #-}
{-# LANGUAGE FunctionalDependencies #-}
{-# LANGUAGE MultiParamTypeClasses  #-}
{-# LANGUAGE NoImplicitPrelude      #-}
{-# LANGUAGE OverloadedStrings      #-}
{-# LANGUAGE RecordWildCards        #-}
{-# LANGUAGE TemplateHaskell        #-}
{-# LANGUAGE UndecidableInstances   #-}

{-# OPTIONS_GHC -fno-warn-unused-imports #-}

-- |
-- Module      : Terrafomo.Grafana.Resource
-- Copyright   : (c) 2017 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+terrafomo@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
module Terrafomo.Grafana.Resource where

import Data.Functor ((<$>))
import Data.Maybe   (catMaybes)
import Data.Text    (Text)

import GHC.Base (Eq, const, ($))
import GHC.Show (Show)

import qualified Terrafomo.Grafana         as TF
import qualified Terrafomo.Syntax.HCL      as TF
import qualified Terrafomo.Syntax.Resource as TF
import qualified Terrafomo.Syntax.Variable as TF
import qualified Terrafomo.TH              as TF

{- | The @grafana_alert_notification@ Grafana resource.

The alert notification resource allows an alert notification channel to be
created on a Grafana server.
-}
data AlertNotificationResource = AlertNotificationResource {
      _is_default  :: !(TF.Argument Text)
    {- ^ (Optional) Is this the default channel for all your alerts. -}
    , _name        :: !(TF.Argument Text)
    {- ^ (Required) The name of the alert notification channel. -}
    , _settings    :: !(TF.Argument Text)
    {- ^ (Optional) Additional settings, for full reference lookup <http://docs.grafana.org/http_api/alerting> . -}
    , _type'       :: !(TF.Argument Text)
    {- ^ (Required) The type of the alert notification channel. -}
    , _computed_id :: !(TF.Attribute Text)
    {- ^ - The ID of the resource -}
    } deriving (Show, Eq)

alertNotificationResource :: TF.Resource TF.Grafana AlertNotificationResource
alertNotificationResource =
    TF.newResource "grafana_alert_notification" $
        AlertNotificationResource {
            _is_default = TF.Absent
            , _name = TF.Absent
            , _settings = TF.Absent
            , _type' = TF.Absent
            , _computed_id = TF.Computed "id"
            }

instance TF.ToHCL AlertNotificationResource where
    toHCL AlertNotificationResource{..} = TF.arguments
        [ TF.assign "is_default" <$> _is_default
        , TF.assign "name" <$> _name
        , TF.assign "settings" <$> _settings
        , TF.assign "type" <$> _type'
        ]

$(TF.makeSchemaLenses
    ''AlertNotificationResource
    ''TF.Grafana
    ''TF.Resource
    'TF.schema)

{- | The @grafana_dashboard@ Grafana resource.

The dashboard resource allows a dashboard to be created on a Grafana server.
-}
data DashboardResource = DashboardResource {
      _config_json   :: !(TF.Argument Text)
    {- ^ (Required) The JSON configuration for the dashboard. -}
    , _computed_slug :: !(TF.Attribute Text)
    {- ^ - A URL "slug" for this dashboard, generated by Grafana by removing certain characters from the dashboard name given as part of the @config_json@ argument. This can be used to generate the URL for a dashboard. -}
    } deriving (Show, Eq)

dashboardResource :: TF.Resource TF.Grafana DashboardResource
dashboardResource =
    TF.newResource "grafana_dashboard" $
        DashboardResource {
            _config_json = TF.Absent
            , _computed_slug = TF.Computed "slug"
            }

instance TF.ToHCL DashboardResource where
    toHCL DashboardResource{..} = TF.arguments
        [ TF.assign "config_json" <$> _config_json
        ]

$(TF.makeSchemaLenses
    ''DashboardResource
    ''TF.Grafana
    ''TF.Resource
    'TF.schema)

{- | The @grafana_data_source@ Grafana resource.

The data source resource allows a data source to be created on a Grafana
server.
-}
data DataSourceResource = DataSourceResource {
      _access_mode         :: !(TF.Argument Text)
    {- ^ (Optional) The method by which the browser-based Grafana application will access the data source. The default is "proxy", which means that the application will make requests via a proxy endpoint on the Grafana server. -}
    , _basic_auth_enabled  :: !(TF.Argument Text)
    {- ^ (Optional) - If true, HTTP basic authentication will be used to make requests. -}
    , _basic_auth_password :: !(TF.Argument Text)
    {- ^ (Required if @basic_auth_enabled@ is true) The password to use for basic auth. -}
    , _basic_auth_username :: !(TF.Argument Text)
    {- ^ (Required if @basic_auth_enabled@ is true) The username to use for basic auth. -}
    , _database_name       :: !(TF.Argument Text)
    {- ^ (Required by some data source types) The name of the database to use on the selected data source server. -}
    , _is_default          :: !(TF.Argument Text)
    {- ^ (Optional) If true, the data source will be the default source used by the Grafana server. Only one data source on a server can be the default. -}
    , _json_data           :: !(TF.Argument Text)
    {- ^ (Required by some data source types) The default region and authentication type to access the data source. @json_data@ is documented in more detail below. -}
    , _name                :: !(TF.Argument Text)
    {- ^ (Required) A unique name for the data source within the Grafana server. -}
    , _password            :: !(TF.Argument Text)
    {- ^ (Required by some data source types) The password to use to authenticate to the data source. -}
    , _secure_json_data    :: !(TF.Argument Text)
    {- ^ (Required by some data source types) The access and secret keys required to access the data source. @secure_json_data@ is documented in more detail below. -}
    , _type'               :: !(TF.Argument Text)
    {- ^ (Required) The data source type. Must be one of the data source keywords supported by the Grafana server. -}
    , _url                 :: !(TF.Argument Text)
    {- ^ (Required) The URL for the data source. The type of URL required varies depending on the chosen data source type. -}
    , _username            :: !(TF.Argument Text)
    {- ^ (Required by some data source types) The username to use to authenticate to the data source. -}
    , _computed_id         :: !(TF.Attribute Text)
    {- ^ - The opaque unique id assigned to the data source by the Grafana server. -}
    } deriving (Show, Eq)

dataSourceResource :: TF.Resource TF.Grafana DataSourceResource
dataSourceResource =
    TF.newResource "grafana_data_source" $
        DataSourceResource {
            _access_mode = TF.Absent
            , _basic_auth_enabled = TF.Absent
            , _basic_auth_password = TF.Absent
            , _basic_auth_username = TF.Absent
            , _database_name = TF.Absent
            , _is_default = TF.Absent
            , _json_data = TF.Absent
            , _name = TF.Absent
            , _password = TF.Absent
            , _secure_json_data = TF.Absent
            , _type' = TF.Absent
            , _url = TF.Absent
            , _username = TF.Absent
            , _computed_id = TF.Computed "id"
            }

instance TF.ToHCL DataSourceResource where
    toHCL DataSourceResource{..} = TF.arguments
        [ TF.assign "access_mode" <$> _access_mode
        , TF.assign "basic_auth_enabled" <$> _basic_auth_enabled
        , TF.assign "basic_auth_password" <$> _basic_auth_password
        , TF.assign "basic_auth_username" <$> _basic_auth_username
        , TF.assign "database_name" <$> _database_name
        , TF.assign "is_default" <$> _is_default
        , TF.assign "json_data" <$> _json_data
        , TF.assign "name" <$> _name
        , TF.assign "password" <$> _password
        , TF.assign "secure_json_data" <$> _secure_json_data
        , TF.assign "type" <$> _type'
        , TF.assign "url" <$> _url
        , TF.assign "username" <$> _username
        ]

$(TF.makeSchemaLenses
    ''DataSourceResource
    ''TF.Grafana
    ''TF.Resource
    'TF.schema)
