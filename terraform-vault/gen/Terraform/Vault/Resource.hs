-- This module is auto-generated.

{-# LANGUAGE DataKinds              #-}
{-# LANGUAGE DeriveGeneric          #-}
{-# LANGUAGE DuplicateRecordFields  #-}
{-# LANGUAGE FlexibleContexts       #-}
{-# LANGUAGE FlexibleInstances      #-}
{-# LANGUAGE FunctionalDependencies #-}
{-# LANGUAGE MultiParamTypeClasses  #-}
{-# LANGUAGE OverloadedStrings      #-}
{-# LANGUAGE TemplateHaskell        #-}
{-# LANGUAGE TypeFamilies           #-}

module Terraform.Vault.Resource where

import Data.Text (Text)

import GHC.Generics (Generic)

import Terraform.Vault.Provider (Vault, defaultProvider)
import Terraform.Vault.Types
import Terraform.Syntax.Attribute (Attr, Computed)

import qualified Terraform.Syntax.TH as TH

-- | The @vault_auth_backend@ Vault resource.
--
-- 
data Auth_Backend_Resource = Auth_Backend_Resource
    { description :: !(Attr Text)
      {- ^ (Optional) A description of the auth backend -}
    , path :: !(Attr Text)
      {- ^ (Optional) The path to mount the auth backend. This defaults to the name. -}
    , type' :: !(Attr Text)
      {- ^ (Required) The name of the policy -}
    } deriving (Show, Eq, Generic)

type instance Computed Auth_Backend_Resource
    = '[]

$(TH.makeResource
    "vault_auth_backend"
    ''Vault
    'defaultProvider
    ''Auth_Backend_Resource)

-- | The @vault_aws_auth_backend_cert@ Vault resource.
--
-- Manages a certificate to be used with an AWS Auth Backend in Vault. This resource sets the AWS public key and the type of document that can be verified against the key that Vault can then use to verify the instance identity documents making auth requests. For more information, see the <https://www.vaultproject.io/api/auth/aws/index.html#configure-client> . ~> Important All data provided in the resource configuration will be written in cleartext to state and plan files generated by Terraform, and will appear in the console output when Terraform runs. Protect these artifacts accordingly. See <../index.html> for more details.
data Aws_Auth_Backend_Cert_Resource = Aws_Auth_Backend_Cert_Resource
    { aws_public_cert :: !(Attr Text)
      {- ^ (Required) The  Base64 encoded AWS Public key required to verify PKCS7 signature of the EC2 instance metadata. You can find this key in the <http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-identity-documents.html> . -}
    , backend :: !(Attr Text)
      {- ^ (Optional) The path the AWS auth backend being configured was mounted at.  Defaults to @aws@ . -}
    , cert_name :: !(Attr Text)
      {- ^ (Required) The name of the certificate. -}
    , type' :: !(Attr Text)
      {- ^ (Optional) Either "pkcs7" or "identity", indicating the type of document which can be verified using the given certificate. Defaults to "pkcs7". -}
    } deriving (Show, Eq, Generic)

type instance Computed Aws_Auth_Backend_Cert_Resource
    = '[]

$(TH.makeResource
    "vault_aws_auth_backend_cert"
    ''Vault
    'defaultProvider
    ''Aws_Auth_Backend_Cert_Resource)

-- | The @vault_aws_auth_backend_client@ Vault resource.
--
-- Configures the client used by an AWS Auth Backend in Vault. This resource sets the access key and secret key that Vault will use when making API requests on behalf of an AWS Auth Backend. It can also be used to override the URLs Vault uses when making those API requests. For more information, see the <https://www.vaultproject.io/api/auth/aws/index.html#configure-client> . ~> Important All data provided in the resource configuration will be written in cleartext to state and plan files generated by Terraform, and will appear in the console output when Terraform runs. Protect these artifacts accordingly. See <../index.html> for more details.
data Aws_Auth_Backend_Client_Resource = Aws_Auth_Backend_Client_Resource
    { access_key :: !(Attr Text)
      {- ^ (Optional) The AWS access key that Vault should use for the auth backend. -}
    , backend :: !(Attr Text)
      {- ^ (Optional) The path the AWS auth backend being configured was mounted at.  Defaults to @aws@ . -}
    , ec2_endpoint :: !(Attr Text)
      {- ^ (Optional) Override the URL Vault uses when making EC2 API calls. -}
    , iam_endpoint :: !(Attr Text)
      {- ^ (Optional) Override the URL Vault uses when making IAM API calls. -}
    , iam_server_id_header_value :: !(Attr Text)
      {- ^ (Optional) The value to require in the @X-Vault-AWS-IAM-Server-ID@ header as part of @GetCallerIdentity@ requests that are used in the IAM auth method. -}
    , secret_key :: !(Attr Text)
      {- ^ (Optional) The AWS secret key that Vault should use for the auth backend. -}
    , sts_endpoint :: !(Attr Text)
      {- ^ (Optional) Override the URL Vault uses when making STS API calls. -}
    } deriving (Show, Eq, Generic)

type instance Computed Aws_Auth_Backend_Client_Resource
    = '[]

$(TH.makeResource
    "vault_aws_auth_backend_client"
    ''Vault
    'defaultProvider
    ''Aws_Auth_Backend_Client_Resource)

-- | The @vault_aws_auth_backend_role@ Vault resource.
--
-- Manages an AWS auth backend role in a Vault server. Roles constrain the instances or principals that can perform the login operation against the backend. See the <https://www.vaultproject.io/docs/auth/aws.html> for more information.
data Aws_Auth_Backend_Role_Resource = Aws_Auth_Backend_Role_Resource
    { allow_instance_migration :: !(Attr Text)
      {- ^ (Optional) If set to @true@ , allows migration of the underlying instance where the client resides. -}
    , auth_type :: !(Attr Text)
      {- ^ (Optional) The auth type permitted for this role. Valid choices are @ec2@ and @iam@ . Defaults to @iam@ . -}
    , bound_account_id :: !(Attr Text)
      {- ^ (Optional) If set, defines a constraint on the EC2 instances that can perform the login operation that they should be using the account ID specified by this field. @auth_type@ must be set to @ec2@ or @inferred_entity_type@ must be set to @ec2_instance@ to use this constraint. -}
    , bound_ami_id :: !(Attr Text)
      {- ^ (Optional) If set, defines a constraint on the EC2 instances that can perform the login operation that they should be using the AMI ID specified by this field. @auth_type@ must be set to @ec2@ or @inferred_entity_type@ must be set to @ec2_instance@ to use this constraint. -}
    , bound_iam_instance_profile_arn :: !(Attr Text)
      {- ^ (Optional) If set, defines a constraint on the EC2 instances that can perform the login operation that they must be associated with an IAM instance profile ARN which has a prefix that matches the value specified by this field. The value is prefix-matched as though it were a glob ending in @*@ . @auth_type@ must be set to @ec2@ or @inferred_entity_type@ must be set to @ec2_instance@ to use this constraint. -}
    , bound_iam_principal_arn :: !(Attr Text)
      {- ^ (Optional) If set, defines the IAM principal that must be authenticated when @auth_type@ is set to @iam@ . Wildcards are supported at the end of the ARN. -}
    , bound_iam_role_arn :: !(Attr Text)
      {- ^ (Optional) If set, defines a constraint on the EC2 instances that can perform the login operation that they must match the IAM role ARN specified by this field. @auth_type@ must be set to @ec2@ or @inferred_entity_type@ must be set to @ec2_instance@ to use this constraint. -}
    , bound_region :: !(Attr Text)
      {- ^ (Optional) If set, defines a constraint on the EC2 instances that can perform the login operation that the region in their identity document must match the one specified by this field. @auth_type@ must be set to @ec2@ or @inferred_entity_type@ must be set to @ec2_instance@ to use this constraint. -}
    , bound_subnet_id :: !(Attr Text)
      {- ^ (Optional) If set, defines a constraint on the EC2 instances that can perform the login operation that they be associated with the subnet ID that matches the value specified by this field. @auth_type@ must be set to @ec2@ or @inferred_entity_type@ must be set to @ec2_instance@ to use this constraint. -}
    , bound_vpc_id :: !(Attr Text)
      {- ^ (Optional) If set, defines a constraint on the EC2 instances that can perform the login operation that they be associated with the VPC ID that matches the value specified by this field. @auth_type@ must be set to @ec2@ or @inferred_entity_type@ must be set to @ec2_instance@ to use this constraint. -}
    , disallow_reauthentication :: !(Attr Text)
      {- ^ (Optional) IF set to @true@ , only allows a single token to be granted per instance ID. This can only be set when @auth_type@ is set to @ec2@ . -}
    , inferred_aws_region :: !(Attr Text)
      {- ^ (Optional) When @inferred_entity_type@ is set, this is the region to search for the inferred entities. Required if @inferred_entity_type@ is set. This only applies when @auth_type@ is set to @iam@ . -}
    , inferred_entity_type :: !(Attr Text)
      {- ^ (Optional) If set, instructs Vault to turn on inferencing. The only valid value is @ec2_instance@ , which instructs Vault to infer that the role comes from an EC2 instance in an IAM instance profile. This only applies when @auth_type@ is set to @iam@ . -}
    , max_ttl :: !(Attr Text)
      {- ^ (Optional) The maximum allowed lifetime of tokens issued using this role, provided as a number of minutes. -}
    , period :: !(Attr Text)
      {- ^ (Optional) If set, indicates that the token generated using this role should never expire. The token should be renewed within the duration specified by this value. At each renewal, the token's TTL will be set to the value of this field. The maximum allowed lifetime of token issued using this role. Specified as a number of minutes. -}
    , policies :: !(Attr Text)
      {- ^ (Optional) An array of strings specifying the policies to be set on tokens issued using this role. -}
    , resolve_aws_unique_ids :: !(Attr Text)
      {- ^ (Optional) If set to @true@ , the @bound_iam_principal_arn@ is resolved to an <http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-unique-ids> for the bound principal ARN. This field is ignored when @bound_iam_principal_arn@ ends in a wildcard. Resolving to unique IDs more closely mimics the behavior of AWS services in that if an IAM user or role is deleted and a new one is recreated with the same name, those new users or roles won't get access to roles in Vault that were permissioned to the prioer principals of the same name. Defaults to @true@ . Once set to @true@ , this cannot be changed to @false@ --the role must be deleted and recreated, with the value set to @true@ . -}
    , role :: !(Attr Text)
      {- ^ (Required) The name of the role. -}
    , role_tag :: !(Attr Text)
      {- ^ (Optional) If set, enable role tags for this role. The value set for this field should be the key of the tag on the EC2 instance. @auth_type@ must be set to @ec2@ or @inferred_entity_type@ must be set to @ec2_instance@ to use this constraint. -}
    , ttl :: !(Attr Text)
      {- ^ (Optional) The TTL period of tokens issued using this role, provided as a number of minutes. -}
    } deriving (Show, Eq, Generic)

type instance Computed Aws_Auth_Backend_Role_Resource
    = '[]

$(TH.makeResource
    "vault_aws_auth_backend_role"
    ''Vault
    'defaultProvider
    ''Aws_Auth_Backend_Role_Resource)

-- | The @vault_aws_auth_backend_sts_role@ Vault resource.
--
-- Manages an STS role in a Vault server. STS roles are mappings between account IDs and STS ARNs. When a login attempt is made from an EC2 instance in the account ID specified, the associated STS role will be used to verify the request. For more information, see the <https://www.vaultproject.io/docs/auth/aws.html#cross-account-access> . ~> Important All data provided in the resource configuration will be written in cleartext to state and plan files generated by Terraform, and will appear in the console output when Terraform runs. Protect these artifacts accordingly. See <../../index.html> for more details.
data Aws_Auth_Backend_Sts_Role_Resource = Aws_Auth_Backend_Sts_Role_Resource
    { account_id :: !(Attr Text)
      {- ^ (Optional) The AWS account ID to configure the STS role for. -}
    , backend :: !(Attr Text)
      {- ^ (Optional) The path the AWS auth backend being configured was mounted at.  Defaults to @aws@ . -}
    , sts_role :: !(Attr Text)
      {- ^ (Optional) The STS role to assume when verifying requests made by EC2 instances in the account specified by @account_id@ . -}
    } deriving (Show, Eq, Generic)

type instance Computed Aws_Auth_Backend_Sts_Role_Resource
    = '[]

$(TH.makeResource
    "vault_aws_auth_backend_sts_role"
    ''Vault
    'defaultProvider
    ''Aws_Auth_Backend_Sts_Role_Resource)

-- | The @vault_aws_secret_backend@ Vault resource.
--
-- Creates an AWS Secret Backend for Vault. AWS secret backends can then issue AWS access keys and secret keys, once a role has been added to the backend. ~> Important All data provided in the resource configuration will be written in cleartext to state and plan files generated by Terraform, and will appear in the console output when Terraform runs. Protect these artifacts accordingly. See <../index.html> for more details.
data Aws_Secret_Backend_Resource = Aws_Secret_Backend_Resource
    { access_key :: !(Attr Text)
      {- ^ (Required) The AWS Access Key ID this backend should use to issue new credentials. -}
    , secret_key :: !(Attr Text)
      {- ^ (Required) The AWS Secret Key this backend should use to issue new credentials. -}
    } deriving (Show, Eq, Generic)

type instance Computed Aws_Secret_Backend_Resource
    = '[]

$(TH.makeResource
    "vault_aws_secret_backend"
    ''Vault
    'defaultProvider
    ''Aws_Secret_Backend_Resource)

-- | The @vault_aws_secret_backend_role@ Vault resource.
--
-- Creates a role on an AWS Secret Backend for Vault. Roles are used to map credentials to the policies that generated them. ~> Important All data provided in the resource configuration will be written in cleartext to state and plan files generated by Terraform, and will appear in the console output when Terraform runs. Protect these artifacts accordingly. See <../index.html> for more details.
data Aws_Secret_Backend_Role_Resource = Aws_Secret_Backend_Role_Resource
    { backend :: !(Attr Text)
      {- ^ (Required) The path the AWS secret backend is mounted at, with no leading or trailing @/@ s. -}
    , name :: !(Attr Text)
      {- ^ (Required) The name to identify this role within the backend. Must be unique within the backend. -}
    , policy :: !(Attr Text)
      {- ^ (Optional) The JSON-formatted policy to associate with this role. Either @policy@ or @policy_arn@ must be specified. -}
    , policy_arn :: !(Attr Text)
      {- ^ (Optional) The ARN for a pre-existing policy to associate with this role. Either @policy@ or @policy_arn@ must be specified. -}
    } deriving (Show, Eq, Generic)

type instance Computed Aws_Secret_Backend_Role_Resource
    = '[]

$(TH.makeResource
    "vault_aws_secret_backend_role"
    ''Vault
    'defaultProvider
    ''Aws_Secret_Backend_Role_Resource)

-- | The @vault_generic_secret@ Vault resource.
--
-- Writes and manages arbitrary data at a given path in Vault. This resource is primarily intended to be used with <https://www.vaultproject.io/docs/secrets/generic/index.html> , but it is also compatible with any other Vault endpoint that supports the @vault write@ command to create and the @vault delete@ command to delete. ~> Important All data provided in the resource configuration will be written in cleartext to state and plan files generated by Terraform, and will appear in the console output when Terraform runs. Protect these artifacts accordingly. See <../index.html> for more details.
data Generic_Secret_Resource = Generic_Secret_Resource
    { allow_read :: !(Attr Text)
      {- ^ (Optional) True/false. Set this to true if your vault authentication is able to read the data, this allows the resource to be compared and updated. Defaults to false. -}
    , data_json :: !(Attr Text)
      {- ^ (Required) String containing a JSON-encoded object that will be written as the secret data at the given path. -}
    , path :: !(Attr Text)
      {- ^ (Required) The full logical path at which to write the given data. To write data into the "generic" secret backend mounted in Vault by default, this should be prefixed with @secret/@ . Writing to other backends with this resource is possible; consult each backend's documentation to see which endpoints support the @PUT@ and @DELETE@ methods. -}
    } deriving (Show, Eq, Generic)

type instance Computed Generic_Secret_Resource
    = '[]

$(TH.makeResource
    "vault_generic_secret"
    ''Vault
    'defaultProvider
    ''Generic_Secret_Resource)

-- | The @vault_mount@ Vault resource.
--
-- 
data Mount_Resource = Mount_Resource
    { default_lease_ttl_seconds :: !(Attr Text)
      {- ^ (Optional) Default lease duration for tokens and secrets in seconds -}
    , description :: !(Attr Text)
      {- ^ (Optional) Human-friendly description of the mount -}
    , max_lease_ttl_seconds :: !(Attr Text)
      {- ^ (Optional) Maximum possible lease duration for tokens and secrets in seconds -}
    , path :: !(Attr Text)
      {- ^ (Required) Where the secret backend will be mounted -}
    , type' :: !(Attr Text)
      {- ^ (Required) Type of the backend, such as "aws" -}
    } deriving (Show, Eq, Generic)

type instance Computed Mount_Resource
    = '[]

$(TH.makeResource
    "vault_mount"
    ''Vault
    'defaultProvider
    ''Mount_Resource)

-- | The @vault_policy@ Vault resource.
--
-- 
data Policy_Resource = Policy_Resource
    { name :: !(Attr Text)
      {- ^ (Required) The name of the policy -}
    , policy :: !(Attr Text)
      {- ^ (Required) String containing a Vault policy -}
    } deriving (Show, Eq, Generic)

type instance Computed Policy_Resource
    = '[]

$(TH.makeResource
    "vault_policy"
    ''Vault
    'defaultProvider
    ''Policy_Resource)
