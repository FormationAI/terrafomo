{-# LANGUAGE FlexibleContexts  #-}
{-# LANGUAGE NoImplicitPrelude #-}

module Terraform.Prelude
    ( module Terraform.Prelude

    , (.)
    -- And so on ..
    ) where

import Prelude ((.))

import Data.Bool       (Bool (False, True))
import Data.Map.Strict (Map)
--import Data.Maybe      (Maybe (Nothing))
import Data.Text (Text)

import Numeric.Natural (Natural)

import Terraform.Syntax

-- Example

import Prelude (Num (..), ($))

import           Terraform.AWS.Provider (AWS)
import qualified Terraform.AWS.Resource as AWS

-- how about no name? autogenerated names?
-- do this in a monad?
-- along with the provider default configuration?

example :: Resource AWS ()
example =
    -- resource "aws_instance" "name" {
    resource AWS.Instance $ do
        -- foo = "${var "variable" ? true : false}"
        value "foo" $ bool true false (var "variable")

        -- bar {
        --     a = true
        --     b = "${false == true || true > false}"
        --     c = "${1 + 3 * 3}"
        -- }
        block "bar" $ do
            value "a" true
            value "b" (false == true || true > false)
            value "c" (1 + 3 * 3)

        -- baz = "${aws_instance.name.example}"
        value "baz" $ ref example "example"
    -- }

-- Variables

var :: Name -> Expr a
var = Var . VString

map :: Name -> Name -> Expr (Map Text a)
map name idx = Var (VMap name idx)

list :: Name -> Expr [a]
list = Var . VList

(!) :: Name -> Natural -> Expr a
(!) name idx = Var (VIndex name idx)

-- References

-- FIXME: handle replacing this with "${self. ...}" when the name hash is identical.
ref :: HasRef a => a -> Name -> Expr a
ref x = Ref . getRef x

-- data_ :: Type -> Name -> Name -> Expr a
-- data_ typ name attr = Ref (RData typ name Nothing attr)

-- Boolean Logic

bool :: Expr a -> Expr a -> Expr Bool -> Expr a
bool f t p = Cond p t f

true :: Expr Bool
true = Lit True

false :: Expr Bool
false = Lit False

not :: Expr Bool -> Expr Bool
not = Not

(||) :: Expr Bool -> Expr Bool -> Expr Bool
(||) = Bin Or

(&&) :: Expr Bool -> Expr Bool -> Expr Bool
(&&) = Bin And

-- Equality

(==) :: Expr Bool -> Expr Bool -> Expr Bool
(==) = Bin Equal

(!=) :: Expr Bool -> Expr Bool -> Expr Bool
(!=) a b = not (Bin Equal a b)

-- Relational

(>) :: Expr Bool -> Expr Bool -> Expr Bool
(>) = Bin Greater

(>=) :: Expr Bool -> Expr Bool -> Expr Bool
(>=) = Bin GreaterOrEqual

(<) :: Expr Bool -> Expr Bool -> Expr Bool
(<) = Bin Less

(<=) :: Expr Bool -> Expr Bool -> Expr Bool
(<=) = Bin LessOrEqual

-- Numeric

(/) :: Expr Bool -> Expr Bool -> Expr Bool
(/) = Num Div

(%) :: Expr Bool -> Expr Bool -> Expr Bool
(%) = Num Mod
