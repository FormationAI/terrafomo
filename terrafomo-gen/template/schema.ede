-- This module is auto-generated.

{-# LANGUAGE DataKinds              #-}
{-# LANGUAGE DeriveGeneric          #-}
{-# LANGUAGE DuplicateRecordFields  #-}
{-# LANGUAGE FlexibleContexts       #-}
{-# LANGUAGE FlexibleInstances      #-}
{-# LANGUAGE FunctionalDependencies #-}
{-# LANGUAGE MultiParamTypeClasses  #-}
{-# LANGUAGE NoImplicitPrelude      #-}
{-# LANGUAGE OverloadedStrings      #-}
{-# LANGUAGE TemplateHaskell        #-}
{-# LANGUAGE TypeFamilies           #-}
{-# LANGUAGE UndecidableInstances   #-}

{-# OPTIONS_GHC -fno-warn-unused-imports #-}

{% include "_include/license.ede" %}
--
module {{ namespace }} where

import Data.Text (Text)

import GHC.Base     (Eq)
import GHC.Generics (Generic)
import GHC.Show     (Show)

import Terrafomo.Syntax.Attribute (Attr, Computed)

{% for import in imports %}
import qualified {{ import.value }} as Qual
{% endfor %}
import qualified Terrafomo.Syntax.TH as TH
{% for schema in schemas %}

{% let original = schema.value._name %}
{- | The @{{ original }}@ {{ provider.name }} {{ type | toLower }}.
{% if schema.value.about %}

{{ schema.value.about | wrap }}
{% endif %}
{% for example in schema.value.examples %}

{% if example.value.title %}
{{ example.value.title }}

{% endif %}
@
{% for line in example.value.code %}
{{ line.value }}
{% endfor %}
@
{% endfor %}
-}
data {{ schema.key }} = {{ schema.key }}
  {% for arg in schema.value.arguments %}
    {% if arg.first %}{ {% else %}, {% endif %}{{ arg.key }} :: !(Attr {{ arg.value.type }})
      {- ^ {{ arg.value.help }} -}
    {% if arg.last %}
    } deriving (Show, Generic)
    {% endif %}
  {% else %}
    deriving (Show, Generic)
  {% endfor %}
{% for attr in schema.value.attributes %}
  {% if attr.first %}

type instance Computed {{ schema.key }}
  {% endif %}
    {% if attr.first %}= '[{% else %}  ,{% endif %} '("{{ attr.key }}", {{ attr.value.type }})
         {- {{ attr.value.help }} -}
    {% if attr.last %}
       ]
    {% endif %}
{% else %}
{% endfor %}

$(TH.make{{ type }}
    "{{ original }}"
    ''Qual.{{ provider.type }}
    ''{{ schema.key }})
{% endlet %}
{% endfor %}
