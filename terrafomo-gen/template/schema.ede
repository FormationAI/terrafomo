-- This module is auto-generated.

{-# LANGUAGE FlexibleInstances      #-}
{-# LANGUAGE DuplicateRecordFields  #-}
{-# LANGUAGE FunctionalDependencies #-}
{-# LANGUAGE MultiParamTypeClasses  #-}
{-# LANGUAGE NoImplicitPrelude      #-}
{-# LANGUAGE OverloadedStrings      #-}
{-# LANGUAGE RecordWildCards        #-}
{-# LANGUAGE ScopedTypeVariables    #-}

{-# OPTIONS_GHC -fno-warn-unused-imports #-}

{% include "_include/license.ede" %}
--
module {{ namespace }}
    (
    -- * Types
  {% for schema in schemas %}
    {% if schema.first %} {% else %},{% endif %} {{ schema.key }} (..)
    , {{ schema.key | lowerHead }}

  {% endfor %}
    -- * Overloaded Fields
    -- ** Arguments
  {% for class in argumentClasses %}
    , P.{{ class.value.name }} (..)
  {% endfor %}

    -- ** Computed Attributes
  {% for class in attributeClasses %}
    , P.{{ class.value.name }} (..)
  {% endfor %}

    -- * Re-exported Types
    , module P
    ) where

import Data.Maybe (catMaybes)
import Data.Text  (Text)

import GHC.Base (Eq, ($))
import GHC.Show (Show)

import Lens.Micro (lens)

import {{ typesNamespace }} as P
{% for import in imports %}
import qualified {{ import.value }} as P
{% endfor %}
import qualified Data.Word       as P
import qualified GHC.Base        as P
import qualified Numeric.Natural as P
import qualified Terrafomo.IP    as P

import qualified Terrafomo.Attribute as TF
import qualified Terrafomo.HCL       as TF
import qualified Terrafomo.Schema    as TF
{% for schema in schemas %}

{% let original = schema.value.name %}
{- | The @{{ original }}@ {{ provider.name }} {{ type | toLower }}.
{% if schema.value.about %}

{{ schema.value.about | wrap }}
{% endif %}
{% for example in schema.value.examples %}

{% if example.value.title %}
{{ example.value.title }}

{% endif %}
@
{% for line in example.value.code %}
{{ line.value }}
{% endfor %}
@
{% endfor %}
-}
data {{ schema.key }} s = {{ schema.key }} {
  {% for arg in schema.value.arguments %}
    {% if arg.first %}  {% else %}, {% endif %}{{ arg.key }} :: !(TF.Attribute s {{ arg.value.type }})
    {- ^ {{ arg.value.help }} -}
  {% endfor %}
    } deriving (Show, Eq)

instance TF.ToHCL ({{ schema.key }} s) where
  {% for arg in schema.value.arguments %}
    {% if arg.first %}toHCL {{ schema.key }}{..} = TF.block $ catMaybes
        [{% else %}    ,{% endif %} TF.attribute "{{ arg.value.name }}" {{ arg.key }}{% if arg.last %}
        ]{% endif %}
  {% else %}
    toHCL _ = TF.block []
  {% endfor %}

  {% for field in schema.value.argumentFields %}
instance P.{{ field.value.class }} ({{ schema.key }} s) s {{ field.value.type }} where
    {{ field.value.method }} =
        lens ({{ field.value.label }} :: {{ schema.key }} s -> TF.Attribute s {{ field.value.type }})
             (\s a -> s { {{ field.value.label }} = a } :: {{ schema.key }} s)

  {% endfor %}
  {% for field in schema.value.attributeFields %}
instance P.{{ field.value.class }} ({{ schema.key }} s) {{ field.value.type }}
  {% endfor %}

{% let constructor = schema.key | lowerHead %}
{{ constructor }} :: TF.Schema TF.{{ type }} P.{{ provider.name }} ({{ schema.key }} s)
{{ constructor }} =
    TF.new{{ type }} "{{ original }}" $
        {{ schema.key }} {
          {% for arg in schema.value.arguments %}
            {% if arg.first %}  {% else %}, {% endif %}{{ arg.key }} = TF.Nil
          {% endfor %}
            }
{% endlet %}
{% endlet %}
{% endfor %}
