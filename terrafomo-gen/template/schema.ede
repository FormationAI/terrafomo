-- This module is auto-generated.

{-# LANGUAGE DuplicateRecordFields  #-}
{-# LANGUAGE FlexibleContexts       #-}
{-# LANGUAGE FlexibleInstances      #-}
{-# LANGUAGE FunctionalDependencies #-}
{-# LANGUAGE MultiParamTypeClasses  #-}
{-# LANGUAGE NoImplicitPrelude      #-}
{-# LANGUAGE OverloadedStrings      #-}
{-# LANGUAGE RecordWildCards        #-}
{-# LANGUAGE TemplateHaskell        #-}
{-# LANGUAGE UndecidableInstances   #-}

{-# OPTIONS_GHC -fno-warn-unused-imports #-}

{% include "_include/license.ede" %}
--
module {{ namespace }} where

import Data.Functor ((<$>))
import Data.Maybe   (catMaybes)
import Data.Text    (Text)

import GHC.Base (Eq, ($))
import GHC.Show (Show)

{% for import in imports %}
import qualified {{ import.value }} as TF
{% endfor %}
{% for schema in schemas %}

{% let original = schema.value.name %}
{- | The @{{ original }}@ {{ provider.name }} {{ type | toLower }}.
{% if schema.value.about %}

{{ schema.value.about | wrap }}
{% endif %}
{% for example in schema.value.examples %}

{% if example.value.title %}
{{ example.value.title }}

{% endif %}
@
{% for line in example.value.code %}
{{ line.value }}
{% endfor %}
@
{% endfor %}
-}
data {{ schema.key }} = {{ schema.key }} {
  {% for arg in schema.value.arguments %}
    {% if arg.first %}  {% else %}, {% endif %}{{ arg.key }} :: !(TF.Argument {{ arg.value.type }})
    {- ^ {{ arg.value.help }} -}
  {% endfor %}
  {% for attr in schema.value.attributes %}
    {% if (schema.value.arguments | empty) && attr.first %}  {% else %}, {% endif %}{{ attr.key }} :: !(TF.Attribute {{ attr.value.type }})
    {- ^ {{ attr.value.help }} -}
  {% endfor %}
    } deriving (Show, Eq)

{% let constructor = schema.key | lowerHead %}
{{ constructor }} :: TF.{{ type }} TF.{{ provider.name }} {{ schema.key }}
{{ constructor }} =
    TF.new{{ type }} "{{ original }}" $
        {{ schema.key }} {
          {% for arg in schema.value.arguments %}
            {% if !arg.first %}, {% endif %}{{ arg.key }} = TF.Absent
          {% endfor %}
          {% for attr in schema.value.attributes %}
            {% if (schema.value.arguments | empty) && attr.first %}  {% else %}, {% endif %}{{ attr.key }} = TF.Computed "{{ attr.value.name }}"
          {% endfor %}
            }
{% endlet %}

instance TF.ToHCL {{ schema.key }} where
  {% for arg in schema.value.arguments %}
    {% if arg.first %}toHCL {{ schema.key }}{..} = TF.arguments
        [{% else %}    ,{% endif %} TF.assign "{{ arg.value.name }}" <$> {{ arg.key }}{% if arg.last %}
        ]{% endif %}
  {% else %}
    toHCL = const $ TF.arguments []
  {% endfor %}

$(TF.makeSchemaLenses
    ''{{ schema.key }}
    ''TF.{{ provider.type }}
    ''TF.{{ type }}
    'TF.schema)
{% endlet %}
{% endfor %}
