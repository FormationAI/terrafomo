-- This module is auto-generated.

{-# LANGUAGE DuplicateRecordFields  #-}
{-# LANGUAGE FlexibleInstances      #-}
{-# LANGUAGE FunctionalDependencies #-}
{-# LANGUAGE MultiParamTypeClasses  #-}
{-# LANGUAGE NoImplicitPrelude      #-}
{-# LANGUAGE OverloadedStrings      #-}
{-# LANGUAGE RecordWildCards        #-}
{-# LANGUAGE TypeFamilies           #-}
{-# LANGUAGE ScopedTypeVariables    #-}
{-# LANGUAGE UndecidableInstances   #-}

{-# OPTIONS_GHC -fno-warn-unused-imports #-}

{% include "_include/license.ede" %}
--
module {{ namespace }}
    (
    -- * Types
  {% for schema in schemas %}
    {% if schema.first %} {% else %},{% endif %} {{ schema.key }} (..)
    , {{ schema.key | lowerHead }}

  {% endfor %}
    -- * Overloaded Fields
    -- ** Arguments
  {% for class in argumentClasses %}
    , P.{{ class.value.name }} (..)
  {% endfor %}

    -- ** Computed Attributes
  {% for class in attributeClasses %}
    , P.{{ class.value.name }} (..)
  {% endfor %}

    -- * Re-exported Types
    , module P
    ) where

import Data.Functor ((<$>))
import Data.Maybe   (catMaybes)

import GHC.Base (Eq, ($), (.))
import GHC.Show (Show)

import Lens.Micro (lens)

import {{ typesNamespace }} as P

{% for import in imports %}
import qualified {{ import.value }} as P
{% endfor %}
import qualified Data.Text       as P
import qualified Data.Word       as P
import qualified GHC.Base        as P
import qualified Numeric.Natural as P
import qualified Terrafomo.IP    as P

import qualified Terrafomo.Attribute as TF
import qualified Terrafomo.HCL       as TF
import qualified Terrafomo.Name      as TF
import qualified Terrafomo.Provider  as TF
import qualified Terrafomo.Schema    as TF
{% for schema in schemas %}

{% let original = schema.value.name %}
{- | The @{{ original }}@ {{ provider.name }} {{ type | toLower }}.
{% if schema.value.about %}

{{ schema.value.about | wrap }}
{% endif %}
-}
data {{ schema.key }} s = {{ schema.key }} {
  {% for arg in schema.value.arguments %}
    {% if arg.first %}  {% else %}, {% endif %}{{ arg.key }} :: !({{ arg.value.type.applied }})
    {- ^ {{ arg.value.help }} -}
  {% endfor %}
    } deriving (Show, Eq)

instance TF.ToHCL ({{ schema.key }} s) where
  {% for arg in schema.value.arguments %}
    {% if arg.first %}toHCL {{ schema.key }}{..} = TF.inline $ catMaybes
        [{% else %}    ,{% endif %} TF.assign "{{ arg.value.name }}" <$> {{ arg.value.type.encoder }} {{ arg.key }}{% if arg.last %}
        ]{% endif %}
  {% else %}
    toHCL _ = TF.empty
  {% endfor %}
  {% for field in schema.value.argumentFields %}

instance P.{{ field.value.class }} ({{ schema.key }} s) ({{ field.value.type.applied }}) where
    {{ field.value.method }} =
        lens ({{ field.value.label }} :: {{ schema.key }} s -> {{ field.value.type.applied }})
             (\s a -> s { {{ field.value.label }} = a } :: {{ schema.key }} s)
  {% endfor %}
  {% for field in schema.value.attributeFields %}

instance s ~ s' => P.{{ field.value.class }} (TF.Ref s' ({{ schema.key }} s)) ({{ field.value.type.applied }}) where
    {% if field.value.computed %}
    {{ field.value.method }} x = TF.compute (TF.refKey x) "{{ field.value.name }}"
    {% else %}
    {{ field.value.method }} =
        ({{ field.value.label }} :: {{ schema.key }} s -> {{ field.value.type.applied }})
            . TF.refValue
    {% endif %}
  {% endfor %}

{% let constructor = schema.key | lowerHead %}
{{ constructor }} :: TF.{{ type }} {{ provider.type }} ({{ schema.key }} s)
{{ constructor }} =
    TF.new{{ type }} "{{ original }}" $
        {{ schema.key }} {
          {% for arg in schema.value.arguments %}
            {% if arg.first %}  {% else %}, {% endif %}{{ arg.key }} = {{ arg.value.type.default }}
          {% endfor %}
            }
{% endlet %}
{% endlet %}
{% endfor %}
