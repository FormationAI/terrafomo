{% for field in schema.arguments %}

instance P.{{ field.value.class }} ({{ schema.type }}) ({{ field.value.type }}) where
    {{ field.value.method }} =
        P.lens ({{ field.value.label }} :: {{ schema.type }} -> {{ field.value.type }})
               (\s a -> s { {{ field.value.label }} = a
                     {% for conflict in field.value.conflicts %}
                          , {{ conflict.value.label }} = {{ conflict.value.default }}
                     {% endfor %}
                          } :: {{ schema.type }})
{% endfor %}
{% if schema.attributes %}
  {% for field in schema.attributes %}

instance s ~ s' => P.{{ field.value.class }} (TF.Ref s' ({{ schema.type }})) ({{ field.value.type }}) where
    {% if field.value.computed %}
    {{ field.value.method }} x = TF.compute (TF.refKey x) "{{ field.value.name }}"
    {% else %}
    {{ field.value.method }} =
        ({{ field.value.label }} :: {{ schema.name }} s -> {{ field.value.type }})
            . TF.refValue
    {% endif %}
  {% endfor %}
{% endif %}
