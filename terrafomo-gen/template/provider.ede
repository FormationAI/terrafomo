-- This module is auto-generated.

{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeFamilies      #-}

{-# OPTIONS_GHC -fno-warn-unused-imports #-}

{% include "_include/license.ede" %}
--
module {{ namespace }}
    (
    -- * Provider Datatype
      {{ provider.name }} (..)
    , empty{{ provider.name }}

    -- * Lenses
  {% for field in schema.argumentFields %}
    , provider{{ field.value.method | upperHead }}
  {% endfor %}
    ) where

import Data.Hashable      (Hashable)
import Data.List.NonEmpty (NonEmpty ((:|)))
import Data.Maybe         (catMaybes)
import Data.Proxy         (Proxy (Proxy))
import Data.Text          (Text)

import GHC.Generics (Generic)

import Lens.Micro (Lens', lens)

{% for import in imports %}
import qualified {{ import.value }} as P
{% endfor %}
import qualified Terrafomo.IP as P

import qualified Terrafomo.HCL      as TF
import qualified Terrafomo.Name     as TF
import qualified Terrafomo.Provider as TF

{- | {{ provider.name }} Terraform provider.
{% if schema.about %}

{{ schema.about | wrap }}
{% endif %}
-}
data {{ provider.name }} = {{ provider.name }} {
  {% for arg in schema.arguments %}
    {% if arg.first %}  {% else %}, {% endif %}{{ arg.key }} :: !(Maybe {{ arg.value.type }})
    {- ^ {{ arg.value.help }} -}
  {% endfor %}
    } deriving (Show, Eq, Generic)

instance Hashable {{ provider.name }}

instance TF.ToHCL {{ provider.name }} where
    toHCL x =
        let typ = TF.providerType (Proxy :: Proxy ({{ provider.name }}))
            key = TF.providerKey x
         in TF.object ("provider" :| [TF.type_ typ]) $ catMaybes
            [ Just $ TF.assign "alias" (TF.toHCL (TF.keyName key))
          {% for arg in schema.arguments %}
            , TF.assign "{{ arg.value.name }}" <$> {{ arg.key }} x
          {% endfor %}
            ]

instance TF.IsProvider {{ provider.name }} where
    type ProviderType {{ provider.name }} = "{{ provider.original }}"

empty{{ provider.name }} :: {{ provider.name }}
empty{{ provider.name }} = {{ provider.name }} {
    {% for arg in schema.arguments %}
      {% if arg.first %}  {% else %}, {% endif %}{{ arg.key }} = Nothing
    {% endfor %}
    }
{% for field in schema.argumentFields %}

provider{{ field.value.method | upperHead }} :: Lens' {{ provider.name }} (Maybe {{ field.value.type }})
provider{{ field.value.method | upperHead }} =
    lens {{ field.value.label }} (\s a -> s { {{ field.value.label }} = a })
{% endfor %}
