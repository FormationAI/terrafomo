-- This module is auto-generated.

{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TemplateHaskell   #-}
{-# LANGUAGE TypeFamilies      #-}

{-# OPTIONS_GHC -fno-warn-unused-imports #-}

{% include "_include/license.ede" %}
--
module {{ namespace }}
    ( {{ provider.name }}    (..)
    , Has{{provider.name }} (..)
    ) where

import Data.Function      (on)
import Data.Hashable      (Hashable)
import Data.List.NonEmpty (NonEmpty ((:|)))
import Data.Maybe         (catMaybes)
import Data.Proxy         (Proxy (Proxy))
import Data.Semigroup     (Semigroup ((<>)))
import Data.Text          (Text)

import GHC.Generics (Generic)

{% for import in imports %}
import qualified {{ import.value }} as TF
{% endfor %}
import qualified Terrafomo.Syntax.HCL      as TF
import qualified Terrafomo.Syntax.Meta     as TF
import qualified Terrafomo.Syntax.Name     as TF
import qualified Terrafomo.Syntax.Variable as TF
import qualified Terrafomo.TH              as TF

{- | {{ provider.name }} Terraform provider.
{% if schema.about %}

{{ schema.about | wrap }}
{% endif %}
{% for example in schema.examples %}

{% if example.value.title %}
{{ example.value.title }}

{% endif %}
@
{% for line in example.value.code %}
{{ line.value }}
{% endfor %}
@
{% endfor %}
-}
data {{ provider.name }} = {{ provider.name }} {
  {% for arg in schema.arguments %}
    {% if arg.first %}  {% else %}, {% endif %}{{ arg.key }} :: !(TF.Argument {{ arg.value.type }})
    {- ^ {{ arg.value.help }} -}
  {% endfor %}
    } deriving (Show, Eq, Generic)

instance Hashable {{ provider.name }}

instance TF.ToHCL {{ provider.name }} where
    toHCL x =
        TF.object ("provider" :| [TF.name (TF.providerName (Proxy :: Proxy {{ provider.name }}))]) $ catMaybes
            [ Just $ TF.assign "alias" (TF.toHCL (TF.providerAlias x))
          {% for arg in schema.arguments %}
            , TF.assign "{{ arg.value.name }}" <$> TF.argument ({{ arg.key }} x)
          {% endfor %}
            ]

instance Semigroup {{ provider.name }} where
    (<>) a b = {{ provider.name }} {
      {% for arg in schema.arguments %}
        {% if arg.first %}  {% else %}, {% endif %}{{ arg.key }} = on (<>) {{ arg.key }} a b
      {% endfor %}
        }

instance Monoid {{ provider.name }} where
    mappend = (<>)
    mempty  = {{ provider.name }} {
        {% for arg in schema.arguments %}
          {% if arg.first %}  {% else %}, {% endif %}{{ arg.key }} = TF.Nil
        {% endfor %}
        }

instance TF.IsProvider {{ provider.name }} where
    type ProviderName {{ provider.name }} = "{{ provider.original }}"

$(TF.makeProviderLenses ''{{ provider.name }})
