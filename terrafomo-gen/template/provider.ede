-- This module is auto-generated.

{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE OverloadedLists   #-}
{-# LANGUAGE RecordWildCards   #-}
{-# LANGUAGE StrictData        #-}

{-# OPTIONS_GHC -fno-warn-unused-imports #-}

{% include "_include/license.ede" %}
--
module {{ namespace }}
    (
    -- * {{ provider.name }} Provider Datatype
      Provider (..)
    , {{ provider.schema.con.smart }}
    ) where

import Data.Functor  ((<$>))
import Data.Function ((&))
import Data.Proxy    (Proxy (Proxy))

import GHC.Base (($))

{% for import in unqualified %}
import {{ import.value }}
{% endfor %}

{% for import in qualified %}
import qualified {{ import.value }} as P
{% endfor %}
import qualified Data.HashMap.Strict as Map
import qualified Terrafomo.HCL as TF
import qualified Terrafomo.Name as TF
import qualified Terrafomo.Provider as TF
import qualified Terrafomo.Validator as TF

-- | The @{{ provider.name }}@ Terraform provider configuration.
--
-- See the <{{ provider.url }} terraform documentation>
-- for more information.
data Provider = {{ provider.schema.con.name }}
{% include "_include/record.ede" with arguments = provider.schema.arguments %}

{{ provider.schema.con.smart }}
  {% for param in provider.schema.parameters %}
    {% if param.first %}::{% else %}->{% endif %} {{ param.value.type }} -- ^ @{{ param.value.original }}@ - 'P.{{ param.value.method }}'{% if param.last %}
    -> Provider{% endif %}
  {% else %}
    :: Provider
  {% endfor %}
{{ provider.schema.con.smart }}{% for param in provider.schema.parameters %} {{ param.value.name }}{% endfor %} =
    {{ provider.schema.con.name }}
      {% for field in provider.schema.arguments %}
        {% if field.first %}{ {% else %}, {% endif %}{{ field.value.name }} = {{ field.value.default }}{% if field.last %}
        }{% endif %}
      {% endfor %}

instance P.Hashable Provider

instance TF.IsSection Provider where
    toSection x@{{ provider.schema.con.name }}{% if !(provider.schema.arguments | empty) %}{..}{% endif %} =
        let typ = TF.providerType (Proxy :: Proxy (Provider))
            key = TF.providerKey x
         in TF.section "provider" [TF.type_ typ]
          & TF.pairs
              (P.catMaybes
                  [ P.Just $ TF.assign "alias" (TF.toValue (TF.keyName key))
                {% for field in provider.schema.arguments %}
                  , {{ field.value.encoder }} {{ field.value.name }}
                {% endfor %}
                  ])

instance TF.IsProvider Provider where
    type ProviderType {{ provider.schema.name }} = "{{ provider.schema.original }}"

{% include "_include/validator.ede" with schema = provider.schema %}
{% include "_include/lenses.ede" with schema = provider.schema %}
