-- This module is auto-generated.

{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE OverloadedLists   #-}
{-# LANGUAGE RecordWildCards   #-}
{-# LANGUAGE StrictData        #-}

{-# OPTIONS_GHC -fno-warn-unused-imports #-}

{% include "_include/license.ede" %}
module {{ namespace }}
    (
    -- * {{ provider.name }} Provider Datatype
      {{ provider.schema.name }} (..)
    , {{ provider.schema.con.smart }}
    , defaultProvider

    -- * {{ provider.name }} Specific Aliases
    , DataSource
    , Resource
    ) where

import Data.Functor  ((<$>))
import Data.Function ((&))
import Data.Proxy    (Proxy (Proxy))

import GHC.Base (($))

{% for import in unqualified %}
import {{ import.value }}
{% endfor %}

{% for import in qualified %}
import qualified {{ import.value }} as P
{% endfor %}
import qualified Data.Aeson as JSON
import qualified Terrafomo.HCL as TF
import qualified Terrafomo.Schema as TF

type DataSource a = TF.Resource {{ provider.schema.type }} ()               a
type Resource   a = TF.Resource {{ provider.schema.type }} (TF.Lifecycle a) a

-- | The @{{ provider.original }}@ Terraform provider configuration.
--
-- See the <{{ provider.url }} terraform documentation>
-- for more information.
data {{ provider.schema.type }} = {{ provider.schema.con.name }}
{% include "_include/record.ede" with arguments = provider.schema.arguments %}

instance P.Hashable ({{ provider.schema.type }})

-- | Specify a new {{provider.name }} provider configuration.
{{ provider.schema.con.smart }}
  {% for param in provider.schema.parameters %}
    {% if param.first %}::{% else %}->{% endif %} {{ param.value.type }} -- ^ Lens: 'P.{{ param.value.method }}', Field: '{{ param.value.name }}', HCL: @{{ param.value.original }}@{% if param.last %}
    -> {{ provider.schema.type }}{% endif %}
  {% else %}
    :: {{ provider.schema.type }}
  {% endfor %}
{{ provider.schema.con.smart }}{% for param in provider.schema.parameters %} {{ param.value.name }}{% endfor %} =
    {{ provider.schema.con.name }}
      {% for field in provider.schema.arguments %}
        {% if field.first %}{ {% else %}, {% endif %}{{ field.value.name }} = {{ field.value.default }}{% if field.last %}
        }{% endif %}
      {% endfor %}

{- | The '{{ provider.name }}' provider with absent configuration that is used
to instantiate new 'Resource's and 'DataSource's. Provider configuration can be
overridden on a per-resource basis by using the 'Terrafomo.provider' lens, the
'{{ provider.schema.con.smart }}' constructor, and any of the applicable lenses.

For example:

@
import qualified Terrafomo as TF
import qualified {{ namespace }} as {{ provider.name }}

TF.newExampleResource "foo"
    & TF.provider ?~
          {{ provider.name }}.({{ provider.schema.con.smart }}
          {% if !(provider.schema.parameters | empty) %}
              -- Required arguments
          {% endif %}
          {% for param in provider.schema.parameters %}
              {{ param.value.name }} -- (Required) '{{ param.value.type }}'
          {% endfor %}
          {% if !(provider.schema.arguments | empty) %}
              -- Lenses
          {% endif %}
          {% for field in provider.schema.arguments %}
              & {{ provider.name }}.{{ field.value.method }} .~ {{ field.value.default | prelude }} -- '{{ field.value.type }}'
          {% endfor %}
@
-}
defaultProvider :: TF.Provider {{ provider.schema.type }}
defaultProvider =
    TF.defaultProvider "{{ provider.original }}" (P.Just "~> {{ provider.version }}")
      {% if provider.schema.arguments | empty %}
        P.mempty
      {% else %}
        (\{{ provider.schema.con.name }}{..} -> P.catMaybes
          {% for field in provider.schema.arguments %}
            {% if field.first %}[ {% else %}, {% endif %}{{ field.value.encoder }} {{ field.value.name }}{% if field.last %}
            ]){% endif %}
          {% endfor %}
      {% endif %}
{% include "_include/lenses.ede" with schema = provider.schema %}
