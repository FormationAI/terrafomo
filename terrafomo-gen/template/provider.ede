-- This module is auto-generated.

{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE RecordWildCards   #-}
{-# LANGUAGE StrictData        #-}

-- {-# OPTIONS_GHC -fno-warn-unused-imports #-}

{% include "_include/license.ede" %}
--
module {{ namespace }}
    (
    -- * Provider Datatype
      {{ provider.name }} (..)
    , newProvider
    ) where

import Data.Functor  ((<$>))
import Data.Function ((&))
import Data.Hashable (Hashable)
import Data.Proxy    (Proxy (Proxy))

import GHC.Base (($))

{% for import in unqualified %}
import {{ import.value }}
{% endfor %}

{% for import in qualified %}
import qualified {{ import.value }} as P
{% endfor %}
import qualified Terrafomo.HCL as TF
import qualified Terrafomo.Name as TF
import qualified Terrafomo.Provider as TF

-- The {{ provider.name }} Terraform provider configuration.
data {{ provider.type }} = {{ provider.type }}'
{% include "_include/record.ede" with arguments = provider.arguments %}

instance Hashable {{ provider.type }}

instance TF.IsSection {{ provider.type }} where
    toSection x@{{ provider.type }}'{..} =
        let typ = TF.providerType (Proxy :: Proxy ({{ provider.type }}))
            key = TF.providerKey x
         in TF.section "provider" [TF.type_ typ]
          & TF.pairs
              (catMaybes
                  [ P.Just $ TF.assign "alias" (TF.toValue (TF.keyName key))
                {% for field in provider.arguments %}
                  , {{ field.value.encoder }} {{ field.value.label }}
                {% endfor %}
                  ])

instance TF.IsProvider {{ provider.type }} where
    type ProviderType {{ provider.type }} = "{{ provider.original }}"

newProvider
  {% for param in provider.parameters %}
    {% if param.first %}::{% else %}->{% endif %} {{ param.value.type }} -- ^ @{{param.value.name}}@{% if param.last %}
    -> {{ provider.type }}{% endif %}
  {% else %}
    :: {{ provider.type }}
  {% endfor %}
newProvider{% for param in provider.parameters %} {{ param.value.label }}{% endfor %} =
    {{ provider.name }}'
      {% for field in provider.arguments %}
        {% if field.first %}{ {% else %}, {% endif %}{{ field.value.label }} = {{ field.value.default }}{% if field.last %}
        }{% endif %}
      {% endfor %}
{% include "_include/lenses.ede" with schema = provider %}
