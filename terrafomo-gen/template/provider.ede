-- This module is auto-generated.

{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE RecordWildCards   #-}
{-# LANGUAGE StrictData        #-}

{-# OPTIONS_GHC -fno-warn-unused-imports #-}

{% include "_include/license.ede" %}
module {{ namespace }}
    (
    -- * {{ provider.name }} Specific Aliases
      Provider
    , DataSource
    , Resource

    -- * {{ provider.name }} Configuration
    , currentVersion
    , {{ provider.schema.con.smart }}
    , {{ provider.schema.type }} (..)
{% include "_include/mode-exports.ede" with schema = provider.schema %}
    ) where

import Data.Function  ((&))
import Data.Functor   ((<$>))
import Data.Semigroup ((<>))
import Data.Version   (Version, makeVersion, showVersion)

import GHC.Base (($))

{% for import in unqualified %}
import {{ import.value }}
{% endfor %}

{% for import in qualified %}
import qualified {{ import.value }} as P
{% endfor %}
import qualified Terrafomo.HCL as TF
import qualified Terrafomo.Lens as Lens
import qualified Terrafomo.Schema as TF

type Provider   = TF.Provider {{ provider.schema.type }}
type DataSource = TF.Resource {{ provider.schema.type }} (P.Const ())
type Resource   = TF.Resource {{ provider.schema.type }} TF.Lifecycle

type instance TF.ProviderName {{ provider.schema.type }} = "{{ provider.original }}"

currentVersion :: Version
currentVersion = makeVersion [{% for branch in provider.version %}{{ branch.value }}{% if !branch.last %}, {% endif %}{% endfor %}]

-- | The @{{ provider.original }}@ Terraform provider configuration.
{% include "_include/record.ede" with schema = provider.schema %}

{- | Specify a new {{ provider.name }} provider configuration.
See the <{{ provider.url }} terraform documentation> for more information.
-}
{{ provider.schema.con.smart }}
{% case provider.schema.mode %}
{% when "record" %}
    :: {{ provider.schema.type }} -- ^ The minimal/required arguments.
    -> Provider
{{ provider.schema.con.smart }} x =
{% when "recordcon" %}
    :: Provider
{{ provider.schema.con.smart }} =
{% when "recordcondata" %}
    :: {{ provider.schema.required.type }} -- ^ The minimal/required arguments.
    -> Provider
{{ provider.schema.con.smart }} x =
{% endcase %}
    TF.Provider
        { TF.providerVersion = P.Just ("~> " P.++ showVersion currentVersion)
        , TF.providerConfig  =
        {% if provider.schema.mode != "record" %}
          {% for field in provider.schema.arguments %}
            {% if field.first %}({% if !(provider.schema.parameters | empty) %}let {{ provider.schema.required.con }}{..} = x in {% endif %}{{ provider.schema.con.name }}
                { {% else %}    , {% endif %}{{ field.value.name }} = {{ field.value.default }}{% if field.last %}
                }){% endif %}
          {% else %}
            {{ provider.schema.con.name }}
          {% endfor %}
        {% else %}
            x
        {% endif %}
        , TF.providerEncoder =
          {% if provider.schema.arguments | empty %}
            P.mempty
          {% else %}
            (\{{ provider.schema.con.name }}{..} ->
{% include "_include/conflicts-encode.ede" with schema = provider.schema %}
            )
          {% endif %}
        }
{% include "_include/required.ede" with schema = provider.schema %}
{% include "_include/conflicts.ede" with schema = provider.schema %}
{% for field in provider.schema.arguments %}

instance Lens.HasField "{{ field.value.original }}" f Provider ({{ field.value.type }}) where
    field = Lens.providerLens P.. Lens.lens'
        ({{ field.value.name }} :: {{ provider.schema.type }} -> {{ field.value.type }})
        (\s a -> s { {{ field.value.name }} = a } :: {{ provider.schema.type }})
{% endfor %}
