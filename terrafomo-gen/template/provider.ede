-- This module is auto-generated.

{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE OverloadedLists   #-}
{-# LANGUAGE RecordWildCards   #-}
{-# LANGUAGE StrictData        #-}

{-# OPTIONS_GHC -fno-warn-unused-imports #-}

{% include "_include/license.ede" %}
--
module {{ namespace }}
    (
    -- * {{ provider.name }} Provider Datatype
      Provider (..)
    , {{ provider.schema.con.smart }}
    , defaultProvider

    -- * {{ provider.name }} Specific Aliases
    , DataSource
    , Resource
    ) where

import Data.Functor  ((<$>))
import Data.Function ((&))
import Data.Proxy    (Proxy (Proxy))

import GHC.Base (($))

{% for import in unqualified %}
import {{ import.value }}
{% endfor %}

{% for import in qualified %}
import qualified {{ import.value }} as P
{% endfor %}
import qualified Data.Map.Strict as Map
import qualified Terrafomo.HCL as TF
import qualified Terrafomo.Lifecycle as TF
import qualified Terrafomo.Name as TF
import qualified Terrafomo.Provider as TF
import qualified Terrafomo.Schema as TF
import qualified Terrafomo.Validator as TF

type DataSource a = TF.Schema ()               Provider a
type Resource   a = TF.Schema (TF.Lifecycle a) Provider a

-- | The @{{ provider.name }}@ Terraform provider configuration.
--
-- See the <{{ provider.url }} terraform documentation>
-- for more information.
data Provider = {{ provider.schema.con.name }}
{% include "_include/record.ede" with arguments = provider.schema.arguments %}

{{ provider.schema.con.smart }}
  {% for param in provider.schema.parameters %}
    {% if param.first %}::{% else %}->{% endif %} {{ param.value.type }} -- ^ @{{ param.value.original }}@ - 'P.{{ param.value.method }}'{% if param.last %}
    -> Provider{% endif %}
  {% else %}
    :: Provider
  {% endfor %}
{{ provider.schema.con.smart }}{% for param in provider.schema.parameters %} {{ param.value.name }}{% endfor %} =
    {{ provider.schema.con.name }}
      {% for field in provider.schema.arguments %}
        {% if field.first %}{ {% else %}, {% endif %}{{ field.value.name }} = {{ field.value.default }}{% if field.last %}
        }{% endif %}
      {% endfor %}

defaultProvider :: TF.Provider (P.Maybe Provider)
defaultProvider =
    TF.Provider
        { _providerType   = TF.Type P.Nothing "{{ provider.name }}"
        , _providerAlias  = P.Nothing
        , _providerConfig = P.Nothing
        }

instance TF.IsObject Provider where
    {% if provider.schema.arguments | empty %}
    toObject {{ provider.schema.con.name }} = []
    {% else %}
    toObject {{ provider.schema.con.name }}{..} = P.catMaybes
      {% for field in provider.schema.arguments %}
        {% if field.first %}[ {% else %}, {% endif %} {{ field.value.encoder }} {{ field.value.name }}{% if field.last %}
        ]{% endif %}
      {% endfor %}
    {% endif %}

{% include "_include/validator.ede" with schema = provider.schema %}
{% include "_include/lenses.ede" with schema = provider.schema %}
