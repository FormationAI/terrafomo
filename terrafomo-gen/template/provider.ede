-- This module is auto-generated.

{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TemplateHaskell   #-}

{-# OPTIONS_GHC -fno-warn-unused-imports #-}

{% include "_include/license.ede" %}
--
module {{ namespace }} where

import Data.Text     (Text)
import Data.Hashable (Hashable)

import GHC.Generics (Generic)

{% for import in imports %}
import qualified {{ import.value }} as TF
{% if import.last %}

{% endif %}
{% endfor %}
{- | {{ provider.name }} Terraform provider.
{% if schema.about %}

{{ schema.about | wrap }}
{% endif %}
{% for example in schema.examples %}

{% if example.value.title %}
{{ example.value.title }}

{% endif %}
@
{% for line in example.value.code %}
{{ line.value }}
{% endfor %}
@
{% endfor %}
-}
data {{ provider.name }} = {{ provider.name }}
  {% for arg in schema.arguments %}
    {% if arg.first %}{ {% else %}, {% endif %}{{ arg.key }} :: !(TF.Argument {{ arg.value.type }})
    {- ^ {{ arg.value.help }} -}
    {% if arg.last %}
    } deriving (Show, Eq, Generic)
    {% endif %}
  {% else %}
    deriving (Show, Eq, Generic)
  {% endfor %}

instance Hashable {{ provider.name }}

instance TF.ToHCL {{ provider.name }} where
  {% for arg in schema.arguments %}
    {% if arg.first %}toHCL x = TF.arguments
        [{% else %}    ,{% endif %} TF.assign "{{ arg.value.name }}" <$> {{ arg.key }} x{% if arg.last %}
        ]{% endif %}
  {% else %}
    toHCL = const $ TF.arguments []
  {% endfor %}

$(TF.makeClassy ''{{ provider.name }})
