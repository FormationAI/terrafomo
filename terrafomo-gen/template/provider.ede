-- This module is auto-generated.

{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE StrictData        #-}

{-# OPTIONS_GHC -fno-warn-unused-imports #-}

{% include "_include/license.ede" %}
--
module {{ namespace }}
    (
    -- * Provider Datatype
      {{ provider.name }} (..)
    , empty{{ provider.name }}

    -- * Lenses
  {% for field in provider.arguments %}
    , provider{{ field.value.method | upperHead }}
  {% endfor %}
    ) where

import Data.Functor  ((<$>))
import Data.Function ((&))
import Data.Hashable (Hashable)
import Data.Maybe    (catMaybes)
import Data.Proxy    (Proxy (Proxy))

import GHC.Base     (Eq, ($))
import GHC.Generics (Generic)
import GHC.Show     (Show)

import Lens.Micro (Lens', lens)

{% for import in unqualified %}
import {{ import.value }}
{% endfor %}

{% for import in qualified %}
import qualified {{ import.value }} as P
{% endfor %}
import qualified Terrafomo.HCL as TF
import qualified Terrafomo.Name as TF
import qualified Terrafomo.Provider as TF

-- The {{ provider.name }} Terraform provider configuration.
data {{ provider.name }} = {{ provider.name }}' {
  {% for field in provider.arguments %}
    {% if field.first %}  {% else %}, {% endif %}{{ field.value.label }} :: {{ field.value.type }}
  {% endfor %}
    } deriving (Show, Eq, Generic)

instance Hashable {{ provider.name }}

instance TF.IsSection {{ provider.name }} where
    toSection x =
        let typ = TF.providerType (Proxy :: Proxy ({{ provider.name }}))
            key = TF.providerKey x
         in TF.section "provider" [TF.type_ typ]
          & TF.pairs
              (catMaybes
                  [ P.Just $ TF.assign "alias" (TF.toValue (TF.keyName key))
                {% for field in provider.arguments %}
                  , {{ field.value.encoder }}
                      ({{ namespace }}.{{ field.value.label }} x)
                {% endfor %}
                  ])

instance TF.IsProvider {{ provider.name }} where
    type ProviderType {{ provider.name }} = "{{ provider.original }}"

empty{{ provider.name }}
    ::{% for param in provider.parameters %} {{ param.value.type }} {-^ @{{param.value.name}}@ -} ->{% endfor %} {{ provider.name }}
empty{{ provider.name }}{% for param in provider.parameters %} {{ param.value.label }}{% endfor %} =
    {{ provider.name }}' {
      {% for field in provider.arguments %}
        {% if field.first %}  {% else %}, {% endif %}{{ field.value.label }} = {{ field.value.default }}
      {% endfor %}
        }
{% for field in provider.arguments %}

provider{{ field.value.method | upperHead }} :: Lens' {{ provider.name }} {{ field.value.type }}
provider{{ field.value.method | upperHead }} =
    lens {{ namespace}}.{{ field.value.label }}
         (\s a -> s { {{ field.value.label }} = a } :: {{ provider.name }})
{% endfor %}
