-- This module is auto-generated.

{-# LANGUAGE DeriveGeneric #-}

{-# OPTIONS_GHC -fno-warn-unused-imports #-}

{% include "_include/license.ede" %}
--
module {{ namespace }} where

import Data.Text     (Text)
import Data.Hashable (Hashable)

import GHC.Generics (Generic)

{% for import in imports %}
import qualified {{ import.value }} as Qual
{% if import.last %}

{% endif %}
{% endfor %}
{- | {{ provider.name }} Terraform provider.
{% if schema.about %}

{{ schema.about | wrap }}
{% endif %}
{% for example in schema.examples %}

{% if example.value.title %}
{{ example.value.title }}

{% endif %}
@
{% for line in example.value.code %}
{{ line.value }}
{% endfor %}
@
{% endfor %}
-}
data {{ provider.name }} = {{ provider.name }}
  {% for arg in schema.arguments %}
    {% if arg.first %}{ {% else %}, {% endif %}{{ arg.key }} :: !{{ arg.value.type }}
    {% if arg.last %}
    } deriving (Show, Eq, Generic)
    {% endif %}
  {% else %}
    deriving (Show, Eq, Generic)
  {% endfor %}

instance Hashable {{ provider.name }}

instance Qual.ToValue {{ provider.name }} where
    toValue = Qual.genericToValue
{% for arg in schema.arguments %}

{- | {{ arg.value.help | wrap }}
-}
{{ arg.key | toCamel}} :: Functor f => ({{ arg.value.type }} -> f {{ arg.value.type}}) -> {{ provider.name }} -> f {{ provider.name }}
{{ arg.key | toCamel }} f s =
    (\x -> s { {{ arg.key }} = x })
        <$> f ({{ arg.key }} s)
{% endfor %}
