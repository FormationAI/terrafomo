-- This module is auto-generated.

{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE OverloadedLists   #-}
{-# LANGUAGE RecordWildCards   #-}
{-# LANGUAGE StrictData        #-}

{-# OPTIONS_GHC -fno-warn-unused-imports #-}

{% include "_include/license.ede" %}
--
module {{ namespace }}
    (
    -- * {{ type }} Datatypes
    {% for resource in resources %}
    -- ** {{ resource.value.original }}
    {% if resource.first %} {% else %},{% endif %} {{ resource.value.name }} (..)
    , {{ resource.value.con.smart }}

  {% endfor %}
    ) where

import Data.Functor ((<$>))

import GHC.Base (($))

{% for import in unqualified %}
import {{ import.value }}
{% endfor %}

{% for import in qualified %}
import qualified {{ import.value }} as P
{% endfor %}
import qualified Data.Map.Strict as Map
import qualified Terrafomo.Attribute as TF
import qualified Terrafomo.HCL as TF
import qualified Terrafomo.Name as TF
import qualified Terrafomo.Schema as TF
import qualified Terrafomo.Validator as TF
{% for resource in resources %}

-- | @{{ resource.value.original }}@ {{ type }}.
--
-- See the <{{ resource.value.url }} terraform documentation>
-- for more information.
data {{ resource.value.type }} = {{ resource.value.con.name }}
{% include "_include/record.ede" with arguments = resource.value.arguments %}

{{ resource.value.con.smart }}
  {% for param in resource.value.parameters %}
    {% if param.first %}::{% else %}->{% endif %} {{ param.value.type }} -- ^ @{{ param.value.original }}@ - 'P.{{ param.value.method }}'{% if param.last %}
    -> P.{{ type }} ({{ resource.value.type }}){% endif %}
  {% else %}
    :: P.{{ type }} ({{ resource.value.type }})
  {% endfor %}
{{ resource.value.con.smart }}{% for param in resource.value.parameters %} {{ param.value.name }}{% endfor %} =
    TF.unsafe{{ type }} "{{ resource.value.original }}" P.defaultProvider TF.validator $
        {{ resource.value.con.name }}
          {% for field in resource.value.arguments %}
            {% if field.first %}{ {% else %}, {% endif %}{{ field.value.name }} = {{ field.value.default }}{% if field.last %}
            }{% endif %}
          {% endfor %}

instance TF.IsObject ({{ resource.value.type }}) where
  {% for field in resource.value.arguments %}
    {% if field.first %}toObject {{ resource.value.con.name }}{..} = P.catMaybes
        [{% else %}    ,{% endif %} {{ field.value.encoder }} {{ field.value.name }}{% if field.last %}
        ]{% endif %}
  {% else %}
    toObject _ = []
  {% endfor %}

{% include "_include/validator.ede" with schema = resource.value %}
{% include "_include/lenses.ede" with schema = resource.value %}
{% endfor %}
