-- This module is auto-generated.

{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE OverloadedLists   #-}
{-# LANGUAGE RecordWildCards   #-}
{-# LANGUAGE StrictData        #-}

-- {-# OPTIONS_GHC -fno-warn-unused-imports #-}

{% include "_include/license.ede" %}
--
module {{ namespace }}
    (
    {% for resource in resources %}
    -- ** {{ resource.value.original }}
    {% if resource.first %} {% else %},{% endif %} {{ resource.value.name }} (..)
    , {{ resource.value.con.smart }}

  {% endfor %}
    ) where

import Data.Functor ((<$>))

import GHC.Base (($))

{% for import in unqualified %}
import {{ import.value }}
{% endfor %}

{% for import in qualified %}
import qualified {{ import.value }} as P
{% endfor %}
import qualified Data.Aeson as JSON
import qualified Terrafomo.Core as TF
import qualified Terrafomo.Encode as TF
import qualified Terrafomo.Validate as TF
{% for resource in resources %}

-- | @{{ resource.value.original }}@ {{ type }}.
--
-- See the <{{ resource.value.url }} terraform documentation>
-- for more information.
data {{ resource.value.type }} = {{ resource.value.con.name }}
{% include "_include/record.ede" with arguments = resource.value.arguments %}

-- | Define a new @{{ resource.value.original }}@ {{ type | toLower }} value.
{{ resource.value.con.smart }}
  {% for param in resource.value.parameters %}
    {% if param.first %}::{% else %}->{% endif %} {{ param.value.type }} -- ^ Lens: 'P.{{ param.value.method }}', Field: '{{ param.value.name }}', HCL: @{{ param.value.original }}@{% if param.last %}
    -> P.{{ type }} ({{ resource.value.type }}){% endif %}
  {% else %}
    :: P.{{ type }} ({{ resource.value.type }})
  {% endfor %}
{{ resource.value.con.smart }}{% for param in resource.value.parameters %} {{ param.value.name }}{% endfor %} =
    TF.unsafe{{ type }} "{{ resource.value.original }}" P.defaultProvider {% if type == "Resource" %} TF.lifecycleEncoder{% endif %}
      {% for field in resource.value.arguments %}
        {% if field.first %}(TF.Encoder $ \{{ resource.value.con.name }}{..} -> P.catMaybes
            [{% else %}    ,{% endif %} {{ field.value.encoder }} {{ field.value.name }}{% if field.last %}
            ]){% endif %}
        {% else %}
        P.mempty
      {% endfor %}
      {% for field in resource.value.arguments %}
        {% if field.first %}({{ resource.value.con.name }}
            { {% else %}    , {% endif %}{{ field.value.name }} = {{ field.value.default }}{% if field.last %}
            }){% endif %}
      {% else %}
        {{ resource.value.con.name }}
      {% endfor %}
{% include "_include/lenses.ede" with schema = resource.value %}
{% endfor %}
