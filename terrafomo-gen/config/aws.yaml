package-name: terrafomo-aws
provider-name: AWS

extra-deps:
  - amazonka-core
  - formatting
  - iproute
  - amazonka-iam-policy ^>= 0.0.4

# field-patterns and field overrides support the following methods of type
# substitution, to allow overriding the generator assigned primitives.
#
# 1. leaf - replace only the leaf of the calculated type expression.
#    This automatically handles qualifiers:
#
# S3BucketResource:
#   region: P.Region # This is equivalent to region: { leaf: P.Region }
#
# Additionally, a 'match: ..' key is supported to predicate the substitution
# only if the leaf matches the expected type.
#
# 2. verbatim - replace the entire type expression.
#    This completely supplants the calculated type via string substitution:
#
# S3BucketResource:
#   region: { verbatim: TF.Expr s P.Region }
#
# All methods require that you prefix all types with TF./P. namespace qualifiers.

field-patterns:
  - permute:
      region:     { leaf: P.Region, match: P.Text }

  - permute:
      cidr_block: { leaf: P.IPRange, match: P.Text }

  - permute:
      ip:         { leaf: P.IP, match: P.Text }

  - permute:
      arn:        { leaf: P.Arn, match: P.Text }

field-overrides:
  # Settings

  AssumeRole:
    policy: P.Document

  DynamodbTableAttribute:
    type: P.TableAttributeType

  # DataSources

  AvailabilityZonesD:
    computed_names: P.Region

  # Resources

  IamRoleR:
    assume_role_policy: P.Document

  IamRolePolicyR:
    policy: P.Document

  IamPolicyR:
    policy: P.Document

  IamGroupPolicyR:
    policy: P.Document

  S3BucketR:
    region: P.Region

  SecurityGroupRuleR:
    type: P.NetworkTraffic
    protocol: P.NetworkProtocol
    cidr_blocks: P.IPRange
    ipv6_cidr_blocks: P.IPRange

  VpcR:
    cidr_block: P.IPRange

  SubnetR:
    cidr_block: P.IPRange
    availability_zone: P.Zone

  RouteR:
    destination_cidr_block: P.IPRange
    destination_ipv6_cidr_block: P.IPRange
