{
  "name": "vault",
  "schemas": [
    {
      "name": "address",
      "type": "TypeString",
      "description": "URL of the root of the target Vault server.",
      "conflictsWith": [],
      "optional": false,
      "required": true,
      "computed": false,
      "forceNew": false,
      "sensitive": false,
      "minItems": 0,
      "maxItems": 0
    },
    {
      "name": "ca_cert_dir",
      "type": "TypeString",
      "description": "Path to directory containing CA certificate files to validate the server's certificate.",
      "conflictsWith": [],
      "optional": true,
      "required": false,
      "computed": false,
      "forceNew": false,
      "sensitive": false,
      "minItems": 0,
      "maxItems": 0
    },
    {
      "name": "ca_cert_file",
      "type": "TypeString",
      "description": "Path to a CA certificate file to validate the server's certificate.",
      "conflictsWith": [],
      "optional": true,
      "required": false,
      "computed": false,
      "forceNew": false,
      "sensitive": false,
      "minItems": 0,
      "maxItems": 0
    },
    {
      "name": "client_auth",
      "type": "TypeList",
      "description": "Client authentication credentials.",
      "conflictsWith": [],
      "optional": true,
      "required": false,
      "computed": false,
      "forceNew": false,
      "sensitive": false,
      "minItems": 0,
      "maxItems": 0,
      "resource": {
        "name": "client_auth",
        "schemas": [
          {
            "name": "cert_file",
            "type": "TypeString",
            "description": "Path to a file containing the client certificate.",
            "conflictsWith": [],
            "optional": false,
            "required": true,
            "computed": false,
            "forceNew": false,
            "sensitive": false,
            "minItems": 0,
            "maxItems": 0
          },
          {
            "name": "key_file",
            "type": "TypeString",
            "description": "Path to a file containing the private key that the certificate was issued for.",
            "conflictsWith": [],
            "optional": false,
            "required": true,
            "computed": false,
            "forceNew": false,
            "sensitive": false,
            "minItems": 0,
            "maxItems": 0
          }
        ]
      }
    },
    {
      "name": "max_lease_ttl_seconds",
      "type": "TypeInt",
      "description": "Maximum TTL for secret leases requested by this provider",
      "conflictsWith": [],
      "optional": true,
      "required": false,
      "computed": false,
      "forceNew": false,
      "sensitive": false,
      "minItems": 0,
      "maxItems": 0
    },
    {
      "name": "skip_tls_verify",
      "type": "TypeBool",
      "description": "Set this to true only if the target Vault server is an insecure development instance.",
      "conflictsWith": [],
      "optional": true,
      "required": false,
      "computed": false,
      "forceNew": false,
      "sensitive": false,
      "minItems": 0,
      "maxItems": 0
    },
    {
      "name": "token",
      "type": "TypeString",
      "description": "Token to use to authenticate to Vault.",
      "conflictsWith": [],
      "optional": false,
      "required": true,
      "computed": false,
      "forceNew": false,
      "sensitive": false,
      "minItems": 0,
      "maxItems": 0
    }
  ],
  "resources": [
    {
      "name": "vault_approle_auth_backend_login",
      "schemas": [
        {
          "name": "accessor",
          "type": "TypeString",
          "description": "The accessor for the token.",
          "conflictsWith": [],
          "optional": false,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "backend",
          "type": "TypeString",
          "description": "Unique name of the auth backend to configure.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0,
          "default": "approle"
        },
        {
          "name": "client_token",
          "type": "TypeString",
          "description": "The token.",
          "conflictsWith": [],
          "optional": false,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "lease_duration",
          "type": "TypeInt",
          "description": "How long the token is valid for.",
          "conflictsWith": [],
          "optional": false,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "lease_started",
          "type": "TypeString",
          "description": "The timestamp the lease started on, as determined by the machine running Terraform.",
          "conflictsWith": [],
          "optional": false,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "metadata",
          "type": "TypeMap",
          "description": "Metadata associated with the token.",
          "conflictsWith": [],
          "optional": false,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0,
          "schema": {
            "name": "approle_auth_backend_login_metadata",
            "type": "TypeString",
            "conflictsWith": [],
            "optional": false,
            "required": false,
            "computed": false,
            "forceNew": false,
            "sensitive": false,
            "minItems": 0,
            "maxItems": 0
          }
        },
        {
          "name": "policies",
          "type": "TypeList",
          "description": "Policies set on the token.",
          "conflictsWith": [],
          "optional": false,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0,
          "schema": {
            "name": "approle_auth_backend_login_policies",
            "type": "TypeString",
            "conflictsWith": [],
            "optional": false,
            "required": false,
            "computed": false,
            "forceNew": false,
            "sensitive": false,
            "minItems": 0,
            "maxItems": 0
          }
        },
        {
          "name": "renewable",
          "type": "TypeBool",
          "description": "Whether the token is renewable or not.",
          "conflictsWith": [],
          "optional": false,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "role_id",
          "type": "TypeString",
          "description": "The RoleID to log in with.",
          "conflictsWith": [],
          "optional": false,
          "required": true,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "secret_id",
          "type": "TypeString",
          "description": "The SecretID to log in with.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        }
      ]
    },
    {
      "name": "vault_approle_auth_backend_role",
      "schemas": [
        {
          "name": "backend",
          "type": "TypeString",
          "description": "Unique name of the auth backend to configure.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0,
          "default": "approle"
        },
        {
          "name": "bind_secret_id",
          "type": "TypeBool",
          "description": "Whether or not to require secret_id to be present when logging in using this AppRole.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0,
          "default": "true"
        },
        {
          "name": "bound_cidr_list",
          "type": "TypeSet",
          "description": "List of CIDR blocks that can log in using the AppRole.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0,
          "schema": {
            "name": "approle_auth_backend_role_bound_cidr_list",
            "type": "TypeString",
            "conflictsWith": [],
            "optional": false,
            "required": false,
            "computed": false,
            "forceNew": false,
            "sensitive": false,
            "minItems": 0,
            "maxItems": 0
          }
        },
        {
          "name": "period",
          "type": "TypeInt",
          "description": "Number of seconds to set the TTL to for issued tokens upon renewal. Makes the token a periodic token, which will never expire as long as it is renewed before the TTL each period.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "policies",
          "type": "TypeSet",
          "description": "Policies to be set on tokens issued using this AppRole.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0,
          "schema": {
            "name": "approle_auth_backend_role_policies",
            "type": "TypeString",
            "conflictsWith": [],
            "optional": false,
            "required": false,
            "computed": false,
            "forceNew": false,
            "sensitive": false,
            "minItems": 0,
            "maxItems": 0
          }
        },
        {
          "name": "role_id",
          "type": "TypeString",
          "description": "The RoleID of the role. Autogenerated if not set.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "role_name",
          "type": "TypeString",
          "description": "Name of the role.",
          "conflictsWith": [],
          "optional": false,
          "required": true,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "secret_id_num_uses",
          "type": "TypeInt",
          "description": "Number of times which a particular SecretID can be used to fetch a token from this AppRole, after which the SecretID will expire. Leaving this unset or setting it to 0 will allow unlimited uses.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "secret_id_ttl",
          "type": "TypeInt",
          "description": "Number of seconds a SecretID remains valid for.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "token_max_ttl",
          "type": "TypeInt",
          "description": "Number of seconds after which issued tokens can no longer be renewed.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "token_num_uses",
          "type": "TypeInt",
          "description": "Number of times issued tokens can be used. Setting this to 0 or leaving it unset means unlimited uses.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "token_ttl",
          "type": "TypeInt",
          "description": "Default number of seconds to set as the TTL for issued tokens and at renewal time.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        }
      ]
    },
    {
      "name": "vault_approle_auth_backend_role_secret_id",
      "schemas": [
        {
          "name": "accessor",
          "type": "TypeString",
          "description": "The unique ID used to access this SecretID.",
          "conflictsWith": [],
          "optional": false,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "backend",
          "type": "TypeString",
          "description": "Unique name of the auth backend to configure.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0,
          "default": "approle"
        },
        {
          "name": "cidr_list",
          "type": "TypeSet",
          "description": "List of CIDR blocks that can log in using the SecretID.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0,
          "schema": {
            "name": "approle_auth_backend_role_secret_id_cidr_list",
            "type": "TypeString",
            "conflictsWith": [],
            "optional": false,
            "required": false,
            "computed": false,
            "forceNew": false,
            "sensitive": false,
            "minItems": 0,
            "maxItems": 0
          }
        },
        {
          "name": "metadata",
          "type": "TypeString",
          "description": "JSON-encoded secret data to write.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "role_name",
          "type": "TypeString",
          "description": "Name of the role.",
          "conflictsWith": [],
          "optional": false,
          "required": true,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "secret_id",
          "type": "TypeString",
          "description": "The SecretID to be managed. If not specified, Vault auto-generates one.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": true,
          "forceNew": true,
          "sensitive": true,
          "minItems": 0,
          "maxItems": 0
        }
      ]
    },
    {
      "name": "vault_auth_backend",
      "schemas": [
        {
          "name": "description",
          "type": "TypeString",
          "description": "The description of the auth backend",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "path",
          "type": "TypeString",
          "description": "path to mount the backend. This defaults to the type.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": true,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "type",
          "type": "TypeString",
          "description": "Name of the auth backend",
          "conflictsWith": [],
          "optional": false,
          "required": true,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        }
      ]
    },
    {
      "name": "vault_aws_auth_backend_cert",
      "schemas": [
        {
          "name": "aws_public_cert",
          "type": "TypeString",
          "description": "Base64 encoded AWS Public key required to verify PKCS7 signature of the EC2 instance metadata.",
          "conflictsWith": [],
          "optional": false,
          "required": true,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "backend",
          "type": "TypeString",
          "description": "Unique name of the auth backend to configure.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0,
          "default": "aws"
        },
        {
          "name": "cert_name",
          "type": "TypeString",
          "description": "Name of the certificate to configure.",
          "conflictsWith": [],
          "optional": false,
          "required": true,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "type",
          "type": "TypeString",
          "description": "The type of document that can be verified using the certificate. Must be either \"pkcs7\" or \"identity\".",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0,
          "default": "pkcs7"
        }
      ]
    },
    {
      "name": "vault_aws_auth_backend_client",
      "schemas": [
        {
          "name": "access_key",
          "type": "TypeString",
          "description": "AWS Access key with permissions to query AWS APIs.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": true,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "backend",
          "type": "TypeString",
          "description": "Unique name of the auth backend to configure.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0,
          "default": "aws"
        },
        {
          "name": "ec2_endpoint",
          "type": "TypeString",
          "description": "URL to override the default generated endpoint for making AWS EC2 API calls.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "iam_endpoint",
          "type": "TypeString",
          "description": "URL to override the default generated endpoint for making AWS IAM API calls.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "iam_server_id_header_value",
          "type": "TypeString",
          "description": "The value to require in the X-Vault-AWS-IAM-Server-ID header as part of GetCallerIdentity requests that are used in the iam auth method.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "secret_key",
          "type": "TypeString",
          "description": "AWS Secret key with permissions to query AWS APIs.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": true,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "sts_endpoint",
          "type": "TypeString",
          "description": "URL to override the default generated endpoint for making AWS STS API calls.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        }
      ]
    },
    {
      "name": "vault_aws_auth_backend_identity_whitelist",
      "schemas": [
        {
          "name": "backend",
          "type": "TypeString",
          "description": "Unique name of the auth backend to configure.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0,
          "default": "aws"
        },
        {
          "name": "disable_periodic_tidy",
          "type": "TypeBool",
          "description": "If true, disables the periodic tidying of the identiy whitelist entries.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "safety_buffer",
          "type": "TypeInt",
          "description": "The amount of extra time that must have passed beyond the roletag expiration, before it's removed from backend storage.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        }
      ]
    },
    {
      "name": "vault_aws_auth_backend_login",
      "schemas": [
        {
          "name": "accessor",
          "type": "TypeString",
          "description": "The accessor returned from Vault for this token.",
          "conflictsWith": [],
          "optional": false,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "auth_type",
          "type": "TypeString",
          "description": "The auth method used to generate this token.",
          "conflictsWith": [],
          "optional": false,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "backend",
          "type": "TypeString",
          "description": "AWS Auth Backend to read the token from.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "client_token",
          "type": "TypeString",
          "description": "The token returned by Vault.",
          "conflictsWith": [],
          "optional": false,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": true,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "iam_http_request_method",
          "type": "TypeString",
          "description": "The HTTP method used in the signed request.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "iam_request_body",
          "type": "TypeString",
          "description": "The Base64-encoded body of the signed request.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "iam_request_headers",
          "type": "TypeString",
          "description": "The Base64-encoded, JSON serialized representation of the sts:GetCallerIdentity HTTP request headers.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "iam_request_url",
          "type": "TypeString",
          "description": "The Base64-encoded HTTP URL used in the signed request.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "identity",
          "type": "TypeString",
          "description": "Base64-encoded EC2 instance identity document to authenticate with.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "lease_duration",
          "type": "TypeInt",
          "description": "Lease duration in seconds relative to the time in lease_start_time.",
          "conflictsWith": [],
          "optional": false,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "lease_start_time",
          "type": "TypeString",
          "description": "Time at which the lease was read, using the clock of the system where Terraform was running",
          "conflictsWith": [],
          "optional": false,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "metadata",
          "type": "TypeMap",
          "description": "The metadata reported by the Vault server.",
          "conflictsWith": [],
          "optional": false,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "nonce",
          "type": "TypeString",
          "description": "The nonce to be used for subsequent login requests.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": true,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "pkcs7",
          "type": "TypeString",
          "description": "PKCS7 signature of the identity document to authenticate with, with all newline characters removed.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "policies",
          "type": "TypeList",
          "description": "The policies assigned to this token.",
          "conflictsWith": [],
          "optional": false,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0,
          "schema": {
            "name": "aws_auth_backend_login_policies",
            "type": "TypeString",
            "conflictsWith": [],
            "optional": false,
            "required": false,
            "computed": false,
            "forceNew": false,
            "sensitive": false,
            "minItems": 0,
            "maxItems": 0
          }
        },
        {
          "name": "renewable",
          "type": "TypeBool",
          "description": "True if the duration of this lease can be extended through renewal.",
          "conflictsWith": [],
          "optional": false,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "role",
          "type": "TypeString",
          "description": "AWS Auth Role to read the token from.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": true,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "signature",
          "type": "TypeString",
          "description": "Base64-encoded SHA256 RSA signature of the instance identtiy document to authenticate with.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        }
      ]
    },
    {
      "name": "vault_aws_auth_backend_role",
      "schemas": [
        {
          "name": "allow_instance_migration",
          "type": "TypeBool",
          "description": "When true, allows migration of the underlying instance where the client resides. Use with caution.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "auth_type",
          "type": "TypeString",
          "description": "The auth type permitted for this role.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0,
          "default": "iam"
        },
        {
          "name": "backend",
          "type": "TypeString",
          "description": "Unique name of the auth backend to configure.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0,
          "default": "aws"
        },
        {
          "name": "bound_account_id",
          "type": "TypeString",
          "description": "Only EC2 instances with this account ID in their identity document will be permitted to log in.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "bound_ami_id",
          "type": "TypeString",
          "description": "Only EC2 instances using this AMI ID will be permitted to log in.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "bound_iam_instance_profile_arn",
          "type": "TypeString",
          "description": "Only EC2 instances associated with an IAM instance profile ARN that matches this value will be permitted to log in.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "bound_iam_principal_arn",
          "type": "TypeString",
          "description": "The IAM principal that must be authenticated using the iam auth method.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "bound_iam_role_arn",
          "type": "TypeString",
          "description": "Only EC2 instances that match this IAM role ARN will be permitted to log in.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "bound_region",
          "type": "TypeString",
          "description": "Only EC2 instances in this region will be permitted to log in.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "bound_subnet_id",
          "type": "TypeString",
          "description": "Only EC2 instances associated with this subnet ID will be permitted to log in.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "bound_vpc_id",
          "type": "TypeString",
          "description": "Only EC2 instances associated with this VPC ID will be permitted to log in.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "disallow_reauthentication",
          "type": "TypeBool",
          "description": "When true, only allows a single token to be granted per instance ID.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "inferred_aws_region",
          "type": "TypeString",
          "description": "The region to search for the inferred entities in.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "inferred_entity_type",
          "type": "TypeString",
          "description": "The type of inferencing Vault should do.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "max_ttl",
          "type": "TypeInt",
          "description": "The maximum allowed lifetime of tokens issued using this role.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "period",
          "type": "TypeInt",
          "description": "The duration in which a token should be renewed. At each renewal, the token's TTL will be set to the value of this parameter.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "policies",
          "type": "TypeList",
          "description": "Policies to be set on tokens issued using this role.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0,
          "schema": {
            "name": "aws_auth_backend_role_policies",
            "type": "TypeString",
            "conflictsWith": [],
            "optional": false,
            "required": false,
            "computed": false,
            "forceNew": false,
            "sensitive": false,
            "minItems": 0,
            "maxItems": 0
          }
        },
        {
          "name": "resolve_aws_unique_ids",
          "type": "TypeBool",
          "description": "Whether or not Vault should resolve the bound_iam_principal_arn to an AWS Unique ID. When true, deleting a principal and recreating it with the same name won't automatically grant the new principal the same roles in Vault that the old principal had.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "role",
          "type": "TypeString",
          "description": "Name of the role.",
          "conflictsWith": [],
          "optional": false,
          "required": true,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "role_tag",
          "type": "TypeString",
          "description": "The key of the tag on EC2 instance to use for role tags.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "ttl",
          "type": "TypeInt",
          "description": "The TTL period of tokens issued using this role, provided as the number of minutes.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        }
      ]
    },
    {
      "name": "vault_aws_auth_backend_role_tag",
      "schemas": [
        {
          "name": "allow_instance_migration",
          "type": "TypeBool",
          "description": "Allows migration of the underlying instance where the client resides.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "backend",
          "type": "TypeString",
          "description": "AWS auth backend to read tags from.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0,
          "default": "aws"
        },
        {
          "name": "disallow_reauthentication",
          "type": "TypeBool",
          "description": "Only allow a single token to be granted per instance ID.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "instance_id",
          "type": "TypeString",
          "description": "Instance ID for which this tag is intended. The created tag can only be used by the instance with the given ID.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "max_ttl",
          "type": "TypeString",
          "description": "The maximum allowed lifetime of tokens issued using this role.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "policies",
          "type": "TypeList",
          "description": "Policies to be associated with the tag.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0,
          "schema": {
            "name": "aws_auth_backend_role_tag_policies",
            "type": "TypeString",
            "conflictsWith": [],
            "optional": false,
            "required": false,
            "computed": false,
            "forceNew": false,
            "sensitive": false,
            "minItems": 0,
            "maxItems": 0
          }
        },
        {
          "name": "role",
          "type": "TypeString",
          "description": "Name of the role.",
          "conflictsWith": [],
          "optional": false,
          "required": true,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "tag_key",
          "type": "TypeString",
          "conflictsWith": [],
          "optional": false,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "tag_value",
          "type": "TypeString",
          "conflictsWith": [],
          "optional": false,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        }
      ]
    },
    {
      "name": "vault_aws_auth_backend_sts_role",
      "schemas": [
        {
          "name": "account_id",
          "type": "TypeString",
          "description": "AWS account ID to be associated with STS role.",
          "conflictsWith": [],
          "optional": false,
          "required": true,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "backend",
          "type": "TypeString",
          "description": "Unique name of the auth backend to configure.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0,
          "default": "aws"
        },
        {
          "name": "sts_role",
          "type": "TypeString",
          "description": "AWS ARN for STS role to be assumed when interacting with the account specified.",
          "conflictsWith": [],
          "optional": false,
          "required": true,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        }
      ]
    },
    {
      "name": "vault_aws_secret_backend",
      "schemas": [
        {
          "name": "access_key",
          "type": "TypeString",
          "description": "The AWS Access Key ID to use when generating new credentials.",
          "conflictsWith": [],
          "optional": false,
          "required": true,
          "computed": false,
          "forceNew": false,
          "sensitive": true,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "default_lease_ttl_seconds",
          "type": "TypeInt",
          "description": "Default lease duration for secrets in seconds",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "description",
          "type": "TypeString",
          "description": "Human-friendly description of the mount for the backend.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "max_lease_ttl_seconds",
          "type": "TypeInt",
          "description": "Maximum possible lease duration for secrets in seconds",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "path",
          "type": "TypeString",
          "description": "Path to mount the backend at.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0,
          "default": "aws"
        },
        {
          "name": "region",
          "type": "TypeString",
          "description": "The AWS region to make API calls against. Defaults to us-east-1.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "secret_key",
          "type": "TypeString",
          "description": "The AWS Secret Access Key to use when generating new credentials.",
          "conflictsWith": [],
          "optional": false,
          "required": true,
          "computed": false,
          "forceNew": false,
          "sensitive": true,
          "minItems": 0,
          "maxItems": 0
        }
      ]
    },
    {
      "name": "vault_aws_secret_backend_role",
      "schemas": [
        {
          "name": "backend",
          "type": "TypeString",
          "description": "The path of the AWS Secret Backend the role belongs to.",
          "conflictsWith": [],
          "optional": false,
          "required": true,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "name",
          "type": "TypeString",
          "description": "Unique name for the role.",
          "conflictsWith": [],
          "optional": false,
          "required": true,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "policy",
          "type": "TypeString",
          "description": "IAM policy the role should use in JSON format.",
          "conflictsWith": [
            "policy_arn"
          ],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "policy_arn",
          "type": "TypeString",
          "description": "ARN for an existing IAM policy the role should use.",
          "conflictsWith": [
            "policy"
          ],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        }
      ]
    },
    {
      "name": "vault_database_secret_backend_connection",
      "schemas": [
        {
          "name": "allowed_roles",
          "type": "TypeList",
          "description": "A list of roles that are allowed to use this connection.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0,
          "schema": {
            "name": "database_secret_backend_connection_allowed_roles",
            "type": "TypeString",
            "conflictsWith": [],
            "optional": false,
            "required": false,
            "computed": false,
            "forceNew": false,
            "sensitive": false,
            "minItems": 0,
            "maxItems": 0
          }
        },
        {
          "name": "backend",
          "type": "TypeString",
          "description": "Unique name of the Vault mount to configure.",
          "conflictsWith": [],
          "optional": false,
          "required": true,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "cassandra",
          "type": "TypeList",
          "description": "Connection parameters for the cassandra-database-plugin plugin.",
          "conflictsWith": [
            "hana",
            "mongodb",
            "mssql",
            "mysql",
            "postgresql",
            "oracle"
          ],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 1,
          "resource": {
            "name": "database_secret_backend_connection_cassandra",
            "schemas": [
              {
                "name": "connect_timeout",
                "type": "TypeInt",
                "description": "The number of seconds to use as a connection timeout.",
                "conflictsWith": [],
                "optional": true,
                "required": false,
                "computed": false,
                "forceNew": false,
                "sensitive": false,
                "minItems": 0,
                "maxItems": 0,
                "default": "5"
              },
              {
                "name": "hosts",
                "type": "TypeList",
                "description": "Cassandra hosts to connect to.",
                "conflictsWith": [],
                "optional": true,
                "required": false,
                "computed": false,
                "forceNew": false,
                "sensitive": false,
                "minItems": 0,
                "maxItems": 0,
                "schema": {
                  "name": "cassandra_hosts",
                  "type": "TypeString",
                  "conflictsWith": [],
                  "optional": false,
                  "required": false,
                  "computed": false,
                  "forceNew": false,
                  "sensitive": false,
                  "minItems": 0,
                  "maxItems": 0
                }
              },
              {
                "name": "insecure_tls",
                "type": "TypeBool",
                "description": "Whether to skip verification of the server certificate when using TLS.",
                "conflictsWith": [],
                "optional": true,
                "required": false,
                "computed": false,
                "forceNew": false,
                "sensitive": false,
                "minItems": 0,
                "maxItems": 0,
                "default": "false"
              },
              {
                "name": "password",
                "type": "TypeString",
                "description": "The password to use when authenticating with Cassandra.",
                "conflictsWith": [],
                "optional": true,
                "required": false,
                "computed": false,
                "forceNew": false,
                "sensitive": true,
                "minItems": 0,
                "maxItems": 0
              },
              {
                "name": "pem_bundle",
                "type": "TypeString",
                "description": "Concatenated PEM blocks containing a certificate and private key; a certificate, private key, and issuing CA certificate; or just a CA certificate.",
                "conflictsWith": [],
                "optional": true,
                "required": false,
                "computed": false,
                "forceNew": false,
                "sensitive": true,
                "minItems": 0,
                "maxItems": 0
              },
              {
                "name": "pem_json",
                "type": "TypeString",
                "description": "Specifies JSON containing a certificate and private key; a certificate, private key, and issuing CA certificate; or just a CA certificate.",
                "conflictsWith": [],
                "optional": true,
                "required": false,
                "computed": false,
                "forceNew": false,
                "sensitive": true,
                "minItems": 0,
                "maxItems": 0
              },
              {
                "name": "port",
                "type": "TypeInt",
                "description": "The transport port to use to connect to Cassandra.",
                "conflictsWith": [],
                "optional": true,
                "required": false,
                "computed": false,
                "forceNew": false,
                "sensitive": false,
                "minItems": 0,
                "maxItems": 0,
                "default": "9042"
              },
              {
                "name": "protocol_version",
                "type": "TypeInt",
                "description": "The CQL protocol version to use.",
                "conflictsWith": [],
                "optional": true,
                "required": false,
                "computed": false,
                "forceNew": false,
                "sensitive": false,
                "minItems": 0,
                "maxItems": 0,
                "default": "2"
              },
              {
                "name": "tls",
                "type": "TypeBool",
                "description": "Whether to use TLS when connecting to Cassandra.",
                "conflictsWith": [],
                "optional": true,
                "required": false,
                "computed": false,
                "forceNew": false,
                "sensitive": false,
                "minItems": 0,
                "maxItems": 0,
                "default": "true"
              },
              {
                "name": "username",
                "type": "TypeString",
                "description": "The username to use when authenticating with Cassandra.",
                "conflictsWith": [],
                "optional": true,
                "required": false,
                "computed": false,
                "forceNew": false,
                "sensitive": false,
                "minItems": 0,
                "maxItems": 0
              }
            ]
          }
        },
        {
          "name": "hana",
          "type": "TypeList",
          "description": "Connection parameters for the hana-database-plugin plugin.",
          "conflictsWith": [
            "cassandra",
            "mongodb",
            "mssql",
            "mysql",
            "postgresql",
            "oracle"
          ],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 1,
          "resource": {
            "name": "database_secret_backend_connection_hana",
            "schemas": [
              {
                "name": "connection_url",
                "type": "TypeString",
                "description": "Connection string to use to connect to the database.",
                "conflictsWith": [],
                "optional": true,
                "required": false,
                "computed": false,
                "forceNew": false,
                "sensitive": false,
                "minItems": 0,
                "maxItems": 0
              },
              {
                "name": "max_connection_lifetime",
                "type": "TypeInt",
                "description": "Maximum number of seconds a connection may be reused.",
                "conflictsWith": [],
                "optional": true,
                "required": false,
                "computed": false,
                "forceNew": false,
                "sensitive": false,
                "minItems": 0,
                "maxItems": 0
              },
              {
                "name": "max_idle_connections",
                "type": "TypeInt",
                "description": "Maximum number of idle connections to the database.",
                "conflictsWith": [],
                "optional": true,
                "required": false,
                "computed": false,
                "forceNew": false,
                "sensitive": false,
                "minItems": 0,
                "maxItems": 0
              },
              {
                "name": "max_open_connections",
                "type": "TypeInt",
                "description": "Maximum number of open connections to the database.",
                "conflictsWith": [],
                "optional": true,
                "required": false,
                "computed": false,
                "forceNew": false,
                "sensitive": false,
                "minItems": 0,
                "maxItems": 0,
                "default": "2"
              }
            ]
          }
        },
        {
          "name": "mongodb",
          "type": "TypeList",
          "description": "Connection parameters for the mongodb-database-plugin plugin.",
          "conflictsWith": [
            "cassandra",
            "hana",
            "mssql",
            "mysql",
            "postgresql",
            "oracle"
          ],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 1,
          "resource": {
            "name": "database_secret_backend_connection_mongodb",
            "schemas": [
              {
                "name": "connection_url",
                "type": "TypeString",
                "description": "Connection string to use to connect to the database.",
                "conflictsWith": [],
                "optional": true,
                "required": false,
                "computed": false,
                "forceNew": false,
                "sensitive": false,
                "minItems": 0,
                "maxItems": 0
              }
            ]
          }
        },
        {
          "name": "mssql",
          "type": "TypeList",
          "description": "Connection parameters for the mssql-database-plugin plugin.",
          "conflictsWith": [
            "cassandra",
            "hana",
            "mongodb",
            "mysql",
            "postgresql",
            "oracle"
          ],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 1,
          "resource": {
            "name": "database_secret_backend_connection_mssql",
            "schemas": [
              {
                "name": "connection_url",
                "type": "TypeString",
                "description": "Connection string to use to connect to the database.",
                "conflictsWith": [],
                "optional": true,
                "required": false,
                "computed": false,
                "forceNew": false,
                "sensitive": false,
                "minItems": 0,
                "maxItems": 0
              },
              {
                "name": "max_connection_lifetime",
                "type": "TypeInt",
                "description": "Maximum number of seconds a connection may be reused.",
                "conflictsWith": [],
                "optional": true,
                "required": false,
                "computed": false,
                "forceNew": false,
                "sensitive": false,
                "minItems": 0,
                "maxItems": 0
              },
              {
                "name": "max_idle_connections",
                "type": "TypeInt",
                "description": "Maximum number of idle connections to the database.",
                "conflictsWith": [],
                "optional": true,
                "required": false,
                "computed": false,
                "forceNew": false,
                "sensitive": false,
                "minItems": 0,
                "maxItems": 0
              },
              {
                "name": "max_open_connections",
                "type": "TypeInt",
                "description": "Maximum number of open connections to the database.",
                "conflictsWith": [],
                "optional": true,
                "required": false,
                "computed": false,
                "forceNew": false,
                "sensitive": false,
                "minItems": 0,
                "maxItems": 0,
                "default": "2"
              }
            ]
          }
        },
        {
          "name": "mysql",
          "type": "TypeList",
          "description": "Connection parameters for the mysql-database-plugin plugin.",
          "conflictsWith": [
            "cassandra",
            "hana",
            "mongodb",
            "mssql",
            "postgresql",
            "oracle"
          ],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 1,
          "resource": {
            "name": "database_secret_backend_connection_mysql",
            "schemas": [
              {
                "name": "connection_url",
                "type": "TypeString",
                "description": "Connection string to use to connect to the database.",
                "conflictsWith": [],
                "optional": true,
                "required": false,
                "computed": false,
                "forceNew": false,
                "sensitive": false,
                "minItems": 0,
                "maxItems": 0
              },
              {
                "name": "max_connection_lifetime",
                "type": "TypeInt",
                "description": "Maximum number of seconds a connection may be reused.",
                "conflictsWith": [],
                "optional": true,
                "required": false,
                "computed": false,
                "forceNew": false,
                "sensitive": false,
                "minItems": 0,
                "maxItems": 0
              },
              {
                "name": "max_idle_connections",
                "type": "TypeInt",
                "description": "Maximum number of idle connections to the database.",
                "conflictsWith": [],
                "optional": true,
                "required": false,
                "computed": false,
                "forceNew": false,
                "sensitive": false,
                "minItems": 0,
                "maxItems": 0
              },
              {
                "name": "max_open_connections",
                "type": "TypeInt",
                "description": "Maximum number of open connections to the database.",
                "conflictsWith": [],
                "optional": true,
                "required": false,
                "computed": false,
                "forceNew": false,
                "sensitive": false,
                "minItems": 0,
                "maxItems": 0,
                "default": "2"
              }
            ]
          }
        },
        {
          "name": "name",
          "type": "TypeString",
          "description": "Name of the database connection.",
          "conflictsWith": [],
          "optional": false,
          "required": true,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "oracle",
          "type": "TypeList",
          "description": "Connection parameters for the oracle-database-plugin plugin.",
          "conflictsWith": [
            "cassandra",
            "hana",
            "mongodb",
            "mssql",
            "mysql",
            "postgresql"
          ],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 1,
          "resource": {
            "name": "database_secret_backend_connection_oracle",
            "schemas": [
              {
                "name": "connection_url",
                "type": "TypeString",
                "description": "Connection string to use to connect to the database.",
                "conflictsWith": [],
                "optional": true,
                "required": false,
                "computed": false,
                "forceNew": false,
                "sensitive": false,
                "minItems": 0,
                "maxItems": 0
              },
              {
                "name": "max_connection_lifetime",
                "type": "TypeInt",
                "description": "Maximum number of seconds a connection may be reused.",
                "conflictsWith": [],
                "optional": true,
                "required": false,
                "computed": false,
                "forceNew": false,
                "sensitive": false,
                "minItems": 0,
                "maxItems": 0
              },
              {
                "name": "max_idle_connections",
                "type": "TypeInt",
                "description": "Maximum number of idle connections to the database.",
                "conflictsWith": [],
                "optional": true,
                "required": false,
                "computed": false,
                "forceNew": false,
                "sensitive": false,
                "minItems": 0,
                "maxItems": 0
              },
              {
                "name": "max_open_connections",
                "type": "TypeInt",
                "description": "Maximum number of open connections to the database.",
                "conflictsWith": [],
                "optional": true,
                "required": false,
                "computed": false,
                "forceNew": false,
                "sensitive": false,
                "minItems": 0,
                "maxItems": 0,
                "default": "2"
              }
            ]
          }
        },
        {
          "name": "postgresql",
          "type": "TypeList",
          "description": "Connection parameters for the postgresql-database-plugin plugin.",
          "conflictsWith": [
            "cassandra",
            "hana",
            "mongodb",
            "mssql",
            "mysql",
            "oracle"
          ],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 1,
          "resource": {
            "name": "database_secret_backend_connection_postgresql",
            "schemas": [
              {
                "name": "connection_url",
                "type": "TypeString",
                "description": "Connection string to use to connect to the database.",
                "conflictsWith": [],
                "optional": true,
                "required": false,
                "computed": false,
                "forceNew": false,
                "sensitive": false,
                "minItems": 0,
                "maxItems": 0
              },
              {
                "name": "max_connection_lifetime",
                "type": "TypeInt",
                "description": "Maximum number of seconds a connection may be reused.",
                "conflictsWith": [],
                "optional": true,
                "required": false,
                "computed": false,
                "forceNew": false,
                "sensitive": false,
                "minItems": 0,
                "maxItems": 0
              },
              {
                "name": "max_idle_connections",
                "type": "TypeInt",
                "description": "Maximum number of idle connections to the database.",
                "conflictsWith": [],
                "optional": true,
                "required": false,
                "computed": false,
                "forceNew": false,
                "sensitive": false,
                "minItems": 0,
                "maxItems": 0
              },
              {
                "name": "max_open_connections",
                "type": "TypeInt",
                "description": "Maximum number of open connections to the database.",
                "conflictsWith": [],
                "optional": true,
                "required": false,
                "computed": false,
                "forceNew": false,
                "sensitive": false,
                "minItems": 0,
                "maxItems": 0,
                "default": "2"
              }
            ]
          }
        },
        {
          "name": "verify_connection",
          "type": "TypeBool",
          "description": "Specifies if the connection is verified during initial configuration.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0,
          "default": "true"
        }
      ]
    },
    {
      "name": "vault_database_secret_backend_role",
      "schemas": [
        {
          "name": "backend",
          "type": "TypeString",
          "description": "The path of the Database Secret Backend the role belongs to.",
          "conflictsWith": [],
          "optional": false,
          "required": true,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "creation_statements",
          "type": "TypeString",
          "description": "Database statements to execute to create and configure a user.",
          "conflictsWith": [],
          "optional": false,
          "required": true,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "db_name",
          "type": "TypeString",
          "description": "Database connection to use for this role.",
          "conflictsWith": [],
          "optional": false,
          "required": true,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "default_ttl",
          "type": "TypeInt",
          "description": "Default TTL for leases associated with this role, in seconds.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "max_ttl",
          "type": "TypeInt",
          "description": "Maximum TTL for leases associated with this role, in seconds.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "name",
          "type": "TypeString",
          "description": "Unique name for the role.",
          "conflictsWith": [],
          "optional": false,
          "required": true,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "renew_statements",
          "type": "TypeString",
          "description": "Database statements to execute to renew a user.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "revocation_statements",
          "type": "TypeString",
          "description": "Database statements to execute to revoke a user.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "rollback_statements",
          "type": "TypeString",
          "description": "Database statements to execute to rollback a create operation in the event of an error.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        }
      ]
    },
    {
      "name": "vault_generic_secret",
      "schemas": [
        {
          "name": "allow_read",
          "type": "TypeBool",
          "description": "Attempt to read the token from Vault if true; if false, drift won't be detected.",
          "deprecated": "Please use disable_read instead.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "data_json",
          "type": "TypeString",
          "description": "JSON-encoded secret data to write.",
          "conflictsWith": [],
          "optional": false,
          "required": true,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "disable_read",
          "type": "TypeBool",
          "description": "Don't attempt to read the token from Vault if true; drift won't be detected.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0,
          "default": "false"
        },
        {
          "name": "path",
          "type": "TypeString",
          "description": "Full path where the generic secret will be written.",
          "conflictsWith": [],
          "optional": false,
          "required": true,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        }
      ]
    },
    {
      "name": "vault_mount",
      "schemas": [
        {
          "name": "default_lease_ttl_seconds",
          "type": "TypeInt",
          "description": "Default lease duration for tokens and secrets in seconds",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "description",
          "type": "TypeString",
          "description": "Human-friendly description of the mount",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "max_lease_ttl_seconds",
          "type": "TypeInt",
          "description": "Maximum possible lease duration for tokens and secrets in seconds",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "path",
          "type": "TypeString",
          "description": "Where the secret backend will be mounted",
          "conflictsWith": [],
          "optional": false,
          "required": true,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "type",
          "type": "TypeString",
          "description": "Type of the backend, such as 'aws'",
          "conflictsWith": [],
          "optional": false,
          "required": true,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        }
      ]
    },
    {
      "name": "vault_okta_auth_backend",
      "schemas": [
        {
          "name": "base_url",
          "type": "TypeString",
          "description": "The Okta url. Examples: oktapreview.com, okta.com (default)",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "description",
          "type": "TypeString",
          "description": "The description of the auth backend",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "group",
          "type": "TypeSet",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0,
          "resource": {
            "name": "okta_auth_backend_group",
            "schemas": [
              {
                "name": "group_name",
                "type": "TypeString",
                "description": "Name of the Okta group",
                "conflictsWith": [],
                "optional": false,
                "required": true,
                "computed": false,
                "forceNew": false,
                "sensitive": false,
                "minItems": 0,
                "maxItems": 0
              },
              {
                "name": "policies",
                "type": "TypeSet",
                "description": "Policies to associate with this group",
                "conflictsWith": [],
                "optional": false,
                "required": true,
                "computed": false,
                "forceNew": false,
                "sensitive": false,
                "minItems": 0,
                "maxItems": 0,
                "schema": {
                  "name": "group_policies",
                  "type": "TypeString",
                  "conflictsWith": [],
                  "optional": false,
                  "required": false,
                  "computed": false,
                  "forceNew": false,
                  "sensitive": false,
                  "minItems": 0,
                  "maxItems": 0
                }
              }
            ]
          }
        },
        {
          "name": "max_ttl",
          "type": "TypeString",
          "description": "Maximum duration after which authentication will be expired",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "organization",
          "type": "TypeString",
          "description": "The Okta organization. This will be the first part of the url https://XXX.okta.com.",
          "conflictsWith": [],
          "optional": false,
          "required": true,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "path",
          "type": "TypeString",
          "description": "path to mount the backend",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0,
          "default": "okta"
        },
        {
          "name": "token",
          "type": "TypeString",
          "description": "The Okta API token. This is required to query Okta for user group membership. If this is not supplied only locally configured groups will be enabled.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "ttl",
          "type": "TypeString",
          "description": "Duration after which authentication will be expired",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "user",
          "type": "TypeSet",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0,
          "resource": {
            "name": "okta_auth_backend_user",
            "schemas": [
              {
                "name": "groups",
                "type": "TypeSet",
                "description": "Groups within the Okta auth backend to associate with this user",
                "conflictsWith": [],
                "optional": false,
                "required": true,
                "computed": false,
                "forceNew": false,
                "sensitive": false,
                "minItems": 0,
                "maxItems": 0,
                "schema": {
                  "name": "user_groups",
                  "type": "TypeString",
                  "conflictsWith": [],
                  "optional": false,
                  "required": false,
                  "computed": false,
                  "forceNew": false,
                  "sensitive": false,
                  "minItems": 0,
                  "maxItems": 0
                }
              },
              {
                "name": "policies",
                "type": "TypeSet",
                "description": "Policies to associate with this user",
                "conflictsWith": [],
                "optional": true,
                "required": false,
                "computed": false,
                "forceNew": false,
                "sensitive": false,
                "minItems": 0,
                "maxItems": 0,
                "schema": {
                  "name": "user_policies",
                  "type": "TypeString",
                  "conflictsWith": [],
                  "optional": false,
                  "required": false,
                  "computed": false,
                  "forceNew": false,
                  "sensitive": false,
                  "minItems": 0,
                  "maxItems": 0
                }
              },
              {
                "name": "username",
                "type": "TypeString",
                "description": "Name of the user within Okta",
                "conflictsWith": [],
                "optional": false,
                "required": true,
                "computed": false,
                "forceNew": false,
                "sensitive": false,
                "minItems": 0,
                "maxItems": 0
              }
            ]
          }
        }
      ]
    },
    {
      "name": "vault_okta_auth_backend_group",
      "schemas": [
        {
          "name": "group_name",
          "type": "TypeString",
          "description": "Name of the Okta group",
          "conflictsWith": [],
          "optional": false,
          "required": true,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "path",
          "type": "TypeString",
          "description": "Path to the Okta auth backend",
          "conflictsWith": [],
          "optional": false,
          "required": true,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "policies",
          "type": "TypeSet",
          "description": "Policies to associate with this group",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0,
          "schema": {
            "name": "okta_auth_backend_group_policies",
            "type": "TypeString",
            "conflictsWith": [],
            "optional": false,
            "required": false,
            "computed": false,
            "forceNew": false,
            "sensitive": false,
            "minItems": 0,
            "maxItems": 0
          }
        }
      ]
    },
    {
      "name": "vault_okta_auth_backend_user",
      "schemas": [
        {
          "name": "groups",
          "type": "TypeSet",
          "description": "Groups within the Okta auth backend to associate with this user",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0,
          "schema": {
            "name": "okta_auth_backend_user_groups",
            "type": "TypeString",
            "conflictsWith": [],
            "optional": false,
            "required": false,
            "computed": false,
            "forceNew": false,
            "sensitive": false,
            "minItems": 0,
            "maxItems": 0
          }
        },
        {
          "name": "path",
          "type": "TypeString",
          "description": "Path to the Okta auth backend",
          "conflictsWith": [],
          "optional": false,
          "required": true,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "policies",
          "type": "TypeSet",
          "description": "Policies to associate with this user",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0,
          "schema": {
            "name": "okta_auth_backend_user_policies",
            "type": "TypeString",
            "conflictsWith": [],
            "optional": false,
            "required": false,
            "computed": false,
            "forceNew": false,
            "sensitive": false,
            "minItems": 0,
            "maxItems": 0
          }
        },
        {
          "name": "username",
          "type": "TypeString",
          "description": "Name of the user within Okta",
          "conflictsWith": [],
          "optional": false,
          "required": true,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        }
      ]
    },
    {
      "name": "vault_policy",
      "schemas": [
        {
          "name": "name",
          "type": "TypeString",
          "description": "Name of the policy",
          "conflictsWith": [],
          "optional": false,
          "required": true,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "policy",
          "type": "TypeString",
          "description": "The policy document",
          "conflictsWith": [],
          "optional": false,
          "required": true,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        }
      ]
    }
  ],
  "dataSources": [
    {
      "name": "vault_approle_auth_backend_role_id",
      "schemas": [
        {
          "name": "backend",
          "type": "TypeString",
          "description": "Unique name of the auth backend to configure.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0,
          "default": "approle"
        },
        {
          "name": "role_id",
          "type": "TypeString",
          "description": "The RoleID of the role.",
          "conflictsWith": [],
          "optional": false,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "role_name",
          "type": "TypeString",
          "description": "Name of the role.",
          "conflictsWith": [],
          "optional": false,
          "required": true,
          "computed": false,
          "forceNew": true,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        }
      ]
    },
    {
      "name": "vault_aws_access_credentials",
      "schemas": [
        {
          "name": "access_key",
          "type": "TypeString",
          "description": "AWS access key ID read from Vault.",
          "conflictsWith": [],
          "optional": false,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "backend",
          "type": "TypeString",
          "description": "AWS Secret Backend to read credentials from.",
          "conflictsWith": [],
          "optional": false,
          "required": true,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "lease_duration",
          "type": "TypeInt",
          "description": "Lease duration in seconds relative to the time in lease_start_time.",
          "conflictsWith": [],
          "optional": false,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "lease_id",
          "type": "TypeString",
          "description": "Lease identifier assigned by vault.",
          "conflictsWith": [],
          "optional": false,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "lease_renewable",
          "type": "TypeBool",
          "description": "True if the duration of this lease can be extended through renewal.",
          "conflictsWith": [],
          "optional": false,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "lease_start_time",
          "type": "TypeString",
          "description": "Time at which the lease was read, using the clock of the system where Terraform was running",
          "conflictsWith": [],
          "optional": false,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "role",
          "type": "TypeString",
          "description": "AWS Secret Role to read credentials from.",
          "conflictsWith": [],
          "optional": false,
          "required": true,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "secret_key",
          "type": "TypeString",
          "description": "AWS secret key read from Vault.",
          "conflictsWith": [],
          "optional": false,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "security_token",
          "type": "TypeString",
          "description": "AWS security token read from Vault. (Only returned if type is 'sts'.)",
          "conflictsWith": [],
          "optional": false,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "type",
          "type": "TypeString",
          "description": "Type of credentials to read. Must be either 'creds' for Access Key and Secret Key, or 'sts' for STS.",
          "conflictsWith": [],
          "optional": true,
          "required": false,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0,
          "default": "creds"
        }
      ]
    },
    {
      "name": "vault_generic_secret",
      "schemas": [
        {
          "name": "data",
          "type": "TypeMap",
          "description": "Map of strings read from Vault.",
          "conflictsWith": [],
          "optional": false,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "data_json",
          "type": "TypeString",
          "description": "JSON-encoded secret data read from Vault.",
          "conflictsWith": [],
          "optional": false,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "lease_duration",
          "type": "TypeInt",
          "description": "Lease duration in seconds relative to the time in lease_start_time.",
          "conflictsWith": [],
          "optional": false,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "lease_id",
          "type": "TypeString",
          "description": "Lease identifier assigned by vault.",
          "conflictsWith": [],
          "optional": false,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "lease_renewable",
          "type": "TypeBool",
          "description": "True if the duration of this lease can be extended through renewal.",
          "conflictsWith": [],
          "optional": false,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "lease_start_time",
          "type": "TypeString",
          "description": "Time at which the lease was read, using the clock of the system where Terraform was running",
          "conflictsWith": [],
          "optional": false,
          "required": false,
          "computed": true,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        },
        {
          "name": "path",
          "type": "TypeString",
          "description": "Full path from which a secret will be read.",
          "conflictsWith": [],
          "optional": false,
          "required": true,
          "computed": false,
          "forceNew": false,
          "sensitive": false,
          "minItems": 0,
          "maxItems": 0
        }
      ]
    }
  ]
}
