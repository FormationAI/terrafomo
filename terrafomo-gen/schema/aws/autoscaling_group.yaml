_name: aws_autoscaling_group
arguments:
  _force_delete:
    required: false
    help: (Optional) Allows deleting the autoscaling group without waiting for all
      instances in the pool to terminate.  You can force an autoscaling group to delete
      even if it's in the process of scaling a resource. Normally, Terraform drains
      all the instances before deleting the group.  This bypasses that behavior and
      potentially leaves resources dangling.
    type: Text
  _initial_lifecycle_hook:
    required: false
    help: (Optional) One or more <http://docs.aws.amazon.com/autoscaling/latest/userguide/lifecycle-hooks.html>
      to attach to the autoscaling group before instances are launched. The syntax
      is exactly the same as the separate </docs/providers/aws/r/autoscaling_lifecycle_hooks.html>
      resource, without the @autoscaling_group_name@ attribute. Please note that this
      will only work when creating a new autoscaling group. For all other use-cases,
      please use @aws_autoscaling_lifecycle_hook@ resource.
    type: Text
  _wait_for_elb_capacity:
    required: false
    help: (Optional) Setting this will cause Terraform to wait for exactly this number
      of healthy instances in all attached load balancers on both create and update
      operations. (Takes precedence over @min_elb_capacity@ behavior.) (See also <#waiting-for-capacity>
      below.)
    type: Text
  _termination_policies:
    required: true
    help: (Optional) A list of policies to decide how the instances in the auto scale
      group should be terminated. The allowed values are @OldestInstance@ , @NewestInstance@
      , @OldestLaunchConfiguration@ , @ClosestToNextInstanceHour@ , @Default@ .
    type: Text
  _min_elb_capacity:
    required: false
    help: (Optional) Setting this causes Terraform to wait for this number of instances
      to show up healthy in the ELB only on creation. Updates will not wait on ELB
      instance number changes. (See also <#waiting-for-capacity> below.)
    type: Text
  _enabled_metrics:
    required: false
    help: (Optional) A list of metrics to collect. The allowed values are @GroupMinSize@
      , @GroupMaxSize@ , @GroupDesiredCapacity@ , @GroupInServiceInstances@ , @GroupPendingInstances@
      , @GroupStandbyInstances@ , @GroupTerminatingInstances@ , @GroupTotalInstances@
      .
    type: Text
  _tag:
    required: true
    help: (Optional) A list of tag blocks. Tags documented below.
    type: Text
  _launch_configuration:
    required: true
    help: (Required) The name of the launch configuration to use.
    type: Text
  _name:
    required: false
    help: (Optional) The name of the auto scaling group. By default generated by Terraform.
    type: Text
  _placement_group:
    required: true
    help: (Optional) The name of the placement group into which you'll launch your
      instances, if any.
    type: Text
  _suspended_processes:
    required: false
    help: (Optional) A list of processes to suspend for the AutoScaling Group. The
      allowed values are @Launch@ , @Terminate@ , @HealthCheck@ , @ReplaceUnhealthy@
      , @AZRebalance@ , @AlarmNotification@ , @ScheduledActions@ , @AddToLoadBalancer@
      . Note that if you suspend either the @Launch@ or @Terminate@ process types,
      it can prevent your autoscaling group from functioning properly.
    type: Text
  _max_size:
    required: true
    help: (Required) The maximum size of the auto scale group.
    type: Text
  _desired_capacity:
    required: false
    help: (Optional) The number of Amazon EC2 instances that should be running in
      the group. (See also <#waiting-for-capacity> below.)
    type: Text
  _availability_zones:
    required: false
    help: (Optional) A list of AZs to launch resources in. Required only if you do
      not specify any @vpc_zone_identifier@
    type: Text
  _wait_for_capacity_timeout:
    required: true
    help: ! '(Default: "10m") A maximum <https://golang.org/pkg/time/#ParseDuration>
      that Terraform should wait for ASG instances to be healthy before timing out.  (See
      also <#waiting-for-capacity> below.) Setting this to "0" causes Terraform to
      skip all Capacity Waiting behavior.'
    type: Text
  _target_group_arns:
    required: true
    help: (Optional) A list of @aws_alb_target_group@ ARNs, for use with Application
      Load Balancing
    type: Text
  _min_size:
    required: true
    help: (Required) The minimum size of the auto scale group. (See also <#waiting-for-capacity>
      below.)
    type: Text
  _name_prefix:
    required: false
    help: (Optional) Creates a unique name beginning with the specified prefix. Conflicts
      with @name@ .
    type: Text
  _vpc_zone_identifier:
    required: true
    help: (Optional) A list of subnet IDs to launch resources in.
    type: Text
  _protect_from_scale_in:
    required: true
    help: (Optional) Allows setting instance protection. The autoscaling group will
      not select instances with this setting for terminination during scale in events.
    type: Text
  _health_check_type:
    required: false
    help: (Optional) "EC2" or "ELB". Controls how health checking is done.
    type: Text
  _health_check_grace_period:
    required: false
    help: ! '(Optional, Default: 300) Time (in seconds) after instance comes into
      service before checking health.'
    type: Text
  _metrics_granularity:
    required: false
    help: (Optional) The granularity to associate with the metrics to collect. The
      only valid value is @1Minute@ . Default is @1Minute@ .
    type: Text
  _tags:
    required: true
    help: (Optional) A list of tag blocks (maps). Tags documented below.
    type: Text
  _default_cooldown:
    required: false
    help: (Optional) The amount of time, in seconds, after a scaling activity completes
      before another scaling activity can start.
    type: Text
  _load_balancers:
    required: true
    help: (Optional) A list of elastic load balancer names to add to the autoscaling
      group names.
    type: Text
attributes:
  arn:
    help: ! '- The ARN for this AutoScaling Group'
    type: Text
  min_size:
    help: ! '- The minimum size of the autoscale group'
    type: Text
  desired_capacity:
    help: -The number of Amazon EC2 instances that should be running in the group.
    type: Text
  availability_zones:
    help: ! '- The availability zones of the autoscale group.'
    type: Text
  max_size:
    help: ! '- The maximum size of the autoscale group'
    type: Text
  name:
    help: ! '- The name of the autoscale group'
    type: Text
  health_check_type:
    help: ! '- "EC2" or "ELB". Controls how health checking is done.'
    type: Text
  launch_configuration:
    help: ! '- The launch configuration of the autoscale group'
    type: Text
  health_check_grace_period:
    help: ! '- Time after instance comes into service before checking health.'
    type: Text
  id:
    help: ! '- The autoscaling group id.'
    type: Text
  target_group_arns:
    help: (Optional) list of Target Group ARNs that apply to this AutoScaling Group
    type: Text
  vpc_zone_identifier:
    help: (Optional) - The VPC zone identifier
    type: Text
  load_balancers:
    help: (Optional) The load balancer names associated with the autoscaling group.
    type: Text
  default_cooldown:
    help: ! '- Time between a scaling activity and the succeeding scaling activity.'
    type: Text
about: Provides an AutoScaling Group resource.
examples: []
