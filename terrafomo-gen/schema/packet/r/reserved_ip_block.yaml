_name: packet_reserved_ip_block
arguments:
  _project_id:
    required: true
    help: (Required) The packet project ID where to allocate the address block
    type: Text
    deprecated: false
  _quantity:
    required: true
    help: (Required) The number of allocated /32 addresses, a power of 2
    type: Text
    deprecated: false
  _facility:
    required: true
    help: (Required) The facility where to allocate the address block
    type: Text
    deprecated: false
attributes:
  facility:
    help: ! '- The facility where the addresses are'
    type: Text
  quantity:
    help: ! '- Number of /32 addresses in the block'
    type: Text
  cidr_notation:
    help: ! '- Address and mask in CIDR notation, e.g. "147.229.15.30/31"'
    type: Text
  network:
    help: ! '- Network IP address portion of the block specification'
    type: Text
  cidr:
    help: ! '- length of CIDR prefix of the block as integer'
    type: Text
  address_family:
    help: ! '- Address family as integer (4 or 6)'
    type: Text
  project_id:
    help: ! '- To which project the addresses beling'
    type: Text
  id:
    help: ! '- The unique ID of the block'
    type: Text
  netmask:
    help: ! '- Mask in decimal notation, e.g. "255.255.255.0"'
    type: Text
  public:
    help: ! '- boolean flag whether addresses from a block are public'
    type: Text
about: Provides a resource to create and manage blocks of reserved IP addresses in
  a project. When user provision first device in a facility, Packet automatically
  allocates IPv6/56 and private IPv4/25 blocks. The new device then gets IPv6 and
  private IPv4 addresses from those block. It also gets a public IPv4/31 address.
  Every new device in the project and facility will automatically get IPv6 and private
  IPv4 addresses from pre-allocated i blocks. The IPv6 and private IPv4 blocks can't
  be created, only imported. It is only possible to create public IPv4 blocks, with
  masks from /24 (256 addresses) to /32 (1 address). Once IP block is allocated or
  imported, an address from it can be assigned to device with the @packet_ip_attachment@
  resource.
examples: []
