{
    "settings": [
        {
            "arguments": [
                {
                    "default": "_groupName",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the Okta group"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"group_name\" <$> TF.attribute",
                    "name": "group_name",
                    "method": "groupName",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasGroupName",
                    "optional": false,
                    "label": "_groupName"
                },
                {
                    "default": "_policies",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Policies to associate with this group"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"policies\" <$> TF.attribute",
                    "name": "policies",
                    "method": "policies",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (TF.Attr s P.Text)]",
                    "class": "HasPolicies",
                    "optional": false,
                    "label": "_policies"
                }
            ],
            "name": "Group",
            "attributes": [],
            "parameters": [
                {
                    "default": "_groupName",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the Okta group"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"group_name\" <$> TF.attribute",
                    "name": "group_name",
                    "method": "groupName",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasGroupName",
                    "optional": false,
                    "label": "_groupName"
                },
                {
                    "default": "_policies",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Policies to associate with this group"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"policies\" <$> TF.attribute",
                    "name": "policies",
                    "method": "policies",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (TF.Attr s P.Text)]",
                    "class": "HasPolicies",
                    "optional": false,
                    "label": "_policies"
                }
            ],
            "hashable": false,
            "type": "Group s",
            "original": "group"
        },
        {
            "arguments": [
                {
                    "default": "TF.value 5",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The number of seconds to use as a connection timeout."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"connect_timeout\" <$> TF.attribute",
                    "name": "connect_timeout",
                    "method": "connectTimeout",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasConnectTimeout",
                    "optional": true,
                    "label": "_connectTimeout"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Cassandra hosts to connect to."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"hosts\" <$> TF.attribute",
                    "name": "hosts",
                    "method": "hosts",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasHosts",
                    "optional": true,
                    "label": "_hosts"
                },
                {
                    "default": "TF.value P.False",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Whether to skip verification of the server certificate when using TLS."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"insecure_tls\" <$> TF.attribute",
                    "name": "insecure_tls",
                    "method": "insecureTls",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasInsecureTls",
                    "optional": true,
                    "label": "_insecureTls"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The password to use when authenticating with Cassandra."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"password\" <$> TF.attribute",
                    "name": "password",
                    "method": "password",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPassword",
                    "optional": true,
                    "label": "_password"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Concatenated PEM blocks containing a certificate and private key; a",
                        "certificate, private key, and issuing CA certificate; or just a CA",
                        "certificate."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"pem_bundle\" <$> TF.attribute",
                    "name": "pem_bundle",
                    "method": "pemBundle",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPemBundle",
                    "optional": true,
                    "label": "_pemBundle"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Specifies JSON containing a certificate and private key; a certificate,",
                        "private key, and issuing CA certificate; or just a CA certificate."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"pem_json\" <$> TF.attribute",
                    "name": "pem_json",
                    "method": "pemJson",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPemJson",
                    "optional": true,
                    "label": "_pemJson"
                },
                {
                    "default": "TF.value 9042",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The transport port to use to connect to Cassandra."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"port\" <$> TF.attribute",
                    "name": "port",
                    "method": "port",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasPort",
                    "optional": true,
                    "label": "_port"
                },
                {
                    "default": "TF.value 2",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The CQL protocol version to use."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"protocol_version\" <$> TF.attribute",
                    "name": "protocol_version",
                    "method": "protocolVersion",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasProtocolVersion",
                    "optional": true,
                    "label": "_protocolVersion"
                },
                {
                    "default": "TF.value P.True",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Whether to use TLS when connecting to Cassandra."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"tls\" <$> TF.attribute",
                    "name": "tls",
                    "method": "tls",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasTls",
                    "optional": true,
                    "label": "_tls"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The username to use when authenticating with Cassandra."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"username\" <$> TF.attribute",
                    "name": "username",
                    "method": "username",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUsername",
                    "optional": true,
                    "label": "_username"
                }
            ],
            "name": "Cassandra",
            "attributes": [],
            "parameters": [],
            "hashable": false,
            "type": "Cassandra s",
            "original": "cassandra"
        },
        {
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Connection string to use to connect to the database."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"connection_url\" <$> TF.attribute",
                    "name": "connection_url",
                    "method": "connectionUrl",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasConnectionUrl",
                    "optional": true,
                    "label": "_connectionUrl"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Maximum number of seconds a connection may be reused."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"max_connection_lifetime\" <$> TF.attribute",
                    "name": "max_connection_lifetime",
                    "method": "maxConnectionLifetime",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasMaxConnectionLifetime",
                    "optional": true,
                    "label": "_maxConnectionLifetime"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Maximum number of idle connections to the database."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"max_idle_connections\" <$> TF.attribute",
                    "name": "max_idle_connections",
                    "method": "maxIdleConnections",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasMaxIdleConnections",
                    "optional": true,
                    "label": "_maxIdleConnections"
                },
                {
                    "default": "TF.value 2",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Maximum number of open connections to the database."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"max_open_connections\" <$> TF.attribute",
                    "name": "max_open_connections",
                    "method": "maxOpenConnections",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasMaxOpenConnections",
                    "optional": true,
                    "label": "_maxOpenConnections"
                }
            ],
            "name": "Mysql",
            "attributes": [],
            "parameters": [],
            "hashable": false,
            "type": "Mysql s",
            "original": "mysql"
        },
        {
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Connection string to use to connect to the database."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"connection_url\" <$> TF.attribute",
                    "name": "connection_url",
                    "method": "connectionUrl",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasConnectionUrl",
                    "optional": true,
                    "label": "_connectionUrl"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Maximum number of seconds a connection may be reused."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"max_connection_lifetime\" <$> TF.attribute",
                    "name": "max_connection_lifetime",
                    "method": "maxConnectionLifetime",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasMaxConnectionLifetime",
                    "optional": true,
                    "label": "_maxConnectionLifetime"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Maximum number of idle connections to the database."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"max_idle_connections\" <$> TF.attribute",
                    "name": "max_idle_connections",
                    "method": "maxIdleConnections",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasMaxIdleConnections",
                    "optional": true,
                    "label": "_maxIdleConnections"
                },
                {
                    "default": "TF.value 2",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Maximum number of open connections to the database."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"max_open_connections\" <$> TF.attribute",
                    "name": "max_open_connections",
                    "method": "maxOpenConnections",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasMaxOpenConnections",
                    "optional": true,
                    "label": "_maxOpenConnections"
                }
            ],
            "name": "Mssql",
            "attributes": [],
            "parameters": [],
            "hashable": false,
            "type": "Mssql s",
            "original": "mssql"
        },
        {
            "arguments": [
                {
                    "default": "_certFile",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Path to a file containing the client certificate."
                    ],
                    "forceNew": false,
                    "encoder": "P.Just $ TF.assign \"cert_file\"",
                    "name": "cert_file",
                    "method": "certFile",
                    "conflicts": [],
                    "type": "P.Text",
                    "class": "HasCertFile",
                    "optional": false,
                    "label": "_certFile"
                },
                {
                    "default": "_keyFile",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Path to a file containing the private key that the certificate was issued",
                        "for."
                    ],
                    "forceNew": false,
                    "encoder": "P.Just $ TF.assign \"key_file\"",
                    "name": "key_file",
                    "method": "keyFile",
                    "conflicts": [],
                    "type": "P.Text",
                    "class": "HasKeyFile",
                    "optional": false,
                    "label": "_keyFile"
                }
            ],
            "name": "ClientAuth",
            "attributes": [],
            "parameters": [
                {
                    "default": "_certFile",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Path to a file containing the client certificate."
                    ],
                    "forceNew": false,
                    "encoder": "P.Just $ TF.assign \"cert_file\"",
                    "name": "cert_file",
                    "method": "certFile",
                    "conflicts": [],
                    "type": "P.Text",
                    "class": "HasCertFile",
                    "optional": false,
                    "label": "_certFile"
                },
                {
                    "default": "_keyFile",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Path to a file containing the private key that the certificate was issued",
                        "for."
                    ],
                    "forceNew": false,
                    "encoder": "P.Just $ TF.assign \"key_file\"",
                    "name": "key_file",
                    "method": "keyFile",
                    "conflicts": [],
                    "type": "P.Text",
                    "class": "HasKeyFile",
                    "optional": false,
                    "label": "_keyFile"
                }
            ],
            "hashable": true,
            "type": "ClientAuth",
            "original": "client_auth"
        },
        {
            "arguments": [
                {
                    "default": "_groups",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Groups within the Okta auth backend to associate with this user"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"groups\" <$> TF.attribute",
                    "name": "groups",
                    "method": "groups",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (TF.Attr s P.Text)]",
                    "class": "HasGroups",
                    "optional": false,
                    "label": "_groups"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Policies to associate with this user"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"policies\" <$> TF.attribute",
                    "name": "policies",
                    "method": "policies",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (TF.Attr s P.Text)]",
                    "class": "HasPolicies",
                    "optional": true,
                    "label": "_policies"
                },
                {
                    "default": "_username",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the user within Okta"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"username\" <$> TF.attribute",
                    "name": "username",
                    "method": "username",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUsername",
                    "optional": false,
                    "label": "_username"
                }
            ],
            "name": "User",
            "attributes": [],
            "parameters": [
                {
                    "default": "_groups",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Groups within the Okta auth backend to associate with this user"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"groups\" <$> TF.attribute",
                    "name": "groups",
                    "method": "groups",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (TF.Attr s P.Text)]",
                    "class": "HasGroups",
                    "optional": false,
                    "label": "_groups"
                },
                {
                    "default": "_username",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the user within Okta"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"username\" <$> TF.attribute",
                    "name": "username",
                    "method": "username",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUsername",
                    "optional": false,
                    "label": "_username"
                }
            ],
            "hashable": false,
            "type": "User s",
            "original": "user"
        },
        {
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Connection string to use to connect to the database."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"connection_url\" <$> TF.attribute",
                    "name": "connection_url",
                    "method": "connectionUrl",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasConnectionUrl",
                    "optional": true,
                    "label": "_connectionUrl"
                }
            ],
            "name": "Mongodb",
            "attributes": [],
            "parameters": [],
            "hashable": false,
            "type": "Mongodb s",
            "original": "mongodb"
        },
        {
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Connection string to use to connect to the database."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"connection_url\" <$> TF.attribute",
                    "name": "connection_url",
                    "method": "connectionUrl",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasConnectionUrl",
                    "optional": true,
                    "label": "_connectionUrl"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Maximum number of seconds a connection may be reused."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"max_connection_lifetime\" <$> TF.attribute",
                    "name": "max_connection_lifetime",
                    "method": "maxConnectionLifetime",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasMaxConnectionLifetime",
                    "optional": true,
                    "label": "_maxConnectionLifetime"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Maximum number of idle connections to the database."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"max_idle_connections\" <$> TF.attribute",
                    "name": "max_idle_connections",
                    "method": "maxIdleConnections",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasMaxIdleConnections",
                    "optional": true,
                    "label": "_maxIdleConnections"
                },
                {
                    "default": "TF.value 2",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Maximum number of open connections to the database."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"max_open_connections\" <$> TF.attribute",
                    "name": "max_open_connections",
                    "method": "maxOpenConnections",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasMaxOpenConnections",
                    "optional": true,
                    "label": "_maxOpenConnections"
                }
            ],
            "name": "Hana",
            "attributes": [],
            "parameters": [],
            "hashable": false,
            "type": "Hana s",
            "original": "hana"
        },
        {
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Connection string to use to connect to the database."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"connection_url\" <$> TF.attribute",
                    "name": "connection_url",
                    "method": "connectionUrl",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasConnectionUrl",
                    "optional": true,
                    "label": "_connectionUrl"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Maximum number of seconds a connection may be reused."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"max_connection_lifetime\" <$> TF.attribute",
                    "name": "max_connection_lifetime",
                    "method": "maxConnectionLifetime",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasMaxConnectionLifetime",
                    "optional": true,
                    "label": "_maxConnectionLifetime"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Maximum number of idle connections to the database."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"max_idle_connections\" <$> TF.attribute",
                    "name": "max_idle_connections",
                    "method": "maxIdleConnections",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasMaxIdleConnections",
                    "optional": true,
                    "label": "_maxIdleConnections"
                },
                {
                    "default": "TF.value 2",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Maximum number of open connections to the database."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"max_open_connections\" <$> TF.attribute",
                    "name": "max_open_connections",
                    "method": "maxOpenConnections",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasMaxOpenConnections",
                    "optional": true,
                    "label": "_maxOpenConnections"
                }
            ],
            "name": "Oracle",
            "attributes": [],
            "parameters": [],
            "hashable": false,
            "type": "Oracle s",
            "original": "oracle"
        },
        {
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Connection string to use to connect to the database."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"connection_url\" <$> TF.attribute",
                    "name": "connection_url",
                    "method": "connectionUrl",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasConnectionUrl",
                    "optional": true,
                    "label": "_connectionUrl"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Maximum number of seconds a connection may be reused."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"max_connection_lifetime\" <$> TF.attribute",
                    "name": "max_connection_lifetime",
                    "method": "maxConnectionLifetime",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasMaxConnectionLifetime",
                    "optional": true,
                    "label": "_maxConnectionLifetime"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Maximum number of idle connections to the database."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"max_idle_connections\" <$> TF.attribute",
                    "name": "max_idle_connections",
                    "method": "maxIdleConnections",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasMaxIdleConnections",
                    "optional": true,
                    "label": "_maxIdleConnections"
                },
                {
                    "default": "TF.value 2",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Maximum number of open connections to the database."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"max_open_connections\" <$> TF.attribute",
                    "name": "max_open_connections",
                    "method": "maxOpenConnections",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasMaxOpenConnections",
                    "optional": true,
                    "label": "_maxOpenConnections"
                }
            ],
            "name": "Postgresql",
            "attributes": [],
            "parameters": [],
            "hashable": false,
            "type": "Postgresql s",
            "original": "postgresql"
        }
    ],
    "arguments": [
        {
            "default": "_address",
            "computed": false,
            "required": true,
            "help": [
                "URL of the root of the target Vault server."
            ],
            "forceNew": false,
            "encoder": "P.Just $ TF.assign \"address\"",
            "name": "address",
            "method": "address",
            "conflicts": [],
            "type": "P.Text",
            "class": "HasAddress",
            "optional": false,
            "label": "_address"
        },
        {
            "default": "P.Nothing",
            "computed": false,
            "required": false,
            "help": [
                "Path to directory containing CA certificate files to validate the server's",
                "certificate."
            ],
            "forceNew": false,
            "encoder": "TF.assign \"ca_cert_dir\" <$>",
            "name": "ca_cert_dir",
            "method": "caCertDir",
            "conflicts": [],
            "type": "P.Maybe P.Text",
            "class": "HasCaCertDir",
            "optional": true,
            "label": "_caCertDir"
        },
        {
            "default": "P.Nothing",
            "computed": false,
            "required": false,
            "help": [
                "Path to a CA certificate file to validate the server's certificate."
            ],
            "forceNew": false,
            "encoder": "TF.assign \"ca_cert_file\" <$>",
            "name": "ca_cert_file",
            "method": "caCertFile",
            "conflicts": [],
            "type": "P.Maybe P.Text",
            "class": "HasCaCertFile",
            "optional": true,
            "label": "_caCertFile"
        },
        {
            "default": "P.Nothing",
            "computed": false,
            "required": false,
            "help": [
                "Client authentication credentials."
            ],
            "forceNew": false,
            "encoder": "TF.assign \"client_auth\" <$>",
            "name": "client_auth",
            "method": "clientAuth",
            "conflicts": [],
            "type": "P.Maybe [ClientAuth]",
            "class": "HasClientAuth",
            "optional": true,
            "label": "_clientAuth"
        },
        {
            "default": "P.Nothing",
            "computed": false,
            "required": false,
            "help": [
                "Maximum TTL for secret leases requested by this provider"
            ],
            "forceNew": false,
            "encoder": "TF.assign \"max_lease_ttl_seconds\" <$>",
            "name": "max_lease_ttl_seconds",
            "method": "maxLeaseTtlSeconds",
            "conflicts": [],
            "type": "P.Maybe P.Integer",
            "class": "HasMaxLeaseTtlSeconds",
            "optional": true,
            "label": "_maxLeaseTtlSeconds"
        },
        {
            "default": "P.Nothing",
            "computed": false,
            "required": false,
            "help": [
                "Set this to true only if the target Vault server is an insecure development",
                "instance."
            ],
            "forceNew": false,
            "encoder": "TF.assign \"skip_tls_verify\" <$>",
            "name": "skip_tls_verify",
            "method": "skipTlsVerify",
            "conflicts": [],
            "type": "P.Maybe P.Bool",
            "class": "HasSkipTlsVerify",
            "optional": true,
            "label": "_skipTlsVerify"
        },
        {
            "default": "_token",
            "computed": false,
            "required": true,
            "help": [
                "Token to use to authenticate to Vault."
            ],
            "forceNew": false,
            "encoder": "P.Just $ TF.assign \"token\"",
            "name": "token",
            "method": "token",
            "conflicts": [],
            "type": "P.Text",
            "class": "HasToken",
            "optional": false,
            "label": "_token"
        }
    ],
    "dataSources": [
        {
            "arguments": [
                {
                    "default": "TF.value \"approle\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Unique name of the auth backend to configure."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"backend\" <$> TF.attribute",
                    "name": "backend",
                    "method": "backend",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasBackend",
                    "optional": true,
                    "label": "_backend"
                },
                {
                    "default": "_roleName",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the role."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"role_name\" <$> TF.attribute",
                    "name": "role_name",
                    "method": "roleName",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasRoleName",
                    "optional": false,
                    "label": "_roleName"
                }
            ],
            "schema": "DataSource",
            "name": "ApproleAuthBackendRoleIdData",
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "The RoleID of the role."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"role_id\" <$> TF.attribute",
                    "name": "role_id",
                    "method": "computedRoleId",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedRoleId",
                    "optional": false,
                    "label": "_computedRoleId"
                }
            ],
            "parameters": [
                {
                    "default": "_roleName",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the role."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"role_name\" <$> TF.attribute",
                    "name": "role_name",
                    "method": "roleName",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasRoleName",
                    "optional": false,
                    "label": "_roleName"
                }
            ],
            "type": "ApproleAuthBackendRoleIdData s",
            "original": "vault_approle_auth_backend_role_id"
        },
        {
            "arguments": [
                {
                    "default": "_backend",
                    "computed": false,
                    "required": true,
                    "help": [
                        "AWS Secret Backend to read credentials from."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"backend\" <$> TF.attribute",
                    "name": "backend",
                    "method": "backend",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasBackend",
                    "optional": false,
                    "label": "_backend"
                },
                {
                    "default": "_role",
                    "computed": false,
                    "required": true,
                    "help": [
                        "AWS Secret Role to read credentials from."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"role\" <$> TF.attribute",
                    "name": "role",
                    "method": "role",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasRole",
                    "optional": false,
                    "label": "_role"
                },
                {
                    "default": "TF.value \"creds\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Type of credentials to read. Must be either 'creds' for Access Key and",
                        "Secret Key, or 'sts' for STS."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "type",
                    "method": "type'",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasType'",
                    "optional": true,
                    "label": "_type'"
                }
            ],
            "schema": "DataSource",
            "name": "AwsAccessCredentialsData",
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "AWS access key ID read from Vault."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"access_key\" <$> TF.attribute",
                    "name": "access_key",
                    "method": "computedAccessKey",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedAccessKey",
                    "optional": false,
                    "label": "_computedAccessKey"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Lease duration in seconds relative to the time in lease_start_time."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"lease_duration\" <$> TF.attribute",
                    "name": "lease_duration",
                    "method": "computedLeaseDuration",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasComputedLeaseDuration",
                    "optional": false,
                    "label": "_computedLeaseDuration"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Lease identifier assigned by vault."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"lease_id\" <$> TF.attribute",
                    "name": "lease_id",
                    "method": "computedLeaseId",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedLeaseId",
                    "optional": false,
                    "label": "_computedLeaseId"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "True if the duration of this lease can be extended through renewal."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"lease_renewable\" <$> TF.attribute",
                    "name": "lease_renewable",
                    "method": "computedLeaseRenewable",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasComputedLeaseRenewable",
                    "optional": false,
                    "label": "_computedLeaseRenewable"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Time at which the lease was read, using the clock of the system where",
                        "Terraform was running"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"lease_start_time\" <$> TF.attribute",
                    "name": "lease_start_time",
                    "method": "computedLeaseStartTime",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedLeaseStartTime",
                    "optional": false,
                    "label": "_computedLeaseStartTime"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "AWS secret key read from Vault."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"secret_key\" <$> TF.attribute",
                    "name": "secret_key",
                    "method": "computedSecretKey",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedSecretKey",
                    "optional": false,
                    "label": "_computedSecretKey"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "AWS security token read from Vault. (Only returned if type is 'sts'.)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"security_token\" <$> TF.attribute",
                    "name": "security_token",
                    "method": "computedSecurityToken",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedSecurityToken",
                    "optional": false,
                    "label": "_computedSecurityToken"
                }
            ],
            "parameters": [
                {
                    "default": "_backend",
                    "computed": false,
                    "required": true,
                    "help": [
                        "AWS Secret Backend to read credentials from."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"backend\" <$> TF.attribute",
                    "name": "backend",
                    "method": "backend",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasBackend",
                    "optional": false,
                    "label": "_backend"
                },
                {
                    "default": "_role",
                    "computed": false,
                    "required": true,
                    "help": [
                        "AWS Secret Role to read credentials from."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"role\" <$> TF.attribute",
                    "name": "role",
                    "method": "role",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasRole",
                    "optional": false,
                    "label": "_role"
                }
            ],
            "type": "AwsAccessCredentialsData s",
            "original": "vault_aws_access_credentials"
        },
        {
            "arguments": [
                {
                    "default": "_path",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Full path from which a secret will be read."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"path\" <$> TF.attribute",
                    "name": "path",
                    "method": "path",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPath",
                    "optional": false,
                    "label": "_path"
                }
            ],
            "schema": "DataSource",
            "name": "GenericSecretData",
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Map of strings read from Vault."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"data\" <$> TF.attribute",
                    "name": "data",
                    "method": "computedData'",
                    "conflicts": [],
                    "type": "TF.Attr s (P.HashMap P.Text (TF.Attr s P.Text))",
                    "class": "HasComputedData'",
                    "optional": false,
                    "label": "_computedData'"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "JSON-encoded secret data read from Vault."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"data_json\" <$> TF.attribute",
                    "name": "data_json",
                    "method": "computedDataJson",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedDataJson",
                    "optional": false,
                    "label": "_computedDataJson"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Lease duration in seconds relative to the time in lease_start_time."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"lease_duration\" <$> TF.attribute",
                    "name": "lease_duration",
                    "method": "computedLeaseDuration",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasComputedLeaseDuration",
                    "optional": false,
                    "label": "_computedLeaseDuration"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Lease identifier assigned by vault."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"lease_id\" <$> TF.attribute",
                    "name": "lease_id",
                    "method": "computedLeaseId",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedLeaseId",
                    "optional": false,
                    "label": "_computedLeaseId"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "True if the duration of this lease can be extended through renewal."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"lease_renewable\" <$> TF.attribute",
                    "name": "lease_renewable",
                    "method": "computedLeaseRenewable",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasComputedLeaseRenewable",
                    "optional": false,
                    "label": "_computedLeaseRenewable"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Time at which the lease was read, using the clock of the system where",
                        "Terraform was running"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"lease_start_time\" <$> TF.attribute",
                    "name": "lease_start_time",
                    "method": "computedLeaseStartTime",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedLeaseStartTime",
                    "optional": false,
                    "label": "_computedLeaseStartTime"
                }
            ],
            "parameters": [
                {
                    "default": "_path",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Full path from which a secret will be read."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"path\" <$> TF.attribute",
                    "name": "path",
                    "method": "path",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPath",
                    "optional": false,
                    "label": "_path"
                }
            ],
            "type": "GenericSecretData s",
            "original": "vault_generic_secret"
        }
    ],
    "resources": [
        {
            "arguments": [
                {
                    "default": "TF.value \"approle\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Unique name of the auth backend to configure."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"backend\" <$> TF.attribute",
                    "name": "backend",
                    "method": "backend",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasBackend",
                    "optional": true,
                    "label": "_backend"
                },
                {
                    "default": "_roleId",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The RoleID to log in with."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"role_id\" <$> TF.attribute",
                    "name": "role_id",
                    "method": "roleId",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasRoleId",
                    "optional": false,
                    "label": "_roleId"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The SecretID to log in with."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"secret_id\" <$> TF.attribute",
                    "name": "secret_id",
                    "method": "secretId",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasSecretId",
                    "optional": true,
                    "label": "_secretId"
                }
            ],
            "schema": "Resource",
            "name": "ApproleAuthBackendLoginResource",
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "The accessor for the token."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"accessor\" <$> TF.attribute",
                    "name": "accessor",
                    "method": "computedAccessor",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedAccessor",
                    "optional": false,
                    "label": "_computedAccessor"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "The token."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"client_token\" <$> TF.attribute",
                    "name": "client_token",
                    "method": "computedClientToken",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedClientToken",
                    "optional": false,
                    "label": "_computedClientToken"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "How long the token is valid for."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"lease_duration\" <$> TF.attribute",
                    "name": "lease_duration",
                    "method": "computedLeaseDuration",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasComputedLeaseDuration",
                    "optional": false,
                    "label": "_computedLeaseDuration"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "The timestamp the lease started on, as determined by the machine running",
                        "Terraform."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"lease_started\" <$> TF.attribute",
                    "name": "lease_started",
                    "method": "computedLeaseStarted",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedLeaseStarted",
                    "optional": false,
                    "label": "_computedLeaseStarted"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Metadata associated with the token."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"metadata\" <$> TF.attribute",
                    "name": "metadata",
                    "method": "computedMetadata",
                    "conflicts": [],
                    "type": "TF.Attr s (P.HashMap P.Text (TF.Attr s P.Text))",
                    "class": "HasComputedMetadata",
                    "optional": false,
                    "label": "_computedMetadata"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Policies set on the token."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"policies\" <$> TF.attribute",
                    "name": "policies",
                    "method": "computedPolicies",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasComputedPolicies",
                    "optional": false,
                    "label": "_computedPolicies"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Whether the token is renewable or not."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"renewable\" <$> TF.attribute",
                    "name": "renewable",
                    "method": "computedRenewable",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasComputedRenewable",
                    "optional": false,
                    "label": "_computedRenewable"
                }
            ],
            "parameters": [
                {
                    "default": "_roleId",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The RoleID to log in with."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"role_id\" <$> TF.attribute",
                    "name": "role_id",
                    "method": "roleId",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasRoleId",
                    "optional": false,
                    "label": "_roleId"
                }
            ],
            "type": "ApproleAuthBackendLoginResource s",
            "original": "vault_approle_auth_backend_login"
        },
        {
            "arguments": [
                {
                    "default": "TF.value \"approle\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Unique name of the auth backend to configure."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"backend\" <$> TF.attribute",
                    "name": "backend",
                    "method": "backend",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasBackend",
                    "optional": true,
                    "label": "_backend"
                },
                {
                    "default": "TF.value P.True",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Whether or not to require secret_id to be present when logging in using this",
                        "AppRole."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"bind_secret_id\" <$> TF.attribute",
                    "name": "bind_secret_id",
                    "method": "bindSecretId",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasBindSecretId",
                    "optional": true,
                    "label": "_bindSecretId"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "List of CIDR blocks that can log in using the AppRole."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"bound_cidr_list\" <$> TF.attribute",
                    "name": "bound_cidr_list",
                    "method": "boundCidrList",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (TF.Attr s P.Text)]",
                    "class": "HasBoundCidrList",
                    "optional": true,
                    "label": "_boundCidrList"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Number of seconds to set the TTL to for issued tokens upon renewal. Makes",
                        "the token a periodic token, which will never expire as long as it is renewed",
                        "before the TTL each period."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"period\" <$> TF.attribute",
                    "name": "period",
                    "method": "period",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasPeriod",
                    "optional": true,
                    "label": "_period"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Policies to be set on tokens issued using this AppRole."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"policies\" <$> TF.attribute",
                    "name": "policies",
                    "method": "policies",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (TF.Attr s P.Text)]",
                    "class": "HasPolicies",
                    "optional": true,
                    "label": "_policies"
                },
                {
                    "default": "_roleName",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the role."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"role_name\" <$> TF.attribute",
                    "name": "role_name",
                    "method": "roleName",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasRoleName",
                    "optional": false,
                    "label": "_roleName"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Number of times which a particular SecretID can be used to fetch a token",
                        "from this AppRole, after which the SecretID will expire. Leaving this unset",
                        "or setting it to 0 will allow unlimited uses."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"secret_id_num_uses\" <$> TF.attribute",
                    "name": "secret_id_num_uses",
                    "method": "secretIdNumUses",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasSecretIdNumUses",
                    "optional": true,
                    "label": "_secretIdNumUses"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Number of seconds a SecretID remains valid for."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"secret_id_ttl\" <$> TF.attribute",
                    "name": "secret_id_ttl",
                    "method": "secretIdTtl",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasSecretIdTtl",
                    "optional": true,
                    "label": "_secretIdTtl"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Number of seconds after which issued tokens can no longer be renewed."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"token_max_ttl\" <$> TF.attribute",
                    "name": "token_max_ttl",
                    "method": "tokenMaxTtl",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasTokenMaxTtl",
                    "optional": true,
                    "label": "_tokenMaxTtl"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Number of times issued tokens can be used. Setting this to 0 or leaving it",
                        "unset means unlimited uses."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"token_num_uses\" <$> TF.attribute",
                    "name": "token_num_uses",
                    "method": "tokenNumUses",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasTokenNumUses",
                    "optional": true,
                    "label": "_tokenNumUses"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Default number of seconds to set as the TTL for issued tokens and at renewal",
                        "time."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"token_ttl\" <$> TF.attribute",
                    "name": "token_ttl",
                    "method": "tokenTtl",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasTokenTtl",
                    "optional": true,
                    "label": "_tokenTtl"
                }
            ],
            "schema": "Resource",
            "name": "ApproleAuthBackendRoleResource",
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "The RoleID of the role. Autogenerated if not set."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"role_id\" <$> TF.attribute",
                    "name": "role_id",
                    "method": "computedRoleId",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedRoleId",
                    "optional": true,
                    "label": "_computedRoleId"
                }
            ],
            "parameters": [
                {
                    "default": "_roleName",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the role."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"role_name\" <$> TF.attribute",
                    "name": "role_name",
                    "method": "roleName",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasRoleName",
                    "optional": false,
                    "label": "_roleName"
                }
            ],
            "type": "ApproleAuthBackendRoleResource s",
            "original": "vault_approle_auth_backend_role"
        },
        {
            "arguments": [
                {
                    "default": "TF.value \"approle\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Unique name of the auth backend to configure."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"backend\" <$> TF.attribute",
                    "name": "backend",
                    "method": "backend",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasBackend",
                    "optional": true,
                    "label": "_backend"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "List of CIDR blocks that can log in using the SecretID."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"cidr_list\" <$> TF.attribute",
                    "name": "cidr_list",
                    "method": "cidrList",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (TF.Attr s P.Text)]",
                    "class": "HasCidrList",
                    "optional": true,
                    "label": "_cidrList"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "JSON-encoded secret data to write."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"metadata\" <$> TF.attribute",
                    "name": "metadata",
                    "method": "metadata",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMetadata",
                    "optional": true,
                    "label": "_metadata"
                },
                {
                    "default": "_roleName",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the role."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"role_name\" <$> TF.attribute",
                    "name": "role_name",
                    "method": "roleName",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasRoleName",
                    "optional": false,
                    "label": "_roleName"
                }
            ],
            "schema": "Resource",
            "name": "ApproleAuthBackendRoleSecretIdResource",
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "The unique ID used to access this SecretID."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"accessor\" <$> TF.attribute",
                    "name": "accessor",
                    "method": "computedAccessor",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedAccessor",
                    "optional": false,
                    "label": "_computedAccessor"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "The SecretID to be managed. If not specified, Vault auto-generates one."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"secret_id\" <$> TF.attribute",
                    "name": "secret_id",
                    "method": "computedSecretId",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedSecretId",
                    "optional": true,
                    "label": "_computedSecretId"
                }
            ],
            "parameters": [
                {
                    "default": "_roleName",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the role."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"role_name\" <$> TF.attribute",
                    "name": "role_name",
                    "method": "roleName",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasRoleName",
                    "optional": false,
                    "label": "_roleName"
                }
            ],
            "type": "ApproleAuthBackendRoleSecretIdResource s",
            "original": "vault_approle_auth_backend_role_secret_id"
        },
        {
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The description of the auth backend"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"description\" <$> TF.attribute",
                    "name": "description",
                    "method": "description",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDescription",
                    "optional": true,
                    "label": "_description"
                },
                {
                    "default": "_type'",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the auth backend"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "type",
                    "method": "type'",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasType'",
                    "optional": false,
                    "label": "_type'"
                }
            ],
            "schema": "Resource",
            "name": "AuthBackendResource",
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Path to mount the backend. This defaults to the type."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"path\" <$> TF.attribute",
                    "name": "path",
                    "method": "computedPath",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedPath",
                    "optional": true,
                    "label": "_computedPath"
                }
            ],
            "parameters": [
                {
                    "default": "_type'",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the auth backend"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "type",
                    "method": "type'",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasType'",
                    "optional": false,
                    "label": "_type'"
                }
            ],
            "type": "AuthBackendResource s",
            "original": "vault_auth_backend"
        },
        {
            "arguments": [
                {
                    "default": "_awsPublicCert",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Base64 encoded AWS Public key required to verify PKCS7 signature of the EC2",
                        "instance metadata."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"aws_public_cert\" <$> TF.attribute",
                    "name": "aws_public_cert",
                    "method": "awsPublicCert",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAwsPublicCert",
                    "optional": false,
                    "label": "_awsPublicCert"
                },
                {
                    "default": "TF.value \"aws\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Unique name of the auth backend to configure."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"backend\" <$> TF.attribute",
                    "name": "backend",
                    "method": "backend",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasBackend",
                    "optional": true,
                    "label": "_backend"
                },
                {
                    "default": "_certName",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the certificate to configure."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"cert_name\" <$> TF.attribute",
                    "name": "cert_name",
                    "method": "certName",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCertName",
                    "optional": false,
                    "label": "_certName"
                },
                {
                    "default": "TF.value \"pkcs7\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The type of document that can be verified using the certificate. Must be",
                        "either \"pkcs7\" or \"identity\"."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "type",
                    "method": "type'",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasType'",
                    "optional": true,
                    "label": "_type'"
                }
            ],
            "schema": "Resource",
            "name": "AwsAuthBackendCertResource",
            "attributes": [],
            "parameters": [
                {
                    "default": "_awsPublicCert",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Base64 encoded AWS Public key required to verify PKCS7 signature of the EC2",
                        "instance metadata."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"aws_public_cert\" <$> TF.attribute",
                    "name": "aws_public_cert",
                    "method": "awsPublicCert",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAwsPublicCert",
                    "optional": false,
                    "label": "_awsPublicCert"
                },
                {
                    "default": "_certName",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the certificate to configure."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"cert_name\" <$> TF.attribute",
                    "name": "cert_name",
                    "method": "certName",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCertName",
                    "optional": false,
                    "label": "_certName"
                }
            ],
            "type": "AwsAuthBackendCertResource s",
            "original": "vault_aws_auth_backend_cert"
        },
        {
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "AWS Access key with permissions to query AWS APIs."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"access_key\" <$> TF.attribute",
                    "name": "access_key",
                    "method": "accessKey",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAccessKey",
                    "optional": true,
                    "label": "_accessKey"
                },
                {
                    "default": "TF.value \"aws\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Unique name of the auth backend to configure."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"backend\" <$> TF.attribute",
                    "name": "backend",
                    "method": "backend",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasBackend",
                    "optional": true,
                    "label": "_backend"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "URL to override the default generated endpoint for making AWS EC2 API calls."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"ec2_endpoint\" <$> TF.attribute",
                    "name": "ec2_endpoint",
                    "method": "ec2Endpoint",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasEc2Endpoint",
                    "optional": true,
                    "label": "_ec2Endpoint"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "URL to override the default generated endpoint for making AWS IAM API calls."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"iam_endpoint\" <$> TF.attribute",
                    "name": "iam_endpoint",
                    "method": "iamEndpoint",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasIamEndpoint",
                    "optional": true,
                    "label": "_iamEndpoint"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The value to require in the X-Vault-AWS-IAM-Server-ID header as part of",
                        "GetCallerIdentity requests that are used in the iam auth method."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"iam_server_id_header_value\" <$> TF.attribute",
                    "name": "iam_server_id_header_value",
                    "method": "iamServerIdHeaderValue",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasIamServerIdHeaderValue",
                    "optional": true,
                    "label": "_iamServerIdHeaderValue"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "AWS Secret key with permissions to query AWS APIs."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"secret_key\" <$> TF.attribute",
                    "name": "secret_key",
                    "method": "secretKey",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasSecretKey",
                    "optional": true,
                    "label": "_secretKey"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "URL to override the default generated endpoint for making AWS STS API calls."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"sts_endpoint\" <$> TF.attribute",
                    "name": "sts_endpoint",
                    "method": "stsEndpoint",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasStsEndpoint",
                    "optional": true,
                    "label": "_stsEndpoint"
                }
            ],
            "schema": "Resource",
            "name": "AwsAuthBackendClientResource",
            "attributes": [],
            "parameters": [],
            "type": "AwsAuthBackendClientResource s",
            "original": "vault_aws_auth_backend_client"
        },
        {
            "arguments": [
                {
                    "default": "TF.value \"aws\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Unique name of the auth backend to configure."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"backend\" <$> TF.attribute",
                    "name": "backend",
                    "method": "backend",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasBackend",
                    "optional": true,
                    "label": "_backend"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "If true, disables the periodic tidying of the identiy whitelist entries."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"disable_periodic_tidy\" <$> TF.attribute",
                    "name": "disable_periodic_tidy",
                    "method": "disablePeriodicTidy",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasDisablePeriodicTidy",
                    "optional": true,
                    "label": "_disablePeriodicTidy"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The amount of extra time that must have passed beyond the roletag",
                        "expiration, before it's removed from backend storage."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"safety_buffer\" <$> TF.attribute",
                    "name": "safety_buffer",
                    "method": "safetyBuffer",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasSafetyBuffer",
                    "optional": true,
                    "label": "_safetyBuffer"
                }
            ],
            "schema": "Resource",
            "name": "AwsAuthBackendIdentityWhitelistResource",
            "attributes": [],
            "parameters": [],
            "type": "AwsAuthBackendIdentityWhitelistResource s",
            "original": "vault_aws_auth_backend_identity_whitelist"
        },
        {
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "AWS Auth Backend to read the token from."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"backend\" <$> TF.attribute",
                    "name": "backend",
                    "method": "backend",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasBackend",
                    "optional": true,
                    "label": "_backend"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The HTTP method used in the signed request."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"iam_http_request_method\" <$> TF.attribute",
                    "name": "iam_http_request_method",
                    "method": "iamHttpRequestMethod",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasIamHttpRequestMethod",
                    "optional": true,
                    "label": "_iamHttpRequestMethod"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The Base64-encoded body of the signed request."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"iam_request_body\" <$> TF.attribute",
                    "name": "iam_request_body",
                    "method": "iamRequestBody",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasIamRequestBody",
                    "optional": true,
                    "label": "_iamRequestBody"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The Base64-encoded, JSON serialized representation of the",
                        "sts:GetCallerIdentity HTTP request headers."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"iam_request_headers\" <$> TF.attribute",
                    "name": "iam_request_headers",
                    "method": "iamRequestHeaders",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasIamRequestHeaders",
                    "optional": true,
                    "label": "_iamRequestHeaders"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The Base64-encoded HTTP URL used in the signed request."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"iam_request_url\" <$> TF.attribute",
                    "name": "iam_request_url",
                    "method": "iamRequestUrl",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasIamRequestUrl",
                    "optional": true,
                    "label": "_iamRequestUrl"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Base64-encoded EC2 instance identity document to authenticate with."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"identity\" <$> TF.attribute",
                    "name": "identity",
                    "method": "identity",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasIdentity",
                    "optional": true,
                    "label": "_identity"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "PKCS7 signature of the identity document to authenticate with, with all",
                        "newline characters removed."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"pkcs7\" <$> TF.attribute",
                    "name": "pkcs7",
                    "method": "pkcs7",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPkcs7",
                    "optional": true,
                    "label": "_pkcs7"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Base64-encoded SHA256 RSA signature of the instance identtiy document to",
                        "authenticate with."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"signature\" <$> TF.attribute",
                    "name": "signature",
                    "method": "signature",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasSignature",
                    "optional": true,
                    "label": "_signature"
                }
            ],
            "schema": "Resource",
            "name": "AwsAuthBackendLoginResource",
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "The accessor returned from Vault for this token."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"accessor\" <$> TF.attribute",
                    "name": "accessor",
                    "method": "computedAccessor",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedAccessor",
                    "optional": false,
                    "label": "_computedAccessor"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "The auth method used to generate this token."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"auth_type\" <$> TF.attribute",
                    "name": "auth_type",
                    "method": "computedAuthType",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedAuthType",
                    "optional": false,
                    "label": "_computedAuthType"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "The token returned by Vault."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"client_token\" <$> TF.attribute",
                    "name": "client_token",
                    "method": "computedClientToken",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedClientToken",
                    "optional": false,
                    "label": "_computedClientToken"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Lease duration in seconds relative to the time in lease_start_time."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"lease_duration\" <$> TF.attribute",
                    "name": "lease_duration",
                    "method": "computedLeaseDuration",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasComputedLeaseDuration",
                    "optional": false,
                    "label": "_computedLeaseDuration"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Time at which the lease was read, using the clock of the system where",
                        "Terraform was running"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"lease_start_time\" <$> TF.attribute",
                    "name": "lease_start_time",
                    "method": "computedLeaseStartTime",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedLeaseStartTime",
                    "optional": false,
                    "label": "_computedLeaseStartTime"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "The metadata reported by the Vault server."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"metadata\" <$> TF.attribute",
                    "name": "metadata",
                    "method": "computedMetadata",
                    "conflicts": [],
                    "type": "TF.Attr s (P.HashMap P.Text (TF.Attr s P.Text))",
                    "class": "HasComputedMetadata",
                    "optional": false,
                    "label": "_computedMetadata"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "The nonce to be used for subsequent login requests."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"nonce\" <$> TF.attribute",
                    "name": "nonce",
                    "method": "computedNonce",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedNonce",
                    "optional": true,
                    "label": "_computedNonce"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "The policies assigned to this token."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"policies\" <$> TF.attribute",
                    "name": "policies",
                    "method": "computedPolicies",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasComputedPolicies",
                    "optional": false,
                    "label": "_computedPolicies"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "True if the duration of this lease can be extended through renewal."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"renewable\" <$> TF.attribute",
                    "name": "renewable",
                    "method": "computedRenewable",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasComputedRenewable",
                    "optional": false,
                    "label": "_computedRenewable"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "AWS Auth Role to read the token from."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"role\" <$> TF.attribute",
                    "name": "role",
                    "method": "computedRole",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedRole",
                    "optional": true,
                    "label": "_computedRole"
                }
            ],
            "parameters": [],
            "type": "AwsAuthBackendLoginResource s",
            "original": "vault_aws_auth_backend_login"
        },
        {
            "arguments": [
                {
                    "default": "TF.value \"iam\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The auth type permitted for this role."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"auth_type\" <$> TF.attribute",
                    "name": "auth_type",
                    "method": "authType",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAuthType",
                    "optional": true,
                    "label": "_authType"
                },
                {
                    "default": "TF.value \"aws\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Unique name of the auth backend to configure."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"backend\" <$> TF.attribute",
                    "name": "backend",
                    "method": "backend",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasBackend",
                    "optional": true,
                    "label": "_backend"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Only EC2 instances with this account ID in their identity document will be",
                        "permitted to log in."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"bound_account_id\" <$> TF.attribute",
                    "name": "bound_account_id",
                    "method": "boundAccountId",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasBoundAccountId",
                    "optional": true,
                    "label": "_boundAccountId"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Only EC2 instances using this AMI ID will be permitted to log in."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"bound_ami_id\" <$> TF.attribute",
                    "name": "bound_ami_id",
                    "method": "boundAmiId",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasBoundAmiId",
                    "optional": true,
                    "label": "_boundAmiId"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Only EC2 instances associated with an IAM instance profile ARN that matches",
                        "this value will be permitted to log in."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"bound_iam_instance_profile_arn\" <$> TF.attribute",
                    "name": "bound_iam_instance_profile_arn",
                    "method": "boundIamInstanceProfileArn",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasBoundIamInstanceProfileArn",
                    "optional": true,
                    "label": "_boundIamInstanceProfileArn"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The IAM principal that must be authenticated using the iam auth method."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"bound_iam_principal_arn\" <$> TF.attribute",
                    "name": "bound_iam_principal_arn",
                    "method": "boundIamPrincipalArn",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasBoundIamPrincipalArn",
                    "optional": true,
                    "label": "_boundIamPrincipalArn"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Only EC2 instances that match this IAM role ARN will be permitted to log in."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"bound_iam_role_arn\" <$> TF.attribute",
                    "name": "bound_iam_role_arn",
                    "method": "boundIamRoleArn",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasBoundIamRoleArn",
                    "optional": true,
                    "label": "_boundIamRoleArn"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Only EC2 instances in this region will be permitted to log in."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"bound_region\" <$> TF.attribute",
                    "name": "bound_region",
                    "method": "boundRegion",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasBoundRegion",
                    "optional": true,
                    "label": "_boundRegion"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Only EC2 instances associated with this subnet ID will be permitted to log",
                        "in."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"bound_subnet_id\" <$> TF.attribute",
                    "name": "bound_subnet_id",
                    "method": "boundSubnetId",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasBoundSubnetId",
                    "optional": true,
                    "label": "_boundSubnetId"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Only EC2 instances associated with this VPC ID will be permitted to log in."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"bound_vpc_id\" <$> TF.attribute",
                    "name": "bound_vpc_id",
                    "method": "boundVpcId",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasBoundVpcId",
                    "optional": true,
                    "label": "_boundVpcId"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "When true, only allows a single token to be granted per instance ID."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"disallow_reauthentication\" <$> TF.attribute",
                    "name": "disallow_reauthentication",
                    "method": "disallowReauthentication",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasDisallowReauthentication",
                    "optional": true,
                    "label": "_disallowReauthentication"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The region to search for the inferred entities in."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"inferred_aws_region\" <$> TF.attribute",
                    "name": "inferred_aws_region",
                    "method": "inferredAwsRegion",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasInferredAwsRegion",
                    "optional": true,
                    "label": "_inferredAwsRegion"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The type of inferencing Vault should do."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"inferred_entity_type\" <$> TF.attribute",
                    "name": "inferred_entity_type",
                    "method": "inferredEntityType",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasInferredEntityType",
                    "optional": true,
                    "label": "_inferredEntityType"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The maximum allowed lifetime of tokens issued using this role."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"max_ttl\" <$> TF.attribute",
                    "name": "max_ttl",
                    "method": "maxTtl",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasMaxTtl",
                    "optional": true,
                    "label": "_maxTtl"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The duration in which a token should be renewed. At each renewal, the",
                        "token's TTL will be set to the value of this parameter."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"period\" <$> TF.attribute",
                    "name": "period",
                    "method": "period",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasPeriod",
                    "optional": true,
                    "label": "_period"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Policies to be set on tokens issued using this role."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"policies\" <$> TF.attribute",
                    "name": "policies",
                    "method": "policies",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasPolicies",
                    "optional": true,
                    "label": "_policies"
                },
                {
                    "default": "_role",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the role."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"role\" <$> TF.attribute",
                    "name": "role",
                    "method": "role",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasRole",
                    "optional": false,
                    "label": "_role"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The key of the tag on EC2 instance to use for role tags."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"role_tag\" <$> TF.attribute",
                    "name": "role_tag",
                    "method": "roleTag",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasRoleTag",
                    "optional": true,
                    "label": "_roleTag"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The TTL period of tokens issued using this role, provided as the number of",
                        "minutes."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"ttl\" <$> TF.attribute",
                    "name": "ttl",
                    "method": "ttl",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasTtl",
                    "optional": true,
                    "label": "_ttl"
                }
            ],
            "schema": "Resource",
            "name": "AwsAuthBackendRoleResource",
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "When true, allows migration of the underlying instance where the client",
                        "resides. Use with caution."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"allow_instance_migration\" <$> TF.attribute",
                    "name": "allow_instance_migration",
                    "method": "computedAllowInstanceMigration",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasComputedAllowInstanceMigration",
                    "optional": true,
                    "label": "_computedAllowInstanceMigration"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Whether or not Vault should resolve the bound_iam_principal_arn to an AWS",
                        "Unique ID. When true, deleting a principal and recreating it with the same",
                        "name won't automatically grant the new principal the same roles in Vault",
                        "that the old principal had."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"resolve_aws_unique_ids\" <$> TF.attribute",
                    "name": "resolve_aws_unique_ids",
                    "method": "computedResolveAwsUniqueIds",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasComputedResolveAwsUniqueIds",
                    "optional": true,
                    "label": "_computedResolveAwsUniqueIds"
                }
            ],
            "parameters": [
                {
                    "default": "_role",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the role."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"role\" <$> TF.attribute",
                    "name": "role",
                    "method": "role",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasRole",
                    "optional": false,
                    "label": "_role"
                }
            ],
            "type": "AwsAuthBackendRoleResource s",
            "original": "vault_aws_auth_backend_role"
        },
        {
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Allows migration of the underlying instance where the client resides."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"allow_instance_migration\" <$> TF.attribute",
                    "name": "allow_instance_migration",
                    "method": "allowInstanceMigration",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasAllowInstanceMigration",
                    "optional": true,
                    "label": "_allowInstanceMigration"
                },
                {
                    "default": "TF.value \"aws\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "AWS auth backend to read tags from."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"backend\" <$> TF.attribute",
                    "name": "backend",
                    "method": "backend",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasBackend",
                    "optional": true,
                    "label": "_backend"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Only allow a single token to be granted per instance ID."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"disallow_reauthentication\" <$> TF.attribute",
                    "name": "disallow_reauthentication",
                    "method": "disallowReauthentication",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasDisallowReauthentication",
                    "optional": true,
                    "label": "_disallowReauthentication"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Instance ID for which this tag is intended. The created tag can only be used",
                        "by the instance with the given ID."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"instance_id\" <$> TF.attribute",
                    "name": "instance_id",
                    "method": "instanceId",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasInstanceId",
                    "optional": true,
                    "label": "_instanceId"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The maximum allowed lifetime of tokens issued using this role."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"max_ttl\" <$> TF.attribute",
                    "name": "max_ttl",
                    "method": "maxTtl",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMaxTtl",
                    "optional": true,
                    "label": "_maxTtl"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Policies to be associated with the tag."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"policies\" <$> TF.attribute",
                    "name": "policies",
                    "method": "policies",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasPolicies",
                    "optional": true,
                    "label": "_policies"
                },
                {
                    "default": "_role",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the role."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"role\" <$> TF.attribute",
                    "name": "role",
                    "method": "role",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasRole",
                    "optional": false,
                    "label": "_role"
                }
            ],
            "schema": "Resource",
            "name": "AwsAuthBackendRoleTagResource",
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"tag_key\" <$> TF.attribute",
                    "name": "tag_key",
                    "method": "computedTagKey",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedTagKey",
                    "optional": false,
                    "label": "_computedTagKey"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"tag_value\" <$> TF.attribute",
                    "name": "tag_value",
                    "method": "computedTagValue",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedTagValue",
                    "optional": false,
                    "label": "_computedTagValue"
                }
            ],
            "parameters": [
                {
                    "default": "_role",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the role."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"role\" <$> TF.attribute",
                    "name": "role",
                    "method": "role",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasRole",
                    "optional": false,
                    "label": "_role"
                }
            ],
            "type": "AwsAuthBackendRoleTagResource s",
            "original": "vault_aws_auth_backend_role_tag"
        },
        {
            "arguments": [
                {
                    "default": "_accountId",
                    "computed": false,
                    "required": true,
                    "help": [
                        "AWS account ID to be associated with STS role."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"account_id\" <$> TF.attribute",
                    "name": "account_id",
                    "method": "accountId",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAccountId",
                    "optional": false,
                    "label": "_accountId"
                },
                {
                    "default": "TF.value \"aws\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Unique name of the auth backend to configure."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"backend\" <$> TF.attribute",
                    "name": "backend",
                    "method": "backend",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasBackend",
                    "optional": true,
                    "label": "_backend"
                },
                {
                    "default": "_stsRole",
                    "computed": false,
                    "required": true,
                    "help": [
                        "AWS ARN for STS role to be assumed when interacting with the account",
                        "specified."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"sts_role\" <$> TF.attribute",
                    "name": "sts_role",
                    "method": "stsRole",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasStsRole",
                    "optional": false,
                    "label": "_stsRole"
                }
            ],
            "schema": "Resource",
            "name": "AwsAuthBackendStsRoleResource",
            "attributes": [],
            "parameters": [
                {
                    "default": "_accountId",
                    "computed": false,
                    "required": true,
                    "help": [
                        "AWS account ID to be associated with STS role."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"account_id\" <$> TF.attribute",
                    "name": "account_id",
                    "method": "accountId",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAccountId",
                    "optional": false,
                    "label": "_accountId"
                },
                {
                    "default": "_stsRole",
                    "computed": false,
                    "required": true,
                    "help": [
                        "AWS ARN for STS role to be assumed when interacting with the account",
                        "specified."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"sts_role\" <$> TF.attribute",
                    "name": "sts_role",
                    "method": "stsRole",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasStsRole",
                    "optional": false,
                    "label": "_stsRole"
                }
            ],
            "type": "AwsAuthBackendStsRoleResource s",
            "original": "vault_aws_auth_backend_sts_role"
        },
        {
            "arguments": [
                {
                    "default": "_accessKey",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The AWS Access Key ID to use when generating new credentials."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"access_key\" <$> TF.attribute",
                    "name": "access_key",
                    "method": "accessKey",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAccessKey",
                    "optional": false,
                    "label": "_accessKey"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Human-friendly description of the mount for the backend."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"description\" <$> TF.attribute",
                    "name": "description",
                    "method": "description",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDescription",
                    "optional": true,
                    "label": "_description"
                },
                {
                    "default": "TF.value \"aws\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Path to mount the backend at."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"path\" <$> TF.attribute",
                    "name": "path",
                    "method": "path",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPath",
                    "optional": true,
                    "label": "_path"
                },
                {
                    "default": "_secretKey",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The AWS Secret Access Key to use when generating new credentials."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"secret_key\" <$> TF.attribute",
                    "name": "secret_key",
                    "method": "secretKey",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasSecretKey",
                    "optional": false,
                    "label": "_secretKey"
                }
            ],
            "schema": "Resource",
            "name": "AwsSecretBackendResource",
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Default lease duration for secrets in seconds"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"default_lease_ttl_seconds\" <$> TF.attribute",
                    "name": "default_lease_ttl_seconds",
                    "method": "computedDefaultLeaseTtlSeconds",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasComputedDefaultLeaseTtlSeconds",
                    "optional": true,
                    "label": "_computedDefaultLeaseTtlSeconds"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Maximum possible lease duration for secrets in seconds"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"max_lease_ttl_seconds\" <$> TF.attribute",
                    "name": "max_lease_ttl_seconds",
                    "method": "computedMaxLeaseTtlSeconds",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasComputedMaxLeaseTtlSeconds",
                    "optional": true,
                    "label": "_computedMaxLeaseTtlSeconds"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "The AWS region to make API calls against. Defaults to us-east-1."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"region\" <$> TF.attribute",
                    "name": "region",
                    "method": "computedRegion",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedRegion",
                    "optional": true,
                    "label": "_computedRegion"
                }
            ],
            "parameters": [
                {
                    "default": "_accessKey",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The AWS Access Key ID to use when generating new credentials."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"access_key\" <$> TF.attribute",
                    "name": "access_key",
                    "method": "accessKey",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAccessKey",
                    "optional": false,
                    "label": "_accessKey"
                },
                {
                    "default": "_secretKey",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The AWS Secret Access Key to use when generating new credentials."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"secret_key\" <$> TF.attribute",
                    "name": "secret_key",
                    "method": "secretKey",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasSecretKey",
                    "optional": false,
                    "label": "_secretKey"
                }
            ],
            "type": "AwsSecretBackendResource s",
            "original": "vault_aws_secret_backend"
        },
        {
            "arguments": [
                {
                    "default": "_backend",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The path of the AWS Secret Backend the role belongs to."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"backend\" <$> TF.attribute",
                    "name": "backend",
                    "method": "backend",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasBackend",
                    "optional": false,
                    "label": "_backend"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Unique name for the role."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "optional": false,
                    "label": "_name"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "IAM policy the role should use in JSON format."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"policy\" <$> TF.attribute",
                    "name": "policy",
                    "method": "policy",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "method": "policyArn",
                            "label": "_policyArn"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPolicy",
                    "optional": true,
                    "label": "_policy"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "ARN for an existing IAM policy the role should use."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"policy_arn\" <$> TF.attribute",
                    "name": "policy_arn",
                    "method": "policyArn",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "method": "policy",
                            "label": "_policy"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPolicyArn",
                    "optional": true,
                    "label": "_policyArn"
                }
            ],
            "schema": "Resource",
            "name": "AwsSecretBackendRoleResource",
            "attributes": [],
            "parameters": [
                {
                    "default": "_backend",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The path of the AWS Secret Backend the role belongs to."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"backend\" <$> TF.attribute",
                    "name": "backend",
                    "method": "backend",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasBackend",
                    "optional": false,
                    "label": "_backend"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Unique name for the role."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "optional": false,
                    "label": "_name"
                }
            ],
            "type": "AwsSecretBackendRoleResource s",
            "original": "vault_aws_secret_backend_role"
        },
        {
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A list of roles that are allowed to use this connection."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"allowed_roles\" <$> TF.attribute",
                    "name": "allowed_roles",
                    "method": "allowedRoles",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasAllowedRoles",
                    "optional": true,
                    "label": "_allowedRoles"
                },
                {
                    "default": "_backend",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Unique name of the Vault mount to configure."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"backend\" <$> TF.attribute",
                    "name": "backend",
                    "method": "backend",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasBackend",
                    "optional": false,
                    "label": "_backend"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Connection parameters for the cassandra-database-plugin plugin."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"cassandra\" <$> TF.attribute",
                    "name": "cassandra",
                    "method": "cassandra",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "method": "oracle",
                            "label": "_oracle"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "mongodb",
                            "label": "_mongodb"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "mysql",
                            "label": "_mysql"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "mssql",
                            "label": "_mssql"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "postgresql",
                            "label": "_postgresql"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "hana",
                            "label": "_hana"
                        }
                    ],
                    "type": "TF.Attr s [Cassandra s]",
                    "class": "HasCassandra",
                    "optional": true,
                    "label": "_cassandra"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Connection parameters for the hana-database-plugin plugin."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"hana\" <$> TF.attribute",
                    "name": "hana",
                    "method": "hana",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "method": "cassandra",
                            "label": "_cassandra"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "oracle",
                            "label": "_oracle"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "mongodb",
                            "label": "_mongodb"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "mysql",
                            "label": "_mysql"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "mssql",
                            "label": "_mssql"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "postgresql",
                            "label": "_postgresql"
                        }
                    ],
                    "type": "TF.Attr s [Hana s]",
                    "class": "HasHana",
                    "optional": true,
                    "label": "_hana"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Connection parameters for the mongodb-database-plugin plugin."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"mongodb\" <$> TF.attribute",
                    "name": "mongodb",
                    "method": "mongodb",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "method": "cassandra",
                            "label": "_cassandra"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "oracle",
                            "label": "_oracle"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "mysql",
                            "label": "_mysql"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "mssql",
                            "label": "_mssql"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "postgresql",
                            "label": "_postgresql"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "hana",
                            "label": "_hana"
                        }
                    ],
                    "type": "TF.Attr s [Mongodb s]",
                    "class": "HasMongodb",
                    "optional": true,
                    "label": "_mongodb"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Connection parameters for the mssql-database-plugin plugin."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"mssql\" <$> TF.attribute",
                    "name": "mssql",
                    "method": "mssql",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "method": "cassandra",
                            "label": "_cassandra"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "oracle",
                            "label": "_oracle"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "mongodb",
                            "label": "_mongodb"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "mysql",
                            "label": "_mysql"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "postgresql",
                            "label": "_postgresql"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "hana",
                            "label": "_hana"
                        }
                    ],
                    "type": "TF.Attr s [Mssql s]",
                    "class": "HasMssql",
                    "optional": true,
                    "label": "_mssql"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Connection parameters for the mysql-database-plugin plugin."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"mysql\" <$> TF.attribute",
                    "name": "mysql",
                    "method": "mysql",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "method": "cassandra",
                            "label": "_cassandra"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "oracle",
                            "label": "_oracle"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "mongodb",
                            "label": "_mongodb"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "mssql",
                            "label": "_mssql"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "postgresql",
                            "label": "_postgresql"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "hana",
                            "label": "_hana"
                        }
                    ],
                    "type": "TF.Attr s [Mysql s]",
                    "class": "HasMysql",
                    "optional": true,
                    "label": "_mysql"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the database connection."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "optional": false,
                    "label": "_name"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Connection parameters for the oracle-database-plugin plugin."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"oracle\" <$> TF.attribute",
                    "name": "oracle",
                    "method": "oracle",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "method": "cassandra",
                            "label": "_cassandra"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "mongodb",
                            "label": "_mongodb"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "mysql",
                            "label": "_mysql"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "mssql",
                            "label": "_mssql"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "postgresql",
                            "label": "_postgresql"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "hana",
                            "label": "_hana"
                        }
                    ],
                    "type": "TF.Attr s [Oracle s]",
                    "class": "HasOracle",
                    "optional": true,
                    "label": "_oracle"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Connection parameters for the postgresql-database-plugin plugin."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"postgresql\" <$> TF.attribute",
                    "name": "postgresql",
                    "method": "postgresql",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "method": "cassandra",
                            "label": "_cassandra"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "oracle",
                            "label": "_oracle"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "mongodb",
                            "label": "_mongodb"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "mysql",
                            "label": "_mysql"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "mssql",
                            "label": "_mssql"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "hana",
                            "label": "_hana"
                        }
                    ],
                    "type": "TF.Attr s [Postgresql s]",
                    "class": "HasPostgresql",
                    "optional": true,
                    "label": "_postgresql"
                },
                {
                    "default": "TF.value P.True",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Specifies if the connection is verified during initial configuration."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"verify_connection\" <$> TF.attribute",
                    "name": "verify_connection",
                    "method": "verifyConnection",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasVerifyConnection",
                    "optional": true,
                    "label": "_verifyConnection"
                }
            ],
            "schema": "Resource",
            "name": "DatabaseSecretBackendConnectionResource",
            "attributes": [],
            "parameters": [
                {
                    "default": "_backend",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Unique name of the Vault mount to configure."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"backend\" <$> TF.attribute",
                    "name": "backend",
                    "method": "backend",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasBackend",
                    "optional": false,
                    "label": "_backend"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the database connection."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "optional": false,
                    "label": "_name"
                }
            ],
            "type": "DatabaseSecretBackendConnectionResource s",
            "original": "vault_database_secret_backend_connection"
        },
        {
            "arguments": [
                {
                    "default": "_backend",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The path of the Database Secret Backend the role belongs to."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"backend\" <$> TF.attribute",
                    "name": "backend",
                    "method": "backend",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasBackend",
                    "optional": false,
                    "label": "_backend"
                },
                {
                    "default": "_creationStatements",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Database statements to execute to create and configure a user."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"creation_statements\" <$> TF.attribute",
                    "name": "creation_statements",
                    "method": "creationStatements",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCreationStatements",
                    "optional": false,
                    "label": "_creationStatements"
                },
                {
                    "default": "_dbName",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Database connection to use for this role."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"db_name\" <$> TF.attribute",
                    "name": "db_name",
                    "method": "dbName",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDbName",
                    "optional": false,
                    "label": "_dbName"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Default TTL for leases associated with this role, in seconds."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"default_ttl\" <$> TF.attribute",
                    "name": "default_ttl",
                    "method": "defaultTtl",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasDefaultTtl",
                    "optional": true,
                    "label": "_defaultTtl"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Maximum TTL for leases associated with this role, in seconds."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"max_ttl\" <$> TF.attribute",
                    "name": "max_ttl",
                    "method": "maxTtl",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasMaxTtl",
                    "optional": true,
                    "label": "_maxTtl"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Unique name for the role."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "optional": false,
                    "label": "_name"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Database statements to execute to renew a user."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"renew_statements\" <$> TF.attribute",
                    "name": "renew_statements",
                    "method": "renewStatements",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasRenewStatements",
                    "optional": true,
                    "label": "_renewStatements"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Database statements to execute to revoke a user."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"revocation_statements\" <$> TF.attribute",
                    "name": "revocation_statements",
                    "method": "revocationStatements",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasRevocationStatements",
                    "optional": true,
                    "label": "_revocationStatements"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Database statements to execute to rollback a create operation in the event",
                        "of an error."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"rollback_statements\" <$> TF.attribute",
                    "name": "rollback_statements",
                    "method": "rollbackStatements",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasRollbackStatements",
                    "optional": true,
                    "label": "_rollbackStatements"
                }
            ],
            "schema": "Resource",
            "name": "DatabaseSecretBackendRoleResource",
            "attributes": [],
            "parameters": [
                {
                    "default": "_backend",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The path of the Database Secret Backend the role belongs to."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"backend\" <$> TF.attribute",
                    "name": "backend",
                    "method": "backend",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasBackend",
                    "optional": false,
                    "label": "_backend"
                },
                {
                    "default": "_creationStatements",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Database statements to execute to create and configure a user."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"creation_statements\" <$> TF.attribute",
                    "name": "creation_statements",
                    "method": "creationStatements",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCreationStatements",
                    "optional": false,
                    "label": "_creationStatements"
                },
                {
                    "default": "_dbName",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Database connection to use for this role."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"db_name\" <$> TF.attribute",
                    "name": "db_name",
                    "method": "dbName",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDbName",
                    "optional": false,
                    "label": "_dbName"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Unique name for the role."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "optional": false,
                    "label": "_name"
                }
            ],
            "type": "DatabaseSecretBackendRoleResource s",
            "original": "vault_database_secret_backend_role"
        },
        {
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Attempt to read the token from Vault if true; if false, drift won't be",
                        "detected."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"allow_read\" <$> TF.attribute",
                    "name": "allow_read",
                    "method": "allowRead",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasAllowRead",
                    "optional": true,
                    "label": "_allowRead"
                },
                {
                    "default": "_dataJson",
                    "computed": false,
                    "required": true,
                    "help": [
                        "JSON-encoded secret data to write."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"data_json\" <$> TF.attribute",
                    "name": "data_json",
                    "method": "dataJson",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDataJson",
                    "optional": false,
                    "label": "_dataJson"
                },
                {
                    "default": "TF.value P.False",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Don't attempt to read the token from Vault if true; drift won't be detected."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"disable_read\" <$> TF.attribute",
                    "name": "disable_read",
                    "method": "disableRead",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasDisableRead",
                    "optional": true,
                    "label": "_disableRead"
                },
                {
                    "default": "_path",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Full path where the generic secret will be written."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"path\" <$> TF.attribute",
                    "name": "path",
                    "method": "path",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPath",
                    "optional": false,
                    "label": "_path"
                }
            ],
            "schema": "Resource",
            "name": "GenericSecretResource",
            "attributes": [],
            "parameters": [
                {
                    "default": "_dataJson",
                    "computed": false,
                    "required": true,
                    "help": [
                        "JSON-encoded secret data to write."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"data_json\" <$> TF.attribute",
                    "name": "data_json",
                    "method": "dataJson",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDataJson",
                    "optional": false,
                    "label": "_dataJson"
                },
                {
                    "default": "_path",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Full path where the generic secret will be written."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"path\" <$> TF.attribute",
                    "name": "path",
                    "method": "path",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPath",
                    "optional": false,
                    "label": "_path"
                }
            ],
            "type": "GenericSecretResource s",
            "original": "vault_generic_secret"
        },
        {
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Human-friendly description of the mount"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"description\" <$> TF.attribute",
                    "name": "description",
                    "method": "description",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDescription",
                    "optional": true,
                    "label": "_description"
                },
                {
                    "default": "_path",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Where the secret backend will be mounted"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"path\" <$> TF.attribute",
                    "name": "path",
                    "method": "path",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPath",
                    "optional": false,
                    "label": "_path"
                },
                {
                    "default": "_type'",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Type of the backend, such as 'aws'"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "type",
                    "method": "type'",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasType'",
                    "optional": false,
                    "label": "_type'"
                }
            ],
            "schema": "Resource",
            "name": "MountResource",
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Default lease duration for tokens and secrets in seconds"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"default_lease_ttl_seconds\" <$> TF.attribute",
                    "name": "default_lease_ttl_seconds",
                    "method": "computedDefaultLeaseTtlSeconds",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasComputedDefaultLeaseTtlSeconds",
                    "optional": true,
                    "label": "_computedDefaultLeaseTtlSeconds"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Maximum possible lease duration for tokens and secrets in seconds"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"max_lease_ttl_seconds\" <$> TF.attribute",
                    "name": "max_lease_ttl_seconds",
                    "method": "computedMaxLeaseTtlSeconds",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasComputedMaxLeaseTtlSeconds",
                    "optional": true,
                    "label": "_computedMaxLeaseTtlSeconds"
                }
            ],
            "parameters": [
                {
                    "default": "_path",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Where the secret backend will be mounted"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"path\" <$> TF.attribute",
                    "name": "path",
                    "method": "path",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPath",
                    "optional": false,
                    "label": "_path"
                },
                {
                    "default": "_type'",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Type of the backend, such as 'aws'"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "type",
                    "method": "type'",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasType'",
                    "optional": false,
                    "label": "_type'"
                }
            ],
            "type": "MountResource s",
            "original": "vault_mount"
        },
        {
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The Okta url. Examples: oktapreview.com, okta.com (default)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"base_url\" <$> TF.attribute",
                    "name": "base_url",
                    "method": "baseUrl",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasBaseUrl",
                    "optional": true,
                    "label": "_baseUrl"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The description of the auth backend"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"description\" <$> TF.attribute",
                    "name": "description",
                    "method": "description",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDescription",
                    "optional": true,
                    "label": "_description"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Maximum duration after which authentication will be expired"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"max_ttl\" <$> TF.attribute",
                    "name": "max_ttl",
                    "method": "maxTtl",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMaxTtl",
                    "optional": true,
                    "label": "_maxTtl"
                },
                {
                    "default": "_organization",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The Okta organization. This will be the first part of the url",
                        "https://XXX.okta.com."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"organization\" <$> TF.attribute",
                    "name": "organization",
                    "method": "organization",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasOrganization",
                    "optional": false,
                    "label": "_organization"
                },
                {
                    "default": "TF.value \"okta\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Path to mount the backend"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"path\" <$> TF.attribute",
                    "name": "path",
                    "method": "path",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPath",
                    "optional": true,
                    "label": "_path"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The Okta API token. This is required to query Okta for user group",
                        "membership. If this is not supplied only locally configured groups will be",
                        "enabled."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"token\" <$> TF.attribute",
                    "name": "token",
                    "method": "token",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasToken",
                    "optional": true,
                    "label": "_token"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Duration after which authentication will be expired"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"ttl\" <$> TF.attribute",
                    "name": "ttl",
                    "method": "ttl",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasTtl",
                    "optional": true,
                    "label": "_ttl"
                }
            ],
            "schema": "Resource",
            "name": "OktaAuthBackendResource",
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"group\" <$> TF.attribute",
                    "name": "group",
                    "method": "computedGroup",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (Group s)]",
                    "class": "HasComputedGroup",
                    "optional": true,
                    "label": "_computedGroup"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"user\" <$> TF.attribute",
                    "name": "user",
                    "method": "computedUser",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (User s)]",
                    "class": "HasComputedUser",
                    "optional": true,
                    "label": "_computedUser"
                }
            ],
            "parameters": [
                {
                    "default": "_organization",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The Okta organization. This will be the first part of the url",
                        "https://XXX.okta.com."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"organization\" <$> TF.attribute",
                    "name": "organization",
                    "method": "organization",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasOrganization",
                    "optional": false,
                    "label": "_organization"
                }
            ],
            "type": "OktaAuthBackendResource s",
            "original": "vault_okta_auth_backend"
        },
        {
            "arguments": [
                {
                    "default": "_groupName",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the Okta group"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"group_name\" <$> TF.attribute",
                    "name": "group_name",
                    "method": "groupName",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasGroupName",
                    "optional": false,
                    "label": "_groupName"
                },
                {
                    "default": "_path",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Path to the Okta auth backend"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"path\" <$> TF.attribute",
                    "name": "path",
                    "method": "path",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPath",
                    "optional": false,
                    "label": "_path"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Policies to associate with this group"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"policies\" <$> TF.attribute",
                    "name": "policies",
                    "method": "policies",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (TF.Attr s P.Text)]",
                    "class": "HasPolicies",
                    "optional": true,
                    "label": "_policies"
                }
            ],
            "schema": "Resource",
            "name": "OktaAuthBackendGroupResource",
            "attributes": [],
            "parameters": [
                {
                    "default": "_groupName",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the Okta group"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"group_name\" <$> TF.attribute",
                    "name": "group_name",
                    "method": "groupName",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasGroupName",
                    "optional": false,
                    "label": "_groupName"
                },
                {
                    "default": "_path",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Path to the Okta auth backend"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"path\" <$> TF.attribute",
                    "name": "path",
                    "method": "path",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPath",
                    "optional": false,
                    "label": "_path"
                }
            ],
            "type": "OktaAuthBackendGroupResource s",
            "original": "vault_okta_auth_backend_group"
        },
        {
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Groups within the Okta auth backend to associate with this user"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"groups\" <$> TF.attribute",
                    "name": "groups",
                    "method": "groups",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (TF.Attr s P.Text)]",
                    "class": "HasGroups",
                    "optional": true,
                    "label": "_groups"
                },
                {
                    "default": "_path",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Path to the Okta auth backend"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"path\" <$> TF.attribute",
                    "name": "path",
                    "method": "path",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPath",
                    "optional": false,
                    "label": "_path"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Policies to associate with this user"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"policies\" <$> TF.attribute",
                    "name": "policies",
                    "method": "policies",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (TF.Attr s P.Text)]",
                    "class": "HasPolicies",
                    "optional": true,
                    "label": "_policies"
                },
                {
                    "default": "_username",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the user within Okta"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"username\" <$> TF.attribute",
                    "name": "username",
                    "method": "username",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUsername",
                    "optional": false,
                    "label": "_username"
                }
            ],
            "schema": "Resource",
            "name": "OktaAuthBackendUserResource",
            "attributes": [],
            "parameters": [
                {
                    "default": "_path",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Path to the Okta auth backend"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"path\" <$> TF.attribute",
                    "name": "path",
                    "method": "path",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPath",
                    "optional": false,
                    "label": "_path"
                },
                {
                    "default": "_username",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the user within Okta"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"username\" <$> TF.attribute",
                    "name": "username",
                    "method": "username",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUsername",
                    "optional": false,
                    "label": "_username"
                }
            ],
            "type": "OktaAuthBackendUserResource s",
            "original": "vault_okta_auth_backend_user"
        },
        {
            "arguments": [
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the policy"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "optional": false,
                    "label": "_name"
                },
                {
                    "default": "_policy",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The policy document"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"policy\" <$> TF.attribute",
                    "name": "policy",
                    "method": "policy",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPolicy",
                    "optional": false,
                    "label": "_policy"
                }
            ],
            "schema": "Resource",
            "name": "PolicyResource",
            "attributes": [],
            "parameters": [
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the policy"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "optional": false,
                    "label": "_name"
                },
                {
                    "default": "_policy",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The policy document"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"policy\" <$> TF.attribute",
                    "name": "policy",
                    "method": "policy",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPolicy",
                    "optional": false,
                    "label": "_policy"
                }
            ],
            "type": "PolicyResource s",
            "original": "vault_policy"
        }
    ],
    "dependencies": [
        "base",
        "unordered-containers",
        "text",
        "terrafomo",
        "hashable",
        "microlens"
    ],
    "name": "Vault",
    "parameters": [
        {
            "default": "_address",
            "computed": false,
            "required": true,
            "help": [
                "URL of the root of the target Vault server."
            ],
            "forceNew": false,
            "encoder": "P.Just $ TF.assign \"address\"",
            "name": "address",
            "method": "address",
            "conflicts": [],
            "type": "P.Text",
            "class": "HasAddress",
            "optional": false,
            "label": "_address"
        },
        {
            "default": "_token",
            "computed": false,
            "required": true,
            "help": [
                "Token to use to authenticate to Vault."
            ],
            "forceNew": false,
            "encoder": "P.Just $ TF.assign \"token\"",
            "name": "token",
            "method": "token",
            "conflicts": [],
            "type": "P.Text",
            "class": "HasToken",
            "optional": false,
            "label": "_token"
        }
    ],
    "package": "terrafomo-vault",
    "type": "Provider",
    "original": "vault"
}