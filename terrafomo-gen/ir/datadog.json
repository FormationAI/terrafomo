{
    "settings": [
        {
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Automatically scale graphs"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"autoscale\" <$> TF.attribute",
                    "name": "autoscale",
                    "method": "autoscale",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasAutoscale",
                    "optional": true,
                    "label": "_autoscale"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Use a custom unit (like 'users')"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"custom_unit\" <$> TF.attribute",
                    "name": "custom_unit",
                    "method": "customUnit",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCustomUnit",
                    "optional": true,
                    "label": "_customUnit"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Filter for events to be overlayed on the graph."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"events\" <$> TF.attribute",
                    "name": "events",
                    "method": "events",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasEvents",
                    "optional": true,
                    "label": "_events"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A list of groupings for hostmap type graphs."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"group\" <$> TF.attribute",
                    "name": "group",
                    "method": "group",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasGroup",
                    "optional": true,
                    "label": "_group"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Include hosts without metrics in hostmap graphs"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"include_no_metric_hosts\" <$> TF.attribute",
                    "name": "include_no_metric_hosts",
                    "method": "includeNoMetricHosts",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasIncludeNoMetricHosts",
                    "optional": true,
                    "label": "_includeNoMetricHosts"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Include ungrouped hosts in hostmap graphs"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"include_ungrouped_hosts\" <$> TF.attribute",
                    "name": "include_ungrouped_hosts",
                    "method": "includeUngroupedHosts",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasIncludeUngroupedHosts",
                    "optional": true,
                    "label": "_includeUngroupedHosts"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"marker\" <$> TF.attribute",
                    "name": "marker",
                    "method": "marker",
                    "conflicts": [],
                    "type": "TF.Attr s [Marker s]",
                    "class": "HasMarker",
                    "optional": true,
                    "label": "_marker"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "How many digits to show"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"precision\" <$> TF.attribute",
                    "name": "precision",
                    "method": "precision",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPrecision",
                    "optional": true,
                    "label": "_precision"
                },
                {
                    "default": "_request",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"request\" <$> TF.attribute",
                    "name": "request",
                    "method": "request",
                    "conflicts": [],
                    "type": "TF.Attr s [Request s]",
                    "class": "HasRequest",
                    "optional": false,
                    "label": "_request"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A list of scope filters for hostmap type graphs."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"scope\" <$> TF.attribute",
                    "name": "scope",
                    "method": "scope",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasScope",
                    "optional": true,
                    "label": "_scope"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"style\" <$> TF.attribute",
                    "name": "style",
                    "method": "style",
                    "conflicts": [],
                    "type": "TF.Attr s (P.HashMap P.Text (TF.Attr s P.Text))",
                    "class": "HasStyle",
                    "optional": true,
                    "label": "_style"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "How to align text"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"text_align\" <$> TF.attribute",
                    "name": "text_align",
                    "method": "textAlign",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasTextAlign",
                    "optional": true,
                    "label": "_textAlign"
                },
                {
                    "default": "_title",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The name of the graph."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"title\" <$> TF.attribute",
                    "name": "title",
                    "method": "title",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasTitle",
                    "optional": false,
                    "label": "_title"
                },
                {
                    "default": "_viz",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"viz\" <$> TF.attribute",
                    "name": "viz",
                    "method": "viz",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasViz",
                    "optional": false,
                    "label": "_viz"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"yaxis\" <$> TF.attribute",
                    "name": "yaxis",
                    "method": "yaxis",
                    "conflicts": [],
                    "type": "TF.Attr s (P.HashMap P.Text (TF.Attr s P.Text))",
                    "class": "HasYaxis",
                    "optional": true,
                    "label": "_yaxis"
                }
            ],
            "name": "Graph",
            "attributes": [],
            "parameters": [
                {
                    "default": "_request",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"request\" <$> TF.attribute",
                    "name": "request",
                    "method": "request",
                    "conflicts": [],
                    "type": "TF.Attr s [Request s]",
                    "class": "HasRequest",
                    "optional": false,
                    "label": "_request"
                },
                {
                    "default": "_title",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The name of the graph."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"title\" <$> TF.attribute",
                    "name": "title",
                    "method": "title",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasTitle",
                    "optional": false,
                    "label": "_title"
                },
                {
                    "default": "_viz",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"viz\" <$> TF.attribute",
                    "name": "viz",
                    "method": "viz",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasViz",
                    "optional": false,
                    "label": "_viz"
                }
            ],
            "hashable": false,
            "type": "Graph s",
            "original": "graph"
        },
        {
            "arguments": [
                {
                    "default": "_period",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"period\" <$> TF.attribute",
                    "name": "period",
                    "method": "period",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasPeriod",
                    "optional": false,
                    "label": "_period"
                },
                {
                    "default": "_type'",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "type",
                    "method": "type'",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasType'",
                    "optional": false,
                    "label": "_type'"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"until_date\" <$> TF.attribute",
                    "name": "until_date",
                    "method": "untilDate",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "method": "untilOccurrences",
                            "label": "_untilOccurrences"
                        }
                    ],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasUntilDate",
                    "optional": true,
                    "label": "_untilDate"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"until_occurrences\" <$> TF.attribute",
                    "name": "until_occurrences",
                    "method": "untilOccurrences",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "method": "untilDate",
                            "label": "_untilDate"
                        }
                    ],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasUntilOccurrences",
                    "optional": true,
                    "label": "_untilOccurrences"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"week_days\" <$> TF.attribute",
                    "name": "week_days",
                    "method": "weekDays",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasWeekDays",
                    "optional": true,
                    "label": "_weekDays"
                }
            ],
            "name": "Recurrence",
            "attributes": [],
            "parameters": [
                {
                    "default": "_period",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"period\" <$> TF.attribute",
                    "name": "period",
                    "method": "period",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasPeriod",
                    "optional": false,
                    "label": "_period"
                },
                {
                    "default": "_type'",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "type",
                    "method": "type'",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasType'",
                    "optional": false,
                    "label": "_type'"
                }
            ],
            "hashable": false,
            "type": "Recurrence s",
            "original": "recurrence"
        },
        {
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"critical\" <$> TF.attribute",
                    "name": "critical",
                    "method": "critical",
                    "conflicts": [],
                    "type": "TF.Attr s P.Double",
                    "class": "HasCritical",
                    "optional": true,
                    "label": "_critical"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"critical_recovery\" <$> TF.attribute",
                    "name": "critical_recovery",
                    "method": "criticalRecovery",
                    "conflicts": [],
                    "type": "TF.Attr s P.Double",
                    "class": "HasCriticalRecovery",
                    "optional": true,
                    "label": "_criticalRecovery"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"ok\" <$> TF.attribute",
                    "name": "ok",
                    "method": "ok",
                    "conflicts": [],
                    "type": "TF.Attr s P.Double",
                    "class": "HasOk",
                    "optional": true,
                    "label": "_ok"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"unknown\" <$> TF.attribute",
                    "name": "unknown",
                    "method": "unknown",
                    "conflicts": [],
                    "type": "TF.Attr s P.Double",
                    "class": "HasUnknown",
                    "optional": true,
                    "label": "_unknown"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"warning\" <$> TF.attribute",
                    "name": "warning",
                    "method": "warning",
                    "conflicts": [],
                    "type": "TF.Attr s P.Double",
                    "class": "HasWarning",
                    "optional": true,
                    "label": "_warning"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"warning_recovery\" <$> TF.attribute",
                    "name": "warning_recovery",
                    "method": "warningRecovery",
                    "conflicts": [],
                    "type": "TF.Attr s P.Double",
                    "class": "HasWarningRecovery",
                    "optional": true,
                    "label": "_warningRecovery"
                }
            ],
            "name": "Thresholds",
            "attributes": [],
            "parameters": [],
            "hashable": false,
            "type": "Thresholds s",
            "original": "thresholds"
        },
        {
            "arguments": [
                {
                    "default": "_comparator",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Comparator (<, >, etc)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"comparator\" <$> TF.attribute",
                    "name": "comparator",
                    "method": "comparator",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComparator",
                    "optional": false,
                    "label": "_comparator"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Custom background color (e.g., #205081)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"custom_bg_color\" <$> TF.attribute",
                    "name": "custom_bg_color",
                    "method": "customBgColor",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCustomBgColor",
                    "optional": true,
                    "label": "_customBgColor"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Custom foreground color (e.g., #59afe1)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"custom_fg_color\" <$> TF.attribute",
                    "name": "custom_fg_color",
                    "method": "customFgColor",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCustomFgColor",
                    "optional": true,
                    "label": "_customFgColor"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The palette to use if this condition is met."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"palette\" <$> TF.attribute",
                    "name": "palette",
                    "method": "palette",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPalette",
                    "optional": true,
                    "label": "_palette"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Value that is threshold for conditional format"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"value\" <$> TF.attribute",
                    "name": "value",
                    "method": "value",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasValue",
                    "optional": true,
                    "label": "_value"
                }
            ],
            "name": "ConditionalFormat",
            "attributes": [],
            "parameters": [
                {
                    "default": "_comparator",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Comparator (<, >, etc)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"comparator\" <$> TF.attribute",
                    "name": "comparator",
                    "method": "comparator",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComparator",
                    "optional": false,
                    "label": "_comparator"
                }
            ],
            "hashable": false,
            "type": "ConditionalFormat s",
            "original": "conditional_format"
        },
        {
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"label\" <$> TF.attribute",
                    "name": "label",
                    "method": "label",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasLabel",
                    "optional": true,
                    "label": "_label"
                },
                {
                    "default": "_type'",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "type",
                    "method": "type'",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasType'",
                    "optional": false,
                    "label": "_type'"
                },
                {
                    "default": "_value",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"value\" <$> TF.attribute",
                    "name": "value",
                    "method": "value",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasValue",
                    "optional": false,
                    "label": "_value"
                }
            ],
            "name": "Marker",
            "attributes": [],
            "parameters": [
                {
                    "default": "_type'",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "type",
                    "method": "type'",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasType'",
                    "optional": false,
                    "label": "_type'"
                },
                {
                    "default": "_value",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"value\" <$> TF.attribute",
                    "name": "value",
                    "method": "value",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasValue",
                    "optional": false,
                    "label": "_value"
                }
            ],
            "hashable": false,
            "type": "Marker s",
            "original": "marker"
        },
        {
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The default value for the template variable on dashboard load."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"default\" <$> TF.attribute",
                    "name": "default",
                    "method": "default'",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDefault'",
                    "optional": true,
                    "label": "_default'"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The name of the variable."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "optional": false,
                    "label": "_name"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The tag prefix associated with the variable. Only tags with this prefix will",
                        "appear in the variable dropdown."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"prefix\" <$> TF.attribute",
                    "name": "prefix",
                    "method": "prefix",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPrefix",
                    "optional": true,
                    "label": "_prefix"
                }
            ],
            "name": "TemplateVariable",
            "attributes": [],
            "parameters": [
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The name of the variable."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "optional": false,
                    "label": "_name"
                }
            ],
            "hashable": false,
            "type": "TemplateVariable s",
            "original": "template_variable"
        },
        {
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"aggregator\" <$> TF.attribute",
                    "name": "aggregator",
                    "method": "aggregator",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAggregator",
                    "optional": true,
                    "label": "_aggregator"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Type of change for change graphs."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"change_type\" <$> TF.attribute",
                    "name": "change_type",
                    "method": "changeType",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasChangeType",
                    "optional": true,
                    "label": "_changeType"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The time period to compare change against in change graphs."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"compare_to\" <$> TF.attribute",
                    "name": "compare_to",
                    "method": "compareTo",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCompareTo",
                    "optional": true,
                    "label": "_compareTo"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A list of conditional formatting rules."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"conditional_format\" <$> TF.attribute",
                    "name": "conditional_format",
                    "method": "conditionalFormat",
                    "conflicts": [],
                    "type": "TF.Attr s [ConditionalFormat s]",
                    "class": "HasConditionalFormat",
                    "optional": true,
                    "label": "_conditionalFormat"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "If set to 'present', this will include the present values in change graphs."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"extra_col\" <$> TF.attribute",
                    "name": "extra_col",
                    "method": "extraCol",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasExtraCol",
                    "optional": true,
                    "label": "_extraCol"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Decides whether to represent increases as good or bad in change graphs."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"increase_good\" <$> TF.attribute",
                    "name": "increase_good",
                    "method": "increaseGood",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasIncreaseGood",
                    "optional": true,
                    "label": "_increaseGood"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The field a change graph will be ordered by."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"order_by\" <$> TF.attribute",
                    "name": "order_by",
                    "method": "orderBy",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasOrderBy",
                    "optional": true,
                    "label": "_orderBy"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Sort change graph in ascending or descending order."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"order_direction\" <$> TF.attribute",
                    "name": "order_direction",
                    "method": "orderDirection",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasOrderDirection",
                    "optional": true,
                    "label": "_orderDirection"
                },
                {
                    "default": "_q",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"q\" <$> TF.attribute",
                    "name": "q",
                    "method": "q",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasQ",
                    "optional": false,
                    "label": "_q"
                },
                {
                    "default": "TF.value P.False",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"stacked\" <$> TF.attribute",
                    "name": "stacked",
                    "method": "stacked",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasStacked",
                    "optional": true,
                    "label": "_stacked"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"style\" <$> TF.attribute",
                    "name": "style",
                    "method": "style",
                    "conflicts": [],
                    "type": "TF.Attr s (P.HashMap P.Text (TF.Attr s P.Text))",
                    "class": "HasStyle",
                    "optional": true,
                    "label": "_style"
                },
                {
                    "default": "TF.value \"line\"",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "type",
                    "method": "type'",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasType'",
                    "optional": true,
                    "label": "_type'"
                }
            ],
            "name": "Request",
            "attributes": [],
            "parameters": [
                {
                    "default": "_q",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"q\" <$> TF.attribute",
                    "name": "q",
                    "method": "q",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasQ",
                    "optional": false,
                    "label": "_q"
                }
            ],
            "hashable": false,
            "type": "Request s",
            "original": "request"
        }
    ],
    "arguments": [
        {
            "default": "_apiKey",
            "computed": false,
            "required": true,
            "help": [],
            "forceNew": false,
            "encoder": "P.Just $ TF.assign \"api_key\"",
            "name": "api_key",
            "method": "apiKey",
            "conflicts": [],
            "type": "P.Text",
            "class": "HasApiKey",
            "optional": false,
            "label": "_apiKey"
        },
        {
            "default": "_appKey",
            "computed": false,
            "required": true,
            "help": [],
            "forceNew": false,
            "encoder": "P.Just $ TF.assign \"app_key\"",
            "name": "app_key",
            "method": "appKey",
            "conflicts": [],
            "type": "P.Text",
            "class": "HasAppKey",
            "optional": false,
            "label": "_appKey"
        }
    ],
    "dataSources": [],
    "resources": [
        {
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"active\" <$> TF.attribute",
                    "name": "active",
                    "method": "active",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasActive",
                    "optional": true,
                    "label": "_active"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"disabled\" <$> TF.attribute",
                    "name": "disabled",
                    "method": "disabled",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasDisabled",
                    "optional": true,
                    "label": "_disabled"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"end\" <$> TF.attribute",
                    "name": "end",
                    "method": "end",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasEnd",
                    "optional": true,
                    "label": "_end"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"message\" <$> TF.attribute",
                    "name": "message",
                    "method": "message",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMessage",
                    "optional": true,
                    "label": "_message"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"monitor_id\" <$> TF.attribute",
                    "name": "monitor_id",
                    "method": "monitorId",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasMonitorId",
                    "optional": true,
                    "label": "_monitorId"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"recurrence\" <$> TF.attribute",
                    "name": "recurrence",
                    "method": "recurrence",
                    "conflicts": [],
                    "type": "TF.Attr s [Recurrence s]",
                    "class": "HasRecurrence",
                    "optional": true,
                    "label": "_recurrence"
                },
                {
                    "default": "_scope",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"scope\" <$> TF.attribute",
                    "name": "scope",
                    "method": "scope",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasScope",
                    "optional": false,
                    "label": "_scope"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"start\" <$> TF.attribute",
                    "name": "start",
                    "method": "start",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasStart",
                    "optional": true,
                    "label": "_start"
                }
            ],
            "schema": "Resource",
            "name": "DowntimeResource",
            "attributes": [],
            "parameters": [
                {
                    "default": "_scope",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"scope\" <$> TF.attribute",
                    "name": "scope",
                    "method": "scope",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasScope",
                    "optional": false,
                    "label": "_scope"
                }
            ],
            "type": "DowntimeResource s",
            "original": "datadog_downtime"
        },
        {
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"description\" <$> TF.attribute",
                    "name": "description",
                    "method": "description",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDescription",
                    "optional": true,
                    "label": "_description"
                },
                {
                    "default": "_metric",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"metric\" <$> TF.attribute",
                    "name": "metric",
                    "method": "metric",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMetric",
                    "optional": false,
                    "label": "_metric"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"per_unit\" <$> TF.attribute",
                    "name": "per_unit",
                    "method": "perUnit",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPerUnit",
                    "optional": true,
                    "label": "_perUnit"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"short_name\" <$> TF.attribute",
                    "name": "short_name",
                    "method": "shortName",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasShortName",
                    "optional": true,
                    "label": "_shortName"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"statsd_interval\" <$> TF.attribute",
                    "name": "statsd_interval",
                    "method": "statsdInterval",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasStatsdInterval",
                    "optional": true,
                    "label": "_statsdInterval"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "type",
                    "method": "type'",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasType'",
                    "optional": true,
                    "label": "_type'"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"unit\" <$> TF.attribute",
                    "name": "unit",
                    "method": "unit",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUnit",
                    "optional": true,
                    "label": "_unit"
                }
            ],
            "schema": "Resource",
            "name": "MetricMetadataResource",
            "attributes": [],
            "parameters": [
                {
                    "default": "_metric",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"metric\" <$> TF.attribute",
                    "name": "metric",
                    "method": "metric",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMetric",
                    "optional": false,
                    "label": "_metric"
                }
            ],
            "type": "MetricMetadataResource s",
            "original": "datadog_metric_metadata"
        },
        {
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"escalation_message\" <$> TF.attribute",
                    "name": "escalation_message",
                    "method": "escalationMessage",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasEscalationMessage",
                    "optional": true,
                    "label": "_escalationMessage"
                },
                {
                    "default": "TF.value P.True",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"include_tags\" <$> TF.attribute",
                    "name": "include_tags",
                    "method": "includeTags",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasIncludeTags",
                    "optional": true,
                    "label": "_includeTags"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"locked\" <$> TF.attribute",
                    "name": "locked",
                    "method": "locked",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasLocked",
                    "optional": true,
                    "label": "_locked"
                },
                {
                    "default": "_message",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"message\" <$> TF.attribute",
                    "name": "message",
                    "method": "message",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMessage",
                    "optional": false,
                    "label": "_message"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "optional": false,
                    "label": "_name"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"no_data_timeframe\" <$> TF.attribute",
                    "name": "no_data_timeframe",
                    "method": "noDataTimeframe",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasNoDataTimeframe",
                    "optional": true,
                    "label": "_noDataTimeframe"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"notify_audit\" <$> TF.attribute",
                    "name": "notify_audit",
                    "method": "notifyAudit",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasNotifyAudit",
                    "optional": true,
                    "label": "_notifyAudit"
                },
                {
                    "default": "TF.value P.False",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"notify_no_data\" <$> TF.attribute",
                    "name": "notify_no_data",
                    "method": "notifyNoData",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasNotifyNoData",
                    "optional": true,
                    "label": "_notifyNoData"
                },
                {
                    "default": "_query",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"query\" <$> TF.attribute",
                    "name": "query",
                    "method": "query",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasQuery",
                    "optional": false,
                    "label": "_query"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"renotify_interval\" <$> TF.attribute",
                    "name": "renotify_interval",
                    "method": "renotifyInterval",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasRenotifyInterval",
                    "optional": true,
                    "label": "_renotifyInterval"
                },
                {
                    "default": "TF.value P.True",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"require_full_window\" <$> TF.attribute",
                    "name": "require_full_window",
                    "method": "requireFullWindow",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasRequireFullWindow",
                    "optional": true,
                    "label": "_requireFullWindow"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"silenced\" <$> TF.attribute",
                    "name": "silenced",
                    "method": "silenced",
                    "conflicts": [],
                    "type": "TF.Attr s (P.HashMap P.Text (TF.Attr s P.Text))",
                    "class": "HasSilenced",
                    "optional": true,
                    "label": "_silenced"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"tags\" <$> TF.attribute",
                    "name": "tags",
                    "method": "tags",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasTags",
                    "optional": true,
                    "label": "_tags"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"thresholds\" <$> TF.attribute",
                    "name": "thresholds",
                    "method": "thresholds",
                    "conflicts": [],
                    "type": "TF.Attr s (P.HashMap P.Text (Thresholds s))",
                    "class": "HasThresholds",
                    "optional": true,
                    "label": "_thresholds"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"timeout_h\" <$> TF.attribute",
                    "name": "timeout_h",
                    "method": "timeoutH",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasTimeoutH",
                    "optional": true,
                    "label": "_timeoutH"
                },
                {
                    "default": "_type'",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "type",
                    "method": "type'",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasType'",
                    "optional": false,
                    "label": "_type'"
                }
            ],
            "schema": "Resource",
            "name": "MonitorResource",
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"evaluation_delay\" <$> TF.attribute",
                    "name": "evaluation_delay",
                    "method": "computedEvaluationDelay",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasComputedEvaluationDelay",
                    "optional": true,
                    "label": "_computedEvaluationDelay"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"new_host_delay\" <$> TF.attribute",
                    "name": "new_host_delay",
                    "method": "computedNewHostDelay",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasComputedNewHostDelay",
                    "optional": true,
                    "label": "_computedNewHostDelay"
                }
            ],
            "parameters": [
                {
                    "default": "_message",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"message\" <$> TF.attribute",
                    "name": "message",
                    "method": "message",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMessage",
                    "optional": false,
                    "label": "_message"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "optional": false,
                    "label": "_name"
                },
                {
                    "default": "_query",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"query\" <$> TF.attribute",
                    "name": "query",
                    "method": "query",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasQuery",
                    "optional": false,
                    "label": "_query"
                },
                {
                    "default": "_type'",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "type",
                    "method": "type'",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasType'",
                    "optional": false,
                    "label": "_type'"
                }
            ],
            "type": "MonitorResource s",
            "original": "datadog_monitor"
        },
        {
            "arguments": [
                {
                    "default": "_description",
                    "computed": false,
                    "required": true,
                    "help": [
                        "A description of the dashboard's content."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"description\" <$> TF.attribute",
                    "name": "description",
                    "method": "description",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDescription",
                    "optional": false,
                    "label": "_description"
                },
                {
                    "default": "_graph",
                    "computed": false,
                    "required": true,
                    "help": [
                        "A list of graph definitions."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"graph\" <$> TF.attribute",
                    "name": "graph",
                    "method": "graph",
                    "conflicts": [],
                    "type": "TF.Attr s [Graph s]",
                    "class": "HasGraph",
                    "optional": false,
                    "label": "_graph"
                },
                {
                    "default": "TF.value P.False",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"read_only\" <$> TF.attribute",
                    "name": "read_only",
                    "method": "readOnly",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasReadOnly",
                    "optional": true,
                    "label": "_readOnly"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A list of template variables for using Dashboard templating."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"template_variable\" <$> TF.attribute",
                    "name": "template_variable",
                    "method": "templateVariable",
                    "conflicts": [],
                    "type": "TF.Attr s [TemplateVariable s]",
                    "class": "HasTemplateVariable",
                    "optional": true,
                    "label": "_templateVariable"
                },
                {
                    "default": "_title",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The name of the dashboard."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"title\" <$> TF.attribute",
                    "name": "title",
                    "method": "title",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasTitle",
                    "optional": false,
                    "label": "_title"
                }
            ],
            "schema": "Resource",
            "name": "TimeboardResource",
            "attributes": [],
            "parameters": [
                {
                    "default": "_description",
                    "computed": false,
                    "required": true,
                    "help": [
                        "A description of the dashboard's content."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"description\" <$> TF.attribute",
                    "name": "description",
                    "method": "description",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDescription",
                    "optional": false,
                    "label": "_description"
                },
                {
                    "default": "_graph",
                    "computed": false,
                    "required": true,
                    "help": [
                        "A list of graph definitions."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"graph\" <$> TF.attribute",
                    "name": "graph",
                    "method": "graph",
                    "conflicts": [],
                    "type": "TF.Attr s [Graph s]",
                    "class": "HasGraph",
                    "optional": false,
                    "label": "_graph"
                },
                {
                    "default": "_title",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The name of the dashboard."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"title\" <$> TF.attribute",
                    "name": "title",
                    "method": "title",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasTitle",
                    "optional": false,
                    "label": "_title"
                }
            ],
            "type": "TimeboardResource s",
            "original": "datadog_timeboard"
        },
        {
            "arguments": [
                {
                    "default": "TF.value P.False",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"disabled\" <$> TF.attribute",
                    "name": "disabled",
                    "method": "disabled",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasDisabled",
                    "optional": true,
                    "label": "_disabled"
                },
                {
                    "default": "_email",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"email\" <$> TF.attribute",
                    "name": "email",
                    "method": "email",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasEmail",
                    "optional": false,
                    "label": "_email"
                },
                {
                    "default": "_handle",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"handle\" <$> TF.attribute",
                    "name": "handle",
                    "method": "handle",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasHandle",
                    "optional": false,
                    "label": "_handle"
                },
                {
                    "default": "TF.value P.False",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"is_admin\" <$> TF.attribute",
                    "name": "is_admin",
                    "method": "isAdmin",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasIsAdmin",
                    "optional": true,
                    "label": "_isAdmin"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "optional": false,
                    "label": "_name"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"role\" <$> TF.attribute",
                    "name": "role",
                    "method": "role",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasRole",
                    "optional": true,
                    "label": "_role"
                }
            ],
            "schema": "Resource",
            "name": "UserResource",
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"verified\" <$> TF.attribute",
                    "name": "verified",
                    "method": "computedVerified",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasComputedVerified",
                    "optional": false,
                    "label": "_computedVerified"
                }
            ],
            "parameters": [
                {
                    "default": "_email",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"email\" <$> TF.attribute",
                    "name": "email",
                    "method": "email",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasEmail",
                    "optional": false,
                    "label": "_email"
                },
                {
                    "default": "_handle",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"handle\" <$> TF.attribute",
                    "name": "handle",
                    "method": "handle",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasHandle",
                    "optional": false,
                    "label": "_handle"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "optional": false,
                    "label": "_name"
                }
            ],
            "type": "UserResource s",
            "original": "datadog_user"
        }
    ],
    "dependencies": [
        "base",
        "unordered-containers",
        "text",
        "terrafomo",
        "hashable",
        "microlens"
    ],
    "name": "Datadog",
    "parameters": [
        {
            "default": "_apiKey",
            "computed": false,
            "required": true,
            "help": [],
            "forceNew": false,
            "encoder": "P.Just $ TF.assign \"api_key\"",
            "name": "api_key",
            "method": "apiKey",
            "conflicts": [],
            "type": "P.Text",
            "class": "HasApiKey",
            "optional": false,
            "label": "_apiKey"
        },
        {
            "default": "_appKey",
            "computed": false,
            "required": true,
            "help": [],
            "forceNew": false,
            "encoder": "P.Just $ TF.assign \"app_key\"",
            "name": "app_key",
            "method": "appKey",
            "conflicts": [],
            "type": "P.Text",
            "class": "HasAppKey",
            "optional": false,
            "label": "_appKey"
        }
    ],
    "package": "terrafomo-datadog",
    "type": "Provider",
    "original": "datadog"
}