{
    "settings": [
        {
            "con": {
                "smart": "newGraph",
                "name": "Graph'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Automatically scale graphs"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"autoscale\" <$> TF.attribute",
                    "name": "_autoscale",
                    "method": "autoscale",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasAutoscale",
                    "validate": false,
                    "optional": true,
                    "original": "autoscale"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Use a custom unit (like 'users')"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"custom_unit\" <$> TF.attribute",
                    "name": "_customUnit",
                    "method": "customUnit",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCustomUnit",
                    "validate": false,
                    "optional": true,
                    "original": "custom_unit"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Filter for events to be overlayed on the graph."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"events\" <$> TF.attribute",
                    "name": "_events",
                    "method": "events",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasEvents",
                    "validate": false,
                    "optional": true,
                    "original": "events"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A list of groupings for hostmap type graphs."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"group\" <$> TF.attribute",
                    "name": "_group",
                    "method": "group",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasGroup",
                    "validate": false,
                    "optional": true,
                    "original": "group"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Include hosts without metrics in hostmap graphs"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"include_no_metric_hosts\" <$> TF.attribute",
                    "name": "_includeNoMetricHosts",
                    "method": "includeNoMetricHosts",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasIncludeNoMetricHosts",
                    "validate": false,
                    "optional": true,
                    "original": "include_no_metric_hosts"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Include ungrouped hosts in hostmap graphs"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"include_ungrouped_hosts\" <$> TF.attribute",
                    "name": "_includeUngroupedHosts",
                    "method": "includeUngroupedHosts",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasIncludeUngroupedHosts",
                    "validate": false,
                    "optional": true,
                    "original": "include_ungrouped_hosts"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"marker\" <$> TF.attribute",
                    "name": "_marker",
                    "method": "marker",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (Marker s)]",
                    "class": "HasMarker",
                    "validate": true,
                    "optional": true,
                    "original": "marker"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "How many digits to show"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"precision\" <$> TF.attribute",
                    "name": "_precision",
                    "method": "precision",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPrecision",
                    "validate": false,
                    "optional": true,
                    "original": "precision"
                },
                {
                    "default": "_request",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"request\" <$> TF.attribute",
                    "name": "_request",
                    "method": "request",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (Request s)]",
                    "class": "HasRequest",
                    "validate": true,
                    "optional": false,
                    "original": "request"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A list of scope filters for hostmap type graphs."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"scope\" <$> TF.attribute",
                    "name": "_scope",
                    "method": "scope",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasScope",
                    "validate": false,
                    "optional": true,
                    "original": "scope"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"style\" <$> TF.attribute",
                    "name": "_style",
                    "method": "style",
                    "conflicts": [],
                    "type": "TF.Attr s (P.HashMap P.Text (TF.Attr s P.Text))",
                    "class": "HasStyle",
                    "validate": false,
                    "optional": true,
                    "original": "style"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "How to align text"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"text_align\" <$> TF.attribute",
                    "name": "_textAlign",
                    "method": "textAlign",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasTextAlign",
                    "validate": false,
                    "optional": true,
                    "original": "text_align"
                },
                {
                    "default": "_title",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The name of the graph."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"title\" <$> TF.attribute",
                    "name": "_title",
                    "method": "title",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasTitle",
                    "validate": false,
                    "optional": false,
                    "original": "title"
                },
                {
                    "default": "_viz",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"viz\" <$> TF.attribute",
                    "name": "_viz",
                    "method": "viz",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasViz",
                    "validate": false,
                    "optional": false,
                    "original": "viz"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"yaxis\" <$> TF.attribute",
                    "name": "_yaxis",
                    "method": "yaxis",
                    "conflicts": [],
                    "type": "TF.Attr s (P.HashMap P.Text (TF.Attr s P.Text))",
                    "class": "HasYaxis",
                    "validate": false,
                    "optional": true,
                    "original": "yaxis"
                }
            ],
            "name": "Graph",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_request",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"request\" <$> TF.attribute",
                    "name": "_request",
                    "method": "request",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (Request s)]",
                    "class": "HasRequest",
                    "validate": true,
                    "optional": false,
                    "original": "request"
                },
                {
                    "default": "_title",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The name of the graph."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"title\" <$> TF.attribute",
                    "name": "_title",
                    "method": "title",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasTitle",
                    "validate": false,
                    "optional": false,
                    "original": "title"
                },
                {
                    "default": "_viz",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"viz\" <$> TF.attribute",
                    "name": "_viz",
                    "method": "viz",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasViz",
                    "validate": false,
                    "optional": false,
                    "original": "viz"
                }
            ],
            "conflicts": [],
            "type": "Graph s",
            "original": "graph"
        },
        {
            "con": {
                "smart": "newRecurrence",
                "name": "Recurrence'"
            },
            "arguments": [
                {
                    "default": "_period",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"period\" <$> TF.attribute",
                    "name": "_period",
                    "method": "period",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasPeriod",
                    "validate": false,
                    "optional": false,
                    "original": "period"
                },
                {
                    "default": "_type'",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "_type'",
                    "method": "type'",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasType'",
                    "validate": false,
                    "optional": false,
                    "original": "type"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"until_date\" <$> TF.attribute",
                    "name": "_untilDate",
                    "method": "untilDate",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_untilOccurrences",
                            "method": "untilOccurrences"
                        }
                    ],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasUntilDate",
                    "validate": false,
                    "optional": true,
                    "original": "until_date"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"until_occurrences\" <$> TF.attribute",
                    "name": "_untilOccurrences",
                    "method": "untilOccurrences",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_untilDate",
                            "method": "untilDate"
                        }
                    ],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasUntilOccurrences",
                    "validate": false,
                    "optional": true,
                    "original": "until_occurrences"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"week_days\" <$> TF.attribute",
                    "name": "_weekDays",
                    "method": "weekDays",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasWeekDays",
                    "validate": false,
                    "optional": true,
                    "original": "week_days"
                }
            ],
            "name": "Recurrence",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_period",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"period\" <$> TF.attribute",
                    "name": "_period",
                    "method": "period",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasPeriod",
                    "validate": false,
                    "optional": false,
                    "original": "period"
                },
                {
                    "default": "_type'",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "_type'",
                    "method": "type'",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasType'",
                    "validate": false,
                    "optional": false,
                    "original": "type"
                }
            ],
            "conflicts": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"until_date\" <$> TF.attribute",
                    "name": "_untilDate",
                    "method": "untilDate",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_untilOccurrences",
                            "method": "untilOccurrences"
                        }
                    ],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasUntilDate",
                    "validate": false,
                    "optional": true,
                    "original": "until_date"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"until_occurrences\" <$> TF.attribute",
                    "name": "_untilOccurrences",
                    "method": "untilOccurrences",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_untilDate",
                            "method": "untilDate"
                        }
                    ],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasUntilOccurrences",
                    "validate": false,
                    "optional": true,
                    "original": "until_occurrences"
                }
            ],
            "type": "Recurrence s",
            "original": "recurrence"
        },
        {
            "con": {
                "smart": "newThresholds",
                "name": "Thresholds'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"critical\" <$> TF.attribute",
                    "name": "_critical",
                    "method": "critical",
                    "conflicts": [],
                    "type": "TF.Attr s P.Double",
                    "class": "HasCritical",
                    "validate": false,
                    "optional": true,
                    "original": "critical"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"critical_recovery\" <$> TF.attribute",
                    "name": "_criticalRecovery",
                    "method": "criticalRecovery",
                    "conflicts": [],
                    "type": "TF.Attr s P.Double",
                    "class": "HasCriticalRecovery",
                    "validate": false,
                    "optional": true,
                    "original": "critical_recovery"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"ok\" <$> TF.attribute",
                    "name": "_ok",
                    "method": "ok",
                    "conflicts": [],
                    "type": "TF.Attr s P.Double",
                    "class": "HasOk",
                    "validate": false,
                    "optional": true,
                    "original": "ok"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"unknown\" <$> TF.attribute",
                    "name": "_unknown",
                    "method": "unknown",
                    "conflicts": [],
                    "type": "TF.Attr s P.Double",
                    "class": "HasUnknown",
                    "validate": false,
                    "optional": true,
                    "original": "unknown"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"warning\" <$> TF.attribute",
                    "name": "_warning",
                    "method": "warning",
                    "conflicts": [],
                    "type": "TF.Attr s P.Double",
                    "class": "HasWarning",
                    "validate": false,
                    "optional": true,
                    "original": "warning"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"warning_recovery\" <$> TF.attribute",
                    "name": "_warningRecovery",
                    "method": "warningRecovery",
                    "conflicts": [],
                    "type": "TF.Attr s P.Double",
                    "class": "HasWarningRecovery",
                    "validate": false,
                    "optional": true,
                    "original": "warning_recovery"
                }
            ],
            "name": "Thresholds",
            "threaded": true,
            "attributes": [],
            "parameters": [],
            "conflicts": [],
            "type": "Thresholds s",
            "original": "thresholds"
        },
        {
            "con": {
                "smart": "newConditionalFormat",
                "name": "ConditionalFormat'"
            },
            "arguments": [
                {
                    "default": "_comparator",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Comparator (<, >, etc)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"comparator\" <$> TF.attribute",
                    "name": "_comparator",
                    "method": "comparator",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComparator",
                    "validate": false,
                    "optional": false,
                    "original": "comparator"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Custom background color (e.g., #205081)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"custom_bg_color\" <$> TF.attribute",
                    "name": "_customBgColor",
                    "method": "customBgColor",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCustomBgColor",
                    "validate": false,
                    "optional": true,
                    "original": "custom_bg_color"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Custom foreground color (e.g., #59afe1)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"custom_fg_color\" <$> TF.attribute",
                    "name": "_customFgColor",
                    "method": "customFgColor",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCustomFgColor",
                    "validate": false,
                    "optional": true,
                    "original": "custom_fg_color"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The palette to use if this condition is met."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"palette\" <$> TF.attribute",
                    "name": "_palette",
                    "method": "palette",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPalette",
                    "validate": false,
                    "optional": true,
                    "original": "palette"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Value that is threshold for conditional format"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"value\" <$> TF.attribute",
                    "name": "_value",
                    "method": "value",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasValue",
                    "validate": false,
                    "optional": true,
                    "original": "value"
                }
            ],
            "name": "ConditionalFormat",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_comparator",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Comparator (<, >, etc)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"comparator\" <$> TF.attribute",
                    "name": "_comparator",
                    "method": "comparator",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComparator",
                    "validate": false,
                    "optional": false,
                    "original": "comparator"
                }
            ],
            "conflicts": [],
            "type": "ConditionalFormat s",
            "original": "conditional_format"
        },
        {
            "con": {
                "smart": "newMarker",
                "name": "Marker'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"label\" <$> TF.attribute",
                    "name": "_label",
                    "method": "label",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasLabel",
                    "validate": false,
                    "optional": true,
                    "original": "label"
                },
                {
                    "default": "_type'",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "_type'",
                    "method": "type'",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasType'",
                    "validate": false,
                    "optional": false,
                    "original": "type"
                },
                {
                    "default": "_value",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"value\" <$> TF.attribute",
                    "name": "_value",
                    "method": "value",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasValue",
                    "validate": false,
                    "optional": false,
                    "original": "value"
                }
            ],
            "name": "Marker",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_type'",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "_type'",
                    "method": "type'",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasType'",
                    "validate": false,
                    "optional": false,
                    "original": "type"
                },
                {
                    "default": "_value",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"value\" <$> TF.attribute",
                    "name": "_value",
                    "method": "value",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasValue",
                    "validate": false,
                    "optional": false,
                    "original": "value"
                }
            ],
            "conflicts": [],
            "type": "Marker s",
            "original": "marker"
        },
        {
            "con": {
                "smart": "newTemplateVariable",
                "name": "TemplateVariable'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The default value for the template variable on dashboard load."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"default\" <$> TF.attribute",
                    "name": "_default'",
                    "method": "default'",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDefault'",
                    "validate": false,
                    "optional": true,
                    "original": "default"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The name of the variable."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The tag prefix associated with the variable. Only tags with this prefix will",
                        "appear in the variable dropdown."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"prefix\" <$> TF.attribute",
                    "name": "_prefix",
                    "method": "prefix",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPrefix",
                    "validate": false,
                    "optional": true,
                    "original": "prefix"
                }
            ],
            "name": "TemplateVariable",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The name of the variable."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                }
            ],
            "conflicts": [],
            "type": "TemplateVariable s",
            "original": "template_variable"
        },
        {
            "con": {
                "smart": "newRequest",
                "name": "Request'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"aggregator\" <$> TF.attribute",
                    "name": "_aggregator",
                    "method": "aggregator",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAggregator",
                    "validate": false,
                    "optional": true,
                    "original": "aggregator"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Type of change for change graphs."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"change_type\" <$> TF.attribute",
                    "name": "_changeType",
                    "method": "changeType",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasChangeType",
                    "validate": false,
                    "optional": true,
                    "original": "change_type"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The time period to compare change against in change graphs."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"compare_to\" <$> TF.attribute",
                    "name": "_compareTo",
                    "method": "compareTo",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCompareTo",
                    "validate": false,
                    "optional": true,
                    "original": "compare_to"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A list of conditional formatting rules."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"conditional_format\" <$> TF.attribute",
                    "name": "_conditionalFormat",
                    "method": "conditionalFormat",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (ConditionalFormat s)]",
                    "class": "HasConditionalFormat",
                    "validate": true,
                    "optional": true,
                    "original": "conditional_format"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "If set to 'present', this will include the present values in change graphs."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"extra_col\" <$> TF.attribute",
                    "name": "_extraCol",
                    "method": "extraCol",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasExtraCol",
                    "validate": false,
                    "optional": true,
                    "original": "extra_col"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Decides whether to represent increases as good or bad in change graphs."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"increase_good\" <$> TF.attribute",
                    "name": "_increaseGood",
                    "method": "increaseGood",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasIncreaseGood",
                    "validate": false,
                    "optional": true,
                    "original": "increase_good"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The field a change graph will be ordered by."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"order_by\" <$> TF.attribute",
                    "name": "_orderBy",
                    "method": "orderBy",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasOrderBy",
                    "validate": false,
                    "optional": true,
                    "original": "order_by"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Sort change graph in ascending or descending order."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"order_direction\" <$> TF.attribute",
                    "name": "_orderDirection",
                    "method": "orderDirection",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasOrderDirection",
                    "validate": false,
                    "optional": true,
                    "original": "order_direction"
                },
                {
                    "default": "_q",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"q\" <$> TF.attribute",
                    "name": "_q",
                    "method": "q",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasQ",
                    "validate": false,
                    "optional": false,
                    "original": "q"
                },
                {
                    "default": "TF.value P.False",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"stacked\" <$> TF.attribute",
                    "name": "_stacked",
                    "method": "stacked",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasStacked",
                    "validate": false,
                    "optional": true,
                    "original": "stacked"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"style\" <$> TF.attribute",
                    "name": "_style",
                    "method": "style",
                    "conflicts": [],
                    "type": "TF.Attr s (P.HashMap P.Text (TF.Attr s P.Text))",
                    "class": "HasStyle",
                    "validate": false,
                    "optional": true,
                    "original": "style"
                },
                {
                    "default": "TF.value \"line\"",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "_type'",
                    "method": "type'",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasType'",
                    "validate": false,
                    "optional": true,
                    "original": "type"
                }
            ],
            "name": "Request",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_q",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"q\" <$> TF.attribute",
                    "name": "_q",
                    "method": "q",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasQ",
                    "validate": false,
                    "optional": false,
                    "original": "q"
                }
            ],
            "conflicts": [],
            "type": "Request s",
            "original": "request"
        }
    ],
    "dataSources": [],
    "resources": [
        {
            "con": {
                "smart": "downtimeResource",
                "name": "DowntimeResource'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"active\" <$> TF.attribute",
                    "name": "_active",
                    "method": "active",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasActive",
                    "validate": false,
                    "optional": true,
                    "original": "active"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"disabled\" <$> TF.attribute",
                    "name": "_disabled",
                    "method": "disabled",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasDisabled",
                    "validate": false,
                    "optional": true,
                    "original": "disabled"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"end\" <$> TF.attribute",
                    "name": "_end",
                    "method": "end",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasEnd",
                    "validate": false,
                    "optional": true,
                    "original": "end"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"message\" <$> TF.attribute",
                    "name": "_message",
                    "method": "message",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMessage",
                    "validate": false,
                    "optional": true,
                    "original": "message"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"monitor_id\" <$> TF.attribute",
                    "name": "_monitorId",
                    "method": "monitorId",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasMonitorId",
                    "validate": false,
                    "optional": true,
                    "original": "monitor_id"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"recurrence\" <$> TF.attribute",
                    "name": "_recurrence",
                    "method": "recurrence",
                    "conflicts": [],
                    "type": "TF.Attr s (Recurrence s)",
                    "class": "HasRecurrence",
                    "validate": true,
                    "optional": true,
                    "original": "recurrence"
                },
                {
                    "default": "_scope",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"scope\" <$> TF.attribute",
                    "name": "_scope",
                    "method": "scope",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasScope",
                    "validate": false,
                    "optional": false,
                    "original": "scope"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"start\" <$> TF.attribute",
                    "name": "_start",
                    "method": "start",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasStart",
                    "validate": false,
                    "optional": true,
                    "original": "start"
                }
            ],
            "name": "DowntimeResource",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_scope",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"scope\" <$> TF.attribute",
                    "name": "_scope",
                    "method": "scope",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasScope",
                    "validate": false,
                    "optional": false,
                    "original": "scope"
                }
            ],
            "conflicts": [],
            "type": "DowntimeResource s",
            "original": "datadog_downtime"
        },
        {
            "con": {
                "smart": "metricMetadataResource",
                "name": "MetricMetadataResource'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"description\" <$> TF.attribute",
                    "name": "_description",
                    "method": "description",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDescription",
                    "validate": false,
                    "optional": true,
                    "original": "description"
                },
                {
                    "default": "_metric",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"metric\" <$> TF.attribute",
                    "name": "_metric",
                    "method": "metric",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMetric",
                    "validate": false,
                    "optional": false,
                    "original": "metric"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"per_unit\" <$> TF.attribute",
                    "name": "_perUnit",
                    "method": "perUnit",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPerUnit",
                    "validate": false,
                    "optional": true,
                    "original": "per_unit"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"short_name\" <$> TF.attribute",
                    "name": "_shortName",
                    "method": "shortName",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasShortName",
                    "validate": false,
                    "optional": true,
                    "original": "short_name"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"statsd_interval\" <$> TF.attribute",
                    "name": "_statsdInterval",
                    "method": "statsdInterval",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasStatsdInterval",
                    "validate": false,
                    "optional": true,
                    "original": "statsd_interval"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "_type'",
                    "method": "type'",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasType'",
                    "validate": false,
                    "optional": true,
                    "original": "type"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"unit\" <$> TF.attribute",
                    "name": "_unit",
                    "method": "unit",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUnit",
                    "validate": false,
                    "optional": true,
                    "original": "unit"
                }
            ],
            "name": "MetricMetadataResource",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_metric",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"metric\" <$> TF.attribute",
                    "name": "_metric",
                    "method": "metric",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMetric",
                    "validate": false,
                    "optional": false,
                    "original": "metric"
                }
            ],
            "conflicts": [],
            "type": "MetricMetadataResource s",
            "original": "datadog_metric_metadata"
        },
        {
            "con": {
                "smart": "monitorResource",
                "name": "MonitorResource'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"escalation_message\" <$> TF.attribute",
                    "name": "_escalationMessage",
                    "method": "escalationMessage",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasEscalationMessage",
                    "validate": false,
                    "optional": true,
                    "original": "escalation_message"
                },
                {
                    "default": "TF.value P.True",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"include_tags\" <$> TF.attribute",
                    "name": "_includeTags",
                    "method": "includeTags",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasIncludeTags",
                    "validate": false,
                    "optional": true,
                    "original": "include_tags"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"locked\" <$> TF.attribute",
                    "name": "_locked",
                    "method": "locked",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasLocked",
                    "validate": false,
                    "optional": true,
                    "original": "locked"
                },
                {
                    "default": "_message",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"message\" <$> TF.attribute",
                    "name": "_message",
                    "method": "message",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMessage",
                    "validate": false,
                    "optional": false,
                    "original": "message"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"no_data_timeframe\" <$> TF.attribute",
                    "name": "_noDataTimeframe",
                    "method": "noDataTimeframe",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasNoDataTimeframe",
                    "validate": false,
                    "optional": true,
                    "original": "no_data_timeframe"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"notify_audit\" <$> TF.attribute",
                    "name": "_notifyAudit",
                    "method": "notifyAudit",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasNotifyAudit",
                    "validate": false,
                    "optional": true,
                    "original": "notify_audit"
                },
                {
                    "default": "TF.value P.False",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"notify_no_data\" <$> TF.attribute",
                    "name": "_notifyNoData",
                    "method": "notifyNoData",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasNotifyNoData",
                    "validate": false,
                    "optional": true,
                    "original": "notify_no_data"
                },
                {
                    "default": "_query",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"query\" <$> TF.attribute",
                    "name": "_query",
                    "method": "query",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasQuery",
                    "validate": false,
                    "optional": false,
                    "original": "query"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"renotify_interval\" <$> TF.attribute",
                    "name": "_renotifyInterval",
                    "method": "renotifyInterval",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasRenotifyInterval",
                    "validate": false,
                    "optional": true,
                    "original": "renotify_interval"
                },
                {
                    "default": "TF.value P.True",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"require_full_window\" <$> TF.attribute",
                    "name": "_requireFullWindow",
                    "method": "requireFullWindow",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasRequireFullWindow",
                    "validate": false,
                    "optional": true,
                    "original": "require_full_window"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"silenced\" <$> TF.attribute",
                    "name": "_silenced",
                    "method": "silenced",
                    "conflicts": [],
                    "type": "TF.Attr s (P.HashMap P.Text (TF.Attr s P.Text))",
                    "class": "HasSilenced",
                    "validate": false,
                    "optional": true,
                    "original": "silenced"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"tags\" <$> TF.attribute",
                    "name": "_tags",
                    "method": "tags",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasTags",
                    "validate": false,
                    "optional": true,
                    "original": "tags"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"thresholds\" <$> TF.attribute",
                    "name": "_thresholds",
                    "method": "thresholds",
                    "conflicts": [],
                    "type": "TF.Attr s (P.HashMap P.Text (Thresholds s))",
                    "class": "HasThresholds",
                    "validate": true,
                    "optional": true,
                    "original": "thresholds"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"timeout_h\" <$> TF.attribute",
                    "name": "_timeoutH",
                    "method": "timeoutH",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasTimeoutH",
                    "validate": false,
                    "optional": true,
                    "original": "timeout_h"
                },
                {
                    "default": "_type'",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "_type'",
                    "method": "type'",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasType'",
                    "validate": false,
                    "optional": false,
                    "original": "type"
                }
            ],
            "name": "MonitorResource",
            "threaded": true,
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"evaluation_delay\" <$> TF.attribute",
                    "name": "_computedEvaluationDelay",
                    "method": "computedEvaluationDelay",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasComputedEvaluationDelay",
                    "validate": false,
                    "optional": true,
                    "original": "evaluation_delay"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"new_host_delay\" <$> TF.attribute",
                    "name": "_computedNewHostDelay",
                    "method": "computedNewHostDelay",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasComputedNewHostDelay",
                    "validate": false,
                    "optional": true,
                    "original": "new_host_delay"
                }
            ],
            "parameters": [
                {
                    "default": "_message",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"message\" <$> TF.attribute",
                    "name": "_message",
                    "method": "message",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMessage",
                    "validate": false,
                    "optional": false,
                    "original": "message"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                },
                {
                    "default": "_query",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"query\" <$> TF.attribute",
                    "name": "_query",
                    "method": "query",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasQuery",
                    "validate": false,
                    "optional": false,
                    "original": "query"
                },
                {
                    "default": "_type'",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "_type'",
                    "method": "type'",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasType'",
                    "validate": false,
                    "optional": false,
                    "original": "type"
                }
            ],
            "conflicts": [],
            "type": "MonitorResource s",
            "original": "datadog_monitor"
        },
        {
            "con": {
                "smart": "timeboardResource",
                "name": "TimeboardResource'"
            },
            "arguments": [
                {
                    "default": "_description",
                    "computed": false,
                    "required": true,
                    "help": [
                        "A description of the dashboard's content."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"description\" <$> TF.attribute",
                    "name": "_description",
                    "method": "description",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDescription",
                    "validate": false,
                    "optional": false,
                    "original": "description"
                },
                {
                    "default": "_graph",
                    "computed": false,
                    "required": true,
                    "help": [
                        "A list of graph definitions."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"graph\" <$> TF.attribute",
                    "name": "_graph",
                    "method": "graph",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (Graph s)]",
                    "class": "HasGraph",
                    "validate": true,
                    "optional": false,
                    "original": "graph"
                },
                {
                    "default": "TF.value P.False",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"read_only\" <$> TF.attribute",
                    "name": "_readOnly",
                    "method": "readOnly",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasReadOnly",
                    "validate": false,
                    "optional": true,
                    "original": "read_only"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A list of template variables for using Dashboard templating."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"template_variable\" <$> TF.attribute",
                    "name": "_templateVariable",
                    "method": "templateVariable",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (TemplateVariable s)]",
                    "class": "HasTemplateVariable",
                    "validate": true,
                    "optional": true,
                    "original": "template_variable"
                },
                {
                    "default": "_title",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The name of the dashboard."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"title\" <$> TF.attribute",
                    "name": "_title",
                    "method": "title",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasTitle",
                    "validate": false,
                    "optional": false,
                    "original": "title"
                }
            ],
            "name": "TimeboardResource",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_description",
                    "computed": false,
                    "required": true,
                    "help": [
                        "A description of the dashboard's content."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"description\" <$> TF.attribute",
                    "name": "_description",
                    "method": "description",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDescription",
                    "validate": false,
                    "optional": false,
                    "original": "description"
                },
                {
                    "default": "_graph",
                    "computed": false,
                    "required": true,
                    "help": [
                        "A list of graph definitions."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"graph\" <$> TF.attribute",
                    "name": "_graph",
                    "method": "graph",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (Graph s)]",
                    "class": "HasGraph",
                    "validate": true,
                    "optional": false,
                    "original": "graph"
                },
                {
                    "default": "_title",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The name of the dashboard."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"title\" <$> TF.attribute",
                    "name": "_title",
                    "method": "title",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasTitle",
                    "validate": false,
                    "optional": false,
                    "original": "title"
                }
            ],
            "conflicts": [],
            "type": "TimeboardResource s",
            "original": "datadog_timeboard"
        },
        {
            "con": {
                "smart": "userResource",
                "name": "UserResource'"
            },
            "arguments": [
                {
                    "default": "TF.value P.False",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"disabled\" <$> TF.attribute",
                    "name": "_disabled",
                    "method": "disabled",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasDisabled",
                    "validate": false,
                    "optional": true,
                    "original": "disabled"
                },
                {
                    "default": "_email",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"email\" <$> TF.attribute",
                    "name": "_email",
                    "method": "email",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasEmail",
                    "validate": false,
                    "optional": false,
                    "original": "email"
                },
                {
                    "default": "_handle",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"handle\" <$> TF.attribute",
                    "name": "_handle",
                    "method": "handle",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasHandle",
                    "validate": false,
                    "optional": false,
                    "original": "handle"
                },
                {
                    "default": "TF.value P.False",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"is_admin\" <$> TF.attribute",
                    "name": "_isAdmin",
                    "method": "isAdmin",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasIsAdmin",
                    "validate": false,
                    "optional": true,
                    "original": "is_admin"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"role\" <$> TF.attribute",
                    "name": "_role",
                    "method": "role",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasRole",
                    "validate": false,
                    "optional": true,
                    "original": "role"
                }
            ],
            "name": "UserResource",
            "threaded": true,
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"verified\" <$> TF.attribute",
                    "name": "_computedVerified",
                    "method": "computedVerified",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasComputedVerified",
                    "validate": false,
                    "optional": false,
                    "original": "verified"
                }
            ],
            "parameters": [
                {
                    "default": "_email",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"email\" <$> TF.attribute",
                    "name": "_email",
                    "method": "email",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasEmail",
                    "validate": false,
                    "optional": false,
                    "original": "email"
                },
                {
                    "default": "_handle",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"handle\" <$> TF.attribute",
                    "name": "_handle",
                    "method": "handle",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasHandle",
                    "validate": false,
                    "optional": false,
                    "original": "handle"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                }
            ],
            "conflicts": [],
            "type": "UserResource s",
            "original": "datadog_user"
        }
    ],
    "schema": {
        "con": {
            "smart": "newProvider",
            "name": "Provider'"
        },
        "arguments": [
            {
                "default": "_apiKey",
                "computed": false,
                "required": true,
                "help": [],
                "forceNew": false,
                "encoder": "P.Just $ TF.assign \"api_key\"",
                "name": "_apiKey",
                "method": "apiKey",
                "conflicts": [],
                "type": "P.Text",
                "class": "HasApiKey",
                "validate": false,
                "optional": false,
                "original": "api_key"
            },
            {
                "default": "_appKey",
                "computed": false,
                "required": true,
                "help": [],
                "forceNew": false,
                "encoder": "P.Just $ TF.assign \"app_key\"",
                "name": "_appKey",
                "method": "appKey",
                "conflicts": [],
                "type": "P.Text",
                "class": "HasAppKey",
                "validate": false,
                "optional": false,
                "original": "app_key"
            }
        ],
        "name": "Provider",
        "threaded": false,
        "attributes": [],
        "parameters": [
            {
                "default": "_apiKey",
                "computed": false,
                "required": true,
                "help": [],
                "forceNew": false,
                "encoder": "P.Just $ TF.assign \"api_key\"",
                "name": "_apiKey",
                "method": "apiKey",
                "conflicts": [],
                "type": "P.Text",
                "class": "HasApiKey",
                "validate": false,
                "optional": false,
                "original": "api_key"
            },
            {
                "default": "_appKey",
                "computed": false,
                "required": true,
                "help": [],
                "forceNew": false,
                "encoder": "P.Just $ TF.assign \"app_key\"",
                "name": "_appKey",
                "method": "appKey",
                "conflicts": [],
                "type": "P.Text",
                "class": "HasAppKey",
                "validate": false,
                "optional": false,
                "original": "app_key"
            }
        ],
        "conflicts": [],
        "type": "Provider",
        "original": "provider"
    },
    "dependencies": [
        "base",
        "unordered-containers",
        "text",
        "terrafomo",
        "hashable",
        "microlens"
    ],
    "name": "Datadog",
    "package": "terrafomo-datadog",
    "original": "datadog"
}