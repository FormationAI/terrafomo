{
    "settings": [
        {
            "con": {
                "smart": "newAuthSetting",
                "name": "AuthSetting'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"password\" <$> TF.attribute",
                    "name": "_password",
                    "method": "password",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPassword",
                    "validate": false,
                    "optional": true,
                    "original": "password"
                },
                {
                    "default": "_serverAddress",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"server_address\" <$> TF.attribute",
                    "name": "_serverAddress",
                    "method": "serverAddress",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasServerAddress",
                    "validate": false,
                    "optional": false,
                    "original": "server_address"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"username\" <$> TF.attribute",
                    "name": "_username",
                    "method": "username",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUsername",
                    "validate": false,
                    "optional": true,
                    "original": "username"
                }
            ],
            "key": "docker_service.auth",
            "name": "AuthSetting",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_serverAddress",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"server_address\" <$> TF.attribute",
                    "name": "_serverAddress",
                    "method": "serverAddress",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasServerAddress",
                    "validate": false,
                    "optional": false,
                    "original": "server_address"
                }
            ],
            "conflicts": [],
            "type": "AuthSetting s",
            "original": "auth"
        },
        {
            "con": {
                "smart": "newBindOptionsSetting",
                "name": "BindOptionsSetting'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A propagation mode with the value"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"propagation\" <$> TF.attribute",
                    "name": "_propagation",
                    "method": "propagation",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPropagation",
                    "validate": false,
                    "optional": true,
                    "original": "propagation"
                }
            ],
            "key": "docker_service.task_spec.container_spec.mounts.bind_options",
            "name": "BindOptionsSetting",
            "threaded": true,
            "attributes": [],
            "parameters": [],
            "conflicts": [],
            "type": "BindOptionsSetting s",
            "original": "bind_options"
        },
        {
            "con": {
                "smart": "newCapabilitiesSetting",
                "name": "CapabilitiesSetting'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"add\" <$> TF.attribute",
                    "name": "_add",
                    "method": "add",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasAdd",
                    "validate": false,
                    "optional": true,
                    "original": "add"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"drop\" <$> TF.attribute",
                    "name": "_drop",
                    "method": "drop",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasDrop",
                    "validate": false,
                    "optional": true,
                    "original": "drop"
                }
            ],
            "key": "docker_container.capabilities",
            "name": "CapabilitiesSetting",
            "threaded": true,
            "attributes": [],
            "parameters": [],
            "conflicts": [],
            "type": "CapabilitiesSetting s",
            "original": "capabilities"
        },
        {
            "con": {
                "smart": "newConfigsSetting",
                "name": "ConfigsSetting'"
            },
            "arguments": [
                {
                    "default": "_configId",
                    "computed": false,
                    "required": true,
                    "help": [
                        "ID of the specific config that we're referencing"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"config_id\" <$> TF.attribute",
                    "name": "_configId",
                    "method": "configId",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasConfigId",
                    "validate": false,
                    "optional": false,
                    "original": "config_id"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Name of the config that this references, but this is just provided for",
                        "lookup/display purposes. The config in the reference will be identified by",
                        "its ID"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"config_name\" <$> TF.attribute",
                    "name": "_configName",
                    "method": "configName",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasConfigName",
                    "validate": false,
                    "optional": true,
                    "original": "config_name"
                },
                {
                    "default": "_fileName",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Represents the final filename in the filesystem"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"file_name\" <$> TF.attribute",
                    "name": "_fileName",
                    "method": "fileName",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasFileName",
                    "validate": false,
                    "optional": false,
                    "original": "file_name"
                }
            ],
            "key": "docker_service.task_spec.container_spec.configs",
            "name": "ConfigsSetting",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_configId",
                    "computed": false,
                    "required": true,
                    "help": [
                        "ID of the specific config that we're referencing"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"config_id\" <$> TF.attribute",
                    "name": "_configId",
                    "method": "configId",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasConfigId",
                    "validate": false,
                    "optional": false,
                    "original": "config_id"
                },
                {
                    "default": "_fileName",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Represents the final filename in the filesystem"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"file_name\" <$> TF.attribute",
                    "name": "_fileName",
                    "method": "fileName",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasFileName",
                    "validate": false,
                    "optional": false,
                    "original": "file_name"
                }
            ],
            "conflicts": [],
            "type": "ConfigsSetting s",
            "original": "configs"
        },
        {
            "con": {
                "smart": "newContainerSpecSetting",
                "name": "ContainerSpecSetting'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Arguments to the command"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"args\" <$> TF.attribute",
                    "name": "_args",
                    "method": "args",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasArgs",
                    "validate": false,
                    "optional": true,
                    "original": "args"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The command to be run in the image"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"command\" <$> TF.attribute",
                    "name": "_command",
                    "method": "command",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasCommand",
                    "validate": false,
                    "optional": true,
                    "original": "command"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "References to zero or more configs that will be exposed to the service"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"configs\" <$> TF.attribute",
                    "name": "_configs",
                    "method": "configs",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (ConfigsSetting s)]",
                    "class": "HasConfigs",
                    "validate": false,
                    "optional": true,
                    "original": "configs"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The working directory for commands to run in"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"dir\" <$> TF.attribute",
                    "name": "_dir",
                    "method": "dir",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDir",
                    "validate": false,
                    "optional": true,
                    "original": "dir"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A list of environment variables in the form VAR=\"value\""
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"env\" <$> TF.attribute",
                    "name": "_env",
                    "method": "env",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s (P.Map P.Text (TF.Attr s P.Text))",
                    "class": "HasEnv",
                    "validate": false,
                    "optional": true,
                    "original": "env"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A list of additional groups that the container process will run as"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"groups\" <$> TF.attribute",
                    "name": "_groups",
                    "method": "groups",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasGroups",
                    "validate": false,
                    "optional": true,
                    "original": "groups"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The hostname to use for the container, as a valid RFC 1123 hostname"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"hostname\" <$> TF.attribute",
                    "name": "_hostname",
                    "method": "hostname",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasHostname",
                    "validate": false,
                    "optional": true,
                    "original": "hostname"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A list of hostname/IP mappings to add to the container's hosts file."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"hosts\" <$> TF.attribute",
                    "name": "_hosts",
                    "method": "hosts",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (HostsSetting s)]",
                    "class": "HasHosts",
                    "validate": false,
                    "optional": true,
                    "original": "hosts"
                },
                {
                    "default": "_image",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The image name to use for the containers of the service"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"image\" <$> TF.attribute",
                    "name": "_image",
                    "method": "image",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasImage",
                    "validate": false,
                    "optional": false,
                    "original": "image"
                },
                {
                    "default": "TF.value \"default\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Isolation technology of the containers running the service. (Windows only)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"isolation\" <$> TF.attribute",
                    "name": "_isolation",
                    "method": "isolation",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasIsolation",
                    "validate": false,
                    "optional": true,
                    "original": "isolation"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "User-defined key/value metadata"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"labels\" <$> TF.attribute",
                    "name": "_labels",
                    "method": "labels",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s (P.Map P.Text (TF.Attr s P.Text))",
                    "class": "HasLabels",
                    "validate": false,
                    "optional": true,
                    "original": "labels"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Specification for mounts to be added to containers created as part of the",
                        "service"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"mounts\" <$> TF.attribute",
                    "name": "_mounts",
                    "method": "mounts",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (MountsSetting s)]",
                    "class": "HasMounts",
                    "validate": false,
                    "optional": true,
                    "original": "mounts"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Security options for the container"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"privileges\" <$> TF.attribute",
                    "name": "_privileges",
                    "method": "privileges",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s (PrivilegesSetting s)",
                    "class": "HasPrivileges",
                    "validate": true,
                    "optional": true,
                    "original": "privileges"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Mount the container's root filesystem as read only"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"read_only\" <$> TF.attribute",
                    "name": "_readOnly",
                    "method": "readOnly",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasReadOnly",
                    "validate": false,
                    "optional": true,
                    "original": "read_only"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "References to zero or more secrets that will be exposed to the service"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"secrets\" <$> TF.attribute",
                    "name": "_secrets",
                    "method": "secrets",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (SecretsSetting s)]",
                    "class": "HasSecrets",
                    "validate": false,
                    "optional": true,
                    "original": "secrets"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Signal to stop the container"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"stop_signal\" <$> TF.attribute",
                    "name": "_stopSignal",
                    "method": "stopSignal",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasStopSignal",
                    "validate": false,
                    "optional": true,
                    "original": "stop_signal"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The user inside the container"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"user\" <$> TF.attribute",
                    "name": "_user",
                    "method": "user",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUser",
                    "validate": false,
                    "optional": true,
                    "original": "user"
                }
            ],
            "key": "docker_service.task_spec.container_spec",
            "name": "ContainerSpecSetting",
            "threaded": true,
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Specification for DNS related configurations in resolver configuration file",
                        "(resolv.conf)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"dns_config\" <$> TF.attribute",
                    "name": "_computedDnsConfig",
                    "method": "computedDnsConfig",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s (DnsConfigSetting s)",
                    "class": "HasComputedDnsConfig",
                    "validate": true,
                    "optional": true,
                    "original": "dns_config"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "A test to perform to check that the container is healthy"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"healthcheck\" <$> TF.attribute",
                    "name": "_computedHealthcheck",
                    "method": "computedHealthcheck",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s (HealthcheckSetting s)",
                    "class": "HasComputedHealthcheck",
                    "validate": true,
                    "optional": true,
                    "original": "healthcheck"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Amount of time to wait for the container to terminate before forcefully",
                        "removing it (ms|s|m|h)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"stop_grace_period\" <$> TF.attribute",
                    "name": "_computedStopGracePeriod",
                    "method": "computedStopGracePeriod",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedStopGracePeriod",
                    "validate": false,
                    "optional": true,
                    "original": "stop_grace_period"
                }
            ],
            "parameters": [
                {
                    "default": "_image",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The image name to use for the containers of the service"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"image\" <$> TF.attribute",
                    "name": "_image",
                    "method": "image",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasImage",
                    "validate": false,
                    "optional": false,
                    "original": "image"
                }
            ],
            "conflicts": [],
            "type": "ContainerSpecSetting s",
            "original": "container_spec"
        },
        {
            "con": {
                "smart": "newConvergeConfigSetting",
                "name": "ConvergeConfigSetting'"
            },
            "arguments": [
                {
                    "default": "TF.value \"7s\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The interval to check if the desired state is reached (ms|s). Default: 7s"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"delay\" <$> TF.attribute",
                    "name": "_delay",
                    "method": "delay",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDelay",
                    "validate": false,
                    "optional": true,
                    "original": "delay"
                },
                {
                    "default": "TF.value \"3m\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The timeout of the service to reach the desired state (s|m). Default: 3m"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"timeout\" <$> TF.attribute",
                    "name": "_timeout",
                    "method": "timeout",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasTimeout",
                    "validate": false,
                    "optional": true,
                    "original": "timeout"
                }
            ],
            "key": "docker_service.converge_config",
            "name": "ConvergeConfigSetting",
            "threaded": true,
            "attributes": [],
            "parameters": [],
            "conflicts": [],
            "type": "ConvergeConfigSetting s",
            "original": "converge_config"
        },
        {
            "con": {
                "smart": "newCredentialSpecSetting",
                "name": "CredentialSpecSetting'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Load credential spec from this file"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"file\" <$> TF.attribute",
                    "name": "_file",
                    "method": "file",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasFile",
                    "validate": false,
                    "optional": true,
                    "original": "file"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Load credential spec from this value in the Windows registry"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"registry\" <$> TF.attribute",
                    "name": "_registry",
                    "method": "registry",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasRegistry",
                    "validate": false,
                    "optional": true,
                    "original": "registry"
                }
            ],
            "key": "docker_service.task_spec.container_spec.privileges.credential_spec",
            "name": "CredentialSpecSetting",
            "threaded": true,
            "attributes": [],
            "parameters": [],
            "conflicts": [],
            "type": "CredentialSpecSetting s",
            "original": "credential_spec"
        },
        {
            "con": {
                "smart": "newDevicesSetting",
                "name": "DevicesSetting'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"container_path\" <$> TF.attribute",
                    "name": "_containerPath",
                    "method": "containerPath",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasContainerPath",
                    "validate": false,
                    "optional": true,
                    "original": "container_path"
                },
                {
                    "default": "_hostPath",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"host_path\" <$> TF.attribute",
                    "name": "_hostPath",
                    "method": "hostPath",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasHostPath",
                    "validate": false,
                    "optional": false,
                    "original": "host_path"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"permissions\" <$> TF.attribute",
                    "name": "_permissions",
                    "method": "permissions",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPermissions",
                    "validate": false,
                    "optional": true,
                    "original": "permissions"
                }
            ],
            "key": "docker_container.devices",
            "name": "DevicesSetting",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_hostPath",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"host_path\" <$> TF.attribute",
                    "name": "_hostPath",
                    "method": "hostPath",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasHostPath",
                    "validate": false,
                    "optional": false,
                    "original": "host_path"
                }
            ],
            "conflicts": [],
            "type": "DevicesSetting s",
            "original": "devices"
        },
        {
            "con": {
                "smart": "newDnsConfigSetting",
                "name": "DnsConfigSetting'"
            },
            "arguments": [
                {
                    "default": "_nameservers",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The IP addresses of the name servers"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"nameservers\" <$> TF.attribute",
                    "name": "_nameservers",
                    "method": "nameservers",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasNameservers",
                    "validate": false,
                    "optional": false,
                    "original": "nameservers"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A list of internal resolver variables to be modified (e.g., debug, ndots:3,",
                        "etc.)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"options\" <$> TF.attribute",
                    "name": "_options",
                    "method": "options",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasOptions",
                    "validate": false,
                    "optional": true,
                    "original": "options"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A search list for host-name lookup"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"search\" <$> TF.attribute",
                    "name": "_search",
                    "method": "search",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasSearch",
                    "validate": false,
                    "optional": true,
                    "original": "search"
                }
            ],
            "key": "docker_service.task_spec.container_spec.dns_config",
            "name": "DnsConfigSetting",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_nameservers",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The IP addresses of the name servers"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"nameservers\" <$> TF.attribute",
                    "name": "_nameservers",
                    "method": "nameservers",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasNameservers",
                    "validate": false,
                    "optional": false,
                    "original": "nameservers"
                }
            ],
            "conflicts": [],
            "type": "DnsConfigSetting s",
            "original": "dns_config"
        },
        {
            "con": {
                "smart": "newEndpointSpecSetting",
                "name": "EndpointSpecSetting'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "List of exposed ports that this service is accessible on from the outside.",
                        "Ports can only be provided if 'vip' resolution mode is used."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"ports\" <$> TF.attribute",
                    "name": "_ports",
                    "method": "ports",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (PortsSetting s)]",
                    "class": "HasPorts",
                    "validate": false,
                    "optional": true,
                    "original": "ports"
                }
            ],
            "key": "docker_service.endpoint_spec",
            "name": "EndpointSpecSetting",
            "threaded": true,
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "The mode of resolution to use for internal load balancing between tasks"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"mode\" <$> TF.attribute",
                    "name": "_computedMode",
                    "method": "computedMode",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedMode",
                    "validate": false,
                    "optional": true,
                    "original": "mode"
                }
            ],
            "parameters": [],
            "conflicts": [],
            "type": "EndpointSpecSetting s",
            "original": "endpoint_spec"
        },
        {
            "con": {
                "smart": "newGenericResourcesSetting",
                "name": "GenericResourcesSetting'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The Integer resources"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"discrete_resources_spec\" <$> TF.attribute",
                    "name": "_discreteResourcesSpec",
                    "method": "discreteResourcesSpec",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasDiscreteResourcesSpec",
                    "validate": false,
                    "optional": true,
                    "original": "discrete_resources_spec"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The String resources"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"named_resources_spec\" <$> TF.attribute",
                    "name": "_namedResourcesSpec",
                    "method": "namedResourcesSpec",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasNamedResourcesSpec",
                    "validate": false,
                    "optional": true,
                    "original": "named_resources_spec"
                }
            ],
            "key": "docker_service.task_spec.resources.limits.generic_resources",
            "name": "GenericResourcesSetting",
            "threaded": true,
            "attributes": [],
            "parameters": [],
            "conflicts": [],
            "type": "GenericResourcesSetting s",
            "original": "generic_resources"
        },
        {
            "con": {
                "smart": "newHealthcheckSetting",
                "name": "HealthcheckSetting'"
            },
            "arguments": [
                {
                    "default": "TF.value \"0s\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Time between running the check (ms|s|m|h)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"interval\" <$> TF.attribute",
                    "name": "_interval",
                    "method": "interval",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasInterval",
                    "validate": false,
                    "optional": true,
                    "original": "interval"
                },
                {
                    "default": "TF.value 0",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Consecutive failures needed to report unhealthy"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"retries\" <$> TF.attribute",
                    "name": "_retries",
                    "method": "retries",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Int",
                    "class": "HasRetries",
                    "validate": false,
                    "optional": true,
                    "original": "retries"
                },
                {
                    "default": "TF.value \"0s\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Start period for the container to initialize before counting retries towards",
                        "unstable (ms|s|m|h)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"start_period\" <$> TF.attribute",
                    "name": "_startPeriod",
                    "method": "startPeriod",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasStartPeriod",
                    "validate": false,
                    "optional": true,
                    "original": "start_period"
                },
                {
                    "default": "_test",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The test to perform as list"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"test\" <$> TF.attribute",
                    "name": "_test",
                    "method": "test",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasTest",
                    "validate": false,
                    "optional": false,
                    "original": "test"
                },
                {
                    "default": "TF.value \"0s\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Maximum time to allow one check to run (ms|s|m|h)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"timeout\" <$> TF.attribute",
                    "name": "_timeout",
                    "method": "timeout",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasTimeout",
                    "validate": false,
                    "optional": true,
                    "original": "timeout"
                }
            ],
            "key": "docker_service.task_spec.container_spec.healthcheck",
            "name": "HealthcheckSetting",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_test",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The test to perform as list"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"test\" <$> TF.attribute",
                    "name": "_test",
                    "method": "test",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasTest",
                    "validate": false,
                    "optional": false,
                    "original": "test"
                }
            ],
            "conflicts": [],
            "type": "HealthcheckSetting s",
            "original": "healthcheck"
        },
        {
            "con": {
                "smart": "newHostSetting",
                "name": "HostSetting'"
            },
            "arguments": [
                {
                    "default": "_host",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"host\" <$> TF.attribute",
                    "name": "_host",
                    "method": "host",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasHost",
                    "validate": false,
                    "optional": false,
                    "original": "host"
                },
                {
                    "default": "_ip",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"ip\" <$> TF.attribute",
                    "name": "_ip",
                    "method": "ip",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasIp",
                    "validate": false,
                    "optional": false,
                    "original": "ip"
                }
            ],
            "key": "docker_container.host",
            "name": "HostSetting",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_host",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"host\" <$> TF.attribute",
                    "name": "_host",
                    "method": "host",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasHost",
                    "validate": false,
                    "optional": false,
                    "original": "host"
                },
                {
                    "default": "_ip",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"ip\" <$> TF.attribute",
                    "name": "_ip",
                    "method": "ip",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasIp",
                    "validate": false,
                    "optional": false,
                    "original": "ip"
                }
            ],
            "conflicts": [],
            "type": "HostSetting s",
            "original": "host"
        },
        {
            "con": {
                "smart": "newHostsSetting",
                "name": "HostsSetting'"
            },
            "arguments": [
                {
                    "default": "_host",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"host\" <$> TF.attribute",
                    "name": "_host",
                    "method": "host",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasHost",
                    "validate": false,
                    "optional": false,
                    "original": "host"
                },
                {
                    "default": "_ip",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"ip\" <$> TF.attribute",
                    "name": "_ip",
                    "method": "ip",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasIp",
                    "validate": false,
                    "optional": false,
                    "original": "ip"
                }
            ],
            "key": "docker_service.task_spec.container_spec.hosts",
            "name": "HostsSetting",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_host",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"host\" <$> TF.attribute",
                    "name": "_host",
                    "method": "host",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasHost",
                    "validate": false,
                    "optional": false,
                    "original": "host"
                },
                {
                    "default": "_ip",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"ip\" <$> TF.attribute",
                    "name": "_ip",
                    "method": "ip",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasIp",
                    "validate": false,
                    "optional": false,
                    "original": "ip"
                }
            ],
            "conflicts": [],
            "type": "HostsSetting s",
            "original": "hosts"
        },
        {
            "con": {
                "smart": "newIpamConfigSetting",
                "name": "IpamConfigSetting'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"aux_address\" <$> TF.attribute",
                    "name": "_auxAddress",
                    "method": "auxAddress",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s (P.Map P.Text (TF.Attr s P.Text))",
                    "class": "HasAuxAddress",
                    "validate": false,
                    "optional": true,
                    "original": "aux_address"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"gateway\" <$> TF.attribute",
                    "name": "_gateway",
                    "method": "gateway",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasGateway",
                    "validate": false,
                    "optional": true,
                    "original": "gateway"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"ip_range\" <$> TF.attribute",
                    "name": "_ipRange",
                    "method": "ipRange",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasIpRange",
                    "validate": false,
                    "optional": true,
                    "original": "ip_range"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"subnet\" <$> TF.attribute",
                    "name": "_subnet",
                    "method": "subnet",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasSubnet",
                    "validate": false,
                    "optional": true,
                    "original": "subnet"
                }
            ],
            "key": "docker_network.ipam_config",
            "name": "IpamConfigSetting",
            "threaded": true,
            "attributes": [],
            "parameters": [],
            "conflicts": [],
            "type": "IpamConfigSetting s",
            "original": "ipam_config"
        },
        {
            "con": {
                "smart": "newLimitsSetting",
                "name": "LimitsSetting'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "User-defined resources can be either Integer resources (e.g, SSD=3) or",
                        "String resources (e.g, GPU=UUID1)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"generic_resources\" <$> TF.attribute",
                    "name": "_genericResources",
                    "method": "genericResources",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s (GenericResourcesSetting s)",
                    "class": "HasGenericResources",
                    "validate": true,
                    "optional": true,
                    "original": "generic_resources"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The amounf of memory in bytes the container allocates"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"memory_bytes\" <$> TF.attribute",
                    "name": "_memoryBytes",
                    "method": "memoryBytes",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Int",
                    "class": "HasMemoryBytes",
                    "validate": false,
                    "optional": true,
                    "original": "memory_bytes"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "CPU shares in units of 1/1e9 (or 10^-9) of the CPU. Should be at least",
                        "1000000"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"nano_cpus\" <$> TF.attribute",
                    "name": "_nanoCpus",
                    "method": "nanoCpus",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Int",
                    "class": "HasNanoCpus",
                    "validate": false,
                    "optional": true,
                    "original": "nano_cpus"
                }
            ],
            "key": "docker_service.task_spec.resources.limits",
            "name": "LimitsSetting",
            "threaded": true,
            "attributes": [],
            "parameters": [],
            "conflicts": [],
            "type": "LimitsSetting s",
            "original": "limits"
        },
        {
            "con": {
                "smart": "newLogDriverSetting",
                "name": "LogDriverSetting'"
            },
            "arguments": [
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The logging driver to use: one of",
                        "none|json-file|syslog|journald|gelf|fluentd|awslogs|splunk|etwlogs|gcplogs"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The options for the logging driver"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"options\" <$> TF.attribute",
                    "name": "_options",
                    "method": "options",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s (P.Map P.Text (TF.Attr s P.Text))",
                    "class": "HasOptions",
                    "validate": false,
                    "optional": true,
                    "original": "options"
                }
            ],
            "key": "docker_service.task_spec.log_driver",
            "name": "LogDriverSetting",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The logging driver to use: one of",
                        "none|json-file|syslog|journald|gelf|fluentd|awslogs|splunk|etwlogs|gcplogs"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                }
            ],
            "conflicts": [],
            "type": "LogDriverSetting s",
            "original": "log_driver"
        },
        {
            "con": {
                "smart": "newModeSetting",
                "name": "ModeSetting'"
            },
            "arguments": [
                {
                    "default": "TF.value P.False",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The global service mode"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"global\" <$> TF.attribute",
                    "name": "_global",
                    "method": "global",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasGlobal",
                    "validate": false,
                    "optional": true,
                    "original": "global"
                }
            ],
            "key": "docker_service.mode",
            "name": "ModeSetting",
            "threaded": true,
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "The replicated service mode"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"replicated\" <$> TF.attribute",
                    "name": "_computedReplicated",
                    "method": "computedReplicated",
                    "threaded": true,
                    "conflicts": [
                        "_global"
                    ],
                    "type": "TF.Attr s (ReplicatedSetting s)",
                    "class": "HasComputedReplicated",
                    "validate": true,
                    "optional": true,
                    "original": "replicated"
                }
            ],
            "parameters": [],
            "conflicts": [],
            "type": "ModeSetting s",
            "original": "mode"
        },
        {
            "con": {
                "smart": "newMountsSetting",
                "name": "MountsSetting'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Optional configuration for the bind type"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"bind_options\" <$> TF.attribute",
                    "name": "_bindOptions",
                    "method": "bindOptions",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s (BindOptionsSetting s)",
                    "class": "HasBindOptions",
                    "validate": true,
                    "optional": true,
                    "original": "bind_options"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Whether the mount should be read-only"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"read_only\" <$> TF.attribute",
                    "name": "_readOnly",
                    "method": "readOnly",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasReadOnly",
                    "validate": false,
                    "optional": true,
                    "original": "read_only"
                },
                {
                    "default": "_source",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Mount source (e.g. a volume name, a host path)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"source\" <$> TF.attribute",
                    "name": "_source",
                    "method": "source",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasSource",
                    "validate": false,
                    "optional": false,
                    "original": "source"
                },
                {
                    "default": "_target",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Container path"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"target\" <$> TF.attribute",
                    "name": "_target",
                    "method": "target",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasTarget",
                    "validate": false,
                    "optional": false,
                    "original": "target"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Optional configuration for the tmpfs type"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"tmpfs_options\" <$> TF.attribute",
                    "name": "_tmpfsOptions",
                    "method": "tmpfsOptions",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s (TmpfsOptionsSetting s)",
                    "class": "HasTmpfsOptions",
                    "validate": true,
                    "optional": true,
                    "original": "tmpfs_options"
                },
                {
                    "default": "_type'",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The mount type"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "_type'",
                    "method": "type'",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasType'",
                    "validate": false,
                    "optional": false,
                    "original": "type"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Optional configuration for the volume type"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"volume_options\" <$> TF.attribute",
                    "name": "_volumeOptions",
                    "method": "volumeOptions",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s (VolumeOptionsSetting s)",
                    "class": "HasVolumeOptions",
                    "validate": true,
                    "optional": true,
                    "original": "volume_options"
                }
            ],
            "key": "docker_service.task_spec.container_spec.mounts",
            "name": "MountsSetting",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_source",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Mount source (e.g. a volume name, a host path)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"source\" <$> TF.attribute",
                    "name": "_source",
                    "method": "source",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasSource",
                    "validate": false,
                    "optional": false,
                    "original": "source"
                },
                {
                    "default": "_target",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Container path"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"target\" <$> TF.attribute",
                    "name": "_target",
                    "method": "target",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasTarget",
                    "validate": false,
                    "optional": false,
                    "original": "target"
                },
                {
                    "default": "_type'",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The mount type"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "_type'",
                    "method": "type'",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasType'",
                    "validate": false,
                    "optional": false,
                    "original": "type"
                }
            ],
            "conflicts": [],
            "type": "MountsSetting s",
            "original": "mounts"
        },
        {
            "con": {
                "smart": "newPlacementSetting",
                "name": "PlacementSetting'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "An array of constraints. e.g.: node.role==manager"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"constraints\" <$> TF.attribute",
                    "name": "_constraints",
                    "method": "constraints",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasConstraints",
                    "validate": false,
                    "optional": true,
                    "original": "constraints"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Platforms stores all the platforms that the service's image can run on"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"platforms\" <$> TF.attribute",
                    "name": "_platforms",
                    "method": "platforms",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (PlatformsSetting s)]",
                    "class": "HasPlatforms",
                    "validate": false,
                    "optional": true,
                    "original": "platforms"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Preferences provide a way to make the scheduler aware of factors such as",
                        "topology. They are provided in order from highest to lowest precedence,",
                        "e.g.: spread=node.role.manager"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"prefs\" <$> TF.attribute",
                    "name": "_prefs",
                    "method": "prefs",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasPrefs",
                    "validate": false,
                    "optional": true,
                    "original": "prefs"
                }
            ],
            "key": "docker_service.task_spec.placement",
            "name": "PlacementSetting",
            "threaded": true,
            "attributes": [],
            "parameters": [],
            "conflicts": [],
            "type": "PlacementSetting s",
            "original": "placement"
        },
        {
            "con": {
                "smart": "newPlatformsSetting",
                "name": "PlatformsSetting'"
            },
            "arguments": [
                {
                    "default": "_architecture",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The architecture, e.g. amd64"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"architecture\" <$> TF.attribute",
                    "name": "_architecture",
                    "method": "architecture",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasArchitecture",
                    "validate": false,
                    "optional": false,
                    "original": "architecture"
                },
                {
                    "default": "_os",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The operation system, e.g. linux"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"os\" <$> TF.attribute",
                    "name": "_os",
                    "method": "os",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasOs",
                    "validate": false,
                    "optional": false,
                    "original": "os"
                }
            ],
            "key": "docker_service.task_spec.placement.platforms",
            "name": "PlatformsSetting",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_architecture",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The architecture, e.g. amd64"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"architecture\" <$> TF.attribute",
                    "name": "_architecture",
                    "method": "architecture",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasArchitecture",
                    "validate": false,
                    "optional": false,
                    "original": "architecture"
                },
                {
                    "default": "_os",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The operation system, e.g. linux"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"os\" <$> TF.attribute",
                    "name": "_os",
                    "method": "os",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasOs",
                    "validate": false,
                    "optional": false,
                    "original": "os"
                }
            ],
            "conflicts": [],
            "type": "PlatformsSetting s",
            "original": "platforms"
        },
        {
            "con": {
                "smart": "newPortsSetting",
                "name": "PortsSetting'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"external\" <$> TF.attribute",
                    "name": "_external",
                    "method": "external",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Int",
                    "class": "HasExternal",
                    "validate": false,
                    "optional": true,
                    "original": "external"
                },
                {
                    "default": "_internal",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"internal\" <$> TF.attribute",
                    "name": "_internal",
                    "method": "internal",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Int",
                    "class": "HasInternal",
                    "validate": false,
                    "optional": false,
                    "original": "internal"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"ip\" <$> TF.attribute",
                    "name": "_ip",
                    "method": "ip",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasIp",
                    "validate": false,
                    "optional": true,
                    "original": "ip"
                },
                {
                    "default": "TF.value \"tcp\"",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"protocol\" <$> TF.attribute",
                    "name": "_protocol",
                    "method": "protocol",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasProtocol",
                    "validate": false,
                    "optional": true,
                    "original": "protocol"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A random name for the port"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": true,
                    "original": "name"
                },
                {
                    "default": "TF.value \"ingress\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Represents the mode in which the port is to be published: 'ingress' or",
                        "'host'"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"publish_mode\" <$> TF.attribute",
                    "name": "_publishMode",
                    "method": "publishMode",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPublishMode",
                    "validate": false,
                    "optional": true,
                    "original": "publish_mode"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The port on the swarm hosts."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"published_port\" <$> TF.attribute",
                    "name": "_publishedPort",
                    "method": "publishedPort",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Int",
                    "class": "HasPublishedPort",
                    "validate": false,
                    "optional": true,
                    "original": "published_port"
                },
                {
                    "default": "_targetPort",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The port inside the container"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"target_port\" <$> TF.attribute",
                    "name": "_targetPort",
                    "method": "targetPort",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Int",
                    "class": "HasTargetPort",
                    "validate": false,
                    "optional": false,
                    "original": "target_port"
                }
            ],
            "key": "docker_container.ports",
            "name": "PortsSetting",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_internal",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"internal\" <$> TF.attribute",
                    "name": "_internal",
                    "method": "internal",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Int",
                    "class": "HasInternal",
                    "validate": false,
                    "optional": false,
                    "original": "internal"
                },
                {
                    "default": "_targetPort",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The port inside the container"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"target_port\" <$> TF.attribute",
                    "name": "_targetPort",
                    "method": "targetPort",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Int",
                    "class": "HasTargetPort",
                    "validate": false,
                    "optional": false,
                    "original": "target_port"
                }
            ],
            "conflicts": [],
            "type": "PortsSetting s",
            "original": "ports"
        },
        {
            "con": {
                "smart": "newPrivilegesSetting",
                "name": "PrivilegesSetting'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "CredentialSpec for managed service account (Windows only)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"credential_spec\" <$> TF.attribute",
                    "name": "_credentialSpec",
                    "method": "credentialSpec",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s (CredentialSpecSetting s)",
                    "class": "HasCredentialSpec",
                    "validate": true,
                    "optional": true,
                    "original": "credential_spec"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "SELinux labels of the container"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"se_linux_context\" <$> TF.attribute",
                    "name": "_seLinuxContext",
                    "method": "seLinuxContext",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s (SeLinuxContextSetting s)",
                    "class": "HasSeLinuxContext",
                    "validate": true,
                    "optional": true,
                    "original": "se_linux_context"
                }
            ],
            "key": "docker_service.task_spec.container_spec.privileges",
            "name": "PrivilegesSetting",
            "threaded": true,
            "attributes": [],
            "parameters": [],
            "conflicts": [],
            "type": "PrivilegesSetting s",
            "original": "privileges"
        },
        {
            "con": {
                "smart": "newRegistryAuthSetting",
                "name": "RegistryAuthSetting'"
            },
            "arguments": [
                {
                    "default": "_address",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Address of the registry"
                    ],
                    "forceNew": false,
                    "encoder": "P.Just $ TF.assign \"address\"",
                    "name": "_address",
                    "method": "address",
                    "threaded": false,
                    "conflicts": [],
                    "type": "P.Text",
                    "class": "HasAddress",
                    "validate": false,
                    "optional": false,
                    "original": "address"
                },
                {
                    "default": "P.Nothing",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Path to docker json file for registry auth"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"config_file\" <$>",
                    "name": "_configFile",
                    "method": "configFile",
                    "threaded": false,
                    "conflicts": [
                        {
                            "default": "P.Nothing",
                            "name": "_password",
                            "method": "password"
                        },
                        {
                            "default": "P.Nothing",
                            "name": "_username",
                            "method": "username"
                        }
                    ],
                    "type": "P.Maybe P.Text",
                    "class": "HasConfigFile",
                    "validate": false,
                    "optional": true,
                    "original": "config_file"
                },
                {
                    "default": "P.Nothing",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Password for the registry"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"password\" <$>",
                    "name": "_password",
                    "method": "password",
                    "threaded": false,
                    "conflicts": [
                        {
                            "default": "P.Nothing",
                            "name": "_configFile",
                            "method": "configFile"
                        }
                    ],
                    "type": "P.Maybe P.Text",
                    "class": "HasPassword",
                    "validate": false,
                    "optional": true,
                    "original": "password"
                },
                {
                    "default": "P.Nothing",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Username for the registry"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"username\" <$>",
                    "name": "_username",
                    "method": "username",
                    "threaded": false,
                    "conflicts": [
                        {
                            "default": "P.Nothing",
                            "name": "_configFile",
                            "method": "configFile"
                        }
                    ],
                    "type": "P.Maybe P.Text",
                    "class": "HasUsername",
                    "validate": false,
                    "optional": true,
                    "original": "username"
                }
            ],
            "key": "provider.registry_auth",
            "name": "RegistryAuthSetting",
            "threaded": false,
            "attributes": [],
            "parameters": [
                {
                    "default": "_address",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Address of the registry"
                    ],
                    "forceNew": false,
                    "encoder": "P.Just $ TF.assign \"address\"",
                    "name": "_address",
                    "method": "address",
                    "threaded": false,
                    "conflicts": [],
                    "type": "P.Text",
                    "class": "HasAddress",
                    "validate": false,
                    "optional": false,
                    "original": "address"
                }
            ],
            "conflicts": [
                {
                    "default": "P.Nothing",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Path to docker json file for registry auth"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"config_file\" <$>",
                    "name": "_configFile",
                    "method": "configFile",
                    "threaded": false,
                    "conflicts": [
                        {
                            "default": "P.Nothing",
                            "name": "_password",
                            "method": "password"
                        },
                        {
                            "default": "P.Nothing",
                            "name": "_username",
                            "method": "username"
                        }
                    ],
                    "type": "P.Maybe P.Text",
                    "class": "HasConfigFile",
                    "validate": false,
                    "optional": true,
                    "original": "config_file"
                },
                {
                    "default": "P.Nothing",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Password for the registry"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"password\" <$>",
                    "name": "_password",
                    "method": "password",
                    "threaded": false,
                    "conflicts": [
                        {
                            "default": "P.Nothing",
                            "name": "_configFile",
                            "method": "configFile"
                        }
                    ],
                    "type": "P.Maybe P.Text",
                    "class": "HasPassword",
                    "validate": false,
                    "optional": true,
                    "original": "password"
                },
                {
                    "default": "P.Nothing",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Username for the registry"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"username\" <$>",
                    "name": "_username",
                    "method": "username",
                    "threaded": false,
                    "conflicts": [
                        {
                            "default": "P.Nothing",
                            "name": "_configFile",
                            "method": "configFile"
                        }
                    ],
                    "type": "P.Maybe P.Text",
                    "class": "HasUsername",
                    "validate": false,
                    "optional": true,
                    "original": "username"
                }
            ],
            "type": "RegistryAuthSetting",
            "original": "registry_auth"
        },
        {
            "con": {
                "smart": "newReplicatedSetting",
                "name": "ReplicatedSetting'"
            },
            "arguments": [
                {
                    "default": "TF.value 1",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The amount of replicas of the service"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"replicas\" <$> TF.attribute",
                    "name": "_replicas",
                    "method": "replicas",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Int",
                    "class": "HasReplicas",
                    "validate": false,
                    "optional": true,
                    "original": "replicas"
                }
            ],
            "key": "docker_service.mode.replicated",
            "name": "ReplicatedSetting",
            "threaded": true,
            "attributes": [],
            "parameters": [],
            "conflicts": [],
            "type": "ReplicatedSetting s",
            "original": "replicated"
        },
        {
            "con": {
                "smart": "newReservationSetting",
                "name": "ReservationSetting'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "User-defined resources can be either Integer resources (e.g, SSD=3) or",
                        "String resources (e.g, GPU=UUID1)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"generic_resources\" <$> TF.attribute",
                    "name": "_genericResources",
                    "method": "genericResources",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s (GenericResourcesSetting s)",
                    "class": "HasGenericResources",
                    "validate": true,
                    "optional": true,
                    "original": "generic_resources"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The amounf of memory in bytes the container allocates"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"memory_bytes\" <$> TF.attribute",
                    "name": "_memoryBytes",
                    "method": "memoryBytes",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Int",
                    "class": "HasMemoryBytes",
                    "validate": false,
                    "optional": true,
                    "original": "memory_bytes"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "CPU shares in units of 1/1e9 (or 10^-9) of the CPU. Should be at least",
                        "1000000"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"nano_cpus\" <$> TF.attribute",
                    "name": "_nanoCpus",
                    "method": "nanoCpus",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Int",
                    "class": "HasNanoCpus",
                    "validate": false,
                    "optional": true,
                    "original": "nano_cpus"
                }
            ],
            "key": "docker_service.task_spec.resources.reservation",
            "name": "ReservationSetting",
            "threaded": true,
            "attributes": [],
            "parameters": [],
            "conflicts": [],
            "type": "ReservationSetting s",
            "original": "reservation"
        },
        {
            "con": {
                "smart": "newResourcesSetting",
                "name": "ResourcesSetting'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Describes the resources which can be advertised by a node and requested by a",
                        "task"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"limits\" <$> TF.attribute",
                    "name": "_limits",
                    "method": "limits",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s (LimitsSetting s)",
                    "class": "HasLimits",
                    "validate": true,
                    "optional": true,
                    "original": "limits"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "An object describing the resources which can be advertised by a node and",
                        "requested by a task"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"reservation\" <$> TF.attribute",
                    "name": "_reservation",
                    "method": "reservation",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s (ReservationSetting s)",
                    "class": "HasReservation",
                    "validate": true,
                    "optional": true,
                    "original": "reservation"
                }
            ],
            "key": "docker_service.task_spec.resources",
            "name": "ResourcesSetting",
            "threaded": true,
            "attributes": [],
            "parameters": [],
            "conflicts": [],
            "type": "ResourcesSetting s",
            "original": "resources"
        },
        {
            "con": {
                "smart": "newRestartPolicySetting",
                "name": "RestartPolicySetting'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Condition for restart"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"condition\" <$> TF.attribute",
                    "name": "_condition",
                    "method": "condition",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCondition",
                    "validate": false,
                    "optional": true,
                    "original": "condition"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Delay between restart attempts (ms|s|m|h)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"delay\" <$> TF.attribute",
                    "name": "_delay",
                    "method": "delay",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDelay",
                    "validate": false,
                    "optional": true,
                    "original": "delay"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Maximum attempts to restart a given container before giving up (default",
                        "value is 0, which is ignored)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"max_attempts\" <$> TF.attribute",
                    "name": "_maxAttempts",
                    "method": "maxAttempts",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Int",
                    "class": "HasMaxAttempts",
                    "validate": false,
                    "optional": true,
                    "original": "max_attempts"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The time window used to evaluate the restart policy (default value is 0,",
                        "which is unbounded) (ms|s|m|h)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"window\" <$> TF.attribute",
                    "name": "_window",
                    "method": "window",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasWindow",
                    "validate": false,
                    "optional": true,
                    "original": "window"
                }
            ],
            "key": "docker_service.task_spec.restart_policy",
            "name": "RestartPolicySetting",
            "threaded": true,
            "attributes": [],
            "parameters": [],
            "conflicts": [],
            "type": "RestartPolicySetting s",
            "original": "restart_policy"
        },
        {
            "con": {
                "smart": "newRollbackConfigSetting",
                "name": "RollbackConfigSetting'"
            },
            "arguments": [
                {
                    "default": "TF.value \"0s\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Delay between task rollbacks (ns|us|ms|s|m|h)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"delay\" <$> TF.attribute",
                    "name": "_delay",
                    "method": "delay",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDelay",
                    "validate": false,
                    "optional": true,
                    "original": "delay"
                },
                {
                    "default": "TF.value \"pause\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Action on rollback failure: pause | continue"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"failure_action\" <$> TF.attribute",
                    "name": "_failureAction",
                    "method": "failureAction",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasFailureAction",
                    "validate": false,
                    "optional": true,
                    "original": "failure_action"
                },
                {
                    "default": "TF.value \"0.0\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Failure rate to tolerate during a rollback"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"max_failure_ratio\" <$> TF.attribute",
                    "name": "_maxFailureRatio",
                    "method": "maxFailureRatio",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMaxFailureRatio",
                    "validate": false,
                    "optional": true,
                    "original": "max_failure_ratio"
                },
                {
                    "default": "TF.value \"5s\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Duration after each task rollback to monitor for failure (ns|us|ms|s|m|h)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"monitor\" <$> TF.attribute",
                    "name": "_monitor",
                    "method": "monitor",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMonitor",
                    "validate": false,
                    "optional": true,
                    "original": "monitor"
                },
                {
                    "default": "TF.value \"stop-first\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Rollback order: either 'stop-first' or 'start-first'"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"order\" <$> TF.attribute",
                    "name": "_order",
                    "method": "order",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasOrder",
                    "validate": false,
                    "optional": true,
                    "original": "order"
                },
                {
                    "default": "TF.value 1",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Maximum number of tasks to be rollbacked in one iteration"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"parallelism\" <$> TF.attribute",
                    "name": "_parallelism",
                    "method": "parallelism",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Int",
                    "class": "HasParallelism",
                    "validate": false,
                    "optional": true,
                    "original": "parallelism"
                }
            ],
            "key": "docker_service.rollback_config",
            "name": "RollbackConfigSetting",
            "threaded": true,
            "attributes": [],
            "parameters": [],
            "conflicts": [],
            "type": "RollbackConfigSetting s",
            "original": "rollback_config"
        },
        {
            "con": {
                "smart": "newSeLinuxContextSetting",
                "name": "SeLinuxContextSetting'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Disable SELinux"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"disable\" <$> TF.attribute",
                    "name": "_disable",
                    "method": "disable",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasDisable",
                    "validate": false,
                    "optional": true,
                    "original": "disable"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "SELinux level label"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"level\" <$> TF.attribute",
                    "name": "_level",
                    "method": "level",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasLevel",
                    "validate": false,
                    "optional": true,
                    "original": "level"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "SELinux role label"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"role\" <$> TF.attribute",
                    "name": "_role",
                    "method": "role",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasRole",
                    "validate": false,
                    "optional": true,
                    "original": "role"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "SELinux type label"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "_type'",
                    "method": "type'",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasType'",
                    "validate": false,
                    "optional": true,
                    "original": "type"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "SELinux user label"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"user\" <$> TF.attribute",
                    "name": "_user",
                    "method": "user",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUser",
                    "validate": false,
                    "optional": true,
                    "original": "user"
                }
            ],
            "key": "docker_service.task_spec.container_spec.privileges.se_linux_context",
            "name": "SeLinuxContextSetting",
            "threaded": true,
            "attributes": [],
            "parameters": [],
            "conflicts": [],
            "type": "SeLinuxContextSetting s",
            "original": "se_linux_context"
        },
        {
            "con": {
                "smart": "newSecretsSetting",
                "name": "SecretsSetting'"
            },
            "arguments": [
                {
                    "default": "_fileName",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Represents the final filename in the filesystem"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"file_name\" <$> TF.attribute",
                    "name": "_fileName",
                    "method": "fileName",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasFileName",
                    "validate": false,
                    "optional": false,
                    "original": "file_name"
                },
                {
                    "default": "_secretId",
                    "computed": false,
                    "required": true,
                    "help": [
                        "ID of the specific secret that we're referencing"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"secret_id\" <$> TF.attribute",
                    "name": "_secretId",
                    "method": "secretId",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasSecretId",
                    "validate": false,
                    "optional": false,
                    "original": "secret_id"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Name of the secret that this references, but this is just provided for",
                        "lookup/display purposes. The config in the reference will be identified by",
                        "its ID"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"secret_name\" <$> TF.attribute",
                    "name": "_secretName",
                    "method": "secretName",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasSecretName",
                    "validate": false,
                    "optional": true,
                    "original": "secret_name"
                }
            ],
            "key": "docker_service.task_spec.container_spec.secrets",
            "name": "SecretsSetting",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_secretId",
                    "computed": false,
                    "required": true,
                    "help": [
                        "ID of the specific secret that we're referencing"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"secret_id\" <$> TF.attribute",
                    "name": "_secretId",
                    "method": "secretId",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasSecretId",
                    "validate": false,
                    "optional": false,
                    "original": "secret_id"
                },
                {
                    "default": "_fileName",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Represents the final filename in the filesystem"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"file_name\" <$> TF.attribute",
                    "name": "_fileName",
                    "method": "fileName",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasFileName",
                    "validate": false,
                    "optional": false,
                    "original": "file_name"
                }
            ],
            "conflicts": [],
            "type": "SecretsSetting s",
            "original": "secrets"
        },
        {
            "con": {
                "smart": "newTaskSpecSetting",
                "name": "TaskSpecSetting'"
            },
            "arguments": [
                {
                    "default": "_containerSpec",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The spec for each container"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"container_spec\" <$> TF.attribute",
                    "name": "_containerSpec",
                    "method": "containerSpec",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s (ContainerSpecSetting s)",
                    "class": "HasContainerSpec",
                    "validate": true,
                    "optional": false,
                    "original": "container_spec"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Specifies the log driver to use for tasks created from this spec. If not",
                        "present, the default one for the swarm will be used, finally falling back to",
                        "the engine default if not specified"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"log_driver\" <$> TF.attribute",
                    "name": "_logDriver",
                    "method": "logDriver",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s (LogDriverSetting s)",
                    "class": "HasLogDriver",
                    "validate": true,
                    "optional": true,
                    "original": "log_driver"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Ids of the networks in which the  container will be put in."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"networks\" <$> TF.attribute",
                    "name": "_networks",
                    "method": "networks",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasNetworks",
                    "validate": false,
                    "optional": true,
                    "original": "networks"
                }
            ],
            "key": "docker_service.task_spec",
            "name": "TaskSpecSetting",
            "threaded": true,
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "A counter that triggers an update even if no relevant parameters have been",
                        "changed. See",
                        "https://github.com/docker/swarmkit/blob/master/api/specs.proto#L126"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"force_update\" <$> TF.attribute",
                    "name": "_computedForceUpdate",
                    "method": "computedForceUpdate",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Int",
                    "class": "HasComputedForceUpdate",
                    "validate": false,
                    "optional": true,
                    "original": "force_update"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "The placement preferences"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"placement\" <$> TF.attribute",
                    "name": "_computedPlacement",
                    "method": "computedPlacement",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s (PlacementSetting s)",
                    "class": "HasComputedPlacement",
                    "validate": true,
                    "optional": true,
                    "original": "placement"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Resource requirements which apply to each individual container created as",
                        "part of the service"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"resources\" <$> TF.attribute",
                    "name": "_computedResources",
                    "method": "computedResources",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s (ResourcesSetting s)",
                    "class": "HasComputedResources",
                    "validate": true,
                    "optional": true,
                    "original": "resources"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Specification for the restart policy which applies to containers created as",
                        "part of this service."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"restart_policy\" <$> TF.attribute",
                    "name": "_computedRestartPolicy",
                    "method": "computedRestartPolicy",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s (P.Map P.Text (TF.Attr s (RestartPolicySetting s)))",
                    "class": "HasComputedRestartPolicy",
                    "validate": false,
                    "optional": true,
                    "original": "restart_policy"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Runtime is the type of runtime specified for the task executor. See",
                        "https://github.com/moby/moby/blob/master/api/types/swarm/runtime.go"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"runtime\" <$> TF.attribute",
                    "name": "_computedRuntime",
                    "method": "computedRuntime",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedRuntime",
                    "validate": false,
                    "optional": true,
                    "original": "runtime"
                }
            ],
            "parameters": [
                {
                    "default": "_containerSpec",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The spec for each container"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"container_spec\" <$> TF.attribute",
                    "name": "_containerSpec",
                    "method": "containerSpec",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s (ContainerSpecSetting s)",
                    "class": "HasContainerSpec",
                    "validate": true,
                    "optional": false,
                    "original": "container_spec"
                }
            ],
            "conflicts": [],
            "type": "TaskSpecSetting s",
            "original": "task_spec"
        },
        {
            "con": {
                "smart": "newTmpfsOptionsSetting",
                "name": "TmpfsOptionsSetting'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The permission mode for the tmpfs mount in an integer"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"mode\" <$> TF.attribute",
                    "name": "_mode",
                    "method": "mode",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Int",
                    "class": "HasMode",
                    "validate": false,
                    "optional": true,
                    "original": "mode"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The size for the tmpfs mount in bytes"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"size_bytes\" <$> TF.attribute",
                    "name": "_sizeBytes",
                    "method": "sizeBytes",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Int",
                    "class": "HasSizeBytes",
                    "validate": false,
                    "optional": true,
                    "original": "size_bytes"
                }
            ],
            "key": "docker_service.task_spec.container_spec.mounts.tmpfs_options",
            "name": "TmpfsOptionsSetting",
            "threaded": true,
            "attributes": [],
            "parameters": [],
            "conflicts": [],
            "type": "TmpfsOptionsSetting s",
            "original": "tmpfs_options"
        },
        {
            "con": {
                "smart": "newUlimitSetting",
                "name": "UlimitSetting'"
            },
            "arguments": [
                {
                    "default": "_hard",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"hard\" <$> TF.attribute",
                    "name": "_hard",
                    "method": "hard",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Int",
                    "class": "HasHard",
                    "validate": false,
                    "optional": false,
                    "original": "hard"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                },
                {
                    "default": "_soft",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"soft\" <$> TF.attribute",
                    "name": "_soft",
                    "method": "soft",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Int",
                    "class": "HasSoft",
                    "validate": false,
                    "optional": false,
                    "original": "soft"
                }
            ],
            "key": "docker_container.ulimit",
            "name": "UlimitSetting",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_hard",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"hard\" <$> TF.attribute",
                    "name": "_hard",
                    "method": "hard",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Int",
                    "class": "HasHard",
                    "validate": false,
                    "optional": false,
                    "original": "hard"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                },
                {
                    "default": "_soft",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"soft\" <$> TF.attribute",
                    "name": "_soft",
                    "method": "soft",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Int",
                    "class": "HasSoft",
                    "validate": false,
                    "optional": false,
                    "original": "soft"
                }
            ],
            "conflicts": [],
            "type": "UlimitSetting s",
            "original": "ulimit"
        },
        {
            "con": {
                "smart": "newUpdateConfigSetting",
                "name": "UpdateConfigSetting'"
            },
            "arguments": [
                {
                    "default": "TF.value \"0s\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Delay between task updates (ns|us|ms|s|m|h)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"delay\" <$> TF.attribute",
                    "name": "_delay",
                    "method": "delay",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDelay",
                    "validate": false,
                    "optional": true,
                    "original": "delay"
                },
                {
                    "default": "TF.value \"pause\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Action on update failure: pause | continue | rollback"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"failure_action\" <$> TF.attribute",
                    "name": "_failureAction",
                    "method": "failureAction",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasFailureAction",
                    "validate": false,
                    "optional": true,
                    "original": "failure_action"
                },
                {
                    "default": "TF.value \"0.0\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Failure rate to tolerate during an update"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"max_failure_ratio\" <$> TF.attribute",
                    "name": "_maxFailureRatio",
                    "method": "maxFailureRatio",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMaxFailureRatio",
                    "validate": false,
                    "optional": true,
                    "original": "max_failure_ratio"
                },
                {
                    "default": "TF.value \"5s\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Duration after each task update to monitor for failure (ns|us|ms|s|m|h)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"monitor\" <$> TF.attribute",
                    "name": "_monitor",
                    "method": "monitor",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMonitor",
                    "validate": false,
                    "optional": true,
                    "original": "monitor"
                },
                {
                    "default": "TF.value \"stop-first\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Update order: either 'stop-first' or 'start-first'"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"order\" <$> TF.attribute",
                    "name": "_order",
                    "method": "order",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasOrder",
                    "validate": false,
                    "optional": true,
                    "original": "order"
                },
                {
                    "default": "TF.value 1",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Maximum number of tasks to be updated in one iteration"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"parallelism\" <$> TF.attribute",
                    "name": "_parallelism",
                    "method": "parallelism",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Int",
                    "class": "HasParallelism",
                    "validate": false,
                    "optional": true,
                    "original": "parallelism"
                }
            ],
            "key": "docker_service.update_config",
            "name": "UpdateConfigSetting",
            "threaded": true,
            "attributes": [],
            "parameters": [],
            "conflicts": [],
            "type": "UpdateConfigSetting s",
            "original": "update_config"
        },
        {
            "con": {
                "smart": "newUploadSetting",
                "name": "UploadSetting'"
            },
            "arguments": [
                {
                    "default": "_content",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"content\" <$> TF.attribute",
                    "name": "_content",
                    "method": "content",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasContent",
                    "validate": false,
                    "optional": false,
                    "original": "content"
                },
                {
                    "default": "TF.value P.False",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"executable\" <$> TF.attribute",
                    "name": "_executable",
                    "method": "executable",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasExecutable",
                    "validate": false,
                    "optional": true,
                    "original": "executable"
                },
                {
                    "default": "_file",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"file\" <$> TF.attribute",
                    "name": "_file",
                    "method": "file",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasFile",
                    "validate": false,
                    "optional": false,
                    "original": "file"
                }
            ],
            "key": "docker_container.upload",
            "name": "UploadSetting",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_content",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"content\" <$> TF.attribute",
                    "name": "_content",
                    "method": "content",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasContent",
                    "validate": false,
                    "optional": false,
                    "original": "content"
                },
                {
                    "default": "_file",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"file\" <$> TF.attribute",
                    "name": "_file",
                    "method": "file",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasFile",
                    "validate": false,
                    "optional": false,
                    "original": "file"
                }
            ],
            "conflicts": [],
            "type": "UploadSetting s",
            "original": "upload"
        },
        {
            "con": {
                "smart": "newVolumeOptionsSetting",
                "name": "VolumeOptionsSetting'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Name of the driver to use to create the volume."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"driver_name\" <$> TF.attribute",
                    "name": "_driverName",
                    "method": "driverName",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDriverName",
                    "validate": false,
                    "optional": true,
                    "original": "driver_name"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Key/value map of driver specific options"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"driver_options\" <$> TF.attribute",
                    "name": "_driverOptions",
                    "method": "driverOptions",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s (P.Map P.Text (TF.Attr s P.Text))",
                    "class": "HasDriverOptions",
                    "validate": false,
                    "optional": true,
                    "original": "driver_options"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "User-defined key/value metadata"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"labels\" <$> TF.attribute",
                    "name": "_labels",
                    "method": "labels",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s (P.Map P.Text (TF.Attr s P.Text))",
                    "class": "HasLabels",
                    "validate": false,
                    "optional": true,
                    "original": "labels"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Populate volume with data from the target"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"no_copy\" <$> TF.attribute",
                    "name": "_noCopy",
                    "method": "noCopy",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasNoCopy",
                    "validate": false,
                    "optional": true,
                    "original": "no_copy"
                }
            ],
            "key": "docker_service.task_spec.container_spec.mounts.volume_options",
            "name": "VolumeOptionsSetting",
            "threaded": true,
            "attributes": [],
            "parameters": [],
            "conflicts": [],
            "type": "VolumeOptionsSetting s",
            "original": "volume_options"
        },
        {
            "con": {
                "smart": "newVolumesSetting",
                "name": "VolumesSetting'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"container_path\" <$> TF.attribute",
                    "name": "_containerPath",
                    "method": "containerPath",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasContainerPath",
                    "validate": false,
                    "optional": true,
                    "original": "container_path"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"from_container\" <$> TF.attribute",
                    "name": "_fromContainer",
                    "method": "fromContainer",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasFromContainer",
                    "validate": false,
                    "optional": true,
                    "original": "from_container"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"host_path\" <$> TF.attribute",
                    "name": "_hostPath",
                    "method": "hostPath",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasHostPath",
                    "validate": false,
                    "optional": true,
                    "original": "host_path"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"read_only\" <$> TF.attribute",
                    "name": "_readOnly",
                    "method": "readOnly",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasReadOnly",
                    "validate": false,
                    "optional": true,
                    "original": "read_only"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"volume_name\" <$> TF.attribute",
                    "name": "_volumeName",
                    "method": "volumeName",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasVolumeName",
                    "validate": false,
                    "optional": true,
                    "original": "volume_name"
                }
            ],
            "key": "docker_container.volumes",
            "name": "VolumesSetting",
            "threaded": true,
            "attributes": [],
            "parameters": [],
            "conflicts": [],
            "type": "VolumesSetting s",
            "original": "volumes"
        }
    ],
    "url": "https://www.terraform.io/docs/providers/docker/index.html",
    "dataSources": [
        {
            "con": {
                "smart": "registryImageData",
                "name": "RegistryImageData'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": true,
                    "original": "name"
                }
            ],
            "url": "https://www.terraform.io/docs/providers/docker/d/registry_image.html",
            "key": "docker_registry_image",
            "name": "RegistryImageData",
            "threaded": true,
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"id\" <$> TF.attribute",
                    "name": "_computedId",
                    "method": "computedId",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedId",
                    "validate": false,
                    "optional": false,
                    "original": "id"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"sha256_digest\" <$> TF.attribute",
                    "name": "_computedSha256Digest",
                    "method": "computedSha256Digest",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedSha256Digest",
                    "validate": false,
                    "optional": false,
                    "original": "sha256_digest"
                }
            ],
            "parameters": [],
            "conflicts": [],
            "type": "RegistryImageData s",
            "original": "docker_registry_image"
        }
    ],
    "resources": [
        {
            "con": {
                "smart": "configResource",
                "name": "ConfigResource'"
            },
            "arguments": [
                {
                    "default": "_data'",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Base64-url-safe-encoded config data"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"data\" <$> TF.attribute",
                    "name": "_data'",
                    "method": "data'",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasData'",
                    "validate": false,
                    "optional": false,
                    "original": "data"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [
                        "User-defined name of the config"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                }
            ],
            "url": "https://www.terraform.io/docs/providers/docker/r/config.html",
            "key": "docker_config",
            "name": "ConfigResource",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_data'",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Base64-url-safe-encoded config data"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"data\" <$> TF.attribute",
                    "name": "_data'",
                    "method": "data'",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasData'",
                    "validate": false,
                    "optional": false,
                    "original": "data"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [
                        "User-defined name of the config"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                }
            ],
            "conflicts": [],
            "type": "ConfigResource s",
            "original": "docker_config"
        },
        {
            "con": {
                "smart": "containerResource",
                "name": "ContainerResource'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"capabilities\" <$> TF.attribute",
                    "name": "_capabilities",
                    "method": "capabilities",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s (CapabilitiesSetting s)",
                    "class": "HasCapabilities",
                    "validate": true,
                    "optional": true,
                    "original": "capabilities"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"command\" <$> TF.attribute",
                    "name": "_command",
                    "method": "command",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasCommand",
                    "validate": false,
                    "optional": true,
                    "original": "command"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"cpu_shares\" <$> TF.attribute",
                    "name": "_cpuShares",
                    "method": "cpuShares",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Int",
                    "class": "HasCpuShares",
                    "validate": false,
                    "optional": true,
                    "original": "cpu_shares"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"destroy_grace_seconds\" <$> TF.attribute",
                    "name": "_destroyGraceSeconds",
                    "method": "destroyGraceSeconds",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Int",
                    "class": "HasDestroyGraceSeconds",
                    "validate": false,
                    "optional": true,
                    "original": "destroy_grace_seconds"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"devices\" <$> TF.attribute",
                    "name": "_devices",
                    "method": "devices",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (DevicesSetting s)]",
                    "class": "HasDevices",
                    "validate": false,
                    "optional": true,
                    "original": "devices"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"dns\" <$> TF.attribute",
                    "name": "_dns",
                    "method": "dns",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasDns",
                    "validate": false,
                    "optional": true,
                    "original": "dns"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"dns_opts\" <$> TF.attribute",
                    "name": "_dnsOpts",
                    "method": "dnsOpts",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasDnsOpts",
                    "validate": false,
                    "optional": true,
                    "original": "dns_opts"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"dns_search\" <$> TF.attribute",
                    "name": "_dnsSearch",
                    "method": "dnsSearch",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasDnsSearch",
                    "validate": false,
                    "optional": true,
                    "original": "dns_search"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"domainname\" <$> TF.attribute",
                    "name": "_domainname",
                    "method": "domainname",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDomainname",
                    "validate": false,
                    "optional": true,
                    "original": "domainname"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"entrypoint\" <$> TF.attribute",
                    "name": "_entrypoint",
                    "method": "entrypoint",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasEntrypoint",
                    "validate": false,
                    "optional": true,
                    "original": "entrypoint"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"env\" <$> TF.attribute",
                    "name": "_env",
                    "method": "env",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasEnv",
                    "validate": false,
                    "optional": true,
                    "original": "env"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"host\" <$> TF.attribute",
                    "name": "_host",
                    "method": "host",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (HostSetting s)]",
                    "class": "HasHost",
                    "validate": false,
                    "optional": true,
                    "original": "host"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"hostname\" <$> TF.attribute",
                    "name": "_hostname",
                    "method": "hostname",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasHostname",
                    "validate": false,
                    "optional": true,
                    "original": "hostname"
                },
                {
                    "default": "_image",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"image\" <$> TF.attribute",
                    "name": "_image",
                    "method": "image",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasImage",
                    "validate": false,
                    "optional": false,
                    "original": "image"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"labels\" <$> TF.attribute",
                    "name": "_labels",
                    "method": "labels",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s (P.Map P.Text (TF.Attr s P.Text))",
                    "class": "HasLabels",
                    "validate": false,
                    "optional": true,
                    "original": "labels"
                },
                {
                    "default": "TF.value \"json-file\"",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"log_driver\" <$> TF.attribute",
                    "name": "_logDriver",
                    "method": "logDriver",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasLogDriver",
                    "validate": false,
                    "optional": true,
                    "original": "log_driver"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"log_opts\" <$> TF.attribute",
                    "name": "_logOpts",
                    "method": "logOpts",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s (P.Map P.Text (TF.Attr s P.Text))",
                    "class": "HasLogOpts",
                    "validate": false,
                    "optional": true,
                    "original": "log_opts"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"max_retry_count\" <$> TF.attribute",
                    "name": "_maxRetryCount",
                    "method": "maxRetryCount",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Int",
                    "class": "HasMaxRetryCount",
                    "validate": false,
                    "optional": true,
                    "original": "max_retry_count"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"memory\" <$> TF.attribute",
                    "name": "_memory",
                    "method": "memory",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Int",
                    "class": "HasMemory",
                    "validate": false,
                    "optional": true,
                    "original": "memory"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"memory_swap\" <$> TF.attribute",
                    "name": "_memorySwap",
                    "method": "memorySwap",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Int",
                    "class": "HasMemorySwap",
                    "validate": false,
                    "optional": true,
                    "original": "memory_swap"
                },
                {
                    "default": "TF.value P.True",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"must_run\" <$> TF.attribute",
                    "name": "_mustRun",
                    "method": "mustRun",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasMustRun",
                    "validate": false,
                    "optional": true,
                    "original": "must_run"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"network_alias\" <$> TF.attribute",
                    "name": "_networkAlias",
                    "method": "networkAlias",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasNetworkAlias",
                    "validate": false,
                    "optional": true,
                    "original": "network_alias"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"network_mode\" <$> TF.attribute",
                    "name": "_networkMode",
                    "method": "networkMode",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasNetworkMode",
                    "validate": false,
                    "optional": true,
                    "original": "network_mode"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"networks\" <$> TF.attribute",
                    "name": "_networks",
                    "method": "networks",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasNetworks",
                    "validate": false,
                    "optional": true,
                    "original": "networks"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"ports\" <$> TF.attribute",
                    "name": "_ports",
                    "method": "ports",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (PortsSetting s)]",
                    "class": "HasPorts",
                    "validate": false,
                    "optional": true,
                    "original": "ports"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"privileged\" <$> TF.attribute",
                    "name": "_privileged",
                    "method": "privileged",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasPrivileged",
                    "validate": false,
                    "optional": true,
                    "original": "privileged"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"publish_all_ports\" <$> TF.attribute",
                    "name": "_publishAllPorts",
                    "method": "publishAllPorts",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasPublishAllPorts",
                    "validate": false,
                    "optional": true,
                    "original": "publish_all_ports"
                },
                {
                    "default": "TF.value \"no\"",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"restart\" <$> TF.attribute",
                    "name": "_restart",
                    "method": "restart",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasRestart",
                    "validate": false,
                    "optional": true,
                    "original": "restart"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"ulimit\" <$> TF.attribute",
                    "name": "_ulimit",
                    "method": "ulimit",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (UlimitSetting s)]",
                    "class": "HasUlimit",
                    "validate": false,
                    "optional": true,
                    "original": "ulimit"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"upload\" <$> TF.attribute",
                    "name": "_upload",
                    "method": "upload",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (UploadSetting s)]",
                    "class": "HasUpload",
                    "validate": false,
                    "optional": true,
                    "original": "upload"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"user\" <$> TF.attribute",
                    "name": "_user",
                    "method": "user",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUser",
                    "validate": false,
                    "optional": true,
                    "original": "user"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"volumes\" <$> TF.attribute",
                    "name": "_volumes",
                    "method": "volumes",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (VolumesSetting s)]",
                    "class": "HasVolumes",
                    "validate": false,
                    "optional": true,
                    "original": "volumes"
                }
            ],
            "url": "https://www.terraform.io/docs/providers/docker/r/container.html",
            "key": "docker_container",
            "name": "ContainerResource",
            "threaded": true,
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"bridge\" <$> TF.attribute",
                    "name": "_computedBridge",
                    "method": "computedBridge",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedBridge",
                    "validate": false,
                    "optional": false,
                    "original": "bridge"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"gateway\" <$> TF.attribute",
                    "name": "_computedGateway",
                    "method": "computedGateway",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedGateway",
                    "validate": false,
                    "optional": false,
                    "original": "gateway"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"ip_address\" <$> TF.attribute",
                    "name": "_computedIpAddress",
                    "method": "computedIpAddress",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedIpAddress",
                    "validate": false,
                    "optional": false,
                    "original": "ip_address"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"ip_prefix_length\" <$> TF.attribute",
                    "name": "_computedIpPrefixLength",
                    "method": "computedIpPrefixLength",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Int",
                    "class": "HasComputedIpPrefixLength",
                    "validate": false,
                    "optional": false,
                    "original": "ip_prefix_length"
                }
            ],
            "parameters": [
                {
                    "default": "_image",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"image\" <$> TF.attribute",
                    "name": "_image",
                    "method": "image",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasImage",
                    "validate": false,
                    "optional": false,
                    "original": "image"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                }
            ],
            "conflicts": [],
            "type": "ContainerResource s",
            "original": "docker_container"
        },
        {
            "con": {
                "smart": "imageResource",
                "name": "ImageResource'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"keep_locally\" <$> TF.attribute",
                    "name": "_keepLocally",
                    "method": "keepLocally",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasKeepLocally",
                    "validate": false,
                    "optional": true,
                    "original": "keep_locally"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"pull_triggers\" <$> TF.attribute",
                    "name": "_pullTriggers",
                    "method": "pullTriggers",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasPullTriggers",
                    "validate": false,
                    "optional": true,
                    "original": "pull_triggers"
                }
            ],
            "url": "https://www.terraform.io/docs/providers/docker/r/image.html",
            "key": "docker_image",
            "name": "ImageResource",
            "threaded": true,
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"latest\" <$> TF.attribute",
                    "name": "_computedLatest",
                    "method": "computedLatest",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedLatest",
                    "validate": false,
                    "optional": false,
                    "original": "latest"
                }
            ],
            "parameters": [
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                }
            ],
            "conflicts": [],
            "type": "ImageResource s",
            "original": "docker_image"
        },
        {
            "con": {
                "smart": "networkResource",
                "name": "NetworkResource'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"check_duplicate\" <$> TF.attribute",
                    "name": "_checkDuplicate",
                    "method": "checkDuplicate",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasCheckDuplicate",
                    "validate": false,
                    "optional": true,
                    "original": "check_duplicate"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"ipam_config\" <$> TF.attribute",
                    "name": "_ipamConfig",
                    "method": "ipamConfig",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (IpamConfigSetting s)]",
                    "class": "HasIpamConfig",
                    "validate": false,
                    "optional": true,
                    "original": "ipam_config"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"ipam_driver\" <$> TF.attribute",
                    "name": "_ipamDriver",
                    "method": "ipamDriver",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasIpamDriver",
                    "validate": false,
                    "optional": true,
                    "original": "ipam_driver"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                }
            ],
            "url": "https://www.terraform.io/docs/providers/docker/r/network.html",
            "key": "docker_network",
            "name": "NetworkResource",
            "threaded": true,
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"driver\" <$> TF.attribute",
                    "name": "_computedDriver",
                    "method": "computedDriver",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedDriver",
                    "validate": false,
                    "optional": true,
                    "original": "driver"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"internal\" <$> TF.attribute",
                    "name": "_computedInternal",
                    "method": "computedInternal",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasComputedInternal",
                    "validate": false,
                    "optional": true,
                    "original": "internal"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"options\" <$> TF.attribute",
                    "name": "_computedOptions",
                    "method": "computedOptions",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s (P.Map P.Text (TF.Attr s P.Text))",
                    "class": "HasComputedOptions",
                    "validate": false,
                    "optional": true,
                    "original": "options"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"scope\" <$> TF.attribute",
                    "name": "_computedScope",
                    "method": "computedScope",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedScope",
                    "validate": false,
                    "optional": false,
                    "original": "scope"
                }
            ],
            "parameters": [
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                }
            ],
            "conflicts": [],
            "type": "NetworkResource s",
            "original": "docker_network"
        },
        {
            "con": {
                "smart": "secretResource",
                "name": "SecretResource'"
            },
            "arguments": [
                {
                    "default": "_data'",
                    "computed": false,
                    "required": true,
                    "help": [
                        "User-defined name of the secret"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"data\" <$> TF.attribute",
                    "name": "_data'",
                    "method": "data'",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasData'",
                    "validate": false,
                    "optional": false,
                    "original": "data"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [
                        "User-defined name of the secret"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                }
            ],
            "url": "https://www.terraform.io/docs/providers/docker/r/secret.html",
            "key": "docker_secret",
            "name": "SecretResource",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_data'",
                    "computed": false,
                    "required": true,
                    "help": [
                        "User-defined name of the secret"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"data\" <$> TF.attribute",
                    "name": "_data'",
                    "method": "data'",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasData'",
                    "validate": false,
                    "optional": false,
                    "original": "data"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [
                        "User-defined name of the secret"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                }
            ],
            "conflicts": [],
            "type": "SecretResource s",
            "original": "docker_secret"
        },
        {
            "con": {
                "smart": "serviceResource",
                "name": "ServiceResource'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"auth\" <$> TF.attribute",
                    "name": "_auth",
                    "method": "auth",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s (P.Map P.Text (TF.Attr s (AuthSetting s)))",
                    "class": "HasAuth",
                    "validate": false,
                    "optional": true,
                    "original": "auth"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A configuration to ensure that a service converges aka reaches the desired",
                        "that of all task up and running"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"converge_config\" <$> TF.attribute",
                    "name": "_convergeConfig",
                    "method": "convergeConfig",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s (ConvergeConfigSetting s)",
                    "class": "HasConvergeConfig",
                    "validate": true,
                    "optional": true,
                    "original": "converge_config"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the service"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Specification for the rollback strategy of the service"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"rollback_config\" <$> TF.attribute",
                    "name": "_rollbackConfig",
                    "method": "rollbackConfig",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s (RollbackConfigSetting s)",
                    "class": "HasRollbackConfig",
                    "validate": true,
                    "optional": true,
                    "original": "rollback_config"
                },
                {
                    "default": "_taskSpec",
                    "computed": false,
                    "required": true,
                    "help": [
                        "User modifiable task configuration"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"task_spec\" <$> TF.attribute",
                    "name": "_taskSpec",
                    "method": "taskSpec",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s (TaskSpecSetting s)",
                    "class": "HasTaskSpec",
                    "validate": true,
                    "optional": false,
                    "original": "task_spec"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Specification for the update strategy of the service"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"update_config\" <$> TF.attribute",
                    "name": "_updateConfig",
                    "method": "updateConfig",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s (UpdateConfigSetting s)",
                    "class": "HasUpdateConfig",
                    "validate": true,
                    "optional": true,
                    "original": "update_config"
                }
            ],
            "url": "https://www.terraform.io/docs/providers/docker/r/service.html",
            "key": "docker_service",
            "name": "ServiceResource",
            "threaded": true,
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Properties that can be configured to access and load balance a service"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"endpoint_spec\" <$> TF.attribute",
                    "name": "_computedEndpointSpec",
                    "method": "computedEndpointSpec",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s (EndpointSpecSetting s)",
                    "class": "HasComputedEndpointSpec",
                    "validate": true,
                    "optional": true,
                    "original": "endpoint_spec"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "User-defined key/value metadata"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"labels\" <$> TF.attribute",
                    "name": "_computedLabels",
                    "method": "computedLabels",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s (P.Map P.Text (TF.Attr s P.Text))",
                    "class": "HasComputedLabels",
                    "validate": false,
                    "optional": true,
                    "original": "labels"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Scheduling mode for the service"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"mode\" <$> TF.attribute",
                    "name": "_computedMode",
                    "method": "computedMode",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s (ModeSetting s)",
                    "class": "HasComputedMode",
                    "validate": true,
                    "optional": true,
                    "original": "mode"
                }
            ],
            "parameters": [
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the service"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                },
                {
                    "default": "_taskSpec",
                    "computed": false,
                    "required": true,
                    "help": [
                        "User modifiable task configuration"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"task_spec\" <$> TF.attribute",
                    "name": "_taskSpec",
                    "method": "taskSpec",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s (TaskSpecSetting s)",
                    "class": "HasTaskSpec",
                    "validate": true,
                    "optional": false,
                    "original": "task_spec"
                }
            ],
            "conflicts": [],
            "type": "ServiceResource s",
            "original": "docker_service"
        },
        {
            "con": {
                "smart": "volumeResource",
                "name": "VolumeResource'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"driver_opts\" <$> TF.attribute",
                    "name": "_driverOpts",
                    "method": "driverOpts",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s (P.Map P.Text (TF.Attr s P.Text))",
                    "class": "HasDriverOpts",
                    "validate": false,
                    "optional": true,
                    "original": "driver_opts"
                }
            ],
            "url": "https://www.terraform.io/docs/providers/docker/r/volume.html",
            "key": "docker_volume",
            "name": "VolumeResource",
            "threaded": true,
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"driver\" <$> TF.attribute",
                    "name": "_computedDriver",
                    "method": "computedDriver",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedDriver",
                    "validate": false,
                    "optional": true,
                    "original": "driver"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"mountpoint\" <$> TF.attribute",
                    "name": "_computedMountpoint",
                    "method": "computedMountpoint",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedMountpoint",
                    "validate": false,
                    "optional": false,
                    "original": "mountpoint"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_computedName",
                    "method": "computedName",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedName",
                    "validate": false,
                    "optional": true,
                    "original": "name"
                }
            ],
            "parameters": [],
            "conflicts": [],
            "type": "VolumeResource s",
            "original": "docker_volume"
        }
    ],
    "schema": {
        "con": {
            "smart": "newProvider",
            "name": "Provider'"
        },
        "arguments": [
            {
                "default": "P.Nothing",
                "computed": false,
                "required": false,
                "help": [
                    "PEM-encoded content of Docker host CA certificate"
                ],
                "forceNew": false,
                "encoder": "TF.assign \"ca_material\" <$>",
                "name": "_caMaterial",
                "method": "caMaterial",
                "threaded": false,
                "conflicts": [],
                "type": "P.Maybe P.Text",
                "class": "HasCaMaterial",
                "validate": false,
                "optional": true,
                "original": "ca_material"
            },
            {
                "default": "P.Nothing",
                "computed": false,
                "required": false,
                "help": [
                    "PEM-encoded content of Docker client certificate"
                ],
                "forceNew": false,
                "encoder": "TF.assign \"cert_material\" <$>",
                "name": "_certMaterial",
                "method": "certMaterial",
                "threaded": false,
                "conflicts": [],
                "type": "P.Maybe P.Text",
                "class": "HasCertMaterial",
                "validate": false,
                "optional": true,
                "original": "cert_material"
            },
            {
                "default": "P.Nothing",
                "computed": false,
                "required": false,
                "help": [
                    "Path to directory with Docker TLS config"
                ],
                "forceNew": false,
                "encoder": "TF.assign \"cert_path\" <$>",
                "name": "_certPath",
                "method": "certPath",
                "threaded": false,
                "conflicts": [],
                "type": "P.Maybe P.Text",
                "class": "HasCertPath",
                "validate": false,
                "optional": true,
                "original": "cert_path"
            },
            {
                "default": "_host",
                "computed": false,
                "required": true,
                "help": [
                    "The Docker daemon address"
                ],
                "forceNew": false,
                "encoder": "P.Just $ TF.assign \"host\"",
                "name": "_host",
                "method": "host",
                "threaded": false,
                "conflicts": [],
                "type": "P.Text",
                "class": "HasHost",
                "validate": false,
                "optional": false,
                "original": "host"
            },
            {
                "default": "P.Nothing",
                "computed": false,
                "required": false,
                "help": [
                    "PEM-encoded content of Docker client private key"
                ],
                "forceNew": false,
                "encoder": "TF.assign \"key_material\" <$>",
                "name": "_keyMaterial",
                "method": "keyMaterial",
                "threaded": false,
                "conflicts": [],
                "type": "P.Maybe P.Text",
                "class": "HasKeyMaterial",
                "validate": false,
                "optional": true,
                "original": "key_material"
            },
            {
                "default": "P.Nothing",
                "computed": false,
                "required": false,
                "help": [],
                "forceNew": false,
                "encoder": "TF.assign \"registry_auth\" <$>",
                "name": "_registryAuth",
                "method": "registryAuth",
                "threaded": false,
                "conflicts": [],
                "type": "P.Maybe [RegistryAuthSetting]",
                "class": "HasRegistryAuth",
                "validate": false,
                "optional": true,
                "original": "registry_auth"
            }
        ],
        "key": "provider",
        "name": "Provider",
        "threaded": false,
        "attributes": [],
        "parameters": [
            {
                "default": "_host",
                "computed": false,
                "required": true,
                "help": [
                    "The Docker daemon address"
                ],
                "forceNew": false,
                "encoder": "P.Just $ TF.assign \"host\"",
                "name": "_host",
                "method": "host",
                "threaded": false,
                "conflicts": [],
                "type": "P.Text",
                "class": "HasHost",
                "validate": false,
                "optional": false,
                "original": "host"
            }
        ],
        "conflicts": [],
        "type": "Provider",
        "original": "provider"
    },
    "dependencies": [
        "aeson",
        "base",
        "containers",
        "microlens",
        "terrafomo",
        "text"
    ],
    "name": "Docker",
    "package": "terrafomo-docker",
    "primitives": [],
    "original": "docker"
}