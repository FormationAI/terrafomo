{
    "settings": [
        {
            "con": {
                "smart": "newAccountInvites",
                "name": "AccountInvites'"
            },
            "arguments": [],
            "name": "AccountInvites",
            "threaded": true,
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"email\" <$> TF.attribute",
                    "name": "_computedEmail",
                    "method": "computedEmail",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedEmail",
                    "validate": false,
                    "optional": false,
                    "original": "email"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"role\" <$> TF.attribute",
                    "name": "_computedRole",
                    "method": "computedRole",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedRole",
                    "validate": false,
                    "optional": false,
                    "original": "role"
                }
            ],
            "parameters": [],
            "conflicts": [],
            "type": "AccountInvites s",
            "original": "account_invites"
        },
        {
            "con": {
                "smart": "newAccountUsers",
                "name": "AccountUsers'"
            },
            "arguments": [],
            "name": "AccountUsers",
            "threaded": true,
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"id\" <$> TF.attribute",
                    "name": "_computedId",
                    "method": "computedId",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedId",
                    "validate": false,
                    "optional": false,
                    "original": "id"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"role\" <$> TF.attribute",
                    "name": "_computedRole",
                    "method": "computedRole",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedRole",
                    "validate": false,
                    "optional": false,
                    "original": "role"
                }
            ],
            "parameters": [],
            "conflicts": [],
            "type": "AccountUsers s",
            "original": "account_users"
        },
        {
            "con": {
                "smart": "newMetricClusterQuery",
                "name": "MetricClusterQuery'"
            },
            "arguments": [
                {
                    "default": "_definition",
                    "computed": false,
                    "required": true,
                    "help": [
                        "A query to select a collection of metric streams"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"definition\" <$> TF.attribute",
                    "name": "_definition",
                    "method": "definition",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDefinition",
                    "validate": false,
                    "optional": false,
                    "original": "definition"
                },
                {
                    "default": "_type'",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The operation to perform on the matching metric streams"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "_type'",
                    "method": "type'",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasType'",
                    "validate": false,
                    "optional": false,
                    "original": "type"
                }
            ],
            "name": "MetricClusterQuery",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_definition",
                    "computed": false,
                    "required": true,
                    "help": [
                        "A query to select a collection of metric streams"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"definition\" <$> TF.attribute",
                    "name": "_definition",
                    "method": "definition",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDefinition",
                    "validate": false,
                    "optional": false,
                    "original": "definition"
                },
                {
                    "default": "_type'",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The operation to perform on the matching metric streams"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "_type'",
                    "method": "type'",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasType'",
                    "validate": false,
                    "optional": false,
                    "original": "type"
                }
            ],
            "conflicts": [],
            "type": "MetricClusterQuery s",
            "original": "metric_cluster_query"
        },
        {
            "con": {
                "smart": "newCheckStatsd",
                "name": "CheckStatsd'"
            },
            "arguments": [
                {
                    "default": "_sourceIp",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The source IP of the statsd metrics stream"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"source_ip\" <$> TF.attribute",
                    "name": "_sourceIp",
                    "method": "sourceIp",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasSourceIp",
                    "validate": false,
                    "optional": false,
                    "original": "source_ip"
                }
            ],
            "name": "CheckStatsd",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_sourceIp",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The source IP of the statsd metrics stream"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"source_ip\" <$> TF.attribute",
                    "name": "_sourceIp",
                    "method": "sourceIp",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasSourceIp",
                    "validate": false,
                    "optional": false,
                    "original": "source_ip"
                }
            ],
            "conflicts": [],
            "type": "CheckStatsd s",
            "original": "check_statsd"
        },
        {
            "con": {
                "smart": "newContactGroupHttp",
                "name": "ContactGroupHttp'"
            },
            "arguments": [
                {
                    "default": "_address",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"address\" <$> TF.attribute",
                    "name": "_address",
                    "method": "address",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAddress",
                    "validate": false,
                    "optional": false,
                    "original": "address"
                },
                {
                    "default": "TF.value \"json\"",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"format\" <$> TF.attribute",
                    "name": "_format",
                    "method": "format",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasFormat",
                    "validate": false,
                    "optional": true,
                    "original": "format"
                },
                {
                    "default": "TF.value \"POST\"",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"method\" <$> TF.attribute",
                    "name": "_method",
                    "method": "method",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMethod",
                    "validate": false,
                    "optional": true,
                    "original": "method"
                }
            ],
            "name": "ContactGroupHttp",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_address",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"address\" <$> TF.attribute",
                    "name": "_address",
                    "method": "address",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAddress",
                    "validate": false,
                    "optional": false,
                    "original": "address"
                }
            ],
            "conflicts": [],
            "type": "ContactGroupHttp s",
            "original": "contact_group_http"
        },
        {
            "con": {
                "smart": "newCheckPostgresql",
                "name": "CheckPostgresql'"
            },
            "arguments": [
                {
                    "default": "_dsn",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The connect DSN for the PostgreSQL instance"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"dsn\" <$> TF.attribute",
                    "name": "_dsn",
                    "method": "dsn",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDsn",
                    "validate": false,
                    "optional": false,
                    "original": "dsn"
                },
                {
                    "default": "_query",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The SQL to use as the query"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"query\" <$> TF.attribute",
                    "name": "_query",
                    "method": "query",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasQuery",
                    "validate": false,
                    "optional": false,
                    "original": "query"
                }
            ],
            "name": "CheckPostgresql",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_dsn",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The connect DSN for the PostgreSQL instance"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"dsn\" <$> TF.attribute",
                    "name": "_dsn",
                    "method": "dsn",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDsn",
                    "validate": false,
                    "optional": false,
                    "original": "dsn"
                },
                {
                    "default": "_query",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The SQL to use as the query"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"query\" <$> TF.attribute",
                    "name": "_query",
                    "method": "query",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasQuery",
                    "validate": false,
                    "optional": false,
                    "original": "query"
                }
            ],
            "conflicts": [],
            "type": "CheckPostgresql s",
            "original": "check_postgresql"
        },
        {
            "con": {
                "smart": "newGraphMetric",
                "name": "GraphMetric'"
            },
            "arguments": [
                {
                    "default": "TF.value P.True",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"active\" <$> TF.attribute",
                    "name": "_active",
                    "method": "active",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasActive",
                    "validate": false,
                    "optional": true,
                    "original": "active"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"alpha\" <$> TF.attribute",
                    "name": "_alpha",
                    "method": "alpha",
                    "conflicts": [],
                    "type": "TF.Attr s P.Double",
                    "class": "HasAlpha",
                    "validate": false,
                    "optional": true,
                    "original": "alpha"
                },
                {
                    "default": "TF.value \"left\"",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"axis\" <$> TF.attribute",
                    "name": "_axis",
                    "method": "axis",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAxis",
                    "validate": false,
                    "optional": true,
                    "original": "axis"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"caql\" <$> TF.attribute",
                    "name": "_caql",
                    "method": "caql",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_check",
                            "method": "check"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_metricName",
                            "method": "metricName"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCaql",
                    "validate": false,
                    "optional": true,
                    "original": "caql"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"check\" <$> TF.attribute",
                    "name": "_check",
                    "method": "check",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_caql",
                            "method": "caql"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCheck",
                    "validate": false,
                    "optional": true,
                    "original": "check"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"color\" <$> TF.attribute",
                    "name": "_color",
                    "method": "color",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasColor",
                    "validate": false,
                    "optional": true,
                    "original": "color"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"formula\" <$> TF.attribute",
                    "name": "_formula",
                    "method": "formula",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasFormula",
                    "validate": false,
                    "optional": true,
                    "original": "formula"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"legend_formula\" <$> TF.attribute",
                    "name": "_legendFormula",
                    "method": "legendFormula",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasLegendFormula",
                    "validate": false,
                    "optional": true,
                    "original": "legend_formula"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"metric_name\" <$> TF.attribute",
                    "name": "_metricName",
                    "method": "metricName",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_caql",
                            "method": "caql"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMetricName",
                    "validate": false,
                    "optional": true,
                    "original": "metric_name"
                },
                {
                    "default": "_metricType",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"metric_type\" <$> TF.attribute",
                    "name": "_metricType",
                    "method": "metricType",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMetricType",
                    "validate": false,
                    "optional": false,
                    "original": "metric_type"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": true,
                    "original": "name"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"stack\" <$> TF.attribute",
                    "name": "_stack",
                    "method": "stack",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasStack",
                    "validate": false,
                    "optional": true,
                    "original": "stack"
                }
            ],
            "name": "GraphMetric",
            "threaded": true,
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"function\" <$> TF.attribute",
                    "name": "_computedFunction",
                    "method": "computedFunction",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedFunction",
                    "validate": false,
                    "optional": true,
                    "original": "function"
                }
            ],
            "parameters": [
                {
                    "default": "_metricType",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"metric_type\" <$> TF.attribute",
                    "name": "_metricType",
                    "method": "metricType",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMetricType",
                    "validate": false,
                    "optional": false,
                    "original": "metric_type"
                }
            ],
            "conflicts": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"caql\" <$> TF.attribute",
                    "name": "_caql",
                    "method": "caql",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_check",
                            "method": "check"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_metricName",
                            "method": "metricName"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCaql",
                    "validate": false,
                    "optional": true,
                    "original": "caql"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"check\" <$> TF.attribute",
                    "name": "_check",
                    "method": "check",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_caql",
                            "method": "caql"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCheck",
                    "validate": false,
                    "optional": true,
                    "original": "check"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"metric_name\" <$> TF.attribute",
                    "name": "_metricName",
                    "method": "metricName",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_caql",
                            "method": "caql"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMetricName",
                    "validate": false,
                    "optional": true,
                    "original": "metric_name"
                }
            ],
            "type": "GraphMetric s",
            "original": "graph_metric"
        },
        {
            "con": {
                "smart": "newGraphMetricCluster",
                "name": "GraphMetricCluster'"
            },
            "arguments": [
                {
                    "default": "TF.value P.True",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"active\" <$> TF.attribute",
                    "name": "_active",
                    "method": "active",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasActive",
                    "validate": false,
                    "optional": true,
                    "original": "active"
                },
                {
                    "default": "TF.value \"none\"",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"aggregate\" <$> TF.attribute",
                    "name": "_aggregate",
                    "method": "aggregate",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAggregate",
                    "validate": false,
                    "optional": true,
                    "original": "aggregate"
                },
                {
                    "default": "TF.value \"left\"",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"axis\" <$> TF.attribute",
                    "name": "_axis",
                    "method": "axis",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAxis",
                    "validate": false,
                    "optional": true,
                    "original": "axis"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"color\" <$> TF.attribute",
                    "name": "_color",
                    "method": "color",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasColor",
                    "validate": false,
                    "optional": true,
                    "original": "color"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"query\" <$> TF.attribute",
                    "name": "_query",
                    "method": "query",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasQuery",
                    "validate": false,
                    "optional": true,
                    "original": "query"
                }
            ],
            "name": "GraphMetricCluster",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                }
            ],
            "conflicts": [],
            "type": "GraphMetricCluster s",
            "original": "graph_metric_cluster"
        },
        {
            "con": {
                "smart": "newContactGroupXmpp",
                "name": "ContactGroupXmpp'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"address\" <$> TF.attribute",
                    "name": "_address",
                    "method": "address",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_user",
                            "method": "user"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAddress",
                    "validate": false,
                    "optional": true,
                    "original": "address"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"user\" <$> TF.attribute",
                    "name": "_user",
                    "method": "user",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_address",
                            "method": "address"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUser",
                    "validate": false,
                    "optional": true,
                    "original": "user"
                }
            ],
            "name": "ContactGroupXmpp",
            "threaded": true,
            "attributes": [],
            "parameters": [],
            "conflicts": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"address\" <$> TF.attribute",
                    "name": "_address",
                    "method": "address",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_user",
                            "method": "user"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAddress",
                    "validate": false,
                    "optional": true,
                    "original": "address"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"user\" <$> TF.attribute",
                    "name": "_user",
                    "method": "user",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_address",
                            "method": "address"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUser",
                    "validate": false,
                    "optional": true,
                    "original": "user"
                }
            ],
            "type": "ContactGroupXmpp s",
            "original": "contact_group_xmpp"
        },
        {
            "con": {
                "smart": "newContactGroupAlertOption",
                "name": "ContactGroupAlertOption'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"escalate_after\" <$> TF.attribute",
                    "name": "_escalateAfter",
                    "method": "escalateAfter",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasEscalateAfter",
                    "validate": false,
                    "optional": true,
                    "original": "escalate_after"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"escalate_to\" <$> TF.attribute",
                    "name": "_escalateTo",
                    "method": "escalateTo",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasEscalateTo",
                    "validate": false,
                    "optional": true,
                    "original": "escalate_to"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"reminder\" <$> TF.attribute",
                    "name": "_reminder",
                    "method": "reminder",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasReminder",
                    "validate": false,
                    "optional": true,
                    "original": "reminder"
                },
                {
                    "default": "_severity",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"severity\" <$> TF.attribute",
                    "name": "_severity",
                    "method": "severity",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasSeverity",
                    "validate": false,
                    "optional": false,
                    "original": "severity"
                }
            ],
            "name": "ContactGroupAlertOption",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_severity",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"severity\" <$> TF.attribute",
                    "name": "_severity",
                    "method": "severity",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasSeverity",
                    "validate": false,
                    "optional": false,
                    "original": "severity"
                }
            ],
            "conflicts": [],
            "type": "ContactGroupAlertOption s",
            "original": "contact_group_alert_option"
        },
        {
            "con": {
                "smart": "newIfValue",
                "name": "IfValue'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Fire the rule set if there has been no data for the given metric stream over",
                        "the last duration"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"absent\" <$> TF.attribute",
                    "name": "_absent",
                    "method": "absent",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_contains",
                            "method": "contains"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_over",
                            "method": "over"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_minValue",
                            "method": "minValue"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_maxValue",
                            "method": "maxValue"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_changed",
                            "method": "changed"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_notMatch",
                            "method": "notMatch"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_notContain",
                            "method": "notContain"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_match",
                            "method": "match"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAbsent",
                    "validate": false,
                    "optional": true,
                    "original": "absent"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Boolean indicating the value has changed"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"changed\" <$> TF.attribute",
                    "name": "_changed",
                    "method": "changed",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_contains",
                            "method": "contains"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_over",
                            "method": "over"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_minValue",
                            "method": "minValue"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_absent",
                            "method": "absent"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_maxValue",
                            "method": "maxValue"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_notMatch",
                            "method": "notMatch"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_notContain",
                            "method": "notContain"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_match",
                            "method": "match"
                        }
                    ],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasChanged",
                    "validate": false,
                    "optional": true,
                    "original": "changed"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Fire the rule set if the text metric contain the following string"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"contains\" <$> TF.attribute",
                    "name": "_contains",
                    "method": "contains",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_over",
                            "method": "over"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_minValue",
                            "method": "minValue"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_absent",
                            "method": "absent"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_maxValue",
                            "method": "maxValue"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_changed",
                            "method": "changed"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_notMatch",
                            "method": "notMatch"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_notContain",
                            "method": "notContain"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_match",
                            "method": "match"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasContains",
                    "validate": false,
                    "optional": true,
                    "original": "contains"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Fire the rule set if the text metric exactly match the following string"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"match\" <$> TF.attribute",
                    "name": "_match",
                    "method": "match",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_contains",
                            "method": "contains"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_over",
                            "method": "over"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_minValue",
                            "method": "minValue"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_absent",
                            "method": "absent"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_maxValue",
                            "method": "maxValue"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_changed",
                            "method": "changed"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_notMatch",
                            "method": "notMatch"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_notContain",
                            "method": "notContain"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMatch",
                    "validate": false,
                    "optional": true,
                    "original": "match"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Fire the rule set if the numeric value is more than the specified value"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"max_value\" <$> TF.attribute",
                    "name": "_maxValue",
                    "method": "maxValue",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_contains",
                            "method": "contains"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_minValue",
                            "method": "minValue"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_absent",
                            "method": "absent"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_changed",
                            "method": "changed"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_notMatch",
                            "method": "notMatch"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_notContain",
                            "method": "notContain"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_match",
                            "method": "match"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMaxValue",
                    "validate": false,
                    "optional": true,
                    "original": "max_value"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Fire the rule set if the numeric value less than the specified value"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"min_value\" <$> TF.attribute",
                    "name": "_minValue",
                    "method": "minValue",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_contains",
                            "method": "contains"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_absent",
                            "method": "absent"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_maxValue",
                            "method": "maxValue"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_changed",
                            "method": "changed"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_notMatch",
                            "method": "notMatch"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_notContain",
                            "method": "notContain"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_match",
                            "method": "match"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMinValue",
                    "validate": false,
                    "optional": true,
                    "original": "min_value"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Fire the rule set if the text metric does not contain the following string"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"not_contain\" <$> TF.attribute",
                    "name": "_notContain",
                    "method": "notContain",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_contains",
                            "method": "contains"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_over",
                            "method": "over"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_minValue",
                            "method": "minValue"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_absent",
                            "method": "absent"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_maxValue",
                            "method": "maxValue"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_changed",
                            "method": "changed"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_notMatch",
                            "method": "notMatch"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_match",
                            "method": "match"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasNotContain",
                    "validate": false,
                    "optional": true,
                    "original": "not_contain"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Fire the rule set if the text metric not match the following string"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"not_match\" <$> TF.attribute",
                    "name": "_notMatch",
                    "method": "notMatch",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_contains",
                            "method": "contains"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_over",
                            "method": "over"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_minValue",
                            "method": "minValue"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_absent",
                            "method": "absent"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_maxValue",
                            "method": "maxValue"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_changed",
                            "method": "changed"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_notContain",
                            "method": "notContain"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_match",
                            "method": "match"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasNotMatch",
                    "validate": false,
                    "optional": true,
                    "original": "not_match"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Use a derived value using a window"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"over\" <$> TF.attribute",
                    "name": "_over",
                    "method": "over",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_contains",
                            "method": "contains"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_absent",
                            "method": "absent"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_changed",
                            "method": "changed"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_notMatch",
                            "method": "notMatch"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_notContain",
                            "method": "notContain"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_match",
                            "method": "match"
                        }
                    ],
                    "type": "TF.Attr s (ValueOver s)",
                    "class": "HasOver",
                    "validate": true,
                    "optional": true,
                    "original": "over"
                }
            ],
            "name": "IfValue",
            "threaded": true,
            "attributes": [],
            "parameters": [],
            "conflicts": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Fire the rule set if there has been no data for the given metric stream over",
                        "the last duration"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"absent\" <$> TF.attribute",
                    "name": "_absent",
                    "method": "absent",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_contains",
                            "method": "contains"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_over",
                            "method": "over"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_minValue",
                            "method": "minValue"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_maxValue",
                            "method": "maxValue"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_changed",
                            "method": "changed"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_notMatch",
                            "method": "notMatch"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_notContain",
                            "method": "notContain"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_match",
                            "method": "match"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAbsent",
                    "validate": false,
                    "optional": true,
                    "original": "absent"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Boolean indicating the value has changed"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"changed\" <$> TF.attribute",
                    "name": "_changed",
                    "method": "changed",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_contains",
                            "method": "contains"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_over",
                            "method": "over"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_minValue",
                            "method": "minValue"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_absent",
                            "method": "absent"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_maxValue",
                            "method": "maxValue"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_notMatch",
                            "method": "notMatch"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_notContain",
                            "method": "notContain"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_match",
                            "method": "match"
                        }
                    ],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasChanged",
                    "validate": false,
                    "optional": true,
                    "original": "changed"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Fire the rule set if the text metric contain the following string"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"contains\" <$> TF.attribute",
                    "name": "_contains",
                    "method": "contains",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_over",
                            "method": "over"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_minValue",
                            "method": "minValue"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_absent",
                            "method": "absent"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_maxValue",
                            "method": "maxValue"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_changed",
                            "method": "changed"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_notMatch",
                            "method": "notMatch"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_notContain",
                            "method": "notContain"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_match",
                            "method": "match"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasContains",
                    "validate": false,
                    "optional": true,
                    "original": "contains"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Fire the rule set if the text metric exactly match the following string"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"match\" <$> TF.attribute",
                    "name": "_match",
                    "method": "match",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_contains",
                            "method": "contains"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_over",
                            "method": "over"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_minValue",
                            "method": "minValue"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_absent",
                            "method": "absent"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_maxValue",
                            "method": "maxValue"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_changed",
                            "method": "changed"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_notMatch",
                            "method": "notMatch"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_notContain",
                            "method": "notContain"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMatch",
                    "validate": false,
                    "optional": true,
                    "original": "match"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Fire the rule set if the numeric value is more than the specified value"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"max_value\" <$> TF.attribute",
                    "name": "_maxValue",
                    "method": "maxValue",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_contains",
                            "method": "contains"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_minValue",
                            "method": "minValue"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_absent",
                            "method": "absent"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_changed",
                            "method": "changed"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_notMatch",
                            "method": "notMatch"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_notContain",
                            "method": "notContain"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_match",
                            "method": "match"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMaxValue",
                    "validate": false,
                    "optional": true,
                    "original": "max_value"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Fire the rule set if the numeric value less than the specified value"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"min_value\" <$> TF.attribute",
                    "name": "_minValue",
                    "method": "minValue",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_contains",
                            "method": "contains"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_absent",
                            "method": "absent"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_maxValue",
                            "method": "maxValue"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_changed",
                            "method": "changed"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_notMatch",
                            "method": "notMatch"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_notContain",
                            "method": "notContain"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_match",
                            "method": "match"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMinValue",
                    "validate": false,
                    "optional": true,
                    "original": "min_value"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Fire the rule set if the text metric does not contain the following string"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"not_contain\" <$> TF.attribute",
                    "name": "_notContain",
                    "method": "notContain",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_contains",
                            "method": "contains"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_over",
                            "method": "over"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_minValue",
                            "method": "minValue"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_absent",
                            "method": "absent"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_maxValue",
                            "method": "maxValue"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_changed",
                            "method": "changed"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_notMatch",
                            "method": "notMatch"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_match",
                            "method": "match"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasNotContain",
                    "validate": false,
                    "optional": true,
                    "original": "not_contain"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Fire the rule set if the text metric not match the following string"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"not_match\" <$> TF.attribute",
                    "name": "_notMatch",
                    "method": "notMatch",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_contains",
                            "method": "contains"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_over",
                            "method": "over"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_minValue",
                            "method": "minValue"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_absent",
                            "method": "absent"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_maxValue",
                            "method": "maxValue"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_changed",
                            "method": "changed"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_notContain",
                            "method": "notContain"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_match",
                            "method": "match"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasNotMatch",
                    "validate": false,
                    "optional": true,
                    "original": "not_match"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Use a derived value using a window"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"over\" <$> TF.attribute",
                    "name": "_over",
                    "method": "over",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_contains",
                            "method": "contains"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_absent",
                            "method": "absent"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_changed",
                            "method": "changed"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_notMatch",
                            "method": "notMatch"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_notContain",
                            "method": "notContain"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_match",
                            "method": "match"
                        }
                    ],
                    "type": "TF.Attr s (ValueOver s)",
                    "class": "HasOver",
                    "validate": true,
                    "optional": true,
                    "original": "over"
                }
            ],
            "type": "IfValue s",
            "original": "if_value"
        },
        {
            "con": {
                "smart": "newContactGroupEmail",
                "name": "ContactGroupEmail'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"address\" <$> TF.attribute",
                    "name": "_address",
                    "method": "address",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_user",
                            "method": "user"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAddress",
                    "validate": false,
                    "optional": true,
                    "original": "address"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"user\" <$> TF.attribute",
                    "name": "_user",
                    "method": "user",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_address",
                            "method": "address"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUser",
                    "validate": false,
                    "optional": true,
                    "original": "user"
                }
            ],
            "name": "ContactGroupEmail",
            "threaded": true,
            "attributes": [],
            "parameters": [],
            "conflicts": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"address\" <$> TF.attribute",
                    "name": "_address",
                    "method": "address",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_user",
                            "method": "user"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAddress",
                    "validate": false,
                    "optional": true,
                    "original": "address"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"user\" <$> TF.attribute",
                    "name": "_user",
                    "method": "user",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_address",
                            "method": "address"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUser",
                    "validate": false,
                    "optional": true,
                    "original": "user"
                }
            ],
            "type": "ContactGroupEmail s",
            "original": "contact_group_email"
        },
        {
            "con": {
                "smart": "newCheckCaql",
                "name": "CheckCaql'"
            },
            "arguments": [
                {
                    "default": "_query",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The query definition"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"query\" <$> TF.attribute",
                    "name": "_query",
                    "method": "query",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasQuery",
                    "validate": false,
                    "optional": false,
                    "original": "query"
                }
            ],
            "name": "CheckCaql",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_query",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The query definition"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"query\" <$> TF.attribute",
                    "name": "_query",
                    "method": "query",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasQuery",
                    "validate": false,
                    "optional": false,
                    "original": "query"
                }
            ],
            "conflicts": [],
            "type": "CheckCaql s",
            "original": "check_caql"
        },
        {
            "con": {
                "smart": "newCollectorDetails",
                "name": "CollectorDetails'"
            },
            "arguments": [],
            "name": "CollectorDetails",
            "threaded": true,
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"cn\" <$> TF.attribute",
                    "name": "_computedCn",
                    "method": "computedCn",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedCn",
                    "validate": false,
                    "optional": false,
                    "original": "cn"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"external_host\" <$> TF.attribute",
                    "name": "_computedExternalHost",
                    "method": "computedExternalHost",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedExternalHost",
                    "validate": false,
                    "optional": false,
                    "original": "external_host"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"external_port\" <$> TF.attribute",
                    "name": "_computedExternalPort",
                    "method": "computedExternalPort",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasComputedExternalPort",
                    "validate": false,
                    "optional": false,
                    "original": "external_port"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"ip\" <$> TF.attribute",
                    "name": "_computedIp",
                    "method": "computedIp",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedIp",
                    "validate": false,
                    "optional": false,
                    "original": "ip"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"min_version\" <$> TF.attribute",
                    "name": "_computedMinVersion",
                    "method": "computedMinVersion",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasComputedMinVersion",
                    "validate": false,
                    "optional": false,
                    "original": "min_version"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"modules\" <$> TF.attribute",
                    "name": "_computedModules",
                    "method": "computedModules",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasComputedModules",
                    "validate": false,
                    "optional": false,
                    "original": "modules"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"port\" <$> TF.attribute",
                    "name": "_computedPort",
                    "method": "computedPort",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasComputedPort",
                    "validate": false,
                    "optional": false,
                    "original": "port"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"skew\" <$> TF.attribute",
                    "name": "_computedSkew",
                    "method": "computedSkew",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedSkew",
                    "validate": false,
                    "optional": false,
                    "original": "skew"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"status\" <$> TF.attribute",
                    "name": "_computedStatus",
                    "method": "computedStatus",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedStatus",
                    "validate": false,
                    "optional": false,
                    "original": "status"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"version\" <$> TF.attribute",
                    "name": "_computedVersion",
                    "method": "computedVersion",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasComputedVersion",
                    "validate": false,
                    "optional": false,
                    "original": "version"
                }
            ],
            "parameters": [],
            "conflicts": [],
            "type": "CollectorDetails s",
            "original": "collector_details"
        },
        {
            "con": {
                "smart": "newCheckJson",
                "name": "CheckJson'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The HTTP Authentication method"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"auth_method\" <$> TF.attribute",
                    "name": "_authMethod",
                    "method": "authMethod",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAuthMethod",
                    "validate": false,
                    "optional": true,
                    "original": "auth_method"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The HTTP Authentication user password"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"auth_password\" <$> TF.attribute",
                    "name": "_authPassword",
                    "method": "authPassword",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAuthPassword",
                    "validate": false,
                    "optional": true,
                    "original": "auth_password"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The HTTP Authentication user name"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"auth_user\" <$> TF.attribute",
                    "name": "_authUser",
                    "method": "authUser",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAuthUser",
                    "validate": false,
                    "optional": true,
                    "original": "auth_user"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A path to a file containing all the certificate authorities that should be",
                        "loaded to validate the remote certificate (for TLS checks)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"ca_chain\" <$> TF.attribute",
                    "name": "_caChain",
                    "method": "caChain",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCaChain",
                    "validate": false,
                    "optional": true,
                    "original": "ca_chain"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A path to a file containing the client certificate that will be presented to",
                        "the remote server (for TLS-enabled checks)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"certificate_file\" <$> TF.attribute",
                    "name": "_certificateFile",
                    "method": "certificateFile",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCertificateFile",
                    "validate": false,
                    "optional": true,
                    "original": "certificate_file"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A list of ciphers to be used in the TLS protocol (for HTTPS checks)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"ciphers\" <$> TF.attribute",
                    "name": "_ciphers",
                    "method": "ciphers",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCiphers",
                    "validate": false,
                    "optional": true,
                    "original": "ciphers"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Map of HTTP Headers to send along with HTTP Requests"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"headers\" <$> TF.attribute",
                    "name": "_headers",
                    "method": "headers",
                    "conflicts": [],
                    "type": "TF.Attr s (P.HashMap P.Text (TF.Attr s P.Text))",
                    "class": "HasHeaders",
                    "validate": false,
                    "optional": true,
                    "original": "headers"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A path to a file containing key to be used in conjunction with the cilent",
                        "certificate (for TLS checks)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"key_file\" <$> TF.attribute",
                    "name": "_keyFile",
                    "method": "keyFile",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasKeyFile",
                    "validate": false,
                    "optional": true,
                    "original": "key_file"
                },
                {
                    "default": "TF.value \"GET\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The HTTP method to use"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"method\" <$> TF.attribute",
                    "name": "_method",
                    "method": "method",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMethod",
                    "validate": false,
                    "optional": true,
                    "original": "method"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The information transferred as the payload of an HTTP request"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"payload\" <$> TF.attribute",
                    "name": "_payload",
                    "method": "payload",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPayload",
                    "validate": false,
                    "optional": true,
                    "original": "payload"
                },
                {
                    "default": "TF.value 443",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Specifies the port on which the management interface can be reached"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"port\" <$> TF.attribute",
                    "name": "_port",
                    "method": "port",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasPort",
                    "validate": false,
                    "optional": true,
                    "original": "port"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Sets an approximate limit on the data read (0 means no limit)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"read_limit\" <$> TF.attribute",
                    "name": "_readLimit",
                    "method": "readLimit",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasReadLimit",
                    "validate": false,
                    "optional": true,
                    "original": "read_limit"
                },
                {
                    "default": "_url",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The URL to use as the target of the check"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"url\" <$> TF.attribute",
                    "name": "_url",
                    "method": "url",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUrl",
                    "validate": false,
                    "optional": false,
                    "original": "url"
                },
                {
                    "default": "TF.value \"1.1\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Sets the HTTP version for the check to use"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"version\" <$> TF.attribute",
                    "name": "_version",
                    "method": "version",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasVersion",
                    "validate": false,
                    "optional": true,
                    "original": "version"
                }
            ],
            "name": "CheckJson",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_url",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The URL to use as the target of the check"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"url\" <$> TF.attribute",
                    "name": "_url",
                    "method": "url",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUrl",
                    "validate": false,
                    "optional": false,
                    "original": "url"
                }
            ],
            "conflicts": [],
            "type": "CheckJson s",
            "original": "check_json"
        },
        {
            "con": {
                "smart": "newContactGroupIrc",
                "name": "ContactGroupIrc'"
            },
            "arguments": [
                {
                    "default": "_user",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"user\" <$> TF.attribute",
                    "name": "_user",
                    "method": "user",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUser",
                    "validate": false,
                    "optional": false,
                    "original": "user"
                }
            ],
            "name": "ContactGroupIrc",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_user",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"user\" <$> TF.attribute",
                    "name": "_user",
                    "method": "user",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUser",
                    "validate": false,
                    "optional": false,
                    "original": "user"
                }
            ],
            "conflicts": [],
            "type": "ContactGroupIrc s",
            "original": "contact_group_irc"
        },
        {
            "con": {
                "smart": "newIfThen",
                "name": "IfThen'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The length of time we should wait before contacting the contact groups after",
                        "this ruleset has faulted."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"after\" <$> TF.attribute",
                    "name": "_after",
                    "method": "after",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAfter",
                    "validate": false,
                    "optional": true,
                    "original": "after"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "List of contact groups to notify at the following appropriate severity if",
                        "this rule set is active."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"notify\" <$> TF.attribute",
                    "name": "_notify",
                    "method": "notify",
                    "conflicts": [],
                    "type": "TF.Attr s (P.NonEmpty (TF.Attr s P.Text))",
                    "class": "HasNotify",
                    "validate": false,
                    "optional": true,
                    "original": "notify"
                },
                {
                    "default": "TF.value 1",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Send a notification at this severity level."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"severity\" <$> TF.attribute",
                    "name": "_severity",
                    "method": "severity",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasSeverity",
                    "validate": false,
                    "optional": true,
                    "original": "severity"
                }
            ],
            "name": "IfThen",
            "threaded": true,
            "attributes": [],
            "parameters": [],
            "conflicts": [],
            "type": "IfThen s",
            "original": "if_then"
        },
        {
            "con": {
                "smart": "newValueOver",
                "name": "ValueOver'"
            },
            "arguments": [
                {
                    "default": "TF.value \"300s\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Duration over which data from the last interval is examined"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"last\" <$> TF.attribute",
                    "name": "_last",
                    "method": "last",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasLast",
                    "validate": false,
                    "optional": true,
                    "original": "last"
                },
                {
                    "default": "TF.value \"average\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Define the window funciton to use over the last duration"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"using\" <$> TF.attribute",
                    "name": "_using",
                    "method": "using",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUsing",
                    "validate": false,
                    "optional": true,
                    "original": "using"
                }
            ],
            "name": "ValueOver",
            "threaded": true,
            "attributes": [],
            "parameters": [],
            "conflicts": [],
            "type": "ValueOver s",
            "original": "value_over"
        },
        {
            "con": {
                "smart": "newCheckCollector",
                "name": "CheckCollector'"
            },
            "arguments": [
                {
                    "default": "_id",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The ID of the collector"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"id\" <$> TF.attribute",
                    "name": "_id",
                    "method": "id",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasId",
                    "validate": false,
                    "optional": false,
                    "original": "id"
                }
            ],
            "name": "CheckCollector",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_id",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The ID of the collector"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"id\" <$> TF.attribute",
                    "name": "_id",
                    "method": "id",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasId",
                    "validate": false,
                    "optional": false,
                    "original": "id"
                }
            ],
            "conflicts": [],
            "type": "CheckCollector s",
            "original": "check_collector"
        },
        {
            "con": {
                "smart": "newContactGroupSms",
                "name": "ContactGroupSms'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"address\" <$> TF.attribute",
                    "name": "_address",
                    "method": "address",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_user",
                            "method": "user"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAddress",
                    "validate": false,
                    "optional": true,
                    "original": "address"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"user\" <$> TF.attribute",
                    "name": "_user",
                    "method": "user",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_address",
                            "method": "address"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUser",
                    "validate": false,
                    "optional": true,
                    "original": "user"
                }
            ],
            "name": "ContactGroupSms",
            "threaded": true,
            "attributes": [],
            "parameters": [],
            "conflicts": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"address\" <$> TF.attribute",
                    "name": "_address",
                    "method": "address",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_user",
                            "method": "user"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAddress",
                    "validate": false,
                    "optional": true,
                    "original": "address"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"user\" <$> TF.attribute",
                    "name": "_user",
                    "method": "user",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_address",
                            "method": "address"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUser",
                    "validate": false,
                    "optional": true,
                    "original": "user"
                }
            ],
            "type": "ContactGroupSms s",
            "original": "contact_group_sms"
        },
        {
            "con": {
                "smart": "newCheckMetric",
                "name": "CheckMetric'"
            },
            "arguments": [
                {
                    "default": "TF.value P.True",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Enables or disables the metric"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"active\" <$> TF.attribute",
                    "name": "_active",
                    "method": "active",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasActive",
                    "validate": false,
                    "optional": true,
                    "original": "active"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the metric"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Tags assigned to the metric"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"tags\" <$> TF.attribute",
                    "name": "_tags",
                    "method": "tags",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasTags",
                    "validate": false,
                    "optional": true,
                    "original": "tags"
                },
                {
                    "default": "_type'",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Type of metric (e.g. numeric, histogram, text)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "_type'",
                    "method": "type'",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasType'",
                    "validate": false,
                    "optional": false,
                    "original": "type"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The unit of measurement for a metric"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"unit\" <$> TF.attribute",
                    "name": "_unit",
                    "method": "unit",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUnit",
                    "validate": false,
                    "optional": true,
                    "original": "unit"
                }
            ],
            "name": "CheckMetric",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the metric"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                },
                {
                    "default": "_type'",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Type of metric (e.g. numeric, histogram, text)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "_type'",
                    "method": "type'",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasType'",
                    "validate": false,
                    "optional": false,
                    "original": "type"
                }
            ],
            "conflicts": [],
            "type": "CheckMetric s",
            "original": "check_metric"
        },
        {
            "con": {
                "smart": "newContactGroupPagerDuty",
                "name": "ContactGroupPagerDuty'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"contact_group_fallback\" <$> TF.attribute",
                    "name": "_contactGroupFallback",
                    "method": "contactGroupFallback",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasContactGroupFallback",
                    "validate": false,
                    "optional": true,
                    "original": "contact_group_fallback"
                },
                {
                    "default": "_serviceKey",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"service_key\" <$> TF.attribute",
                    "name": "_serviceKey",
                    "method": "serviceKey",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasServiceKey",
                    "validate": false,
                    "optional": false,
                    "original": "service_key"
                },
                {
                    "default": "_webhookUrl",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"webhook_url\" <$> TF.attribute",
                    "name": "_webhookUrl",
                    "method": "webhookUrl",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasWebhookUrl",
                    "validate": false,
                    "optional": false,
                    "original": "webhook_url"
                }
            ],
            "name": "ContactGroupPagerDuty",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_serviceKey",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"service_key\" <$> TF.attribute",
                    "name": "_serviceKey",
                    "method": "serviceKey",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasServiceKey",
                    "validate": false,
                    "optional": false,
                    "original": "service_key"
                },
                {
                    "default": "_webhookUrl",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"webhook_url\" <$> TF.attribute",
                    "name": "_webhookUrl",
                    "method": "webhookUrl",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasWebhookUrl",
                    "validate": false,
                    "optional": false,
                    "original": "webhook_url"
                }
            ],
            "conflicts": [],
            "type": "ContactGroupPagerDuty s",
            "original": "contact_group_pager_duty"
        },
        {
            "con": {
                "smart": "newRuleSetIf",
                "name": "RuleSetIf'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Description of the action(s) to take when this rule set is active"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"then\" <$> TF.attribute",
                    "name": "_then'",
                    "method": "then'",
                    "conflicts": [],
                    "type": "TF.Attr s (IfThen s)",
                    "class": "HasThen'",
                    "validate": true,
                    "optional": true,
                    "original": "then"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Predicate that the rule set uses to evaluate a stream of metrics"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"value\" <$> TF.attribute",
                    "name": "_value",
                    "method": "value",
                    "conflicts": [],
                    "type": "TF.Attr s (IfValue s)",
                    "class": "HasValue",
                    "validate": true,
                    "optional": true,
                    "original": "value"
                }
            ],
            "name": "RuleSetIf",
            "threaded": true,
            "attributes": [],
            "parameters": [],
            "conflicts": [],
            "type": "RuleSetIf s",
            "original": "rule_set_if"
        },
        {
            "con": {
                "smart": "newCheckMysql",
                "name": "CheckMysql'"
            },
            "arguments": [
                {
                    "default": "_dsn",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The connect DSN for the MySQL instance"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"dsn\" <$> TF.attribute",
                    "name": "_dsn",
                    "method": "dsn",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDsn",
                    "validate": false,
                    "optional": false,
                    "original": "dsn"
                },
                {
                    "default": "_query",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The SQL to use as the query"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"query\" <$> TF.attribute",
                    "name": "_query",
                    "method": "query",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasQuery",
                    "validate": false,
                    "optional": false,
                    "original": "query"
                }
            ],
            "name": "CheckMysql",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_dsn",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The connect DSN for the MySQL instance"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"dsn\" <$> TF.attribute",
                    "name": "_dsn",
                    "method": "dsn",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDsn",
                    "validate": false,
                    "optional": false,
                    "original": "dsn"
                },
                {
                    "default": "_query",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The SQL to use as the query"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"query\" <$> TF.attribute",
                    "name": "_query",
                    "method": "query",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasQuery",
                    "validate": false,
                    "optional": false,
                    "original": "query"
                }
            ],
            "conflicts": [],
            "type": "CheckMysql s",
            "original": "check_mysql"
        },
        {
            "con": {
                "smart": "newAccountUsage",
                "name": "AccountUsage'"
            },
            "arguments": [],
            "name": "AccountUsage",
            "threaded": true,
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"limit\" <$> TF.attribute",
                    "name": "_computedLimit",
                    "method": "computedLimit",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasComputedLimit",
                    "validate": false,
                    "optional": false,
                    "original": "limit"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "_computedType",
                    "method": "computedType",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedType",
                    "validate": false,
                    "optional": false,
                    "original": "type"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"used\" <$> TF.attribute",
                    "name": "_computedUsed",
                    "method": "computedUsed",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasComputedUsed",
                    "validate": false,
                    "optional": false,
                    "original": "used"
                }
            ],
            "parameters": [],
            "conflicts": [],
            "type": "AccountUsage s",
            "original": "account_usage"
        },
        {
            "con": {
                "smart": "newCheckHttptrap",
                "name": "CheckHttptrap'"
            },
            "arguments": [
                {
                    "default": "TF.value P.False",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Specify whether httptrap metrics are logged immediately or held until the",
                        "status message is emitted"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"async_metrics\" <$> TF.attribute",
                    "name": "_asyncMetrics",
                    "method": "asyncMetrics",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasAsyncMetrics",
                    "validate": false,
                    "optional": true,
                    "original": "async_metrics"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"secret\" <$> TF.attribute",
                    "name": "_secret",
                    "method": "secret",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasSecret",
                    "validate": false,
                    "optional": true,
                    "original": "secret"
                }
            ],
            "name": "CheckHttptrap",
            "threaded": true,
            "attributes": [],
            "parameters": [],
            "conflicts": [],
            "type": "CheckHttptrap s",
            "original": "check_httptrap"
        },
        {
            "con": {
                "smart": "newContactGroupVictorops",
                "name": "ContactGroupVictorops'"
            },
            "arguments": [
                {
                    "default": "_apiKey",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"api_key\" <$> TF.attribute",
                    "name": "_apiKey",
                    "method": "apiKey",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasApiKey",
                    "validate": false,
                    "optional": false,
                    "original": "api_key"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"contact_group_fallback\" <$> TF.attribute",
                    "name": "_contactGroupFallback",
                    "method": "contactGroupFallback",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasContactGroupFallback",
                    "validate": false,
                    "optional": true,
                    "original": "contact_group_fallback"
                },
                {
                    "default": "_critical",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"critical\" <$> TF.attribute",
                    "name": "_critical",
                    "method": "critical",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasCritical",
                    "validate": false,
                    "optional": false,
                    "original": "critical"
                },
                {
                    "default": "_info",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"info\" <$> TF.attribute",
                    "name": "_info",
                    "method": "info",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasInfo",
                    "validate": false,
                    "optional": false,
                    "original": "info"
                },
                {
                    "default": "_team",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"team\" <$> TF.attribute",
                    "name": "_team",
                    "method": "team",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasTeam",
                    "validate": false,
                    "optional": false,
                    "original": "team"
                },
                {
                    "default": "_warning",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"warning\" <$> TF.attribute",
                    "name": "_warning",
                    "method": "warning",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasWarning",
                    "validate": false,
                    "optional": false,
                    "original": "warning"
                }
            ],
            "name": "ContactGroupVictorops",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_apiKey",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"api_key\" <$> TF.attribute",
                    "name": "_apiKey",
                    "method": "apiKey",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasApiKey",
                    "validate": false,
                    "optional": false,
                    "original": "api_key"
                },
                {
                    "default": "_critical",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"critical\" <$> TF.attribute",
                    "name": "_critical",
                    "method": "critical",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasCritical",
                    "validate": false,
                    "optional": false,
                    "original": "critical"
                },
                {
                    "default": "_info",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"info\" <$> TF.attribute",
                    "name": "_info",
                    "method": "info",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasInfo",
                    "validate": false,
                    "optional": false,
                    "original": "info"
                },
                {
                    "default": "_team",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"team\" <$> TF.attribute",
                    "name": "_team",
                    "method": "team",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasTeam",
                    "validate": false,
                    "optional": false,
                    "original": "team"
                },
                {
                    "default": "_warning",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"warning\" <$> TF.attribute",
                    "name": "_warning",
                    "method": "warning",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasWarning",
                    "validate": false,
                    "optional": false,
                    "original": "warning"
                }
            ],
            "conflicts": [],
            "type": "ContactGroupVictorops s",
            "original": "contact_group_victorops"
        },
        {
            "con": {
                "smart": "newCheckTcp",
                "name": "CheckTcp'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "This regular expression is matched against the response banner. If a match",
                        "is not found, the check will be marked as bad."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"banner_regexp\" <$> TF.attribute",
                    "name": "_bannerRegexp",
                    "method": "bannerRegexp",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasBannerRegexp",
                    "validate": false,
                    "optional": true,
                    "original": "banner_regexp"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A path to a file containing all the certificate authorities that should be",
                        "loaded to validate the remote certificate (for TLS checks)."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"ca_chain\" <$> TF.attribute",
                    "name": "_caChain",
                    "method": "caChain",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCaChain",
                    "validate": false,
                    "optional": true,
                    "original": "ca_chain"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A path to a file containing the client certificate that will be presented to",
                        "the remote server (for TLS checks)."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"certificate_file\" <$> TF.attribute",
                    "name": "_certificateFile",
                    "method": "certificateFile",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCertificateFile",
                    "validate": false,
                    "optional": true,
                    "original": "certificate_file"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A list of ciphers to be used when establishing a TLS connection"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"ciphers\" <$> TF.attribute",
                    "name": "_ciphers",
                    "method": "ciphers",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCiphers",
                    "validate": false,
                    "optional": true,
                    "original": "ciphers"
                },
                {
                    "default": "_host",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Specifies the host name or IP address to connect to for this TCP check"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"host\" <$> TF.attribute",
                    "name": "_host",
                    "method": "host",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasHost",
                    "validate": false,
                    "optional": false,
                    "original": "host"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A path to a file containing key to be used in conjunction with the cilent",
                        "certificate (for TLS checks)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"key_file\" <$> TF.attribute",
                    "name": "_keyFile",
                    "method": "keyFile",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasKeyFile",
                    "validate": false,
                    "optional": true,
                    "original": "key_file"
                },
                {
                    "default": "_port",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Specifies the port on which the management interface can be reached."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"port\" <$> TF.attribute",
                    "name": "_port",
                    "method": "port",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasPort",
                    "validate": false,
                    "optional": false,
                    "original": "port"
                },
                {
                    "default": "TF.value P.False",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Upgrade TCP connection to use TLS."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"tls\" <$> TF.attribute",
                    "name": "_tls",
                    "method": "tls",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasTls",
                    "validate": false,
                    "optional": true,
                    "original": "tls"
                }
            ],
            "name": "CheckTcp",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_host",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Specifies the host name or IP address to connect to for this TCP check"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"host\" <$> TF.attribute",
                    "name": "_host",
                    "method": "host",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasHost",
                    "validate": false,
                    "optional": false,
                    "original": "host"
                },
                {
                    "default": "_port",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Specifies the port on which the management interface can be reached."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"port\" <$> TF.attribute",
                    "name": "_port",
                    "method": "port",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasPort",
                    "validate": false,
                    "optional": false,
                    "original": "port"
                }
            ],
            "conflicts": [],
            "type": "CheckTcp s",
            "original": "check_tcp"
        },
        {
            "con": {
                "smart": "newCheckConsul",
                "name": "CheckConsul'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A Consul ACL token"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"acl_token\" <$> TF.attribute",
                    "name": "_aclToken",
                    "method": "aclToken",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAclToken",
                    "validate": false,
                    "optional": true,
                    "original": "acl_token"
                },
                {
                    "default": "TF.value P.True",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Allow Consul to read from a non-leader system"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"allow_stale\" <$> TF.attribute",
                    "name": "_allowStale",
                    "method": "allowStale",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasAllowStale",
                    "validate": false,
                    "optional": true,
                    "original": "allow_stale"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A path to a file containing all the certificate authorities that should be",
                        "loaded to validate the remote certificate (for TLS checks)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"ca_chain\" <$> TF.attribute",
                    "name": "_caChain",
                    "method": "caChain",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCaChain",
                    "validate": false,
                    "optional": true,
                    "original": "ca_chain"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A path to a file containing the client certificate that will be presented to",
                        "the remote server (for TLS-enabled checks)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"certificate_file\" <$> TF.attribute",
                    "name": "_certificateFile",
                    "method": "certificateFile",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCertificateFile",
                    "validate": false,
                    "optional": true,
                    "original": "certificate_file"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A blacklist of check names to exclude from metric results"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"check_blacklist\" <$> TF.attribute",
                    "name": "_checkBlacklist",
                    "method": "checkBlacklist",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasCheckBlacklist",
                    "validate": false,
                    "optional": true,
                    "original": "check_blacklist"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A list of ciphers to be used in the TLS protocol (for HTTPS checks)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"ciphers\" <$> TF.attribute",
                    "name": "_ciphers",
                    "method": "ciphers",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCiphers",
                    "validate": false,
                    "optional": true,
                    "original": "ciphers"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The Consul datacenter to extract health information from"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"dc\" <$> TF.attribute",
                    "name": "_dc",
                    "method": "dc",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDc",
                    "validate": false,
                    "optional": true,
                    "original": "dc"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Map of HTTP Headers to send along with HTTP Requests"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"headers\" <$> TF.attribute",
                    "name": "_headers",
                    "method": "headers",
                    "conflicts": [],
                    "type": "TF.Attr s (P.HashMap P.Text (TF.Attr s P.Text))",
                    "class": "HasHeaders",
                    "validate": false,
                    "optional": true,
                    "original": "headers"
                },
                {
                    "default": "TF.value \"http://consul.service.consul\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The HTTP Address of a Consul agent to query"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"http_addr\" <$> TF.attribute",
                    "name": "_httpAddr",
                    "method": "httpAddr",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasHttpAddr",
                    "validate": false,
                    "optional": true,
                    "original": "http_addr"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A path to a file containing key to be used in conjunction with the cilent",
                        "certificate (for TLS checks)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"key_file\" <$> TF.attribute",
                    "name": "_keyFile",
                    "method": "keyFile",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasKeyFile",
                    "validate": false,
                    "optional": true,
                    "original": "key_file"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Node Name or NodeID of a Consul agent"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"node\" <$> TF.attribute",
                    "name": "_node",
                    "method": "node",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_state",
                            "method": "state"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_service",
                            "method": "service"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasNode",
                    "validate": false,
                    "optional": true,
                    "original": "node"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A blacklist of node names or IDs to exclude from metric results"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"node_blacklist\" <$> TF.attribute",
                    "name": "_nodeBlacklist",
                    "method": "nodeBlacklist",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasNodeBlacklist",
                    "validate": false,
                    "optional": true,
                    "original": "node_blacklist"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Name of the Consul service to check"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"service\" <$> TF.attribute",
                    "name": "_service",
                    "method": "service",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_node",
                            "method": "node"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_state",
                            "method": "state"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasService",
                    "validate": false,
                    "optional": true,
                    "original": "service"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A blacklist of service names to exclude from metric results"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"service_blacklist\" <$> TF.attribute",
                    "name": "_serviceBlacklist",
                    "method": "serviceBlacklist",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasServiceBlacklist",
                    "validate": false,
                    "optional": true,
                    "original": "service_blacklist"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Check for Consul services in this particular state"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"state\" <$> TF.attribute",
                    "name": "_state",
                    "method": "state",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_node",
                            "method": "node"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_service",
                            "method": "service"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasState",
                    "validate": false,
                    "optional": true,
                    "original": "state"
                }
            ],
            "name": "CheckConsul",
            "threaded": true,
            "attributes": [],
            "parameters": [],
            "conflicts": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Node Name or NodeID of a Consul agent"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"node\" <$> TF.attribute",
                    "name": "_node",
                    "method": "node",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_state",
                            "method": "state"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_service",
                            "method": "service"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasNode",
                    "validate": false,
                    "optional": true,
                    "original": "node"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Name of the Consul service to check"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"service\" <$> TF.attribute",
                    "name": "_service",
                    "method": "service",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_node",
                            "method": "node"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_state",
                            "method": "state"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasService",
                    "validate": false,
                    "optional": true,
                    "original": "service"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Check for Consul services in this particular state"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"state\" <$> TF.attribute",
                    "name": "_state",
                    "method": "state",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "name": "_node",
                            "method": "node"
                        },
                        {
                            "default": "TF.Nil",
                            "name": "_service",
                            "method": "service"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasState",
                    "validate": false,
                    "optional": true,
                    "original": "state"
                }
            ],
            "type": "CheckConsul s",
            "original": "check_consul"
        },
        {
            "con": {
                "smart": "newContactGroupSlack",
                "name": "ContactGroupSlack'"
            },
            "arguments": [
                {
                    "default": "TF.value P.True",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"buttons\" <$> TF.attribute",
                    "name": "_buttons",
                    "method": "buttons",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasButtons",
                    "validate": false,
                    "optional": true,
                    "original": "buttons"
                },
                {
                    "default": "_channel",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"channel\" <$> TF.attribute",
                    "name": "_channel",
                    "method": "channel",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasChannel",
                    "validate": false,
                    "optional": false,
                    "original": "channel"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"contact_group_fallback\" <$> TF.attribute",
                    "name": "_contactGroupFallback",
                    "method": "contactGroupFallback",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasContactGroupFallback",
                    "validate": false,
                    "optional": true,
                    "original": "contact_group_fallback"
                },
                {
                    "default": "_team",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"team\" <$> TF.attribute",
                    "name": "_team",
                    "method": "team",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasTeam",
                    "validate": false,
                    "optional": false,
                    "original": "team"
                },
                {
                    "default": "TF.value \"Circonus\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Username Slackbot uses in Slack to deliver a notification"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"username\" <$> TF.attribute",
                    "name": "_username",
                    "method": "username",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUsername",
                    "validate": false,
                    "optional": true,
                    "original": "username"
                }
            ],
            "name": "ContactGroupSlack",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_channel",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"channel\" <$> TF.attribute",
                    "name": "_channel",
                    "method": "channel",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasChannel",
                    "validate": false,
                    "optional": false,
                    "original": "channel"
                },
                {
                    "default": "_team",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"team\" <$> TF.attribute",
                    "name": "_team",
                    "method": "team",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasTeam",
                    "validate": false,
                    "optional": false,
                    "original": "team"
                }
            ],
            "conflicts": [],
            "type": "ContactGroupSlack s",
            "original": "contact_group_slack"
        },
        {
            "con": {
                "smart": "newCheckCloudwatch",
                "name": "CheckCloudwatch'"
            },
            "arguments": [
                {
                    "default": "_apiKey",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The AWS API Key"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"api_key\" <$> TF.attribute",
                    "name": "_apiKey",
                    "method": "apiKey",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasApiKey",
                    "validate": false,
                    "optional": false,
                    "original": "api_key"
                },
                {
                    "default": "_apiSecret",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The AWS API Secret"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"api_secret\" <$> TF.attribute",
                    "name": "_apiSecret",
                    "method": "apiSecret",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasApiSecret",
                    "validate": false,
                    "optional": false,
                    "original": "api_secret"
                },
                {
                    "default": "_dimmensions",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The dimensions to query for the metric"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"dimmensions\" <$> TF.attribute",
                    "name": "_dimmensions",
                    "method": "dimmensions",
                    "conflicts": [],
                    "type": "TF.Attr s (P.HashMap P.Text (TF.Attr s P.Text))",
                    "class": "HasDimmensions",
                    "validate": false,
                    "optional": false,
                    "original": "dimmensions"
                },
                {
                    "default": "_metric",
                    "computed": false,
                    "required": true,
                    "help": [
                        "One or more CloudWatch Metric attributes"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"metric\" <$> TF.attribute",
                    "name": "_metric",
                    "method": "metric",
                    "conflicts": [],
                    "type": "TF.Attr s (P.NonEmpty (TF.Attr s P.Text))",
                    "class": "HasMetric",
                    "validate": false,
                    "optional": false,
                    "original": "metric"
                },
                {
                    "default": "_namespace",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The namespace to pull telemetry from"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"namespace\" <$> TF.attribute",
                    "name": "_namespace",
                    "method": "namespace",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasNamespace",
                    "validate": false,
                    "optional": false,
                    "original": "namespace"
                },
                {
                    "default": "_url",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The URL including schema and hostname for the Cloudwatch monitoring server.",
                        "This value will be used to specify the region - for example, to pull from",
                        "us-east-1, the URL would be https://monitoring.us-east-1.amazonaws.com."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"url\" <$> TF.attribute",
                    "name": "_url",
                    "method": "url",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUrl",
                    "validate": false,
                    "optional": false,
                    "original": "url"
                },
                {
                    "default": "TF.value \"2010-08-01\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The version of the Cloudwatch API to use."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"version\" <$> TF.attribute",
                    "name": "_version",
                    "method": "version",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasVersion",
                    "validate": false,
                    "optional": true,
                    "original": "version"
                }
            ],
            "name": "CheckCloudwatch",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_apiKey",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The AWS API Key"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"api_key\" <$> TF.attribute",
                    "name": "_apiKey",
                    "method": "apiKey",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasApiKey",
                    "validate": false,
                    "optional": false,
                    "original": "api_key"
                },
                {
                    "default": "_apiSecret",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The AWS API Secret"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"api_secret\" <$> TF.attribute",
                    "name": "_apiSecret",
                    "method": "apiSecret",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasApiSecret",
                    "validate": false,
                    "optional": false,
                    "original": "api_secret"
                },
                {
                    "default": "_dimmensions",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The dimensions to query for the metric"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"dimmensions\" <$> TF.attribute",
                    "name": "_dimmensions",
                    "method": "dimmensions",
                    "conflicts": [],
                    "type": "TF.Attr s (P.HashMap P.Text (TF.Attr s P.Text))",
                    "class": "HasDimmensions",
                    "validate": false,
                    "optional": false,
                    "original": "dimmensions"
                },
                {
                    "default": "_metric",
                    "computed": false,
                    "required": true,
                    "help": [
                        "One or more CloudWatch Metric attributes"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"metric\" <$> TF.attribute",
                    "name": "_metric",
                    "method": "metric",
                    "conflicts": [],
                    "type": "TF.Attr s (P.NonEmpty (TF.Attr s P.Text))",
                    "class": "HasMetric",
                    "validate": false,
                    "optional": false,
                    "original": "metric"
                },
                {
                    "default": "_namespace",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The namespace to pull telemetry from"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"namespace\" <$> TF.attribute",
                    "name": "_namespace",
                    "method": "namespace",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasNamespace",
                    "validate": false,
                    "optional": false,
                    "original": "namespace"
                },
                {
                    "default": "_url",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The URL including schema and hostname for the Cloudwatch monitoring server.",
                        "This value will be used to specify the region - for example, to pull from",
                        "us-east-1, the URL would be https://monitoring.us-east-1.amazonaws.com."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"url\" <$> TF.attribute",
                    "name": "_url",
                    "method": "url",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUrl",
                    "validate": false,
                    "optional": false,
                    "original": "url"
                }
            ],
            "conflicts": [],
            "type": "CheckCloudwatch s",
            "original": "check_cloudwatch"
        },
        {
            "con": {
                "smart": "newCheckIcmpPing",
                "name": "CheckIcmpPing'"
            },
            "arguments": [
                {
                    "default": "TF.value 100.0",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The percentage of ICMP available required for the check to be considered",
                        "\"good.\""
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"availability\" <$> TF.attribute",
                    "name": "_availability",
                    "method": "availability",
                    "conflicts": [],
                    "type": "TF.Attr s P.Double",
                    "class": "HasAvailability",
                    "validate": false,
                    "optional": true,
                    "original": "availability"
                },
                {
                    "default": "TF.value 5",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The number of ICMP requests to send during a single check."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"count\" <$> TF.attribute",
                    "name": "_count",
                    "method": "count",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasCount",
                    "validate": false,
                    "optional": true,
                    "original": "count"
                },
                {
                    "default": "TF.value \"2s\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The number of milliseconds between ICMP requests."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"interval\" <$> TF.attribute",
                    "name": "_interval",
                    "method": "interval",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasInterval",
                    "validate": false,
                    "optional": true,
                    "original": "interval"
                }
            ],
            "name": "CheckIcmpPing",
            "threaded": true,
            "attributes": [],
            "parameters": [],
            "conflicts": [],
            "type": "CheckIcmpPing s",
            "original": "check_icmp_ping"
        },
        {
            "con": {
                "smart": "newCheckHttp",
                "name": "CheckHttp'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The HTTP Authentication method"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"auth_method\" <$> TF.attribute",
                    "name": "_authMethod",
                    "method": "authMethod",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAuthMethod",
                    "validate": false,
                    "optional": true,
                    "original": "auth_method"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The HTTP Authentication user password"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"auth_password\" <$> TF.attribute",
                    "name": "_authPassword",
                    "method": "authPassword",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAuthPassword",
                    "validate": false,
                    "optional": true,
                    "original": "auth_password"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The HTTP Authentication user name"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"auth_user\" <$> TF.attribute",
                    "name": "_authUser",
                    "method": "authUser",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAuthUser",
                    "validate": false,
                    "optional": true,
                    "original": "auth_user"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "This regular expression is matched against the body of the response. If a",
                        "match is not found, the check will be marked as \"bad."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"body_regexp\" <$> TF.attribute",
                    "name": "_bodyRegexp",
                    "method": "bodyRegexp",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasBodyRegexp",
                    "validate": false,
                    "optional": true,
                    "original": "body_regexp"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A path to a file containing all the certificate authorities that should be",
                        "loaded to validate the remote certificate (for TLS checks)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"ca_chain\" <$> TF.attribute",
                    "name": "_caChain",
                    "method": "caChain",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCaChain",
                    "validate": false,
                    "optional": true,
                    "original": "ca_chain"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A path to a file containing the client certificate that will be presented to",
                        "the remote server (for TLS-enabled checks)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"certificate_file\" <$> TF.attribute",
                    "name": "_certificateFile",
                    "method": "certificateFile",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCertificateFile",
                    "validate": false,
                    "optional": true,
                    "original": "certificate_file"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A list of ciphers to be used in the TLS protocol (for HTTPS checks)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"ciphers\" <$> TF.attribute",
                    "name": "_ciphers",
                    "method": "ciphers",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCiphers",
                    "validate": false,
                    "optional": true,
                    "original": "ciphers"
                },
                {
                    "default": "TF.value \"^200$\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The HTTP code that is expected. If the code received does not match this",
                        "regular expression, the check is marked as \"bad.\""
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"code\" <$> TF.attribute",
                    "name": "_code",
                    "method": "code",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCode",
                    "validate": false,
                    "optional": true,
                    "original": "code"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "This regular expression is matched against the body of the response",
                        "globally. The first capturing match is the key and the second capturing",
                        "match is the value. Each key/value extracted is registered as a metric for",
                        "the check."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"extract\" <$> TF.attribute",
                    "name": "_extract",
                    "method": "extract",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasExtract",
                    "validate": false,
                    "optional": true,
                    "original": "extract"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Map of HTTP Headers to send along with HTTP Requests"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"headers\" <$> TF.attribute",
                    "name": "_headers",
                    "method": "headers",
                    "conflicts": [],
                    "type": "TF.Attr s (P.HashMap P.Text (TF.Attr s P.Text))",
                    "class": "HasHeaders",
                    "validate": false,
                    "optional": true,
                    "original": "headers"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A path to a file containing key to be used in conjunction with the cilent",
                        "certificate (for TLS checks)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"key_file\" <$> TF.attribute",
                    "name": "_keyFile",
                    "method": "keyFile",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasKeyFile",
                    "validate": false,
                    "optional": true,
                    "original": "key_file"
                },
                {
                    "default": "TF.value \"GET\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The HTTP method to use"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"method\" <$> TF.attribute",
                    "name": "_method",
                    "method": "method",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMethod",
                    "validate": false,
                    "optional": true,
                    "original": "method"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The information transferred as the payload of an HTTP request"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"payload\" <$> TF.attribute",
                    "name": "_payload",
                    "method": "payload",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPayload",
                    "validate": false,
                    "optional": true,
                    "original": "payload"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Sets an approximate limit on the data read (0 means no limit)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"read_limit\" <$> TF.attribute",
                    "name": "_readLimit",
                    "method": "readLimit",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasReadLimit",
                    "validate": false,
                    "optional": true,
                    "original": "read_limit"
                },
                {
                    "default": "_url",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The URL to use as the target of the check"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"url\" <$> TF.attribute",
                    "name": "_url",
                    "method": "url",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUrl",
                    "validate": false,
                    "optional": false,
                    "original": "url"
                },
                {
                    "default": "TF.value \"1.1\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Sets the HTTP version for the check to use"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"version\" <$> TF.attribute",
                    "name": "_version",
                    "method": "version",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasVersion",
                    "validate": false,
                    "optional": true,
                    "original": "version"
                }
            ],
            "name": "CheckHttp",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_url",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The URL to use as the target of the check"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"url\" <$> TF.attribute",
                    "name": "_url",
                    "method": "url",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUrl",
                    "validate": false,
                    "optional": false,
                    "original": "url"
                }
            ],
            "conflicts": [],
            "type": "CheckHttp s",
            "original": "check_http"
        }
    ],
    "url": "https://www.terraform.io/docs/providers/circonus/index.html",
    "dataSources": [
        {
            "con": {
                "smart": "accountData",
                "name": "AccountData'"
            },
            "arguments": [],
            "url": "https://www.terraform.io/docs/providers/circonus/d/account.html",
            "name": "AccountData",
            "threaded": true,
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"address1\" <$> TF.attribute",
                    "name": "_computedAddress1",
                    "method": "computedAddress1",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedAddress1",
                    "validate": false,
                    "optional": false,
                    "original": "address1"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"address2\" <$> TF.attribute",
                    "name": "_computedAddress2",
                    "method": "computedAddress2",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedAddress2",
                    "validate": false,
                    "optional": false,
                    "original": "address2"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"cc_email\" <$> TF.attribute",
                    "name": "_computedCcEmail",
                    "method": "computedCcEmail",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedCcEmail",
                    "validate": false,
                    "optional": false,
                    "original": "cc_email"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"city\" <$> TF.attribute",
                    "name": "_computedCity",
                    "method": "computedCity",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedCity",
                    "validate": false,
                    "optional": false,
                    "original": "city"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Contact Groups in this account"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"contact_groups\" <$> TF.attribute",
                    "name": "_computedContactGroups",
                    "method": "computedContactGroups",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasComputedContactGroups",
                    "validate": false,
                    "optional": false,
                    "original": "contact_groups"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"country\" <$> TF.attribute",
                    "name": "_computedCountry",
                    "method": "computedCountry",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedCountry",
                    "validate": false,
                    "optional": false,
                    "original": "country"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"current\" <$> TF.attribute",
                    "name": "_computedCurrent",
                    "method": "computedCurrent",
                    "conflicts": [
                        "_id"
                    ],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasComputedCurrent",
                    "validate": false,
                    "optional": true,
                    "original": "current"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"description\" <$> TF.attribute",
                    "name": "_computedDescription",
                    "method": "computedDescription",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedDescription",
                    "validate": false,
                    "optional": false,
                    "original": "description"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"id\" <$> TF.attribute",
                    "name": "_computedId",
                    "method": "computedId",
                    "conflicts": [
                        "_current"
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedId",
                    "validate": false,
                    "optional": true,
                    "original": "id"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Outstanding invites attached to the account"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"invites\" <$> TF.attribute",
                    "name": "_computedInvites",
                    "method": "computedInvites",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (AccountInvites s)]",
                    "class": "HasComputedInvites",
                    "validate": true,
                    "optional": false,
                    "original": "invites"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_computedName",
                    "method": "computedName",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"owner\" <$> TF.attribute",
                    "name": "_computedOwner",
                    "method": "computedOwner",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedOwner",
                    "validate": false,
                    "optional": false,
                    "original": "owner"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"state\" <$> TF.attribute",
                    "name": "_computedState",
                    "method": "computedState",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedState",
                    "validate": false,
                    "optional": false,
                    "original": "state"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"timezone\" <$> TF.attribute",
                    "name": "_computedTimezone",
                    "method": "computedTimezone",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedTimezone",
                    "validate": false,
                    "optional": false,
                    "original": "timezone"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"ui_base_url\" <$> TF.attribute",
                    "name": "_computedUiBaseUrl",
                    "method": "computedUiBaseUrl",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedUiBaseUrl",
                    "validate": false,
                    "optional": false,
                    "original": "ui_base_url"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Account's usage limits"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"usage\" <$> TF.attribute",
                    "name": "_computedUsage",
                    "method": "computedUsage",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (AccountUsage s)]",
                    "class": "HasComputedUsage",
                    "validate": true,
                    "optional": false,
                    "original": "usage"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Users attached to this account"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"users\" <$> TF.attribute",
                    "name": "_computedUsers",
                    "method": "computedUsers",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (AccountUsers s)]",
                    "class": "HasComputedUsers",
                    "validate": true,
                    "optional": false,
                    "original": "users"
                }
            ],
            "parameters": [],
            "conflicts": [],
            "type": "AccountData s",
            "original": "circonus_account"
        },
        {
            "con": {
                "smart": "collectorData",
                "name": "CollectorData'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"tags\" <$> TF.attribute",
                    "name": "_tags",
                    "method": "tags",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasTags",
                    "validate": false,
                    "optional": true,
                    "original": "tags"
                }
            ],
            "url": "https://www.terraform.io/docs/providers/circonus/d/collector.html",
            "name": "CollectorData",
            "threaded": true,
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Details associated with individual collectors (a.k.a. broker)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"details\" <$> TF.attribute",
                    "name": "_computedDetails",
                    "method": "computedDetails",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (CollectorDetails s)]",
                    "class": "HasComputedDetails",
                    "validate": true,
                    "optional": false,
                    "original": "details"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"id\" <$> TF.attribute",
                    "name": "_computedId",
                    "method": "computedId",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedId",
                    "validate": false,
                    "optional": true,
                    "original": "id"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"latitude\" <$> TF.attribute",
                    "name": "_computedLatitude",
                    "method": "computedLatitude",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedLatitude",
                    "validate": false,
                    "optional": false,
                    "original": "latitude"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"longitude\" <$> TF.attribute",
                    "name": "_computedLongitude",
                    "method": "computedLongitude",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedLongitude",
                    "validate": false,
                    "optional": false,
                    "original": "longitude"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_computedName",
                    "method": "computedName",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "_computedType",
                    "method": "computedType",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedType",
                    "validate": false,
                    "optional": false,
                    "original": "type"
                }
            ],
            "parameters": [],
            "conflicts": [],
            "type": "CollectorData s",
            "original": "circonus_collector"
        }
    ],
    "resources": [
        {
            "con": {
                "smart": "checkResource",
                "name": "CheckResource'"
            },
            "arguments": [
                {
                    "default": "TF.value P.True",
                    "computed": false,
                    "required": false,
                    "help": [
                        "If the check is activate or disabled"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"active\" <$> TF.attribute",
                    "name": "_active",
                    "method": "active",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasActive",
                    "validate": false,
                    "optional": true,
                    "original": "active"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "CAQL check configuration"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"caql\" <$> TF.attribute",
                    "name": "_caql",
                    "method": "caql",
                    "conflicts": [],
                    "type": "TF.Attr s (CheckCaql s)",
                    "class": "HasCaql",
                    "validate": true,
                    "optional": true,
                    "original": "caql"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "CloudWatch check configuration"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"cloudwatch\" <$> TF.attribute",
                    "name": "_cloudwatch",
                    "method": "cloudwatch",
                    "conflicts": [],
                    "type": "TF.Attr s (CheckCloudwatch s)",
                    "class": "HasCloudwatch",
                    "validate": true,
                    "optional": true,
                    "original": "cloudwatch"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The collector(s) that are responsible for gathering the metrics"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"collector\" <$> TF.attribute",
                    "name": "_collector",
                    "method": "collector",
                    "conflicts": [],
                    "type": "TF.Attr s (P.NonEmpty (TF.Attr s (CheckCollector s)))",
                    "class": "HasCollector",
                    "validate": true,
                    "optional": true,
                    "original": "collector"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Consul check configuration"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"consul\" <$> TF.attribute",
                    "name": "_consul",
                    "method": "consul",
                    "conflicts": [],
                    "type": "TF.Attr s (CheckConsul s)",
                    "class": "HasConsul",
                    "validate": true,
                    "optional": true,
                    "original": "consul"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "HTTP check configuration"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"http\" <$> TF.attribute",
                    "name": "_http",
                    "method": "http",
                    "conflicts": [],
                    "type": "TF.Attr s (CheckHttp s)",
                    "class": "HasHttp",
                    "validate": true,
                    "optional": true,
                    "original": "http"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "HTTP Trap check configuration"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"httptrap\" <$> TF.attribute",
                    "name": "_httptrap",
                    "method": "httptrap",
                    "conflicts": [],
                    "type": "TF.Attr s (CheckHttptrap s)",
                    "class": "HasHttptrap",
                    "validate": true,
                    "optional": true,
                    "original": "httptrap"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "ICMP ping check configuration"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"icmp_ping\" <$> TF.attribute",
                    "name": "_icmpPing",
                    "method": "icmpPing",
                    "conflicts": [],
                    "type": "TF.Attr s (CheckIcmpPing s)",
                    "class": "HasIcmpPing",
                    "validate": true,
                    "optional": true,
                    "original": "icmp_ping"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "JSON check configuration"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"json\" <$> TF.attribute",
                    "name": "_json",
                    "method": "json",
                    "conflicts": [],
                    "type": "TF.Attr s (CheckJson s)",
                    "class": "HasJson",
                    "validate": true,
                    "optional": true,
                    "original": "json"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Configuration for a stream of metrics"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"metric\" <$> TF.attribute",
                    "name": "_metric",
                    "method": "metric",
                    "conflicts": [],
                    "type": "TF.Attr s (P.NonEmpty (TF.Attr s (CheckMetric s)))",
                    "class": "HasMetric",
                    "validate": true,
                    "optional": true,
                    "original": "metric"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "MySQL check configuration"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"mysql\" <$> TF.attribute",
                    "name": "_mysql",
                    "method": "mysql",
                    "conflicts": [],
                    "type": "TF.Attr s (CheckMysql s)",
                    "class": "HasMysql",
                    "validate": true,
                    "optional": true,
                    "original": "mysql"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "PostgreSQL check configuration"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"postgresql\" <$> TF.attribute",
                    "name": "_postgresql",
                    "method": "postgresql",
                    "conflicts": [],
                    "type": "TF.Attr s (CheckPostgresql s)",
                    "class": "HasPostgresql",
                    "validate": true,
                    "optional": true,
                    "original": "postgresql"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Statsd check configuration"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"statsd\" <$> TF.attribute",
                    "name": "_statsd",
                    "method": "statsd",
                    "conflicts": [],
                    "type": "TF.Attr s (CheckStatsd s)",
                    "class": "HasStatsd",
                    "validate": true,
                    "optional": true,
                    "original": "statsd"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A list of tags assigned to the check"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"tags\" <$> TF.attribute",
                    "name": "_tags",
                    "method": "tags",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasTags",
                    "validate": false,
                    "optional": true,
                    "original": "tags"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "TCP check configuration"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"tcp\" <$> TF.attribute",
                    "name": "_tcp",
                    "method": "tcp",
                    "conflicts": [],
                    "type": "TF.Attr s (CheckTcp s)",
                    "class": "HasTcp",
                    "validate": true,
                    "optional": true,
                    "original": "tcp"
                }
            ],
            "url": "https://www.terraform.io/docs/providers/circonus/r/check.html",
            "name": "CheckResource",
            "threaded": true,
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"check_by_collector\" <$> TF.attribute",
                    "name": "_computedCheckByCollector",
                    "method": "computedCheckByCollector",
                    "conflicts": [],
                    "type": "TF.Attr s (P.HashMap P.Text (TF.Attr s P.Text))",
                    "class": "HasComputedCheckByCollector",
                    "validate": false,
                    "optional": false,
                    "original": "check_by_collector"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"check_id\" <$> TF.attribute",
                    "name": "_computedCheckId",
                    "method": "computedCheckId",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedCheckId",
                    "validate": false,
                    "optional": false,
                    "original": "check_id"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"checks\" <$> TF.attribute",
                    "name": "_computedChecks",
                    "method": "computedChecks",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasComputedChecks",
                    "validate": false,
                    "optional": false,
                    "original": "checks"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"created\" <$> TF.attribute",
                    "name": "_computedCreated",
                    "method": "computedCreated",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasComputedCreated",
                    "validate": false,
                    "optional": false,
                    "original": "created"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"last_modified\" <$> TF.attribute",
                    "name": "_computedLastModified",
                    "method": "computedLastModified",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasComputedLastModified",
                    "validate": false,
                    "optional": false,
                    "original": "last_modified"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"last_modified_by\" <$> TF.attribute",
                    "name": "_computedLastModifiedBy",
                    "method": "computedLastModifiedBy",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedLastModifiedBy",
                    "validate": false,
                    "optional": false,
                    "original": "last_modified_by"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Setting a metric_limit will enable all (-1), disable (0), or allow up to the",
                        "specified limit of metrics for this check (\"N+\", where N is a positive",
                        "integer)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"metric_limit\" <$> TF.attribute",
                    "name": "_computedMetricLimit",
                    "method": "computedMetricLimit",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasComputedMetricLimit",
                    "validate": false,
                    "optional": true,
                    "original": "metric_limit"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "The name of the check bundle that will be displayed in the web interface"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_computedName",
                    "method": "computedName",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedName",
                    "validate": false,
                    "optional": true,
                    "original": "name"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Notes about this check bundle"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"notes\" <$> TF.attribute",
                    "name": "_computedNotes",
                    "method": "computedNotes",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedNotes",
                    "validate": false,
                    "optional": true,
                    "original": "notes"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "The period between each time the check is made"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"period\" <$> TF.attribute",
                    "name": "_computedPeriod",
                    "method": "computedPeriod",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedPeriod",
                    "validate": false,
                    "optional": true,
                    "original": "period"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"reverse_connect_urls\" <$> TF.attribute",
                    "name": "_computedReverseConnectUrls",
                    "method": "computedReverseConnectUrls",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasComputedReverseConnectUrls",
                    "validate": false,
                    "optional": false,
                    "original": "reverse_connect_urls"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "The target of the check (e.g. hostname, URL, IP, etc)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"target\" <$> TF.attribute",
                    "name": "_computedTarget",
                    "method": "computedTarget",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedTarget",
                    "validate": false,
                    "optional": true,
                    "original": "target"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "The length of time in seconds (and fractions of a second) before the check",
                        "will timeout if no response is returned to the collector"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"timeout\" <$> TF.attribute",
                    "name": "_computedTimeout",
                    "method": "computedTimeout",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedTimeout",
                    "validate": false,
                    "optional": true,
                    "original": "timeout"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "The check type"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "_computedType",
                    "method": "computedType",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedType",
                    "validate": false,
                    "optional": true,
                    "original": "type"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"uuids\" <$> TF.attribute",
                    "name": "_computedUuids",
                    "method": "computedUuids",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasComputedUuids",
                    "validate": false,
                    "optional": false,
                    "original": "uuids"
                }
            ],
            "parameters": [],
            "conflicts": [],
            "type": "CheckResource s",
            "original": "circonus_check"
        },
        {
            "con": {
                "smart": "contactGroupResource",
                "name": "ContactGroupResource'"
            },
            "arguments": [
                {
                    "default": "TF.value \"300s\"",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"aggregation_window\" <$> TF.attribute",
                    "name": "_aggregationWindow",
                    "method": "aggregationWindow",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAggregationWindow",
                    "validate": false,
                    "optional": true,
                    "original": "aggregation_window"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"alert_option\" <$> TF.attribute",
                    "name": "_alertOption",
                    "method": "alertOption",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (ContactGroupAlertOption s)]",
                    "class": "HasAlertOption",
                    "validate": true,
                    "optional": true,
                    "original": "alert_option"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"email\" <$> TF.attribute",
                    "name": "_email",
                    "method": "email",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (ContactGroupEmail s)]",
                    "class": "HasEmail",
                    "validate": true,
                    "optional": true,
                    "original": "email"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"http\" <$> TF.attribute",
                    "name": "_http",
                    "method": "http",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (ContactGroupHttp s)]",
                    "class": "HasHttp",
                    "validate": true,
                    "optional": true,
                    "original": "http"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"irc\" <$> TF.attribute",
                    "name": "_irc",
                    "method": "irc",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (ContactGroupIrc s)]",
                    "class": "HasIrc",
                    "validate": true,
                    "optional": true,
                    "original": "irc"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"long_message\" <$> TF.attribute",
                    "name": "_longMessage",
                    "method": "longMessage",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasLongMessage",
                    "validate": false,
                    "optional": true,
                    "original": "long_message"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"long_subject\" <$> TF.attribute",
                    "name": "_longSubject",
                    "method": "longSubject",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasLongSubject",
                    "validate": false,
                    "optional": true,
                    "original": "long_subject"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"long_summary\" <$> TF.attribute",
                    "name": "_longSummary",
                    "method": "longSummary",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasLongSummary",
                    "validate": false,
                    "optional": true,
                    "original": "long_summary"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"pager_duty\" <$> TF.attribute",
                    "name": "_pagerDuty",
                    "method": "pagerDuty",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (ContactGroupPagerDuty s)]",
                    "class": "HasPagerDuty",
                    "validate": true,
                    "optional": true,
                    "original": "pager_duty"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"short_message\" <$> TF.attribute",
                    "name": "_shortMessage",
                    "method": "shortMessage",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasShortMessage",
                    "validate": false,
                    "optional": true,
                    "original": "short_message"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"short_summary\" <$> TF.attribute",
                    "name": "_shortSummary",
                    "method": "shortSummary",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasShortSummary",
                    "validate": false,
                    "optional": true,
                    "original": "short_summary"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"slack\" <$> TF.attribute",
                    "name": "_slack",
                    "method": "slack",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (ContactGroupSlack s)]",
                    "class": "HasSlack",
                    "validate": true,
                    "optional": true,
                    "original": "slack"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"sms\" <$> TF.attribute",
                    "name": "_sms",
                    "method": "sms",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (ContactGroupSms s)]",
                    "class": "HasSms",
                    "validate": true,
                    "optional": true,
                    "original": "sms"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"tags\" <$> TF.attribute",
                    "name": "_tags",
                    "method": "tags",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasTags",
                    "validate": false,
                    "optional": true,
                    "original": "tags"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"victorops\" <$> TF.attribute",
                    "name": "_victorops",
                    "method": "victorops",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (ContactGroupVictorops s)]",
                    "class": "HasVictorops",
                    "validate": true,
                    "optional": true,
                    "original": "victorops"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"xmpp\" <$> TF.attribute",
                    "name": "_xmpp",
                    "method": "xmpp",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (ContactGroupXmpp s)]",
                    "class": "HasXmpp",
                    "validate": true,
                    "optional": true,
                    "original": "xmpp"
                }
            ],
            "url": "https://www.terraform.io/docs/providers/circonus/r/contact_group.html",
            "name": "ContactGroupResource",
            "threaded": true,
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"last_modified\" <$> TF.attribute",
                    "name": "_computedLastModified",
                    "method": "computedLastModified",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasComputedLastModified",
                    "validate": false,
                    "optional": false,
                    "original": "last_modified"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"last_modified_by\" <$> TF.attribute",
                    "name": "_computedLastModifiedBy",
                    "method": "computedLastModifiedBy",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedLastModifiedBy",
                    "validate": false,
                    "optional": false,
                    "original": "last_modified_by"
                }
            ],
            "parameters": [
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                }
            ],
            "conflicts": [],
            "type": "ContactGroupResource s",
            "original": "circonus_contact_group"
        },
        {
            "con": {
                "smart": "graphResource",
                "name": "GraphResource'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"description\" <$> TF.attribute",
                    "name": "_description",
                    "method": "description",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDescription",
                    "validate": false,
                    "optional": true,
                    "original": "description"
                },
                {
                    "default": "TF.value \"line\"",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"graph_style\" <$> TF.attribute",
                    "name": "_graphStyle",
                    "method": "graphStyle",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasGraphStyle",
                    "validate": false,
                    "optional": true,
                    "original": "graph_style"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"left\" <$> TF.attribute",
                    "name": "_left",
                    "method": "left",
                    "conflicts": [],
                    "type": "TF.Attr s (P.HashMap P.Text (TF.Attr s P.Text))",
                    "class": "HasLeft",
                    "validate": false,
                    "optional": true,
                    "original": "left"
                },
                {
                    "default": "TF.value \"stepped\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "How the line should change between point. A string containing either",
                        "'stepped', 'interpolated' or null."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"line_style\" <$> TF.attribute",
                    "name": "_lineStyle",
                    "method": "lineStyle",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasLineStyle",
                    "validate": false,
                    "optional": true,
                    "original": "line_style"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"metric\" <$> TF.attribute",
                    "name": "_metric",
                    "method": "metric",
                    "conflicts": [],
                    "type": "TF.Attr s (P.NonEmpty (TF.Attr s (GraphMetric s)))",
                    "class": "HasMetric",
                    "validate": true,
                    "optional": true,
                    "original": "metric"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"metric_cluster\" <$> TF.attribute",
                    "name": "_metricCluster",
                    "method": "metricCluster",
                    "conflicts": [],
                    "type": "TF.Attr s (P.NonEmpty (TF.Attr s (GraphMetricCluster s)))",
                    "class": "HasMetricCluster",
                    "validate": true,
                    "optional": true,
                    "original": "metric_cluster"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"notes\" <$> TF.attribute",
                    "name": "_notes",
                    "method": "notes",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasNotes",
                    "validate": false,
                    "optional": true,
                    "original": "notes"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"right\" <$> TF.attribute",
                    "name": "_right",
                    "method": "right",
                    "conflicts": [],
                    "type": "TF.Attr s (P.HashMap P.Text (TF.Attr s P.Text))",
                    "class": "HasRight",
                    "validate": false,
                    "optional": true,
                    "original": "right"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"tags\" <$> TF.attribute",
                    "name": "_tags",
                    "method": "tags",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasTags",
                    "validate": false,
                    "optional": true,
                    "original": "tags"
                }
            ],
            "url": "https://www.terraform.io/docs/providers/circonus/r/graph.html",
            "name": "GraphResource",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                }
            ],
            "conflicts": [],
            "type": "GraphResource s",
            "original": "circonus_graph"
        },
        {
            "con": {
                "smart": "metricResource",
                "name": "MetricResource'"
            },
            "arguments": [
                {
                    "default": "TF.value P.True",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Enables or disables the metric"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"active\" <$> TF.attribute",
                    "name": "_active",
                    "method": "active",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasActive",
                    "validate": false,
                    "optional": true,
                    "original": "active"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the metric"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Tags assigned to the metric"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"tags\" <$> TF.attribute",
                    "name": "_tags",
                    "method": "tags",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasTags",
                    "validate": false,
                    "optional": true,
                    "original": "tags"
                },
                {
                    "default": "_type'",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Type of metric (e.g. numeric, histogram, text)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "_type'",
                    "method": "type'",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasType'",
                    "validate": false,
                    "optional": false,
                    "original": "type"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The unit of measurement for a metric"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"unit\" <$> TF.attribute",
                    "name": "_unit",
                    "method": "unit",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUnit",
                    "validate": false,
                    "optional": true,
                    "original": "unit"
                }
            ],
            "url": "https://www.terraform.io/docs/providers/circonus/r/metric.html",
            "name": "MetricResource",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the metric"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                },
                {
                    "default": "_type'",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Type of metric (e.g. numeric, histogram, text)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "_type'",
                    "method": "type'",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasType'",
                    "validate": false,
                    "optional": false,
                    "original": "type"
                }
            ],
            "conflicts": [],
            "type": "MetricResource s",
            "original": "circonus_metric"
        },
        {
            "con": {
                "smart": "metricClusterResource",
                "name": "MetricClusterResource'"
            },
            "arguments": [
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The name of the metric cluster"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A metric cluster query definition"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"query\" <$> TF.attribute",
                    "name": "_query",
                    "method": "query",
                    "conflicts": [],
                    "type": "TF.Attr s (P.NonEmpty (TF.Attr s (MetricClusterQuery s)))",
                    "class": "HasQuery",
                    "validate": true,
                    "optional": true,
                    "original": "query"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A list of tags assigned to the metric cluster"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"tags\" <$> TF.attribute",
                    "name": "_tags",
                    "method": "tags",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasTags",
                    "validate": false,
                    "optional": true,
                    "original": "tags"
                }
            ],
            "url": "https://www.terraform.io/docs/providers/circonus/r/metric_cluster.html",
            "name": "MetricClusterResource",
            "threaded": true,
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "A description of the metric cluster"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"description\" <$> TF.attribute",
                    "name": "_computedDescription",
                    "method": "computedDescription",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedDescription",
                    "validate": false,
                    "optional": true,
                    "original": "description"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "The ID of this metric cluster"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"id\" <$> TF.attribute",
                    "name": "_computedId",
                    "method": "computedId",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedId",
                    "validate": false,
                    "optional": false,
                    "original": "id"
                }
            ],
            "parameters": [
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The name of the metric cluster"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                }
            ],
            "conflicts": [],
            "type": "MetricClusterResource s",
            "original": "circonus_metric_cluster"
        },
        {
            "con": {
                "smart": "ruleSetResource",
                "name": "RuleSetResource'"
            },
            "arguments": [
                {
                    "default": "_check",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The CID of the check that contains the metric for this rule set"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"check\" <$> TF.attribute",
                    "name": "_check",
                    "method": "check",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCheck",
                    "validate": false,
                    "optional": false,
                    "original": "check"
                },
                {
                    "default": "_if'",
                    "computed": false,
                    "required": true,
                    "help": [
                        "A rule to execute for this rule set"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"if\" <$> TF.attribute",
                    "name": "_if'",
                    "method": "if'",
                    "conflicts": [],
                    "type": "TF.Attr s (P.NonEmpty (TF.Attr s (RuleSetIf s)))",
                    "class": "HasIf'",
                    "validate": true,
                    "optional": false,
                    "original": "if"
                },
                {
                    "default": "_metricName",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The name of the metric stream within a check to register the rule set with"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"metric_name\" <$> TF.attribute",
                    "name": "_metricName",
                    "method": "metricName",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMetricName",
                    "validate": false,
                    "optional": false,
                    "original": "metric_name"
                },
                {
                    "default": "TF.value \"numeric\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The type of data flowing through the specified metric stream"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"metric_type\" <$> TF.attribute",
                    "name": "_metricType",
                    "method": "metricType",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMetricType",
                    "validate": false,
                    "optional": true,
                    "original": "metric_type"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Tags associated with this rule set"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"tags\" <$> TF.attribute",
                    "name": "_tags",
                    "method": "tags",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasTags",
                    "validate": false,
                    "optional": true,
                    "original": "tags"
                }
            ],
            "url": "https://www.terraform.io/docs/providers/circonus/r/rule_set.html",
            "name": "RuleSetResource",
            "threaded": true,
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "URL to show users when this rule set is active (e.g. wiki)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"link\" <$> TF.attribute",
                    "name": "_computedLink",
                    "method": "computedLink",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedLink",
                    "validate": false,
                    "optional": true,
                    "original": "link"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Notes describing this rule set"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"notes\" <$> TF.attribute",
                    "name": "_computedNotes",
                    "method": "computedNotes",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedNotes",
                    "validate": false,
                    "optional": true,
                    "original": "notes"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Parent CID that must be healthy for this rule set to be active"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"parent\" <$> TF.attribute",
                    "name": "_computedParent",
                    "method": "computedParent",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedParent",
                    "validate": false,
                    "optional": true,
                    "original": "parent"
                }
            ],
            "parameters": [
                {
                    "default": "_check",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The CID of the check that contains the metric for this rule set"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"check\" <$> TF.attribute",
                    "name": "_check",
                    "method": "check",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCheck",
                    "validate": false,
                    "optional": false,
                    "original": "check"
                },
                {
                    "default": "_if'",
                    "computed": false,
                    "required": true,
                    "help": [
                        "A rule to execute for this rule set"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"if\" <$> TF.attribute",
                    "name": "_if'",
                    "method": "if'",
                    "conflicts": [],
                    "type": "TF.Attr s (P.NonEmpty (TF.Attr s (RuleSetIf s)))",
                    "class": "HasIf'",
                    "validate": true,
                    "optional": false,
                    "original": "if"
                },
                {
                    "default": "_metricName",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The name of the metric stream within a check to register the rule set with"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"metric_name\" <$> TF.attribute",
                    "name": "_metricName",
                    "method": "metricName",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMetricName",
                    "validate": false,
                    "optional": false,
                    "original": "metric_name"
                }
            ],
            "conflicts": [],
            "type": "RuleSetResource s",
            "original": "circonus_rule_set"
        }
    ],
    "schema": {
        "con": {
            "smart": "newProvider",
            "name": "Provider'"
        },
        "arguments": [
            {
                "default": "\"https://api.circonus.com/v2\"",
                "computed": false,
                "required": false,
                "help": [
                    "URL of the Circonus API"
                ],
                "forceNew": false,
                "encoder": "P.Just $ TF.assign \"api_url\"",
                "name": "_apiUrl",
                "method": "apiUrl",
                "conflicts": [],
                "type": "P.Text",
                "class": "HasApiUrl",
                "validate": false,
                "optional": true,
                "original": "api_url"
            },
            {
                "default": "P.False",
                "computed": false,
                "required": false,
                "help": [
                    "Signals that the provider should automatically add a tag to all API calls",
                    "denoting that the resource was created by Terraform"
                ],
                "forceNew": false,
                "encoder": "P.Just $ TF.assign \"auto_tag\"",
                "name": "_autoTag",
                "method": "autoTag",
                "conflicts": [],
                "type": "P.Bool",
                "class": "HasAutoTag",
                "validate": false,
                "optional": true,
                "original": "auto_tag"
            },
            {
                "default": "_key",
                "computed": false,
                "required": true,
                "help": [
                    "API token used to authenticate with the Circonus API"
                ],
                "forceNew": false,
                "encoder": "P.Just $ TF.assign \"key\"",
                "name": "_key",
                "method": "key",
                "conflicts": [],
                "type": "P.Text",
                "class": "HasKey",
                "validate": false,
                "optional": false,
                "original": "key"
            }
        ],
        "name": "Provider",
        "threaded": false,
        "attributes": [],
        "parameters": [
            {
                "default": "_key",
                "computed": false,
                "required": true,
                "help": [
                    "API token used to authenticate with the Circonus API"
                ],
                "forceNew": false,
                "encoder": "P.Just $ TF.assign \"key\"",
                "name": "_key",
                "method": "key",
                "conflicts": [],
                "type": "P.Text",
                "class": "HasKey",
                "validate": false,
                "optional": false,
                "original": "key"
            }
        ],
        "conflicts": [],
        "type": "Provider",
        "original": "provider"
    },
    "dependencies": [
        "base",
        "unordered-containers",
        "text",
        "terrafomo",
        "hashable",
        "microlens"
    ],
    "name": "Circonus",
    "package": "terrafomo-circonus",
    "original": "circonus"
}