{
    "settings": [
        {
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"address\" <$> TF.attribute",
                    "name": "address",
                    "method": "address",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "method": "user",
                            "label": "_user"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAddress",
                    "optional": true,
                    "label": "_address"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"user\" <$> TF.attribute",
                    "name": "user",
                    "method": "user",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "method": "address",
                            "label": "_address"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUser",
                    "optional": true,
                    "label": "_user"
                }
            ],
            "name": "Email",
            "attributes": [],
            "parameters": [],
            "hashable": false,
            "type": "Email s",
            "original": "email"
        },
        {
            "arguments": [
                {
                    "default": "TF.value P.False",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Specify whether httptrap metrics are logged immediately or held until the",
                        "status message is emitted"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"async_metrics\" <$> TF.attribute",
                    "name": "async_metrics",
                    "method": "asyncMetrics",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasAsyncMetrics",
                    "optional": true,
                    "label": "_asyncMetrics"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"secret\" <$> TF.attribute",
                    "name": "secret",
                    "method": "secret",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasSecret",
                    "optional": true,
                    "label": "_secret"
                }
            ],
            "name": "Httptrap",
            "attributes": [],
            "parameters": [],
            "hashable": false,
            "type": "Httptrap s",
            "original": "httptrap"
        },
        {
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Description of the action(s) to take when this rule set is active"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"then\" <$> TF.attribute",
                    "name": "then",
                    "method": "then'",
                    "conflicts": [],
                    "type": "TF.Attr s (TF.Attr s (Then s))",
                    "class": "HasThen'",
                    "optional": true,
                    "label": "_then'"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Predicate that the rule set uses to evaluate a stream of metrics"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"value\" <$> TF.attribute",
                    "name": "value",
                    "method": "value",
                    "conflicts": [],
                    "type": "TF.Attr s (TF.Attr s (Value s))",
                    "class": "HasValue",
                    "optional": true,
                    "label": "_value"
                }
            ],
            "name": "If",
            "attributes": [],
            "parameters": [],
            "hashable": false,
            "type": "If s",
            "original": "if"
        },
        {
            "arguments": [],
            "name": "Users",
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"id\" <$> TF.attribute",
                    "name": "id",
                    "method": "computedId",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedId",
                    "optional": false,
                    "label": "_computedId"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"role\" <$> TF.attribute",
                    "name": "role",
                    "method": "computedRole",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedRole",
                    "optional": false,
                    "label": "_computedRole"
                }
            ],
            "parameters": [],
            "hashable": false,
            "type": "Users s",
            "original": "users"
        },
        {
            "arguments": [
                {
                    "default": "_dsn",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The connect DSN for the MySQL instance"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"dsn\" <$> TF.attribute",
                    "name": "dsn",
                    "method": "dsn",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDsn",
                    "optional": false,
                    "label": "_dsn"
                },
                {
                    "default": "_query",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The SQL to use as the query"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"query\" <$> TF.attribute",
                    "name": "query",
                    "method": "query",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasQuery",
                    "optional": false,
                    "label": "_query"
                }
            ],
            "name": "Mysql",
            "attributes": [],
            "parameters": [
                {
                    "default": "_dsn",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The connect DSN for the MySQL instance"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"dsn\" <$> TF.attribute",
                    "name": "dsn",
                    "method": "dsn",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDsn",
                    "optional": false,
                    "label": "_dsn"
                },
                {
                    "default": "_query",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The SQL to use as the query"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"query\" <$> TF.attribute",
                    "name": "query",
                    "method": "query",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasQuery",
                    "optional": false,
                    "label": "_query"
                }
            ],
            "hashable": false,
            "type": "Mysql s",
            "original": "mysql"
        },
        {
            "arguments": [],
            "name": "Invites",
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"email\" <$> TF.attribute",
                    "name": "email",
                    "method": "computedEmail",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedEmail",
                    "optional": false,
                    "label": "_computedEmail"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"role\" <$> TF.attribute",
                    "name": "role",
                    "method": "computedRole",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedRole",
                    "optional": false,
                    "label": "_computedRole"
                }
            ],
            "parameters": [],
            "hashable": false,
            "type": "Invites s",
            "original": "invites"
        },
        {
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"contact_group_fallback\" <$> TF.attribute",
                    "name": "contact_group_fallback",
                    "method": "contactGroupFallback",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasContactGroupFallback",
                    "optional": true,
                    "label": "_contactGroupFallback"
                },
                {
                    "default": "_serviceKey",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"service_key\" <$> TF.attribute",
                    "name": "service_key",
                    "method": "serviceKey",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasServiceKey",
                    "optional": false,
                    "label": "_serviceKey"
                },
                {
                    "default": "_webhookUrl",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"webhook_url\" <$> TF.attribute",
                    "name": "webhook_url",
                    "method": "webhookUrl",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasWebhookUrl",
                    "optional": false,
                    "label": "_webhookUrl"
                }
            ],
            "name": "PagerDuty",
            "attributes": [],
            "parameters": [
                {
                    "default": "_serviceKey",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"service_key\" <$> TF.attribute",
                    "name": "service_key",
                    "method": "serviceKey",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasServiceKey",
                    "optional": false,
                    "label": "_serviceKey"
                },
                {
                    "default": "_webhookUrl",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"webhook_url\" <$> TF.attribute",
                    "name": "webhook_url",
                    "method": "webhookUrl",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasWebhookUrl",
                    "optional": false,
                    "label": "_webhookUrl"
                }
            ],
            "hashable": false,
            "type": "PagerDuty s",
            "original": "pager_duty"
        },
        {
            "arguments": [
                {
                    "default": "_sourceIp",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The source IP of the statsd metrics stream"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"source_ip\" <$> TF.attribute",
                    "name": "source_ip",
                    "method": "sourceIp",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasSourceIp",
                    "optional": false,
                    "label": "_sourceIp"
                }
            ],
            "name": "Statsd",
            "attributes": [],
            "parameters": [
                {
                    "default": "_sourceIp",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The source IP of the statsd metrics stream"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"source_ip\" <$> TF.attribute",
                    "name": "source_ip",
                    "method": "sourceIp",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasSourceIp",
                    "optional": false,
                    "label": "_sourceIp"
                }
            ],
            "hashable": false,
            "type": "Statsd s",
            "original": "statsd"
        },
        {
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The HTTP Authentication method"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"auth_method\" <$> TF.attribute",
                    "name": "auth_method",
                    "method": "authMethod",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAuthMethod",
                    "optional": true,
                    "label": "_authMethod"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The HTTP Authentication user password"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"auth_password\" <$> TF.attribute",
                    "name": "auth_password",
                    "method": "authPassword",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAuthPassword",
                    "optional": true,
                    "label": "_authPassword"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The HTTP Authentication user name"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"auth_user\" <$> TF.attribute",
                    "name": "auth_user",
                    "method": "authUser",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAuthUser",
                    "optional": true,
                    "label": "_authUser"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A path to a file containing all the certificate authorities that should be",
                        "loaded to validate the remote certificate (for TLS checks)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"ca_chain\" <$> TF.attribute",
                    "name": "ca_chain",
                    "method": "caChain",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCaChain",
                    "optional": true,
                    "label": "_caChain"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A path to a file containing the client certificate that will be presented to",
                        "the remote server (for TLS-enabled checks)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"certificate_file\" <$> TF.attribute",
                    "name": "certificate_file",
                    "method": "certificateFile",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCertificateFile",
                    "optional": true,
                    "label": "_certificateFile"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A list of ciphers to be used in the TLS protocol (for HTTPS checks)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"ciphers\" <$> TF.attribute",
                    "name": "ciphers",
                    "method": "ciphers",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCiphers",
                    "optional": true,
                    "label": "_ciphers"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Map of HTTP Headers to send along with HTTP Requests"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"headers\" <$> TF.attribute",
                    "name": "headers",
                    "method": "headers",
                    "conflicts": [],
                    "type": "TF.Attr s (P.HashMap P.Text (TF.Attr s P.Text))",
                    "class": "HasHeaders",
                    "optional": true,
                    "label": "_headers"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A path to a file containing key to be used in conjunction with the cilent",
                        "certificate (for TLS checks)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"key_file\" <$> TF.attribute",
                    "name": "key_file",
                    "method": "keyFile",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasKeyFile",
                    "optional": true,
                    "label": "_keyFile"
                },
                {
                    "default": "TF.value \"GET\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The HTTP method to use"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"method\" <$> TF.attribute",
                    "name": "method",
                    "method": "method",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMethod",
                    "optional": true,
                    "label": "_method"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The information transferred as the payload of an HTTP request"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"payload\" <$> TF.attribute",
                    "name": "payload",
                    "method": "payload",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPayload",
                    "optional": true,
                    "label": "_payload"
                },
                {
                    "default": "TF.value 443",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Specifies the port on which the management interface can be reached"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"port\" <$> TF.attribute",
                    "name": "port",
                    "method": "port",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasPort",
                    "optional": true,
                    "label": "_port"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Sets an approximate limit on the data read (0 means no limit)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"read_limit\" <$> TF.attribute",
                    "name": "read_limit",
                    "method": "readLimit",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasReadLimit",
                    "optional": true,
                    "label": "_readLimit"
                },
                {
                    "default": "_url",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The URL to use as the target of the check"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"url\" <$> TF.attribute",
                    "name": "url",
                    "method": "url",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUrl",
                    "optional": false,
                    "label": "_url"
                },
                {
                    "default": "TF.value \"1.1\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Sets the HTTP version for the check to use"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"version\" <$> TF.attribute",
                    "name": "version",
                    "method": "version",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasVersion",
                    "optional": true,
                    "label": "_version"
                }
            ],
            "name": "Json",
            "attributes": [],
            "parameters": [
                {
                    "default": "_url",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The URL to use as the target of the check"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"url\" <$> TF.attribute",
                    "name": "url",
                    "method": "url",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUrl",
                    "optional": false,
                    "label": "_url"
                }
            ],
            "hashable": false,
            "type": "Json s",
            "original": "json"
        },
        {
            "arguments": [
                {
                    "default": "TF.value 100.0",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The percentage of ICMP available required for the check to be considered",
                        "\"good.\""
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"availability\" <$> TF.attribute",
                    "name": "availability",
                    "method": "availability",
                    "conflicts": [],
                    "type": "TF.Attr s P.Double",
                    "class": "HasAvailability",
                    "optional": true,
                    "label": "_availability"
                },
                {
                    "default": "TF.value 5",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The number of ICMP requests to send during a single check."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"count\" <$> TF.attribute",
                    "name": "count",
                    "method": "count",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasCount",
                    "optional": true,
                    "label": "_count"
                },
                {
                    "default": "TF.value \"2s\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The number of milliseconds between ICMP requests."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"interval\" <$> TF.attribute",
                    "name": "interval",
                    "method": "interval",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasInterval",
                    "optional": true,
                    "label": "_interval"
                }
            ],
            "name": "IcmpPing",
            "attributes": [],
            "parameters": [],
            "hashable": false,
            "type": "IcmpPing s",
            "original": "icmp_ping"
        },
        {
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Fire the rule set if there has been no data for the given metric stream over",
                        "the last duration"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"absent\" <$> TF.attribute",
                    "name": "absent",
                    "method": "absent",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "method": "contains",
                            "label": "_contains"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "over",
                            "label": "_over"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "minValue",
                            "label": "_minValue"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "maxValue",
                            "label": "_maxValue"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "changed",
                            "label": "_changed"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "notMatch",
                            "label": "_notMatch"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "notContain",
                            "label": "_notContain"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "match",
                            "label": "_match"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAbsent",
                    "optional": true,
                    "label": "_absent"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Boolean indicating the value has changed"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"changed\" <$> TF.attribute",
                    "name": "changed",
                    "method": "changed",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "method": "contains",
                            "label": "_contains"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "over",
                            "label": "_over"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "minValue",
                            "label": "_minValue"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "absent",
                            "label": "_absent"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "maxValue",
                            "label": "_maxValue"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "notMatch",
                            "label": "_notMatch"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "notContain",
                            "label": "_notContain"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "match",
                            "label": "_match"
                        }
                    ],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasChanged",
                    "optional": true,
                    "label": "_changed"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Fire the rule set if the text metric contain the following string"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"contains\" <$> TF.attribute",
                    "name": "contains",
                    "method": "contains",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "method": "over",
                            "label": "_over"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "minValue",
                            "label": "_minValue"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "absent",
                            "label": "_absent"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "maxValue",
                            "label": "_maxValue"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "changed",
                            "label": "_changed"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "notMatch",
                            "label": "_notMatch"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "notContain",
                            "label": "_notContain"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "match",
                            "label": "_match"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasContains",
                    "optional": true,
                    "label": "_contains"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Fire the rule set if the text metric exactly match the following string"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"match\" <$> TF.attribute",
                    "name": "match",
                    "method": "match",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "method": "contains",
                            "label": "_contains"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "over",
                            "label": "_over"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "minValue",
                            "label": "_minValue"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "absent",
                            "label": "_absent"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "maxValue",
                            "label": "_maxValue"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "changed",
                            "label": "_changed"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "notMatch",
                            "label": "_notMatch"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "notContain",
                            "label": "_notContain"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMatch",
                    "optional": true,
                    "label": "_match"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Fire the rule set if the numeric value is more than the specified value"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"max_value\" <$> TF.attribute",
                    "name": "max_value",
                    "method": "maxValue",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "method": "contains",
                            "label": "_contains"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "minValue",
                            "label": "_minValue"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "absent",
                            "label": "_absent"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "changed",
                            "label": "_changed"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "notMatch",
                            "label": "_notMatch"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "notContain",
                            "label": "_notContain"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "match",
                            "label": "_match"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMaxValue",
                    "optional": true,
                    "label": "_maxValue"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Fire the rule set if the numeric value less than the specified value"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"min_value\" <$> TF.attribute",
                    "name": "min_value",
                    "method": "minValue",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "method": "contains",
                            "label": "_contains"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "absent",
                            "label": "_absent"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "maxValue",
                            "label": "_maxValue"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "changed",
                            "label": "_changed"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "notMatch",
                            "label": "_notMatch"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "notContain",
                            "label": "_notContain"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "match",
                            "label": "_match"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMinValue",
                    "optional": true,
                    "label": "_minValue"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Fire the rule set if the text metric does not contain the following string"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"not_contain\" <$> TF.attribute",
                    "name": "not_contain",
                    "method": "notContain",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "method": "contains",
                            "label": "_contains"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "over",
                            "label": "_over"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "minValue",
                            "label": "_minValue"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "absent",
                            "label": "_absent"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "maxValue",
                            "label": "_maxValue"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "changed",
                            "label": "_changed"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "notMatch",
                            "label": "_notMatch"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "match",
                            "label": "_match"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasNotContain",
                    "optional": true,
                    "label": "_notContain"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Fire the rule set if the text metric not match the following string"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"not_match\" <$> TF.attribute",
                    "name": "not_match",
                    "method": "notMatch",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "method": "contains",
                            "label": "_contains"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "over",
                            "label": "_over"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "minValue",
                            "label": "_minValue"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "absent",
                            "label": "_absent"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "maxValue",
                            "label": "_maxValue"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "changed",
                            "label": "_changed"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "notContain",
                            "label": "_notContain"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "match",
                            "label": "_match"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasNotMatch",
                    "optional": true,
                    "label": "_notMatch"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Use a derived value using a window"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"over\" <$> TF.attribute",
                    "name": "over",
                    "method": "over",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "method": "contains",
                            "label": "_contains"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "absent",
                            "label": "_absent"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "changed",
                            "label": "_changed"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "notMatch",
                            "label": "_notMatch"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "notContain",
                            "label": "_notContain"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "match",
                            "label": "_match"
                        }
                    ],
                    "type": "TF.Attr s (TF.Attr s (Over s))",
                    "class": "HasOver",
                    "optional": true,
                    "label": "_over"
                }
            ],
            "name": "Value",
            "attributes": [],
            "parameters": [],
            "hashable": false,
            "type": "Value s",
            "original": "value"
        },
        {
            "arguments": [
                {
                    "default": "_id",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The ID of the collector"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"id\" <$> TF.attribute",
                    "name": "id",
                    "method": "id",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasId",
                    "optional": false,
                    "label": "_id"
                }
            ],
            "name": "Collector",
            "attributes": [],
            "parameters": [
                {
                    "default": "_id",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The ID of the collector"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"id\" <$> TF.attribute",
                    "name": "id",
                    "method": "id",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasId",
                    "optional": false,
                    "label": "_id"
                }
            ],
            "hashable": false,
            "type": "Collector s",
            "original": "collector"
        },
        {
            "arguments": [
                {
                    "default": "TF.value \"300s\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Duration over which data from the last interval is examined"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"last\" <$> TF.attribute",
                    "name": "last",
                    "method": "last",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasLast",
                    "optional": true,
                    "label": "_last"
                },
                {
                    "default": "TF.value \"average\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Define the window funciton to use over the last duration"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"using\" <$> TF.attribute",
                    "name": "using",
                    "method": "using",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUsing",
                    "optional": true,
                    "label": "_using"
                }
            ],
            "name": "Over",
            "attributes": [],
            "parameters": [],
            "hashable": false,
            "type": "Over s",
            "original": "over"
        },
        {
            "arguments": [
                {
                    "default": "TF.value P.True",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"buttons\" <$> TF.attribute",
                    "name": "buttons",
                    "method": "buttons",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasButtons",
                    "optional": true,
                    "label": "_buttons"
                },
                {
                    "default": "_channel",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"channel\" <$> TF.attribute",
                    "name": "channel",
                    "method": "channel",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasChannel",
                    "optional": false,
                    "label": "_channel"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"contact_group_fallback\" <$> TF.attribute",
                    "name": "contact_group_fallback",
                    "method": "contactGroupFallback",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasContactGroupFallback",
                    "optional": true,
                    "label": "_contactGroupFallback"
                },
                {
                    "default": "_team",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"team\" <$> TF.attribute",
                    "name": "team",
                    "method": "team",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasTeam",
                    "optional": false,
                    "label": "_team"
                },
                {
                    "default": "TF.value \"Circonus\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Username Slackbot uses in Slack to deliver a notification"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"username\" <$> TF.attribute",
                    "name": "username",
                    "method": "username",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUsername",
                    "optional": true,
                    "label": "_username"
                }
            ],
            "name": "Slack",
            "attributes": [],
            "parameters": [
                {
                    "default": "_channel",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"channel\" <$> TF.attribute",
                    "name": "channel",
                    "method": "channel",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasChannel",
                    "optional": false,
                    "label": "_channel"
                },
                {
                    "default": "_team",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"team\" <$> TF.attribute",
                    "name": "team",
                    "method": "team",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasTeam",
                    "optional": false,
                    "label": "_team"
                }
            ],
            "hashable": false,
            "type": "Slack s",
            "original": "slack"
        },
        {
            "arguments": [
                {
                    "default": "_apiKey",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"api_key\" <$> TF.attribute",
                    "name": "api_key",
                    "method": "apiKey",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasApiKey",
                    "optional": false,
                    "label": "_apiKey"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"contact_group_fallback\" <$> TF.attribute",
                    "name": "contact_group_fallback",
                    "method": "contactGroupFallback",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasContactGroupFallback",
                    "optional": true,
                    "label": "_contactGroupFallback"
                },
                {
                    "default": "_critical",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"critical\" <$> TF.attribute",
                    "name": "critical",
                    "method": "critical",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasCritical",
                    "optional": false,
                    "label": "_critical"
                },
                {
                    "default": "_info",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"info\" <$> TF.attribute",
                    "name": "info",
                    "method": "info",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasInfo",
                    "optional": false,
                    "label": "_info"
                },
                {
                    "default": "_team",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"team\" <$> TF.attribute",
                    "name": "team",
                    "method": "team",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasTeam",
                    "optional": false,
                    "label": "_team"
                },
                {
                    "default": "_warning",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"warning\" <$> TF.attribute",
                    "name": "warning",
                    "method": "warning",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasWarning",
                    "optional": false,
                    "label": "_warning"
                }
            ],
            "name": "Victorops",
            "attributes": [],
            "parameters": [
                {
                    "default": "_apiKey",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"api_key\" <$> TF.attribute",
                    "name": "api_key",
                    "method": "apiKey",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasApiKey",
                    "optional": false,
                    "label": "_apiKey"
                },
                {
                    "default": "_critical",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"critical\" <$> TF.attribute",
                    "name": "critical",
                    "method": "critical",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasCritical",
                    "optional": false,
                    "label": "_critical"
                },
                {
                    "default": "_info",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"info\" <$> TF.attribute",
                    "name": "info",
                    "method": "info",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasInfo",
                    "optional": false,
                    "label": "_info"
                },
                {
                    "default": "_team",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"team\" <$> TF.attribute",
                    "name": "team",
                    "method": "team",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasTeam",
                    "optional": false,
                    "label": "_team"
                },
                {
                    "default": "_warning",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"warning\" <$> TF.attribute",
                    "name": "warning",
                    "method": "warning",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasWarning",
                    "optional": false,
                    "label": "_warning"
                }
            ],
            "hashable": false,
            "type": "Victorops s",
            "original": "victorops"
        },
        {
            "arguments": [
                {
                    "default": "TF.value P.True",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"active\" <$> TF.attribute",
                    "name": "active",
                    "method": "active",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasActive",
                    "optional": true,
                    "label": "_active"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"alpha\" <$> TF.attribute",
                    "name": "alpha",
                    "method": "alpha",
                    "conflicts": [],
                    "type": "TF.Attr s P.Double",
                    "class": "HasAlpha",
                    "optional": true,
                    "label": "_alpha"
                },
                {
                    "default": "TF.value \"left\"",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"axis\" <$> TF.attribute",
                    "name": "axis",
                    "method": "axis",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAxis",
                    "optional": true,
                    "label": "_axis"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"caql\" <$> TF.attribute",
                    "name": "caql",
                    "method": "caql",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "method": "check",
                            "label": "_check"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "metricName",
                            "label": "_metricName"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCaql",
                    "optional": true,
                    "label": "_caql"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"check\" <$> TF.attribute",
                    "name": "check",
                    "method": "check",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "method": "caql",
                            "label": "_caql"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCheck",
                    "optional": true,
                    "label": "_check"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"color\" <$> TF.attribute",
                    "name": "color",
                    "method": "color",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasColor",
                    "optional": true,
                    "label": "_color"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"formula\" <$> TF.attribute",
                    "name": "formula",
                    "method": "formula",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasFormula",
                    "optional": true,
                    "label": "_formula"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"legend_formula\" <$> TF.attribute",
                    "name": "legend_formula",
                    "method": "legendFormula",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasLegendFormula",
                    "optional": true,
                    "label": "_legendFormula"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"metric_name\" <$> TF.attribute",
                    "name": "metric_name",
                    "method": "metricName",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "method": "caql",
                            "label": "_caql"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMetricName",
                    "optional": true,
                    "label": "_metricName"
                },
                {
                    "default": "_metricType",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"metric_type\" <$> TF.attribute",
                    "name": "metric_type",
                    "method": "metricType",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMetricType",
                    "optional": false,
                    "label": "_metricType"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "optional": true,
                    "label": "_name"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"stack\" <$> TF.attribute",
                    "name": "stack",
                    "method": "stack",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasStack",
                    "optional": true,
                    "label": "_stack"
                }
            ],
            "name": "Metric",
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"function\" <$> TF.attribute",
                    "name": "function",
                    "method": "computedFunction",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedFunction",
                    "optional": true,
                    "label": "_computedFunction"
                }
            ],
            "parameters": [
                {
                    "default": "_metricType",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"metric_type\" <$> TF.attribute",
                    "name": "metric_type",
                    "method": "metricType",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMetricType",
                    "optional": false,
                    "label": "_metricType"
                }
            ],
            "hashable": false,
            "type": "Metric s",
            "original": "metric"
        },
        {
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The length of time we should wait before contacting the contact groups after",
                        "this ruleset has faulted."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"after\" <$> TF.attribute",
                    "name": "after",
                    "method": "after",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAfter",
                    "optional": true,
                    "label": "_after"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "List of contact groups to notify at the following appropriate severity if",
                        "this rule set is active."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"notify\" <$> TF.attribute",
                    "name": "notify",
                    "method": "notify",
                    "conflicts": [],
                    "type": "TF.Attr s (P.NonEmpty (TF.Attr s P.Text))",
                    "class": "HasNotify",
                    "optional": true,
                    "label": "_notify"
                },
                {
                    "default": "TF.value 1",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Send a notification at this severity level."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"severity\" <$> TF.attribute",
                    "name": "severity",
                    "method": "severity",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasSeverity",
                    "optional": true,
                    "label": "_severity"
                }
            ],
            "name": "Then",
            "attributes": [],
            "parameters": [],
            "hashable": false,
            "type": "Then s",
            "original": "then"
        },
        {
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "This regular expression is matched against the response banner. If a match",
                        "is not found, the check will be marked as bad."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"banner_regexp\" <$> TF.attribute",
                    "name": "banner_regexp",
                    "method": "bannerRegexp",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasBannerRegexp",
                    "optional": true,
                    "label": "_bannerRegexp"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A path to a file containing all the certificate authorities that should be",
                        "loaded to validate the remote certificate (for TLS checks)."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"ca_chain\" <$> TF.attribute",
                    "name": "ca_chain",
                    "method": "caChain",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCaChain",
                    "optional": true,
                    "label": "_caChain"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A path to a file containing the client certificate that will be presented to",
                        "the remote server (for TLS checks)."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"certificate_file\" <$> TF.attribute",
                    "name": "certificate_file",
                    "method": "certificateFile",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCertificateFile",
                    "optional": true,
                    "label": "_certificateFile"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A list of ciphers to be used when establishing a TLS connection"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"ciphers\" <$> TF.attribute",
                    "name": "ciphers",
                    "method": "ciphers",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCiphers",
                    "optional": true,
                    "label": "_ciphers"
                },
                {
                    "default": "_host",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Specifies the host name or IP address to connect to for this TCP check"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"host\" <$> TF.attribute",
                    "name": "host",
                    "method": "host",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasHost",
                    "optional": false,
                    "label": "_host"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A path to a file containing key to be used in conjunction with the cilent",
                        "certificate (for TLS checks)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"key_file\" <$> TF.attribute",
                    "name": "key_file",
                    "method": "keyFile",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasKeyFile",
                    "optional": true,
                    "label": "_keyFile"
                },
                {
                    "default": "_port",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Specifies the port on which the management interface can be reached."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"port\" <$> TF.attribute",
                    "name": "port",
                    "method": "port",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasPort",
                    "optional": false,
                    "label": "_port"
                },
                {
                    "default": "TF.value P.False",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Upgrade TCP connection to use TLS."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"tls\" <$> TF.attribute",
                    "name": "tls",
                    "method": "tls",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasTls",
                    "optional": true,
                    "label": "_tls"
                }
            ],
            "name": "Tcp",
            "attributes": [],
            "parameters": [
                {
                    "default": "_host",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Specifies the host name or IP address to connect to for this TCP check"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"host\" <$> TF.attribute",
                    "name": "host",
                    "method": "host",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasHost",
                    "optional": false,
                    "label": "_host"
                },
                {
                    "default": "_port",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Specifies the port on which the management interface can be reached."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"port\" <$> TF.attribute",
                    "name": "port",
                    "method": "port",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasPort",
                    "optional": false,
                    "label": "_port"
                }
            ],
            "hashable": false,
            "type": "Tcp s",
            "original": "tcp"
        },
        {
            "arguments": [
                {
                    "default": "_query",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The query definition"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"query\" <$> TF.attribute",
                    "name": "query",
                    "method": "query",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasQuery",
                    "optional": false,
                    "label": "_query"
                }
            ],
            "name": "Caql",
            "attributes": [],
            "parameters": [
                {
                    "default": "_query",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The query definition"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"query\" <$> TF.attribute",
                    "name": "query",
                    "method": "query",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasQuery",
                    "optional": false,
                    "label": "_query"
                }
            ],
            "hashable": false,
            "type": "Caql s",
            "original": "caql"
        },
        {
            "arguments": [
                {
                    "default": "_definition",
                    "computed": false,
                    "required": true,
                    "help": [
                        "A query to select a collection of metric streams"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"definition\" <$> TF.attribute",
                    "name": "definition",
                    "method": "definition",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDefinition",
                    "optional": false,
                    "label": "_definition"
                },
                {
                    "default": "_type'",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The operation to perform on the matching metric streams"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "type",
                    "method": "type'",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasType'",
                    "optional": false,
                    "label": "_type'"
                }
            ],
            "name": "Query",
            "attributes": [],
            "parameters": [
                {
                    "default": "_definition",
                    "computed": false,
                    "required": true,
                    "help": [
                        "A query to select a collection of metric streams"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"definition\" <$> TF.attribute",
                    "name": "definition",
                    "method": "definition",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDefinition",
                    "optional": false,
                    "label": "_definition"
                },
                {
                    "default": "_type'",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The operation to perform on the matching metric streams"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "type",
                    "method": "type'",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasType'",
                    "optional": false,
                    "label": "_type'"
                }
            ],
            "hashable": false,
            "type": "Query s",
            "original": "query"
        },
        {
            "arguments": [],
            "name": "Details",
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"cn\" <$> TF.attribute",
                    "name": "cn",
                    "method": "computedCn",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedCn",
                    "optional": false,
                    "label": "_computedCn"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"external_host\" <$> TF.attribute",
                    "name": "external_host",
                    "method": "computedExternalHost",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedExternalHost",
                    "optional": false,
                    "label": "_computedExternalHost"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"external_port\" <$> TF.attribute",
                    "name": "external_port",
                    "method": "computedExternalPort",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasComputedExternalPort",
                    "optional": false,
                    "label": "_computedExternalPort"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"ip\" <$> TF.attribute",
                    "name": "ip",
                    "method": "computedIp",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedIp",
                    "optional": false,
                    "label": "_computedIp"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"min_version\" <$> TF.attribute",
                    "name": "min_version",
                    "method": "computedMinVersion",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasComputedMinVersion",
                    "optional": false,
                    "label": "_computedMinVersion"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"modules\" <$> TF.attribute",
                    "name": "modules",
                    "method": "computedModules",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasComputedModules",
                    "optional": false,
                    "label": "_computedModules"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"port\" <$> TF.attribute",
                    "name": "port",
                    "method": "computedPort",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasComputedPort",
                    "optional": false,
                    "label": "_computedPort"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"skew\" <$> TF.attribute",
                    "name": "skew",
                    "method": "computedSkew",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedSkew",
                    "optional": false,
                    "label": "_computedSkew"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"status\" <$> TF.attribute",
                    "name": "status",
                    "method": "computedStatus",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedStatus",
                    "optional": false,
                    "label": "_computedStatus"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"version\" <$> TF.attribute",
                    "name": "version",
                    "method": "computedVersion",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasComputedVersion",
                    "optional": false,
                    "label": "_computedVersion"
                }
            ],
            "parameters": [],
            "hashable": false,
            "type": "Details s",
            "original": "details"
        },
        {
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"escalate_after\" <$> TF.attribute",
                    "name": "escalate_after",
                    "method": "escalateAfter",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasEscalateAfter",
                    "optional": true,
                    "label": "_escalateAfter"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"escalate_to\" <$> TF.attribute",
                    "name": "escalate_to",
                    "method": "escalateTo",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasEscalateTo",
                    "optional": true,
                    "label": "_escalateTo"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"reminder\" <$> TF.attribute",
                    "name": "reminder",
                    "method": "reminder",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasReminder",
                    "optional": true,
                    "label": "_reminder"
                },
                {
                    "default": "_severity",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"severity\" <$> TF.attribute",
                    "name": "severity",
                    "method": "severity",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasSeverity",
                    "optional": false,
                    "label": "_severity"
                }
            ],
            "name": "AlertOption",
            "attributes": [],
            "parameters": [
                {
                    "default": "_severity",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"severity\" <$> TF.attribute",
                    "name": "severity",
                    "method": "severity",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasSeverity",
                    "optional": false,
                    "label": "_severity"
                }
            ],
            "hashable": false,
            "type": "AlertOption s",
            "original": "alert_option"
        },
        {
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"address\" <$> TF.attribute",
                    "name": "address",
                    "method": "address",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "method": "user",
                            "label": "_user"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAddress",
                    "optional": true,
                    "label": "_address"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"user\" <$> TF.attribute",
                    "name": "user",
                    "method": "user",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "method": "address",
                            "label": "_address"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUser",
                    "optional": true,
                    "label": "_user"
                }
            ],
            "name": "Sms",
            "attributes": [],
            "parameters": [],
            "hashable": false,
            "type": "Sms s",
            "original": "sms"
        },
        {
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"address\" <$> TF.attribute",
                    "name": "address",
                    "method": "address",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "method": "user",
                            "label": "_user"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAddress",
                    "optional": true,
                    "label": "_address"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"user\" <$> TF.attribute",
                    "name": "user",
                    "method": "user",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "method": "address",
                            "label": "_address"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUser",
                    "optional": true,
                    "label": "_user"
                }
            ],
            "name": "Xmpp",
            "attributes": [],
            "parameters": [],
            "hashable": false,
            "type": "Xmpp s",
            "original": "xmpp"
        },
        {
            "arguments": [],
            "name": "Usage",
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"limit\" <$> TF.attribute",
                    "name": "limit",
                    "method": "computedLimit",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasComputedLimit",
                    "optional": false,
                    "label": "_computedLimit"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "type",
                    "method": "computedType'",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedType'",
                    "optional": false,
                    "label": "_computedType'"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"used\" <$> TF.attribute",
                    "name": "used",
                    "method": "computedUsed",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasComputedUsed",
                    "optional": false,
                    "label": "_computedUsed"
                }
            ],
            "parameters": [],
            "hashable": false,
            "type": "Usage s",
            "original": "usage"
        },
        {
            "arguments": [
                {
                    "default": "_user",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"user\" <$> TF.attribute",
                    "name": "user",
                    "method": "user",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUser",
                    "optional": false,
                    "label": "_user"
                }
            ],
            "name": "Irc",
            "attributes": [],
            "parameters": [
                {
                    "default": "_user",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"user\" <$> TF.attribute",
                    "name": "user",
                    "method": "user",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUser",
                    "optional": false,
                    "label": "_user"
                }
            ],
            "hashable": false,
            "type": "Irc s",
            "original": "irc"
        },
        {
            "arguments": [
                {
                    "default": "_address",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"address\" <$> TF.attribute",
                    "name": "address",
                    "method": "address",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAddress",
                    "optional": false,
                    "label": "_address"
                },
                {
                    "default": "TF.value \"json\"",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"format\" <$> TF.attribute",
                    "name": "format",
                    "method": "format",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasFormat",
                    "optional": true,
                    "label": "_format"
                },
                {
                    "default": "TF.value \"POST\"",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"method\" <$> TF.attribute",
                    "name": "method",
                    "method": "method",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMethod",
                    "optional": true,
                    "label": "_method"
                }
            ],
            "name": "Http",
            "attributes": [],
            "parameters": [
                {
                    "default": "_address",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"address\" <$> TF.attribute",
                    "name": "address",
                    "method": "address",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAddress",
                    "optional": false,
                    "label": "_address"
                }
            ],
            "hashable": false,
            "type": "Http s",
            "original": "http"
        },
        {
            "arguments": [
                {
                    "default": "_apiKey",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The AWS API Key"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"api_key\" <$> TF.attribute",
                    "name": "api_key",
                    "method": "apiKey",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasApiKey",
                    "optional": false,
                    "label": "_apiKey"
                },
                {
                    "default": "_apiSecret",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The AWS API Secret"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"api_secret\" <$> TF.attribute",
                    "name": "api_secret",
                    "method": "apiSecret",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasApiSecret",
                    "optional": false,
                    "label": "_apiSecret"
                },
                {
                    "default": "_dimmensions",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The dimensions to query for the metric"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"dimmensions\" <$> TF.attribute",
                    "name": "dimmensions",
                    "method": "dimmensions",
                    "conflicts": [],
                    "type": "TF.Attr s (P.HashMap P.Text (TF.Attr s P.Text))",
                    "class": "HasDimmensions",
                    "optional": false,
                    "label": "_dimmensions"
                },
                {
                    "default": "_metric",
                    "computed": false,
                    "required": true,
                    "help": [
                        "One or more CloudWatch Metric attributes"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"metric\" <$> TF.attribute",
                    "name": "metric",
                    "method": "metric",
                    "conflicts": [],
                    "type": "TF.Attr s (P.NonEmpty (TF.Attr s (TF.Attr s P.Text)))",
                    "class": "HasMetric",
                    "optional": false,
                    "label": "_metric"
                },
                {
                    "default": "_namespace",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The namespace to pull telemetry from"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"namespace\" <$> TF.attribute",
                    "name": "namespace",
                    "method": "namespace",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasNamespace",
                    "optional": false,
                    "label": "_namespace"
                },
                {
                    "default": "_url",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The URL including schema and hostname for the Cloudwatch monitoring server.",
                        "This value will be used to specify the region - for example, to pull from",
                        "us-east-1, the URL would be https://monitoring.us-east-1.amazonaws.com."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"url\" <$> TF.attribute",
                    "name": "url",
                    "method": "url",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUrl",
                    "optional": false,
                    "label": "_url"
                },
                {
                    "default": "TF.value \"2010-08-01\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The version of the Cloudwatch API to use."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"version\" <$> TF.attribute",
                    "name": "version",
                    "method": "version",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasVersion",
                    "optional": true,
                    "label": "_version"
                }
            ],
            "name": "Cloudwatch",
            "attributes": [],
            "parameters": [
                {
                    "default": "_apiKey",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The AWS API Key"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"api_key\" <$> TF.attribute",
                    "name": "api_key",
                    "method": "apiKey",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasApiKey",
                    "optional": false,
                    "label": "_apiKey"
                },
                {
                    "default": "_apiSecret",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The AWS API Secret"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"api_secret\" <$> TF.attribute",
                    "name": "api_secret",
                    "method": "apiSecret",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasApiSecret",
                    "optional": false,
                    "label": "_apiSecret"
                },
                {
                    "default": "_dimmensions",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The dimensions to query for the metric"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"dimmensions\" <$> TF.attribute",
                    "name": "dimmensions",
                    "method": "dimmensions",
                    "conflicts": [],
                    "type": "TF.Attr s (P.HashMap P.Text (TF.Attr s P.Text))",
                    "class": "HasDimmensions",
                    "optional": false,
                    "label": "_dimmensions"
                },
                {
                    "default": "_metric",
                    "computed": false,
                    "required": true,
                    "help": [
                        "One or more CloudWatch Metric attributes"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"metric\" <$> TF.attribute",
                    "name": "metric",
                    "method": "metric",
                    "conflicts": [],
                    "type": "TF.Attr s (P.NonEmpty (TF.Attr s (TF.Attr s P.Text)))",
                    "class": "HasMetric",
                    "optional": false,
                    "label": "_metric"
                },
                {
                    "default": "_namespace",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The namespace to pull telemetry from"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"namespace\" <$> TF.attribute",
                    "name": "namespace",
                    "method": "namespace",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasNamespace",
                    "optional": false,
                    "label": "_namespace"
                },
                {
                    "default": "_url",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The URL including schema and hostname for the Cloudwatch monitoring server.",
                        "This value will be used to specify the region - for example, to pull from",
                        "us-east-1, the URL would be https://monitoring.us-east-1.amazonaws.com."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"url\" <$> TF.attribute",
                    "name": "url",
                    "method": "url",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUrl",
                    "optional": false,
                    "label": "_url"
                }
            ],
            "hashable": false,
            "type": "Cloudwatch s",
            "original": "cloudwatch"
        },
        {
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A Consul ACL token"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"acl_token\" <$> TF.attribute",
                    "name": "acl_token",
                    "method": "aclToken",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAclToken",
                    "optional": true,
                    "label": "_aclToken"
                },
                {
                    "default": "TF.value P.True",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Allow Consul to read from a non-leader system"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"allow_stale\" <$> TF.attribute",
                    "name": "allow_stale",
                    "method": "allowStale",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasAllowStale",
                    "optional": true,
                    "label": "_allowStale"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A path to a file containing all the certificate authorities that should be",
                        "loaded to validate the remote certificate (for TLS checks)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"ca_chain\" <$> TF.attribute",
                    "name": "ca_chain",
                    "method": "caChain",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCaChain",
                    "optional": true,
                    "label": "_caChain"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A path to a file containing the client certificate that will be presented to",
                        "the remote server (for TLS-enabled checks)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"certificate_file\" <$> TF.attribute",
                    "name": "certificate_file",
                    "method": "certificateFile",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCertificateFile",
                    "optional": true,
                    "label": "_certificateFile"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A blacklist of check names to exclude from metric results"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"check_blacklist\" <$> TF.attribute",
                    "name": "check_blacklist",
                    "method": "checkBlacklist",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasCheckBlacklist",
                    "optional": true,
                    "label": "_checkBlacklist"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A list of ciphers to be used in the TLS protocol (for HTTPS checks)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"ciphers\" <$> TF.attribute",
                    "name": "ciphers",
                    "method": "ciphers",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCiphers",
                    "optional": true,
                    "label": "_ciphers"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The Consul datacenter to extract health information from"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"dc\" <$> TF.attribute",
                    "name": "dc",
                    "method": "dc",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDc",
                    "optional": true,
                    "label": "_dc"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Map of HTTP Headers to send along with HTTP Requests"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"headers\" <$> TF.attribute",
                    "name": "headers",
                    "method": "headers",
                    "conflicts": [],
                    "type": "TF.Attr s (P.HashMap P.Text (TF.Attr s P.Text))",
                    "class": "HasHeaders",
                    "optional": true,
                    "label": "_headers"
                },
                {
                    "default": "TF.value \"http://consul.service.consul\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The HTTP Address of a Consul agent to query"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"http_addr\" <$> TF.attribute",
                    "name": "http_addr",
                    "method": "httpAddr",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasHttpAddr",
                    "optional": true,
                    "label": "_httpAddr"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A path to a file containing key to be used in conjunction with the cilent",
                        "certificate (for TLS checks)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"key_file\" <$> TF.attribute",
                    "name": "key_file",
                    "method": "keyFile",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasKeyFile",
                    "optional": true,
                    "label": "_keyFile"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Node Name or NodeID of a Consul agent"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"node\" <$> TF.attribute",
                    "name": "node",
                    "method": "node",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "method": "state",
                            "label": "_state"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "service",
                            "label": "_service"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasNode",
                    "optional": true,
                    "label": "_node"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A blacklist of node names or IDs to exclude from metric results"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"node_blacklist\" <$> TF.attribute",
                    "name": "node_blacklist",
                    "method": "nodeBlacklist",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasNodeBlacklist",
                    "optional": true,
                    "label": "_nodeBlacklist"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Name of the Consul service to check"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"service\" <$> TF.attribute",
                    "name": "service",
                    "method": "service",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "method": "node",
                            "label": "_node"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "state",
                            "label": "_state"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasService",
                    "optional": true,
                    "label": "_service"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A blacklist of service names to exclude from metric results"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"service_blacklist\" <$> TF.attribute",
                    "name": "service_blacklist",
                    "method": "serviceBlacklist",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasServiceBlacklist",
                    "optional": true,
                    "label": "_serviceBlacklist"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Check for Consul services in this particular state"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"state\" <$> TF.attribute",
                    "name": "state",
                    "method": "state",
                    "conflicts": [
                        {
                            "default": "TF.Nil",
                            "method": "node",
                            "label": "_node"
                        },
                        {
                            "default": "TF.Nil",
                            "method": "service",
                            "label": "_service"
                        }
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasState",
                    "optional": true,
                    "label": "_state"
                }
            ],
            "name": "Consul",
            "attributes": [],
            "parameters": [],
            "hashable": false,
            "type": "Consul s",
            "original": "consul"
        },
        {
            "arguments": [
                {
                    "default": "_dsn",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The connect DSN for the PostgreSQL instance"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"dsn\" <$> TF.attribute",
                    "name": "dsn",
                    "method": "dsn",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDsn",
                    "optional": false,
                    "label": "_dsn"
                },
                {
                    "default": "_query",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The SQL to use as the query"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"query\" <$> TF.attribute",
                    "name": "query",
                    "method": "query",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasQuery",
                    "optional": false,
                    "label": "_query"
                }
            ],
            "name": "Postgresql",
            "attributes": [],
            "parameters": [
                {
                    "default": "_dsn",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The connect DSN for the PostgreSQL instance"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"dsn\" <$> TF.attribute",
                    "name": "dsn",
                    "method": "dsn",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDsn",
                    "optional": false,
                    "label": "_dsn"
                },
                {
                    "default": "_query",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The SQL to use as the query"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"query\" <$> TF.attribute",
                    "name": "query",
                    "method": "query",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasQuery",
                    "optional": false,
                    "label": "_query"
                }
            ],
            "hashable": false,
            "type": "Postgresql s",
            "original": "postgresql"
        },
        {
            "arguments": [
                {
                    "default": "TF.value P.True",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"active\" <$> TF.attribute",
                    "name": "active",
                    "method": "active",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasActive",
                    "optional": true,
                    "label": "_active"
                },
                {
                    "default": "TF.value \"none\"",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"aggregate\" <$> TF.attribute",
                    "name": "aggregate",
                    "method": "aggregate",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAggregate",
                    "optional": true,
                    "label": "_aggregate"
                },
                {
                    "default": "TF.value \"left\"",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"axis\" <$> TF.attribute",
                    "name": "axis",
                    "method": "axis",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAxis",
                    "optional": true,
                    "label": "_axis"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"color\" <$> TF.attribute",
                    "name": "color",
                    "method": "color",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasColor",
                    "optional": true,
                    "label": "_color"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "optional": false,
                    "label": "_name"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"query\" <$> TF.attribute",
                    "name": "query",
                    "method": "query",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasQuery",
                    "optional": true,
                    "label": "_query"
                }
            ],
            "name": "MetricCluster",
            "attributes": [],
            "parameters": [
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "optional": false,
                    "label": "_name"
                }
            ],
            "hashable": false,
            "type": "MetricCluster s",
            "original": "metric_cluster"
        }
    ],
    "arguments": [
        {
            "default": "\"https://api.circonus.com/v2\"",
            "computed": false,
            "required": false,
            "help": [
                "URL of the Circonus API"
            ],
            "forceNew": false,
            "encoder": "P.Just $ TF.assign \"api_url\"",
            "name": "api_url",
            "method": "apiUrl",
            "conflicts": [],
            "type": "P.Text",
            "class": "HasApiUrl",
            "optional": true,
            "label": "_apiUrl"
        },
        {
            "default": "P.False",
            "computed": false,
            "required": false,
            "help": [
                "Signals that the provider should automatically add a tag to all API calls",
                "denoting that the resource was created by Terraform"
            ],
            "forceNew": false,
            "encoder": "P.Just $ TF.assign \"auto_tag\"",
            "name": "auto_tag",
            "method": "autoTag",
            "conflicts": [],
            "type": "P.Bool",
            "class": "HasAutoTag",
            "optional": true,
            "label": "_autoTag"
        },
        {
            "default": "_key",
            "computed": false,
            "required": true,
            "help": [
                "API token used to authenticate with the Circonus API"
            ],
            "forceNew": false,
            "encoder": "P.Just $ TF.assign \"key\"",
            "name": "key",
            "method": "key",
            "conflicts": [],
            "type": "P.Text",
            "class": "HasKey",
            "optional": false,
            "label": "_key"
        }
    ],
    "dataSources": [
        {
            "arguments": [],
            "schema": "DataSource",
            "name": "AccountData",
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"address1\" <$> TF.attribute",
                    "name": "address1",
                    "method": "computedAddress1",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedAddress1",
                    "optional": false,
                    "label": "_computedAddress1"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"address2\" <$> TF.attribute",
                    "name": "address2",
                    "method": "computedAddress2",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedAddress2",
                    "optional": false,
                    "label": "_computedAddress2"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"cc_email\" <$> TF.attribute",
                    "name": "cc_email",
                    "method": "computedCcEmail",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedCcEmail",
                    "optional": false,
                    "label": "_computedCcEmail"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"city\" <$> TF.attribute",
                    "name": "city",
                    "method": "computedCity",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedCity",
                    "optional": false,
                    "label": "_computedCity"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Contact Groups in this account"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"contact_groups\" <$> TF.attribute",
                    "name": "contact_groups",
                    "method": "computedContactGroups",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasComputedContactGroups",
                    "optional": false,
                    "label": "_computedContactGroups"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"country\" <$> TF.attribute",
                    "name": "country",
                    "method": "computedCountry",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedCountry",
                    "optional": false,
                    "label": "_computedCountry"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"current\" <$> TF.attribute",
                    "name": "current",
                    "method": "computedCurrent",
                    "conflicts": [
                        "_id"
                    ],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasComputedCurrent",
                    "optional": true,
                    "label": "_computedCurrent"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"description\" <$> TF.attribute",
                    "name": "description",
                    "method": "computedDescription",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedDescription",
                    "optional": false,
                    "label": "_computedDescription"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"id\" <$> TF.attribute",
                    "name": "id",
                    "method": "computedId",
                    "conflicts": [
                        "_current"
                    ],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedId",
                    "optional": true,
                    "label": "_computedId"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Outstanding invites attached to the account"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"invites\" <$> TF.attribute",
                    "name": "invites",
                    "method": "computedInvites",
                    "conflicts": [],
                    "type": "TF.Attr s [Invites s]",
                    "class": "HasComputedInvites",
                    "optional": false,
                    "label": "_computedInvites"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "name",
                    "method": "computedName",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedName",
                    "optional": false,
                    "label": "_computedName"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"owner\" <$> TF.attribute",
                    "name": "owner",
                    "method": "computedOwner",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedOwner",
                    "optional": false,
                    "label": "_computedOwner"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"state\" <$> TF.attribute",
                    "name": "state",
                    "method": "computedState",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedState",
                    "optional": false,
                    "label": "_computedState"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"timezone\" <$> TF.attribute",
                    "name": "timezone",
                    "method": "computedTimezone",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedTimezone",
                    "optional": false,
                    "label": "_computedTimezone"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"ui_base_url\" <$> TF.attribute",
                    "name": "ui_base_url",
                    "method": "computedUiBaseUrl",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedUiBaseUrl",
                    "optional": false,
                    "label": "_computedUiBaseUrl"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Account's usage limits"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"usage\" <$> TF.attribute",
                    "name": "usage",
                    "method": "computedUsage",
                    "conflicts": [],
                    "type": "TF.Attr s [Usage s]",
                    "class": "HasComputedUsage",
                    "optional": false,
                    "label": "_computedUsage"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Users attached to this account"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"users\" <$> TF.attribute",
                    "name": "users",
                    "method": "computedUsers",
                    "conflicts": [],
                    "type": "TF.Attr s [Users s]",
                    "class": "HasComputedUsers",
                    "optional": false,
                    "label": "_computedUsers"
                }
            ],
            "parameters": [],
            "type": "AccountData s",
            "original": "circonus_account"
        },
        {
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"tags\" <$> TF.attribute",
                    "name": "tags",
                    "method": "tags",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (TF.Attr s P.Text)]",
                    "class": "HasTags",
                    "optional": true,
                    "label": "_tags"
                }
            ],
            "schema": "DataSource",
            "name": "CollectorData",
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Details associated with individual collectors (a.k.a. broker)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"details\" <$> TF.attribute",
                    "name": "details",
                    "method": "computedDetails",
                    "conflicts": [],
                    "type": "TF.Attr s [Details s]",
                    "class": "HasComputedDetails",
                    "optional": false,
                    "label": "_computedDetails"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"id\" <$> TF.attribute",
                    "name": "id",
                    "method": "computedId",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedId",
                    "optional": true,
                    "label": "_computedId"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"latitude\" <$> TF.attribute",
                    "name": "latitude",
                    "method": "computedLatitude",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedLatitude",
                    "optional": false,
                    "label": "_computedLatitude"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"longitude\" <$> TF.attribute",
                    "name": "longitude",
                    "method": "computedLongitude",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedLongitude",
                    "optional": false,
                    "label": "_computedLongitude"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "name",
                    "method": "computedName",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedName",
                    "optional": false,
                    "label": "_computedName"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "type",
                    "method": "computedType'",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedType'",
                    "optional": false,
                    "label": "_computedType'"
                }
            ],
            "parameters": [],
            "type": "CollectorData s",
            "original": "circonus_collector"
        }
    ],
    "resources": [
        {
            "arguments": [
                {
                    "default": "TF.value P.True",
                    "computed": false,
                    "required": false,
                    "help": [
                        "If the check is activate or disabled"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"active\" <$> TF.attribute",
                    "name": "active",
                    "method": "active",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasActive",
                    "optional": true,
                    "label": "_active"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "CAQL check configuration"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"caql\" <$> TF.attribute",
                    "name": "caql",
                    "method": "caql",
                    "conflicts": [],
                    "type": "TF.Attr s (TF.Attr s (Caql s))",
                    "class": "HasCaql",
                    "optional": true,
                    "label": "_caql"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "CloudWatch check configuration"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"cloudwatch\" <$> TF.attribute",
                    "name": "cloudwatch",
                    "method": "cloudwatch",
                    "conflicts": [],
                    "type": "TF.Attr s (TF.Attr s (Cloudwatch s))",
                    "class": "HasCloudwatch",
                    "optional": true,
                    "label": "_cloudwatch"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The collector(s) that are responsible for gathering the metrics"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"collector\" <$> TF.attribute",
                    "name": "collector",
                    "method": "collector",
                    "conflicts": [],
                    "type": "TF.Attr s (P.NonEmpty (TF.Attr s (Collector s)))",
                    "class": "HasCollector",
                    "optional": true,
                    "label": "_collector"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Consul check configuration"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"consul\" <$> TF.attribute",
                    "name": "consul",
                    "method": "consul",
                    "conflicts": [],
                    "type": "TF.Attr s [Consul s]",
                    "class": "HasConsul",
                    "optional": true,
                    "label": "_consul"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "HTTP check configuration"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"http\" <$> TF.attribute",
                    "name": "http",
                    "method": "http",
                    "conflicts": [],
                    "type": "TF.Attr s (TF.Attr s (Http s))",
                    "class": "HasHttp",
                    "optional": true,
                    "label": "_http"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "HTTP Trap check configuration"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"httptrap\" <$> TF.attribute",
                    "name": "httptrap",
                    "method": "httptrap",
                    "conflicts": [],
                    "type": "TF.Attr s (TF.Attr s (Httptrap s))",
                    "class": "HasHttptrap",
                    "optional": true,
                    "label": "_httptrap"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "ICMP ping check configuration"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"icmp_ping\" <$> TF.attribute",
                    "name": "icmp_ping",
                    "method": "icmpPing",
                    "conflicts": [],
                    "type": "TF.Attr s (TF.Attr s (IcmpPing s))",
                    "class": "HasIcmpPing",
                    "optional": true,
                    "label": "_icmpPing"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "JSON check configuration"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"json\" <$> TF.attribute",
                    "name": "json",
                    "method": "json",
                    "conflicts": [],
                    "type": "TF.Attr s (TF.Attr s (Json s))",
                    "class": "HasJson",
                    "optional": true,
                    "label": "_json"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Configuration for a stream of metrics"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"metric\" <$> TF.attribute",
                    "name": "metric",
                    "method": "metric",
                    "conflicts": [],
                    "type": "TF.Attr s (P.NonEmpty (TF.Attr s (Metric s)))",
                    "class": "HasMetric",
                    "optional": true,
                    "label": "_metric"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "MySQL check configuration"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"mysql\" <$> TF.attribute",
                    "name": "mysql",
                    "method": "mysql",
                    "conflicts": [],
                    "type": "TF.Attr s (TF.Attr s (Mysql s))",
                    "class": "HasMysql",
                    "optional": true,
                    "label": "_mysql"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "PostgreSQL check configuration"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"postgresql\" <$> TF.attribute",
                    "name": "postgresql",
                    "method": "postgresql",
                    "conflicts": [],
                    "type": "TF.Attr s (TF.Attr s (Postgresql s))",
                    "class": "HasPostgresql",
                    "optional": true,
                    "label": "_postgresql"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Statsd check configuration"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"statsd\" <$> TF.attribute",
                    "name": "statsd",
                    "method": "statsd",
                    "conflicts": [],
                    "type": "TF.Attr s (TF.Attr s (Statsd s))",
                    "class": "HasStatsd",
                    "optional": true,
                    "label": "_statsd"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A list of tags assigned to the check"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"tags\" <$> TF.attribute",
                    "name": "tags",
                    "method": "tags",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (TF.Attr s P.Text)]",
                    "class": "HasTags",
                    "optional": true,
                    "label": "_tags"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "TCP check configuration"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"tcp\" <$> TF.attribute",
                    "name": "tcp",
                    "method": "tcp",
                    "conflicts": [],
                    "type": "TF.Attr s (TF.Attr s (Tcp s))",
                    "class": "HasTcp",
                    "optional": true,
                    "label": "_tcp"
                }
            ],
            "schema": "Resource",
            "name": "CheckResource",
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"check_by_collector\" <$> TF.attribute",
                    "name": "check_by_collector",
                    "method": "computedCheckByCollector",
                    "conflicts": [],
                    "type": "TF.Attr s (P.HashMap P.Text (TF.Attr s P.Text))",
                    "class": "HasComputedCheckByCollector",
                    "optional": false,
                    "label": "_computedCheckByCollector"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"check_id\" <$> TF.attribute",
                    "name": "check_id",
                    "method": "computedCheckId",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedCheckId",
                    "optional": false,
                    "label": "_computedCheckId"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"checks\" <$> TF.attribute",
                    "name": "checks",
                    "method": "computedChecks",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasComputedChecks",
                    "optional": false,
                    "label": "_computedChecks"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"created\" <$> TF.attribute",
                    "name": "created",
                    "method": "computedCreated",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasComputedCreated",
                    "optional": false,
                    "label": "_computedCreated"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"last_modified\" <$> TF.attribute",
                    "name": "last_modified",
                    "method": "computedLastModified",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasComputedLastModified",
                    "optional": false,
                    "label": "_computedLastModified"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"last_modified_by\" <$> TF.attribute",
                    "name": "last_modified_by",
                    "method": "computedLastModifiedBy",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedLastModifiedBy",
                    "optional": false,
                    "label": "_computedLastModifiedBy"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Setting a metric_limit will enable all (-1), disable (0), or allow up to the",
                        "specified limit of metrics for this check (\"N+\", where N is a positive",
                        "integer)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"metric_limit\" <$> TF.attribute",
                    "name": "metric_limit",
                    "method": "computedMetricLimit",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasComputedMetricLimit",
                    "optional": true,
                    "label": "_computedMetricLimit"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "The name of the check bundle that will be displayed in the web interface"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "name",
                    "method": "computedName",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedName",
                    "optional": true,
                    "label": "_computedName"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Notes about this check bundle"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"notes\" <$> TF.attribute",
                    "name": "notes",
                    "method": "computedNotes",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedNotes",
                    "optional": true,
                    "label": "_computedNotes"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "The period between each time the check is made"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"period\" <$> TF.attribute",
                    "name": "period",
                    "method": "computedPeriod",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedPeriod",
                    "optional": true,
                    "label": "_computedPeriod"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"reverse_connect_urls\" <$> TF.attribute",
                    "name": "reverse_connect_urls",
                    "method": "computedReverseConnectUrls",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasComputedReverseConnectUrls",
                    "optional": false,
                    "label": "_computedReverseConnectUrls"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "The target of the check (e.g. hostname, URL, IP, etc)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"target\" <$> TF.attribute",
                    "name": "target",
                    "method": "computedTarget",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedTarget",
                    "optional": true,
                    "label": "_computedTarget"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "The length of time in seconds (and fractions of a second) before the check",
                        "will timeout if no response is returned to the collector"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"timeout\" <$> TF.attribute",
                    "name": "timeout",
                    "method": "computedTimeout",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedTimeout",
                    "optional": true,
                    "label": "_computedTimeout"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "The check type"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "type",
                    "method": "computedType'",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedType'",
                    "optional": true,
                    "label": "_computedType'"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"uuids\" <$> TF.attribute",
                    "name": "uuids",
                    "method": "computedUuids",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasComputedUuids",
                    "optional": false,
                    "label": "_computedUuids"
                }
            ],
            "parameters": [],
            "type": "CheckResource s",
            "original": "circonus_check"
        },
        {
            "arguments": [
                {
                    "default": "TF.value \"300s\"",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"aggregation_window\" <$> TF.attribute",
                    "name": "aggregation_window",
                    "method": "aggregationWindow",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAggregationWindow",
                    "optional": true,
                    "label": "_aggregationWindow"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"alert_option\" <$> TF.attribute",
                    "name": "alert_option",
                    "method": "alertOption",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (AlertOption s)]",
                    "class": "HasAlertOption",
                    "optional": true,
                    "label": "_alertOption"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"email\" <$> TF.attribute",
                    "name": "email",
                    "method": "email",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (Email s)]",
                    "class": "HasEmail",
                    "optional": true,
                    "label": "_email"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"http\" <$> TF.attribute",
                    "name": "http",
                    "method": "http",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (Http s)]",
                    "class": "HasHttp",
                    "optional": true,
                    "label": "_http"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"irc\" <$> TF.attribute",
                    "name": "irc",
                    "method": "irc",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (Irc s)]",
                    "class": "HasIrc",
                    "optional": true,
                    "label": "_irc"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"long_message\" <$> TF.attribute",
                    "name": "long_message",
                    "method": "longMessage",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasLongMessage",
                    "optional": true,
                    "label": "_longMessage"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"long_subject\" <$> TF.attribute",
                    "name": "long_subject",
                    "method": "longSubject",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasLongSubject",
                    "optional": true,
                    "label": "_longSubject"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"long_summary\" <$> TF.attribute",
                    "name": "long_summary",
                    "method": "longSummary",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasLongSummary",
                    "optional": true,
                    "label": "_longSummary"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "optional": false,
                    "label": "_name"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"pager_duty\" <$> TF.attribute",
                    "name": "pager_duty",
                    "method": "pagerDuty",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (PagerDuty s)]",
                    "class": "HasPagerDuty",
                    "optional": true,
                    "label": "_pagerDuty"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"short_message\" <$> TF.attribute",
                    "name": "short_message",
                    "method": "shortMessage",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasShortMessage",
                    "optional": true,
                    "label": "_shortMessage"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"short_summary\" <$> TF.attribute",
                    "name": "short_summary",
                    "method": "shortSummary",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasShortSummary",
                    "optional": true,
                    "label": "_shortSummary"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"slack\" <$> TF.attribute",
                    "name": "slack",
                    "method": "slack",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (Slack s)]",
                    "class": "HasSlack",
                    "optional": true,
                    "label": "_slack"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"sms\" <$> TF.attribute",
                    "name": "sms",
                    "method": "sms",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (Sms s)]",
                    "class": "HasSms",
                    "optional": true,
                    "label": "_sms"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"tags\" <$> TF.attribute",
                    "name": "tags",
                    "method": "tags",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (TF.Attr s P.Text)]",
                    "class": "HasTags",
                    "optional": true,
                    "label": "_tags"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"victorops\" <$> TF.attribute",
                    "name": "victorops",
                    "method": "victorops",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (Victorops s)]",
                    "class": "HasVictorops",
                    "optional": true,
                    "label": "_victorops"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"xmpp\" <$> TF.attribute",
                    "name": "xmpp",
                    "method": "xmpp",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (Xmpp s)]",
                    "class": "HasXmpp",
                    "optional": true,
                    "label": "_xmpp"
                }
            ],
            "schema": "Resource",
            "name": "ContactGroupResource",
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"last_modified\" <$> TF.attribute",
                    "name": "last_modified",
                    "method": "computedLastModified",
                    "conflicts": [],
                    "type": "TF.Attr s P.Integer",
                    "class": "HasComputedLastModified",
                    "optional": false,
                    "label": "_computedLastModified"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"last_modified_by\" <$> TF.attribute",
                    "name": "last_modified_by",
                    "method": "computedLastModifiedBy",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedLastModifiedBy",
                    "optional": false,
                    "label": "_computedLastModifiedBy"
                }
            ],
            "parameters": [
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "optional": false,
                    "label": "_name"
                }
            ],
            "type": "ContactGroupResource s",
            "original": "circonus_contact_group"
        },
        {
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"description\" <$> TF.attribute",
                    "name": "description",
                    "method": "description",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDescription",
                    "optional": true,
                    "label": "_description"
                },
                {
                    "default": "TF.value \"line\"",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"graph_style\" <$> TF.attribute",
                    "name": "graph_style",
                    "method": "graphStyle",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasGraphStyle",
                    "optional": true,
                    "label": "_graphStyle"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"left\" <$> TF.attribute",
                    "name": "left",
                    "method": "left",
                    "conflicts": [],
                    "type": "TF.Attr s (P.HashMap P.Text (TF.Attr s P.Text))",
                    "class": "HasLeft",
                    "optional": true,
                    "label": "_left"
                },
                {
                    "default": "TF.value \"stepped\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "How the line should change between point. A string containing either",
                        "'stepped', 'interpolated' or null."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"line_style\" <$> TF.attribute",
                    "name": "line_style",
                    "method": "lineStyle",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasLineStyle",
                    "optional": true,
                    "label": "_lineStyle"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"metric\" <$> TF.attribute",
                    "name": "metric",
                    "method": "metric",
                    "conflicts": [],
                    "type": "TF.Attr s (P.NonEmpty (Metric s))",
                    "class": "HasMetric",
                    "optional": true,
                    "label": "_metric"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"metric_cluster\" <$> TF.attribute",
                    "name": "metric_cluster",
                    "method": "metricCluster",
                    "conflicts": [],
                    "type": "TF.Attr s (P.NonEmpty (MetricCluster s))",
                    "class": "HasMetricCluster",
                    "optional": true,
                    "label": "_metricCluster"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "optional": false,
                    "label": "_name"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"notes\" <$> TF.attribute",
                    "name": "notes",
                    "method": "notes",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasNotes",
                    "optional": true,
                    "label": "_notes"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"right\" <$> TF.attribute",
                    "name": "right",
                    "method": "right",
                    "conflicts": [],
                    "type": "TF.Attr s (P.HashMap P.Text (TF.Attr s P.Text))",
                    "class": "HasRight",
                    "optional": true,
                    "label": "_right"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"tags\" <$> TF.attribute",
                    "name": "tags",
                    "method": "tags",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (TF.Attr s P.Text)]",
                    "class": "HasTags",
                    "optional": true,
                    "label": "_tags"
                }
            ],
            "schema": "Resource",
            "name": "GraphResource",
            "attributes": [],
            "parameters": [
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "optional": false,
                    "label": "_name"
                }
            ],
            "type": "GraphResource s",
            "original": "circonus_graph"
        },
        {
            "arguments": [
                {
                    "default": "TF.value P.True",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Enables or disables the metric"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"active\" <$> TF.attribute",
                    "name": "active",
                    "method": "active",
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasActive",
                    "optional": true,
                    "label": "_active"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the metric"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "optional": false,
                    "label": "_name"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Tags assigned to the metric"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"tags\" <$> TF.attribute",
                    "name": "tags",
                    "method": "tags",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (TF.Attr s P.Text)]",
                    "class": "HasTags",
                    "optional": true,
                    "label": "_tags"
                },
                {
                    "default": "_type'",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Type of metric (e.g. numeric, histogram, text)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "type",
                    "method": "type'",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasType'",
                    "optional": false,
                    "label": "_type'"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The unit of measurement for a metric"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"unit\" <$> TF.attribute",
                    "name": "unit",
                    "method": "unit",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasUnit",
                    "optional": true,
                    "label": "_unit"
                }
            ],
            "schema": "Resource",
            "name": "MetricResource",
            "attributes": [],
            "parameters": [
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the metric"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "optional": false,
                    "label": "_name"
                },
                {
                    "default": "_type'",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Type of metric (e.g. numeric, histogram, text)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "type",
                    "method": "type'",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasType'",
                    "optional": false,
                    "label": "_type'"
                }
            ],
            "type": "MetricResource s",
            "original": "circonus_metric"
        },
        {
            "arguments": [
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The name of the metric cluster"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "optional": false,
                    "label": "_name"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A metric cluster query definition"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"query\" <$> TF.attribute",
                    "name": "query",
                    "method": "query",
                    "conflicts": [],
                    "type": "TF.Attr s (P.NonEmpty (TF.Attr s (Query s)))",
                    "class": "HasQuery",
                    "optional": true,
                    "label": "_query"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "A list of tags assigned to the metric cluster"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"tags\" <$> TF.attribute",
                    "name": "tags",
                    "method": "tags",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (TF.Attr s P.Text)]",
                    "class": "HasTags",
                    "optional": true,
                    "label": "_tags"
                }
            ],
            "schema": "Resource",
            "name": "MetricClusterResource",
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "A description of the metric cluster"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"description\" <$> TF.attribute",
                    "name": "description",
                    "method": "computedDescription",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedDescription",
                    "optional": true,
                    "label": "_computedDescription"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "The ID of this metric cluster"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"id\" <$> TF.attribute",
                    "name": "id",
                    "method": "computedId",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedId",
                    "optional": false,
                    "label": "_computedId"
                }
            ],
            "parameters": [
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The name of the metric cluster"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "name",
                    "method": "name",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "optional": false,
                    "label": "_name"
                }
            ],
            "type": "MetricClusterResource s",
            "original": "circonus_metric_cluster"
        },
        {
            "arguments": [
                {
                    "default": "_check",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The CID of the check that contains the metric for this rule set"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"check\" <$> TF.attribute",
                    "name": "check",
                    "method": "check",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCheck",
                    "optional": false,
                    "label": "_check"
                },
                {
                    "default": "_if'",
                    "computed": false,
                    "required": true,
                    "help": [
                        "A rule to execute for this rule set"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"if\" <$> TF.attribute",
                    "name": "if",
                    "method": "if'",
                    "conflicts": [],
                    "type": "TF.Attr s (P.NonEmpty (If s))",
                    "class": "HasIf'",
                    "optional": false,
                    "label": "_if'"
                },
                {
                    "default": "_metricName",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The name of the metric stream within a check to register the rule set with"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"metric_name\" <$> TF.attribute",
                    "name": "metric_name",
                    "method": "metricName",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMetricName",
                    "optional": false,
                    "label": "_metricName"
                },
                {
                    "default": "TF.value \"numeric\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The type of data flowing through the specified metric stream"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"metric_type\" <$> TF.attribute",
                    "name": "metric_type",
                    "method": "metricType",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMetricType",
                    "optional": true,
                    "label": "_metricType"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Tags associated with this rule set"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"tags\" <$> TF.attribute",
                    "name": "tags",
                    "method": "tags",
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (TF.Attr s P.Text)]",
                    "class": "HasTags",
                    "optional": true,
                    "label": "_tags"
                }
            ],
            "schema": "Resource",
            "name": "RuleSetResource",
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "URL to show users when this rule set is active (e.g. wiki)"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"link\" <$> TF.attribute",
                    "name": "link",
                    "method": "computedLink",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedLink",
                    "optional": true,
                    "label": "_computedLink"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Notes describing this rule set"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"notes\" <$> TF.attribute",
                    "name": "notes",
                    "method": "computedNotes",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedNotes",
                    "optional": true,
                    "label": "_computedNotes"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Parent CID that must be healthy for this rule set to be active"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"parent\" <$> TF.attribute",
                    "name": "parent",
                    "method": "computedParent",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedParent",
                    "optional": true,
                    "label": "_computedParent"
                }
            ],
            "parameters": [
                {
                    "default": "_check",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The CID of the check that contains the metric for this rule set"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"check\" <$> TF.attribute",
                    "name": "check",
                    "method": "check",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCheck",
                    "optional": false,
                    "label": "_check"
                },
                {
                    "default": "_if'",
                    "computed": false,
                    "required": true,
                    "help": [
                        "A rule to execute for this rule set"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"if\" <$> TF.attribute",
                    "name": "if",
                    "method": "if'",
                    "conflicts": [],
                    "type": "TF.Attr s (P.NonEmpty (If s))",
                    "class": "HasIf'",
                    "optional": false,
                    "label": "_if'"
                },
                {
                    "default": "_metricName",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The name of the metric stream within a check to register the rule set with"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"metric_name\" <$> TF.attribute",
                    "name": "metric_name",
                    "method": "metricName",
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasMetricName",
                    "optional": false,
                    "label": "_metricName"
                }
            ],
            "type": "RuleSetResource s",
            "original": "circonus_rule_set"
        }
    ],
    "dependencies": [
        "base",
        "unordered-containers",
        "text",
        "terrafomo",
        "hashable",
        "microlens"
    ],
    "name": "Circonus",
    "parameters": [
        {
            "default": "_key",
            "computed": false,
            "required": true,
            "help": [
                "API token used to authenticate with the Circonus API"
            ],
            "forceNew": false,
            "encoder": "P.Just $ TF.assign \"key\"",
            "name": "key",
            "method": "key",
            "conflicts": [],
            "type": "P.Text",
            "class": "HasKey",
            "optional": false,
            "label": "_key"
        }
    ],
    "package": "terrafomo-circonus",
    "type": "Provider",
    "original": "circonus"
}