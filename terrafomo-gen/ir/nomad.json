{
    "settings": [
        {
            "con": {
                "smart": "limitsSetting",
                "name": "LimitsSetting'"
            },
            "arguments": [
                {
                    "default": "_region",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Region in which this limit has affect."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"region\" <$> TF.attribute",
                    "name": "_region",
                    "method": "region",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasRegion",
                    "validate": false,
                    "optional": false,
                    "original": "region"
                },
                {
                    "default": "_regionLimit",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The limit applied to this region."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"region_limit\" <$> TF.attribute",
                    "name": "_regionLimit",
                    "method": "regionLimit",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s (RegionLimitSetting s)",
                    "class": "HasRegionLimit",
                    "validate": true,
                    "optional": false,
                    "original": "region_limit"
                }
            ],
            "key": "nomad_quota_specification.limits",
            "name": "LimitsSetting",
            "threaded": true,
            "attributes": [],
            "parameters": [
                {
                    "default": "_regionLimit",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The limit applied to this region."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"region_limit\" <$> TF.attribute",
                    "name": "_regionLimit",
                    "method": "regionLimit",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s (RegionLimitSetting s)",
                    "class": "HasRegionLimit",
                    "validate": true,
                    "optional": false,
                    "original": "region_limit"
                },
                {
                    "default": "_region",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Region in which this limit has affect."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"region\" <$> TF.attribute",
                    "name": "_region",
                    "method": "region",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasRegion",
                    "validate": false,
                    "optional": false,
                    "original": "region"
                }
            ],
            "conflicts": [],
            "type": "LimitsSetting s",
            "original": "limits"
        },
        {
            "con": {
                "smart": "regionLimitSetting",
                "name": "RegionLimitSetting'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"cpu\" <$> TF.attribute",
                    "name": "_cpu",
                    "method": "cpu",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Int",
                    "class": "HasCpu",
                    "validate": false,
                    "optional": true,
                    "original": "cpu"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"memory_mb\" <$> TF.attribute",
                    "name": "_memoryMb",
                    "method": "memoryMb",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Int",
                    "class": "HasMemoryMb",
                    "validate": false,
                    "optional": true,
                    "original": "memory_mb"
                }
            ],
            "key": "nomad_quota_specification.limits.region_limit",
            "name": "RegionLimitSetting",
            "threaded": true,
            "attributes": [],
            "parameters": [],
            "conflicts": [],
            "type": "RegionLimitSetting s",
            "original": "region_limit"
        }
    ],
    "url": "https://www.terraform.io/docs/providers/nomad/index.html",
    "dataSources": [
        {
            "con": {
                "smart": "regionsData",
                "name": "RegionsData'"
            },
            "arguments": [],
            "url": "https://www.terraform.io/docs/providers/nomad/d/regions.html",
            "key": "nomad_regions",
            "name": "RegionsData",
            "threaded": true,
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"id\" <$> TF.attribute",
                    "name": "_computedId",
                    "method": "computedId",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedId",
                    "validate": false,
                    "optional": false,
                    "original": "id"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"regions\" <$> TF.attribute",
                    "name": "_computedRegions",
                    "method": "computedRegions",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasComputedRegions",
                    "validate": false,
                    "optional": false,
                    "original": "regions"
                }
            ],
            "parameters": [],
            "conflicts": [],
            "type": "RegionsData s",
            "original": "nomad_regions"
        }
    ],
    "resources": [
        {
            "con": {
                "smart": "aclPolicyResource",
                "name": "AclPolicyResource'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Description for this policy."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"description\" <$> TF.attribute",
                    "name": "_description",
                    "method": "description",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDescription",
                    "validate": false,
                    "optional": true,
                    "original": "description"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Unique name for this policy."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                },
                {
                    "default": "_rulesHcl",
                    "computed": false,
                    "required": true,
                    "help": [
                        "HCL or JSON representation of the rules to enforce on this policy. Use",
                        "file() to specify a file as input."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"rules_hcl\" <$> TF.attribute",
                    "name": "_rulesHcl",
                    "method": "rulesHcl",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasRulesHcl",
                    "validate": false,
                    "optional": false,
                    "original": "rules_hcl"
                }
            ],
            "url": "https://www.terraform.io/docs/providers/nomad/r/acl_policy.html",
            "key": "nomad_acl_policy",
            "name": "AclPolicyResource",
            "threaded": true,
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"id\" <$> TF.attribute",
                    "name": "_computedId",
                    "method": "computedId",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedId",
                    "validate": false,
                    "optional": false,
                    "original": "id"
                }
            ],
            "parameters": [
                {
                    "default": "_rulesHcl",
                    "computed": false,
                    "required": true,
                    "help": [
                        "HCL or JSON representation of the rules to enforce on this policy. Use",
                        "file() to specify a file as input."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"rules_hcl\" <$> TF.attribute",
                    "name": "_rulesHcl",
                    "method": "rulesHcl",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasRulesHcl",
                    "validate": false,
                    "optional": false,
                    "original": "rules_hcl"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Unique name for this policy."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                }
            ],
            "conflicts": [],
            "type": "AclPolicyResource s",
            "original": "nomad_acl_policy"
        },
        {
            "con": {
                "smart": "aclTokenResource",
                "name": "AclTokenResource'"
            },
            "arguments": [
                {
                    "default": "TF.value P.False",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Whether the token should be replicated to all regions or not."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"global\" <$> TF.attribute",
                    "name": "_global",
                    "method": "global",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasGlobal",
                    "validate": false,
                    "optional": true,
                    "original": "global"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Human-readable name for this token."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": true,
                    "original": "name"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "The ACL policies to associate with the token, if it's a 'client' type."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"policies\" <$> TF.attribute",
                    "name": "_policies",
                    "method": "policies",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasPolicies",
                    "validate": false,
                    "optional": true,
                    "original": "policies"
                },
                {
                    "default": "_type'",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The type of token to create, 'client' or 'management'."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "_type'",
                    "method": "type'",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasType'",
                    "validate": false,
                    "optional": false,
                    "original": "type"
                }
            ],
            "url": "https://www.terraform.io/docs/providers/nomad/r/acl_token.html",
            "key": "nomad_acl_token",
            "name": "AclTokenResource",
            "threaded": true,
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"id\" <$> TF.attribute",
                    "name": "_computedId",
                    "method": "computedId",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedId",
                    "validate": false,
                    "optional": false,
                    "original": "id"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Nomad-generated ID for this token."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"accessor_id\" <$> TF.attribute",
                    "name": "_computedAccessorId",
                    "method": "computedAccessorId",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedAccessorId",
                    "validate": false,
                    "optional": false,
                    "original": "accessor_id"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "The value that grants access to Nomad."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"secret_id\" <$> TF.attribute",
                    "name": "_computedSecretId",
                    "method": "computedSecretId",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedSecretId",
                    "validate": false,
                    "optional": false,
                    "original": "secret_id"
                }
            ],
            "parameters": [
                {
                    "default": "_type'",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The type of token to create, 'client' or 'management'."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"type\" <$> TF.attribute",
                    "name": "_type'",
                    "method": "type'",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasType'",
                    "validate": false,
                    "optional": false,
                    "original": "type"
                }
            ],
            "conflicts": [],
            "type": "AclTokenResource s",
            "original": "nomad_acl_token"
        },
        {
            "con": {
                "smart": "jobResource",
                "name": "JobResource'"
            },
            "arguments": [
                {
                    "default": "TF.value P.True",
                    "computed": false,
                    "required": false,
                    "help": [
                        "If true, the job will be deregistered on destroy."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"deregister_on_destroy\" <$> TF.attribute",
                    "name": "_deregisterOnDestroy",
                    "method": "deregisterOnDestroy",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasDeregisterOnDestroy",
                    "validate": false,
                    "optional": true,
                    "original": "deregister_on_destroy"
                },
                {
                    "default": "TF.value P.True",
                    "computed": false,
                    "required": false,
                    "help": [
                        "If true, the job will be deregistered when the job ID changes."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"deregister_on_id_change\" <$> TF.attribute",
                    "name": "_deregisterOnIdChange",
                    "method": "deregisterOnIdChange",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasDeregisterOnIdChange",
                    "validate": false,
                    "optional": true,
                    "original": "deregister_on_id_change"
                },
                {
                    "default": "_jobspec",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Job specification. If you want to point to a file use the file() function."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"jobspec\" <$> TF.attribute",
                    "name": "_jobspec",
                    "method": "jobspec",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasJobspec",
                    "validate": false,
                    "optional": false,
                    "original": "jobspec"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Override any soft-mandatory Sentinel policies that fail."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"policy_override\" <$> TF.attribute",
                    "name": "_policyOverride",
                    "method": "policyOverride",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasPolicyOverride",
                    "validate": false,
                    "optional": true,
                    "original": "policy_override"
                }
            ],
            "url": "https://www.terraform.io/docs/providers/nomad/r/job.html",
            "key": "nomad_job",
            "name": "JobResource",
            "threaded": true,
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"id\" <$> TF.attribute",
                    "name": "_computedId",
                    "method": "computedId",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedId",
                    "validate": false,
                    "optional": false,
                    "original": "id"
                }
            ],
            "parameters": [
                {
                    "default": "_jobspec",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Job specification. If you want to point to a file use the file() function."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"jobspec\" <$> TF.attribute",
                    "name": "_jobspec",
                    "method": "jobspec",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasJobspec",
                    "validate": false,
                    "optional": false,
                    "original": "jobspec"
                }
            ],
            "conflicts": [],
            "type": "JobResource s",
            "original": "nomad_job"
        },
        {
            "con": {
                "smart": "namespaceResource",
                "name": "NamespaceResource'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Description for this namespace."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"description\" <$> TF.attribute",
                    "name": "_description",
                    "method": "description",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDescription",
                    "validate": false,
                    "optional": true,
                    "original": "description"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Unique name for this namespace."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Quota to set for this namespace."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"quota\" <$> TF.attribute",
                    "name": "_quota",
                    "method": "quota",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasQuota",
                    "validate": false,
                    "optional": true,
                    "original": "quota"
                }
            ],
            "url": "https://www.terraform.io/docs/providers/nomad/r/namespace.html",
            "key": "nomad_namespace",
            "name": "NamespaceResource",
            "threaded": true,
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"id\" <$> TF.attribute",
                    "name": "_computedId",
                    "method": "computedId",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedId",
                    "validate": false,
                    "optional": false,
                    "original": "id"
                }
            ],
            "parameters": [
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Unique name for this namespace."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                }
            ],
            "conflicts": [],
            "type": "NamespaceResource s",
            "original": "nomad_namespace"
        },
        {
            "con": {
                "smart": "quotaSpecificationResource",
                "name": "QuotaSpecificationResource'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Description for this quota specification."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"description\" <$> TF.attribute",
                    "name": "_description",
                    "method": "description",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDescription",
                    "validate": false,
                    "optional": true,
                    "original": "description"
                },
                {
                    "default": "_limits",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Limits encapsulated by this quota specification."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"limits\" <$> TF.attribute",
                    "name": "_limits",
                    "method": "limits",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (LimitsSetting s)]",
                    "class": "HasLimits",
                    "validate": false,
                    "optional": false,
                    "original": "limits"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Unique name for this quota specification."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                }
            ],
            "url": "https://www.terraform.io/docs/providers/nomad/r/quota_specification.html",
            "key": "nomad_quota_specification",
            "name": "QuotaSpecificationResource",
            "threaded": true,
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"id\" <$> TF.attribute",
                    "name": "_computedId",
                    "method": "computedId",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedId",
                    "validate": false,
                    "optional": false,
                    "original": "id"
                }
            ],
            "parameters": [
                {
                    "default": "_limits",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Limits encapsulated by this quota specification."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"limits\" <$> TF.attribute",
                    "name": "_limits",
                    "method": "limits",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (LimitsSetting s)]",
                    "class": "HasLimits",
                    "validate": false,
                    "optional": false,
                    "original": "limits"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Unique name for this quota specification."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                }
            ],
            "conflicts": [],
            "type": "QuotaSpecificationResource s",
            "original": "nomad_quota_specification"
        },
        {
            "con": {
                "smart": "sentinelPolicyResource",
                "name": "SentinelPolicyResource'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Description for this policy."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"description\" <$> TF.attribute",
                    "name": "_description",
                    "method": "description",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasDescription",
                    "validate": false,
                    "optional": true,
                    "original": "description"
                },
                {
                    "default": "_enforcementLevel",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Specifies the enforcement level of the policy."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"enforcement_level\" <$> TF.attribute",
                    "name": "_enforcementLevel",
                    "method": "enforcementLevel",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasEnforcementLevel",
                    "validate": false,
                    "optional": false,
                    "original": "enforcement_level"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Unique name for this policy."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                },
                {
                    "default": "_policy",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The Sentinel policy."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"policy\" <$> TF.attribute",
                    "name": "_policy",
                    "method": "policy",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPolicy",
                    "validate": false,
                    "optional": false,
                    "original": "policy"
                },
                {
                    "default": "_scope",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Specifies the scope for this policy. Only 'submit-job' is currently",
                        "supported."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"scope\" <$> TF.attribute",
                    "name": "_scope",
                    "method": "scope",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasScope",
                    "validate": false,
                    "optional": false,
                    "original": "scope"
                }
            ],
            "url": "https://www.terraform.io/docs/providers/nomad/r/sentinel_policy.html",
            "key": "nomad_sentinel_policy",
            "name": "SentinelPolicyResource",
            "threaded": true,
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"id\" <$> TF.attribute",
                    "name": "_computedId",
                    "method": "computedId",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedId",
                    "validate": false,
                    "optional": false,
                    "original": "id"
                }
            ],
            "parameters": [
                {
                    "default": "_enforcementLevel",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Specifies the enforcement level of the policy."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"enforcement_level\" <$> TF.attribute",
                    "name": "_enforcementLevel",
                    "method": "enforcementLevel",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasEnforcementLevel",
                    "validate": false,
                    "optional": false,
                    "original": "enforcement_level"
                },
                {
                    "default": "_name",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Unique name for this policy."
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"name\" <$> TF.attribute",
                    "name": "_name",
                    "method": "name",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasName",
                    "validate": false,
                    "optional": false,
                    "original": "name"
                },
                {
                    "default": "_policy",
                    "computed": false,
                    "required": true,
                    "help": [
                        "The Sentinel policy."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"policy\" <$> TF.attribute",
                    "name": "_policy",
                    "method": "policy",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPolicy",
                    "validate": false,
                    "optional": false,
                    "original": "policy"
                },
                {
                    "default": "_scope",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Specifies the scope for this policy. Only 'submit-job' is currently",
                        "supported."
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"scope\" <$> TF.attribute",
                    "name": "_scope",
                    "method": "scope",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasScope",
                    "validate": false,
                    "optional": false,
                    "original": "scope"
                }
            ],
            "conflicts": [],
            "type": "SentinelPolicyResource s",
            "original": "nomad_sentinel_policy"
        }
    ],
    "schema": {
        "con": {
            "smart": "newProvider",
            "name": "Provider'"
        },
        "arguments": [
            {
                "default": "_address",
                "computed": false,
                "required": true,
                "help": [
                    "URL of the root of the target Nomad agent."
                ],
                "forceNew": false,
                "encoder": "P.Just $ TF.assign \"address\"",
                "name": "_address",
                "method": "address",
                "threaded": false,
                "conflicts": [],
                "type": "P.Text",
                "class": "HasAddress",
                "validate": false,
                "optional": false,
                "original": "address"
            },
            {
                "default": "P.Nothing",
                "computed": false,
                "required": false,
                "help": [
                    "A path to a PEM-encoded certificate authority used to verify the remote",
                    "agent's certificate."
                ],
                "forceNew": false,
                "encoder": "TF.assign \"ca_file\" <$>",
                "name": "_caFile",
                "method": "caFile",
                "threaded": false,
                "conflicts": [],
                "type": "P.Maybe P.Text",
                "class": "HasCaFile",
                "validate": false,
                "optional": true,
                "original": "ca_file"
            },
            {
                "default": "P.Nothing",
                "computed": false,
                "required": false,
                "help": [
                    "A path to a PEM-encoded certificate provided to the remote agent; requires",
                    "use of key_file."
                ],
                "forceNew": false,
                "encoder": "TF.assign \"cert_file\" <$>",
                "name": "_certFile",
                "method": "certFile",
                "threaded": false,
                "conflicts": [],
                "type": "P.Maybe P.Text",
                "class": "HasCertFile",
                "validate": false,
                "optional": true,
                "original": "cert_file"
            },
            {
                "default": "P.Nothing",
                "computed": false,
                "required": false,
                "help": [
                    "A path to a PEM-encoded private key, required if cert_file is specified."
                ],
                "forceNew": false,
                "encoder": "TF.assign \"key_file\" <$>",
                "name": "_keyFile",
                "method": "keyFile",
                "threaded": false,
                "conflicts": [],
                "type": "P.Maybe P.Text",
                "class": "HasKeyFile",
                "validate": false,
                "optional": true,
                "original": "key_file"
            },
            {
                "default": "P.Nothing",
                "computed": false,
                "required": false,
                "help": [
                    "Region of the target Nomad agent."
                ],
                "forceNew": false,
                "encoder": "TF.assign \"region\" <$>",
                "name": "_region",
                "method": "region",
                "threaded": false,
                "conflicts": [],
                "type": "P.Maybe P.Text",
                "class": "HasRegion",
                "validate": false,
                "optional": true,
                "original": "region"
            },
            {
                "default": "P.Nothing",
                "computed": false,
                "required": false,
                "help": [
                    "ACL token secret for API requests."
                ],
                "forceNew": false,
                "encoder": "TF.assign \"secret_id\" <$>",
                "name": "_secretId",
                "method": "secretId",
                "threaded": false,
                "conflicts": [],
                "type": "P.Maybe P.Text",
                "class": "HasSecretId",
                "validate": false,
                "optional": true,
                "original": "secret_id"
            },
            {
                "default": "P.Nothing",
                "computed": false,
                "required": false,
                "help": [
                    "Vault token if policies are specified in the job file."
                ],
                "forceNew": false,
                "encoder": "TF.assign \"vault_token\" <$>",
                "name": "_vaultToken",
                "method": "vaultToken",
                "threaded": false,
                "conflicts": [],
                "type": "P.Maybe P.Text",
                "class": "HasVaultToken",
                "validate": false,
                "optional": true,
                "original": "vault_token"
            }
        ],
        "key": "provider",
        "name": "Provider",
        "threaded": false,
        "attributes": [],
        "parameters": [
            {
                "default": "_address",
                "computed": false,
                "required": true,
                "help": [
                    "URL of the root of the target Nomad agent."
                ],
                "forceNew": false,
                "encoder": "P.Just $ TF.assign \"address\"",
                "name": "_address",
                "method": "address",
                "threaded": false,
                "conflicts": [],
                "type": "P.Text",
                "class": "HasAddress",
                "validate": false,
                "optional": false,
                "original": "address"
            }
        ],
        "conflicts": [],
        "type": "Provider",
        "original": "provider"
    },
    "dependencies": [
        "aeson",
        "base",
        "containers",
        "microlens",
        "terrafomo",
        "text"
    ],
    "name": "Nomad",
    "package": "terrafomo-nomad",
    "primitives": [],
    "original": "nomad"
}