{
    "settings": [
        {
            "con": {
                "smart": "newSubjectSetting",
                "name": "SubjectSetting'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"common_name\" <$> TF.attribute",
                    "name": "_commonName",
                    "method": "commonName",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCommonName",
                    "validate": false,
                    "optional": true,
                    "original": "common_name"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"country\" <$> TF.attribute",
                    "name": "_country",
                    "method": "country",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCountry",
                    "validate": false,
                    "optional": true,
                    "original": "country"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"locality\" <$> TF.attribute",
                    "name": "_locality",
                    "method": "locality",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasLocality",
                    "validate": false,
                    "optional": true,
                    "original": "locality"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"organization\" <$> TF.attribute",
                    "name": "_organization",
                    "method": "organization",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasOrganization",
                    "validate": false,
                    "optional": true,
                    "original": "organization"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"organizational_unit\" <$> TF.attribute",
                    "name": "_organizationalUnit",
                    "method": "organizationalUnit",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasOrganizationalUnit",
                    "validate": false,
                    "optional": true,
                    "original": "organizational_unit"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"postal_code\" <$> TF.attribute",
                    "name": "_postalCode",
                    "method": "postalCode",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPostalCode",
                    "validate": false,
                    "optional": true,
                    "original": "postal_code"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"province\" <$> TF.attribute",
                    "name": "_province",
                    "method": "province",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasProvince",
                    "validate": false,
                    "optional": true,
                    "original": "province"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"serial_number\" <$> TF.attribute",
                    "name": "_serialNumber",
                    "method": "serialNumber",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasSerialNumber",
                    "validate": false,
                    "optional": true,
                    "original": "serial_number"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"street_address\" <$> TF.attribute",
                    "name": "_streetAddress",
                    "method": "streetAddress",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasStreetAddress",
                    "validate": false,
                    "optional": true,
                    "original": "street_address"
                }
            ],
            "key": "tls_cert_request.subject",
            "name": "SubjectSetting",
            "threaded": true,
            "attributes": [],
            "parameters": [],
            "conflicts": [],
            "type": "SubjectSetting s",
            "original": "subject"
        }
    ],
    "url": "https://www.terraform.io/docs/providers/tls/index.html",
    "dataSources": [
        {
            "con": {
                "smart": "publicKeyData",
                "name": "PublicKeyData'"
            },
            "arguments": [
                {
                    "default": "_privateKeyPem",
                    "computed": false,
                    "required": true,
                    "help": [
                        "PEM formatted string to use as the private key"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"private_key_pem\" <$> TF.attribute",
                    "name": "_privateKeyPem",
                    "method": "privateKeyPem",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPrivateKeyPem",
                    "validate": false,
                    "optional": false,
                    "original": "private_key_pem"
                }
            ],
            "url": "https://www.terraform.io/docs/providers/tls/d/public_key.html",
            "key": "tls_public_key",
            "name": "PublicKeyData",
            "threaded": true,
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"id\" <$> TF.attribute",
                    "name": "_computedId",
                    "method": "computedId",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedId",
                    "validate": false,
                    "optional": false,
                    "original": "id"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [
                        "Name of the algorithm to use to generate the private key"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"algorithm\" <$> TF.attribute",
                    "name": "_computedAlgorithm",
                    "method": "computedAlgorithm",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedAlgorithm",
                    "validate": false,
                    "optional": false,
                    "original": "algorithm"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"public_key_openssh\" <$> TF.attribute",
                    "name": "_computedPublicKeyOpenssh",
                    "method": "computedPublicKeyOpenssh",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedPublicKeyOpenssh",
                    "validate": false,
                    "optional": false,
                    "original": "public_key_openssh"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"public_key_pem\" <$> TF.attribute",
                    "name": "_computedPublicKeyPem",
                    "method": "computedPublicKeyPem",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedPublicKeyPem",
                    "validate": false,
                    "optional": false,
                    "original": "public_key_pem"
                }
            ],
            "parameters": [
                {
                    "default": "_privateKeyPem",
                    "computed": false,
                    "required": true,
                    "help": [
                        "PEM formatted string to use as the private key"
                    ],
                    "forceNew": false,
                    "encoder": "TF.assign \"private_key_pem\" <$> TF.attribute",
                    "name": "_privateKeyPem",
                    "method": "privateKeyPem",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPrivateKeyPem",
                    "validate": false,
                    "optional": false,
                    "original": "private_key_pem"
                }
            ],
            "conflicts": [],
            "type": "PublicKeyData s",
            "original": "tls_public_key"
        }
    ],
    "resources": [
        {
            "con": {
                "smart": "certRequestResource",
                "name": "CertRequestResource'"
            },
            "arguments": [
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "List of DNS names to use as subjects of the certificate"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"dns_names\" <$> TF.attribute",
                    "name": "_dnsNames",
                    "method": "dnsNames",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasDnsNames",
                    "validate": false,
                    "optional": true,
                    "original": "dns_names"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "List of IP addresses to use as subjects of the certificate"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"ip_addresses\" <$> TF.attribute",
                    "name": "_ipAddresses",
                    "method": "ipAddresses",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasIpAddresses",
                    "validate": false,
                    "optional": true,
                    "original": "ip_addresses"
                },
                {
                    "default": "_keyAlgorithm",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the algorithm to use to generate the certificate's private key"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"key_algorithm\" <$> TF.attribute",
                    "name": "_keyAlgorithm",
                    "method": "keyAlgorithm",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasKeyAlgorithm",
                    "validate": false,
                    "optional": false,
                    "original": "key_algorithm"
                },
                {
                    "default": "_privateKeyPem",
                    "computed": false,
                    "required": true,
                    "help": [
                        "PEM-encoded private key that the certificate will belong to"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"private_key_pem\" <$> TF.attribute",
                    "name": "_privateKeyPem",
                    "method": "privateKeyPem",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPrivateKeyPem",
                    "validate": false,
                    "optional": false,
                    "original": "private_key_pem"
                },
                {
                    "default": "_subject",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"subject\" <$> TF.attribute",
                    "name": "_subject",
                    "method": "subject",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (SubjectSetting s)]",
                    "class": "HasSubject",
                    "validate": false,
                    "optional": false,
                    "original": "subject"
                }
            ],
            "url": "https://www.terraform.io/docs/providers/tls/r/cert_request.html",
            "key": "tls_cert_request",
            "name": "CertRequestResource",
            "threaded": true,
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"cert_request_pem\" <$> TF.attribute",
                    "name": "_computedCertRequestPem",
                    "method": "computedCertRequestPem",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedCertRequestPem",
                    "validate": false,
                    "optional": false,
                    "original": "cert_request_pem"
                }
            ],
            "parameters": [
                {
                    "default": "_keyAlgorithm",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the algorithm to use to generate the certificate's private key"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"key_algorithm\" <$> TF.attribute",
                    "name": "_keyAlgorithm",
                    "method": "keyAlgorithm",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasKeyAlgorithm",
                    "validate": false,
                    "optional": false,
                    "original": "key_algorithm"
                },
                {
                    "default": "_privateKeyPem",
                    "computed": false,
                    "required": true,
                    "help": [
                        "PEM-encoded private key that the certificate will belong to"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"private_key_pem\" <$> TF.attribute",
                    "name": "_privateKeyPem",
                    "method": "privateKeyPem",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPrivateKeyPem",
                    "validate": false,
                    "optional": false,
                    "original": "private_key_pem"
                },
                {
                    "default": "_subject",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"subject\" <$> TF.attribute",
                    "name": "_subject",
                    "method": "subject",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (SubjectSetting s)]",
                    "class": "HasSubject",
                    "validate": false,
                    "optional": false,
                    "original": "subject"
                }
            ],
            "conflicts": [],
            "type": "CertRequestResource s",
            "original": "tls_cert_request"
        },
        {
            "con": {
                "smart": "locallySignedCertResource",
                "name": "LocallySignedCertResource'"
            },
            "arguments": [
                {
                    "default": "_allowedUses",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Uses that are allowed for the certificate"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"allowed_uses\" <$> TF.attribute",
                    "name": "_allowedUses",
                    "method": "allowedUses",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasAllowedUses",
                    "validate": false,
                    "optional": false,
                    "original": "allowed_uses"
                },
                {
                    "default": "_caCertPem",
                    "computed": false,
                    "required": true,
                    "help": [
                        "PEM-encoded CA certificate"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"ca_cert_pem\" <$> TF.attribute",
                    "name": "_caCertPem",
                    "method": "caCertPem",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCaCertPem",
                    "validate": false,
                    "optional": false,
                    "original": "ca_cert_pem"
                },
                {
                    "default": "_caKeyAlgorithm",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the algorithm used to generate the certificate's private key"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"ca_key_algorithm\" <$> TF.attribute",
                    "name": "_caKeyAlgorithm",
                    "method": "caKeyAlgorithm",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCaKeyAlgorithm",
                    "validate": false,
                    "optional": false,
                    "original": "ca_key_algorithm"
                },
                {
                    "default": "_caPrivateKeyPem",
                    "computed": false,
                    "required": true,
                    "help": [
                        "PEM-encoded CA private key used to sign the certificate"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"ca_private_key_pem\" <$> TF.attribute",
                    "name": "_caPrivateKeyPem",
                    "method": "caPrivateKeyPem",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCaPrivateKeyPem",
                    "validate": false,
                    "optional": false,
                    "original": "ca_private_key_pem"
                },
                {
                    "default": "_certRequestPem",
                    "computed": false,
                    "required": true,
                    "help": [
                        "PEM-encoded certificate request"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"cert_request_pem\" <$> TF.attribute",
                    "name": "_certRequestPem",
                    "method": "certRequestPem",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCertRequestPem",
                    "validate": false,
                    "optional": false,
                    "original": "cert_request_pem"
                },
                {
                    "default": "TF.value 0",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Number of hours before the certificates expiry when a new certificate will",
                        "be generated"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"early_renewal_hours\" <$> TF.attribute",
                    "name": "_earlyRenewalHours",
                    "method": "earlyRenewalHours",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Int",
                    "class": "HasEarlyRenewalHours",
                    "validate": false,
                    "optional": true,
                    "original": "early_renewal_hours"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Whether the generated certificate will be usable as a CA certificate"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"is_ca_certificate\" <$> TF.attribute",
                    "name": "_isCaCertificate",
                    "method": "isCaCertificate",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasIsCaCertificate",
                    "validate": false,
                    "optional": true,
                    "original": "is_ca_certificate"
                },
                {
                    "default": "_validityPeriodHours",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Number of hours that the certificate will remain valid for"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"validity_period_hours\" <$> TF.attribute",
                    "name": "_validityPeriodHours",
                    "method": "validityPeriodHours",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Int",
                    "class": "HasValidityPeriodHours",
                    "validate": false,
                    "optional": false,
                    "original": "validity_period_hours"
                }
            ],
            "url": "https://www.terraform.io/docs/providers/tls/r/locally_signed_cert.html",
            "key": "tls_locally_signed_cert",
            "name": "LocallySignedCertResource",
            "threaded": true,
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"cert_pem\" <$> TF.attribute",
                    "name": "_computedCertPem",
                    "method": "computedCertPem",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedCertPem",
                    "validate": false,
                    "optional": false,
                    "original": "cert_pem"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"validity_end_time\" <$> TF.attribute",
                    "name": "_computedValidityEndTime",
                    "method": "computedValidityEndTime",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedValidityEndTime",
                    "validate": false,
                    "optional": false,
                    "original": "validity_end_time"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"validity_start_time\" <$> TF.attribute",
                    "name": "_computedValidityStartTime",
                    "method": "computedValidityStartTime",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedValidityStartTime",
                    "validate": false,
                    "optional": false,
                    "original": "validity_start_time"
                }
            ],
            "parameters": [
                {
                    "default": "_caKeyAlgorithm",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the algorithm used to generate the certificate's private key"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"ca_key_algorithm\" <$> TF.attribute",
                    "name": "_caKeyAlgorithm",
                    "method": "caKeyAlgorithm",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCaKeyAlgorithm",
                    "validate": false,
                    "optional": false,
                    "original": "ca_key_algorithm"
                },
                {
                    "default": "_validityPeriodHours",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Number of hours that the certificate will remain valid for"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"validity_period_hours\" <$> TF.attribute",
                    "name": "_validityPeriodHours",
                    "method": "validityPeriodHours",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Int",
                    "class": "HasValidityPeriodHours",
                    "validate": false,
                    "optional": false,
                    "original": "validity_period_hours"
                },
                {
                    "default": "_caCertPem",
                    "computed": false,
                    "required": true,
                    "help": [
                        "PEM-encoded CA certificate"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"ca_cert_pem\" <$> TF.attribute",
                    "name": "_caCertPem",
                    "method": "caCertPem",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCaCertPem",
                    "validate": false,
                    "optional": false,
                    "original": "ca_cert_pem"
                },
                {
                    "default": "_caPrivateKeyPem",
                    "computed": false,
                    "required": true,
                    "help": [
                        "PEM-encoded CA private key used to sign the certificate"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"ca_private_key_pem\" <$> TF.attribute",
                    "name": "_caPrivateKeyPem",
                    "method": "caPrivateKeyPem",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCaPrivateKeyPem",
                    "validate": false,
                    "optional": false,
                    "original": "ca_private_key_pem"
                },
                {
                    "default": "_certRequestPem",
                    "computed": false,
                    "required": true,
                    "help": [
                        "PEM-encoded certificate request"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"cert_request_pem\" <$> TF.attribute",
                    "name": "_certRequestPem",
                    "method": "certRequestPem",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasCertRequestPem",
                    "validate": false,
                    "optional": false,
                    "original": "cert_request_pem"
                },
                {
                    "default": "_allowedUses",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Uses that are allowed for the certificate"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"allowed_uses\" <$> TF.attribute",
                    "name": "_allowedUses",
                    "method": "allowedUses",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasAllowedUses",
                    "validate": false,
                    "optional": false,
                    "original": "allowed_uses"
                }
            ],
            "conflicts": [],
            "type": "LocallySignedCertResource s",
            "original": "tls_locally_signed_cert"
        },
        {
            "con": {
                "smart": "privateKeyResource",
                "name": "PrivateKeyResource'"
            },
            "arguments": [
                {
                    "default": "_algorithm",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the algorithm to use to generate the private key"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"algorithm\" <$> TF.attribute",
                    "name": "_algorithm",
                    "method": "algorithm",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAlgorithm",
                    "validate": false,
                    "optional": false,
                    "original": "algorithm"
                },
                {
                    "default": "TF.value \"P224\"",
                    "computed": false,
                    "required": false,
                    "help": [
                        "ECDSA curve to use when generating a key"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"ecdsa_curve\" <$> TF.attribute",
                    "name": "_ecdsaCurve",
                    "method": "ecdsaCurve",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasEcdsaCurve",
                    "validate": false,
                    "optional": true,
                    "original": "ecdsa_curve"
                },
                {
                    "default": "TF.value 2048",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Number of bits to use when generating an RSA key"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"rsa_bits\" <$> TF.attribute",
                    "name": "_rsaBits",
                    "method": "rsaBits",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Int",
                    "class": "HasRsaBits",
                    "validate": false,
                    "optional": true,
                    "original": "rsa_bits"
                }
            ],
            "url": "https://www.terraform.io/docs/providers/tls/r/private_key.html",
            "key": "tls_private_key",
            "name": "PrivateKeyResource",
            "threaded": true,
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"private_key_pem\" <$> TF.attribute",
                    "name": "_computedPrivateKeyPem",
                    "method": "computedPrivateKeyPem",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedPrivateKeyPem",
                    "validate": false,
                    "optional": false,
                    "original": "private_key_pem"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"public_key_openssh\" <$> TF.attribute",
                    "name": "_computedPublicKeyOpenssh",
                    "method": "computedPublicKeyOpenssh",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedPublicKeyOpenssh",
                    "validate": false,
                    "optional": false,
                    "original": "public_key_openssh"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"public_key_pem\" <$> TF.attribute",
                    "name": "_computedPublicKeyPem",
                    "method": "computedPublicKeyPem",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedPublicKeyPem",
                    "validate": false,
                    "optional": false,
                    "original": "public_key_pem"
                }
            ],
            "parameters": [
                {
                    "default": "_algorithm",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the algorithm to use to generate the private key"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"algorithm\" <$> TF.attribute",
                    "name": "_algorithm",
                    "method": "algorithm",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasAlgorithm",
                    "validate": false,
                    "optional": false,
                    "original": "algorithm"
                }
            ],
            "conflicts": [],
            "type": "PrivateKeyResource s",
            "original": "tls_private_key"
        },
        {
            "con": {
                "smart": "selfSignedCertResource",
                "name": "SelfSignedCertResource'"
            },
            "arguments": [
                {
                    "default": "_allowedUses",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Uses that are allowed for the certificate"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"allowed_uses\" <$> TF.attribute",
                    "name": "_allowedUses",
                    "method": "allowedUses",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasAllowedUses",
                    "validate": false,
                    "optional": false,
                    "original": "allowed_uses"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "List of DNS names to use as subjects of the certificate"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"dns_names\" <$> TF.attribute",
                    "name": "_dnsNames",
                    "method": "dnsNames",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasDnsNames",
                    "validate": false,
                    "optional": true,
                    "original": "dns_names"
                },
                {
                    "default": "TF.value 0",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Number of hours before the certificates expiry when a new certificate will",
                        "be generated"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"early_renewal_hours\" <$> TF.attribute",
                    "name": "_earlyRenewalHours",
                    "method": "earlyRenewalHours",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Int",
                    "class": "HasEarlyRenewalHours",
                    "validate": false,
                    "optional": true,
                    "original": "early_renewal_hours"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "List of IP addresses to use as subjects of the certificate"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"ip_addresses\" <$> TF.attribute",
                    "name": "_ipAddresses",
                    "method": "ipAddresses",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasIpAddresses",
                    "validate": false,
                    "optional": true,
                    "original": "ip_addresses"
                },
                {
                    "default": "TF.Nil",
                    "computed": false,
                    "required": false,
                    "help": [
                        "Whether the generated certificate will be usable as a CA certificate"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"is_ca_certificate\" <$> TF.attribute",
                    "name": "_isCaCertificate",
                    "method": "isCaCertificate",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Bool",
                    "class": "HasIsCaCertificate",
                    "validate": false,
                    "optional": true,
                    "original": "is_ca_certificate"
                },
                {
                    "default": "_keyAlgorithm",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the algorithm to use to generate the certificate's private key"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"key_algorithm\" <$> TF.attribute",
                    "name": "_keyAlgorithm",
                    "method": "keyAlgorithm",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasKeyAlgorithm",
                    "validate": false,
                    "optional": false,
                    "original": "key_algorithm"
                },
                {
                    "default": "_privateKeyPem",
                    "computed": false,
                    "required": true,
                    "help": [
                        "PEM-encoded private key that the certificate will belong to"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"private_key_pem\" <$> TF.attribute",
                    "name": "_privateKeyPem",
                    "method": "privateKeyPem",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPrivateKeyPem",
                    "validate": false,
                    "optional": false,
                    "original": "private_key_pem"
                },
                {
                    "default": "_subject",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"subject\" <$> TF.attribute",
                    "name": "_subject",
                    "method": "subject",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (SubjectSetting s)]",
                    "class": "HasSubject",
                    "validate": false,
                    "optional": false,
                    "original": "subject"
                },
                {
                    "default": "_validityPeriodHours",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Number of hours that the certificate will remain valid for"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"validity_period_hours\" <$> TF.attribute",
                    "name": "_validityPeriodHours",
                    "method": "validityPeriodHours",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Int",
                    "class": "HasValidityPeriodHours",
                    "validate": false,
                    "optional": false,
                    "original": "validity_period_hours"
                }
            ],
            "url": "https://www.terraform.io/docs/providers/tls/r/self_signed_cert.html",
            "key": "tls_self_signed_cert",
            "name": "SelfSignedCertResource",
            "threaded": true,
            "attributes": [
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"cert_pem\" <$> TF.attribute",
                    "name": "_computedCertPem",
                    "method": "computedCertPem",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedCertPem",
                    "validate": false,
                    "optional": false,
                    "original": "cert_pem"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"validity_end_time\" <$> TF.attribute",
                    "name": "_computedValidityEndTime",
                    "method": "computedValidityEndTime",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedValidityEndTime",
                    "validate": false,
                    "optional": false,
                    "original": "validity_end_time"
                },
                {
                    "default": "TF.Nil",
                    "computed": true,
                    "required": false,
                    "help": [],
                    "forceNew": false,
                    "encoder": "TF.assign \"validity_start_time\" <$> TF.attribute",
                    "name": "_computedValidityStartTime",
                    "method": "computedValidityStartTime",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasComputedValidityStartTime",
                    "validate": false,
                    "optional": false,
                    "original": "validity_start_time"
                }
            ],
            "parameters": [
                {
                    "default": "_keyAlgorithm",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Name of the algorithm to use to generate the certificate's private key"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"key_algorithm\" <$> TF.attribute",
                    "name": "_keyAlgorithm",
                    "method": "keyAlgorithm",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasKeyAlgorithm",
                    "validate": false,
                    "optional": false,
                    "original": "key_algorithm"
                },
                {
                    "default": "_validityPeriodHours",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Number of hours that the certificate will remain valid for"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"validity_period_hours\" <$> TF.attribute",
                    "name": "_validityPeriodHours",
                    "method": "validityPeriodHours",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Int",
                    "class": "HasValidityPeriodHours",
                    "validate": false,
                    "optional": false,
                    "original": "validity_period_hours"
                },
                {
                    "default": "_privateKeyPem",
                    "computed": false,
                    "required": true,
                    "help": [
                        "PEM-encoded private key that the certificate will belong to"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"private_key_pem\" <$> TF.attribute",
                    "name": "_privateKeyPem",
                    "method": "privateKeyPem",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s P.Text",
                    "class": "HasPrivateKeyPem",
                    "validate": false,
                    "optional": false,
                    "original": "private_key_pem"
                },
                {
                    "default": "_subject",
                    "computed": false,
                    "required": true,
                    "help": [],
                    "forceNew": true,
                    "encoder": "TF.assign \"subject\" <$> TF.attribute",
                    "name": "_subject",
                    "method": "subject",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s (SubjectSetting s)]",
                    "class": "HasSubject",
                    "validate": false,
                    "optional": false,
                    "original": "subject"
                },
                {
                    "default": "_allowedUses",
                    "computed": false,
                    "required": true,
                    "help": [
                        "Uses that are allowed for the certificate"
                    ],
                    "forceNew": true,
                    "encoder": "TF.assign \"allowed_uses\" <$> TF.attribute",
                    "name": "_allowedUses",
                    "method": "allowedUses",
                    "threaded": true,
                    "conflicts": [],
                    "type": "TF.Attr s [TF.Attr s P.Text]",
                    "class": "HasAllowedUses",
                    "validate": false,
                    "optional": false,
                    "original": "allowed_uses"
                }
            ],
            "conflicts": [],
            "type": "SelfSignedCertResource s",
            "original": "tls_self_signed_cert"
        }
    ],
    "schema": {
        "con": {
            "smart": "newProvider",
            "name": "Provider'"
        },
        "arguments": [],
        "key": "provider",
        "name": "Provider",
        "threaded": false,
        "attributes": [],
        "parameters": [],
        "conflicts": [],
        "type": "Provider",
        "original": "provider"
    },
    "dependencies": [
        "aeson",
        "base",
        "containers",
        "microlens",
        "terrafomo",
        "text"
    ],
    "name": "TLS",
    "package": "terrafomo-builtins",
    "primitives": [],
    "original": "tls"
}